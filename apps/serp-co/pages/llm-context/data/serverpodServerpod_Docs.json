[
  {
    "owner": "serverpod",
    "repo": "serverpod_docs",
    "content": "TITLE: Bidirectional One-to-Many Relationship with Foreign Key in Serverpod YAML\nDESCRIPTION: This example demonstrates a bidirectional relationship using foreign keys in Serverpod. The `company_employees` name parameter links the `employees` list in `Company` with the `companyId` field in `Employee`, facilitating mutual access and operations across both models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation(name=company_employees, parent=company)\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to start Docker containers and run the Serverpod server with database migrations applied.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Class Implementation in Dart\nDESCRIPTION: Complete example of implementing a custom serializable class with constructor, toJson, and fromJson methods in a shared package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass ClassName {\n  String name;\n  ClassName(this.name);\n\n  toJson() {\n    return {\n      'name': name,\n    };\n  }\n\n  factory ClassName.fromJson(\n    Map<String, dynamic> jsonSerialization,\n  ) {\n    return ClassName(\n      jsonSerialization['name'],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SignInWithGoogleButton in Flutter\nDESCRIPTION: Dart code for adding the Google Sign-In button to a Flutter app using the serverpod_auth_google_flutter package. This snippet shows the basic implementation with server client ID and redirect URI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Serverpod Endpoint in Dart\nDESCRIPTION: This snippet demonstrates how to create a simple endpoint in Serverpod. The endpoint extends the Endpoint class and includes a method that returns a Future<String>. The method takes a Session object as its first parameter, which is required for all endpoint methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/06-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including multiple relational objects in Serverpod\nDESCRIPTION: This snippet showcases including multiple relational objects simultaneously using the `include` method in Serverpod. It retrieves an `Employee` object, including both the related `Address` and `Company` objects, with the `Company` object also including its related `Address`. This example demonstrates how to retrieve multiple levels of related data in a single query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"var user = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class in YAML for Serverpod\nDESCRIPTION: This YAML snippet defines a serializable class named `Company` with two fields: `name` (String) and `foundedDate` (nullable DateTime).  This structure is used by Serverpod to automatically generate the corresponding Dart class, which can be used for data serialization and transfer.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/07-serializing-data.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\nfields:\n  name: String\n  foundedDate: DateTime?\"\n```\n\n----------------------------------------\n\nTITLE: Creating a new Serverpod project using command line\nDESCRIPTION: This command creates a new Serverpod project. It uses the serverpod tool to generate the necessary files and directory structure for the project, including server, client, and Flutter app packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create mypod\"\n```\n\n----------------------------------------\n\nTITLE: Defining Database-Mapped Class in YAML\nDESCRIPTION: Example of defining a 'Company' class with database table mapping in YAML for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serverpod Client and SessionManager\nDESCRIPTION: Initializes a Client and SessionManager for a Flutter app to manage user sessions and connect to the Serverpod backend. Handles authentication key management and user state monitoring.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  // Need to call this as we are using Flutter bindings before runApp is called.\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // The android emulator does not have access to the localhost of the machine.\n  // const ipAddress = '10.0.2.2'; // Android emulator ip for the host\n\n  // On a real device replace the ipAddress with the IP address of your computer.\n  const ipAddress = 'localhost';\n\n  // Sets up a singleton client object that can be used to talk to the server from\n  // anywhere in our app. The client is generated from your server code.\n  // The client is set up to connect to a Serverpod running on a local server on\n  // the default port. You will need to modify this to connect to staging or\n  // production servers.\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  // The session manager keeps track of the signed-in state of the user. You\n  // can query it to see if the user is currently signed in and get information\n  // about the user.\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Database Transaction in Serverpod with Dart\nDESCRIPTION: Demonstrates how to perform multiple database operations within a single transaction using Serverpod's session.dbNext.transaction method. The example shows inserting both a company and employee record atomically, with automatic rollback if any operation fails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.dbNext.transaction((transaction) async {\n  // Do some database queries here.\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter Demo App\nDESCRIPTION: These commands navigate to the Flutter app directory within the Serverpod project and then runs the Flutter application in Chrome.  The `-d chrome` flag specifies the target device for the Flutter run command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cd mypod/mypod_flutter\n$ flutter run -d chrome\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Scopes for Serverpod Authorization in Dart\nDESCRIPTION: Illustrates how to create custom scopes by extending the Scope class for more granular access control in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User ID in Serverpod\nDESCRIPTION: Retrieves the user ID of the currently authenticated user from the session object. This method allows accessing the authenticated user's unique identifier.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = (await session.authenticated)?.userId;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializable Class in Dart for Serverpod\nDESCRIPTION: This Dart snippet shows a complete implementation of a custom serializable class including the constructor, toJson(), and fromJson() methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ClassName {\n  String name;\n  ClassName(this.name);\n\n  toJson() {\n    return {\n      'name': name,\n    };\n  }\n\n  factory ClassName.fromJson(\n    Map<String, dynamic> jsonSerialization,\n  ) {\n    return ClassName(\n      jsonSerialization['name'],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Serverpod Transactions in Dart\nDESCRIPTION: This code snippet demonstrates how to use the `session.db.transaction` method to execute a series of database operations within a single atomic transaction. It inserts a company and an employee into the database. If any of the operations fail, the entire transaction is rolled back, ensuring data consistency. The `transaction` method returns the value returned by the callback function.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n\n  // Optionally return a value.\n  return true;\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation\nDESCRIPTION: Client-side code demonstrating the complete file upload process including requesting upload description, uploading file, and verification.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Class with ProtocolSerialization in Dart\nDESCRIPTION: This snippet shows a custom class implementing the `ProtocolSerialization` interface. The `toJsonForProtocol()` method is used to serialize the object for protocol communication, allowing for omitting certain fields for security or data integrity reasons. The `toJson()` serializes all the fields for general use.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements ProtocolSerialization {\n  final String? value;\n  final String? serverSideValue;\n\n  .......\n\n  // Serializes fields specifically for protocol communication\n  Map<String, dynamic> toJsonForProtocol() {\n    return {\n      \"value\":value,\n    };\n  }\n\n  // Serializes all fields, including those intended only for server-side use\n  Map<String, dynamic> toJson() {\n    return {\n      \"value\": value,\n      \"serverSideValue\": serverSideValue,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Class Model in YAML\nDESCRIPTION: A basic example of how to define a Company class with various field types including String, DateTime, and a List of another model type. This structure generates a serializable class in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Starting the Server - Bash\nDESCRIPTION: These commands navigate to the server directory of the created Mini project and start the Dart server, enabling the backend functionalities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/02-get-started-with-mini.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row Using a Condition in Serverpod\nDESCRIPTION: This snippet demonstrates how to find a single row using specific conditions with the `findFirstRow` method. It filters using an expression and returns the first model matching the criteria or null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('Serverpod'),\n);\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Rows in Serverpod Dart\nDESCRIPTION: This Dart snippet shows how to insert multiple rows in a batch operation using the 'insert' method. It creates an array of Company objects and inserts them atomically into the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar rows = [Company(name: 'Serverpod'), Company(name: 'Google')];\nvar companies = await Company.db.insert(session, rows);\n```\n\n----------------------------------------\n\nTITLE: Finding First Row with Condition in Dart\nDESCRIPTION: This Dart code exemplifies how to perform a refined search in the database using 'db.findFirstRow'. It fetches the first matching record based on a specified condition using a typed expression builder.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Endpoint in Serverpod\nDESCRIPTION: Creates an example endpoint that extends the Endpoint class with a hello method that takes a name parameter and returns a greeting string. The method requires a Session object as its first parameter and returns a Future<String>.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Server Settings with YAML\nDESCRIPTION: YAML configuration file example showing all major server settings including API, insights, web server, database, and Redis configurations. File should be placed in config directory and named after the run mode (e.g., development.yaml).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/07-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost\n  publicPort: 8080\n  publicScheme: http\n\ninsightsServer:\n  port: 8081\n  publicHost: localhost\n  publicPort: 8081\n  publicScheme: http\n\nwebServer:\n  port: 8082\n  publicHost: localhost\n  publicPort: 8082\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 8090\n  name: database_name\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 8091\n\nmaxRequestSize: 524288\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token from Client Key Manager in Dart\nDESCRIPTION: This snippet illustrates retrieving a stored authentication token from a client key manager using the `get` method in Dart. It's designed for use in a Serverpod client that has a configured `AuthenticationKeyManager`. It outputs the token stored in the internal key manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar token = await client.authenticationKeyManager?.get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope-based Authorization for Serverpod Endpoints in Dart\nDESCRIPTION: This code demonstrates how to restrict access to a Serverpod endpoint based on user scopes, specifically requiring admin scope.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Completing the Notes Endpoint Implementation - Dart\nDESCRIPTION: This final snippet shows the complete implementation of the NotesEndpoint class with methods to create, delete and fetch notes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    return await Note.db.find(\n      session,\n      orderBy: (t) => t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.db.insertRow(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.db.deleteRow(session, note);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parent/Child Relationships in YAML\nDESCRIPTION: This YAML snippet represents an 'Employee' class linked to a 'Company' table with a parent-child relationship. It defines that an Employee must have a 'companyId' that corresponds to a valid company, promoting referential integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Employee\n  table: employee\n  fields:\n    companyId: int, parent=company\n    name: String\n    birthday: DateTime\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter App Implementation\nDESCRIPTION: Full implementation of the notes app including client setup, state management, and UI components.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n                    _notes!.add(note);\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization Method in Dart\nDESCRIPTION: This snippet shows the implementation of the toJson() method in Dart, which is required for custom serialization in Serverpod.  It returns a Map<String, dynamic> representing the JSON serialization of the object. This method is used when serializing the object for storage or transmission.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n    Map<String, dynamic> toJson() {\n    return {\n        name: 'John Doe',\n    };\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notes Endpoint - Dart\nDESCRIPTION: This snippet defines the 'NotesEndpoint' class, which extends the Serverpod Endpoint class. It imports necessary dependencies for handling note-related operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  // Endpoint implementation goes here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information via Serverpod Users Class\nDESCRIPTION: Retrieves detailed user information by user ID using the Users class's static method findUserByUserId. It requires the user to be signed in and the session to be initiated. Input is a Session and a userId, and it outputs user information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Example Serverpod Integration Test\nDESCRIPTION: Sample integration test using the Serverpod test tools to test an endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:test/test.dart';\n\n// Import the generated file, it contains everything you need.\nimport 'test_tools/serverpod_test_tools.dart';\n\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    test('when calling `hello` then should return greeting', () async {\n      final greeting = await endpoints.example.hello(sessionBuilder, 'Michael');\n      expect(greeting, 'Hello Michael');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting User Data with Caching in Serverpod Dart\nDESCRIPTION: This Dart snippet demonstrates fetching user data in Serverpod, first attempting retrieval from a local cache before querying the database. It uses a unique cache key for each user, storing results for 5 minutes. Dependencies include the Serverpod session management and caching utilities. Inputs are the session object and a user ID, and it outputs the corresponding UserData object. This approach enhances performance by minimizing database hits.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/08-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = UserData.db.findById(session, userId);\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new Serverpod project using command line\nDESCRIPTION: Command to create a new Serverpod project named 'mypod'. This creates a directory with three packages: server, client, and Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/03-creating-project.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Invoking Future Calls at Specific Time - Serverpod Dart\nDESCRIPTION: This snippet depicts how to schedule a future call to be executed at a specific date and time using `futureCallAtTime`. It requires the unique call name, data, and a `DateTime` object specifying the execution time. The `data` parameter should match what is expected by the future call, and may also be null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/14-scheduling.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallAtTime(\n  'exampleFutureCall',\n  data,\n  DateTime(2025, 1, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube API with Google Authentication in Serverpod\nDESCRIPTION: Server-side code demonstrating how to create an authenticated client for a user who signed in with Google, then using this client to access the YouTube API and retrieve the user's liked videos.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI using Dart Pub\nDESCRIPTION: This command installs the Serverpod command line interface (CLI) tools globally using Dart's pub package manager. This is the first step in setting up Serverpod for development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Generated Classes Using Dart Extensions\nDESCRIPTION: Example showing how to add custom methods to Serverpod-generated model classes using Dart's extension feature rather than modifying the generated code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nextension MyExtension on MyClass {\n  bool isCustomMethod() {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: Commands to navigate to Flutter app directory and run the app in Chrome\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/02-get-started-with-mini.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Deleting Several Rows in Serverpod\nDESCRIPTION: This code snippet shows how to batch delete multiple rows using the `delete` method, which is atomic. No rows will be deleted if any individual deletion fails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.delete(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Endpoint with Custom Authentication in Serverpod (Dart)\nDESCRIPTION: This snippet shows an example of a login endpoint that authenticates a user and issues a custom token. It demonstrates how to implement custom authentication logic in a Serverpod endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass UserEndpoint extends Endpoint {\n  Future<LoginResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    var identifier = authenticateUser(session, username, password);\n    if (identifier == null) return null;\n\n    return issueMyToken(identifier, scopes: {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Endpoint Access in Serverpod\nDESCRIPTION: Example of restricting endpoint access to authenticated users by overriding the requireLogin property\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering All Matching Related Entries in Dart using Serverpod\nDESCRIPTION: This snippet uses the 'every' operator to filter users with orders only for 'book' item types, requiring a defined sub-filter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.every((o) => o.itemType.equals('book'))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod Endpoint (Dart)\nDESCRIPTION: This Dart code defines a simple Serverpod endpoint with a single method called `hello`.  The `hello` method takes a `Session` object and a `String` as input and returns a `Future<String>`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"import 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Installing GCP Storage Package\nDESCRIPTION: Command to add Google Cloud Storage package dependency to the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub add serverpod_cloud_storage_gcp\n```\n\n----------------------------------------\n\nTITLE: Including nested objects within a relational list in Serverpod\nDESCRIPTION: This snippet shows how to include nested objects within a list of related objects in Serverpod, using `includeList` with the `includes` parameter.  It retrieves a `Company` along with its `Employee` list, and for each employee, it includes the associated `Address`. This requires using the `includes` property within the `includeList` call.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"var user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        address: Address.include(),\n      ),\n    ),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by CEO's Name - Dart\nDESCRIPTION: Fetches all companies from the database and sorts them by their CEO's name using a chained field reference in the 'orderBy' parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.ceo.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Listening to Authentication State Changes\nDESCRIPTION: Subscribe to changes in the SessionManager to react to user sign-in state changes in your Flutter app. This example rebuilds the UI when authentication state changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n\n  // Rebuild the page if signed in status changes.\n  sessionManager.addListener(() {\n    setState(() {});\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Row in Dart with Serverpod\nDESCRIPTION: This Dart snippet shows how to update a single row in the 'company' table using the `updateRow` method. First, it fetches a `Company` object by its ID. Then, it modifies the name of the company and calls `updateRow` to persist the changes to the database. The method returns the updated `Company` object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"var company = await Company.db.findById(session, companyId); // Fetched company has its id set \ncompany.name = 'New name';\nvar updatedCompany = await Company.db.updateRow(session, company);\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Table Model in Serverpod\nDESCRIPTION: A simple example of mapping a serializable class to a database table by adding the 'table' keyword in the YAML definition. This creates a 'company' table with a 'name' field and an automatically generated 'id' field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Creating an Endpoint in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to create a basic endpoint in Serverpod. The endpoint extends the Endpoint class and includes a method that returns a Future<String>. The first parameter of the method is a Session object, which is required for all endpoint methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows in Serverpod\nDESCRIPTION: This code snippet demonstrates how to find multiple rows that match a specific condition using the `find` method. It returns a List of models based on the filtering criteria.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Relation Filtering\nDESCRIPTION: Demonstrates advanced filtering techniques for related entries using none, any, and every methods\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.none((o) => o.itemType.equals('book'))\n);\n```\n\n----------------------------------------\n\nTITLE: Requiring User Login on Endpoints in Dart\nDESCRIPTION: This class overrides the 'requireLogin' property of the Endpoint class to ensure that a user must be logged in to access the methods defined in this endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Filter in Serverpod using Dart\nDESCRIPTION: Demonstrates how to count the number of rows that match a specific filter using the count method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar count = await Company.db.count(\n  session, \n  where: (t) => t.name.like('s%'),\n);\n```\n\n----------------------------------------\n\nTITLE: Signing Out a Single Device in Dart\nDESCRIPTION: This code snippet demonstrates how to sign out a user from a single device using the 'signOutDevice' method on the 'StatusEndpoint' in a Serverpod application. This method retrieves the authentication key from the session object and revokes it. It requires the 'serverpod_auth' module and uses the 'client.modules.auth.status' object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutDevice();\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Authentication with Serverpod\nDESCRIPTION: This Dart snippet illustrates the setup of a `SessionManager` in a Flutter app to manage the user's authentication state using the Serverpod framework. Requires setting up the client with proper server URL and authentication key manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  // Need to call this as we are using Flutter bindings before runApp is called.\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Sets up a singleton client object that can be used to talk to the server\n  // from anywhere in our app. The client is generated from your server code.\n  // The client is set up to connect to a Serverpod running on a local server on\n  // the default port. You will need to modify this to connect to staging or\n  // production servers.\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  // The session manager keeps track of the signed-in state of the user. You\n  // can query it to see if the user is currently signed in and get information\n  // about the user.\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Dart\nDESCRIPTION: This snippet defines a Future method _createNote that takes a Note object, calls the createNote method on the server, and refreshes the list of notes. It also includes error handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing toJson() Method for Custom Serialization in Dart\nDESCRIPTION: Example of a toJson() method implementation that returns a JSON serialization of the object, which is required for custom serializable objects in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMap<String, dynamic> toJson() {\n  return {\n    name: 'John Doe',\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Serverpod CLI using Dart\nDESCRIPTION: This snippet demonstrates how to activate the Serverpod CLI globally using Dart's package manager. Ensure Flutter and Dart are installed and configured prior to running this command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Serverpod Endpoint in Dart\nDESCRIPTION: Demonstrates how to create a simple endpoint class that extends Endpoint with a hello method. The endpoint handles a basic string parameter and returns a greeting message.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query with Parameter Binding in Dart\nDESCRIPTION: Demonstrates how to execute a SELECT query using unsafeQuery with named parameter binding for safe SQL execution. Returns a DatabaseResult containing the query results.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeQuery(\n  r'SELECT * FROM mytable WHERE id = @id', \n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Indexes to Database Tables - YAML\nDESCRIPTION: This snippet demonstrates how to add an index to a database table in a YAML-file. Indexes are added in a map format, with the key being the name of the index and the value containing the fields to be indexed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Bearer Token Authentication in Serverpod\nDESCRIPTION: Example of extending the authentication system to support OAuth with bearer tokens, including both client and server-side implementations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyOAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n\n  @override\n  Future<String?> toHeaderValue(String? key) async {\n    if (key == null) return null;\n    return 'Bearer ${myBearerTokenObtainer(key)}';\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Initialize Serverpod and connect it with your generated code.\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Bearer token validation handler\n    var (uid, scopes) = myBearerTokenValidator(token)\n    if (uid == null) return null;\n\n    return AuthenticationInfo(uid, scopes);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Row in Serverpod using Dart\nDESCRIPTION: Demonstrates how to insert a single Company row into the database using the 'insertRow' method on the generated model. Returns the inserted object with the 'id' field set.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar row = Company(name: 'Serverpod');\nvar company = await Company.db.insertRow(session, row);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Transaction in Serverpod with Dart\nDESCRIPTION: Example of using Serverpod's transaction method to perform multiple database operations atomically. This snippet demonstrates inserting both a company and an employee record in a single transaction, ensuring that either both records are inserted or neither is.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Firebase Auth UI in Flutter\nDESCRIPTION: This Dart code shows how to manually trigger the Firebase authentication UI in a Flutter app using the signInWithFirebase method. This method requires the BuildContext, a Serverpod client, and a list of Firebase auth providers, returning a nullable UserInfo object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait signInWithFirebase(\n  context: context, \n  caller: client.modules.auth, \n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Endpoint in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to create a basic endpoint in Serverpod. It extends the Endpoint class and defines a method that returns a Future<String>. The method takes a Session object and a String parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Token in Serverpod\nDESCRIPTION: This snippet demonstrates how to create an authentication token for a user using the UserAuthentication.signInUser method. It includes specifying the authentication method and assigning scopes to the token.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Notes Application with Serverpod Integration\nDESCRIPTION: The complete implementation of a Flutter notes application using Serverpod. It includes client initialization, note management methods, and UI components for creating and displaying notes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\n// Sets up a singleton client object that can be used to talk to the server from\n// anywhere in our app. The client is generated from your server code.\n// The client is set up to connect to a Serverpod running on a local server on\n// the default port. You will need to modify this to connect to staging or\n// production servers.\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  // This field holds the list of notes that we've received from the server or\n  // null if no notes have been received yet.\n  List<Note>? _notes;\n\n  // If the connection to the server fails, this field will hold the exception\n  // that was thrown.\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    // If the connection to the server fails, we clear the list of notes and\n    // store the exception that was thrown. This will make the loading screen\n    // appear and show a button to try again.\n\n    // In a real app you would probably want to do more complete error handling.\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                // When we tap the floating action button we want to show a\n                // dialog where we can create a new note.\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n\n                    // Add the note to the list of notes before we've received\n                    // a response from the server which makes the UI feel more\n                    // responsive.\n                    _notes!.add(note);\n\n                    // Actually create the note on the server.\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named and Positional Query Parameters in Dart\nDESCRIPTION: Illustrates how to use both named and positional parameters in raw SQL queries to prevent SQL injection. Named parameters use '@' prefix, while positional parameters use '$1', '$2', etc.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Named parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = @color AND size = @size',\n  QueryParameters.named({\n    'color': 'green',\n    'size': 'XL',\n  }));\n\n// Positional parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',\n  QueryParameters.positional(['green', 'XL']),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Database-Mapped Model in Serverpod\nDESCRIPTION: YAML definition for a model class with database table mapping in Serverpod. This example maps a Company class to a database table named 'company'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Using Named and Positional Query Parameters in Dart\nDESCRIPTION: Illustrates how to use named and positional query parameters to protect against SQL injection when executing raw SQL queries. Named parameters use '@' prefix, while positional parameters use '$' followed by a number.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Named parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = @color AND size = @size',\n  QueryParameters.named({\n    'color': 'green',\n    'size': 'XL',\n  }));\n\n// Positional parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',\n  QueryParameters.positional(['green', 'XL']),\n);\n```\n\n----------------------------------------\n\nTITLE: Notes API Endpoint Implementation\nDESCRIPTION: Dart implementation of the NotesEndpoint class that provides CRUD operations for notes, including creating, deleting, and retrieving notes from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package/serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    // By ordering by the id column, we always get the notes in the same order\n    // and not in the order they were updated.\n    return await Note.db.find(\n      session,\n      orderBy: (t) => t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.db.insertRow(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.db.deleteRow(session, note);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Filtering Conditions\nDESCRIPTION: Shows how to use logical operators (&, |) to create complex query conditions combining multiple filters\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.equals('Alice') & (t.age > 25))\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Filtered Employee Count in Dart using Serverpod\nDESCRIPTION: This example shows how to sort companies based on a filtered count of related entities. It orders companies by the number of employees with the role of 'developer'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(\n    (employee) => employee.role.equals('developer'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Configuration in Serverpod (Dart)\nDESCRIPTION: This Dart code snippet demonstrates how to set the authentication configuration using the 'serverpod_auth_server' module. It includes sending validation and password reset emails. The code awaits the start of the Serverpod server. It requires the 'serverpod_auth_server' package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Update Listener\nDESCRIPTION: Method to handle real-time updates from the server, including full image data and individual pixel changes\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  Future<void> _listenToUpdates() async {\n    // Indefinitely try to connect and listen to updates from the server.\n    while (true) {\n      try {\n        // Get the stream of updates from the server.\n        final imageUpdates = client.pixorama.imageUpdates();\n\n        // Listen for updates from the stream. The await for construct will\n        // wait for a message to arrive from the server, then run through the\n        // body of the loop.\n        await for (final update in imageUpdates) {\n          // Check which type of update we have received.\n          if (update is ImageData) {\n            // This is a complete image update, containing all pixels in the\n            // image. Create a new PixelImageController with the pixel data.\n            setState(() {\n              _imageController = PixelImageController(\n                pixels: update.pixels,\n                palette: PixelPalette.rPlace(),\n                width: update.width,\n                height: update.height,\n              );\n            });\n          } else if (update is ImageUpdate) {\n            // Got an incremental update of the image. Just set the single\n            // pixel.\n            _imageController?.setPixelIndex(\n              pixelIndex: update.pixelIndex,\n              colorIndex: update.colorIndex,\n            );\n          }\n        }\n      } on MethodStreamException catch (_) {\n        // We lost the connection to the server, or failed to connect.\n        setState(() {\n          _imageController = null;\n        });\n      }\n\n      // Wait 5 seconds until we try to connect again.\n      await Future.delayed(Duration(seconds: 5));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Signed-In User in Session Manager\nDESCRIPTION: Registers a user with the SessionManager by persisting their information and refreshing any open streaming connections. Requires userInfo, keyId, and authKey parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.registerSignedInUser(\n  userInfo,\n  keyId,\n  authKey,\n);\n```\n\n----------------------------------------\n\nTITLE: Attaching a Single Employee to a Company\nDESCRIPTION: This snippet demonstrates how to link an individual employee to a company using the `attachRow` method. It first retrieves the company and employee objects, then associates the employee with the specified company. This establishes a relationship between the two records.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attachRow.employees(session, company!, employee!);\n\n```\n\n----------------------------------------\n\nTITLE: Including Relational Data in Serverpod Queries\nDESCRIPTION: The snippet demonstrates how to include relational data using the Serverpod framework. It uses the 'include' method to incorporate related data objects in the query result. No additional dependencies are required beyond Serverpod's query framework. Inputs include 'session' and 'employeeId', and the result includes an employee with the associated address.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Serverpod (Dart)\nDESCRIPTION: This code shows how to retrieve detailed user information using the static 'findUserByUserId' method of the 'Users' class in Serverpod. It requires a valid session and user ID as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Fetching and Revoking an Auth Key using AuthenticationInfo in Serverpod\nDESCRIPTION: This snippet shows how to fetch the authentication information from the current session and then revoke the corresponding authentication key using `UserAuthentication.revokeAuthKey` in Serverpod. This is useful for logging out the current user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Fetch the authentication information for the current session\nvar authId = (await session.authenticated)?.authId;\n\n// Revoke the authentication key if the session is authenticated and has an authId\nif (authId != null) {\n  await UserAuthentication.revokeAuthKey(\n    session,\n    authKeyId: authId,\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Manually Creating and Closing a Serverpod Session\nDESCRIPTION: Shows how to manually create a session using the Serverpod singleton when performing operations outside of standard method calls. Emphasizes the importance of closing the session to prevent memory leaks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/05-sessions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Manually create a session\nvar session = Serverpod.instance.createSession();\n\n// Perform operations...\n\n// Close the session\nsession.close();\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class in YAML\nDESCRIPTION: This YAML snippet defines a serializable class named 'Company' with fields such as 'name', 'foundedDate', and 'employees'. These fields are typed, supporting options like String and List along with null safety for DateTime. The snippet is used for generating Dart classes and database schemas.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Every Filter in Dart\nDESCRIPTION: Illustrates how to filter users where all related one-to-many objects match a specific condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.every((o) => o.itemType.equals('book'))\n);\n```\n\n----------------------------------------\n\nTITLE: Storing Token in AuthenticationKeyManager in Serverpod Client\nDESCRIPTION: This snippet shows how to store a token in the `AuthenticationKeyManager` of a Serverpod client. The `put` method is used to store the token, which will then be included in subsequent requests to the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait client.authenticationKeyManager?.put(token);\n\n```\n\n----------------------------------------\n\nTITLE: Double Default Value in YAML\nDESCRIPTION: Example of setting a default double value in a field definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndoubleDefault: double, default=10.5\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Exception with YAML in Serverpod\nDESCRIPTION: This YAML snippet defines a serializable exception named `MyException` with two fields: `message` (a String) and `errorType` (a custom enum `MyEnum`). This allows you to pass structured error information from the server to the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"exception: MyException\nfields:\n  message: String\n  errorType: MyEnum\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Details in YAML for Serverpod\nDESCRIPTION: This YAML snippet shows the structure for specifying database connection details in Serverpod's configuration file. It includes host, port, database name, and user information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndatabase:\n  host: localhost\n  port: 8090\n  name: <YOUR_PROJECT_NAME>\n  user: postgres\n...\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Multiple Rows in Serverpod using Dart\nDESCRIPTION: Shows how to update multiple Company rows in a single atomic operation using the 'update' method. All entries are updated or none if any fails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name')).toList();\nvar updatedCompanies = await Company.db.update(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Including Relational Data in Queries with Serverpod in Dart\nDESCRIPTION: This snippet demonstrates how to include related objects in a query result using the include method in Serverpod. It fetches an employee with a related address through defined relations in the yaml file. Dependencies include the Serverpod framework and properly defined models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns in Dart with Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to update specific columns of a single row in the 'company' table using the `updateRow` method and the `columns` parameter. It fetches a `Company` object, modifies both the name and address, but only updates the name in the database. The method returns the updated `Company` object with only the specified columns updated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"var company = await Company.db.findById(session, companyId); \ncompany.name = 'New name';\ncompany.address = 'Baker street';\nvar updatedCompany = await Company.db.updateRow(session, company, columns: (t) => [t.name]);\"\n```\n\n----------------------------------------\n\nTITLE: Implementing fromJson Factory in Dart\nDESCRIPTION: Factory constructor implementation for deserializing JSON data into custom objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\nMap<String, dynamic> json,\n) {\nreturn ClassName(\n    name: json['name'] as String,\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Database with Expressions in Serverpod\nDESCRIPTION: Dart code for querying a database table with expressions in Serverpod. This example searches for a Company with a specific name using the db.findFirstRow method with a where clause.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Dart\nDESCRIPTION: This Dart snippet illustrates how to execute raw SQL queries against the database using the 'query' method, which returns a data structure containing the result set, suitable for advanced or custom database operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Filtered List Relation Count Sorting in Dart using Serverpod\nDESCRIPTION: Shows how to sort companies based on a filtered count of related employees, specifically counting only developers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(\n    (employee) => employee.role.equals('developer'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering by Not Equals in Dart using Serverpod\nDESCRIPTION: This snippet shows how to filter users by excluding an exact match using 'notEquals'. Depends on a User model with a 'name' column. It retrieves users whose names are not 'Bob'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notEquals('Bob')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Flutter\nDESCRIPTION: Async method to create new notes using the notes endpoint and handle errors. This method saves the note to the server and refreshes the notes list.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating Users in Serverpod (Dart)\nDESCRIPTION: This Dart code snippet demonstrates how to use Serverpod's authentication module to find a user by email or unique identifier, and create a new user if none is found. This involves interacting with the `Users` class methods, which require a session context and supporting user details.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nUserInfo? userInfo;\nuserInfo = await Users.findUserByEmail(session, email);\nuserInfo ??= await Users.findUserByIdentifier(session, userIdentifier);\nif (userInfo == null) {\n  userInfo = UserInfo(\n    userIdentifier: userIdentifier,\n    userName: name,\n    email: email,\n    blocked: false,\n    created: DateTime.now().toUtc(),\n    scopeNames: [],\n  );\n  userInfo = await Users.createUser(session, userInfo, _authMethod);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Basic Database Transaction in Dart with Serverpod\nDESCRIPTION: Demonstrates how to perform a basic database transaction using Serverpod's session.db.transaction method. The example shows inserting a company and an employee in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Serverpod Endpoint in Dart\nDESCRIPTION: Example of creating a basic endpoint class that extends Endpoint with a hello method that takes a Session and name parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Handler in Serverpod 2.0\nDESCRIPTION: Shows how to implement the new authentication handler in the server.dart file using the serverpod_auth_server package. This is required due to authentication being moved out of Serverpod core.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Included Relational Lists in Serverpod Query (Dart)\nDESCRIPTION: Shows how to sort included relational lists in a Serverpod query. This example retrieves a company with employees sorted by their names in ascending order.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      orderBy: (t) => t.name,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Serverpod\nDESCRIPTION: Demonstrates how to access the client's IP address using the Session object by casting it to MethodCallSession and accessing the remoteIpAddress property. This works even when the server is behind a load balancer.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/05-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Creating User Login Endpoint in Serverpod (Dart)\nDESCRIPTION: This Dart snippet shows how to implement a `login` method for a `UserEndpoint` in Serverpod, which handles user authentication and token issuance based on credentials. It assumes an `authenticateUser` function to validate user credentials and `issueMyToken` to generate tokens. Dependencies include Serverpod libraries and a defined user authentication model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass UserEndpoint extends Endpoint {\n  Future<LoginResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    var identifier = authenticateUser(session, username, password);\n    if (identifier == null) return null;\n\n    return issueMyToken(identifier, scopes: {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Client and Session Manager in Dart\nDESCRIPTION: Set up the Serverpod client and SessionManager to handle authentication, client communication, and user session management\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Server Settings in YAML\nDESCRIPTION: Example of a YAML configuration file that defines settings for API, insights, and web servers along with database and Redis configurations. This file should be placed in the config directory and named after the run mode (e.g., development.yaml).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/07-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost\n  publicPort: 8080\n  publicScheme: http\n\ninsightsServer:\n  port: 8081\n  publicHost: localhost\n  publicPort: 8081\n  publicScheme: http\n\nwebServer:\n  port: 8082\n  publicHost: localhost\n  publicPort: 8082\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 8090\n  name: database_name\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 8091\n\nmaxRequestSize: 524288\n\nsessionLogs:\n  persistentEnabled: true\n  consoleEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Mapping a Model to a Database Table in Serverpod\nDESCRIPTION: This snippet demonstrates how to map a serializable model to a database table using the `table` key in the YAML configuration file. This enables Serverpod to generate methods for database interaction and create necessary migrations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nclass: Company\ntable: company\nfields:\n  name: String\n```\n```\n\n----------------------------------------\n\nTITLE: Requiring Authentication on Endpoints - Dart\nDESCRIPTION: This snippet shows how to restrict access to an endpoint by requiring users to be logged in. The requireLogin property in the Endpoint class is overridden to enforce this restriction.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query with Parameter Binding in Dart\nDESCRIPTION: The `unsafeQuery` method executes a single SQL query using the extended query protocol and returns a `DatabaseResult`. It supports parameter binding to prevent SQL injection. This example demonstrates querying a table with a named parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeQuery(\n  r'SELECT * FROM mytable WHERE id = @id', \n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scopes on Endpoints - Dart\nDESCRIPTION: This code demonstrates how to enforce custom scopes on an endpoint in Serverpod. The requireLogin and requiredScopes properties are overridden to ensure that only users with the specified scopes can access the endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Password Hash Generation in Serverpod\nDESCRIPTION: This Dart snippet shows how to implement a custom password hash generator and validator in the Serverpod configuration settings, allowing for backward compatibility of previously stored passwords. It provides hooks for custom error handling as well.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nAuthConfig(\n  passwordHashValidator: (\n    password,\n    email,\n    hash, {\n      onError,\n      onValidationFailure,\n    },\n  ) {\n  // Custom hash validator.\n  },\n  passwordHashGenerator: (password) {\n  // Custom hash generator.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Multiple Object Inclusion in Serverpod Query\nDESCRIPTION: Demonstrates including multiple related objects in a single query with explicit inclusion definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Unsafe Query with Parameter Binding in Dart\nDESCRIPTION: This snippet demonstrates how to execute a SQL query with parameter binding using the `unsafeQuery` method. It returns a `DatabaseResult` object that contains the results of the query. The method mitigates SQL injection risks through the use of named parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeQuery(\n  r'SELECT * FROM mytable WHERE id = @id', \n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Business Logic with Session Dependency\nDESCRIPTION: This Dart code snippet demonstrates how to test business logic that depends on a `Session` object in Serverpod. It uses the `withServerpod` helper, along with `setUp` and `test` functions, to simulate database interactions and verify expected behavior.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"withServerpod('Given decreasing product quantity when quantity is zero', (\n  sessionBuilder,\n  _,\n) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, [\n      Product(\n        id: 123,\n        name: 'Apple',\n        quantity: 0,\n      ),\n    ]);\n  });\n\n  test('then should throw `InvalidOperationException`',\n      () async {\n    var future = ProductsBusinessLogic.updateQuantity(\n      session,\n      id: 123,\n      decrease: 1,\n    );\n\n    await expectLater(future, throwsA(isA<InvalidOperationException>()));\n  });\n});\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Client in Dart\nDESCRIPTION: This snippet demonstrates how to initialize the Serverpod client. It creates a singleton client object that can be used throughout the app to communicate with the server. The client is set up to connect to a local server on the default port.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Screen in Flutter\nDESCRIPTION: This code creates a LoadingScreen widget that displays either a loading indicator or a 'Try again' button based on whether an exception has occurred.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Name in Descending Order - Dart\nDESCRIPTION: Fetches all companies and sorts them by their name in descending order by setting the 'orderDescending' parameter to true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n  orderDescending: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Endpoint Returning Custom Object in Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to create an endpoint in Serverpod that returns a custom object. It imports the necessary packages and defines an ExampleEndpoint class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:relation_test_shared/relation_test_shared.dart';\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<ClassName> getMyCustomClass(Session session) async {\n    return ClassName(\n      'John Doe',\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Serverpod\nDESCRIPTION: Demonstrates retrieving user data from cache or database with a 5-minute cache lifetime. Uses a unique cache key to store and retrieve UserData objects efficiently.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stream-based API for Image Updates\nDESCRIPTION: Implementation of the imageUpdates method that returns a stream of updates to clients. This method sends the complete image data followed by real-time pixel updates using Serverpod's streaming capability.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/endpoints/pixorama_endpoint.dart\nclass PixoramaEndpoint extends Endpoint {\n  // ...\n\n  /// Returns a stream of image updates. The first message will always be a\n  /// `ImageData` object, which contains the full image. Sequential updates\n  /// will be `ImageUpdate` objects, which contains a single updated pixel.\n  Stream imageUpdates(Session session) async* {\n    // Request a stream of updates from the pixel-added channel in\n    // MessageCentral.\n    var updateStream =\n        session.messages.createStream<ImageUpdate>(_channelPixelAdded);\n\n    // Yield a first full image to the client.\n    yield ImageData(\n      pixels: _pixelData.buffer.asByteData(),\n      width: _imageWidth,\n      height: _imageHeight,\n    );\n\n    // Relay all individual pixel updates from the pixel-added channel to\n    // the client.\n    await for (var imageUpdate in updateStream) {\n      yield imageUpdate;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to ListTile in Dart for Serverpod Note App\nDESCRIPTION: This snippet shows how to add a delete button to a ListTile in a Flutter app. When pressed, it removes the note from the local state and calls the _deleteNote method to delete it from the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_30\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Configuration in generator.yaml\nDESCRIPTION: This snippet shows how to declare custom serializable objects in the `config/generator.yaml` file in the server project. The path needs to be accessible from both the server package and the client package.  This configuration is necessary for Serverpod to recognize and handle the custom class during code generation and serialization/deserialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    ...\n    extraClasses:\n    - package:my_project_shared/my_project_shared.dart:ClassName\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows by Filter in Serverpod Dart\nDESCRIPTION: This Dart snippet shows how to delete rows matching a specific filter using the 'deleteWhere' method. It deletes all companies whose names end with 'Ltd'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.deleteWhere(\n  session,\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Serverpod Server\nDESCRIPTION: This snippet shows how to set up the AuthConfig for email authentication in the main server.dart file. It includes methods for sending validation and password reset emails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Getting User Data with Caching in Dart\nDESCRIPTION: This snippet illustrates how to retrieve user data using caching mechanisms in Serverpod. Initially, it tries to get the user data from the local cache. If not found, it fetches the data from the database. The retrieved user data is then cached for 5 minutes to optimize subsequent requests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/06-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by CEO's Name - Dart\nDESCRIPTION: Fetches all companies and sorts them by the name of their CEO using a chained field reference in the 'orderBy' parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.ceo.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Serverpod Test Tools in Dart\nDESCRIPTION: Demonstrates the correct way to import test tools in Serverpod, avoiding redundant imports and using only the generated test tools file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'serverpod_test_tools.dart';\n```\n\n----------------------------------------\n\nTITLE: Using CacheMissHandler for User Data Caching in Serverpod (Dart)\nDESCRIPTION: This snippet showcases the use of CacheMissHandler in Serverpod to handle cache misses when retrieving user data. It automatically loads data from the database and caches it when a cache miss occurs.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/08-caching.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(\n    cacheKey,\n    // If the object wasn't found in the cache, load it from the database and\n    // save it in the cache. Make it valid for 5 minutes.\n    CacheMissHandler(\n      () async => UserData.db.findById(session, userId),\n      lifetime: Duration(minutes: 5),\n    ),\n    );\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row into Database in Dart\nDESCRIPTION: This Dart snippet demonstrates how to insert a new 'Company' object into the database by calling the insert method on the Company class, which sets the 'id' field automatically upon insertion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Creating Savepoints in Transactions\nDESCRIPTION: Demonstrates how to create a savepoint within a transaction, allowing for potential rollback to that specific point in the transaction.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  await Company.db.insertRow(session, company, transaction: transaction);\n  // Create savepoint\n  var savepoint = await transaction.createSavepoint();\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Signed-In User in Serverpod Client\nDESCRIPTION: This snippet demonstrates how to register a signed-in user on the client-side using the SessionManager. It stores the user info and auth token received from the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar serverResponse = await caller.myAuthentication.login(username, password);\n\nif (serverResponse.success) {\n    // Store the user info in the session manager.\n    SessionManager sessionManager = await SessionManager.instance;\n    await sessionManager.registerSignedInUser(\n        serverResponse.userInfo!,\n        serverResponse.keyId!,\n        serverResponse.key!,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS/SSL on Serverpod Server using SecurityContextConfig\nDESCRIPTION: This example demonstrates how to enable SSL/TLS in a Serverpod server by configuring the SecurityContext with certificate chain and private key, then passing it to the Serverpod constructor via SecurityContextConfig.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/21-security-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal securityContext = SecurityContext()\n  ..useCertificateChain('path/to/server_cert.pem')\n  ..usePrivateKey('path/to/server_key.pem', password: 'password');\n\nServerpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  securityContextConfig: SecurityContextConfig(\n    apiServer: securityContext,\n    webServer: securityContext,\n    insightsServer: securityContext,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Database Table Mapping in YAML\nDESCRIPTION: YAML configuration for mapping a Company class to a database table with field definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Registering Google Sign In Route in server.dart\nDESCRIPTION: This snippet shows how to register the Google Sign-In route inside the server.dart file using the serverpod_auth_server module. This route is necessary for the web app to handle the authentication code provided by Google.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to cache user data in Serverpod using the local cache. It checks for cached data, retrieves from the database if not found, and stores in the cache with a 5-minute lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/08-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = UserData.db.findById(session, userId);\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication Scheme for OAuth in Dart\nDESCRIPTION: This code snippet illustrates how to implement a custom OAuth authentication scheme. It shows the client-side implementation of converting the authentication key to a Bearer token and the server-side handling of validating this token.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyOAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n\n  @override\n  Future<String?> toHeaderValue(String? key) async {\n    if (key == null) return null;\n    return 'Bearer ${myBearerTokenObtainer(key)}';\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\n// Initialize Serverpod and connect it with your generated code.\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Bearer token validation handler\n    var (uid, scopes) = myBearerTokenValidator(token)\n    if (uid == null) return null;\n\n    return AuthenticationInfo(uid, scopes);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Revoked Authentication in Serverpod - Dart\nDESCRIPTION: The snippet shows how to notify the server when a user's authentication is revoked. It involves invoking the authenticationRevoked method with the user id and a message detailing the revoked scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = 1;\nvar revokedScopes = ['write'];\nvar message = RevokedAuthenticationScope(\n  scopes: revokedScopes,\n);\n\nawait session.messages.authenticationRevoked(\n  userId,\n  message,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod with Dart Code\nDESCRIPTION: Dart configuration example showing how to configure Serverpod programmatically by passing a ServerpodConfig instance to the Serverpod constructor. This method overrides any environment variables or config files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/07-configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nServerpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  config: ServerpodConfig(\n    apiServer: ServerConfig(\n      port: 8080,\n      publicHost: 'localhost',\n      publicPort: 8080,\n      publicScheme: 'http',\n    ),\n    insightsServer: ServerConfig(\n      port: 8081,\n      publicHost: 'localhost',\n      publicPort: 8081,\n      publicScheme: 'http',\n    ),\n    webServer: ServerConfig(\n      port: 8082,\n      publicHost: 'localhost',\n      publicPort: 8082,\n      publicScheme: 'http',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project Using CLI in Bash\nDESCRIPTION: This snippet shows how to create a new project using the Serverpod CLI and start the server using Docker Compose and Dart. Ensure Docker is installed and the Serverpod CLI is set up before running.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd notes/notes_server\ndocker compose up --build --detach\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Restricting Endpoint Access with Scopes\nDESCRIPTION: This snippet demonstrates how to restrict access to a Serverpod endpoint based on user scopes. By overriding the `requiredScopes` property, you can specify which scopes a user must have to access the endpoint.  The provided example requires the `Scope.admin` scope.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod with YAML\nDESCRIPTION: Example of a YAML configuration file for Serverpod, specifying settings for API server, insights server, web server, database, Redis, and session logging.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/07-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost\n  publicPort: 8080\n  publicScheme: http\n\ninsightsServer:\n  port: 8081\n  publicHost: localhost\n  publicPort: 8081\n  publicScheme: http\n\nwebServer:\n  port: 8082\n  publicHost: localhost\n  publicPort: 8082\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 8090\n  name: database_name\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 8091\n\nmaxRequestSize: 524288\n\nsessionLogs:\n  persistentEnabled: true\n  consoleEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Registering a Health Check Handler with Serverpod in Dart\nDESCRIPTION: This snippet shows how to register a custom health check handler when creating a Serverpod object in Dart. The `healthCheckHandler` parameter in the Serverpod constructor is used to register the custom handler, which will then be called once a minute to perform the configured health checks. The handler allows for custom monitoring of external services or internal processes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/13-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Authentication Handler - Dart\nDESCRIPTION: Sets up the Serverpod instance with the authentication handler to enable user authentication management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Unique Index in YAML for Serverpod\nDESCRIPTION: Illustrates how to create a unique index on the name field of a Company table. This ensures that no two companies can have the same name, enforcing data integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Including Nested Lists in Relational Lists in Serverpod Query (Dart)\nDESCRIPTION: Shows how to include nested lists within relational lists in a Serverpod query. This example retrieves a company with all related employees, each including their list of tools.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        tools: Tool.includeList(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Serverpod (Dart)\nDESCRIPTION: Shows how to verify if a user is currently signed in using the isUserSignedIn property of the Session object, which returns a boolean value indicating authentication status.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Class Model in YAML for Serverpod\nDESCRIPTION: Example of defining a Company class with various field types including a String, optional DateTime, and a List of another model type (Employee).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI with Dart\nDESCRIPTION: Command to install the Serverpod command-line interface using Dart's package manager. This installs the tools needed to create and manage Serverpod projects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Server Listeners\nDESCRIPTION: This Dart snippet implements the `_listenToUpdates` method to maintain an active connection with the server, processing updates both for entire images and individual pixel changes using asynchronous streaming.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  Future<void> _listenToUpdates() async {\n    // Indefinitely try to connect and listen to updates from the server.\n    while (true) {\n      try {\n        // Get the stream of updates from the server.\n        final imageUpdates = client.pixorama.imageUpdates();\n\n        // Listen for updates from the stream. The await for construct will\n        // wait for a message to arrive from the server, then run through the\n        // body of the loop.\n        await for (final update in imageUpdates) {\n          // Check which type of update we have received.\n          if (update is ImageData) {\n            // This is a complete image update, containing all pixels in the\n            // image. Create a new PixelImageController with the pixel data.\n            setState(() {\n              _imageController = PixelImageController(\n                pixels: update.pixels,\n                palette: PixelPalette.rPlace(),\n                width: update.width,\n                height: update.height,\n              );\n            });\n          } else if (update is ImageUpdate) {\n            // Got an incremental update of the image. Just set the single\n            // pixel.\n            _imageController?.setPixelIndex(\n              pixelIndex: update.pixelIndex,\n              colorIndex: update.colorIndex,\n            );\n          }\n        }\n      } on MethodStreamException catch (_) {\n        // We lost the connection to the server, or failed to connect.\n        setState(() {\n          _imageController = null;\n        });\n      }\n\n      // Wait 5 seconds until we try to connect again.\n      await Future.delayed(Duration(seconds: 5));\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Row in Serverpod using Dart\nDESCRIPTION: Demonstrates how to insert a single row into the database using the insertRow method on a generated model in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar row = Company(name: 'Serverpod');\nvar company = await Company.db.insertRow(session, row);\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Age Range\nDESCRIPTION: Demonstrates using the between method to find users within a specific age range, inclusively\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.between(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Auth Token in Serverpod\nDESCRIPTION: This snippet creates an authentication token for a user using the `UserAuthentication.signInUser` method in Serverpod. It associates the token with a specific authentication method and assigns scopes defining the user's permissions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Signing Out Current Device - Dart\nDESCRIPTION: Signs the user out from the current device, returning a boolean to indicate success.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOutDevice();\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with Filter in Serverpod Dart\nDESCRIPTION: This Dart snippet shows how to find a single row using an expression with the 'findFirstRow' method. It filters companies by name and returns the first matching Company model or null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('Serverpod'),\n);\n```\n\n----------------------------------------\n\nTITLE: Using SignInWithFirebaseButton Widget\nDESCRIPTION: Example of implementing the SignInWithFirebaseButton widget to trigger the Firebase authentication flow in a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithFirebaseButton(\n  caller: client.modules.auth,\n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n  onFailure: () => print('Failed to sign in with Firebase.'),\n  onSignedIn: () => print('Signed in with Firebase.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Dart\nDESCRIPTION: Executes the tests using Dart's test runner after the test environment has been set up and services have been started.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndart test\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Code\nDESCRIPTION: Command to generate Dart classes from YAML model definitions in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dart Test Configuration\nDESCRIPTION: Creates a dart_test.yaml file that defines tags for integration tests in the project, assisting in categorizing tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call at a Specific Time in Serverpod\nDESCRIPTION: This code demonstrates how to schedule a future call to be invoked at a specific date and time using the futureCallAtTime method. It takes the future call name, data, and a DateTime object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/14-scheduling.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallAtTime(\n  'exampleFutureCall',\n  data,\n  DateTime(2025, 1, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Named and Positional Query Parameters in Dart\nDESCRIPTION: This snippet explains how to use named and positional query parameters for raw SQL queries. It helps guard against SQL injection by implementing parameterized queries. The named parameters begin with `@`, while positional parameters are denoted with `$1`, `$2`, etc.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Named parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = @color AND size = @size',\n  QueryParameters.named({\n    'color': 'green',\n    'size': 'XL',\n  }));\n\n// Positional parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',\n  QueryParameters.positional(['green', 'XL']),\n);\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with a Filter in Dart with Serverpod\nDESCRIPTION: This Dart snippet shows how to find a single row in the 'company' table based on a filter expression using the `findFirstRow` method. It retrieves the first `Company` object whose name is 'Serverpod'. The method returns the first matching `Company` object or `null` if no matching row is found.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"var company = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('Serverpod'),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Token in Serverpod\nDESCRIPTION: Demonstrates creating an authentication token with specific scopes using UserAuthentication.signInUser method\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User ID in Serverpod\nDESCRIPTION: This snippet demonstrates how to access the currently authenticated user's ID within a Serverpod method using the `Session` object's `auth` field. It checks if a user is signed in by verifying if the `authenticatedUserId` is not null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var userId = await session.auth.authenticatedUserId;\n  var isSignedIn = userId != null;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Record with Dart\nDESCRIPTION: This Dart snippet demonstrates fetching a single row by its ID using `db.findById`. Provide the session and the row's `id`. If no row is found, it returns `null`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Flutter\nDESCRIPTION: Async method to create notes by communicating with the Serverpod backend. Includes error handling and list refresh functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Any Orders using Any in Dart\nDESCRIPTION: This snippet shows how to fetch users that have any related orders using the any method, allowing for inclusion based on the existence of related entries.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.any()\n);\n```\n\n----------------------------------------\n\nTITLE: Getting User Data from Cache\nDESCRIPTION: This Dart function retrieves user data by checking if it exists in the session cache. If not found, it retrieves the data from the database and caches it for 5 minutes to optimize performance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/06-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Scopes for Serverpod Authorization in Dart\nDESCRIPTION: This code demonstrates how to create custom scopes by extending the Scope class in Serverpod for more granular access control.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\n----------------------------------------\n\nTITLE: Including Relational Data in Serverpod Query (Dart)\nDESCRIPTION: Demonstrates how to include relational data in a Serverpod query using the include method. This example retrieves an employee record with the related address object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing setPixel Method for Handling Pixel Updates\nDESCRIPTION: Implementation of the setPixel method which validates input parameters, updates the pixel data, and broadcasts the change to all connected clients via the pixel-added channel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/endpoints/pixorama_endpoint.dart\n\n// Here we need to import the model files from our generated protocol.\nimport 'package:pixorama_server/src/generated/protocol.dart';\n\nclass PixoramaEndpoint extends Endpoint {\n  // ...\n\n  static const _channelPixelAdded = 'pixel-added';\n\n  /// Sets a single pixel and notifies all connected clients about the change.\n  Future<void> setPixel(\n    Session session, {\n    required int colorIndex,\n    required int pixelIndex,\n  }) async {\n    // Check that the input parameters are valid. If not, throw a\n    // `FormatException`, which will be logged and thrown as\n    // `ServerpodClientException` in the app.\n    if (colorIndex < 0 || colorIndex >= _numColorsInPalette) {\n      throw FormatException('colorIndex is out of range: $colorIndex');\n    }\n    if (pixelIndex < 0 || pixelIndex >= _numPixels) {\n      throw FormatException('pixelIndex is out of range: $pixelIndex');\n    }\n\n    // Update our global image.\n    _pixelData[pixelIndex] = colorIndex;\n\n    // Notify all connected clients that we set a pixel, by posting a message\n    // to the _channelPixelAdded channel.\n    session.messages.postMessage(\n      _channelPixelAdded,\n      ImageUpdate(\n        pixelIndex: pixelIndex,\n        colorIndex: colorIndex,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Exception in YAML for Serverpod\nDESCRIPTION: This YAML snippet defines a serializable exception named 'MyException' with two fields: a message string and an error type enum.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication State - Dart\nDESCRIPTION: Checks whether the user is currently signed in and returns a boolean indicating the authentication state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nsessionManager.isSignedIn;\n```\n\n----------------------------------------\n\nTITLE: Database Transaction Example\nDESCRIPTION: Demonstrates how to use database transactions for atomic operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing User Session Authentication Info in Dart\nDESCRIPTION: This snippet demonstrates how to access the current authenticated user's ID from a session object in Serverpod. It requires the 'serverpod_auth' module where the Session object is used to retrieve authentication information through its asynchronous getter. The key parameter is the 'session' object, and the expected output is the user ID, which is used for referring to a user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  final authenticationInfo = await session.authenticated;\n  final userId = authenticationInfo?.userId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prebuilt SignInWithEmailButton Widget\nDESCRIPTION: Utilizes the prebuilt `SignInWithEmailButton` widget to effortlessly handle user signup, login, and password resets. Requires the `caller` parameter to be an instance of `auth` client module. Optionally provides an `onSignedIn` callback for handling successful sign-ins.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod Firebase Auth Package\nDESCRIPTION: Command to add the Serverpod Firebase authentication package to your Flutter project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add serverpod_auth_firebase_flutter\n```\n\n----------------------------------------\n\nTITLE: Calling a Streaming Method from Serverpod Client in Dart\nDESCRIPTION: This snippet shows how to call a streaming method from a Serverpod client. It creates input and output streams, listens for messages, and sends data through the stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/15-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar inStream = StreamController();\nvar outStream = client.example.echoStream(inStream.stream);\noutStream.listen((message) {\n  print('Received message: $message');\n});\n\ninStream.add('Hello');\ninStream.add(42);\n\n// This will print\n// Received message: Hello\n// Received message: 42\n```\n\n----------------------------------------\n\nTITLE: Executing Database Transaction in Serverpod\nDESCRIPTION: Demonstrates how to perform multiple database operations within a single atomic transaction using Serverpod's transaction method. The example shows inserting a company and employee record where either both operations succeed or neither is applied. The transaction returns a boolean value indicating success.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Login Endpoint\nDESCRIPTION: Example of a custom login endpoint that authenticates users and issues tokens.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass UserEndpoint extends Endpoint {\n  Future<LoginResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    var identifier = authenticateUser(session, username, password);\n    if (identifier == null) return null;\n\n    return issueMyToken(identifier, scopes: {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Call with Identifier\nDESCRIPTION: Example of scheduling a future call with an identifier that can be used to reference or cancel the call later.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/14-scheduling.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n  identifier: 'an-identifying-string',\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Class with Freezed in Dart\nDESCRIPTION: This snippet demonstrates a custom class created using the Freezed package. Freezed automatically generates the `toJson`, `fromJson`, and `copyWith` methods. This reduces boilerplate code and ensures data immutability.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Server-side Handler\nDESCRIPTION: Server-side implementation of OAuth bearer token validation in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Bearer token validation handler\n    var (uid, scopes) = myBearerTokenValidator(token)\n    if (uid == null) return null;\n\n    return AuthenticationInfo(uid, scopes);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Authenticated Override with Serverpod in Dart\nDESCRIPTION: Defines an authenticated session using the AuthenticationOverride.authenticationInfo method. Pass the userId and a set of scopes to simulate an authenticated state. Additional parameters include optional authId. This helps test authenticated scenarios in Serverpod applications.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nstatic AuthenticationOverride authenticationInfo(\n  int userId,\n  Set<Scope> scopes, {\n  String? authId,\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Authentication\nDESCRIPTION: Sets up custom authentication configuration in the main server.dart file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;  \n  \nvoid run(List<String> args) async {\n\n  auth.AuthConfig.set(auth.AuthConfig(  \n    minPasswordLength: 12,\n  ));  \n    \n  // Start the Serverpod server.  \n  await pod.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Serverpod Web Server in Dart\nDESCRIPTION: Demonstrates how to add single and wildcard routes to the Serverpod web server. This snippet shows the syntax for defining specific page routes and matching paths that start with a certain prefix.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/18-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Rows in Serverpod using Dart\nDESCRIPTION: Shows how to insert multiple Company rows in a single atomic operation using the 'insert' method. All entries are created or none if any fails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar rows = [Company(name: 'Serverpod'), Company(name: 'Google')];\nvar companies = await Company.db.insert(session, rows);\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration Setup\nDESCRIPTION: Server-side configuration for authentication settings and behavior.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;  \n\nvoid run(List<String> args) async {\n\n  auth.AuthConfig.set(auth.AuthConfig(  \n    minPasswordLength: 12,\n  ));  \n    \n  // Start the Serverpod server.  \n  await pod.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hash Pepper\nDESCRIPTION: Setting a server-side pepper for enhanced password hash security\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  emailPasswordPepper: 'your-pepper'\n```\n\n----------------------------------------\n\nTITLE: Updating Main Flutter App with Note Creation Features\nDESCRIPTION: This extensive snippet shows the complete main.dart file with all the implemented features for note creation, including the loading screen, note dialog, and floating action button.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n                    _notes!.add(note);\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Relation in Serverpod\nDESCRIPTION: This snippet shows how to create a database relation between two tables using the `relation` keyword. This ensures that the data remains synchronized between the related tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nclass: Company\ntable: company\nfields:\n  address: Address?, relation\n```\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Self-Relation for Cat-Kitten Relationships in YAML\nDESCRIPTION: This snippet shows how to create a one-to-many self-referential relationship for cats and their kittens. It defines fields for the cat's name, mother (optional), and a list of kittens. The relation is named 'cat_kittens' and uses SetNull for onDelete.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Cat\ntable: cat\nfields:\n  name: String\n  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)\n  kittens: List<Cat>?, relation(name=cat_kittens)\n```\n\n----------------------------------------\n\nTITLE: Authentication Endpoint Implementation\nDESCRIPTION: Illustrates creating an authentication endpoint with login method, user authentication, and AuthenticationResponse generation\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyAuthenticationEndpoint extends Endpoint {\n  Future<AuthenticationResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    if (!authenticateUser(session, username, password)) {\n      return AuthenticationResponse(success: false);\n    }\n\n    var userInfo = findOrCreateUser(session, username);\n\n    var authToken = await UserAuthentication.signInUser(\n      session,\n      userInfo.id!,\n      'myAuth',\n      scopes: {},\n    );\n\n    return AuthenticationResponse(\n      success: true,\n      keyId: authToken.id,\n      key: authToken.key,\n      userInfo: userInfo,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named and Positional Parameters in Raw SQL Queries\nDESCRIPTION: Illustrates both named and positional parameter binding approaches for safe SQL query execution. Shows how to protect against SQL injection by properly parameterizing queries.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Named parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = @color AND size = @size',\n  QueryParameters.named({\n    'color': 'green',\n    'size': 'XL',\n  }));\n\n// Positional parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',\n  QueryParameters.positional(['green', 'XL']),\n);\n```\n\n----------------------------------------\n\nTITLE: Building a Session with Serverpod in Dart\nDESCRIPTION: Creates a new Serverpod Session using the session builder's build method based on properties set with copyWith. This helps simulate specific scenarios in tests. No external dependencies are required beyond Serverpod itself. The build method returns a configured Session for the provided settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nSession session = sessionBuilder.build();\n```\n\n----------------------------------------\n\nTITLE: Testing Authenticated and Unauthenticated Endpoints in Dart\nDESCRIPTION: Showcases testing authenticated and unauthenticated scenarios using Serverpod's withServerpod utility. Different authentication states are tested to validate session behavior when invoking endpoint methods. This example checks different responses based on user authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given AuthenticatedExample endpoint', (sessionBuilder, endpoints) {\n  // Corresponds to an actual user id\n  const int userId = 1234;\n\n  group('when authenticated', () {\n    var authenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication:\n          AuthenticationOverride.authenticationInfo(userId, {Scope('user')}),\n    );\n\n    test('then calling `hello` should return greeting', () async {\n      final greeting = await endpoints.authenticatedExample\n          .hello(authenticatedSessionBuilder, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n\n  group('when unauthenticated', () {\n    var unauthenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.unauthenticated(),\n    );\n\n    test(\n        'then calling `hello` should throw `ServerpodUnauthenticatedException`',\n        () async {\n      final future = endpoints.authenticatedExample\n          .hello(unauthenticatedSessionBuilder, 'Michael');\n      await expectLater(\n          future, throwsA(isA<ServerpodUnauthenticatedException>()));\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scopes in Serverpod Endpoints with Dart\nDESCRIPTION: Demonstrates how to use custom scopes to restrict access to a Serverpod endpoint, providing more fine-grained authorization control.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Health Metric Handler in Dart\nDESCRIPTION: This snippet demonstrates how to create a custom health metric handler in Dart for Serverpod. The handler function, `myHealthCheckHandler`, takes the Serverpod instance and a timestamp as input, performs checks, and returns a list of `ServerHealthMetric` objects with the health status. The returned metrics are stored for monitoring.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/13-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create your custom health metric handler.\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Nickname - Generator Configuration\nDESCRIPTION: Configuration in generator.yaml to set up a nickname for the serverpod_auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Deployment Commands\nDESCRIPTION: Basic Terraform commands for initializing and applying infrastructure changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Including a list of relational objects in Serverpod\nDESCRIPTION: This snippet demonstrates how to include a list of related objects (1:n relation) in a Serverpod query using the `includeList` method. It retrieves a `Company` object along with all its related `Employee` objects.  This is the simplest way to include a list of related objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"var user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Returning Cursor Data to Client in Serverpod\nDESCRIPTION: Shows how to return both the requested data and the cursor to the client, enabling them to request the next page. The cursor (last ID) will be used as the starting point for the next query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn {\n'data': companies,\n'lastCursor': companies.last.id,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scopes in Serverpod Endpoints with Dart\nDESCRIPTION: This snippet illustrates how to use custom scopes to restrict access to a Serverpod endpoint, requiring both userRead and userWrite scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reset Password (Dart)\nDESCRIPTION: A Dart snippet to reset a user's password using 'resetPassword'. It sends the verification code and new password to the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions and Stack Traces in Dart with Serverpod\nDESCRIPTION: Shows how to log more complex information including exceptions, stack traces, and custom log levels using Serverpod's logging system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/09-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Rows in Dart with Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to delete multiple rows from the 'company' table using the `delete` method. It deletes the list of companies from the database. This operation is atomic. The method returns a `List` of the deleted `Company` objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"var companiesDeleted = await Company.db.delete(session, companies);\"\n```\n\n----------------------------------------\n\nTITLE: Handling Database Transactions in Dart Tests\nDESCRIPTION: The snippet illustrates a test setup in Serverpod where cleanup code is deemed unnecessary due to automatic transaction rollback. This prevents redundant operations and maintains transactional integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\n  });\n\n  tearDown(() async {   \n    await Product.db.deleteWhere( ❌ // Unnecessary clean up\n      session,\n      where: (_) => Constant.bool(true),\n    );\n  });\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter App Structure with Serverpod Integration\nDESCRIPTION: The complete main.dart file showing Serverpod client setup, app initialization, and basic UI structure. This provides the foundation for the notes app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\n// Sets up a singleton client object that can be used to talk to the server from\n// anywhere in our app. The client is generated from your server code.\n// The client is set up to connect to a Serverpod running on a local server on\n// the default port. You will need to modify this to connect to staging or\n// production servers.\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Serverpod Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Serverpod Example'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Lists of Related Objects in Queries using Serverpod in Dart\nDESCRIPTION: The snippet shows how to include a list of related employees when querying a company using Serverpod's includeList method. The prerequisite is having the Serverpod framework and defined relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Filter in Serverpod\nDESCRIPTION: Demonstrates how to retrieve multiple Company records with filtering and limit.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Performing Concurrent Transactions in Serverpod Tests\nDESCRIPTION: Illustrates how to execute concurrent database transactions within a Serverpod test. Adjust rollbackDatabase setting to disabled for concurrency and ensure manual database cleanup. Useful for testing complex transaction sequences.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> concurrentTransactionCalls(\n  Session session,\n) async {\n  await Future.wait([\n    session.db.transaction((tx) => /*...*/),\n    // Will throw `InvalidConfigurationException` if `rollbackDatabase` \n    // is not set to `RollbackDatabase.disabled` in `withServerpod`\n    session.db.transaction((tx) => /*...*/),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Flutter\nDESCRIPTION: Method to create new notes by communicating with the Serverpod backend endpoint and refreshing the notes list.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User from Current Device\nDESCRIPTION: Signs the user out from the current device using the SessionManager. Returns true if successful, false otherwise.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOutDevice();\n```\n\n----------------------------------------\n\nTITLE: Using SignInWithEmailButton Widget for Email Authentication\nDESCRIPTION: This Dart snippet demonstrates how to use the prebuilt `SignInWithEmailButton` widget in a Flutter application, which streamlines the email authentication process. The key parameter is the caller that refers to the authentication client, with an optional callback for successful sign-in. The output is a fully functional sign-in button.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Sending Validation Emails in Serverpod\nDESCRIPTION: This Dart snippet configures the Serverpod authentication server to send validation and password reset emails. It uses closures within the `auth.AuthConfig` setup to define actions for sending these emails. Dependencies include the `serverpod_auth_server/module.dart` package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n```\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send your validation email here.\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send a password reset email here.\n  },\n));\n\n// Start the server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows by Filter in Serverpod using Dart\nDESCRIPTION: Shows how to delete rows that match a specific filter using the deleteWhere method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.deleteWhere(\n  session,\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod endpoint\nDESCRIPTION: This Dart code creates a new Serverpod endpoint named `NotesEndpoint` by extending the `Endpoint` class. It imports necessary dependencies, including the generated `protocol.dart` file, which contains the generated `Note` class definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  // Endpoint implementation goes here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Exception in Serverpod Endpoint\nDESCRIPTION: Demonstrates how to throw a custom serializable exception with specific error details in a Serverpod endpoint method\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\\n  Future<void> doThingy(Session session) {\\n    // ... do stuff ...\\n    if (failure) {\\n      throw MyException(\\n        message: 'Failed to do thingy',\\n        errorType: MyEnum.thingyError,\\n      );\\n    }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk attaching rows in Serverpod\nDESCRIPTION: This snippet demonstrates how to associate multiple employees with a company at once using the `attach` method in Serverpod. It retrieves the `Company` and a list containing the `Employee` object by their IDs and then links all employees to the company. This operation is atomic, ensuring that all or none of the records are linked.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"var company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attach.employees(session, company!, [employee!]);\"\n```\n\n----------------------------------------\n\nTITLE: Ordering Rows in Dart\nDESCRIPTION: This Dart snippet demonstrates how to order the results of a database query using the `orderBy` parameter of the `find` method. It orders the companies by name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"var companies = await Company.find(\n  session,\n  orderBy: Company.t.name,\n);\"\n```\n\n----------------------------------------\n\nTITLE: Paginating Relational Query Results with Serverpod in Dart\nDESCRIPTION: Shows how to paginate query results for lists of related objects using limit and offset. The snippet retrieves a specific range of employee records, requiring the Serverpod framework for execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      limit: 10,\n      offset: 10,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Message Channel for Pixel Updates\nDESCRIPTION: Expanded PixoramaEndpoint class with a channel name for pixel updates. This channel will be used with Serverpod's Message Central system for broadcasting updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/endpoints/pixorama_endpoint.dart\n\nclass PixoramaEndpoint extends Endpoint {\n  // ...\n\n  static const _channelPixelAdded = 'pixel-added';\n}\n```\n\n----------------------------------------\n\nTITLE: Serverpod Configuration with Dart object\nDESCRIPTION: This Dart snippet demonstrates configuring Serverpod using a `ServerpodConfig` object. It sets up the API server, insights server, and web server configurations, including their respective ports, public hosts, public ports, and public schemes. This config overrides any environment variables or config files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/07-configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"Serverpod(\\n  args,\\n  Protocol(),\\n  Endpoints(),\\n  config: ServerpodConfig(\\n    apiServer: ServerConfig(\\n      port: 8080,\\n      publicHost: 'localhost',\\n      publicPort: 8080,\\n      publicScheme: 'http',\\n    ),\\n    insightsServer: ServerConfig(\\n      port: 8081,\\n      publicHost: 'localhost',\\n      publicPort: 8081,\\n      publicScheme: 'http',\\n    ),\\n    webServer: ServerConfig(\\n      port: 8082,\\n      publicHost: 'localhost',\\n      publicPort: 8082,\\n      publicScheme: 'http',\\n    ),\\n  ),\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Including Nested Lists in Relational Queries using Serverpod in Dart\nDESCRIPTION: This example shows how to query a company and include nested lists, such as a list of employees each having related tools. Properly defined model relations and the Serverpod framework are required dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        tools: Tool.includeList(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Authorized Scopes for Endpoints in Dart\nDESCRIPTION: This snippet explains how to restrict access to an endpoint using authorization scopes in a Serverpod application. By overriding the 'requiredScopes' property, users must have specific scopes, like 'Scope.admin', to access the endpoint. This implicitly sets 'requireLogin' to true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Google OAuth Scopes in Flutter with SignInWithGoogleButton\nDESCRIPTION: This snippet demonstrates how to add additional OAuth scopes when users sign in with Google in a Flutter application. The example specifically requests access to the YouTube API by adding the YouTube scope to the SignInWithGoogleButton widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope-based Authorization in Dart\nDESCRIPTION: Demonstrates how to restrict endpoint access using scopes for granular authorization control.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Row by ID in Serverpod Dart\nDESCRIPTION: This Dart code demonstrates how to retrieve a single row from the database by its ID using the 'findById' method. It returns the Company model or null if not found.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Comparing Column to an Exact Value with Serverpod Dart\nDESCRIPTION: The code snippet demonstrates how to use the equals method to fetch rows where a column value exactly matches a given string in Serverpod using Dart. It requires Serverpod setup and a defined User model. The where clause specifies the condition for fetching the data. Takes a string as input and returns matching database rows. Note that notEquals is the negated version of equals.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.equals('Alice')\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notEquals('Bob')\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Authentication Info in Serverpod - Dart\nDESCRIPTION: This snippet demonstrates how to retrieve authentication information and the user ID using the Session object in Serverpod. It assumes the session has been properly initialized and the serverpod_auth module is used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  final authenticationInfo = await session.authenticated;\n  final userId = authenticationInfo?.userId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Query Expressions in Dart with Serverpod\nDESCRIPTION: This snippet shows various examples of creating database query expressions using Serverpod's Dart API, including equality checks, date comparisons, and complex conditions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Fetching all notes from the database\nDESCRIPTION: This Dart code defines a `getAllNotes` method within the `NotesEndpoint` class. It retrieves all notes from the database using the `Note.db.find` method, ordering them by their `id` field. The method returns a `Future<List<Note>>`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<Note>> getAllNotes(Session session) async {\n  // By ordering by the id column, we always get the notes in the same order\n  // and not in the order they were updated.\n  return await Note.db.find(\n    session,\n    orderBy: (t) => t.id,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Endpoint in Serverpod\nDESCRIPTION: This code snippet shows how to create a custom authentication endpoint in Serverpod. It includes user authentication, finding or creating a user, generating an auth token, and returning an AuthenticationResponse.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyAuthenticationEndpoint extends Endpoint {\n  Future<AuthenticationResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    // Authenticates a user with email and password.\n    if (!authenticateUser(session, username, password)) {\n      return AuthenticationResponse(success: false);\n    }\n\n    // Finds or creates a user in the database using the User methods.\n    var userInfo = findOrCreateUser(session, username);\n\n    // Creates an authentication key for the user.\n    var authToken = await UserAuthentication.signInUser(\n      session,\n      userInfo.id!,\n      'myAuth',\n      scopes: {},\n    );\n\n    // Returns the authentication response.\n    return AuthenticationResponse(\n      success: true,\n      keyId: authToken.id,\n      key: authToken.key,\n      userInfo: userInfo,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Mapping in YAML\nDESCRIPTION: This YAML snippet demonstrates how to map a serializable class to a table in the database using the `table` key.  This mapping is used by Serverpod to generate the database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\"\n```\n\n----------------------------------------\n\nTITLE: Creating or Finding User in Serverpod Authentication\nDESCRIPTION: Demonstrates how to find an existing user by email or identifier, and create a new user if none exists. Uses Serverpod's Users utility methods for user management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nUserInfo? userInfo;\nuserInfo = await Users.findUserByEmail(session, email);\nuserInfo ??= await Users.findUserByIdentifier(session, userIdentifier);\nif (userInfo == null) {\n  userInfo = UserInfo(\n    userIdentifier: userIdentifier,\n    userName: name,\n    email: email,\n    blocked: false,\n    created: DateTime.now().toUtc(),\n    scopeNames: [],\n  );\n  userInfo = await Users.createUser(session, userInfo, _authMethod);\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Attaching Employees to a Company\nDESCRIPTION: This snippet demonstrates how to associate multiple employees with a company at once using the `attach` method.  It retrieves the company and employee objects, and then links all the employees in the list to the company in an atomic operation. If one attachment fails, they all fail.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attach.employees(session, company!, [employee!]);\n\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Row in Serverpod Dart\nDESCRIPTION: This Dart code demonstrates how to insert a single row into the database using the 'insertRow' method on a generated model. It creates a Company object and inserts it, returning the object with its ID set.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar row = Company(name: 'Serverpod');\nvar company = await Company.db.insertRow(session, row);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Health Metric Handler in Dart\nDESCRIPTION: This snippet demonstrates how to create a custom health metric handler. It defines an asynchronous function `myHealthCheckHandler` that takes a `Serverpod` instance and a `DateTime` object as input. It performs custom checks and returns a list of `ServerHealthMetric` objects, indicating the health status and value of the metric. The returned `ServerHealthMetric` includes name, serverId, timestamp, health status and value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/12-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create your custom health metric handler.\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows by Filter in Dart with Serverpod\nDESCRIPTION: This Dart snippet shows how to delete rows from the 'company' table based on a filter expression using the `deleteWhere` method. It deletes all `Company` objects whose names end with 'Ltd'. The method returns a `List` of the deleted `Company` objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"var companiesDeleted = await Company.db.deleteWhere(\n  session,\n  where: (t) => t.name.like('%Ltd'),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns in a Single Row in Serverpod using Dart\nDESCRIPTION: Demonstrates how to update specific columns of a single Company row using the 'updateRow' method with a 'columns' parameter. Only specified columns are updated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); \ncompany.name = 'New name';\ncompany.address = 'Baker street';\nvar updatedCompany = await Company.db.updateRow(session, company, columns: (t) => [t.name]);\n```\n\n----------------------------------------\n\nTITLE: Implementing fromJson Factory Constructor\nDESCRIPTION: Factory constructor implementation for deserializing JSON data into class instances.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\nMap<String, dynamic> json,\n) {\nreturn ClassName(\n    name: json['name'] as String,\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Diagnostic Event Handlers in Serverpod\nDESCRIPTION: Demonstrates how to set up diagnostic event handlers in Serverpod for exception monitoring using the experimental features configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar serverpod = Serverpod(\n    ...\n    experimentalFeatures: ExperimentalFeatures(\n      diagnosticEventHandlers: [\n        AsEventHandler((event, {required space, required context}) {\n          print('$event  Origin is $space\\n  Context is ${context.toJson()}');\n        }),\n      ],\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Configuration file for Testing Environment\nDESCRIPTION: Sets up a YAML configuration file for the test environment, specifying API, insights, and web server details, as well as database connection settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# This is the configuration file for your test environment.\n# All ports are set to zero in this file which makes the server find the next available port.\n# This is needed to enable running tests concurrently. To set up your server, you will\n# need to add the name of the database you are connecting to and the user name.\n# The password for the database is stored in the config/passwords.yaml.\n\n# Configuration for the main API test server.\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# Configuration for the Insights test server.\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# Configuration for the web test server.\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# This is the database setup for your test server.\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\n# This is the setup for your Redis test instance.\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Creating Future Call Class in Dart\nDESCRIPTION: Example of creating a future call class by extending FutureCall and implementing the invoke method. The invoke method receives a Session object and an optional SerializableModel parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/14-scheduling.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleFutureCall extends FutureCall<MyModelEntity> {\n  @override\n  Future<void> invoke(Session session, MyModelEntity? object) async {\n    // Do something interesting in the future here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying User Sign-in Status in Serverpod\nDESCRIPTION: Demonstrates how to check if a user is currently signed in using the session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Boolean Default Value in YAML\nDESCRIPTION: This YAML shows how to define a boolean field with a default value of `true`.  If no value is provided, the `boolDefault` field will default to `true` in both the model and the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n\"boolDefault: bool, default=true\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Exact Name using Equals in Dart\nDESCRIPTION: This snippet demonstrates how to fetch all users with the name 'Alice' using the equals operation. It shows precise matching and illustrates the retrieval method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.equals('Alice')\n);\n```\n\n----------------------------------------\n\nTITLE: Database Read Operation by ID in Dart\nDESCRIPTION: Example of retrieving a single row from the database using its ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration in Serverpod CLI\nDESCRIPTION: Command to create a new migration using the Serverpod CLI. This compares the current schema with the last migration and generates a new migration if differences are found.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration Setup\nDESCRIPTION: Server-side configuration for authentication settings and behaviors.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;  \n  \nvoid run(List<String> args) async {\n\n  auth.AuthConfig.set(auth.AuthConfig(  \n    minPasswordLength: 12,\n  ));  \n    \n  // Start the Serverpod server.  \n  await pod.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Authentication State Changes in Flutter\nDESCRIPTION: Adds a listener to the SessionManager to track changes in user authentication status. This example updates the GUI using the setState() method when authentication changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  \n  // Rebuild the page if authentication state changes.\n  sessionManager.addListener(() {\n    setState(() {});\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows by Filter in Serverpod\nDESCRIPTION: This snippet demonstrates how to delete rows that match a specific filtering condition using the `deleteWhere` method. It returns a List of deleted models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.deleteWhere(\n  session,\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Relation Between Database Tables in a Serializable Model\nDESCRIPTION: This snippet illustrates how to create a relation between two database tables using the 'relation' keyword in a model definition. The 'Company' model includes an 'address' field that references the Address model, establishing a relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\n  table: company\n  fields:\n    address: Address?, relation\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Level Visibility Scopes in Serverpod Models\nDESCRIPTION: Example showing how to set visibility scopes on a per-field basis, making some fields only available on the server while others are accessible to both server and client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: SelectivelyHiddenClass\nfields:\n  hiddenSecretKey: String, scope=serverOnly\n  publicKey: String\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Dart with Serverpod\nDESCRIPTION: Demonstrates how to implement caching for user data retrieval using Serverpod's caching system. The example shows how to check for cached data, fetch from database if not cached, and store in cache with a specified lifetime of 5 minutes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(cacheKey) as UserData?;\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional One-to-many Relationships with Object Relations in Serverpod\nDESCRIPTION: Example of defining a bidirectional one-to-many relationship between Company and Employee using object relations on both sides, connected with a named relation parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation(name=company_employees)\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Serverpod Streaming Methods (Server-side)\nDESCRIPTION: This snippet demonstrates error handling in a Serverpod streaming method on the server side. It listens for errors on the input stream and throws a serializable exception in response.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/15-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Stream echoStream(Session session, Stream stream) async* {\n    stream.listen((message) {\n      // Do nothing\n    }, onError: (error) {\n      print('Server received error: $error');\n      throw SerializableException('Error from server');\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Insert Operation\nDESCRIPTION: Shows how to insert a new row into the database using Serverpod's ORM.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Attaching a Single Row in Serverpod\nDESCRIPTION: This snippet demonstrates linking a single employee to a company in Serverpod. The 'attachRow' method is used. Requires session and record IDs. Outputs the linked employee and company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attachRow.employees(session, company!, employee!);\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment in YAML\nDESCRIPTION: Creates a test.yaml file in the config directory to set up the test environment, including API, Insights, and web servers, as well as database and Redis configurations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Random in AuthConfig\nDESCRIPTION: This Dart snippet shows how to configure the allowUnsecureRandom property in AuthConfig to ensure secure random number generation for password hashing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: false,\n));\n```\n\n----------------------------------------\n\nTITLE: Client-Side File Upload Process\nDESCRIPTION: Complete client-side workflow for requesting upload description, uploading a file, and verifying the upload with the server\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Row by ID from Database in Dart\nDESCRIPTION: This Dart snippet retrieves a specific row from the database by invoking the static 'db.findById' method with the specified companyId. It is useful for accessing individual records based on their unique identifiers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Database Row in Dart\nDESCRIPTION: Retrieve a single database row by ID or using a conditional expression\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Including Nested Relational Data in Serverpod Query (Dart)\nDESCRIPTION: Shows how to include deeply nested objects in a Serverpod query. This example retrieves an employee record with the related company object, which includes its related address object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Note Dialog in Flutter\nDESCRIPTION: A dialog component for creating and editing notes. It provides a text field for the user to enter the note content and a save button that triggers a callback with the entered text.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting a List of Related Employees\nDESCRIPTION: This snippet shows how to sort the included list of employees based on a specific field. The `orderBy` clause is used to sort the employees by their names in ascending order. It uses a lambda expression to specify the field to sort by.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      orderBy: (t) => t.name,\n    ),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows in Dart\nDESCRIPTION: This Dart snippet shows how to find multiple rows in the database using the `find` method.  The returned value is a List of TableRows.  The code includes a where clause and a limit.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"var companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\"\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Override for Testing in Dart\nDESCRIPTION: Shows how to create an authenticated override for testing by specifying a user ID and scopes. This allows testing scenarios where a user has specific permissions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nstatic AuthenticationOverride authenticationInfo(\n  int userId,\n  Set<Scope> scopes, {\n  String? authId,\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Users with In Set Filter in Dart\nDESCRIPTION: Illustrates how to use the inSet filter to fetch users with names matching a set of values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.inSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Rows in Dart\nDESCRIPTION: Modify a database row using the update method. Ensure that the object has a non-null `id` to be successfully updated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\\nmyCompany.name = 'New name';\\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Defining a Note Serializable Class in YAML\nDESCRIPTION: The YAML snippet defines a serializable 'Note' class with a 'text' field. The Serverpod generator uses this definition to create Dart classes for server-client data interchange.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Catching a Serializable Exception in the Client App\nDESCRIPTION: Shows how to catch a serializable exception in the client application. This demonstrates the type-safe error handling that Serverpod enables between server and client, allowing for specific exception types to be caught and handled.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  client.example.doThingy();\n}\non MyException catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Unsafe Data Modification with Serverpod in Dart\nDESCRIPTION: Performs a SQL modification operation like INSERT, UPDATE, or DELETE using the extended protocol via Serverpod in Dart, without returning query results. Leverages parameter binding to ensure security against SQL injection. Inputs are SQL statement and named parameters map, output is the number of affected rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeExecute(\n  r'DELETE FROM mytable WHERE id = @id',\n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Upload Description\nDESCRIPTION: This Dart code snippet demonstrates how to create an upload description on the server using Serverpod's `session.storage.createDirectFileUploadDescription` method. It grants access to the app to upload a file to a specified storage ID and path. The function takes a `Session` object and a file `path` as input and returns a string representing the upload description.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Matching Set in Dart using Serverpod\nDESCRIPTION: This snippet uses 'inSet' to filter users with names matching any in a set. It depends on a User model with a 'name' column and matches names 'Alice' or 'Bob'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.inSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Storage Security in Serverpod\nDESCRIPTION: This Dart snippet configures security settings for password storage in Serverpod, introducing additional layers of encryption using peppering and secure random configurations. The peppering setting must be kept secret, and the configurations ensure compliance with security standards.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  emailPasswordPepper: 'your-pepper'\n```\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: false,\n));\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Client Dependency\nDESCRIPTION: Adds the serverpod_auth_client package as a dependency to the client project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Custom Class Definition in Dart\nDESCRIPTION: This snippet showcases the complete definition of a custom class in Dart, including the constructor, `toJson()`, and `fromJson()` methods. It provides a practical example of how to implement custom serialization. The class provides both JSON serialization and deserialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ClassName {\n  String name;\n  ClassName(this.name);\n\n  toJson() {\n    return {\n      'name': name,\n    };\n  }\n\n  factory ClassName.fromJson(\n    Map<String, dynamic> jsonSerialization,\n  ) {\n    return ClassName(\n      jsonSerialization['name'],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authentication Endpoint in Serverpod\nDESCRIPTION: This snippet shows a complete implementation of a custom authentication endpoint. It includes user authentication, finding or creating a user, creating an auth token, and returning an AuthenticationResponse.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyAuthenticationEndpoint extends Endpoint {\n  Future<AuthenticationResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    // Authenticates a user with email and password.\n    if (!authenticateUser(session, username, password)) {\n      return AuthenticationResponse(success: false);\n    }\n\n    // Finds or creates a user in the database using the User methods.\n    var userInfo = findOrCreateUser(session, username);\n\n    // Creates an authentication key for the user.\n    var authToken = await session.auth.signInUser(\n      userInfo.id!,\n      'myAuth',\n      scopes: {},\n    );\n\n    // Returns the authentication response.\n    return AuthenticationResponse(\n      success: true,\n      keyId: authToken.id,\n      key: authToken.key,\n      userInfo: userInfo,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginated Fetch Using Limit and Offset\nDESCRIPTION: This snippet shows how to retrieve the 31st to 40th company using both limit and offset for pagination. It requires Serverpod framework, a 'Company' database model, and proper session handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(  \n  session,  \n  limit: 10,  \n  offset: 30,\n);\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating User in Serverpod Authentication\nDESCRIPTION: Demonstrates how to find a user by email or identifier, and create a new user if not found using Serverpod's Users methods\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nUserInfo? userInfo;\nuserInfo = await Users.findUserByEmail(session, email);\nuserInfo ??= await Users.findUserByIdentifier(session, userIdentifier);\nif (userInfo == null) {\n  userInfo = UserInfo(\n    userIdentifier: userIdentifier,\n    userName: name,\n    email: email,\n    blocked: false,\n    created: DateTime.now().toUtc(),\n    scopeNames: [],\n  );\n  userInfo = await Users.createUser(session, userInfo, _authMethod);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Client Dependency in YAML\nDESCRIPTION: Adds the serverpod_auth_client package as a dependency to the client project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Setting Up PixoramaEndpoint Class with Image Constants\nDESCRIPTION: Initial implementation of the PixoramaEndpoint class with constants for image dimensions and a Uint8List to store pixel data. This forms the base of the server-side functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/endpoints/pixorama_endpoint.dart\n\nimport 'dart:typed_data';\n\nimport 'package:serverpod/serverpod.dart';\n\nclass PixoramaEndpoint extends Endpoint {\n  static const _imageWidth = 64;\n  static const _imageHeight = 64;\n  static const _numPixels = _imageWidth * _imageHeight;\n\n  static const _numColorsInPalette = 16;\n  static const _defaultPixelColor = 2;\n  \n  final _pixelData = Uint8List(_numPixels)\n    ..fillRange(\n      0,\n      _numPixels,\n      _defaultPixelColor,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Handler in Dart\nDESCRIPTION: Adds the authentication handler to the Serverpod instance in the server's main file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query with Named Parameters in Dart\nDESCRIPTION: Demonstrates how to use the unsafeQuery method to execute a raw SQL query with named parameters. This method uses the extended query protocol for parameter binding to prevent SQL injection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeQuery(\n  r'SELECT * FROM mytable WHERE id = @id', \n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation\nDESCRIPTION: Client-side code demonstrating the complete file upload process including getting upload description, uploading the file, and verifying the upload.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Token Validation with Custom AuthenticationHandler in Serverpod\nDESCRIPTION: This snippet demonstrates how to override the default authentication handler in Serverpod with a custom validation method. It shows how to check the validity of a token and return an AuthenticationInfo object if valid, or null if invalid. The AuthenticationInfo object includes the user ID and any associated scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Initialize Serverpod and connect it with your generated code.\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Custom validation handler\n    if (token != 'valid') return null;\n\n    return AuthenticationInfo(1, <Scope>{});\n  },\n);\n\n```\n\n----------------------------------------\n\nTITLE: Client-Side Stream Interaction in Dart\nDESCRIPTION: Demonstrates how to create a stream controller, call a streaming method, and handle incoming messages with stream listeners.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/15-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar inStream = StreamController();\nvar outStream = client.example.echoStream(inStream.stream);\noutStream.listen((message) {\n  print('Received message: $message');\n});\n\ninStream.add('Hello');\ninStream.add(42);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Row in Serverpod\nDESCRIPTION: This snippet illustrates how to delete a single row using the `deleteRow` method. The object must have its `id` set and the method returns the deleted model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \nvar companyDeleted = await Company.db.deleteRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pagination in Dart\nDESCRIPTION: Explains how to implement basic pagination using 'limit' and 'offset', fetching the third page of companies with 10 companies per page. The offset is calculated to skip the required number of records. Requires a Serverpod session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint page = 3;\nint companiesPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: companiesPerPage,\n  offset: (page - 1) * companiesPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Future Call Class - Serverpod Dart\nDESCRIPTION: This snippet demonstrates the creation of a future call by extending the `FutureCall` class and overriding the `invoke` method. It requires the `Session` object and optionally a `SerializableModel` as parameters. The method is executed to perform operations at a scheduled time.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/14-scheduling.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleFutureCall extends FutureCall<MyModelEntity> {\n  @override\n  Future<void> invoke(Session session, MyModelEntity? object) async {\n    // Do something interesting in the future here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional One-to-many Relationship with Object Relation in Serverpod YAML\nDESCRIPTION: This snippet demonstrates how to define a bidirectional one-to-many relationship using object relations in Serverpod's YAML configuration. Both Company and Employee models include relation fields with a shared name parameter to link them together.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation(name=company_employees)\n```\n\n----------------------------------------\n\nTITLE: Setting up Serverpod SessionManager and Client\nDESCRIPTION: Initializes the SessionManager and Client for handling authentication in the app's main function.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  const ipAddress = 'localhost';\n\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Isolation Levels in Serverpod (Dart)\nDESCRIPTION: This snippet shows how to set transaction isolation levels using the 'TransactionSettings' object in Serverpod. Isolation levels dictate how the transaction behaves during concurrent operations, impacting data visibility.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction(\n  (transaction) async {\n    await Company.db.insertRow(session, company, transaction: transaction);\n    await Employee.db.insertRow(session, employee, transaction: transaction);\n  },\n  settings: TransactionSettings(isolationLevel: IsolationLevel.serializable),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Response in Serverpod\nDESCRIPTION: This snippet demonstrates how to construct an `AuthenticationResponse` in a Serverpod endpoint, including user information and the authentication token. This response is then sent back to the client after successful authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nclass MyAuthenticationEndpoint extends Endpoint {\n  Future<AuthenticationResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    // Authenticates a user with email and password.\n    if (!authenticateUser(session, username, password)) {\n      return AuthenticationResponse(success: false);\n    }\n\n    // Finds or creates a user in the database using the User methods.\n    var userInfo = findOrCreateUser(session, username);\n\n    // Creates an authentication key for the user.\n    var authToken = await UserAuthentication.signInUser(\n      session,\n      userInfo.id!,\n      'myAuth',\n      scopes: {},\n    );\n\n    // Returns the authentication response.\n    return AuthenticationResponse(\n      success: true,\n      keyId: authToken.id,\n      key: authToken.key,\n      userInfo: userInfo,\n    );\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side method to generate an upload description for file storage, granting client upload access to a specified path in public storage\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Unauthenticated Endpoint in Dart\nDESCRIPTION: This snippet outlines how to test an endpoint with an unauthenticated session. It utilizes the `withServerpod` helper and is designed to throw a specific exception when an unauthenticated request is made.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ngroup('when unauthenticated', () {\n    var unauthenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.unauthenticated(),\n    );\n\n    test(\n        'then calling `hello` should throw `ServerpodUnauthenticatedException`',\n        () async {\n      final future = endpoints.authenticatedExample\n          .hello(unauthenticatedSessionBuilder, 'Michael');\n      await expectLater(\n          future, throwsA(isA<ServerpodUnauthenticatedException>()));\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Cloud Storage - Serverpod Dart\nDESCRIPTION: This code snippet adds a S3 cloud storage configuration to the Serverpod instance. It configures the storage ID, public access, region, bucket name, and public host (CloudFront domain).  This needs to be done before the pod is started.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Removing Authentication Token from Client Key Manager (Dart)\nDESCRIPTION: The Dart snippet demonstrates how to remove a token from the client's key manager using the `remove` method. This functionality is part of managing authentication states in a Serverpod client context, assuming a configured `AuthenticationKeyManager`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait client.authenticationKeyManager?.remove();\n```\n\n----------------------------------------\n\nTITLE: Including deeply nested objects using include in Serverpod\nDESCRIPTION: This snippet demonstrates including deeply nested objects using the `include` method in Serverpod. It retrieves an `Employee` object along with its related `Company` object, which in turn includes the related `Address` object. This allows for retrieving complex object graphs with a single query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"var employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Accessing User Authentication Info in Dart with Serverpod\nDESCRIPTION: This snippet demonstrates how to access the authenticated user's ID using the Session object in a Serverpod endpoint method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  final authenticationInfo = await session.authenticated;\n  final userId = authenticationInfo?.userId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Firebase Auth UI Programmatically\nDESCRIPTION: This Dart code demonstrates how to trigger the Firebase authentication UI programmatically using the `signInWithFirebase` method. It requires the `BuildContext`, a Serverpod client caller, and a list of Firebase authentication providers.  The method returns a nullable `UserInfo` object, indicating success or failure of the sign-in process.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait signInWithFirebase(\n  context: context, \n  caller: client.modules.auth, \n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Notes API Endpoint\nDESCRIPTION: Dart implementation of the NotesEndpoint class with CRUD operations for managing notes in the database\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package/serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    // By ordering by the id column, we always get the notes in the same order\n    // and not in the order they were updated.\n    return await Note.db.find(\n      session,\n      orderBy: (t) => t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.db.insertRow(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.db.deleteRow(session, note);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Row Querying in Dart\nDESCRIPTION: Shows various methods of querying database rows including findById and custom where conditions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Note Fetching Implementation\nDESCRIPTION: Async method to fetch notes from the server and handle potential errors.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relation Filtering\nDESCRIPTION: Advanced filtering using count, none, any, and every operators for one-to-many relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count() > 3\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count((o) => o.itemType.equals('book')) > 3\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.none()\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.none((o) => o.itemType.equals('book')))\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.any()\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.any((o) => o.itemType.equals('book')))\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.every((o) => o.itemType.equals('book'))\n);\n```\n\n----------------------------------------\n\nTITLE: Canceling a Message Stream in Serverpod (Dart)\nDESCRIPTION: Shows how to manually cancel a stream subscription when it's no longer needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/16-server-events.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nvar subscription = stream.listen((message) {\n    print('Received message: $message');\n});\n\nsubscription.cancel();\n```\n\n----------------------------------------\n\nTITLE: Logical AND Operation in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates combining conditions with logical 'AND' to fetch users named 'Alice' and older than 25.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.equals('Alice') & (t.age > 25))\n);\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Sorting in Serverpod\nDESCRIPTION: Illustrates how to sort by multiple columns using orderByList, with different sort directions for each column.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderByList: (t) => [\n    Order(column: t.name, orderDescending: true), \n    Order(column: t.id),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Including lists within lists in Serverpod\nDESCRIPTION: This snippet demonstrates how to include lists within lists in Serverpod using nested `includeList` methods. It retrieves a `Company` object, including a list of `Employee` objects, and for each employee, it includes a list of `Tool` objects. This allows for deeply nested relational data to be retrieved.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"var user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        tools: Tool.includeList(),\n      ),\n    ),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Registering Health Check Handler with Serverpod\nDESCRIPTION: Shows how to register a custom health check handler when initializing a new Serverpod instance. The handler is passed as a parameter during Serverpod instantiation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/13-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Returning Cursor for Next Page in Dart using Serverpod\nDESCRIPTION: This snippet shows how to return the cursor along with the data to the client. The cursor (last ID) can be used to compute the starting point for the next page in cursor-based pagination.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn {\n'data': companies,\n'lastCursor': companies.last.id,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope-based Authorization for Serverpod Endpoints in Dart\nDESCRIPTION: Demonstrates how to restrict access to a Serverpod endpoint based on user scopes, such as admin access.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Row Query in Dart\nDESCRIPTION: Demonstrates how to query multiple rows with conditions and limits using Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod with YAML Config File\nDESCRIPTION: Example YAML configuration file defining server, database, and Redis settings for different runtime environments with detailed configuration options\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/07-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost\n  publicPort: 8080\n  publicScheme: http\n\ninsightsServer:\n  port: 8081\n  publicHost: localhost\n  publicPort: 8081\n  publicScheme: http\n\nwebServer:\n  port: 8082\n  publicHost: localhost\n  publicPort: 8082\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 8090\n  name: database_name\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 8091\n\nmaxRequestSize: 524288\n\nsessionLogs:\n  persistentEnabled: true\n  consoleEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Deletion Method in Dart\nDESCRIPTION: A method that handles the deletion of notes by calling the server endpoint and refreshing the notes list. Includes error handling for failed connections.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rolling Back to Savepoints\nDESCRIPTION: Shows how to roll back a transaction to a previously created savepoint, preserving changes made before the savepoint while discarding later changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  // Changes preserved in the database\n  await Company.db.insertRow(session, company, transaction: transaction);\n  \n  // Create savepoint\n  var savepoint = await transaction.createSavepoint();\n\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n  // Changes rolled back \n  await savepoint.rollback();\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Exception in Server Endpoint\nDESCRIPTION: Server-side implementation showing how to throw a custom serializable exception from within an endpoint method. Demonstrates creating and throwing MyException with a message and error type.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Token Validation Handler in Serverpod\nDESCRIPTION: This snippet demonstrates implementing a custom authentication handler in Serverpod for validating OAuth 2 bearer tokens. It extracts the token, validates it using a custom `myBearerTokenValidator` function, and returns an `AuthenticationInfo` object with the user ID and scopes if the token is valid.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Initialize Serverpod and connect it with your generated code.\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Bearer token validation handler\n    var (uid, scopes) = myBearerTokenValidator(token)\n    if (uid == null) return null;\n\n    return AuthenticationInfo(uid, scopes);\n  },\n);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check Handler in Dart\nDESCRIPTION: Creates a custom health check handler function that returns a list of ServerHealthMetric objects. The handler measures custom metrics and returns their health status along with associated values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/13-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create your custom health metric handler.\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions in Dart\nDESCRIPTION: Perform multiple operations within a single transaction using Serverpod. Configured to revert all changes on failure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\\n  // Do some database queries here.\\n\\n  // Optionally return a value.\\n  return true;\\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Scope-based Authorization to Endpoints\nDESCRIPTION: Demonstrates how to implement scope-based access control for endpoints using the requiredScopes property.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Future Calls in Server Initialization\nDESCRIPTION: Demonstrates how to register a future call during server startup by calling registerFutureCall with a unique name\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/14-scheduling.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid run(List<String> args) async {\n  final pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n  );\n\n  ...\n\n  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Cursor with Paginated Data in Dart\nDESCRIPTION: Details how to append a cursor when returning paginated data, allowing clients to determine the starting point for the subsequent request. Supports consistent pagination even with frequent data updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn {\n  'data': companies,\n  'lastCursor': companies.last.id,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating One-to-Many Relation Using Bridge Table in YAML\nDESCRIPTION: This YAML snippet shows an advanced example of forming a one-to-many relationship between a 'User' class and a 'Company' class using a bridge table. It defines 'User' with fields linking to 'UserInfo' and 'Company', using the 'company_employee' naming for the relation. Each entry must ensure integrity with unique indices for 'userInfoId' and 'companyId'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\n  company: Company?, relation(name=company_employee)\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n  company_unique_idx:\n    fields: companyId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Including relational data using include method in Serverpod\nDESCRIPTION: This snippet demonstrates how to include related data in a Serverpod query using the `include` method. It retrieves an `Employee` object along with its related `Address` object. The `include` method provides a typed interface for accessing declared relations defined in the yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\"var employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Filter and Limit in Serverpod Dart\nDESCRIPTION: This Dart code demonstrates how to find multiple rows using the 'find' method with filtering and limiting. It returns a List of Company models matching the criteria.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Health Check Handler with Serverpod in Dart\nDESCRIPTION: This code snippet shows how to register a custom health check handler when creating a Serverpod object. The handler is passed as a parameter named 'healthCheckHandler' to the Serverpod constructor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/13-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Streaming Session\nDESCRIPTION: This code snippet shows how to associate a user object with a streaming session when the stream is opened. This allows you to store and retrieve state information related to the user throughout the session. The setUserObject method is used to set the user object, which is automatically discarded when the session ends.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/14-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\"Future<void> streamOpened(StreamingSession session) async {\\n  setUserObject(session, MyUserObject());\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube API on Server with GoogleAuth (Dart)\nDESCRIPTION: This code shows how to access the YouTube API on the server side after a user has signed in with Google. It utilizes the `GoogleAuth.authClientForUser` method to obtain an `AutoRefreshingAuthClient`, which is then used to instantiate a `YouTubeApi` client from the `googleapis` package. The client then calls the `playlistItems.list` method to retrieve the user's liked videos.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Using copyWith Method in Dart\nDESCRIPTION: This Dart code demonstrates the usage of the `copyWith` method generated by Serverpod for model classes. It creates a copy of the `john` object with the `name` field updated to `Jane Doe`, while other fields remain unchanged.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n \"var john = User(name: 'John Doe', age: 25);\nvar jane = john.copyWith(name: 'Jane Doe');\"\n```\n\n----------------------------------------\n\nTITLE: Signing Out User from All Devices in Serverpod\nDESCRIPTION: This snippet shows how to sign out a user from all devices using the UserAuthentication.signOutUser method. It can be used with or without specifying a userId.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait UserAuthentication.signOutUser(\n  session,\n  userId: 123,  // Optional: If omitted, the currently authenticated user will be signed out\n);\n```\n\n----------------------------------------\n\nTITLE: Including a List of Related Employees\nDESCRIPTION: This snippet shows how to include a list of related employees when querying for a company. It utilizes the `includeList` method to fetch all employees associated with the company. This is a one-to-many relationship inclusion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Including Related Data in Serverpod Query\nDESCRIPTION: Demonstrates how to include relational data in a query using the include method with a typed interface for declared relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Health Metric Handler in Dart\nDESCRIPTION: Demonstrates how to create a custom health check handler that returns metrics. The handler function takes a Serverpod instance and timestamp as parameters and returns a list of ServerHealthMetric objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/10-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Index in YAML for Serverpod\nDESCRIPTION: Demonstrates how to add a simple index on a single field in a Serverpod YAML configuration file. The index is created on the 'name' field of the 'Company' class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/04-indexing.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Without Results in Dart\nDESCRIPTION: Demonstrates using unsafeExecute method for SQL operations that don't return results, such as DELETE operations. Returns the number of affected rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.dbNext.unsafeExecute(\n  'DELETE FROM mytable WHERE id = 1',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Database Migrations\nDESCRIPTION: Commands to create a new database migration and apply it to update the database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Count of Developers - Dart\nDESCRIPTION: Fetches all companies and sorts them by the count of employees with the role of 'developer', applying a filter in the count method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(\n    (employee) => employee.role.equals('developer'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Limit Pagination in Serverpod\nDESCRIPTION: Demonstrates how to implement basic pagination using the limit parameter to retrieve a specified number of records from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Authentication Tokens to Clients in Serverpod (Dart)\nDESCRIPTION: This Dart code example shows how to send an authentication token to a client by creating an `AuthenticationResponse` for a successful login attempt. It utilizes the `UserAuthentication` and `AuthenticationResponse` classes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nclass MyAuthenticationEndpoint extends Endpoint {\n  Future<AuthenticationResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    // Authenticates a user with email and password.\n    if (!authenticateUser(session, username, password)) {\n      return AuthenticationResponse(success: false);\n    }\n\n    // Finds or creates a user in the database using the User methods.\n    var userInfo = findOrCreateUser(session, username);\n\n    // Creates an authentication key for the user.\n    var authToken = await UserAuthentication.signInUser(\n      session,\n      userInfo.id!,\n      'myAuth',\n      scopes: {},\n    );\n\n    // Returns the authentication response.\n    return AuthenticationResponse(\n      success: true,\n      keyId: authToken.id,\n      key: authToken.key,\n      userInfo: userInfo,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up SessionManager in Flutter - Dart\nDESCRIPTION: Initializes the SessionManager to handle user state, including connectivity and session management for the application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  // Need to call this as we are using Flutter bindings before runApp is called.\n  WidgetsFlutterBinding.ensureInitialized();\n\n  const ipAddress = 'localhost';\n\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Less Than or Equal in Dart using Serverpod\nDESCRIPTION: This snippet filters users aged 25 or younger using the '<=' operator. It retrieves users who are 25 years old or younger.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age <= 25\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Company Model with Database Table in YAML\nDESCRIPTION: This snippet demonstrates how to define a Company model with a corresponding database table using YAML configuration. It includes a 'name' field of type String.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Stream in Serverpod\nDESCRIPTION: Demonstrates creating a stream to listen to messages on a specific channel and processing incoming messages\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nstream.listen((message) {\n    print('Received message: $message');\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Upload Description on Server (Dart)\nDESCRIPTION: This server-side code snippet demonstrates how to create an upload description using Serverpod's storage API. The `createDirectFileUploadDescription` method grants the app permission to upload a file to the specified storage location.  It takes the storage ID and the desired path for the file as input and returns an upload description string.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Streaming Method in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to define a streaming method in a Serverpod endpoint class. The method echoes back any message received through the input stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/15-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Stream echoStream(Session session, Stream stream) async* {\n    await for (var message in stream) {\n      yield message;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Attaching Rows in Relational Data in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to associate multiple employees with a company at once in Serverpod. This operation is atomic, ensuring all or none of the records are linked.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attach.employees(session, company!, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Finding a Row by ID in Serverpod\nDESCRIPTION: This snippet illustrates how to retrieve a single row from the database by its `id` using the `findById` method. If no matching row is found, it returns null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Limit and Offset for Pagination\nDESCRIPTION: In this example, the 'limit' and 'offset' are used to fetch a specific page of company records. It calculates the offset based on the current page number and the number of companies per page.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint page = 3;\nint companiesPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: companiesPerPage,\n  offset: (page - 1) * companiesPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Opening WebSocket Connection in Serverpod Client\nDESCRIPTION: Shows how to open a streaming connection and listen for messages from an endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/15-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait client.openStreamingConnection();\n\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod with Custom Authentication Handler - Dart\nDESCRIPTION: This snippet initializes the Serverpod with a custom authentication handler that validates tokens. If the token is valid, it returns an AuthenticationInfo object; otherwise, it returns null. The code demonstrates the required structure of the authenticationHandler callback.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Initialize Serverpod and connect it with your generated code.\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Custom validation handler\n    if (token != 'valid') return null;\n\n    return AuthenticationInfo(1, <Scope>{});\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query with Parameter Binding - Dart\nDESCRIPTION: This snippet demonstrates how to execute a raw SQL query using the `unsafeQuery` method, which returns a `DatabaseResult` with the results. It employs parameter binding to prevent SQL injection, replacing the `@id` placeholder with a value from the provided parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeQuery(\n  r'SELECT * FROM mytable WHERE id = @id', \n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Serverpod Streaming Session\nDESCRIPTION: This snippet shows how to associate a state (user object) with a streaming session in Serverpod when a stream is opened.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/15-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Client-Side TLS/SSL for Serverpod\nDESCRIPTION: Shows how to configure the client to trust server certificates when connecting over HTTPS. Demonstrates setting up SecurityContext with trusted certificates for the Serverpod client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/21-security-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal securityContext = SecurityContext()\n  ..setTrustedCertificates('path/to/server_cert.pem');\n\n\nfinal client = Client(\n  'https://yourserver.com',\n  securityContext: securityContext,\n  ...\n);\n```\n\n----------------------------------------\n\nTITLE: Seeding Database with Session in Dart\nDESCRIPTION: This snippet describes how to seed a database before tests are executed, utilizing a built session passed to a database insert operation. It ensures that the database contains the necessary entries for testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given Products endpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insert(session, [\n    Product(name: 'Apple', price: 10),\n    Product(name: 'Banana', price: 10)\n    ]);\n  });\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Serverpod\nDESCRIPTION: Server-side method to verify if a file upload was completed successfully. Essential for third-party storage services like S3 or Google Cloud Storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Database Password in Serverpod YAML Configuration\nDESCRIPTION: This YAML snippet shows how to store the database password for the development environment in the passwords.yaml file for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/01-connection.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Enrollment Junction Table in Serverpod\nDESCRIPTION: This YAML defines the Enrollment model, acting as a junction table between Student and Course. It includes foreign key relationships to both Student and Course using the `relation` parameter.  A unique index is defined on the combination of `studentId` and `courseId` to prevent duplicate enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# enrollment.yaml\nclass: Enrollment\ntable: enrollment\nfields:\n  student: Student?, relation(name=student_enrollments)\n  course: Course?, relation(name=course_enrollments)\nindexes:\n  enrollment_index_idx:\n    fields: studentId, courseId\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-side Authentication with Serverpod\nDESCRIPTION: This snippet shows how to import the authentication module and configure the server-side settings for sending validation and password reset emails. It uses Dart programming language and the Serverpod framework. The expected inputs are an email and validation code, with boolean outputs indicating success.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Complete Main Application Implementation\nDESCRIPTION: Full implementation of the main Flutter application including note management, UI components, and server communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n                    _notes!.add(note);\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ProtocolSerialization Implementation Example\nDESCRIPTION: Example of implementing ProtocolSerialization interface for selective field serialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements ProtocolSerialization {\n  final String? value;\n  final String? serverSideValue;\n\n  .......\n\n  // Serializes fields specifically for protocol communication\n  Map<String, dynamic> toJsonForProtocol() {\n    return {\n      \"value\":value,\n    };\n  }\n\n  // Serializes all fields, including those intended only for server-side use\n  Map<String, dynamic> toJson() {\n    return {\n      \"value\": value,\n      \"serverSideValue\": serverSideValue,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Filtered Employee Count - Dart\nDESCRIPTION: Fetches all companies from the database and sorts them by the count of employees with the role of 'developer', using a filter in the count method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(\n    (employee) => employee.role.equals('developer'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth App Dependencies\nDESCRIPTION: Adds necessary dependencies to the app's pubspec.yaml file for authentication support.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serializable Class in Dart\nDESCRIPTION: Provides a complete example of creating a custom serializable class in Dart, including the required toJson() and fromJson() methods for use with Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ClassName {\n  String name;\n  ClassName(this.name);\n\n  toJson() {\n    return {\n      'name': name,\n    };\n  }\n\n  factory ClassName.fromJson(\n    Map<String, dynamic> jsonSerialization,\n  ) {\n    return ClassName(\n      jsonSerialization['name'],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Serverpod\nDESCRIPTION: YAML configuration for database connection settings in Serverpod. This snippet shows the database connection parameters including host, port, name, and user that can be found in the config/development.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: localhost\n  port: 8090\n  name: projectname\n  user: postgres\n\n...\n```\n\n----------------------------------------\n\nTITLE: Validating Stream Communication with Serverpod in Dart\nDESCRIPTION: Test interactions with a shared stream using Serverpod, handling concurrent user sessions. Requires Serverpod setup and understanding of stream operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CommunicationExampleEndpoint {\\n  static const sharedStreamName = 'shared-stream';\\n  Future<void> postNumberToSharedStream(Session session, int number) async {\\n    await session.messages\\n        .postMessage(sharedStreamName, SimpleData(num: number));\\n  }\\n\\n  Stream<int> listenForNumbersOnSharedStream(Session session) async* {\\n    var sharedStream =\\n        session.messages.createStream<SimpleData>(sharedStreamName);\\n\\n    await for (var message in sharedStream) {\\n      yield message.num;\\n    }\\n  }\\n}\\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given CommunicationExampleEndpoint', (sessionBuilder, endpoints) {\\n  const int userId1 = 1;\\n  const int userId2 = 2;\\n\\n  test(\\n      'when calling postNumberToSharedStream and listenForNumbersOnSharedStream '\\n      'with different sessions then number should be echoed',\\n      () async {\\n    var userSession1 = sessionBuilder.copyWith(\\n      authentication: AuthenticationOverride.authenticationInfo(\\n        userId1,\\n        {},\\n      ),\\n    );\\n    var userSession2 = sessionBuilder.copyWith(\\n      authentication: AuthenticationOverride.authenticationInfo(\\n        userId2,\\n        {},\\n      ),\\n    );\\n\\n    var stream =\\n        endpoints.testTools.listenForNumbersOnSharedStream(userSession1);\\n    // Wait for `listenForNumbersOnSharedStream` to execute up to its \\n    // `yield` statement before continuing\\n    await flushEventQueue(); \\n\\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 111);\\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 222);\\n\\n    await expectLater(stream.take(2), emitsInOrder([111, 222]));\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: SignInWithGoogleButton with Client and Server IDs (Flutter)\nDESCRIPTION: This Dart code snippet shows how to use the `SignInWithGoogleButton` widget with client and server IDs. This is an alternative to including the JSON files in client projects and allows for passing the IDs directly. `clientId` is for the client (null on web), `serverClientId` is from the server (required on web), and the `redirectUri` must be provided.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Paginating Related Lists in Serverpod\nDESCRIPTION: Shows how to implement pagination for included lists using limit and offset parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      limit: 10,\n      offset: 10,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Company and Employees in Dart\nDESCRIPTION: This Dart snippet shows how to fetch a `Company` object and its associated `Employee` objects using separate queries, effectively creating a nested object structure. It retrieves a company by ID and then retrieves all employees associated with that company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n\"var company = await Company.findById(session, id);\n\nvar employees = await Employee.find(\n  session,\n  where: (t) => t.companyId.equals(company.id),\n);\n\ncompany.employees = employees;\"\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase and FlutterFire CLI\nDESCRIPTION: Command line instructions for adding Firebase dependencies and configuring the project with FlutterFire.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add firebase_core firebase_auth firebase_ui_auth\n$ flutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Referencing a Module in YAML Models (YAML)\nDESCRIPTION: This snippet shows how to reference a serializable class from another module (in this case, the auth module) in a YAML model file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/10-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Specifying Index Type in YAML\nDESCRIPTION: Illustrates how to specify the type of an index in a YAML file for Serverpod using the 'type' key. Supports all PostgreSQL index types, with 'btree' as default. The input is field names and type, and the output is a typed index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In Button in Flutter\nDESCRIPTION: Use the SignInWithAppleButton widget from the serverpod_auth_apple_flutter package to render an Apple Sign-In button and trigger the native sign-in UI. The caller parameter should be set to the authentication module from your Serverpod client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Index in YAML\nDESCRIPTION: Shows how to configure an index as unique in a YAML configuration for Serverpod, ensuring fields have unique values across the table. The 'unique' keyword is set to true to enforce uniqueness. No external dependencies needed. The input is field names; the output is a unique index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Rolling Back to Savepoints (Dart)\nDESCRIPTION: This snippet demonstrates how to roll back to a previously created savepoint in a transaction. By using savepoints, you can revert changes made after the savepoint was established, allowing for selective undoing of database operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  // Changes preserved in the database\n  await Company.db.insertRow(session, company, transaction: transaction);\n  \n  // Create savepoint\n  var savepoint = await transaction.createSavepoint();\n\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n  // Changes rolled back \n  await savepoint.rollback();\n});\n```\n\n----------------------------------------\n\nTITLE: User Sign-In (Dart)\nDESCRIPTION: A Dart snippet for signing in a user using the 'signIn' method of 'EmailAuthController', requiring the user's email and password.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.signIn(email, password);\n```\n\n----------------------------------------\n\nTITLE: Sending a Message in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to send a message to a specific channel using the postMessage method. The message must be a Serverpod model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/16-server-events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message);\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Stream Method in Dart\nDESCRIPTION: Demonstrates how to create a basic streaming method that echoes back any received message using Serverpod's Endpoint class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Stream echoStream(Session session, Stream stream) async* {\n    await for (var message in stream) {\n      yield message;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase in Dart\nDESCRIPTION: Code snippet for initializing Firebase in the main.dart file of a Flutter project. It sets up Firebase and configures the FirebaseUIAuth with a PhoneAuthProvider.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n\n...\nvoid main() async {\n  ...\n  await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n\n  firebase.FirebaseUIAuth.configureProviders([\n    firebase.PhoneAuthProvider(),\n  ]);\n\n  ...\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing a Listener in Dart\nDESCRIPTION: This example shows how to use the `addListener` method to attach a callback function to a message channel. The listener triggers the callback each time a message is posted to the channel. It also demonstrates removing the listener with `removeListener`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/16-server-events.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nsession.messages.addListener('user_updates', (message) {\n  print('Received message: $message');\n});\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Call at Specific Time\nDESCRIPTION: Demonstrates scheduling a future call at a precise date and time using futureCallAtTime method\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/14-scheduling.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallAtTime(\n  'exampleFutureCall',\n  data,\n  DateTime(2025, 1, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking User Sign-in Status in Dart\nDESCRIPTION: This snippet checks whether a user is currently signed in within a session using the Serverpod framework. It builds on the 'serverpod_auth' module to access the session authentication status. The key parameter is the 'session' object, and the expected output is a boolean indicating whether the user is signed in.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing imageUpdates Stream in PixoramaEndpoint\nDESCRIPTION: Dart code for the imageUpdates method in PixoramaEndpoint, providing a stream of image updates to clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass PixoramaEndpoint extends Endpoint {\n  // ...\n\n  Stream imageUpdates(Session session) async* {\n    var updateStream =\n        session.messages.createStream<ImageUpdate>(_channelPixelAdded);\n\n    yield ImageData(\n      pixels: _pixelData.buffer.asByteData(),\n      width: _imageWidth,\n      height: _imageHeight,\n    );\n\n    await for (var imageUpdate in updateStream) {\n      yield imageUpdate;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing fromJson() Constructor for Custom Serialization in Dart\nDESCRIPTION: Shows how to create a fromJson() constructor or factory that takes a JSON serialization as parameters and constructs an object. This is another requirement for custom serializable objects in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\nMap<String, dynamic> json,\n) {\nreturn ClassName(\n    name: json['name'] as String,\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Including Relational Lists in Serverpod Query (Dart)\nDESCRIPTION: Shows how to include a list of related objects (1:n relation) in a Serverpod query. This example retrieves a company record with all related employees included.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Database with Expression in Serverpod\nDESCRIPTION: Demonstrates how to perform a refined database search using db.findFirstRow method with a typed expression builder. The example searches for a company by name and returns the first matching row.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Exception Handling in Serverpod\nDESCRIPTION: Example of logging a warning message with an exception and stack trace in Serverpod. This demonstrates setting a custom log level and including error details that will be stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Call with Delay\nDESCRIPTION: Demonstrates how to schedule a future call to be executed after a specific duration using futureCallWithDelay method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/14-scheduling.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoints for CRUD Operations in Dart\nDESCRIPTION: The Dart snippet defines endpoints to perform CRUD operations on 'Note' objects using Serverpod. Serverpod and the generated protocol are required to extend the base Endpoint class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    return await Note.find(\n      session,\n      orderBy: Note.t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.insert(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.deleteRow(session, note);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Basic Messages in Dart with Serverpod\nDESCRIPTION: Shows how to log a simple text message using the session object. Messages are written to the database when the session is closed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/09-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-One Relation Filter in Dart\nDESCRIPTION: Shows how to filter users based on a property of a related one-to-one object (address in this case).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.address.street.like('%road%')\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Relationships: Attach and Detach Operations using Serverpod in Dart\nDESCRIPTION: This section provides examples of how to manage database relationships by attaching or detaching related records. Functions include attaching single or multiple employee records to a company. Dependencies include having the correct IDs and relational configurations in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attachRow.employees(session, company!, employee!);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attach.employees(session, company!, [employee!]);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detachRow.employees(session, employee!);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detach.employees(session, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Receiving Stream Updates from Serverpod Endpoint in Dart\nDESCRIPTION: This code shows how to receive updates from a server endpoint by listening to its WebSocket stream in a Serverpod client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Row in Serverpod using Dart\nDESCRIPTION: Demonstrates how to update a single Company row in the database using the 'updateRow' method. The object must have its 'id' set to an existing value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \ncompany.name = 'New name';\nvar updatedCompany = await Company.db.updateRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Opening Streaming Connection in Serverpod Client\nDESCRIPTION: This code demonstrates how to open a streaming connection to the Serverpod server from a client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/15-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait client.openStreamingConnection();\n```\n\n----------------------------------------\n\nTITLE: Database Expression Examples in Dart\nDESCRIPTION: Shows various ways to create database query expressions in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nt.name.equals('My company')\n\nt.foundedDate >= DateTime.utc(2020)\n\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions in Serverpod with Level - Dart\nDESCRIPTION: This snippet illustrates how to log an exception along with a message and a logging level. It allows for more detailed logging of issues that occur during session execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Full Example of Referential Actions in YAML\nDESCRIPTION: A complete example defining a class with relationships specifying referential actions. It sets the parentId to null upon updates to the parent and performs no action on deletions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serializable Class with Freezed\nDESCRIPTION: Illustrates how to create a custom serializable class using the Freezed package in Dart. Includes required methods 'toJson' and 'fromJson' for serialization. Ensures compatibility with Serverpod's serialization infrastructure. Requires dependencies on 'freezed_annotation' and 'serverpod_serialization'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/02-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:serverpod_serialization/serverpod_serialization.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n    SerializationManager serializationManager,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Serverpod\nDESCRIPTION: Demonstrates importing the serverpod_auth_server module and setting up a custom authentication configuration. This configuration includes setting security parameters like minimum password length before starting the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;  \n  \nvoid run(List<String> args) async {\n\n  auth.AuthConfig.set(auth.AuthConfig(  \n    minPasswordLength: 12,\n  ));  \n    \n  // Start the Serverpod server.  \n  await pod.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Future Call in Dart\nDESCRIPTION: This snippet illustrates how to register a future call within the server's main run method by using the registerFutureCall method of the Serverpod instance. The future call is given a globally unique name for later invocation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/14-scheduling.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid run(List<String> args) async {\n  final pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n  );\n\n  ...\n\n  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Note Function in Dart for Serverpod\nDESCRIPTION: This snippet defines a method to delete a note using the Serverpod client. It calls the deleteNote endpoint and refreshes the notes list upon successful deletion. Error handling is included to manage connection failures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Rows in Serverpod\nDESCRIPTION: Demonstrates how to insert multiple Company records in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar rows = [Company(name: 'Serverpod'), Company(name: 'Google')];\nvar companies = await Company.db.insert(session, rows);\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Method from Flutter\nDESCRIPTION: Dart code example demonstrating how to call a Serverpod server method from a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = Company(\n  name: 'Serverpod',\n  foundedDate: DateTime(2021, 9, 27),\n  employees: [\n    'Alex',\n    'Isak',\n    'Viktor',\n  ],\n);\n\nvar result = await client.company.isLegit(company);\n```\n\n----------------------------------------\n\nTITLE: Implementing ProtocolSerialization for Custom Objects in Serverpod\nDESCRIPTION: Demonstrates how to implement the ProtocolSerialization interface for custom objects in Serverpod. This allows for selective field serialization when transmitting data to the client-side, enhancing security and data integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements ProtocolSerialization {\n  final String? value;\n  final String? serverSideValue;\n\n  .......\n\n  // Serializes fields specifically for protocol communication\n  Map<String, dynamic> toJsonForProtocol() {\n    return {\n      \"value\":value,\n    };\n  }\n\n  // Serializes all fields, including those intended only for server-side use\n  Map<String, dynamic> toJson() {\n    return {\n      \"value\": value,\n      \"serverSideValue\": serverSideValue,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Referential Action in Object Relations\nDESCRIPTION: Illustrates the default referential actions for one-to-one object relations in Serverpod if no specific actions are defined. Defaults to NoAction for both update and delete operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: Model?, relation(onUpdate=NoAction, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Nested Object Inclusion in Serverpod Query\nDESCRIPTION: Shows how to include deeply nested objects in a query, demonstrating multi-level relationship inclusion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to update a user's authorization scopes using the updateUserScopes method from the Users class, which replaces all previously stored scopes with a new set.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Caching User Data in Serverpod\nDESCRIPTION: This Dart code snippet demonstrates how to cache user data in Serverpod using the local cache. It first tries to retrieve the data from the cache using a unique key. If the data is not found, it fetches it from the database, saves it in the cache with a lifetime of 5 minutes, and then returns the data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/07-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = UserData.db.findById(session, userId);\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Unsafe Execute for Data Modification in Dart\nDESCRIPTION: This snippet shows how to execute a SQL statement that modifies data (such as DELETE) using the `unsafeExecute` method. It returns the number of rows affected, ensuring that the execution is performed safely with parameter binding to prevent SQL injection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeExecute(\n  r'DELETE FROM mytable WHERE id = @id',\n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube API with Google Authentication in Dart\nDESCRIPTION: Server-side code demonstrating how to create an authenticated YouTube API client and fetch a user's liked videos list.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar googleClient = await authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youtubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n}\nelse {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out a Device in Serverpod - Dart\nDESCRIPTION: This snippet shows how to sign out a single device using the signOutDevice method in Serverpod. It revokes the current session's authentication key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutDevice();\n```\n\n----------------------------------------\n\nTITLE: Registering Signed In User - Dart\nDESCRIPTION: Registers a signed-in user in the session manager, which persists user information and refreshes any open connections.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.registerSignedInUser(\n  userInfo,\n  keyId,\n  authKey,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Serverpod Endpoint in Dart\nDESCRIPTION: Demonstrates how to create a basic endpoint class that extends Endpoint with a simple hello method. The endpoint must be placed in the endpoints directory and return a typed Future with Session as first parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: copyWith Method in Dart\nDESCRIPTION: This snippet shows the implementation of the copyWith() method in Dart, which is required for custom serialization in Serverpod. It returns a new instance of the object with specified fields replaced. Immutability is encouraged by doing deep copies in copyWith.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n    ClassName copyWith({\n      String? name,\n    }) {\n      return ClassName(\n        name: name ?? this.name,\n      );\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in YAML for Serverpod\nDESCRIPTION: This YAML snippet shows the configuration for database connection details in Serverpod. It specifies the host, port, database name, and user for connecting to a Postgres instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndatabase:\n  host: localhost\n  port: 8090\n  name: <YOUR_PROJECT_NAME>\n  user: postgres\n...\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User Information in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to access the authenticated user's ID through the Session object using the authenticated asynchronous getter, which provides user identification information for the current session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  final authenticationInfo = await session.authenticated;\n  final userId = authenticationInfo?.userId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Expressions in Serverpod\nDESCRIPTION: Dart code demonstrating how to use expressions to query data from the database in Serverpod. This example finds the first row where the name equals 'My Company'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Serverpod\nDESCRIPTION: Demonstrates how to access the IP address of the client calling a method in Serverpod, even when running behind a load balancer. This snippet casts the Session to MethodCallSession and uses an extension on HttpRequest.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/05-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Creating an Enum with Index-Based Serialization\nDESCRIPTION: Example of defining an enum with animal types using the default index-based serialization. The enum values will be serialized as integers (0, 1, 2, etc.).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Multiple Rows in Serverpod Dart\nDESCRIPTION: This Dart code demonstrates how to update multiple rows in a batch operation using the 'update' method. It fetches companies, modifies their names, and updates them atomically in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name')).toList();\nvar updatedCompanies = await Company.db.update(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit One-to-Many Relationship with Foreign Key in Serverpod YAML\nDESCRIPTION: This code example illustrates the explicit definition of a one-to-many relationship between `Company` and `Employee` using a foreign key field. The `employee.yaml` file provides a `companyId` field of type `int` marked with `relation`, allowing multiple employee entries to reference the same company in `company.yaml`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Controller Setup (Dart)\nDESCRIPTION: This snippet shows the setup of a custom authentication controller using the 'EmailAuthController' class from the 'serverpod_auth_email_flutter' module. The controller provides functionality to manage email/password authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Mini Project\nDESCRIPTION: Command to create a new Serverpod Mini project using the CLI tool.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create myminipod --mini\n```\n\n----------------------------------------\n\nTITLE: Filtering relational lists using where clause in Serverpod\nDESCRIPTION: This snippet demonstrates how to filter the included list of related objects using the `where` clause in Serverpod. It retrieves a `Company` object and includes only the `Employee` objects whose names start with the letter 'a'.  The `where` parameter accepts a function that defines the filtering condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"var user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      where: (t) => t.name.ilike('a%')\n    ),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Inserting a Table Row using Serverpod in Dart\nDESCRIPTION: This Dart snippet shows how to insert a new row into the database using the `insert` method of the `db` field in the `Session` object. After the object has been inserted, its `id` field is set.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"var myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\"\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Filters and Limits in Dart with Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to retrieve multiple rows from the 'company' table based on a filter expression and a limit using the `find` method. It retrieves a list of `Company` objects where the ID is less than 100, with a maximum of 50 results.  The method returns a `List` of `Company` objects that match the filter criteria.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"var companies = await Company.db.find(\n  session,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\"\n```\n\n----------------------------------------\n\nTITLE: Authentication Testing Example in Dart\nDESCRIPTION: Demonstrates testing both authenticated and unauthenticated scenarios using AuthenticationOverride.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given AuthenticatedExample endpoint', (sessionBuilder, endpoints) {\n  // Corresponds to an actual user id\n  const int userId = 1234;\n\n  group('when authenticated', () {\n    var authenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication:\n          AuthenticationOverride.authenticationInfo(userId, {Scope('user')}),\n    );\n\n    test('then calling `hello` should return greeting', () async {\n      final greeting = await endpoints.authenticatedExample\n          .hello(authenticatedSessionBuilder, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n\n  group('when unauthenticated', () {\n    var unauthenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.unauthenticated(),\n    );\n\n    test(\n        'then calling `hello` should throw `ServerpodUnauthenticatedException`',\n        () async {\n      final future = endpoints.authenticatedExample\n          .hello(unauthenticatedSessionBuilder, 'Michael');\n      await expectLater(\n          future, throwsA(isA<ServerpodUnauthenticatedException>()));\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Company Model in YAML for Serverpod\nDESCRIPTION: YAML configuration for defining a Company model with a 'name' field, which will be used to generate the corresponding Dart class and database table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Storing a Complex Type as JSON in a Serializable Model\nDESCRIPTION: This snippet illustrates how to store a complex type (like another model) as a JSON object in the database. It defines a 'Company' model with an 'address' field that is stored as a JSON column.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\n  table: company\n  fields:\n    address: Address # Stored as a json column\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns in Multiple Rows in Serverpod using Dart\nDESCRIPTION: Shows how to update specific columns of multiple Company rows using the 'update' method with a 'columns' parameter. Only specified columns are updated for all rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name', address: 'Baker Street')).toList();\nvar updatedCompanies = await Company.db.update(session, companies, columns: (t) => [t.name]);\n```\n\n----------------------------------------\n\nTITLE: Independent Relations on Both Sides\nDESCRIPTION: Demonstrates defining multiple independent relations between User and Address models\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  friendsAddress: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: friendsAddressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  resident: User?, relation\nindexes:\n  address_user_unique_idx:\n    fields: residentId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Filter in Dart\nDESCRIPTION: Example of counting Company records that match a specific filter condition\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar count = await Company.db.count(\n  session, \n  where: (t) => t.name.like('s%'),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Request Size in Serverpod\nDESCRIPTION: YAML configuration example showing how to set the maximum request size for endpoint calls.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmaxRequestSize: 1048576\n```\n\n----------------------------------------\n\nTITLE: Server-Only Serializable Class\nDESCRIPTION: Demonstrates how to limit the visibility of a generated serializable class to the server only by setting the 'serverOnly' property. Ensures data privacy for sensitive information stored in server-exclusive fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/02-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Storage in Serverpod\nDESCRIPTION: Configuration method to add Amazon S3 as a backend for file storage with custom region and hosting settings\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Retrieving File as ByteData\nDESCRIPTION: This Dart code snippet retrieves a file from storage as `ByteData` using the `session.storage.retrieveFile` method. It takes the storage ID and file path as input and returns the file content as `ByteData`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters in Serverpod with Dart\nDESCRIPTION: Demonstrates usage of named and positional parameters in Serverpod for secure raw SQL query execution in Dart, to avert SQL injection attacks. Requires a session object to execute the queries. Named parameters use a Map for input, while positional parameters use a List.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Named parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = @color AND size = @size',\n  QueryParameters.named({\n    'color': 'green',\n    'size': 'XL',\n  }));\n\n// Positional parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',\n  QueryParameters.positional(['green', 'XL']),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Model with a Table Mapping in YAML\nDESCRIPTION: This snippet demonstrates how to define a serializable model and map it to a database table using the `table` keyword in YAML. The model is named 'Company' with a 'name' field of type String. This setup enables CRUD operations and migration generation in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\n  table: company\n  fields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Creating Message Stream Listener in Serverpod\nDESCRIPTION: Example of creating a stream that subscribes to a channel and processes incoming messages. The stream automatically closes when the session ends.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/16-server-events.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nstream.listen((message) {\n    print('Received message: $message');\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Expressions in Dart\nDESCRIPTION: This Dart snippet provides examples of building expressions for database queries using Serverpod's statically type-checked expression system.  The columns are referenced using global table descriptor objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\"\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Name in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates how to fetch all companies and sort them by their name in ascending order. It uses the 'find' method with the 'orderBy' parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Index to Database Table\nDESCRIPTION: Demonstrates how to add an index to a database table using YAML configuration in Serverpod. Requires specifying the index name and the columns to include in the index. No additional dependencies are required. Inputs include column names, and the output is the index created in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Handling Database Exceptions in Serverpod Transactions\nDESCRIPTION: Illustrates a special case where test tools behavior differs from production behavior when database exceptions are caught within transactions. In production, the transaction will still fail even if the exception is caught.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar transactionFuture = session.db.transaction((tx) async {\n    var data = UniqueData(number: 1, email: 'test@test.com');\n    try {\n        await UniqueData.db.insertRow(session, data, transaction: tx);\n        await UniqueData.db.insertRow(session, data, transaction: tx);\n    } on DatabaseException catch (_) {\n        // Ignore the database exception\n    }\n});\n\n// ATTENTION: This will throw an exception in production\n// but not in the test tools.\nawait transactionFuture;\n```\n\n----------------------------------------\n\nTITLE: Finding Database Records in Dart\nDESCRIPTION: Demonstrates different ways to query and find records in the database using Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Equals Filter in Dart\nDESCRIPTION: Demonstrates how to use the equals filter to fetch users with a specific name from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.equals('Alice')\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns for a Single Row in Serverpod using Dart\nDESCRIPTION: Shows how to update specific columns of a single row while leaving others unmodified using the updateRow method with columns parameter in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); \ncompany.name = 'New name';\ncompany.address = 'Baker street';\nvar updatedCompany = await Company.db.updateRow(session, company, columns: (t) => [t.name]);\n```\n\n----------------------------------------\n\nTITLE: Enum Serialization by Name in Serverpod YAML\nDESCRIPTION: This YAML snippet shows how to configure an enum to be serialized by name instead of by index.  This configuration makes the enum more resilient to changes in the order of the enum values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"enum: Animal\nserialized: byName\nvalues:\n - dog\n - cat\n - bird\"\n```\n\n----------------------------------------\n\nTITLE: Listening to Web Socket Stream for Updates\nDESCRIPTION: This example shows how to listen to the web socket stream on the client to receive updates from a server-side endpoint. The code iterates through the stream of messages received from the server and passes each message to a handler function (_handleMessage). This allows the client to react to real-time updates from the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/14-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"await for (var message in client.myEndpoint.stream) {\\n  _handleMessage(message);\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Exact Name\nDESCRIPTION: Demonstrates how to find users with an exact name match using the equals method in Serverpod's database query\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.equals('Alice')\n);\n```\n\n----------------------------------------\n\nTITLE: Calling a Streaming Method from Serverpod Client in Dart\nDESCRIPTION: This code shows how to call a streaming method from a Serverpod client. It creates input and output streams, listens to the output stream, and sends messages through the input stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/15-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar inStream = StreamController();\nvar outStream = client.example.echoStream(inStream.stream);\noutStream.listen((message) {\n  print('Received message: $message');\n});\n\ninStream.add('Hello');\ninStream.add(42);\n\n// This will print\n// Received message: Hello\n// Received message: 42\n```\n\n----------------------------------------\n\nTITLE: Sorting on Relations in Serverpod (Dart)\nDESCRIPTION: This snippet explains how to sort query results based on a field from a related model by using a chained field reference. It fetches all companies and sorts them by their CEO's name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.ceo.name,\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting Database Row with Serverpod in Dart\nDESCRIPTION: Demonstrates how to insert a new row into the database using the db.insertRow method. Creates a Company object and inserts it into the database, returning the object with its assigned database ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nmyCompany = await Company.db.insertRow(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: Executing Complex SQL Query with Joins in Dart\nDESCRIPTION: Shows how to use unsafeQueryMappedResults method for complex queries with joins. Returns results as a nested map structure organizing data by tables and columns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nList<Map<String, Map<String, dynamic>>> result = await session.dbNext.unsafeQueryMappedResults(\n  'SELECT * FROM mytable LEFT JOIN othertable ON mytable.id = othertable.mytableid',\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Youtube API on the Server\nDESCRIPTION: This code snippet demonstrates how to access the Youtube API on the server side after a user has signed in with Google. It uses the `GoogleAuth.authClientForUser` method from the `serverpod_auth_server` package to request an `AutoRefreshingAuthClient`.  The code then utilizes the `googleapis` package to create a Youtube API client and retrieve the user's liked videos.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Message Channel in Stream Opening (Dart)\nDESCRIPTION: Shows how to subscribe to a message channel when a stream is opened, allowing forwarding of messages to authenticated users.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/14-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Exception in Serverpod Dart Endpoint\nDESCRIPTION: This Dart code shows how to throw a custom exception (MyException) within a Serverpod endpoint method. It demonstrates passing custom data to the exception.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Self-Relation for Blog Posts in YAML\nDESCRIPTION: This snippet demonstrates how to create a one-to-one self-referential relationship for blog posts, allowing navigation between previous and next posts. It includes fields for content, previous post, and next post, with a unique index on the nextId field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Post\ntable: post\nfields:\n  content: String\n  previous: Post?, relation(name=next_previous_post)\n  nextId: int?\n  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)\nindexes:\n  next_unique_idx:\n    fields: nextId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Like Filter in Dart\nDESCRIPTION: Demonstrates how to use the like filter for partial string matching on user names.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.like('A%')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Serverpod\nDESCRIPTION: This snippet demonstrates how to cache user data in Serverpod. It shows retrieving data from the local cache first, then falling back to database access when not cached. The example includes setting a unique cache key and configuring a 5-minute lifetime for the cached object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(cacheKey) as UserData?;\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication on Serverpod Server\nDESCRIPTION: Server-side configuration in the main server.dart file to set up email validation and password reset functionality. This snippet shows how to implement the callbacks for sending validation and password reset emails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Registering a Future Call in Serverpod's Main Run Method\nDESCRIPTION: This code demonstrates how to register a future call in the main run method of the server.dart file. It uses the registerFutureCall method on the Serverpod object, providing an instance of the future call and a unique name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/14-scheduling.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid run(List<String> args) async {\n  final pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n  );\n\n  ...\n\n  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Company Model Schema in YAML\nDESCRIPTION: YAML definition for a simple Company model with a name field\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Implementing Page-Based Pagination in Serverpod\nDESCRIPTION: Demonstrates a complete implementation of page-based pagination, calculating the offset based on the desired page number and items per page. This example retrieves the third page of companies with 10 records per page.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint page = 3;\nint companiesPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: companiesPerPage,\n  offset: (page - 1) * companiesPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Running pub get and serverpod generate commands\nDESCRIPTION: These commands are run from your server's directory to add the module to your project's deserializer after modifying the `pubspec.yaml` and `generator.yaml` files. `pub get` fetches the new dependencies and `serverpod generate` generates the necessary code for the serverpod module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Serverpod Default Configuration (Dart)\nDESCRIPTION: This Dart snippet illustrates the default Serverpod configuration when no YAML config files, environment variables, or Dart config objects are provided. It sets up the API server configuration with default values for port, public host, public port, and public scheme.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/07-configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"ServerpodConfig(\\n  apiServer: ServerConfig(\\n    port: 8080,\\n    publicHost: 'localhost',\\n    publicPort: 8080,\\n    publicScheme: 'http',\\n  ),\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with Condition in Dart\nDESCRIPTION: Use typed expression builders to find a single database row meeting specific conditions using Serverpod in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findSingleRow(\\n  session,\\n  where: (t) => t.name.equals('My Company'),\\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Dependencies in Flutter\nDESCRIPTION: This YAML snippet includes configuration for adding the required Serverpod authentication dependencies in a Flutter application's `pubspec.yaml` file. Dependencies include `serverpod_auth_shared_flutter`, `serverpod_auth_email_flutter`, and `serverpod_auth_google_flutter`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Custom User Identification in Serverpod\nDESCRIPTION: This snippet shows how to implement a custom user identification method by directly accessing the database. It uses the UserInfo model to find a user by their full name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await UserInfo.db.findFirstRow(\n  session,\n  where: (t) => t.fullName.equals(name),\n);\n```\n\n----------------------------------------\n\nTITLE: Database Row Deletion in Dart\nDESCRIPTION: Examples of deleting single rows and multiple rows using conditions in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Dart\nDESCRIPTION: Command-line examples to run unit and integration tests in Dart using tags for filtering. Requires Dart SDK installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# All tests (unit and integration)\\ndart test\\n\\n# Only integration tests: add --tags (-t) flag\\ndart test -t integration\\n\\n# Only unit tests: add --exclude-tags (-x) flag\\ndart test -x integration\n```\n\n----------------------------------------\n\nTITLE: Using Offset for Pagination in Serverpod\nDESCRIPTION: Shows how to use both limit and offset parameters together to implement basic pagination. This example skips the first 30 records and retrieves the next 10 company records.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n  offset: 30,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to the Web Server - Dart\nDESCRIPTION: This snippet demonstrates how to add specific routes to the Serverpod web server, allowing the application to handle web requests at designated paths.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/16-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address/');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Account Validation (Dart)\nDESCRIPTION: This Dart function validates a user's account by sending the verification code to the server with 'validateAccount'. It allows account creation and signing in if the code is valid.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.validateAccount(email, verificationCode);\n```\n\n----------------------------------------\n\nTITLE: Password Reset Process with EmailAuthController\nDESCRIPTION: Illustrates the password reset process using the EmailAuthController in Flutter, including initiating the reset and setting a new password.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.initiatePasswordReset(email);\n\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Exception Handling in Serverpod\nDESCRIPTION: Shows how to log messages with additional parameters including custom log levels, exceptions, and stack traces. This provides more detailed error tracking and debugging capabilities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting with orderBy in Serverpod (Dart)\nDESCRIPTION: This code snippet demonstrates how to use the `orderBy` parameter in the `find` method to sort the results of a database query. It fetches all companies and sorts them by their name in ascending order.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-User Shared Stream Communication in Dart\nDESCRIPTION: This example demonstrates how to test multi-user interactions with a shared stream. It uses multiple sessions to simulate different users, and verifies that messages posted by one user are received by another.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given CommunicationExampleEndpoint', (sessionBuilder, endpoints) {\n  const int userId1 = 1;\n  const int userId2 = 2;\n\n  test(\n      'when calling postNumberToSharedStream and listenForNumbersOnSharedStream '\n      'with different sessions then number should be echoed',\n      () async {\n    var userSession1 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId1,\n        {},\n      ),\n    );\n    var userSession2 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId2,\n        {},\n      ),\n    );\n\n    var stream =\n        endpoints.testTools.listenForNumbersOnSharedStream(userSession1);\n    // Wait for `listenForNumbersOnSharedStream` to execute up to its \n    // `yield` statement before continuing\n    await flushEventQueue(); \n\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 111);\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 222);\n\n    await expectLater(stream.take(2), emitsInOrder([111, 222]));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering a List of Related Employees\nDESCRIPTION: This snippet demonstrates how to filter the included list of employees based on a condition. The `where` clause is used to retrieve only employees whose names start with the letter 'a'. It uses the `ilike` operator for case-insensitive matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      where: (t) => t.name.ilike('a%')\n    ),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from Database in Dart\nDESCRIPTION: This Dart snippet shows how to delete a single row from the database, as well as how to delete multiple rows based on a condition using the 'where' parameter, allowing for flexible deletion operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Token in Serverpod\nDESCRIPTION: Example of creating an authentication token for a user with specific scopes using UserAuthentication.signInUser method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Logout Endpoint in Serverpod\nDESCRIPTION: This snippet shows how to create a logout endpoint in Serverpod using the `UserAuthentication.signOutUser` method.  This endpoint requires a login and signs out the currently authenticated user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nclass AuthenticatedEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> logout(Session session) async {\n    await UserAuthentication.signOutUser(session);\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Database in Serverpod\nDESCRIPTION: Dart code demonstrating how to insert a new record into the database using Serverpod's ORM. The method returns the inserted object with its ID field set from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nmyCompany = await Company.db.insertRow(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Cloud Storage Configuration\nDESCRIPTION: This Dart code snippet demonstrates how to add an Amazon S3 cloud storage configuration to your Serverpod instance. It uses the `S3CloudStorage` class from the `serverpod_cloud_storage_s3` package. The configuration includes the serverpod instance, storage ID, public access setting, region, bucket name, and public host.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Logging with severity, exception, and stack trace in Dart\nDESCRIPTION: This snippet illustrates how to log a message with additional context, including a log level, an exception, and a stack trace.  The `level` parameter allows categorizing the message severity, while the `exception` and `stackTrace` parameters provide valuable debugging information when errors occur. This helps in identifying the root cause of issues.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/09-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"session.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\"\n```\n\n----------------------------------------\n\nTITLE: Performing Unsafe Simple Query with Serverpod in Dart\nDESCRIPTION: Executes multiple SQL queries using the simple query protocol via Serverpod in Dart, which doesn't support parameter binding and is susceptible to SQL injection. Suitable for scenarios where the extended query protocol isn't available. Requires a session object, inputs are SQL queries as a string, and output is a DatabaseResult object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeSimpleQuery(\n  r'SELECT * FROM mytable WHERE id = 1; SELECT * FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating from old to new database methods in Serverpod 1.2\nDESCRIPTION: Examples of replacing deprecated database methods with their new counterparts under the static 'db' field on generated models. These methods handle database operations like finding, inserting, updating, and deleting rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// The new find method is a drop-in replacement.\nExample.find(...); // old\nExample.db.find(...); // new\n\n// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.\nExample.findSingleRow(...);\nExample.db.findFirstRow(...);\n\n// The new findById method is a drop-in replacement.\nExample.findById(...); // old\nExample.db.findById(...); // new\n\n// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.\nExample.delete(...);\nExample.db.deleteWhere(...);\n\n// The new findById method is a drop-in replacement but returns the id of the row deleted.\nExample.deleteRow(...); // old\nExample.db.deleteRow(...); // new\n\n// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.\nExample.update(...);\nExample.db.updateRow(...);\n\n// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.\nExample.insert(...);\nExample.db.insertRow(...);\n\n// The new count method is a drop-in replacement.\nExample.count(...);\nExample.db.count(...);\n```\n\n----------------------------------------\n\nTITLE: Migration Setup for Projects with No Data to Preserve\nDESCRIPTION: Sequence of commands to set up the migration system for existing Serverpod projects where preserving data is not required.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down -v\n$ docker-compose up --build --detach \n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Updating 'database' Field in Serverpod Model Definitions\nDESCRIPTION: Migration of model definitions from the deprecated 'database' keyword to the new 'scope=serverOnly' syntax for fields that should only be available on the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, database\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, scope=serverOnly\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage in Dart\nDESCRIPTION: This snippet demonstrates how to configure Google Cloud Storage for use with Serverpod. It shows how to add a cloud storage configuration with specific parameters like region, bucket name, and public host.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(gcp.GoogleCloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'auto',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Signing In and Resetting Password in Custom UI\nDESCRIPTION: These Dart snippets show how to implement sign-in and password reset functionality using EmailAuthController in a custom UI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.signIn(email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.initiatePasswordReset(email);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload on Server (Dart)\nDESCRIPTION: This server-side code snippet verifies if a file has been successfully uploaded. It uses the `verifyDirectFileUpload` method, which checks the status of the upload in the specified storage.  It's crucial for ensuring data integrity, especially when using third-party storage services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Revoking a Specific Auth Key in Serverpod\nDESCRIPTION: This snippet demonstrates how to revoke a specific authentication key using the `UserAuthentication.revokeAuthKey` method in Serverpod. Revoking an auth key effectively logs the user out from the associated device or session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nawait UserAuthentication.revokeAuthKey(\n  session,\n  authKeyId: 'auth-key-id-here',\n);\n```\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration in YAML\nDESCRIPTION: This YAML snippet shows how to configure AWS credentials in the passwords.yaml file for Serverpod. It includes the AWS Access Key ID and Secret Key required for S3 integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows by Filter in Serverpod using Dart\nDESCRIPTION: Demonstrates how to delete Company rows that match a specific filter using the 'deleteWhere' method. Returns a List of deleted models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.deleteWhere(\n  session,\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Youtube API with Google Authentication in Serverpod\nDESCRIPTION: Demonstrates how to use the googleapis package to access the Youtube API on the server side. Shows creation of an authenticated client and making API requests using the user's credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing toJson() Method for Custom Serialization in Dart\nDESCRIPTION: This snippet shows how to implement the toJson() method, which returns a JSON serialization of the object. This is one of the three required methods for custom serialization in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMap<String, dynamic> toJson() {\nreturn {\n    name: 'John Doe',\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Logging in User and Issuing Token - Dart\nDESCRIPTION: This snippet defines a UserEndpoint that handles user login. Upon successful authentication, it issues an authentication token, which is then returned to the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass UserEndpoint extends Endpoint {\n  Future<LoginResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    var identifier = authenticateUser(session, username, password);\n    if (identifier == null) return null;\n\n    return issueMyToken(identifier, scopes: {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging a Basic Message in Dart with Serverpod\nDESCRIPTION: Demonstrates how to log a simple message using the session object in Serverpod. This method logs the message when the session is closed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/09-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Basic Column Sorting in Serverpod\nDESCRIPTION: Demonstrates how to sort database query results by a single column in ascending order using the orderBy parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation\nDESCRIPTION: Client-side code demonstrating the complete file upload process including requesting upload description, uploading the file, and verifying the upload.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Rows in Dart with Serverpod\nDESCRIPTION: This Dart snippet shows how to insert multiple rows into the 'company' table using the `insert` method. It creates a list of `Company` objects and then inserts them into the database using `Company.db.insert(session, rows)`. This operation is atomic, so if any insertion fails, none of the entries are created. The method returns a list of the inserted companies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"var rows = [Company(name: 'Serverpod'), Company(name: 'Google')];\nvar companies = await Company.db.insert(session, rows);\"\n```\n\n----------------------------------------\n\nTITLE: Inserting a Table Row in Dart\nDESCRIPTION: This Dart snippet demonstrates how to insert a new row into a database table using Serverpod. It creates an instance of the `Company` class and then calls the `insert` method on the class, passing in the session and the object to be inserted.  After the object has been inserted, its `id` field is set from its row in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"var myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\"\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions in Serverpod with Dart\nDESCRIPTION: Illustrates how to log messages along with exceptions and stack traces in Serverpod using Dart. The log method can accept additional parameters such as log level, exception, and stackTrace to provide more context about what went wrong during the session. This is useful for error handling and debugging purposes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/07-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Dart\nDESCRIPTION: Shows how to update a user's authorization scopes using the Users class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Key Manager for Serverpod Client in Dart\nDESCRIPTION: This code demonstrates how to create a simple authentication key manager and configure it with a Serverpod client. It implements the AuthenticationKeyManager interface for storing and retrieving authentication tokens.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Development Database with Docker Compose\nDESCRIPTION: This bash command uses Docker Compose to start a preconfigured Postgresql instance for Serverpod development. It builds and detaches the container.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Limiting Class Visibility to Server Only\nDESCRIPTION: This YAML snippet demonstrates how to restrict a class to be generated only on the server-side by setting the `serverOnly` property to `true`. This is useful for classes containing sensitive data or logic that should not be exposed to the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\"\n```\n\n----------------------------------------\n\nTITLE: Importing Google Cloud Storage Package in Serverpod\nDESCRIPTION: Import statement for including the Google Cloud Storage package in a Serverpod project, allowing integration with GCP for file storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_gcp/serverpod_cloud_storage_gcp.dart'\n    as gcp;\n```\n\n----------------------------------------\n\nTITLE: Sending Messages with Serverpod Framework in Dart\nDESCRIPTION: This snippet demonstrates sending a message using the `postMessage` method on the session's messages object. The message, which should be a Serverpod model, is sent to a specified channel. To send messages globally, Redis needs to be enabled, and the `global` parameter should be set to true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/16-server-events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Stream Communication Endpoint\nDESCRIPTION: Example endpoint implementation for handling shared stream communication between multiple users. Shows methods for posting numbers and listening to stream updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CommunicationExampleEndpoint {\n  static const sharedStreamName = 'shared-stream';\n  Future<void> postNumberToSharedStream(Session session, int number) async {\n    await session.messages\n        .postMessage(sharedStreamName, SimpleData(num: number));\n  }\n\n  Stream<int> listenForNumbersOnSharedStream(Session session) async* {\n    var sharedStream =\n        session.messages.createStream<SimpleData>(sharedStreamName);\n\n    await for (var message in sharedStream) {\n      yield message.num;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload Completion in Serverpod\nDESCRIPTION: Server-side endpoint code to verify if a file upload was completed successfully, particularly important for third-party storage services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with Filtering in Serverpod using Dart\nDESCRIPTION: Demonstrates how to find a single Company row using an expression with the 'findFirstRow' method. Returns the first matching model or null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('Serverpod'),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing SignInWithGoogleButton in Flutter\nDESCRIPTION: Add the SignInWithGoogleButton widget to the Flutter app, configuring it with the necessary parameters for Google Sign-In integration with Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Enrollment Junction Table in YAML\nDESCRIPTION: YAML configuration for the Enrollment junction table that connects Student and Course tables. Includes foreign key relations and a unique index to prevent duplicate enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Enrollment\ntable: enrollment\nfields:\n  student: Student?, relation(name=student_enrollments)\n  course: Course?, relation(name=course_enrollments)\nindexes:\n  enrollment_index_idx:\n    fields: studentId, courseId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Registering Health Check Handler with Serverpod\nDESCRIPTION: Shows how to register a custom health check handler when initializing a Serverpod instance. The handler will be called automatically every minute to perform configured health checks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/10-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Serverpod Streaming Methods (Client-side)\nDESCRIPTION: This code shows how to handle errors in a Serverpod streaming method on the client side. It sets up error listeners for both input and output streams and demonstrates sending an error to the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/15-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar inStream = StreamController();\nvar outStream = client.example.echoStream(inStream.stream);\noutStream.listen((message) {\n  // Do nothing\n}, onError: (error) {\n  print('Client received error: $error');\n});\n\ninStream.addError(SerializableException('Error from client'));\n\n// This will print\n// Server received error: Error from client \n// Client received error: Error from server \n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Serverpod Web Server in Dart\nDESCRIPTION: This snippet demonstrates how to add new routes to the Serverpod web server. It shows adding a single page route and a wildcard route that matches all paths starting with '/item/'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/10-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Self-Relation for Member Blocking in YAML\nDESCRIPTION: This snippet demonstrates how to implement a many-to-many self-referential relationship for a member blocking system. It defines two classes: Member and Blocking, with relations between them to represent blocking and being blocked by other members.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Member\ntable: member\nfields:\n  name: String\n  blocking: List<Blocking>?, relation(name=member_blocked_by_me)\n  blockedBy: List<Blocking>?, relation(name=member_blocking_me)\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Blocking\ntable: blocking\nfields:\n  blocked: Member?, relation(name=member_blocking_me, onDelete=Cascade)\n  blockedBy: Member?, relation(name=member_blocked_by_me, onDelete=Cascade)\nindexes:\n  blocking_blocked_unique_idx:\n    fields: blockedId, blockedById\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Dart with Serverpod\nDESCRIPTION: Demonstrates how to implement a caching system for user data using Serverpod's session object. The code shows how to check for cached data, retrieve from database if not cached, and store in cache with a specified lifetime of 5 minutes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Class in YAML for Serverpod\nDESCRIPTION: Example of defining a Company class with serializable fields using .spy.yaml configuration. Shows how to specify fields with different data types and optional nullability. The class includes a required String name field and an optional DateTime foundedDate field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/07-serializing-data.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum with Serialization in YAML\nDESCRIPTION: Shows how to define an enum with serialization mode and predefined values\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByNameEnum\nserial: byName\nvalues:\n  - byName1\n  - byName2\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Multiple Rows in Serverpod using Dart\nDESCRIPTION: Demonstrates how to update multiple rows in a single atomic operation using the update method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name')).toList();\nvar updatedCompanies = await Company.db.update(session, companies);\n```\n\n----------------------------------------\n\nTITLE: JSON Storage Model Definition in YAML\nDESCRIPTION: Shows how complex types are stored as JSON in the database using a nested Address model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address # Stored as a json column\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Dart with Serverpod\nDESCRIPTION: This snippet demonstrates how to cache user data in Serverpod using the local cache. It checks for cached data, retrieves from the database if not found, and stores it in the cache with a 5-minute lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/08-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = UserData.db.findById(session, userId);\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Forwarding in Stream Session\nDESCRIPTION: Demonstrates how to set up message forwarding for a specific user by subscribing to a message channel when a stream is opened.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Serverpod Password Configuration (YAML)\nDESCRIPTION: This YAML snippet shows an example of password configuration for different run modes (shared, development, and production). It includes database, Redis, and service secret passwords. The `shared` section provides secrets applicable to all run modes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/07-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"shared:\\n  myCustomSharedSecret: 'secret_key'\\n\\ndevelopment:\\n  database: 'development_password'\\n  redis: 'development_password'\\n  serviceSecret: 'development_service_secret'\\n\\nproduction:\\n  database: 'production_password'\\n  redis: 'production_password'\\n  serviceSecret: 'production_service_secret'\"\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Cloud Storage Package\nDESCRIPTION: This Dart code snippet shows how to import the Serverpod Cloud Storage GCP package in your `server.dart` file. It is necessary to include this import to utilize Google Cloud Storage with Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_gcp/serverpod_cloud_storage_gcp.dart'\n    as gcp;\n```\n\n----------------------------------------\n\nTITLE: Custom User Identification with Direct Database Access\nDESCRIPTION: Shows how to find a user by name using direct database interaction with the UserInfo model\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await UserInfo.db.findFirstRow(\n  session,\n  where: (t) => t.fullName.equals(name),\n);\n```\n\n----------------------------------------\n\nTITLE: Alternative Flutter Sign-In Button Implementation\nDESCRIPTION: This Dart snippet provides an alternative implementation of the SignInWithGoogleButton where clientId and serverClientId are supplied directly to handle iOS and Android integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User ID in Serverpod\nDESCRIPTION: Retrieves the ID of a currently authenticated user from the session object. This is a fundamental operation when working with user authentication in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = await session.auth.authenticatedUserId;\n```\n\n----------------------------------------\n\nTITLE: Storing and Removing Token in Client Key Manager - Dart\nDESCRIPTION: This snippet demonstrates the methods for storing, removing, and retrieving the authentication token in the client's authentication key manager. It ensures the client can manage the token state appropriately.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait client.authenticationKeyManager?.put(token);\n\nawait client.authenticationKeyManager?.remove();\n\nvar token = await client.authenticationKeyManager?.get();\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional Relations in YAML\nDESCRIPTION: The snippet demonstrates how to set up a bidirectional one-to-one relationship between User and Address, allowing access to the same relationship from both sides.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"# user.yaml\\nclass: User\\ntable: user\\nfields:\\n  addressId: int\\n  address: Address?, relation(name=user_address, field=addressId)\\ndepends:\\nindexes:\\n  user_address_unique_idx:\\n    fields: addressId\\n    unique: true\\n\\n# address.yaml\\nclass: Address\\ntable: address\\nfields:\\n  street: String\\n  user: User?, relation(name=user_address)\"\n```\n\n----------------------------------------\n\nTITLE: Creating Note Dialog in Flutter\nDESCRIPTION: This code creates a dialog for note input in Flutter. It includes a function to show the dialog and a stateful widget for the dialog itself, with text input and a save button.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Case Insensitive Name Like Pattern in Dart\nDESCRIPTION: The ilike operator is used in this example to fetch users whose names start with 'a' or 'A', demonstrating case-insensitive string matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.ilike('a%')\n);\n```\n\n----------------------------------------\n\nTITLE: Full Referential Action Example\nDESCRIPTION: Complete example demonstrating a custom referential action configuration for a parent-child relationship with specific update and delete behaviors.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Custom Class copyWith() Method in Dart\nDESCRIPTION: This snippet illustrates the `copyWith()` method in Dart, which allows creating a new instance of the class with modified fields.  It ensures immutability by creating a new object with updated properties. This is implemented as a deep copy to prevent side effects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n    ClassName copyWith({\n      String? name,\n    }) {\n      return ClassName(\n        name: name ?? this.name,\n      );\n    }\n```\n\n----------------------------------------\n\nTITLE: Sorting by Count with Sub-filter in Serverpod (Dart)\nDESCRIPTION: This snippet illustrates how to sort query results by the count of a list relation, filtered by a specific condition using a sub-filter. It fetches all companies and sorts them by the number of employees with the role of \"developer\".\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(\n    (employee) => employee.role.equals('developer'),\n  ),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Number of Employees - Dart\nDESCRIPTION: Fetches all companies and sorts them by the total count of employees using the 'count()' method on a related list relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(),\n);\n```\n\n----------------------------------------\n\nTITLE: Requiring Login for Endpoints in Dart\nDESCRIPTION: Shows how to restrict endpoint access to authenticated users by overriding the requireLogin property.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out All Devices in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to sign out a user from all devices using the Serverpod session manager. It returns a boolean indicating the success of the operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Dart with Serverpod\nDESCRIPTION: This snippet demonstrates how to execute raw SQL queries on the database using Serverpod's Dart API. It returns a List of Lists containing the query results.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Row in Serverpod Dart\nDESCRIPTION: This Dart snippet shows how to delete a single row from the database using the 'deleteRow' method. It fetches a company and then deletes it, returning the deleted model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \nvar companyDeleted = await Company.db.deleteRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Query Expressions with Serverpod in Dart\nDESCRIPTION: This snippet shows how to create type-safe database query expressions using Serverpod's expression builders in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Exception in Serverpod Endpoint (Dart)\nDESCRIPTION: This Dart code demonstrates how to throw a custom exception (MyException) within a Serverpod endpoint when a failure condition is met.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Password Hash Generator and Validator (Dart)\nDESCRIPTION: This Dart code snippet allows overriding the default password hash generator and validator. It provides custom implementations in 'AuthConfig', useful for preserving existing password storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nAuthConfig(\n  passwordHashValidator: (\n    password,\n    email,\n    hash, {\n      onError,\n      onValidationFailure,\n    },\n  ) {\n  // Custom hash validator.\n  },\n  passwordHashGenerator: (password) {\n  // Custom hash generator.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence\nDESCRIPTION: This Dart code snippet checks if a file exists in the specified storage using the `session.storage.fileExists` method. It takes the storage ID and file path as input and returns a boolean indicating whether the file exists.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Independent Relations in YAML\nDESCRIPTION: This example defines independent relations on both sides of a relationship, allowing multiple distinct associations between User and Address entities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"# user.yaml\\nclass: User\\ntable: user\\nfields:\\n  friendsAddress: Address?, relation\\ndepends:\\nindexes:\\n  user_address_unique_idx:\\n    fields: friendsAddressId\\n    unique: true\\n\\n# address.yaml\\nclass: Address\\ntable: address\\nfields:\\n  street: String\\n  resident: User?, relation\\ndepends:\\nindexes:\\n  address_user_unique_idx:\\n    fields: residentId\\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Opening Streaming Connection on Client\nDESCRIPTION: This code shows how to establish a WebSocket connection to the Serverpod server from the client-side. This connection is required before the client can send and receive stream messages. The openStreamingConnection method on the client object is called to initiate the connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/14-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"await client.openStreamingConnection();\\n\"\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Not Equals Filter in Dart\nDESCRIPTION: Shows how to use the notEquals filter to fetch users whose name is not a specific value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notEquals('Bob')\n);\n```\n\n----------------------------------------\n\nTITLE: Sub-filter Count Related Entries in Dart using Serverpod\nDESCRIPTION: This example extends count filtering by applying a sub-filter to identify users with over three 'book' orders, demonstrating advanced relation filtering.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count((o) => o.itemType.equals('book')) > 3\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Self-Relation for Member Blocking in Serverpod\nDESCRIPTION: Defines Member and Blocking tables to create a many-to-many self-referential relationship for tracking blocked users. Uses a junction table with unique constraints to prevent duplicate blocks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Member\ntable: member\nfields:\n  name: String\n  blocking: List<Blocking>?, relation(name=member_blocked_by_me)\n  blockedBy: List<Blocking>?, relation(name=member_blocking_me)\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Blocking\ntable: blocking\nfields:\n  blocked: Member?, relation(name=member_blocking_me, onDelete=Cascade)\n  blockedBy: Member?, relation(name=member_blocked_by_me, onDelete=Cascade)\nindexes:\n  blocking_blocked_unique_idx:\n    fields: blockedId, blockedById\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Signing Out a Single Device in Serverpod (Dart)\nDESCRIPTION: Shows how to sign out a user from a single device using the signOutDevice method from the StatusEndpoint, which revokes the current authentication key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutDevice();\n```\n\n----------------------------------------\n\nTITLE: Listening to Server Stream Updates in Client (Dart)\nDESCRIPTION: Demonstrates how to listen for and handle incoming messages from a server endpoint stream in the client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/14-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scopes in Endpoints in Dart\nDESCRIPTION: Demonstrates how to implement custom authorization scopes in endpoint definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Authentication Handler\nDESCRIPTION: Add the authentication handler to the Serverpod instance in the server's main file. This sets up the auth module for use in the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Greater Than or Equal in Dart using Serverpod\nDESCRIPTION: This snippet filters users aged 25 and above using the '>=' operator. User model must have an 'age' column. It retrieves users who are at least 25 years old.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age >= 25\n);\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to check if a file exists in the specified storage using Serverpod's storage API.  It requires the 'storageId' and 'path' parameters to locate the file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Bridge Table with Module Relation in Serverpod\nDESCRIPTION: Defines a User class with a relation to a UserInfo model from the auth module. The example shows how to create a bridge table using the module reference syntax and includes an index to ensure uniqueness.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Signing Out User from All Devices\nDESCRIPTION: Shows how to sign out a user from all devices using UserAuthentication.signOutUser method\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait UserAuthentication.signOutUser(\n  session,\n  userId: 123,  // Optional: If omitted, the currently authenticated user will be signed out\n);\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Messages in Serverpod Using Dart\nDESCRIPTION: This snippet demonstrates how to log a simple message using the `log` method of the `session` object in Serverpod. It captures a basic log entry that is written to the database once the session closes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/07-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Deprecated Sign Out Method in Dart using Serverpod\nDESCRIPTION: This snippet shows the deprecated method for signing out a user. It's included for reference but should not be used in new code. Developers should use 'signOutDevice' or 'signOutAllDevices' instead.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional One-to-Many Relationship with Object in Serverpod (YAML)\nDESCRIPTION: This code defines a bidirectional one-to-many relationship with an object relation. The `company.yaml` file includes an `employees` field of type `List<Employee>`, while the `employee.yaml` file includes a `company` field of type `Company`.  The `name` parameter links both sides of the relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation(name=company_employees)\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Row in Dart with Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to insert a single row into the 'company' table using the `insertRow` method. It creates a `Company` object with the name 'Serverpod', then inserts it into the database using `Company.db.insertRow(session, row)`.  The method returns the inserted company object with the `id` field set.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"var row = Company(name: 'Serverpod');\nvar company = await Company.db.insertRow(session, row);\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Future Call in Serverpod's Main Run Method\nDESCRIPTION: This code demonstrates how to register a future call in the main run method of the server.dart file. It uses the registerFutureCall method on the Serverpod object, providing an instance of the future call and a unique name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/13-scheduling.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid run(List<String> args) async {\n  final pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n  );\n\n  ...\n\n  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Import Statement\nDESCRIPTION: Import statement for the loading screen component.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_flutter/note_dialog.dart';\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI Tools\nDESCRIPTION: Command to install Serverpod command line tools globally using Dart pub. This is the first step in setting up Serverpod development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check Handler in Dart\nDESCRIPTION: Creates a custom health check handler function that returns a list of ServerHealthMetric objects. The handler measures custom metrics and returns their health status along with timestamp and server information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/10-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Page with Cursor-based Pagination\nDESCRIPTION: The code demonstrates fetching the first set of records using cursor-based pagination. It is suitable for applications where data changes frequently. Requires Serverpod, a predefined 'Company' model, and an active session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint recordsPerPage = 10;\n\nvar companies = await Company.db.find(  \n  session,  \n  orderBy: (t) => t.id,  \n  limit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Catching Custom Exception in Client Code\nDESCRIPTION: Example of catching and handling a custom exception in client-side code. Demonstrates proper exception handling patterns including specific and general catch blocks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  client.example.doThingy();\n}\non MyException catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User Information in Dart\nDESCRIPTION: Demonstrates how to retrieve authenticated user information using the new authenticated getter in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal authenticated = await session.authenticated;\n\n//Read authenticated userId\nint? userId = authenticated?.userId;\n\n//Read scopes\nSet<Scopes>? scopes = authenticated?.scopes;\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Execute for Data Modification - Dart\nDESCRIPTION: This snippet demonstrates the use of `unsafeSimpleExecute`, similar to `unsafeExecute`, but without returning any results and using a simple query protocol. Care should be taken as this method is susceptible to SQL injection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeSimpleExecute(\n    r'DELETE FROM mytable WHERE id = 1; DELETE FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call with Delay in Serverpod\nDESCRIPTION: This snippet shows how to schedule a future call to be invoked after a specified delay using the futureCallWithDelay method. It takes the future call name, data, and a Duration object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/14-scheduling.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions with Details in Dart\nDESCRIPTION: Logs an error message along with its exception and stack trace using the Serverpod logging system. Dependencies include LogLevel, which defines the severity of the log entry. Parameters include `message`, `level`, `exception`, and `stackTrace`. Inputs are a combination of string message, a warning level, and exception details, whereas the output is a structured log in the database. This enhances error tracking by capturing comprehensive details around the error event.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Storage Configuration\nDESCRIPTION: Configuration setup for AWS S3 integration in Serverpod, including storage configuration and credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Custom Run Mode Configuration - Dart\nDESCRIPTION: Shows how to override the default run mode when setting up Serverpod tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given Products endpoint',\n  (sessionBuilder, endpoints) {\n    /* test code */\n  },\n  runMode: ServerpodRunMode.development,\n);\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to verify if a user is currently signed in using the session object in a Serverpod endpoint method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Module Relation in YAML\nDESCRIPTION: Demonstrates how to create a bridge table linking a custom User model to a module's UserInfo model using a one-to-one relation with nullable fields. Includes an index definition for ensuring unique relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Unique Index Configuration\nDESCRIPTION: Illustrates how to create a unique index constraint on the name field of a Company table, ensuring no duplicate company names are allowed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Nested Includes in Relational Queries with Serverpod in Dart\nDESCRIPTION: This snippet illustrates the inclusion of deeply nested objects in query results using Serverpod's include method. It fetches an employee, while including a company object that further includes an address. Proper relational definitions in the yaml file are necessary.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Client WebSocket Connection Setup\nDESCRIPTION: Demonstrates how to establish a WebSocket connection from the client to the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait client.openStreamingConnection();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In Button in Flutter\nDESCRIPTION: This Dart snippet demonstrates adding the SignInWithGoogleButton to a Flutter widget, including configuration for serverClientId and redirectUri necessary for web integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload in Serverpod (Dart)\nDESCRIPTION: Client-side code for uploading a file. It requests an upload description, uploads the file using FileUploader, and verifies the upload with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Authentication Button\nDESCRIPTION: This Dart snippet illustrates how to use the SignInWithFirebaseButton widget to trigger the Firebase authentication UI in a Flutter application. It discusses required parameters such as the Serverpod client and authentication providers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithFirebaseButton(\n  caller: client.modules.auth,\n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n  onFailure: () => print('Failed to sign in with Firebase.'),\n  onSignedIn: () => print('Signed in with Firebase.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Paginating Related Lists in Serverpod\nDESCRIPTION: Demonstrates pagination of included lists using limit and offset parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      limit: 10,\n      offset: 10,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Modeling One-to-Many Self-Relation in YAML\nDESCRIPTION: This snippet illustrates a one-to-many self-referential relationship in a 'Cat' table. It models the maternal lineage where a cat can have one mother but may have many kittens. The 'mother' relationship is optional, hence the motherId is nullable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nclass: Cat\ntable: cat\nfields:\n  name: String\n  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)\n  kittens: List<Cat>?, relation(name=cat_kittens)\n```\n\n----------------------------------------\n\nTITLE: Sending Local Messages in Dart using Serverpod\nDESCRIPTION: Demonstrates how to send a local message to a specific channel using the postMessage method. The message must be a Serverpod model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/16-server-events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message);\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Development Server in YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up the development server for Serverpod. It specifies the API server's port, public host, public port, and scheme. The publicHost should be updated to ensure correct asset path serving.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost # Change this line\n  publicPort: 8080\n  publicScheme: http\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Serverpod\nDESCRIPTION: Demonstrates how to retrieve detailed user information using the Users class static methods. This method returns a UserInfo object containing user details based on their authentication method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Defining an Exception in Serverpod YAML\nDESCRIPTION: This YAML snippet defines a custom exception `MyException` with fields `message` (String) and `errorType` (MyEnum).  Serverpod generates Dart code for this exception, which can then be thrown in endpoint methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"exception: MyException\nfields:\n  message: String\n  errorType: MyEnum\"\n```\n\n----------------------------------------\n\nTITLE: Adding Channel Listener in Dart\nDESCRIPTION: Shows how to add a listener to a specific channel to process incoming messages\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nsession.messages.addListener('user_updates', (message) {\n  print('Received message: $message');\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to Serverpod YAML Models\nDESCRIPTION: This snippet shows how to include documentation comments for a class and its fields using three hashes (###) in the YAML file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship with Object in YAML\nDESCRIPTION: Defines a one-to-one relationship between `User` and `Address` using an `Address` object in the `User` model. Serverpod automatically generates the foreign key field `addressId` in the User table. The `address` field must be nullable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation // Object relation field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Calling a Serverpod Endpoint from Client-Side Dart\nDESCRIPTION: This code snippet shows how to call the previously defined endpoint method from the client side. It uses the generated client code to invoke the 'hello' method on the 'example' endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/06-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Catching a Custom Exception in a Serverpod Client\nDESCRIPTION: This Dart snippet demonstrates how to catch a custom exception (MyException) thrown by the server in a Serverpod client application. It shows proper exception handling, including catching specific exceptions and general error cases.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  client.example.doThingy();\n}\non MyException catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\n```\n\n----------------------------------------\n\nTITLE: Include Relational Lists in Serverpod\nDESCRIPTION: This snippet demonstrates the inclusion of relational lists using the 'includeList' method in Serverpod. It returns a company with all related employees included. The method requires the session and company/employee IDs. It leverages Serverpod's query framework for associations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the Server\nDESCRIPTION: This command starts the Serverpod server, which is responsible for handling client requests and managing the pixel data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n\"dart bin/main.dart\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Future Call Class in Dart\nDESCRIPTION: This snippet demonstrates how to create a custom future call class by extending the FutureCall class and overriding the invoke method to define future behavior. It accepts a Session object and an optional model object as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/14-scheduling.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleFutureCall extends FutureCall<MyModelEntity> {\n  @override\n  Future<void> invoke(Session session, MyModelEntity? object) async {\n    // Do something interesting in the future here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Cloud Storage Configuration (Dart)\nDESCRIPTION: This snippet demonstrates how to add an S3 cloud storage configuration to your Serverpod. It includes setting the storage ID, region, bucket name, and public host. This configuration should be added before starting your Serverpod pod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Greater Than or Equal Comparison in Dart\nDESCRIPTION: Shows how to use the greater than or equal operator to fetch users of a specific age or older.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age >= 25\n);\n```\n\n----------------------------------------\n\nTITLE: Catching a Custom Exception in Serverpod Client (Dart)\nDESCRIPTION: This Dart code shows how to catch a custom exception (MyException) when making a call to a Serverpod endpoint from the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  client.example.doThingy();\n}\non MyException catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\n```\n\n----------------------------------------\n\nTITLE: Using CacheMissHandler for User Data Caching in Dart with Serverpod\nDESCRIPTION: This snippet shows an alternative approach to caching user data using Serverpod's CacheMissHandler. It simplifies the caching logic by handling cache misses and storing data in a single operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/08-caching.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(\n    cacheKey,\n    // If the object wasn't found in the cache, load it from the database and\n    // save it in the cache. Make it valid for 5 minutes.\n    CacheMissHandler(\n      () async => UserData.db.findById(session, userId),\n      lifetime: Duration(minutes: 5),\n    ),\n    );\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget Routes in Serverpod\nDESCRIPTION: Shows how to create a custom route by extending the WidgetRoute class and implementing the build method. The route handles web requests and returns appropriate widgets.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/13-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OAuth Key Manager in Serverpod Client\nDESCRIPTION: This code snippet illustrates how to implement a custom `AuthenticationKeyManager` for handling OAuth 2 bearer tokens in a Serverpod client. It overrides the `toHeaderValue` method to format the token according to the 'Bearer' scheme, allowing for custom token handling and integration with OAuth 2 authentication flows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass MyOAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n\n  @override\n  Future<String?> toHeaderValue(String? key) async {\n    if (key == null) return null;\n    return 'Bearer ${myBearerTokenObtainer(key)}';\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\n```\n\n----------------------------------------\n\nTITLE: Database Connection Configuration in YAML\nDESCRIPTION: Database connection configuration settings specifying host, port, database name, and user credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: localhost\n  port: 8090\n  name: projectname\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Sorting relational lists using orderBy clause in Serverpod\nDESCRIPTION: This snippet demonstrates how to sort the included list of related objects using the `orderBy` clause in Serverpod. It retrieves a `Company` object and includes the `Employee` objects, sorted by their names in ascending order. The `orderBy` parameter accepts a function that specifies the field to sort by.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"var user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      orderBy: (t) => t.name,\n    ),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Querying Companies with Limit and Offset in Dart using Serverpod\nDESCRIPTION: This example shows how to use both 'limit' and 'offset' parameters to implement pagination. It skips the first 30 companies and fetches the next 10.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n  offset: 30,\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Name Pattern\nDESCRIPTION: Demonstrates using like and ilike for pattern matching on string columns with case-sensitive and case-insensitive options\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.like('A%')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Enrollment Model (Junction Table) in YAML\nDESCRIPTION: This YAML snippet defines the `Enrollment` model, which acts as the junction table between `Student` and `Course`. It includes relations to both `Student` (named `student_enrollments`) and `Course` (named `course_enrollments`). A unique index is defined on the combination of `studentId` and `courseId` to prevent duplicate enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# enrollment.yaml\nclass: Enrollment\ntable: enrollment\nfields:\n  student: Student?, relation(name=student_enrollments)\n  course: Course?, relation(name=course_enrollments)\nindexes:\n  enrollment_index_idx:\n    fields: studentId, courseId\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Table with One-to-One Relation to Module\nDESCRIPTION: This snippet illustrates how to define a 'User' class with a one-to-one relation to a module's 'UserInfo' table using the Serverpod framework. It outlines the declaration of fields and a unique index. Prerequisite: Understanding of Serverpod modules and basic YAML syntax.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Dart\nDESCRIPTION: Utilizes the SessionManager to determine if a user is signed in. Returns a boolean indicating the user's authentication state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nsessionManager.isSignedIn;\n```\n\n----------------------------------------\n\nTITLE: Client-Side User Session Registration\nDESCRIPTION: Demonstrates registering a signed-in user in the SessionManager after successful authentication\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar serverResponse = await caller.myAuthentication.login(username, password);\n\nif (serverResponse.success) {\n    SessionManager sessionManager = await SessionManager.instance;\n    await sessionManager.registerSignedInUser(\n        serverResponse.userInfo!,\n        serverResponse.keyId!,\n        serverResponse.key!,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-Time Update Listening in Pixorama\nDESCRIPTION: This method listens for updates from the server, handling both full image data and individual pixel updates. It maintains a connection and reconnects if lost.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  Future<void> _listenToUpdates() async {\n    // Indefinitely try to connect and listen to updates from the server.\n    while (true) {\n      try {\n        // Get the stream of updates from the server.\n        final imageUpdates = client.pixorama.imageUpdates();\n\n        // Listen for updates from the stream. The await for construct will\n        // wait for a message to arrive from the server, then run through the\n        // body of the loop.\n        await for (final update in imageUpdates) {\n          // Check which type of update we have received.\n          if (update is ImageData) {\n            // This is a complete image update, containing all pixels in the\n            // image. Create a new PixelImageController with the pixel data.\n            setState(() {\n              _imageController = PixelImageController(\n                pixels: update.pixels,\n                palette: PixelPalette.rPlace(),\n                width: update.width,\n                height: update.height,\n              );\n            });\n          } else if (update is ImageUpdate) {\n            // Got an incremental update of the image. Just set the single\n            // pixel.\n            _imageController?.setPixelIndex(\n              pixelIndex: update.pixelIndex,\n              colorIndex: update.colorIndex,\n            );\n          }\n        }\n      } on MethodStreamException catch (_) {\n        // We lost the connection to the server, or failed to connect.\n        setState(() {\n          _imageController = null;\n        });\n      }\n\n      // Wait 5 seconds until we try to connect again.\n      await Future.delayed(Duration(seconds: 5));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Greater Than Comparison in Dart\nDESCRIPTION: Demonstrates how to use the greater than operator to fetch users older than a specific age.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age > 25\n);\n```\n\n----------------------------------------\n\nTITLE: Example Integration Test in Dart\nDESCRIPTION: Demonstrates a basic integration test using Serverpod, showing how to call endpoints through generated test tools.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:test/test.dart';\n\n// Import the generated file, it contains everything you need.\nimport 'test_tools/serverpod_test_tools.dart';\n\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    test('when calling `hello` then should return greeting', () async {\n      final greeting = await endpoints.example.hello(sessionBuilder, 'Michael');\n      expect(greeting, 'Hello Michael');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Serializable Class Implementation in Dart\nDESCRIPTION: Full example of a custom serializable class implementation in a shared package, including constructor, toJson(), and fromJson() methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_serialization/serverpod_serialization.dart';\n\nclass ClassName {\n  String name;\n  ClassName(this.name);\n\n  toJson() {\n    return {\n      'name': name,\n    };\n  }\n\n  factory ClassName.fromJson(\n    Map<String, dynamic> jsonSerialization,\n    SerializationManager serializationManager,\n  ) {\n    return ClassName(\n      jsonSerialization['name'],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Logical AND Operator in Dart\nDESCRIPTION: Illustrates how to use the logical AND operator to combine multiple conditions in a query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.equals('Alice') & (t.age > 25))\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom UI with EmailAuthController\nDESCRIPTION: Describes how to create a custom UI for authentication using the `EmailAuthController` from `serverpod_auth_email_flutter`. Methods include `createAccountRequest` for signup, `validateAccount` for validation, `signIn` for login, `initiatePasswordReset`, and `resetPassword` for password management. The controller requires an `auth` client module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.createAccountRequest(userName, email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.validateAccount(email, verificationCode);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.signIn(email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.initiatePasswordReset(email);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns in Serverpod\nDESCRIPTION: This code snippet shows how to update specific columns of a row while leaving others unmodified using the `updateRow` and `update` methods with columns specified. The updates are only applied to the mentioned columns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\ncompany.name = 'New name';\ncompany.address = 'Baker street';\nvar updatedCompany = await Company.db.updateRow(session, company, columns: (t) => [t.name]);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name', address: 'Baker Street')).toList();\nvar updatedCompanies = await Company.db.update(session, companies, columns: (t) => [t.name]);\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod' with server, client, and Flutter packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Defining a Future Call Class in Dart\nDESCRIPTION: This snippet shows how to create a future call by extending the FutureCall class and overriding the invoke method. The method takes a Session object and an optional SerializableEntity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/13-scheduling.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleFutureCall extends FutureCall<MyModelEntity> {\n  @override\n  Future<void> invoke(Session session, MyModelEntity? object) async {\n    // Do something interesting in the future here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Proper Endpoint Testing in Serverpod\nDESCRIPTION: Demonstrates correct way of testing endpoints using the provided endpoints object, ensuring proper lifecycle events and validation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    var session = sessionBuilder.build();\n\n    test('when calling `hello` then should return greeting', () async {\n      // ✅ Use the provided `endpoints` to call the endpoint that should be tested.\n      final greeting =\n          await endpoints.example.hello(session, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching a single row in Serverpod\nDESCRIPTION: This snippet demonstrates how to remove the association between an employee and a company using the `detachRow` method in Serverpod. It retrieves the `Employee` object by its ID and then removes the relationship between the employee and the company. This operation is used to break existing relationships between records.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"var employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detachRow.employees(session, employee!);\"\n```\n\n----------------------------------------\n\nTITLE: Custom Authentication Endpoint Implementation\nDESCRIPTION: Complete example of a custom authentication endpoint that handles user login, creates auth tokens, and returns an AuthenticationResponse.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyAuthenticationEndpoint extends Endpoint {\n  Future<AuthenticationResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    // Authenticates a user with email and password.\n    if (!authenticateUser(session, username, password)) {\n      return AuthenticationResponse(success: false);\n    }\n\n    // Finds or creates a user in the database using the User methods.\n    var userInfo = findOrCreateUser(session, username);\n\n    // Creates an authentication key for the user.\n    var authToken = await UserAuthentication.signInUser(\n      session,\n      userInfo.id!,\n      'myAuth',\n      scopes: {},\n    );\n\n    // Returns the authentication response.\n    return AuthenticationResponse(\n      success: true,\n      keyId: authToken.id,\n      key: authToken.key,\n      userInfo: userInfo,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Expression Examples in Dart\nDESCRIPTION: Demonstrates various ways to create database query expressions with type checking in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Subsequent Requests for Cursor-based Pagination in Dart using Serverpod\nDESCRIPTION: This example demonstrates how to make subsequent requests in cursor-based pagination. It uses the last ID from the previous page as a cursor to fetch the next set of records.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint cursor = lastCompanyIdFromPreviousPage; // This is typically sent by the client\n\nvar companies = await Company.db.find(\nsession,\nwhere: Company.t.id > cursor,\norderBy: (t) => t.id,\nlimit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Simple One-to-One Relationship with ID Field\nDESCRIPTION: Configures a one-to-one relationship between User and Address using an explicit foreign key field with a unique index\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int, relation(parent=address)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Testing Business Logic with Serverpod Session\nDESCRIPTION: Example of testing business logic that depends on a Session object using the withServerpod helper. Demonstrates database interaction and exception testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given decreasing product quantity when quantity is zero', (\n  sessionBuilder,\n  _,\n) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, [\n      Product(\n        id: 123,\n        name: 'Apple',\n        quantity: 0,\n      ),\n    ]);\n  });\n\n  test('then should throw `InvalidOperationException`',\n      () async {\n    var future = ProductsBusinessLogic.updateQuantity(\n      session,\n      id: 123,\n      decrease: 1,\n    );\n\n    await expectLater(future, throwsA(isA<InvalidOperationException>()));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Calling Server Method from Flutter\nDESCRIPTION: Example of creating a Company object and calling the server method from Flutter app\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/02-get-started-with-mini.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = Company(\n  name: 'Serverpod',\n  foundedDate: DateTime(2021, 9, 27),\n  employees: [\n    'Alex',\n    'Isak',\n    'Viktor',\n  ],\n);\n\nvar result = await client.company.isLegit(company);\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User ID in Serverpod (Dart)\nDESCRIPTION: Shows how to retrieve the authenticated user's ID from the session object in a Serverpod endpoint method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var userId = await session.auth.authenticatedUserId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Independent One-to-One Relations in YAML\nDESCRIPTION: Demonstrates defining multiple independent one-to-one relations between `User` and `Address`. Each relation operates independently, resulting in distinct relationships with their respective unique indexes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n\"# user.yaml\nclass: User\ntable: user\nfields:\n  friendsAddress: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: friendsAddressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  resident: User?, relation\nindexes:\n  address_user_unique_idx:\n    fields: residentId\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Equals Filter in Dart\nDESCRIPTION: Demonstrates how to use the equals filter to fetch users with a specific name from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.equals('Alice')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Cloud Storage in Serverpod\nDESCRIPTION: Configuration code for setting up S3 cloud storage with custom domain and region settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Throwing a Serializable Exception in Serverpod Endpoint\nDESCRIPTION: This Dart code demonstrates how to throw the `MyException` exception defined in the YAML file. It's thrown when a certain condition (`failure`) is met within an endpoint, passing a custom message and error type.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"class ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Registering Signed-In User in Client-Side Session Manager\nDESCRIPTION: This snippet demonstrates how to handle a successful authentication response on the client-side. It registers the signed-in user in the SessionManager, storing the user info and authentication key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar serverResponse = await caller.myAuthentication.login(username, password);\n\nif (serverResponse.success) {\n    // Store the user info in the session manager.\n    SessionManager sessionManager = await SessionManager.instance;\n    await sessionManager.registerSignedInUser(\n        serverResponse.userInfo!,\n        serverResponse.keyId!,\n        serverResponse.key!,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Health Check Handler with Serverpod\nDESCRIPTION: Shows how to register a custom health check handler when initializing a Serverpod instance. The handler is passed as a parameter during Serverpod object creation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/13-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Loading Notes from Serverpod Server\nDESCRIPTION: Asynchronous method to fetch notes from server endpoint with error handling\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Notes from Serverpod Backend\nDESCRIPTION: Asynchronous method to load notes from the server with error handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serverpod Endpoint Example in Dart\nDESCRIPTION: This snippet demonstrates creating a Serverpod endpoint that returns a custom object. It showcases how to use the custom class within a Serverpod endpoint to handle serialization and deserialization automatically.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:relation_test_shared/relation_test_shared.dart';\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<ClassName> getMyCustomClass(Session session) async {\n    return ClassName(\n      'John Doe',\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Serverpod Generated Classes\nDESCRIPTION: This Dart code snippet shows how to extend a generated class with custom methods using Dart's extension feature.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nextension MyExtension on MyClass {\n  bool isCustomMethod() {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Related List Count in Serverpod\nDESCRIPTION: Demonstrates how to sort companies based on the count of a list relation (1:n), specifically sorting by the number of employees each company has.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(),\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Referential Actions in YAML\nDESCRIPTION: Demonstrates how to specify referential actions for model relationships using YAML syntax in Serverpod. It outlines how actions such as Cascade, SetNull, and others can be applied to control the behavior of relational updates and deletions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelation(onUpdate=<ACTION>, onDelete=<ACTION>)\n```\n\n----------------------------------------\n\nTITLE: Searching for a Single Row with Condition in Dart using Serverpod\nDESCRIPTION: This code shows how to use the 'findFirstRow' method in Serverpod to search for a single row based on a specific condition. It uses a typed expression builder to create a where clause for the search.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Basic One-to-One Relationship with ID Field in Serverpod YAML\nDESCRIPTION: Demonstrates the basic setup of a one-to-one relationship between User and Address entities using an ID field as a foreign key with a unique index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int, relation(parent=address) // Foreign key field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Adding a Message Listener in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to add a listener to a specific channel to handle incoming messages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/16-server-events.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nsession.messages.addListener('user_updates', (message) {\n  print('Received message: $message');\n});\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Rows in Dart\nDESCRIPTION: Example of inserting multiple Company records in a single atomic operation\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar rows = [Company(name: 'Serverpod'), Company(name: 'Google')];\nvar companies = await Company.db.insert(session, rows);\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Module Relation Using Table Reference\nDESCRIPTION: Alternative approach to creating a module relation by referencing the table name directly, accessing only the ID field of the serverpod_user_info table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfoId: int, relation(parent=serverpod_user_info)\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: FloatingActionButton Implementation for Note Creation\nDESCRIPTION: Widget implementation for triggering note creation dialog and handling note creation in Flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Diagnostic Event Handlers in Serverpod\nDESCRIPTION: Demonstrates how to test diagnostic event handlers using the Serverpod test framework and the withServerpod construct.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var exceptionHandler = TestExceptionHandler();\n\n  withServerpod('Given withServerpod with a diagnostic event handler',\n      experimentalFeatures: ExperimentalFeatures(\n        diagnosticEventHandlers: [exceptionHandler],\n      ), (sessionBuilder, endpoints) {\n    test(\n        'when calling an endpoint method that submits an exception event '\n        'then the diagnostic event handler gets called', () async {\n      final result = await endpoints.diagnosticEventTest\n          .submitExceptionEvent(sessionBuilder);\n      expect(result, 'success');\n\n      final record = await exceptionHandler.events.first.timeout(Duration(seconds: 1));\n      expect(record.event.exception, isA<Exception>());\n      expect(record.space, equals(OriginSpace.application));\n      expect(record.context, isA<DiagnosticEventContext>());\n      expect(\n          record.context.toJson(),\n          allOf([\n            containsPair('serverId', 'default'),\n            containsPair('serverRunMode', 'test'),\n            containsPair('serverName', 'Server default'),\n          ]));\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Filtering in Serverpod using Dart\nDESCRIPTION: Shows how to count the number of Company rows that match a specific filter using the 'count' method. Returns an integer representing the count.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar count = await Company.db.count(\n  session, \n  where: (t) => t.name.like('s%'),\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Global Message with Redis\nDESCRIPTION: Shows how to send a global message across servers using Redis by setting the global parameter to true\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message, global: true);\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration Using Server Runtime\nDESCRIPTION: Command to apply a repair migration during server startup using the main server runtime. The repair migration is executed as part of the startup sequence with validation to ensure it runs only once.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Multiple Columns - Dart\nDESCRIPTION: Fetches all companies from the database and sorts them by multiple columns using the 'orderByList' parameter, specifying the order of each column.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderByList: (t) => [\n    Order(column: t.name, orderDescending: true), \n    Order(column: t.id),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Table Relation Configuration\nDESCRIPTION: Demonstrates how to create a database relation between tables using the relation keyword for referenced objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address?, relation\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Data Modification Statements with Simple Protocol\nDESCRIPTION: Shows how to execute multiple data modification statements using unsafeSimpleExecute. This method doesn't support parameter binding and should be used cautiously.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeSimpleExecute(\n    r'DELETE FROM mytable WHERE id = 1; DELETE FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up SessionManager in Flutter App\nDESCRIPTION: Configure the SessionManager in the main.dart file of the Flutter app to handle user authentication state and server communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  const ipAddress = 'localhost';\n\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Any and Sub-filter in Dart\nDESCRIPTION: Shows how to filter users who have any related one-to-many objects matching a specific condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.any((o) => o.itemType.equals('book')))\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Main Dart File for Note Creation in Flutter\nDESCRIPTION: This extensive snippet updates the main.dart file to include note creation functionality, error handling, and the loading screen. It also sets up the Serverpod client and defines the app structure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n                    _notes!.add(note);\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Dart with Serverpod\nDESCRIPTION: Example of how to implement caching for user data using Serverpod's session cache. The code demonstrates retrieving data from cache, falling back to database queries, and setting cache expiration times.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/07-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing fromJson Factory Constructor in Dart\nDESCRIPTION: Example of implementing the fromJson factory constructor required for custom serializable objects in Serverpod, which creates an object from a JSON Map.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\nMap<String, dynamic> json,\n) {\nreturn ClassName(\n    name: json['name'] as String,\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Single and Multiple SQL Queries with Simple Query Protocol in Dart\nDESCRIPTION: `unsafeSimpleQuery` executes raw SQL queries using the simple query protocol, which does not support parameter binding and is more susceptible to SQL injection. This example demonstrates a query containing multiple SQL statements.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeSimpleQuery(\n      r'SELECT * FROM mytable WHERE id = 1; SELECT * FROM othertable;'\n  );\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Any and Sub-filter in Dart\nDESCRIPTION: Demonstrates how to filter users that have any related one-to-many objects (orders) matching a specific condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.any((o) => o.itemType.equals('book')))\n);\n```\n\n----------------------------------------\n\nTITLE: Prebuilt SignIn Button in Flutter (Dart)\nDESCRIPTION: A Dart code snippet illustrating the use of a prebuilt widget 'SignInWithEmailButton' for handling sign-in with email in a Flutter application. The provided 'caller' parameter must utilize the auth client's modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator YAML for Custom Classes\nDESCRIPTION: YAML configuration for declaring custom serializable objects in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nextraClasses:\n- package:my_project_shared/my_project_shared.dart:ClassName\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Client for iOS Simulator\nDESCRIPTION: Example of how to configure the Serverpod client in the Flutter app to connect to a server using IP address instead of localhost, which is necessary for iOS simulators.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/03-creating-project.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://192.168.1.117:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: SignInWithGoogleButton with client and server IDs\nDESCRIPTION: This snippet shows an alternative method to provide client and server IDs directly to the `SignInWithGoogleButton` widget instead of relying on configuration files. This is beneficial for improved flexibility during the development of the authentication flow.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Listener in Stream Session\nDESCRIPTION: Implementation of stream opening handler that sets up a message listener for a specific user channel using Redis-based messaging system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization Implementation Before Serverpod 2.0\nDESCRIPTION: Example of custom fromJson factory constructor before Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n    SerializationManager serializationManager,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Example Endpoint Implementation\nDESCRIPTION: Sample code showing how to create a basic endpoint with a hello method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Rows in Dart with Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to update multiple rows in the 'company' table using the `update` method. It retrieves all `Company` objects, modifies their names using `copyWith`, and then calls `update` to persist the changes to the database. This operation is atomic. The method returns a `List` of the updated `Company` objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"var companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name')).toList();\nvar updatedCompanies = await Company.db.update(session, companies);\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Serverpod using MethodCallSession\nDESCRIPTION: This snippet demonstrates how to access the client's IP address from a Session object by casting it to a MethodCallSession and using the remoteIpAddress extension on the httpRequest property. This works even when the server is behind a load balancer.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/05-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Health Metric Handler - Dart\nDESCRIPTION: This snippet defines a custom health metric handler in Dart that checks server health and returns a list of health metrics. It takes a Serverpod instance and a timestamp as parameters, and constructs a ServerHealthMetric object to represent the metric being monitored.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/13-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create your custom health metric handler.\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Name in Ascending Order - Dart\nDESCRIPTION: Fetches all companies from the database and sorts them by their name in ascending order using the 'find' method with an 'orderBy' parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Including Related Lists in Serverpod\nDESCRIPTION: Demonstrates how to include a list of related objects (1:n relation) using the includeList method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing copyWith() Method for Custom Serialization in Dart\nDESCRIPTION: This snippet shows how to implement the copyWith() method, which returns a new instance of the object with specified fields replaced. This is the third required method for custom serialization in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nClassName copyWith({\n  String? name,\n}) {\n  return ClassName(\n    name: name ?? this.name,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Button UI in Flutter ListTile\nDESCRIPTION: ListTile implementation with delete functionality, including UI updates and server communication. Updates local state immediately for responsive UI before server deletion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with Expression in Dart with Serverpod\nDESCRIPTION: This snippet shows how to find a single row in a database table using an expression with Serverpod's Dart API. It searches for a company by name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Health Metric Handler in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to create a custom health metric handler function in Dart for Serverpod. It returns a list of ServerHealthMetric objects for a given timestamp.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/12-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create your custom health metric handler.\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Test Example in Dart\nDESCRIPTION: Demonstrates how to write a basic integration test using the generated test tools in Dart, showcasing a test case for an endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:test/test.dart';\n\n// Import the generated file, it contains everything you need.\nimport 'test_tools/serverpod_test_tools.dart';\n\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    test('when calling `hello` then should return greeting', () async {\n      final greeting = await endpoints.example.hello(sessionBuilder, 'Michael');\n      expect(greeting, 'Hello Michael');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Include Operations in Serverpod\nDESCRIPTION: Shows how to include deeply nested related objects in a query, retrieving an employee with their company and the company's address.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Updates Stream\nDESCRIPTION: Method to create a stream of image updates for real-time client synchronization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nStream imageUpdates(Session session) async* {\n    var updateStream =\n        session.messages.createStream<ImageUpdate>(_channelPixelAdded);\n\n    yield ImageData(\n      pixels: _pixelData.buffer.asByteData(),\n      width: _imageWidth,\n      height: _imageHeight,\n    );\n\n    await for (var imageUpdate in updateStream) {\n      yield imageUpdate;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Server with Docker and Dart\nDESCRIPTION: This snippet outlines the commands to start the Docker containers and run the Serverpod server. It ensures that the Postgres and Redis databases are running while applying any necessary database migrations at startup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/03-creating-project.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Scopes in Serverpod - Dart\nDESCRIPTION: This snippet illustrates how to create custom scopes for granular access control in Serverpod by extending the Scope class. Unique and meaningful names for custom scopes are crucial to avoid conflicts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\n----------------------------------------\n\nTITLE: Handling One-to-Many Relation Filters with Serverpod Dart\nDESCRIPTION: Outlines filtering operations for one-to-many relations using special methods like count, none, any, and every with sub-filters. Assumes models with defined relationships and allows filtering based on aggregated related data, essentially filtering parent records based on related child conditions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count() > 3\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count((o) => o.itemType.equals('book')) > 3\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.none()\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.none((o) => o.itemType.equals('book')))\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.any()\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.any((o) => o.itemType.equals('book')))\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.every((o) => o.itemType.equals('book'))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Junction Enrollment Table with Unique Constraints\nDESCRIPTION: YAML configuration for the Enrollment junction table that links Students and Courses. Includes foreign key relations and a unique index to prevent duplicate enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Enrollment\ntable: enrollment\nfields:\n  student: Student?, relation(name=student_enrollments)\n  course: Course?, relation(name=course_enrollments)\nindexes:\n  enrollment_index_idx:\n    fields: studentId, courseId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Less Than Comparison in Dart\nDESCRIPTION: Shows how to use the less than operator to fetch users younger than a specific age.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age < 25\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced One-to-Many Module Relation in YAML\nDESCRIPTION: Demonstrates a complex one-to-many relationship setup between User and Company models, while maintaining a module relation. Includes multiple indexes and named relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\n  company: Company?, relation(name=company_employee)\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n  company_unique_idx:\n    fields: companyId\n    unique: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<User>?, relation(name=company_employee)\n```\n\n----------------------------------------\n\nTITLE: Independent One-to-one Relationships on Both Sides\nDESCRIPTION: Example of defining independent one-to-one relationships on both sides between User and Address models, creating two distinct relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  friendsAddress: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: friendsAddressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  resident: User?, relation\nindexes:\n  address_user_unique_idx:\n    fields: residentId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Auth Dependencies in Flutter\nDESCRIPTION: Demonstrates how to add the required Serverpod Apple authentication dependency to a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod CLI Installation\nDESCRIPTION: Command to verify that Serverpod CLI has been properly installed and is available in your path. This displays the help information for the serverpod command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Register Google Sign In Route (Server-side Dart)\nDESCRIPTION: This Dart code snippet registers the Google Sign In route inside the `server.dart` file. It adds the `RouteGoogleSignIn` route to the web server at the `/googlesignin` path. This route is essential for handling the authentication code provided by Google for web apps.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Company Class in YAML\nDESCRIPTION: Demonstrates how to define a serializable class with various field types, including optional and complex nested types like lists of objects\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Optional One-to-One Relation\nDESCRIPTION: Shows how to configure an optional one-to-one relationship where the foreign key can be nullable\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation(optional)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Passwords with YAML\nDESCRIPTION: Example passwords configuration file demonstrating how to store secrets for different runtime environments with a shared section\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/07-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  myCustomSharedSecret: 'secret_key'\n\ndevelopment:\n  database: 'development_password'\n  redis: 'development_password'\n  serviceSecret: 'development_service_secret'\n\nproduction:\n  database: 'production_password'\n  redis: 'production_password'\n  serviceSecret: 'production_service_secret'\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Package for Module UI Components\nDESCRIPTION: Bash command to create a Flutter package that can be used in conjunction with a custom Serverpod module. This is useful for adding Flutter-specific UI components to your module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Implicit Definition of One-to-Many Relationship with YAML\nDESCRIPTION: Defines a one-to-many relationship implicitly between Company and Employee classes using Serverpod's automatic relationship establishment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod LSP Server via Command Line\nDESCRIPTION: This command initiates the Serverpod Language Server Protocol (LSP) server, which provides diagnostics for YAML protocol files. The server helps developers identify and resolve potential issues in these files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/09-tools/02-lsp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod language-server\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Storage in Serverpod\nDESCRIPTION: Implementation of Google Cloud Storage configuration including bucket setup and public access settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n  pod.addCloudStorage(gcp.GoogleCloudStorage(\n    serverpod: pod,\n    storageId: 'public',\n    public: true,\n    region: 'auto',\n    bucket: 'my-bucket-name',\n    publicHost: 'storage.myapp.com',\n  ));\n```\n\n----------------------------------------\n\nTITLE: Initializing Authentication Handler with Serverpod\nDESCRIPTION: This snippet demonstrates how to initialize the authentication handler in the Serverpod object. It shows the required import statement and the addition of the authentication handler parameter to the Serverpod constructor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Language Server\nDESCRIPTION: Command-line instruction to launch the Serverpod Language Server Protocol (LSP) server for providing diagnostics on YAML protocol files\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/07-tools/03-lsp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod language-server\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data by ID from Database in Serverpod\nDESCRIPTION: Dart code for retrieving a row from a database table by ID in Serverpod. This example fetches a Company object by its ID using the db.findById method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password in Serverpod Configuration\nDESCRIPTION: YAML configuration for database passwords in Serverpod. This file contains sensitive credential information for different environments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n\n...\n```\n\n----------------------------------------\n\nTITLE: Launching Serverpod in Serverless Role\nDESCRIPTION: This command shows how to start Serverpod in a serverless role. It uses the --role argument to specify the server's role.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for One-to-One Relationship\nDESCRIPTION: Shows the raw SQL that Serverpod generates to implement a one-to-one relationship with proper table creation, indexes, and foreign key constraints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"address\" (\n    \"id\" serial PRIMARY KEY,\n    \"street\" text NOT NULL\n);\n\nCREATE TABLE \"user\" (\n    \"id\" serial PRIMARY KEY,\n    \"addressId\" integer NOT NULL\n);\n\n\nCREATE UNIQUE INDEX \"user_address_unique_idx\" ON \"user\" USING btree (\"addressId\");\n\nALTER TABLE ONLY \"user\"\n    ADD CONSTRAINT \"user_fk_0\"\n    FOREIGN KEY(\"addressId\")\n    REFERENCES \"address\"(\"id\")\n    ON DELETE CASCADE\n    ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Exception Handling in Serverpod\nDESCRIPTION: Shows how to log messages with additional parameters including custom log levels, exceptions, and stack traces. This method provides more detailed error tracking and debugging capabilities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Listening to Serverpod Endpoint Stream in Client\nDESCRIPTION: This snippet shows how to listen to a stream from a Serverpod endpoint in a client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/15-streams.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Message in Dart using Serverpod\nDESCRIPTION: Demonstrates how to send a message to a specific channel using the postMessage method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/16-server-events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message);\n```\n\n----------------------------------------\n\nTITLE: Defining a Streaming Method in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to define a streaming method in a Serverpod endpoint class. The method echoes back any message received through the stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/15-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Stream echoStream(Session session, Stream stream) async* {\n    await for (var message in stream) {\n      yield message;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Multiple Rows in Dart\nDESCRIPTION: Example of deleting multiple company records in a single operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar ids = await Company.db.delete(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional One-to-One Relation in YAML\nDESCRIPTION: Defines a bidirectional one-to-one relationship between `User` and `Address` using the `name` parameter to link the `address` field in `User` to the `user` field in `Address`.  The `field` parameter specifies which side holds the foreign key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int\n  address: Address?, relation(name=user_address, field=addressId)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  user: User?, relation(name=user_address)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Class in YAML\nDESCRIPTION: A simple example of defining a serializable class in YAML for Serverpod. No direct dependencies except Serverpod's YAML parsing support. Lists the fields of the class with types, supporting null safety. Once generated, these classes can be used in server-client communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Serverpod Web Server\nDESCRIPTION: Demonstrates how to add routes to the Serverpod web server. Shows both single page routing and wildcard path matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/11-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Descending Order Sorting in Serverpod\nDESCRIPTION: Shows how to sort companies in descending order by name using orderDescending parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n  orderDescending: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining the Enrollment Junction Table in YAML\nDESCRIPTION: Details the Enrollment model that acts as a bridge table managing links between students and courses. It maintains foreign keys for both participants and enforces data integrity with unique indexing on studentId and courseId combination to prevent duplicate enrollments in the same course.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# enrollment.yaml\nclass: Enrollment\ntable: enrollment\nfields:\n  student: Student?, relation(name=student_enrollments)\n  course: Course?, relation(name=course_enrollments)\nindexes:\n  enrollment_index_idx:\n    fields: studentId, courseId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Incorrect Endpoint Invocation in Dart\nDESCRIPTION: This code snippet highlights a common mistake in Serverpod testing: directly calling endpoint methods. It advises against this practice as it bypasses framework-managed lifecycle events and validations, leading to non-production-like behavior.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // ❌ Don't instantiate endpoints directly\n  var exampleEndpoint = ExampleEndpoint();\n\n  withServerpod('Given Example endpoint', (\n    sessionBuilder,\n    _ /* not using the provided endpoints */,\n  ) {\n    var session = sessionBuilder.build();\n\n    test('when calling `hello` then should return greeting', () async {\n      // ❌ Don't call and endpoint method directly on the endpoint class.\n      final greeting = await exampleEndpoint.hello(session, 'Michael'); \n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns for Multiple Rows in Serverpod using Dart\nDESCRIPTION: Demonstrates how to update specific columns of multiple rows while leaving others unmodified using the update method with columns parameter in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name', address: 'Baker Street')).toList();\nvar updatedCompanies = await Company.db.update(session, companies, columns: (t) => [t.name]);\n```\n\n----------------------------------------\n\nTITLE: Nested List within List Include in Serverpod\nDESCRIPTION: Demonstrates including lists within lists, showing multi-level list relationship handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        tools: Tool.includeList(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Direct File Retrieval from Server\nDESCRIPTION: Server-side code to directly retrieve a file's contents as ByteData from storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Default Behavior for ID Relation in YAML\nDESCRIPTION: This snippet defines the default behavior for an id relation where onUpdate defaults to NoAction and onDelete defaults to Cascade. It emphasizes the importance of configuring the relation properly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparentId: int?, relation(parent=model_table, onUpdate=NoAction, onDelete=Cascade)\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages in Dart\nDESCRIPTION: Overrides `handleStreamMessage` to route incoming messages to the appropriate user channel. Utilizes the `postMessage` to send the message to `user_recipientId`. Works with `SerializableEntity`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Details - YAML\nDESCRIPTION: This YAML snippet demonstrates how to specify the database connection details for a development environment in Serverpod, including host, port, database name, and user credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"...\\ndatabase:\\n  host: localhost\\n  port: 8090\\n  name: <YOUR_PROJECT_NAME>\\n  user: postgres\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Releasing Savepoints in Transactions (Dart)\nDESCRIPTION: This snippet provides guidance on how to release a savepoint within a transaction in Serverpod. Releasing a savepoint means that all changes made after the savepoint are kept, but subsequent savepoints become invalid.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  // Create two savepoints\n  var savepoint = await transaction.createSavepoint();\n  var secondSavepoint = await transaction.createSavepoint();\n\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await savepoint.release();\n});\n```\n\n----------------------------------------\n\nTITLE: Canceling Future Calls by Identifier in Serverpod\nDESCRIPTION: This code shows how to cancel all future calls registered with a specific identifier using the cancelFutureCall method. This allows for batch cancellation of related future calls.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/14-scheduling.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.cancelFutureCall('an-identifying-string');\n```\n\n----------------------------------------\n\nTITLE: Attaching Single Row in Serverpod Relations\nDESCRIPTION: Shows how to link an individual employee to a company using the attachRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attachRow.employees(session, company!, employee!);\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Self-Relation Member Model in Serverpod YAML\nDESCRIPTION: A YAML model definition for a Member class in a many-to-many self-referential relationship, representing members who can block other members. The model includes lists for members being blocked and members blocking the current member.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Member\ntable: member\nfields:\n  name: String\n  blocking: List<Blocking>?, relation(name=member_blocked_by_me)\n  blockedBy: List<Blocking>?, relation(name=member_blocking_me)\n```\n\n----------------------------------------\n\nTITLE: Initializing PixelImageController\nDESCRIPTION: This code snippet initializes the `PixelImageController` in the `_PixoramaState` class. The `PixelImageController` stores pixel data and handles updates. The `initState` method is overridden to call the `_listenToUpdates` method, which connects to the server and listens for updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // The pixel image controller contains our image data and handles updates.\n  // If it is null, the image has not yet been loaded from the server.\n  PixelImageController? _imageController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Connect to the server and start listening to updates.\n    _listenToUpdates();\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Database Mappings in YAML\nDESCRIPTION: This YAML snippet defines a class and maps it to a database table. The `table` key specifies the table name, and fields are mapped to columns. Serverpod automatically adds an `id` field of type `int?`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\\ntable: company\\nfields:\\n  name: String\\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Token Validation Handler in Serverpod\nDESCRIPTION: Example of initializing Serverpod with a custom authentication handler that validates a token and returns an AuthenticationInfo object if valid.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Initialize Serverpod and connect it with your generated code.\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Custom validation handler\n    if (token != 'valid') return null;\n\n    return AuthenticationInfo(1, <Scope>{});\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Backward Compatibility Rule: Serialized Class Field Management\nDESCRIPTION: Guidelines for modifying serialized classes while maintaining compatibility with existing app versions\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/12-backward-compatibility.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n3. __Avoid changing or removing fields and types in the serialized classes.__ However, you are free to add new fields as long as they are nullable.\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Not Like Filter in Dart\nDESCRIPTION: Illustrates how to use the notLike filter to fetch users with names not starting with a specific letter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notLike('B%')\n);\n```\n\n----------------------------------------\n\nTITLE: Calling Endpoints Properly in Serverpod with Dart\nDESCRIPTION: Provides a method for properly calling endpoints in Serverpod using the provided session and endpoints to ensure all lifecycle events and validations are executed, mimicking production conditions effectively.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\\\\n  // ❌ Don't instantiate endpoints directly\\\\n  var exampleEndpoint = ExampleEndpoint();\\\\n\\\\n  withServerpod('Given Example endpoint', (\\\\n    sessionBuilder,\\\\n    _ /* not using the provided endpoints */,\\\\n  ) {\\\\n    var session = sessionBuilder.build();\\\\n\\\\n    test('when calling `hello` then should return greeting', () async {\\\\n      // ❌ Don't call and endpoint method directly on the endpoint class.\\\\n      final greeting = await exampleEndpoint.hello(session, 'Michael');\\\\n      expect(greeting, 'Hello, Michael!');\\\\n    });\\\\n  });\\\\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\\\\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\\\\n    var session = sessionBuilder.build();\\\\n\\\\n    test('when calling `hello` then should return greeting', () async {\\\\n      // ✅ Use the provided `endpoints` to call the endpoint that should be tested.\\\\n      final greeting =\\\\n          await endpoints.example.hello(session, 'Michael');\\\\n      expect(greeting, 'Hello, Michael!');\\\\n    });\\\\n  });\\\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Dart with Serverpod\nDESCRIPTION: Demonstrates how to implement caching for user data using Serverpod's session-based caching system. The code shows retrieving data from cache, falling back to database queries, and setting cache expiration times.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(cacheKey) as UserData?;\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionManager in Dart\nDESCRIPTION: Set up a SessionManager to handle user state and authentication in the main function of a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Course Table in YAML\nDESCRIPTION: Defines the Course model and its relationship with the Enrollment table, specifying fields and using a List<Enrollment> to express potential connections. The dependency here is the Serverpod framework’s structure for managing relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# course.yaml\nclass: Course\ntable: course\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=course_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Nickname in Generator Config\nDESCRIPTION: Configuration in generator.yaml to set up module nickname for client-side reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Defining Course Table with Many-to-Many Relationship in YAML\nDESCRIPTION: YAML configuration for the Course table that establishes a many-to-many relationship with Student through the Enrollment junction table. Includes a relation field for enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Course\ntable: course\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=course_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom WidgetRoute in Dart for Serverpod\nDESCRIPTION: Shows how to create a custom WidgetRoute by extending the WidgetRoute class and implementing the build method. This route returns a Widget based on the session and HTTP request.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/18-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-One Relation\nDESCRIPTION: Shows how to create a bidirectional one-to-one relationship with explicit relation naming\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int\n  address: Address?, relation(name=user_address, field=addressId)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  user: User?, relation(name=user_address)\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call with an Identifier in Serverpod\nDESCRIPTION: This snippet shows how to schedule a future call with an identifier, which can be used to reference or cancel the call later. The identifier is added as an optional parameter to the futureCallWithDelay method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/14-scheduling.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n  identifier: 'an-identifying-string',\n);\n```\n\n----------------------------------------\n\nTITLE: Alternative Google Sign-In Implementation with Client IDs\nDESCRIPTION: Dart code showing an alternative approach to Google Sign-In button implementation by directly supplying client and server IDs instead of using JSON configuration files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Sorting of Companies in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates how to sort companies by multiple columns. It uses the 'orderByList' parameter to sort by name in descending order, then by id in ascending order.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderByList: (t) => [\n    Order(column: t.name, orderDescending: true), \n    Order(column: t.id),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Student Table with Many-to-Many Relationship in YAML\nDESCRIPTION: YAML configuration for the Student table that establishes a many-to-many relationship with Course through the Enrollment junction table. Includes a relation field for enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Student\ntable: student\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=student_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Password Hash Generator in AuthConfig\nDESCRIPTION: This Dart snippet demonstrates how to implement custom password hash generation and validation in the AuthConfig for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nAuthConfig(\n  passwordHashValidator: (\n    password,\n    email,\n    hash, {\n      onError,\n      onValidationFailure,\n    },\n  ) {\n  // Custom hash validator.\n  },\n  passwordHashGenerator: (password) {\n  // Custom hash generator.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to WebSocket in Serverpod Client\nDESCRIPTION: Shows how to establish a WebSocket connection from a Flutter client to a Serverpod server. This is the first step required before streaming can be used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n\n```\n\n----------------------------------------\n\nTITLE: Mapping Classes to Database Tables in Serverpod\nDESCRIPTION: YAML definition for mapping a class to a database table in Serverpod. This example shows how to define a Company class with database mapping and fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Combining Filter Conditions with Logical AND in Dart\nDESCRIPTION: This snippet shows how to combine conditions using the & operator to fetch users who are named 'Alice' and are older than 25, demonstrating logical conjunctions in filters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.equals('Alice') & (t.age > 25))\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing a module's serializable object in YAML\nDESCRIPTION: This snippet illustrates how to reference a serializable object (UserInfo) from the `auth` module within your YAML model definitions.  The `module:auth:UserInfo` syntax allows you to use objects defined in other modules, where 'auth' is the nickname given to the module. This allows type safety between modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Child Class for Sealed Parent\nDESCRIPTION: YAML configuration for extending a sealed parent class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    age: int\n```\n\n----------------------------------------\n\nTITLE: Initiate Password Reset (Dart)\nDESCRIPTION: This Dart snippet shows how to initiate a password reset with the 'initiatePasswordReset' method. The backend sends a verification email upon invocation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.initiatePasswordReset(email);\n```\n\n----------------------------------------\n\nTITLE: Adding SERVER_CLIENT_ID to GoogleService-Info.plist (iOS)\nDESCRIPTION: This snippet demonstrates how to add the SERVER_CLIENT_ID to the GoogleService-Info.plist file for iOS. This configuration is crucial for the iOS Google Sign-In to function correctly, linking the client to the server for authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Implementing Notes Fetching Method with Error Handling\nDESCRIPTION: A method to fetch all notes from the server endpoint with try-catch error handling to manage potential connection failures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested List Inclusion with Related Objects\nDESCRIPTION: Demonstrates including nested objects within list entries using the includes field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        address: Address.include(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Test Services to Docker Compose in YAML\nDESCRIPTION: Configures test instances of PostgreSQL and Redis in the docker-compose.yaml file for isolated testing environments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass 'REDIS_TEST_PASSWORD'\n  environment:\n    - REDIS_REPLICATION_MODE=master\nvolumes:\n  # ...\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Include Multiple Relational Objects in Queries using Serverpod in Dart\nDESCRIPTION: This example returns a query result with multiple related objects included. It explicitly specifies which relational objects to include in the query result. Requires Serverpod framework with correctly set-up model relations in YAML.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Running Deployment Script\nDESCRIPTION: The final command executes the deployment script, which involves deploying both the API and Insights API. The user may be prompted to enable Cloud services if not already active, and the script outputs the server's access URLs on completion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit One-to-Many Relationship in Serverpod\nDESCRIPTION: Demonstrates how to implicitly define a one-to-many relationship between Company and Employee entities using the List type and relation keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-column Index in YAML\nDESCRIPTION: Provides an example of creating an index with multiple fields in a YAML file for Serverpod. Specify multiple columns in the 'fields' key to create a composite index. This snippet does not have additional prerequisites. Takes multiple field names as input and outputs a multi-field index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n```\n\n----------------------------------------\n\nTITLE: Create Migration Command for Serverpod Bash\nDESCRIPTION: Instructs how to create a new empty migration to enable new databases to use bigint fields for integer values, reflecting the transition in Serverpod 2.0. Requires Serverpod CLI tools.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Adding Client Dependencies for Serverpod Module\nDESCRIPTION: This YAML snippet adds the client-side dependency for the `serverpod_auth_client`, which facilitates the integration of the authentication module into a Dart client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/08-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Advanced Example: One-to-Many Relation with Bridge Table\nDESCRIPTION: This example demonstrates a more complex setup of a one-to-many relation using a bridge table approach. The 'User' class is connected to a 'Company' class, showing how to define such relations in YAML. Dependencies include YAML understanding and Serverpod relationship concepts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\n  company: Company?, relation(name=company_employee)\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n  company_unique_idx:\n    fields: companyId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hash Peppering\nDESCRIPTION: Sets up password hash peppering for enhanced security in `passwords.yaml`. A secret server-side string (pepper) is combined with a salt for password hashing. The recommended pepper length is 32 bytes, and any change in the pepper requires all passwords to be rehashed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  emailPasswordPepper: 'your-pepper'\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Key Manager\nDESCRIPTION: Example of implementing an OAuth-based authentication key manager with bearer token support.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyOAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n\n  @override\n  Future<String?> toHeaderValue(String? key) async {\n    if (key == null) return null;\n    return 'Bearer ${myBearerTokenObtainer(key)}';\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated SignOut Method in Serverpod\nDESCRIPTION: This snippet shows the deprecated signOut method that should no longer be used. It's recommended to use signOutDevice or signOutAllDevices instead as this method calls a deprecated endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Libraries for Flutter\nDESCRIPTION: This snippet demonstrates how to add necessary Firebase libraries to a Flutter project using the command line. It includes the essential packages required for Firebase core, authentication, and UI auth functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add firebase_core firebase_auth firebase_ui_auth\n$ flutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flutter Package\nDESCRIPTION: Command to create a new Flutter package for custom module implementations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship with ID Field in Serverpod YAML\nDESCRIPTION: Demonstrates how to set up a one-to-one relationship between User and Address entities using an id field. It shows the YAML configuration for both entities, including the foreign key and unique index definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int, relation(parent=address) // Foreign key field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Requesting Additional Google API Scopes in Flutter\nDESCRIPTION: Configures the SignInWithGoogleButton widget to request additional scopes (in this case, YouTube access) during the authentication process. This is needed on the client side before accessing specific Google APIs.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: Paginating Included Relational Lists in Serverpod Query (Dart)\nDESCRIPTION: Demonstrates how to paginate included relational lists in a Serverpod query. This example retrieves a company with the next 10 employees starting from the 11th record.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      limit: 10,\n      offset: 10,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User ID in Serverpod\nDESCRIPTION: Shows how to get the currently authenticated user's ID from a Serverpod session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = await session.auth.authenticatedUserId;\n```\n\n----------------------------------------\n\nTITLE: Creating Tagged Repair Migration\nDESCRIPTION: Command to create a repair migration with a specific tag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --tag \"reset-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope-Based Authorization in Serverpod Endpoints (Dart)\nDESCRIPTION: Demonstrates how to restrict endpoint access based on user scopes, requiring specific permissions like admin access.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod using Dart\nDESCRIPTION: Example Dart code for configuring Serverpod by passing a ServerpodConfig instance to the Serverpod constructor, overriding any environment variables or config files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/07-configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nServerpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  config: ServerpodConfig(\n    apiServer: ServerConfig(\n      port: 8080,\n      publicHost: 'localhost',\n      publicPort: 8080,\n      publicScheme: 'http',\n    ),\n    insightsServer: ServerConfig(\n      port: 8081,\n      publicHost: 'localhost',\n      publicPort: 8081,\n      publicScheme: 'http',\n    ),\n    webServer: ServerConfig(\n      port: 8082,\n      publicHost: 'localhost',\n      publicPort: 8082,\n      publicScheme: 'http',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget for Serverpod Web Server in Dart\nDESCRIPTION: Illustrates the creation of a custom Widget by extending the Widget class. This example sets up a template with a 'title' parameter, demonstrating how to pass values to the Mustache template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/18-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File from Server (Dart)\nDESCRIPTION: This server-side code retrieves a file's content as a `ByteData` object. It uses the `retrieveFile` method, accessing the file based on the storage ID and path.  This is useful for processing file contents directly within the server application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Single Row in Dart\nDESCRIPTION: Example of updating a single company record in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \ncompany.name = 'New name';\nvar updatedCompany = await Company.db.updateRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Exception in YAML\nDESCRIPTION: YAML configuration for defining a custom serializable exception with message and error type fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Serverpod Web Server\nDESCRIPTION: Examples of adding single page and wildcard routes to the Serverpod web server. Shows how to configure path matching patterns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/18-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Module Relation with Bridge Table - User Model\nDESCRIPTION: Advanced example showing User model definition with both module relation to UserInfo and a one-to-many relationship to Company model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\n  company: Company?, relation(name=company_employee)\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n  company_unique_idx:\n    fields: companyId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Verifying Upload - Dart\nDESCRIPTION: This snippet defines a function to verify if a file upload has been successfully completed. It checks the storage for the file path after an upload attempt has been made. The function returns a boolean indicating the success of the verification.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Diagnostic Event Handlers in Serverpod\nDESCRIPTION: Example of setting up diagnostic event handlers in Serverpod for exception monitoring through the ExperimentalFeatures configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  var serverpod = Serverpod(\n    ...\n    experimentalFeatures: ExperimentalFeatures(\n      diagnosticEventHandlers: [\n        AsEventHandler((event, {required space, required context}) {\n          print('$event  Origin is $space\\n  Context is ${context.toJson()}');\n        }),\n      ],\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Example in Dart\nDESCRIPTION: Shows how to seed test data into the database using a Session instance within a test setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given Products endpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insert(session, [\n    Product(name: 'Apple', price: 10),\n    Product(name: 'Banana', price: 10)\n    ]);\n  });\n\n  test('then calling `all` should return all products', () async {\n    final products = await endpoints.products.all(sessionBuilder);\n    expect(products, hasLength(2));\n    expect(products.map((p) => p.name), contains(['Apple', 'Banana']));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Row in Serverpod Dart\nDESCRIPTION: This Dart snippet shows how to update a single row in the database using the 'updateRow' method. It fetches a company, modifies its name, and updates it in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \ncompany.name = 'New name';\nvar updatedCompany = await Company.db.updateRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-one Relationship with ID Field in Serverpod YAML\nDESCRIPTION: Example of configuring a one-to-one relationship between User and Address models using an explicit foreign key field with a unique index to enforce the one-to-one constraint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int, relation(parent=address) // Foreign key field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Cloud Storage in Serverpod\nDESCRIPTION: Setup code for configuring S3 cloud storage integration with custom domain support.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Using flushEventQueue with Generator Function in Serverpod Tests\nDESCRIPTION: An example of how to use the flushEventQueue helper function when working with a generator function in Serverpod tests. It ensures the generator has executed up to a certain point before continuing the test.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = endpoints.someEndoint.generatorFunction(session);\nawait flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In with Apple Button in Dart\nDESCRIPTION: Creates a Sign-In with Apple button using the Serverpod authentication module, which triggers the native sign-in UI and handles authentication\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with Filter in Dart\nDESCRIPTION: Example of deleting Company records that match a specific filter condition\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.deleteWhere(\n  session,\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration in Serverpod with Maintenance Role\nDESCRIPTION: This command applies a repair migration using the maintenance role. In maintenance mode, migrations are applied, and then the server exits with a status code indicating success (0) or failure (non-zero). The repair migration is applied before any other migrations if both are specified.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Serverpod Endpoint Returning Custom Class in Dart\nDESCRIPTION: This snippet demonstrates a Serverpod endpoint that returns a custom serializable object. It imports the shared package containing the custom class and returns an instance of it.  The server pod must be able to serialize the custom object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:relation_test_shared/relation_test_shared.dart';\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<ClassName> getMyCustomClass(Session session) async {\n    return ClassName(\n      'John Doe',\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Student Model with Enrollment Relation in YAML\nDESCRIPTION: This YAML snippet defines the `Student` model with a `name` field and a relation to the `Enrollment` model through the `enrollments` field. The `relation` attribute specifies the name of the relation as `student_enrollments`, which will be used in the junction table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# student.yaml\nclass: Student\ntable: student\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=student_enrollments)\"\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation None and Sub-filter in Dart\nDESCRIPTION: Illustrates how to filter users who have no related one-to-many objects matching a specific condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.none((o) => o.itemType.equals('book')))\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations during Server Startup in Bash\nDESCRIPTION: This command runs the Dart application with the flag to apply any pending migrations during startup. It ensures that the database schema is in sync with the current state of the application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Uploading File from Client\nDESCRIPTION: This Dart code snippet demonstrates how to upload a file from the client-side using a `FileUploader` object. It first requests an upload description from the server, then uploads the file using a stream, and finally verifies the upload with the server. It requires a `client` object to interact with the server endpoint, and `myStream` represents the file data stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with Filter in Serverpod using Dart\nDESCRIPTION: Shows how to find a single row using an expression with the findFirstRow method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('Serverpod'),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Row in Dart\nDESCRIPTION: This Dart snippet demonstrates how to update a row in the database using the `update` method. The object being updated must have its `id` set to a non-`null` value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"var myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\"\n```\n\n----------------------------------------\n\nTITLE: Calling an Endpoint Method from Client\nDESCRIPTION: This snippet demonstrates how to call the `hello` method of the `example` endpoint from the client side. It assumes that the client object has been initialized. The `client.example.hello('World')` call returns a `Future` that resolves to the string returned by the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Serverpod\nDESCRIPTION: Method to verify if a file exists in the storage system using storageId and file path.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Record into Database with Dart\nDESCRIPTION: This Dart code exemplifies inserting a new row into the database using `db.insertRow`. Pass the session and the object to be inserted. The object returned will have its `id` field updated with the database-assigned value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nmyCompany = await Company.db.insertRow(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Exception in Serverpod Endpoint\nDESCRIPTION: Implementation of a Serverpod endpoint that demonstrates throwing a custom exception with specific message and error type.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Related Data in Serverpod Query\nDESCRIPTION: Demonstrates how to include related data in a query using the include method with a typed interface for declared relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Generating code with Serverpod CLI\nDESCRIPTION: This command triggers the Serverpod code generator.  The code generator parses YAML files like `note.yaml` to generate Dart code for serializable objects and database interactions. The command must be run from the root of the server project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Generating Test Tools\nDESCRIPTION: Generates the test tools for an existing Serverpod project using the serverpod command, which helps in executing tests seamlessly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixorama State and Initialization\nDESCRIPTION: This code adds the PixelImageController and initState method to the Pixorama widget, setting up the image data management and connection to the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // The pixel image controller contains our image data and handles updates.\n  // If it is null, the image has not yet been loaded from the server.\n  PixelImageController? _imageController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Connect to the server and start listening to updates.\n    _listenToUpdates();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Service Info in iOS\nDESCRIPTION: This XML snippet is used to add the SERVER_CLIENT_ID to the GoogleService-Info.plist file in an iOS project. This includes the client id necessary for Google authentication integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Managing Authentication Tokens in Serverpod Client\nDESCRIPTION: Examples of storing, removing, and retrieving authentication tokens using the client's authentication key manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar keyManager = client.authenticationKeyManager;\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait client.authenticationKeyManager?.put(token);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait client.authenticationKeyManager?.remove();\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar token = await client.authenticationKeyManager?.get();\n```\n\n----------------------------------------\n\nTITLE: Test Configuration in test.yaml\nDESCRIPTION: This configuration file sets up the necessary ports, database connections, and Redis settings required for the test environment. It ensures ports are dynamically assigned, supporting concurrent test execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row by ID in Dart\nDESCRIPTION: This Dart snippet demonstrates how to find a single row in the database by its `id` using the `findById` method. If no matching row is found, `null` is returned.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"var myCompany = await Company.findById(session, companyId);\"\n```\n\n----------------------------------------\n\nTITLE: Catching Custom Exception in Client App\nDESCRIPTION: Example of catching and handling a custom exception in the client application with try-catch blocks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  client.example.doThingy();\n}\non MyException catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Field Visibility Scope in Serverpod Models\nDESCRIPTION: This YAML defines a class `SelectivelyHiddenClass` and uses the `scope` property to control the visibility of the `hiddenSecretKey` field. By setting `scope=serverOnly`, the field is only accessible on the server side, while `publicKey` is available to both client and server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: SelectivelyHiddenClass\nfields:\n  hiddenSecretKey: String, scope=serverOnly\n  publicKey: String\"\n```\n\n----------------------------------------\n\nTITLE: Defining ImageUpdate Model\nDESCRIPTION: YAML definition for ImageUpdate model that captures individual pixel updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ImageUpdate\nfields:\n  pixelIndex: int\n  colorIndex: int\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Self-Relations in Serverpod\nDESCRIPTION: Defines a Cat class with a self-referential one-to-many relation to model mother-kitten relationships. Each cat can have one mother and multiple kittens, using optional relations with SetNull delete behavior.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Cat\ntable: cat\nfields:\n  name: String\n  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)\n  kittens: List<Cat>?, relation(name=cat_kittens)\n```\n\n----------------------------------------\n\nTITLE: Defining deleteNote Method - Dart\nDESCRIPTION: This method allows for deleting a specific note from the database. It requires a Session object and the Note object to be removed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> deleteNote(Session session, Note note) async {\n  await Note.db.deleteRow(session, note);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Serverpod WebSocket in Dart\nDESCRIPTION: This code snippet shows how to connect to the server's WebSocket in a Serverpod client application. It's a prerequisite for accessing streams in the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Health Check Handler in Dart\nDESCRIPTION: This snippet demonstrates how to register a custom health check handler when initializing a Serverpod instance. The registered handler will be called every minute to perform the health checks, allowing you to monitor the server status effectively.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/10-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting Up S3 Storage Configuration - Dart\nDESCRIPTION: This snippet shows how to configure S3 storage for Serverpod. It creates a new S3CloudStorage instance and adds it to the Serverpod configuration, allowing it to replace or supplement public or private storage settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Registering Future Call with Serverpod\nDESCRIPTION: Shows how to register a future call in the server.dart file's run method. The future call must be registered with a unique name that will be used to invoke it later.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/14-scheduling.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid run(List<String> args) async {\n  final pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n  );\n\n  ...\n\n  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Upload Completion in Serverpod (Dart)\nDESCRIPTION: This snippet shows how to verify that a file upload has completed successfully on the server side. This is crucial when using third-party storage services like S3 or Google Cloud Storage to ensure data integrity. It takes the 'path' to the file as input.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User ID in Dart\nDESCRIPTION: This snippet demonstrates how to obtain the user ID of an authenticated user from the session object in a Serverpod application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = (await session.authenticated)?.userId;\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Serverpod\nDESCRIPTION: Retrieves detailed user information using the static Users class. This method requires the user ID obtained from the authentication session and returns a UserInfo object containing available user data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Double Default Values in YAML\nDESCRIPTION: This YAML snippet demonstrates setting a specific default value of 10.5 for a field 'doubleDefault' of type 'double'. It simplifies the initialization of model fields with default numeric values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndoubleDefault: double, default=10.5\n```\n\n----------------------------------------\n\nTITLE: Attaching a single row in Serverpod\nDESCRIPTION: This snippet demonstrates how to link an individual employee to a company using the `attachRow` method in Serverpod. It first retrieves both the `Company` and `Employee` objects by their IDs and then associates the employee with the specified company. This operation allows for creating relationships between records.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"var company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attachRow.employees(session, company!, employee!);\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixel Update Method\nDESCRIPTION: Dart code for the setPixel method in PixoramaEndpoint, which updates a pixel and notifies all connected clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:pixorama_server/src/generated/protocol.dart';\n\nclass PixoramaEndpoint extends Endpoint {\n  // ...\n\n  static const _channelPixelAdded = 'pixel-added';\n\n  Future<void> setPixel(\n    Session session, {\n    required int colorIndex,\n    required int pixelIndex,\n  }) async {\n    if (colorIndex < 0 || colorIndex >= _numColorsInPalette) {\n      throw FormatException('colorIndex is out of range: $colorIndex');\n    }\n    if (pixelIndex < 0 || pixelIndex >= _numPixels) {\n      throw FormatException('pixelIndex is out of range: $pixelIndex');\n    }\n\n    _pixelData[pixelIndex] = colorIndex;\n\n    session.messages.postMessage(\n      _channelPixelAdded,\n      ImageUpdate(\n        pixelIndex: pixelIndex,\n        colorIndex: colorIndex,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Youtube API with Google OAuth on Serverpod Server\nDESCRIPTION: Shows how to create an authenticated client for accessing Youtube API on the server side using the user's Google credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar googleClient = await authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youtubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n}\nelse {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Several Rows in Serverpod\nDESCRIPTION: This snippet demonstrates how to batch update multiple rows using the `update` method. It ensures atomicity, meaning no rows will be updated if any entry fails to be updated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name')).toList();\nvar updatedCompanies = await Company.db.update(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Client for Localhost Server\nDESCRIPTION: This Dart code snippet is necessary for Flutter applications that need to connect to a local Serverpod instance. It demonstrates how to specify the server's IP address and monitor connectivity within the Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/03-creating-project.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://192.168.1.117:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Calling an Endpoint Method from Client-Side (Dart)\nDESCRIPTION: This snippet shows how to call the generated endpoint method from the client-side code. It uses the client object to access the 'example' endpoint and call the 'hello' method with a parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Database Connection in YAML\nDESCRIPTION: This YAML configuration snippet shows how to enable SSL for the database connection in the Serverpod configuration file. It's important for securing the connection to the RDS instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: redis.private-production.examplepod.com\n  port: 5432\n  name: serverpod\n  user: postgres\n  requireSsl: true\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Serverpod Web Server\nDESCRIPTION: Demonstrates how to add single page and wildcard routes to the Serverpod web server. Shows both specific path matching and wildcard path matching using asterisk.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/18-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-One Self-Relation for Blog Posts\nDESCRIPTION: Defines a Post class with self-referential relationship to link posts in a chain, allowing navigation between previous and next posts. Includes a unique index on nextId to ensure proper linking.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Post\ntable: post\nfields:\n  content: String\n  previous: Post?, relation(name=next_previous_post)\n  nextId: int?\n  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)\nindexes:\n  next_unique_idx:\n    fields: nextId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Caching with CacheMissHandler in Serverpod\nDESCRIPTION: Shows how to use CacheMissHandler for more elegant cache miss handling. The handler automatically manages cache misses and storage of new data with a specified lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/08-caching.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(\n    cacheKey,\n    // If the object wasn't found in the cache, load it from the database and\n    // save it in the cache. Make it valid for 5 minutes.\n    CacheMissHandler(\n      () async => UserData.db.findById(session, userId),\n      lifetime: Duration(minutes: 5),\n    ),\n    );\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Serverpod\nDESCRIPTION: Retrieves detailed user information using the Users class static method. This method requires an active session and valid user ID, returning a UserInfo object containing user details.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Mapping Company Class to Database Table in YAML\nDESCRIPTION: This snippet defines a class mapping in YAML, where the 'Company' class is associated with a database table named 'company'. It establishes a structure for data to be managed within the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Cloud Storage in Serverpod\nDESCRIPTION: Setup code to configure an S3 bucket as a storage backend for Serverpod, including region, bucket name, and optional custom domain.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_s3/serverpod_cloud_storage_s3.dart'\n    as s3;\n```\n\n----------------------------------------\n\nTITLE: Updated Database Query Usage\nDESCRIPTION: Shows the transition from deprecated dbNext to the new db field in Session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nsession.db.find(...);\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App in Chrome\nDESCRIPTION: Command to run the Flutter app in Chrome for testing Pixorama.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Deleting a note from the database\nDESCRIPTION: This Dart code defines a `deleteNote` method within the `NotesEndpoint` class.  It deletes a `Note` object from the database using the `Note.db.deleteRow` method, generated by Serverpod. The method takes a `Session` object and a `Note` object as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> deleteNote(Session session, Note note) async {\n  await Note.db.deleteRow(session, note);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Upload Completion - Serverpod Dart\nDESCRIPTION: This code snippet verifies that a file upload has been completed by checking the storage. It takes a `Session` object and a file `path` as input. The function returns a boolean value indicating whether the upload was successful.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up SessionManager and Client in Flutter\nDESCRIPTION: This snippet illustrates how to initialize the `SessionManager` and `Client` in a Flutter application for Serverpod authentication. It sets up a singleton `Client` to communicate with the server and initializes the `SessionManager` to track the user's sign-in state. It also sets up connectivity monitoring.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  // Need to call this as we are using Flutter bindings before runApp is called.\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Sets up a singleton client object that can be used to talk to the server\n  // from anywhere in our app. The client is generated from your server code.\n  // The client is set up to connect to a Serverpod running on a local server on\n  // the default port. You will need to modify this to connect to staging or\n  // production servers.\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  // The session manager keeps track of the signed-in state of the user. You\n  // can query it to see if the user is currently signed in and get information\n  // about the user.\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Name-Serialized Enum Model\nDESCRIPTION: YAML definition for an enum using name-based serialization instead of index-based\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nserialized: byName\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Dart\nDESCRIPTION: This code snippet shows how to verify if a file upload has been completed on the server side. It's particularly useful when uploading to third-party services like S3 or Google Cloud Storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Relation-based Sorting in Dart using Serverpod\nDESCRIPTION: Shows how to sort companies based on a related model's field (CEO's name) using chained field reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.ceo.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a repair migration in Serverpod targeting specific migration\nDESCRIPTION: This bash command creates a repair migration targeting a specific migration version. The `--version` option specifies the migration name to target.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create-repair-migration --version 20230821135718-v1-0-0\"\n```\n\n----------------------------------------\n\nTITLE: Finding User Information by User ID\nDESCRIPTION: Use the Users class to retrieve detailed user information based on the user's ID. This method allows fetching comprehensive user details from the authentication system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a File from Serverpod Storage\nDESCRIPTION: Server-side method to directly retrieve a file from storage. This returns the file data as ByteData, which can be used for processing or serving files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Requiring Authentication for Serverpod Endpoints in Dart\nDESCRIPTION: Illustrates how to restrict access to a Serverpod endpoint to authenticated users by overriding the requireLogin property.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Between Filter in Dart\nDESCRIPTION: Demonstrates how to use the between filter to fetch users within a specific age range.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.between(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Scopes for Granular Access Control in Dart\nDESCRIPTION: This code defines a custom scope by extending the Scope class, allowing for more specific access control on endpoints based on custom-defined scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Record by ID in Serverpod\nDESCRIPTION: Shows how to retrieve a single Company record using its ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Custom Email Authentication with EmailAuthController\nDESCRIPTION: Implementing custom email authentication flows using EmailAuthController\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n\n// User signup\nawait authController.createAccountRequest(userName, email, password);\n\n// Validate account\nawait authController.validateAccount(email, verificationCode);\n\n// Sign in\nawait authController.signIn(email, password);\n\n// Password reset\nawait authController.initiatePasswordReset(email);\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Session State Listener Implementation\nDESCRIPTION: Example of implementing a session state listener in a Flutter widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n\n  // Rebuild the page if signed in status changes.\n  sessionManager.addListener(() {\n    setState(() {});\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Main Flutter App File\nDESCRIPTION: This extensive snippet shows the complete main.dart file with all the implemented features, including note creation, loading screen, and error handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n                    _notes!.add(note);\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call with Delay in Dart\nDESCRIPTION: This snippet shows how to schedule a future call to be invoked after a specified delay using the futureCallWithDelay method. It takes the future call name, data, and a Duration object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/13-scheduling.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining createNote Method - Dart\nDESCRIPTION: This method allows the creation of a new note in the database. It takes a Session object and a Note object to be stored.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> createNote(Session session, Note note) async {\n  await Note.db.insertRow(session, note);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Session Management\nDESCRIPTION: Setting up SessionManager and Client initialization in the main Flutter app file for handling authentication state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/01-setup.mdx#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  // Need to call this as we are using Flutter bindings before runApp is called.\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // The android emulator does not have access to the localhost of the machine.\n  // const ipAddress = '10.0.2.2'; // Android emulator ip for the host\n\n  // On a real device replace the ipAddress with the IP address of your computer.\n  const ipAddress = 'localhost';\n\n  // Sets up a singleton client object that can be used to talk to the server from\n  // anywhere in our app. The client is generated from your server code.\n  // The client is set up to connect to a Serverpod running on a local server on\n  // the default port. You will need to modify this to connect to staging or\n  // production servers.\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  // The session manager keeps track of the signed-in state of the user. You\n  // can query it to see if the user is currently signed in and get information\n  // about the user.\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows in Dart with Conditions\nDESCRIPTION: This Dart snippet illustrates how to find multiple companies in the database based on a condition where the 'id' is less than 100. The result is a list of companies matching this criterion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Message Channel in Dart for Serverpod Streaming\nDESCRIPTION: This code shows how to subscribe to a message channel when a stream is opened. It forwards any message sent to a user identified by their user ID. The subscription is automatically disposed when the stream closes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Pixorama Server Endpoint in Dart\nDESCRIPTION: Sets up the server endpoint for Pixorama, defining image dimensions, color palette, and initializing a pixel data storage mechanism.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass PixoramaEndpoint extends Endpoint {\n  static const _imageWidth = 64;\n  static const _imageHeight = 64;\n  static const _numPixels = _imageWidth * _imageHeight;\n\n  static const _numColorsInPalette = 16;\n  static const _defaultPixelColor = 2;\n  \n  final _pixelData = Uint8List(_numPixels)\n    ..fillRange(\n      0,\n      _numPixels,\n      _defaultPixelColor,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Passwords with YAML\nDESCRIPTION: YAML configuration for managing passwords and secrets across different deployment environments. Includes shared secrets and environment-specific credentials for database, Redis, and services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/07-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  myCustomSharedSecret: 'secret_key'\n\ndevelopment:\n  database: 'development_password'\n  redis: 'development_password'\n  serviceSecret: 'development_service_secret'\n\nproduction:\n  database: 'production_password'\n  redis: 'production_password'\n  serviceSecret: 'production_service_secret'\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit One-to-many Relationships with Foreign Key in Serverpod\nDESCRIPTION: Example of explicitly defining a one-to-many relationship between Company and Employee models using a foreign key field on the Employee side, allowing multiple employees to reference the same company ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit One-to-many Relationship in Serverpod YAML\nDESCRIPTION: This snippet demonstrates how to implicitly define a one-to-many relationship between Company and Employee models using Serverpod's YAML configuration. The Company model includes a List<Employee> field with the 'relation' keyword to establish the relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Creating Repair Migration\nDESCRIPTION: Basic command to create a repair migration to sync database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget Route - Dart\nDESCRIPTION: This code defines a custom route by extending the WidgetRoute class and implementing the build method, enabling custom responses for web requests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/16-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Student Model with Many-to-Many Relationship\nDESCRIPTION: YAML configuration for the Student model that establishes a many-to-many relationship through enrollments. Includes a list of Enrollment relations with a unique relation name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Student\ntable: student\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=student_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Creating a custom WidgetRoute in Serverpod\nDESCRIPTION: Extends the `WidgetRoute` class to create a custom route. The `build` method returns a `Widget` that represents the web page to be rendered. The `Session` and `HttpRequest` objects provide access to server-side features and request details.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/18-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Command in Bash\nDESCRIPTION: This bash command runs 'dart pub get' to fetch dependencies and 'serverpod generate' to add the module to the project's deserializer.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Operations in NotesEndpoint\nDESCRIPTION: The Dart snippet implements CRUD operations in the 'NotesEndpoint' class, enabling note creation, deletion, and retrieval through defined methods compatible with Serverpod's session and database infrastructure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    // By ordering by the id column, we always get the notes in the same order\n    // and not in the order they were updated.\n    return await Note.db.find(\n      session,\n      orderBy: (t) => t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.db.insertRow(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.db.deleteRow(session, note);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment - Hosts File Entries\nDESCRIPTION: Required host file entries for running individual tests, mapping local services to localhost\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/10-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1 serverpod_test_server\n127.0.0.1 postgres\n127.0.0.1 redis\n```\n\n----------------------------------------\n\nTITLE: Defining Database Indexes in YAML\nDESCRIPTION: This YAML snippet shows how to add indexes to database tables for performance reasons.  It defines an index named `company_name_idx` on the `name` field of the `Company` table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>?, api\nindexes:\n  company_name_idx:\n    fields: name\"\n```\n\n----------------------------------------\n\nTITLE: Sorting by Count of List Relation in Serverpod (Dart)\nDESCRIPTION: This code snippet demonstrates how to order results based on the count of a list relation (1:n) using the `count()` method. It fetches all companies and sorts them by the number of employees.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Cloud Storage in Serverpod\nDESCRIPTION: Method to add S3 cloud storage configuration to a Serverpod instance with specific region, bucket, and hosting details\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Name in Descending Order in Dart using Serverpod\nDESCRIPTION: This example shows how to fetch all companies and sort them by their name in descending order. It uses the 'find' method with both 'orderBy' and 'orderDescending' parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n  orderDescending: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Requiring User Authentication for Endpoints in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to restrict access to an endpoint to only authenticated users by overriding the requireLogin property of the Endpoint class and setting it to true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Client Dependency in Pubspec - YAML\nDESCRIPTION: Includes the serverpod_auth_client dependency in the client's pubspec.yaml to enable authentication features.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Implementing SignInWithEmailButton in Dart\nDESCRIPTION: Implementation of the pre-built SignInWithEmailButton widget for quick email authentication integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-Many with Object Relation\nDESCRIPTION: Shows how to create a bidirectional one-to-many relationship using object relations on both sides with a named relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation(name=company_employees)\n```\n\n----------------------------------------\n\nTITLE: Serverpod Health Check Response\nDESCRIPTION: Example of a successful health check response from a deployed Serverpod instance, showing timestamp in UTC.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Pattern Matching with ILike\nDESCRIPTION: Using ilike and notIlike operators for case-insensitive pattern matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.ilike('a%')\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notIlike('b%')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check Handler in Dart\nDESCRIPTION: Demonstrates how to create a custom health check handler that returns ServerHealthMetric objects. The handler performs custom health checks and returns metrics with a specified name, server ID, timestamp, health status, and value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/12-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Integer and String Fields in Serverpod\nDESCRIPTION: Demonstrates how to set default values for integer and string fields in Serverpod YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nintDefault: int, default=10\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstringDefault: String, default='This is a string'\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Apple Auth Dependency in Flutter\nDESCRIPTION: This snippet shows how to add the serverpod_auth_apple_flutter dependency to the pubspec.yaml file in a Flutter project. It's necessary for implementing Apple Sign-In functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Default Value Example\nDESCRIPTION: Demonstrates setting default values for multiple field types in a single class configuration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nclass: DefaultValue\ntable: default_value\nfields:\n  dateTimeDefault: DateTime, default=now\n  boolDefault: bool, defaultModel=false, defaultPersist=true\n  intDefault: int, defaultPersist=20\n  doubleDefault: double, default=10.5, defaultPersist=20.5\n  stringDefault: String, default=\"This is a string\", defaultModel=\"This is a string\"\n```\n\n----------------------------------------\n\nTITLE: Defining getAllNotes Method - Dart\nDESCRIPTION: This method retrieves all notes from the database, returning them as a list of Note objects. It orders the results by the note's ID to maintain consistent ordering.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<Note>> getAllNotes(Session session) async {\n  return await Note.db.find(\n    session,\n    orderBy: (t) => t.id,\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Messages Using Session Object in Dart\nDESCRIPTION: This snippet demonstrates how to log a simple message using the `log` method of the `session` object in Dart. It captures the functionality for creating normal log entries during the execution of a session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/09-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: SessionManager Setup in Flutter\nDESCRIPTION: Implementation of SessionManager initialization with client configuration for authentication management\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Referential Actions in YAML\nDESCRIPTION: This snippet demonstrates the YAML syntax for specifying referential actions for `onUpdate` and `onDelete` events within a Serverpod relation. It shows how to configure the database to handle updates and deletes in related tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"relation(onUpdate=<ACTION>, onDelete=<ACTION>)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to ListTile in Flutter for Serverpod Note App\nDESCRIPTION: This code snippet shows how to add a delete button to a ListTile in Flutter. When pressed, it removes the note from the local state and calls the _deleteNote method to delete it from the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Serverpod with Dart\nDESCRIPTION: Shows how to update a user's scopes using the Users class's updateUserScopes method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Serializable Objects in generator.yaml for Serverpod\nDESCRIPTION: This YAML snippet shows how to declare custom serializable objects in the config/generator.yaml file of the server project. The path needs to be accessible from both the server and client packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nextraClasses:\n- package:my_project_shared/my_project_shared.dart:ClassName\n```\n\n----------------------------------------\n\nTITLE: Independent One-to-One Relations in Serverpod YAML\nDESCRIPTION: Demonstrates how to define multiple independent one-to-one relations between the same entities, each with their own unique constraints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  friendsAddress: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: friendsAddressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  resident: User?, relation\nindexes:\n  address_user_unique_idx:\n    fields: residentId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Migrations in YAML Configuration\nDESCRIPTION: YAML configuration to opt out of managed migrations for a specific table by setting 'managedMigration' to false. This allows manual management of the table's lifecycle.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nmanagedMigration: false\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Invoking Future Call with Delay\nDESCRIPTION: Schedules a future call to be executed after a specified delay using futureCallWithDelay. This snippet demonstrates how to specify the delay duration and the data to be passed. The method requires access to a session and the Serverpod instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/13-scheduling.md#2025-04-20_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Row in Dart\nDESCRIPTION: Example of inserting a single company record into the database using insertRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar row = Company(name: 'Serverpod');\nvar company = await Company.db.insertRow(session, row);\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code for Auth Module - Bash\nDESCRIPTION: Generates the client code and endpoint methods for the authentication module using the serverpod command line tool.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-One Relation Filter in Dart\nDESCRIPTION: Demonstrates how to filter users based on a property of a related one-to-one object (address).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.address.street.like('%road%')\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Test Configuration File\nDESCRIPTION: The test.yaml configuration file that defines server settings for testing. This uses dynamic port allocation (port: 0) to enable concurrent test execution and points to the test databases.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# This is the configuration file for your test environment.\n# All ports are set to zero in this file which makes the server find the next available port.\n# This is needed to enable running tests concurrently. To set up your server, you will\n# need to add the name of the database you are connecting to and the user name.\n# The password for the database is stored in the config/passwords.yaml.\n\n# Configuration for the main API test server.\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# Configuration for the Insights test server.\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# Configuration for the web test server.\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# This is the database setup for your test server.\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\n# This is the setup for your Redis test instance.\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Setting Dart Version in AWS Install Dependencies Script\nDESCRIPTION: Bash script configuration for specifying Dart SDK version for AWS deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nDART_VERSION=3.5.1\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data with Limit in Dart\nDESCRIPTION: This snippet shows how to use the 'limit' parameter to specify the maximum number of records to return from a query in a Serverpod application. It fetches the first 10 companies from the database. Requires a Serverpod session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Serverpod Endpoint\nDESCRIPTION: Example of creating a simple endpoint class with a hello method that takes a name parameter and returns a greeting. The endpoint extends the Endpoint class and implements an async method that returns a Future<String>.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-many Object Relation in YAML\nDESCRIPTION: Demonstrates setting up a bidirectional one-to-many relationship using object relations with named relationships on both sides.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation(name=company_employees)\n```\n\n----------------------------------------\n\nTITLE: Calling an Endpoint Method from Client-Side (Dart)\nDESCRIPTION: This snippet shows how to call an endpoint method from the client-side code in Serverpod. It assumes that the client-side code has been generated using the 'serverpod generate' command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Cloud Storage in Serverpod\nDESCRIPTION: Configuration code for setting up S3 cloud storage integration with custom domain support.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Running the Serverpod Demo Flutter App\nDESCRIPTION: Commands to run the demo Flutter application in Chrome browser.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform\nDESCRIPTION: Command to set the production database password as an environment variable for Terraform deployment. The password should be retrieved from config/passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stored File Content\nDESCRIPTION: Method to directly retrieve file content as ByteData from server storage\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relationship with Object Reference in YAML\nDESCRIPTION: Shows how to define a one-to-one relationship using an object reference approach, where Serverpod automatically handles the foreign key generation and management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation // Object relation field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call with Delay in Serverpod\nDESCRIPTION: This snippet demonstrates how to schedule a future call to be invoked after a specified delay using the futureCallWithDelay method. In this example, the call is scheduled to execute 1 hour from now.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/14-scheduling.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: List Relation Count Sorting in Dart using Serverpod\nDESCRIPTION: Demonstrates sorting companies based on the count of related employees using a 1:n relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(),\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube API on Server Side with Serverpod Authentication\nDESCRIPTION: This snippet shows how to access the YouTube API on the server side using the googleapis package. It demonstrates creating an authenticated client for a specific user and making API calls to retrieve the user's liked videos playlist.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring State Variables for Notes App\nDESCRIPTION: Adding state variables to the MyHomePageState class to store notes and connection exceptions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\n...\n\nclass MyHomePageState extends State<MyHomePage> {\n\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Connection Error Handling\nDESCRIPTION: Method to handle connection failures and update the app state accordingly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Independent One-to-One Relations in Serverpod YAML\nDESCRIPTION: Demonstrates how to define multiple independent one-to-one relations between the same entities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  friendsAddress: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: friendsAddressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  resident: User?, relation\nindexes:\n  address_user_unique_idx:\n    fields: residentId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Streaming Methods\nDESCRIPTION: Example of implementing bi-directional error handling in streaming methods with serializable exceptions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Stream echoStream(Session session, Stream stream) async* {\n    stream.listen((message) {\n      // Do nothing\n    }, onError: (error) {\n      print('Server received error: $error');\n      throw SerializableException('Error from server');\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Channel Listener\nDESCRIPTION: Demonstrates adding a listener to a channel to process incoming messages\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nsession.messages.addListener('user_updates', (message) {\n  print('Received message: $message');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Upload Description in Serverpod\nDESCRIPTION: Server-side endpoint method to generate upload description for file upload authorization. Takes session and file path as parameters and returns an upload description string.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Relational Data in Serverpod\nDESCRIPTION: Illustrates pagination in Serverpod queries by limiting the number of records retrieved and setting an offset. Assumes Serverpod as a dependency. Inputs are session and IDs, output paginates the included employees' list.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      limit: 10,\n      offset: 10,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom WidgetRoute in Serverpod\nDESCRIPTION: This code shows how to create a custom WidgetRoute by overriding the WidgetRoute class and implementing the build method. The build method returns a Widget based on the session and HTTP request.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/10-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Attaching Rows in Serverpod Relations\nDESCRIPTION: Shows how to link multiple employees to a company in a single operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attach.employees(session, company!, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-Many with Foreign Key\nDESCRIPTION: Illustrates a bidirectional one-to-many relationship using a foreign key approach with named relationship parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation(name=company_employees, parent=company)\n```\n\n----------------------------------------\n\nTITLE: Defining Exception with Default Values\nDESCRIPTION: YAML configuration showing how to define default values for exception fields using the default keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/04-exceptions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String, default=\"An error occurred\"\n  errorCode: int, default=1001\n```\n\n----------------------------------------\n\nTITLE: Querying with Equals Filter in Dart\nDESCRIPTION: Demonstrates how to filter database records using exact value matching with equals and notEquals operators.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.equals('Alice')\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notEquals('Bob')\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Index Type in YAML for Serverpod\nDESCRIPTION: Demonstrates how to specify a custom index type in a Serverpod YAML configuration. The example sets the index type to 'brin' for the 'name' field of the 'Company' class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/04-indexing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n```\n\n----------------------------------------\n\nTITLE: Implementing a Login Endpoint with Custom Authentication\nDESCRIPTION: Example of a custom endpoint that authenticates a user and issues a token, demonstrating how to send tokens to clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass UserEndpoint extends Endpoint {\n  Future<LoginResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    var identifier = authenticateUser(session, username, password);\n    if (identifier == null) return null;\n\n    return issueMyToken(identifier, scopes: {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Notes Loading in Flutter App\nDESCRIPTION: Overriding the initState method to load notes when the app starts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Firebase Authentication Programmatically\nDESCRIPTION: This Dart snippet provides a method to programmatically trigger the Firebase authentication UI using the signInWithFirebase function. It includes the input parameters required for the function and the handling of the sign-in result.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait signInWithFirebase(\n  context: context, \n  caller: client.modules.auth, \n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n);\n\n// Where `context` is your `BuildContext`, `caller` and `authProviders` are the same as for the button.\n```\n\n----------------------------------------\n\nTITLE: Database Read by ID Operation in Dart\nDESCRIPTION: Example of retrieving a single row from the database using db.findById method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Specifying Index Type - YAML\nDESCRIPTION: This code snippet specifies an index type by using the 'type' key. Supported types include PostgreSQL index types like 'btree', 'hash', 'gist', 'spgist', 'gin', and 'brin'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n```\n\n----------------------------------------\n\nTITLE: Connecting to Serverpod WebSocket and Handling Streams in Client\nDESCRIPTION: This code demonstrates how to connect to a Serverpod WebSocket, listen for messages, and send messages to the server endpoint from a client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/15-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait client.openStreamingConnection();\n\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Custom Extension Method\nDESCRIPTION: Example of adding custom methods to generated classes using Dart extensions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nextension MyExtension on MyClass {\n  bool isCustomMethod() {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-One Self-Relations in Serverpod\nDESCRIPTION: Defines a Post class with a self-referential one-to-one relation to link posts in a chronological chain. Uses named relations to establish next/previous connections between posts with optional foreign keys and a unique index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Post\ntable: post\nfields:\n  content: String\n  previous: Post?, relation(name=next_previous_post)\n  nextId: int?\n  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)\nindexes:\n  next_unique_idx:\n    fields: nextId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod with Custom Token Validation in Dart\nDESCRIPTION: This snippet demonstrates how to initialize Serverpod with a custom authentication handler for token validation. It returns an AuthenticationInfo object if the token is valid, otherwise null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Custom validation handler\n    if (token != 'valid') return null;\n\n    return AuthenticationInfo(1, <Scope>{});\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Development Server\nDESCRIPTION: YAML configuration for setting up the development server with API endpoints and public host settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost # Change this line\n  publicPort: 8080\n  publicScheme: http\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check Handler in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to create a custom health check handler function in Dart for Serverpod. It returns a list of ServerHealthMetric objects, which include information such as metric name, server ID, timestamp, health status, and value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/13-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional One-to-One Relationship in YAML\nDESCRIPTION: Defines an optional one-to-one relationship between `User` and `Address` using the `optional` keyword.  This makes the automatically generated `addressId` field nullable, allowing a user to not have an associated address.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation(optional)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Configure AuthenticationKeyManager in Serverpod Client\nDESCRIPTION: This snippet shows how to configure an `AuthenticationKeyManager` for a Serverpod client. The key manager is responsible for storing and retrieving the authentication token. A simple in-memory key manager is provided as an example, but a more secure implementation should be used in production, such as `FlutterAuthenticationKeyManager`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\n```\n\n----------------------------------------\n\nTITLE: Sending Global Messages with Redis in Serverpod\nDESCRIPTION: Shows how to send a global message across all servers connected to the same Redis instance by setting the global parameter to true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/16-server-events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message, global: true);\n```\n\n----------------------------------------\n\nTITLE: Applying Serverpod Migrations\nDESCRIPTION: This command starts the Serverpod server and applies any pending database migrations. The `--apply-migrations` flag ensures the database schema is up-to-date.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Paginating a List of Related Employees\nDESCRIPTION: This snippet illustrates how to paginate the results when including a list of related employees. It specifies a `limit` of 10 and an `offset` of 10, retrieving the next 10 employees starting from the 11th record. This allows for efficient retrieval of large datasets in chunks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      limit: 10,\n      offset: 10,\n    ),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing toJson() Method for Custom Serialization in Dart\nDESCRIPTION: Demonstrates how to create a toJson() method that returns a JSON serialization of the object. This is one of the requirements for custom serializable objects in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMap<String, dynamic> toJson() {\nreturn {\n    name: 'John Doe',\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Data Type Storage Configuration\nDESCRIPTION: Example of storing a complex type (Address) as a JSON column in the database table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Serverpod\nDESCRIPTION: This snippet demonstrates how to implement a caching mechanism for user data in a Serverpod endpoint. It first attempts to retrieve user data from the local cache using a unique key, and if not found, loads it from the database and caches it with a 5-minute lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(cacheKey) as UserData?;\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Public File URL in Serverpod (Dart)\nDESCRIPTION: This snippet shows how to retrieve the public URL of a file stored in a public storage using Serverpod's storage API.  The file must be in a public storage to be accessible through the URL.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Database - Bash\nDESCRIPTION: This Bash command stops the running Docker container for the Postgres database, which is useful for managing local development resources.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"$ docker compose stop\"\n```\n\n----------------------------------------\n\nTITLE: Adding Database Indexes in YAML for Performance\nDESCRIPTION: This YAML snippet defines a 'Company' class while adding an index named 'company_name_idx' on the 'name' field, aiming to enhance query performance by allowing faster lookups on that field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\n  table: company\n  fields:\n    name: String\n    foundedDate: DateTime?\n    employees: List<Employee>?, api\n  indexes:\n    company_name_idx:\n      fields: name\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side endpoint method to generate an upload description for client file uploads. Creates a description for the public storage with a specified path.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Class Implementing ProtocolSerialization in Dart\nDESCRIPTION: This snippet illustrates how to implement the `ProtocolSerialization` interface in a custom class. It includes both `toJsonForProtocol()` and `toJson()` methods, allowing for selective serialization of fields for protocol communication. The class must implement toJsonForProtocol() to selectively serialize fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements ProtocolSerialization {\n  final String? value;\n  final String? serverSideValue;\n\n  .......\n\n  // Serializes fields specifically for protocol communication\n  Map<String, dynamic> toJsonForProtocol() {\n    return {\n      \"value\":value,\n    };\n  }\n\n  // Serializes all fields, including those intended only for server-side use\n  Map<String, dynamic> toJson() {\n    return {\n      \"value\": value,\n      \"serverSideValue\": serverSideValue,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a note in the database\nDESCRIPTION: This Dart code defines a `createNote` method within the `NotesEndpoint` class. It inserts a `Note` object into the database using the `Note.db.insertRow` method, which is generated by Serverpod.  It takes a `Session` object and a `Note` object as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> createNote(Session session, Note note) async {\n  await Note.db.insertRow(session, note);\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Age Between 18 and 65 in Dart\nDESCRIPTION: This snippet retrieves users whose age is between 18 and 65 inclusively using the between method. It is an example of logical grouping within the find operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.between(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting User in Serverpod Authentication\nDESCRIPTION: This snippet demonstrates how to find or create a user in Serverpod's authentication system. It uses methods like findUserByEmail, findUserByIdentifier, and createUser from the Users class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nUserInfo? userInfo;\nuserInfo = await Users.findUserByEmail(session, email);\nuserInfo ??= await Users.findUserByIdentifier(session, userIdentifier);\nif (userInfo == null) {\n  userInfo = UserInfo(\n    userIdentifier: userIdentifier,\n    userName: name,\n    email: email,\n    blocked: false,\n    created: DateTime.now().toUtc(),\n    scopeNames: [],\n  );\n  userInfo = await Users.createUser(session, userInfo, _authMethod);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Class Implementation\nDESCRIPTION: Full implementation of a custom serializable class in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass ClassName {\n  String name;\n  ClassName(this.name);\n\n  toJson() {\n    return {\n      'name': name,\n    };\n  }\n\n  factory ClassName.fromJson(\n    Map<String, dynamic> jsonSerialization,\n  ) {\n    return ClassName(\n      jsonSerialization['name'],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloud Run Database Connection\nDESCRIPTION: This YAML configuration connects the Serverpod application to a Postgres database via Google Cloud SQL. This snippet includes setting a Unix socket connection specific to Google Cloud SQL environments using a Unix socket file path format.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  isUnixSocket: true\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\n  port: 5432\n  name: serverpod\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Using CacheMissHandler for User Data Caching in Dart with Serverpod\nDESCRIPTION: This snippet shows an alternative approach to caching user data using a CacheMissHandler. It simplifies the caching logic by handling cache misses within the get method, loading data from the database and storing it in the cache when necessary.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/08-caching.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(\n    cacheKey,\n    // If the object wasn't found in the cache, load it from the database and\n    // save it in the cache. Make it valid for 5 minutes.\n    CacheMissHandler(\n      () async => UserData.db.findById(session, userId),\n      lifetime: Duration(minutes: 5),\n    ),\n    );\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Serverpod Test in Dart\nDESCRIPTION: Demonstrates how to write a simple test using the generated Serverpod test tools, including importing necessary files and using the withServerpod helper.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:test/test.dart';\n\n// Import the generated file, it contains everything you need.\nimport 'test_tools/serverpod_test_tools.dart';\n\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    test('when calling `hello` then should return greeting', () async {\n      final greeting = await endpoints.example.hello(sessionBuilder, 'Michael');\n      expect(greeting, 'Hello Michael');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a repair migration to preserve data\nDESCRIPTION: Command to start the Serverpod server with the --apply-repair-migration flag, which applies the repair migration to update the database schema while preserving data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: InitState Override\nDESCRIPTION: Implementation of initState to load notes when the app starts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Subsequent Cursor-Based Pagination Request in Dart\nDESCRIPTION: Shows how to use a cursor for fetching the next set of records, using the last ID from the previous result to continue pagination efficiently. Enhances performance in dynamic datasets. Requires a Serverpod session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint cursor = lastCompanyIdFromPreviousPage; // This is typically sent by the client\n\nvar companies = await Company.db.find(\n  session,\n  where: Company.t.id > cursor,\n  orderBy: (t) => t.id,\n  limit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Building a Session from SessionBuilder in Dart\nDESCRIPTION: Shows how to build a Serverpod Session object from a sessionBuilder for use in tests. This is useful for database calls or passing to functions that require a Session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nSession session = sessionBuilder.build();\n```\n\n----------------------------------------\n\nTITLE: Creating Message Stream in Dart using Serverpod\nDESCRIPTION: Example of creating and listening to a message stream for a specific channel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/16-server-events.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nstream.listen((message) {\n    print('Received message: $message');\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Dart Classes from Model - Bash\nDESCRIPTION: This command regenerates Dart classes from the modified YAML model file, ensuring that the server and client code stays in sync.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/02-get-started-with-mini.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Creating Note Dialog in Flutter\nDESCRIPTION: This code creates a dialog for user input when creating a new note. It includes a function to show the dialog and a StatefulWidget to handle the dialog's state and UI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying User Sign-in Status in Dart\nDESCRIPTION: Demonstrates how to check if a user is currently signed in using the Session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call with an Identifier in Dart\nDESCRIPTION: This snippet shows how to schedule a future call with an identifier, which can be used to reference or cancel the call later. The identifier is passed as an additional parameter to futureCallWithDelay.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/13-scheduling.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n  identifier: 'an-identifying-string',\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Flutter MyHomePageState Implementation\nDESCRIPTION: Initial implementation of the MyHomePageState class with a minimal scaffold and app bar.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign In Button in Flutter\nDESCRIPTION: Dart code to add the SignInWithGoogleButton widget to a Flutter application. This implementation requires the server client ID and redirect URI for web integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting Serializable Classes in YAML\nDESCRIPTION: This YAML snippet shows how to add documentation to the 'Company' class and its fields using comments. This enables users to provide detailed descriptions of each field and class purpose, similar to Dart code documentation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/02-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Serverpod using MethodCallSession\nDESCRIPTION: This code snippet demonstrates how to access the client's IP address within a Serverpod method call. It casts the `Session` object to `MethodCallSession` to access the underlying `HttpRequest` object, which then allows retrieving the remote IP address.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/05-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\"session as MethodCallSession;\\nvar ipAddress = session.httpRequest.remoteIpAddress;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Migration in Serverpod 2.0\nDESCRIPTION: Command to create an empty migration in Serverpod 2.0, ensuring new databases use the updated integer representation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Token Validation in Serverpod Server\nDESCRIPTION: Example of initializing Serverpod with a custom authentication handler that validates tokens and returns AuthenticationInfo objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Custom validation handler\n    if (token != 'valid') return null;\n\n    return AuthenticationInfo(1, <Scope>{});\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Class toJson() Method in Dart\nDESCRIPTION: This snippet demonstrates the implementation of the `toJson()` method in Dart, which is essential for custom serialization in Serverpod. It returns a JSON representation of the object's data. This function needs to be present to provide JSON serialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n    Map<String, dynamic> toJson() {\n    return {\n        name: 'John Doe',\n    };\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Repair Migration - Bash\nDESCRIPTION: This command generates a repair migration to synchronize the live database schema with the migration system. This is crucial for restoring integrity when the database schema has been altered manually.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload\nDESCRIPTION: This Dart code snippet demonstrates how to verify that a file upload has been completed using Serverpod's `session.storage.verifyDirectFileUpload` method. It checks if the file has been successfully uploaded to the specified storage ID and path. The function takes a `Session` object and a file `path` as input and returns a boolean indicating whether the upload was successful.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Serverpod with Dart\nDESCRIPTION: Example endpoint method demonstrating how to cache and retrieve user data using Serverpod's caching system. Shows how to check the cache first, fall back to database queries, and store results in cache with a specified lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker container for test server\nDESCRIPTION: This snippet provides the commands to start the Docker container for the test server. It navigates to the `tests/serverpod_test_server/docker_local` directory, builds the Docker image, starts the container in detached mode, and sets up the required database tables using `./setup-tables`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/08-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"cd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget - Dart\nDESCRIPTION: This snippet shows how to create a custom Widget by extending the Widget class, defining template parameters to be rendered on a web page.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/16-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Serverpod Endpoint from Client-side Dart\nDESCRIPTION: This snippet shows how to call the previously defined endpoint method from the client side. It uses the generated client code to make the call to the 'hello' method on the 'example' endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Creating test.yaml for Configuration\nDESCRIPTION: Sets up the test.yaml configuration file to allow concurrent test execution with specific database and server settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# This is the configuration file for your test environment.\n# All ports are set to zero in this file which makes the server find the next available port.\n# This is needed to enable running tests concurrently. To set up your server, you will\n# need to add the name of the database you are connecting to and the user name.\n# The password for the database is stored in the config/passwords.yaml.\n\n# Configuration for the main API test server.\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# Configuration for the Insights test server.\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# Configuration for the web test server.\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\n# This is the database setup for your test server.\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\n# This is the setup for your Redis test instance.\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-One Self-Relation for Blog Posts in YAML\nDESCRIPTION: Defines a Post class with self-referential relationships to track post history. Includes next and previous post relationships with a unique index on nextId field to maintain integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Post\ntable: post\nfields:\n  content: String\n  previous: Post?, relation(name=next_previous_post)\n  nextId: int?\n  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)\nindexes:\n  next_unique_idx:\n    fields: nextId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public URL for Stored File\nDESCRIPTION: Method to get a public URL for a file stored in public storage, enabling direct web access\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serverpod Module in Bash\nDESCRIPTION: This snippet shows the command to create a custom Serverpod module using the serverpod create command with the module template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter Main File Structure\nDESCRIPTION: The complete main.dart file after removing unnecessary code, showing the basic app structure with Serverpod client initialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\n// Sets up a singleton client object that can be used to talk to the server from\n// anywhere in our app. The client is generated from your server code.\n// The client is set up to connect to a Serverpod running on a local server on\n// the default port. You will need to modify this to connect to staging or\n// production servers.\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Serverpod Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Serverpod Example'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Delete Operations in Dart\nDESCRIPTION: Shows the updated return types for delete operations in Serverpod 2.0, which now return the deleted rows instead of just IDs.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nCompany company = await Company.db.deleteRow(session, company);\nList<Company> companies = await Company.db.delete(session, [company]);\nList<Company> companies = await Company.db.deleteWhere(session, where: (t) => t.name.like('%Ltd'));\n```\n\n----------------------------------------\n\nTITLE: Running Individual Integration Tests in Dart\nDESCRIPTION: Executes a specific integration test `connection_test.dart` within the Serverpod package. It is useful for testing individual features under development. The command should be run from the `packages/serverpod` directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/06-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/serverpod\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Invoking a Serverpod Endpoint Method (Dart)\nDESCRIPTION: This Dart code shows how to invoke a method on a Serverpod endpoint from the client side. It assumes that the client object has been initialized and that the `example` endpoint has a method called `hello`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"var result = await client.example.hello('World');\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration with Serverpod - Bash\nDESCRIPTION: This Bash command initiates the creation of a new database migration within the Serverpod framework. It compares the current database schema to the necessary schema based on the project's settings and creates a migration file if differences are found.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Stopping Development Database\nDESCRIPTION: Command to stop the Docker database instance while preserving data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Row in Serverpod using Dart\nDESCRIPTION: Demonstrates how to delete a single Company row from the database using the 'deleteRow' method. The input object must have its 'id' field set.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \nvar companyDeleted = await Company.db.deleteRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Adding authentication dependencies to pubspec.yaml\nDESCRIPTION: This code snippet adds dependencies to the app's `pubspec.yaml` file for Google and Apple sign-in.  These dependencies are required for client-side authentication. Make sure to use the same version numbers as for serverpod itself.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"dependencies:\\n  flutter:\\n    sdk: flutter\\n  example_client:\\n    path: ../example_client\\n  serverpod_auth_google_flutter: ^0.9.5\\n  serverpod_auth_apple_flutter: ^0.9.5\"\n```\n\n----------------------------------------\n\nTITLE: Database-Only Field Scoping in YAML\nDESCRIPTION: Shows how to define fields that are only stored in the database but not exposed in the API using the database scope.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String?, database\n```\n\n----------------------------------------\n\nTITLE: Running Individual Serverpod Test in Dart\nDESCRIPTION: Command to run a specific test file in the Serverpod package. This example runs the connection test.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/06-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/serverpod\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Explicit Definition of One-to-Many Relationship with YAML (Foreign Key Field)\nDESCRIPTION: Defines an explicit one-to-many relationship by introducing a foreign key field in the Employee class to link back to the Company class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation\n```\n\n----------------------------------------\n\nTITLE: Running Different Types of Tests in Dart\nDESCRIPTION: Commands for running unit and integration tests separately using test tags in Dart. Shows how to run all tests, only integration tests, or only unit tests using command line flags.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# All tests (unit and integration)\ndart test\n\n# Only integration tests: add --tags (-t) flag\ndart test -t integration\n\n# Only unit tests: add --exclude-tags (-x) flag\ndart test -x integration\n```\n\n----------------------------------------\n\nTITLE: Implementing copyWith Method in Dart\nDESCRIPTION: Implementation of the copyWith method for creating immutable copies of objects with modified fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nClassName copyWith({\n  String? name,\n}) {\n  return ClassName(\n    name: name ?? this.name,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Savepoints in Transactions (Dart)\nDESCRIPTION: This snippet illustrates how to create a savepoint in a transaction using Serverpod. A savepoint allows rolling back to a specific point in a transaction, preserving changes made up to that point.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  await Company.db.insertRow(session, company, transaction: transaction);\n  // Create savepoint\n  var savepoint = await transaction.createSavepoint();\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Demonstrates how to make a one-to-one relationship optional using the 'optional' keyword. This configuration allows the foreign key to be nullable, indicating no associated address for a user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation(optional)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Email Authentication with EmailAuthController\nDESCRIPTION: Creating a custom authentication UI using the EmailAuthController class. This controller encapsulates the functionality for email/password authentication with methods for account creation, validation, and sign-in.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n```\n\n----------------------------------------\n\nTITLE: Filtered Relation Count Sorting in Serverpod\nDESCRIPTION: Shows how to sort companies by counting related records with a filter condition (employees with role 'developer').\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(\n    (employee) => employee.role.equals('developer'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Stream Session\nDESCRIPTION: Shows how to associate a state object with a streaming session when a stream is opened.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/11-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Using UserAuthentication Methods\nDESCRIPTION: Demonstrates the new way to handle user authentication using the UserAuthentication class static methods instead of session object methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nUserAuthentication.signInUser(session, userId, 'provider');\n\nUserAuthentication.signOutUser(session);\n```\n\n----------------------------------------\n\nTITLE: Advanced Error Logging in Serverpod\nDESCRIPTION: Shows how to log errors with additional parameters including log level, exception object, and stack trace information. This provides more detailed error tracking and debugging capabilities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/09-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship with Object in Serverpod YAML\nDESCRIPTION: Shows an alternative approach to defining a one-to-one relationship using an object field. This method allows for automatic handling of the relation by Serverpod, simplifying data access and queries.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation // Object relation field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Signing Out a User from All Devices in Serverpod\nDESCRIPTION: This snippet demonstrates how to sign out a user from all devices using the `UserAuthentication.signOutUser` method in Serverpod. It can sign out a specific user by ID or the currently authenticated user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nawait UserAuthentication.signOutUser(\n  session,\n  userId: 123,  // Optional: If omitted, the currently authenticated user will be signed out\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scopes in Endpoints\nDESCRIPTION: Shows how to implement custom scope-based authorization in endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serverpod Module\nDESCRIPTION: Command-line instructions for creating a new Serverpod module using the serverpod create command, with options for server, client, and Flutter packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/09-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create --template module my_module\n$ flutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Defining Company Table Schema in YAML\nDESCRIPTION: Basic table definition showing how to map a Company class to a database table with simple fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Attaching Single Row in Relational Data in Serverpod (Dart)\nDESCRIPTION: Shows how to link an individual employee to a company in Serverpod. This operation associates an employee with a specific company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attachRow.employees(session, company!, employee!);\n```\n\n----------------------------------------\n\nTITLE: Calling an Endpoint Method on Client Side in Dart\nDESCRIPTION: This snippet shows how to call the hello method of the ExampleEndpoint on the client side. The client must be initialized to connect to the server first, then you can use await to get the result from the endpoint method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Serverpod Endpoint\nDESCRIPTION: Dart code for a 'CompanyEndpoint' class with an 'isLegit' method to check if a company is over one year old.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/02-get-started-with-mini.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass CompanyEndpoint extends Endpoint {\n  Future<bool> isLegit(Session session, Company company) async {\n    // Check if the company has the foundedDate set and that it\n    // has been around for more than one year.\n\n    if (company.foundedDate == null) {\n      return false;\n    }\n\n    var oneYearAgo = DateTime.now().subract(Duration(days: 365));\n    return company.foundedDate!.isBefore(oneYearAgo);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EmailAuthController for Custom Authentication UI\nDESCRIPTION: This snippet illustrates how to instantiate the `EmailAuthController` from the `serverpod_auth_email_flutter` package for managing email/password authentication actions in a custom UI. It includes methods for account creation, validation, and password reset.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.createAccountRequest(userName, email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.validateAccount(email, verificationCode);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.signIn(email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.initiatePasswordReset(email);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Independent One-to-One Relations on Both Sides\nDESCRIPTION: Demonstrates how to define multiple independent one-to-one relations between the same entities, each with its own unique constraints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  friendsAddress: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: friendsAddressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  resident: User?, relation\nindexes:\n  address_user_unique_idx:\n    fields: residentId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Connecting User with Custom Provider in Serverpod\nDESCRIPTION: This snippet demonstrates how to find or create a user in Serverpod's authentication system using email or a unique identifier. It first attempts to find an existing user, and if not found, creates a new user with the provided information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nUserInfo? userInfo;\nuserInfo = await Users.findUserByEmail(session, email);\nuserInfo ??= await Users.findUserByIdentifier(session, userIdentifier);\nif (userInfo == null) {\n  userInfo = UserInfo(\n    userIdentifier: userIdentifier,\n    userName: name,\n    email: email,\n    blocked: false,\n    created: DateTime.now().toUtc(),\n    scopeNames: [],\n  );\n  userInfo = await Users.createUser(session, userInfo, _authMethod);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod Migration\nDESCRIPTION: This command creates a new database migration for the Serverpod project. It should be run from the `server` package directory to initialize the migration system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Authentication Key Manager for Serverpod Client\nDESCRIPTION: Example implementation of a basic in-memory AuthenticationKeyManager for client-side token management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Dependencies to Client Project\nDESCRIPTION: This YAML snippet shows the dependencies to add to the pubspec.yaml file in the client project for Serverpod authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Testing Business Logic with Session Dependency in Dart\nDESCRIPTION: This example demonstrates how to test business logic that depends on a Session object using the withServerpod helper. It shows how to set up a test environment, insert test data, and validate business logic behavior.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given decreasing product quantity when quantity is zero', (\n  sessionBuilder,\n  _,\n) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, [\n      Product(\n        id: 123,\n        name: 'Apple',\n        quantity: 0,\n      ),\n    ]);\n  });\n\n  test('then should throw `InvalidOperationException`',\n      () async {\n    var future = ProductsBusinessLogic.updateQuantity(\n      session,\n      id: 123,\n      decrease: 1,\n    );\n\n    await expectLater(future, throwsA(isA<InvalidOperationException>()));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Flutter App Module Dependencies\nDESCRIPTION: Configuration for adding module-related Flutter package dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Persistent Field in YAML Model\nDESCRIPTION: This example shows how to define a field that should not be persisted in the database using the '!persist' keyword. The 'name' field of the Company model will not be stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String, !persist \n```\n\n----------------------------------------\n\nTITLE: Deleting Rows with Filter in Dart\nDESCRIPTION: Example of deleting company records that match a specific filter condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar ids = await Company.db.deleteWhere(\n  session,\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for Stored File\nDESCRIPTION: Method to retrieve the public URL for a file stored in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Row by ID in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates how to retrieve a single row from the database using the 'findById' method in Serverpod. It requires a session object and the ID of the row to be retrieved.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Multiple Columns - Dart\nDESCRIPTION: Fetches all companies and sorts them first by their name in descending order, and then by their id in ascending order using 'orderByList'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderByList: (t) => [\n    Order(column: t.name, orderDescending: true), \n    Order(column: t.id),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Partial String Match in Dart using Serverpod\nDESCRIPTION: This snippet uses 'like' to find users with names starting with 'A'. The operation is case-sensitive and relies on the '%' character for pattern matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.like('A%')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Company Class in YAML for Serverpod\nDESCRIPTION: YAML configuration that defines a Company class with fields for name, founding date, and a list of employees. Shows how to specify required and optional fields using nullable types and demonstrates list type usage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Testing Business Logic with Serverpod in Dart\nDESCRIPTION: Test a business logic module depending on a Session object without requiring endpoint interaction. Requires Serverpod and Dart testing framework.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given decreasing product quantity when quantity is zero', (\\n  sessionBuilder,\\n  _,\\n) {\\n  var session = sessionBuilder.build();\\n\\n  setUp(() async {\\n    await Product.db.insertRow(session, [\\n      Product(\\n        id: 123,\\n        name: 'Apple',\\n        quantity: 0,\\n      ),\\n    ]);\\n  });\\n\\n  test('then should throw `InvalidOperationException`',\\n      () async {\\n    var future = ProductsBusinessLogic.updateQuantity(\\n      session,\\n      id: 123,\\n      decrease: 1,\\n    );\\n\\n    await expectLater(future, throwsA(isA<InvalidOperationException>()));\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Client Library\nDESCRIPTION: Command to generate client library code for the note app endpoints from the server directory\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Creating Loading Screen Component in Flutter\nDESCRIPTION: A loading screen widget that displays either a loading indicator or a try again button based on the connection state. This improves user experience during data loading or connection failures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Module Relation Using UserInfo Reference\nDESCRIPTION: Example of creating a bridge table/model that links a custom User model to the auth module's UserInfo model using a direct reference approach.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-side Email Authentication in Dart\nDESCRIPTION: Server-side setup for email authentication including validation and password reset email configuration. Uses the serverpod_auth_server module to handle email verification and password reset functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Company Endpoint\nDESCRIPTION: Dart code implementing a server endpoint with a method to check company legitimacy based on founding date.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package/serverpod/serverpod.dart';\n\nclass CompanyEndpoint extends Endpoint {\n  Future<bool> isLegit(Session session, Company company) async {\n    // Check if the company has the foundedDate set and that it\n    // has been around for more than one year.\n\n    if (company.foundedDate == null) {\n      return false;\n    }\n\n    var oneYearAgo = DateTime.now().subract(Duration(days: 365));\n    return company.foundedDate!.isBefore(oneYearAgo);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Global Message in Dart\nDESCRIPTION: Shows how to send a global message across servers using Redis by setting the global parameter to true\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message, global: true);\n```\n\n----------------------------------------\n\nTITLE: Managing Listener Lifecycle\nDESCRIPTION: Shows how to add and remove a listener for a specific channel\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myListenerCallback = (message) {\n  print('Received message: $message');\n};\n// Register the listener\nsession.messages.addListener('user_updates', myListenerCallback);\n\n// Remove the listener\nsession.messages.removeListener('user_updates', myListenerCallback);\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to Serverpod Models in YAML\nDESCRIPTION: This YAML snippet demonstrates how to add documentation to a class and its fields using triple hashes (###). These comments are then used by Serverpod to generate documentation for the code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\"\n```\n\n----------------------------------------\n\nTITLE: Using Named and Positional Query Parameters - Dart\nDESCRIPTION: This snippet illustrates how to use both named and positional parameters in raw SQL queries using `unsafeQuery`. Named parameters allow for more clarity in queries, while positional parameters are useful for quick sequences without needing to name each parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Named parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = @color AND size = @size',\n  QueryParameters.named({\n    'color': 'green',\n    'size': 'XL',\n  }));\n\n// Positional parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',\n  QueryParameters.positional(['green', 'XL']),\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Dart\nDESCRIPTION: This Dart snippet shows how to execute raw SQL queries on the database using the `query` method. It returns a `List<List<dynamic>>` with rows and columns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n\"var result = await session.db.query('SELECT * FROM mytable WHERE ...');\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Firebase Auth UI Programmatically in Dart\nDESCRIPTION: Code snippet demonstrating how to programmatically trigger the Firebase auth UI using the signInWithFirebase method in a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait signInWithFirebase(\n  context: context, \n  caller: client.modules.auth, \n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Opening WebSocket Connection in Client (Dart)\nDESCRIPTION: Shows how to establish a WebSocket connection from the client to the Serverpod server for streaming communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/14-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.openStreamingConnection();\n\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-Many with Object Relation\nDESCRIPTION: Shows how to create a bidirectional one-to-many relationship using object relations on both sides with a named relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation(name=company_employees)\n```\n\n----------------------------------------\n\nTITLE: Creating a repair migration in Serverpod\nDESCRIPTION: This bash command creates a repair migration to synchronize the database schema with the migration system. It pulls the live database schema from a running development server by default.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create-repair-migration\"\n```\n\n----------------------------------------\n\nTITLE: Limiting Class Visibility to Server Side in YAML\nDESCRIPTION: This YAML snippet demonstrates how to restrict the visibility of the 'MyPrivateClass' to the server only by setting the 'serverOnly' property to true. It includes a field for a hidden secret key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/02-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\n```\n\n----------------------------------------\n\nTITLE: Executing Unsafe Simple Query without Parameter Binding in Dart\nDESCRIPTION: This snippet illustrates the use of `unsafeSimpleQuery`, which executes SQL statements without supporting parameter binding, increasing the risk of SQL injection. Use this method only in scenarios where the extended query protocol is unavailable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeSimpleQuery(\n    r'SELECT * FROM mytable WHERE id = 1; SELECT * FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Serverpod CLI Commands\nDESCRIPTION: Collection of command-line instructions for creating a new Serverpod project, starting the server, generating code, and applying database migrations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes/notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Sending Authentication Tokens to Client in Serverpod\nDESCRIPTION: This example creates an `AuthenticationResponse` containing an auth token and user information for a client. It extends the `Endpoint` class and includes a login function that validates user credentials, creates or finds a user and generates an auth token, which is then returned. Required dependencies include `AuthenticationResponse` and `UserAuthentication` classes. Inputs are a session, username, and password.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyAuthenticationEndpoint extends Endpoint {\n  Future<AuthenticationResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    // Authenticates a user with email and password.\n    if (!authenticateUser(session, username, password)) {\n      return AuthenticationResponse(success: false);\n    }\n\n    // Finds or creates a user in the database using the User methods.\n    var userInfo = findOrCreateUser(session, username);\n\n    // Creates an authentication key for the user.\n    var authToken = await UserAuthentication.signInUser(\n      session,\n      userInfo.id!,\n      'myAuth',\n      scopes: {},\n    );\n\n    // Returns the authentication response.\n    return AuthenticationResponse(\n      success: true,\n      keyId: authToken.id,\n      key: authToken.key,\n      userInfo: userInfo,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Data in Serverpod\nDESCRIPTION: Server-side method to directly retrieve file data from storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Filter in Serverpod Dart\nDESCRIPTION: This Dart code demonstrates how to count the number of rows matching a specific filter using the 'count' method. It counts companies whose names start with 's'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar count = await Company.db.count(\n  session, \n  where: (t) => t.name.like('s%'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration Command\nDESCRIPTION: Command line instruction for creating a new database migration in Serverpod. This command analyzes schema differences and generates necessary migration files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform\nDESCRIPTION: This bash command sets an environment variable with the database password for Terraform to use during deployment. It's a crucial step before running Terraform commands.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS/SSL on Serverpod Client\nDESCRIPTION: This example shows how to configure a Serverpod client to connect securely to a server using HTTPS. It demonstrates setting up a SecurityContext with trusted certificates and passing it to the Client constructor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/21-security-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal securityContext = SecurityContext()\n  ..setTrustedCertificates('path/to/server_cert.pem');\n\n\nfinal client = Client(\n  'https://yourserver.com',\n  securityContext: securityContext,\n  ...\n);\n```\n\n----------------------------------------\n\nTITLE: Multiple Include Operations in Serverpod\nDESCRIPTION: Demonstrates including multiple related objects in a single query, showing how to include both address and company information with nested includes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Company Model in YAML\nDESCRIPTION: YAML configuration for defining a simple Company model with a name field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Updating pubspec.yaml Files\nDESCRIPTION: This command is used to generate new pubspec.yaml files based on templates. It should be run after making changes to the templates directory to ensure dependency configurations are up to date.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/06-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Deletion Method in Flutter\nDESCRIPTION: Helper method that calls the deleteNote endpoint to remove a note from the server database and refreshes the notes list. Includes error handling for failed connections.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serverpod API Server Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates configuring the Serverpod API server, insights server, web server, database, and redis server using a configuration file. It sets the port, public host, public port, and public scheme for each server, along with database connection details and Redis settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/07-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"apiServer:\\n  port: 8080\\n  publicHost: localhost\\n  publicPort: 8080\\n  publicScheme: http\\n\\ninsightsServer:\\n  port: 8081\\n  publicHost: localhost\\n  publicPort: 8081\\n  publicScheme: http\\n\\nwebServer:\\n  port: 8082\\n  publicHost: localhost\\n  publicPort: 8082\\n  publicScheme: http\\n\\ndatabase:\\n  host: localhost\\n  port: 8090\\n  name: database_name\\n  user: postgres\\n\\nredis:\\n  enabled: false\\n  host: localhost\\n  port: 8091\\n\\nmaxRequestSize: 524288\\n\\nsessionLogs:\\n  persistentEnabled: true\\n  consoleEnabled: true\"\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Server Dependency\nDESCRIPTION: Add the serverpod_auth_server dependency to the server project's pubspec.yaml file using the dart pub command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub add serverpod_auth_server\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget in Serverpod\nDESCRIPTION: Demonstrates creation of a custom Widget class that uses Mustache templating. Shows how to pass values to the template through the widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/11-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Dependencies to Flutter App\nDESCRIPTION: This YAML snippet shows how to add dependencies for Google and Apple sign-in to a Flutter app's pubspec.yaml file. It includes the path to the client and specifies versions for the auth modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  example_client:\n    path: ../example_client\n  serverpod_auth_google_flutter: ^0.9.5\n  serverpod_auth_apple_flutter: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Authorization Scopes in Dart\nDESCRIPTION: Example of creating custom authorization scopes by extending the Scope class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions and Stack Traces in Serverpod (Dart)\nDESCRIPTION: This code shows how to log exceptions and stack traces, as well as set the logging level when logging messages in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/09-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with In Set Filter in Dart\nDESCRIPTION: Demonstrates how to use the inSet filter to fetch users with names matching a set of values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.inSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Setting up SessionManager in Dart\nDESCRIPTION: This Dart code initializes the Serverpod client and sets up a SessionManager. It configures the client to connect to a local server and initializes the session manager for tracking user authentication state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Stream Session\nDESCRIPTION: Example showing how to associate a user object with a streaming session when a stream is opened.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out the Currently Authenticated User in Serverpod\nDESCRIPTION: This snippet signs out the currently authenticated user using the `UserAuthentication.signOutUser` method, without providing a specific `userId`. The method automatically identifies and signs out the user associated with the current session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Sign out the currently authenticated user\nawait UserAuthentication.signOutUser(\n  session,  // No userId provided, signs out the current user\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Receiving Stream Messages in Serverpod Client\nDESCRIPTION: Shows how to listen to and handle incoming stream messages from a specific endpoint in a Serverpod client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Database Expressions in Dart\nDESCRIPTION: Construct type-safe database query expressions with various comparison and logical operators\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Auth Code\nDESCRIPTION: Generates the client code and endpoint methods for the auth module using the serverpod generate command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Data from Storage\nDESCRIPTION: Method to directly retrieve file data from the storage system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Names in Set in Dart\nDESCRIPTION: This code retrieves users whose names are either 'Alice' or 'Bob' using the inSet method. It highlights the usage of sets for multi-value matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.inSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum in Serverpod YAML\nDESCRIPTION: This snippet shows how to create a custom enum with serialization support, using the 'enum' keyword and specifying the enum values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Creating Logout Endpoint in Serverpod\nDESCRIPTION: This code demonstrates how to create a logout endpoint in Serverpod. It extends the Endpoint class and uses the UserAuthentication.signOutUser method to sign out the current user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass AuthenticatedEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> logout(Session session) async {\n    await UserAuthentication.signOutUser(session);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-One Self-Relation in Serverpod YAML Model\nDESCRIPTION: A YAML model definition for a Post class with a self-referential one-to-one relationship, where each post can link to the next and previous post in a chain. The model uses named relations and nullable fields to handle the relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Post\ntable: post\nfields:\n  content: String\n  previous: Post?, relation(name=next_previous_post)\n  nextId: int?\n  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)\nindexes:\n  next_unique_idx:\n    fields: nextId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Settings\nDESCRIPTION: Customize authentication settings by configuring the AuthConfig in your server's main file. This example sets a minimum password length of 12 characters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;  \n  \nvoid run(List<String> args) async {\n\n  auth.AuthConfig.set(auth.AuthConfig(  \n    minPasswordLength: 12,\n  ));  \n    \n  // Start the Serverpod server.  \n  await pod.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Database INT to BIGINT in PostgreSQL\nDESCRIPTION: SQL commands to modify table and sequence types from INT to BIGINT. Suitable for small tables where table locking during migration is acceptable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nALTER SEQUENCE \"my_table_id_seq\" AS bigint;\nALTER TABLE \"my_table\" ALTER \"id\" TYPE bigint;\nALTER TABLE \"my_table\" ALTER \"myNumber\" TYPE bigint;\n```\n\n----------------------------------------\n\nTITLE: Querying Companies with Limit in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates how to use the 'limit' parameter to fetch a specified number of companies from the database. It retrieves the first 10 companies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Count Filter in Dart\nDESCRIPTION: Shows how to filter users based on the count of related one-to-many objects (orders).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count() > 3\n);\n```\n\n----------------------------------------\n\nTITLE: Calling Server Method from Flutter - Dart\nDESCRIPTION: This snippet shows how to create a Company instance and call the isLegit method from the client, handling asynchronous operations in the Flutter application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/02-get-started-with-mini.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = Company(\n  name: 'Serverpod',\n  foundedDate: DateTime(2021, 9, 27),\n  employees: [\n    'Alex',\n    'Isak',\n    'Viktor',\n  ],\n);\n\nvar result = await client.company.isLegit(company);\n```\n\n----------------------------------------\n\nTITLE: Uploading File from Client - Serverpod Dart\nDESCRIPTION: This code snippet demonstrates how to upload a file from the client-side. It first requests an upload description from the server, then uploads the file using a `FileUploader` with a stream. Finally, it verifies the upload with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Relationship Definition\nDESCRIPTION: Shows how to define parent-child relationships between tables with automatic cascade deletion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Employee\ntable: employee\nfields:\n  companyId: int, parent=company\n  name: String\n  birthday: DateTime\n```\n\n----------------------------------------\n\nTITLE: Setting Up Message Forwarding in Serverpod Streams\nDESCRIPTION: Demonstrates how to subscribe to a specific message channel when a stream is opened. This example forwards any message sent to a user's channel to that user's streaming session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum in YAML\nDESCRIPTION: This YAML snippet demonstrates creating an 'Animal' enum with values 'dog', 'cat', and 'bird'. By default, serialization of the enum is based on its index, but it can be configured to use the name instead.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: User Login Endpoint with Token Generation\nDESCRIPTION: Implements a login method that authenticates a user, creates an auth token, and returns it to the client\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass UserEndpoint extends Endpoint {\n  Future<String?> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    var identifier = authenticateUser(session, username, password);\n    if (identifier == null) return null;\n\n    var authToken = await session.auth.signInUser(\n      identifier,\n      'username',\n      scopes: {},\n    );\n\n    return '${authToken.id}:${authToken.key}';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod CLI Installation\nDESCRIPTION: Command to verify that Serverpod CLI is correctly installed. Running this command without arguments displays the help information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Client Stream Message Listener\nDESCRIPTION: Demonstrates how to listen for incoming messages from the server endpoint stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod Auth Module - Bash\nDESCRIPTION: Installs the serverpod_auth_server dependency for Dart projects using the Dart package manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub add serverpod_auth_server\n```\n\n----------------------------------------\n\nTITLE: Adding State Variables for Notes and Error Handling\nDESCRIPTION: Declaration of state variables to store the fetched notes and potential connection exceptions in the Flutter app's state class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\n...\n\nclass MyHomePageState extends State<MyHomePage> {\n\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Stream with User Object in Dart\nDESCRIPTION: Initializes a streaming session by associating a user object for managing state. Utilizes the `setUserObject` for state association and maintains it throughout the session. No external dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing Savepoints in Serverpod Transactions\nDESCRIPTION: This code snippet shows how to release a savepoint using the `release` method on the savepoint object. Releasing a savepoint preserves changes made after the savepoint and invalidates any subsequent savepoints. If a released savepoint, or any savepoint created after it, is used in a rollback, an exception will be thrown.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nawait session.db.transaction((transaction) async {\n  // Create two savepoints\n  var savepoint = await transaction.createSavepoint();\n  var secondSavepoint = await transaction.createSavepoint();\n\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await savepoint.release();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Requiring Authentication for Serverpod Endpoints (Dart)\nDESCRIPTION: Shows how to restrict access to an endpoint by requiring user authentication through overriding the requireLogin property.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Class fromJson() Factory in Dart\nDESCRIPTION: This snippet showcases the `fromJson()` factory constructor in Dart, crucial for deserializing JSON data back into an object. It takes a JSON map as input and constructs an instance of the class. The factory is used during deserialization of data from the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n    factory ClassName.fromJson(\n    Map<String, dynamic> json,\n    ) {\n    return ClassName(\n        name: json['name'] as String,\n    );\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Related Data in Serverpod Query\nDESCRIPTION: Demonstrates how to include related data in a basic query using the include method. This example shows retrieving an employee with their related address object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Case-Insensitive Not Like Filter in Dart\nDESCRIPTION: Shows how to use the notIlike filter to fetch users with names not starting with a specific letter, ignoring case.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notIlike('b%')\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Code for Note Class and Database\nDESCRIPTION: Bash commands to generate Dart code from YAML definitions and create database migration scripts. This process facilitates server-client interaction and database integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Page Number in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates how to implement pagination using page numbers. It calculates the offset based on the page number and the number of items per page, and includes ordering for consistency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint page = 3;\nint companiesPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: companiesPerPage,\n  offset: (page - 1) * companiesPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS RDS Database URL\nDESCRIPTION: Command to fetch the database endpoint address from AWS RDS instance using AWS CLI and jq for JSON parsing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws rds describe-db-instances --db-instance-identifier ${YOUR_DB_INSTANCE_ID} | jq \".DBInstances.[0].Endpoint.Address\" -r\n```\n\n----------------------------------------\n\nTITLE: Creating Serverpod Auth Database Migration\nDESCRIPTION: Creates a new migration that includes the auth module tables using the serverpod create-migration command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Simplified MyHomePageState Widget\nDESCRIPTION: Minimal implementation of the home page state with basic scaffold and app bar\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Subsequent Records with Cursor\nDESCRIPTION: This snippet illustrates how to fetch subsequent records using a cursor, typically the last record's ID from the previous page, ensuring consistent pagination. It requires Serverpod, an active session, and access to a 'Company' model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint cursor = lastCompanyIdFromPreviousPage; // This is typically sent by the client\n\nvar companies = await Company.db.find(  \n  session,  \n  where: Company.t.id > cursor,  \n  orderBy: (t) => t.id,  \n  limit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing EmailAuthController for Custom UI\nDESCRIPTION: Shows how to initialize the EmailAuthController for creating a custom email authentication UI in Flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Class with ProtocolSerialization in Dart for Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to implement a custom class that uses ProtocolSerialization interface. It includes both toJsonForProtocol() and toJson() methods to control data exposure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements ProtocolSerialization {\n  final String? value;\n  final String? serverSideValue;\n\n  .......\n\n  // Serializes fields specifically for protocol communication\n  Map<String, dynamic> toJsonForProtocol() {\n    return {\n      \"value\":value,\n    };\n  }\n\n  // Serializes all fields, including those intended only for server-side use\n  Map<String, dynamic> toJson() {\n    return {\n      \"value\": value,\n      \"serverSideValue\": serverSideValue,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes with Serverpod - Dart\nDESCRIPTION: This snippet shows how to update a user's scopes using the Users class's updateUserScopes method. It requires the serverpod_auth_server package and replaces any previously saved scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Creating a Full Serverpod Project\nDESCRIPTION: Command to create a new full Serverpod project using the Serverpod CLI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Shows how to call the endpoint method from the client side after code generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Sorting by Related Model Fields in Serverpod\nDESCRIPTION: Shows how to sort companies based on a field from a related model, specifically sorting companies by their CEO's name using a chained field reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.ceo.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing EmailAuthController for Custom UI\nDESCRIPTION: This Dart snippet shows how to initialize the EmailAuthController for creating a custom email authentication UI in Flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n```\n\n----------------------------------------\n\nTITLE: Defining Database Indexes in YAML\nDESCRIPTION: Create database indexes for performance optimization on specific table columns\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Forcing Migration Creation in Serverpod\nDESCRIPTION: Command to force the creation of a migration, overriding safeguards against data loss and no-change scenarios.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Defining Referential Actions Syntax in Serverpod\nDESCRIPTION: Shows the basic syntax for applying referential actions to relations in Serverpod. This defines how related records should be handled when the parent record is updated or deleted.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelation(onUpdate=<ACTION>, onDelete=<ACTION>)\n```\n\n----------------------------------------\n\nTITLE: Defining a Complex Type Field in YAML Model\nDESCRIPTION: This snippet illustrates how to define a field with a complex type (Address) in the Company model. Complex types are stored as JSON objects in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address # Stored as a json column\n```\n\n----------------------------------------\n\nTITLE: Bulk Detaching Employees from a Company\nDESCRIPTION: This snippet demonstrates how to remove associations for multiple employees simultaneously using the `detach` method. It retrieves the employee objects and then removes their links to the company in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detach.employees(session, [employee!]);\n\n```\n\n----------------------------------------\n\nTITLE: Defining Database Mappings in YAML for Serverpod\nDESCRIPTION: This snippet demonstrates how to define a database mapping for a Company class in a YAML file. It includes fields for name, founding date, and a list of employees.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional One-to-Many Relationship with Foreign Key in Serverpod (YAML)\nDESCRIPTION: This code defines a bidirectional one-to-many relationship using a foreign key field. The `company.yaml` file includes an `employees` field of type `List<Employee>`, while the `employee.yaml` file includes a `companyId` field of type `int`. The `name` parameter links both sides, and `parent=company` specifies which table is the parent.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation(name=company_employees, parent=company)\n```\n\n----------------------------------------\n\nTITLE: Bulk Detaching Rows in Serverpod\nDESCRIPTION: Shows how to detach multiple employees from a company with Serverpod's atomic bulk 'detach' method. Requires session and list of employee IDs, removing associations in one operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detach.employees(session, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Dart Extension Method Example in Serverpod\nDESCRIPTION: This Dart code demonstrates how to add a custom method (`isCustomMethod`) to a Serverpod-generated class (`MyClass`) using Dart's extension feature. This allows you to extend the functionality of generated classes without modifying the generated code directly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"extension MyExtension on MyClass {\n  bool isCustomMethod() {\n    return true;\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into the Database in Serverpod\nDESCRIPTION: Dart code for inserting a new row into a database table in Serverpod. This example creates a new Company object and inserts it into the database using the db.insertRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nmyCompany = await Company.db.insertRow(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Queries in Dart\nDESCRIPTION: Shows how to execute raw SQL queries directly on the database using Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Initial Request for Cursor-based Pagination in Serverpod (Dart)\nDESCRIPTION: This code shows how to make the initial request for cursor-based pagination. It retrieves the first set of records without using a cursor, which is suitable for the first page of results.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint recordsPerPage = 10;\n\nvar companies = await Company.db.find(\nsession,\norderBy: (t) => t.id,\nlimit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Sign-In Button\nDESCRIPTION: Example of implementing a Firebase sign-in button with callback handlers for success and failure cases.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithFirebaseButton(\n  caller: client.modules.auth,\n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n  onFailure: () => print('Failed to sign in with Firebase.'),\n  onSignedIn: () => print('Signed in with Firebase.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Flushing Event Queue in Dart\nDESCRIPTION: This code snippet demonstrates how to use the `flushEventQueue` function in Dart to wait for asynchronous events to complete during testing. It's particularly useful when dealing with generator functions or asynchronous operations where you need to ensure that a certain point in the execution has been reached before proceeding.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Message and Posting to Channel\nDESCRIPTION: This snippet illustrates how to handle incoming stream messages from a client. It checks if the message is of a specific type (MyChatMessage in this case) and, if so, posts the message to a channel associated with the message's recipient. This allows the server to forward messages between different clients via specific channels.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/14-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"@override\\nFuture<void> handleStreamMessage(\\n  StreamingSession session,\\n  SerializableModel message,\\n) async {\\n  if (message is MyChatMessage) {\\n    session.messages.postMessage(\\n      'user_${message.recipientId}',\\n      message,\\n    );\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Client Endpoint Call\nDESCRIPTION: Example of calling a server endpoint from the client side\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Force Creating Database Migration\nDESCRIPTION: Command to force create a migration even when there are no changes or potential data loss risks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server with Custom Mode and ID\nDESCRIPTION: This command demonstrates how to start a Serverpod server in production mode with a specific server ID. It uses command-line arguments to set the mode and server ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/04-deployments/02-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Creating a new Serverpod project\nDESCRIPTION: This command creates a new Serverpod project named 'notes' using the Serverpod CLI. This initializes the basic project structure and files required for a Serverpod application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container for Test Server - Bash\nDESCRIPTION: This snippet provides commands to start the Docker container for the test server, including navigating to the directory and running docker-compose.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/10-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server/docker-local\n$ docker-compose up --build --detach\n$ ./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Custom Login Endpoint in Serverpod\nDESCRIPTION: This code defines a custom login endpoint that authenticates a user, finds or creates a user record, generates an auth token, and returns an AuthenticationResponse. It demonstrates the complete flow of custom authentication in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyAuthenticationEndpoint extends Endpoint {\n  Future<AuthenticationResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    // Authenticates a user with email and password.\n    if (!authenticateUser(session, username, password)) {\n      return AuthenticationResponse(success: false);\n    }\n\n    // Finds or creates a user in the database using the User methods.\n    var userInfo = findOrCreateUser(session, username);\n\n    // Creates an authentication key for the user.\n    var authToken = await UserAuthentication.signInUser(\n      session,\n      userInfo.id!,\n      'myAuth',\n      scopes: {},\n    );\n\n    // Returns the authentication response.\n    return AuthenticationResponse(\n      success: true,\n      keyId: authToken.id,\n      key: authToken.key,\n      userInfo: userInfo,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing copyWith() Method for Custom Serialization in Dart\nDESCRIPTION: Demonstrates how to create a copyWith() method that returns a new instance of the object with specified fields replaced. This method is crucial for maintaining immutability in Serverpod's framework.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nClassName copyWith({\n  String? name,\n}) {\n  return ClassName(\n    name: name ?? this.name,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Complex Types as JSON in Serverpod\nDESCRIPTION: Example showing how complex types like other models are stored as JSON columns in the database. The 'address' field of type 'Address' will be serialized and stored as JSON in the 'company' table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address # Stored as a json column\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Client Library\nDESCRIPTION: Command to generate the client library for Serverpod endpoints, which needs to be run from the server directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Client-Side File Upload Process in Dart\nDESCRIPTION: Complete client-side workflow for requesting upload description, uploading file, and verifying upload with the server\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Demonstrates how to call the endpoint method from the client side after code generation. Shows the simplified syntax for making remote procedure calls.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage in Serverpod\nDESCRIPTION: Code to add a Google Cloud Storage configuration to a Serverpod instance. This sets up a storage provider with specified settings like storage ID, region, bucket name, and public access.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n  pod.addCloudStorage(gcp.GoogleCloudStorage(\n    serverpod: pod,\n    storageId: 'public',\n    public: true,\n    region: 'auto',\n    bucket: 'my-bucket-name',\n    publicHost: 'storage.myapp.com',\n  ));\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Persistent Fields in a Serverpod Model\nDESCRIPTION: Example of using the '!persist' keyword to prevent a field from being stored in the database. This creates a model with a 'name' field that will not be persisted as a column in the database table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String, !persist \n```\n\n----------------------------------------\n\nTITLE: Test Dependencies Configuration\nDESCRIPTION: Adds required test dependencies to pubspec.yaml for enabling test tools\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package\n  test: ^1.24.2\n```\n\n----------------------------------------\n\nTITLE: Handling Server Stream Messages in Client\nDESCRIPTION: Demonstrates how to receive and handle streaming messages from the server endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Unsafe Simple Data Modification with Serverpod in Dart\nDESCRIPTION: Executes SQL modification statements without returning any results using the simple query protocol via Serverpod in Dart. Simple protocol heightens risk of SQL injection, suitable only in absence of extended protocol. Inputs are SQL commands string; it returns the number of rows affected.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeSimpleExecute(\n  r'DELETE FROM mytable WHERE id = 1; DELETE FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Cancelling Future Calls with Serverpod\nDESCRIPTION: Cancels all future calls associated with a specific identifier. This snippet utilizes cancelFutureCall for managing scheduled tasks that should not be executed. It requires defining an identifier when initially scheduling the future call.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/13-scheduling.md#2025-04-20_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nawait session.serverpod.cancelFutureCall('an-identifying-string');\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Random and Password Hash Generation\nDESCRIPTION: Customizing random number generation and password hash strategies\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: false,\n  passwordHashValidator: (password, email, hash, {onError, onValidationFailure}) {\n    // Custom hash validator.\n  },\n  passwordHashGenerator: (password) {\n    // Custom hash generator.\n  },\n));\n```\n\n----------------------------------------\n\nTITLE: Table Reference Relation in YAML\nDESCRIPTION: Shows how to create a direct table reference relation using the table name to access just the ID field. This approach provides a more lightweight alternative when full model access isn't needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfoId: int, relation(parent=serverpod_user_info)\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Handling Revoked Authentication\nDESCRIPTION: Shows how to notify the server when authentication is revoked for a user, including specific scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = 1;\nvar revokedScopes = ['write'];\nvar message = RevokedAuthenticationScope(\n  scopes: revokedScopes,\n);\n\nawait session.messages.authenticationRevoked(\n  userId,\n  message,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Random for Password Hashing\nDESCRIPTION: Setting the allowUnsecureRandom property in AuthConfig to ensure cryptographically secure random numbers are used for password salt generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: false,\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Course Model with Many-to-Many Relationship\nDESCRIPTION: YAML configuration for the Course model that establishes a many-to-many relationship through enrollments. Includes a list of Enrollment relations with a specific relation name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Course\ntable: course\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=course_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Creating Image Update Stream in Serverpod\nDESCRIPTION: Implements a streaming method that sends initial full image data and then continuously streams individual pixel updates to connected clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nStream imageUpdates(Session session) async* {\n  var updateStream =\n      session.messages.createStream<ImageUpdate>(_channelPixelAdded);\n\n  yield ImageData(\n    pixels: _pixelData.buffer.asByteData(),\n    width: _imageWidth,\n    height: _imageHeight,\n  );\n\n  await for (var imageUpdate in updateStream) {\n    yield imageUpdate;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Endpoint Authentication States in Serverpod\nDESCRIPTION: Demonstrates how to test an endpoint with both authenticated and unauthenticated sessions. It shows configuring session builders with different authentication states and testing the expected behaviors.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given AuthenticatedExample endpoint', (sessionBuilder, endpoints) {\n  // Corresponds to an actual user id\n  const int userId = 1234;\n\n  group('when authenticated', () {\n    var authenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication:\n          AuthenticationOverride.authenticationInfo(userId, {Scope('user')}),\n    );\n\n    test('then calling `hello` should return greeting', () async {\n      final greeting = await endpoints.authenticatedExample\n          .hello(authenticatedSessionBuilder, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n\n  group('when unauthenticated', () {\n    var unauthenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.unauthenticated(),\n    );\n\n    test(\n        'then calling `hello` should throw `ServerpodUnauthenticatedException`',\n        () async {\n      final future = endpoints.authenticatedExample\n          .hello(unauthenticatedSessionBuilder, 'Michael');\n      await expectLater(\n          future, throwsA(isA<ServerpodUnauthenticatedException>()));\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Storing Objects as JSON Structures in YAML\nDESCRIPTION: This YAML snippet illustrates how objects can be stored as JSON entries in the database. A list of employees is stored as a JSON structure for each company in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee> # Stored as JSON structure\"\n```\n\n----------------------------------------\n\nTITLE: Creating Account and Validating in Custom UI\nDESCRIPTION: These Dart snippets demonstrate how to create an account and validate it using EmailAuthController in a custom UI implementation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.createAccountRequest(userName, email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.validateAccount(email, verificationCode);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serverpod App Dependencies\nDESCRIPTION: Lists the necessary dependencies in a Flutter app's pubspec.yaml file to support different authentication methods and integrate with the serverpod_auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Registering Future Call in Serverpod\nDESCRIPTION: Registers a future call with the Serverpod instance, which is necessary for executing the scheduled task. This is done in the main run method by calling registerFutureCall. It requires a unique string name for identification.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/13-scheduling.md#2025-04-20_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nvoid run(List<String> args) async {\n  final pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n  );\n\n  ...\n\n  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');\n\n  ...\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages to Server - Dart\nDESCRIPTION: Demonstrates how to send messages from the client to a server endpoint through the established WebSocket connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In Button in Flutter\nDESCRIPTION: Implementation of the SignInWithAppleButton widget that provides a native-looking Apple sign-in button and handles the authentication flow. Requires the Serverpod auth module client instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Records in Dart\nDESCRIPTION: Shows different methods for deleting database records, including single row and conditional deletion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Enum Model\nDESCRIPTION: YAML definition for a basic enum using index-based serialization\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Sorting Related Lists in Serverpod\nDESCRIPTION: Demonstrates sorting included lists using orderBy clause.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      orderBy: (t) => t.name,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Between Operation on Columns in Serverpod Dart\nDESCRIPTION: The snippet demonstrates using the between method to check if a column value falls within an inclusive range. It assumes a model setup with an integer age field. The method takes two integers as parameters and returns rows with age between the specified values. The notBetween method is also shown, performing the inverse operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.between(18, 65)\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.notBetween(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Configuration\nDESCRIPTION: Command to initialize Terraform configuration and download required Serverpod modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Example File Path (Dart)\nDESCRIPTION: This snippet gives an example for file paths that are compatible with S3, using standard characters and numbers without a leading slash. It's particularly important for S3 compatibility.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n'profile/$userId/images/avatar.png'\n```\n\n----------------------------------------\n\nTITLE: Main Application Implementation\nDESCRIPTION: Complete implementation of the main Flutter application including note management and UI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n                    _notes!.add(note);\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod with Dart Configuration Object\nDESCRIPTION: Example of programmatically configuring Serverpod using the ServerpodConfig and ServerConfig classes, specifying server settings for API, insights, and web servers\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/07-configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nServerpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  config: ServerpodConfig(\n    apiServer: ServerConfig(\n      port: 8080,\n      publicHost: 'localhost',\n      publicPort: 8080,\n      publicScheme: 'http',\n    ),\n    insightsServer: ServerConfig(\n      port: 8081,\n      publicHost: 'localhost',\n      publicPort: 8081,\n      publicScheme: 'http',\n    ),\n    webServer: ServerConfig(\n      port: 8082,\n      publicHost: 'localhost',\n      publicPort: 8082,\n      publicScheme: 'http',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a one-to-one self-relation in Serverpod with YAML\nDESCRIPTION: This YAML configuration defines a one-to-one self-referential relationship for blog posts, enabling traversal between posts. The `Post` class has fields for `content`, `previous` and `next` posts, linked by the `nextId` field, which stores the ID of the next post. A unique index `next_unique_idx` is created to ensure uniqueness of the `nextId`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nclass: Post\ntable: post\nfields:\n  content: String\n  previous: Post?, relation(name=next_previous_post)\n  nextId: int?\n  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)\nindexes:\n  next_unique_idx:\n    fields: nextId\n    unique: true\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Client in Dart\nDESCRIPTION: This snippet initializes a Client object that connects to a Serverpod instance. It sets a monitor for connectivity and provides guidelines for modifying server addresses for deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Sets up a singleton client object that can be used to talk to the server from\n// anywhere in our app. The client is generated from your server code.\n// The client is set up to connect to a Serverpod running on a local server on\n// the default port. You will need to modify this to connect to staging or\n// production servers.\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Detaching Single Row in Serverpod Relations\nDESCRIPTION: Demonstrates how to remove the association between an employee and a company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detachRow.employees(session, employee!);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Every Filter in Dart\nDESCRIPTION: Shows how to filter users where all related one-to-many objects (orders) match a specific condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.every((o) => o.itemType.equals('book'))\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Row in Database Table in Dart with Serverpod\nDESCRIPTION: This snippet shows how to update an existing row in a database table using Serverpod's Dart API. It retrieves a company, modifies its name, and updates the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Registering Google Sign-In Route in Server\nDESCRIPTION: This Dart snippet shows how to register the Google Sign-In route in the server.dart file. This route is essential for handling the sign-in process on the web.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Serverpod\nDESCRIPTION: Retrieves detailed user information using the Users class static method. This method requires an active session and valid user ID, returning a UserInfo object containing the user's data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Column in Single Row\nDESCRIPTION: Demonstrates how to update specific columns while leaving others unchanged in a single record.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); \ncompany.name = 'New name';\ncompany.address = 'Baker street';\nvar updatedCompany = await Company.db.updateRow(session, company, columns: (t) => [t.name]);\n```\n\n----------------------------------------\n\nTITLE: Client Initialization with IP Address (Dart)\nDESCRIPTION: This code snippet shows how to initialize the Serverpod client with a specific IP address and port. This is necessary when running the iOS simulator, which has its own localhost and cannot directly access the server running on the machine's localhost.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"var client = Client('http://192.168.1.117:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\"\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in Maintenance Mode\nDESCRIPTION: Command to apply migrations in maintenance mode with exit code indication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Note Object in YAML\nDESCRIPTION: YAML configuration for defining a serializable Note object with a text field, which will be used to generate Dart code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Count and Sub-filter in Dart\nDESCRIPTION: Demonstrates how to filter users based on the count of related one-to-many objects (orders) with an additional sub-filter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count((o) => o.itemType.equals('book')) > 3\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Employee Count in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates how to sort companies based on the count of a list relation. It orders companies by the number of employees they have.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(),\n);\n```\n\n----------------------------------------\n\nTITLE: User Authentication Methods in Serverpod 2.0\nDESCRIPTION: Demonstrates the new static methods for user authentication using the UserAuthentication class from the auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nUserAuthentication.signInUser(session, userId, 'provider');\n\nUserAuthentication.signOutUser(session);\n```\n\n----------------------------------------\n\nTITLE: Comparison Operators in Serverpod Filters\nDESCRIPTION: Examples of using comparison operators (>, >=, <, <=) for numeric, duration, and datetime fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age > 25\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age >= 25\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age < 25\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age <= 25\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row into Database - Dart\nDESCRIPTION: This code snippet shows how to insert a new row into the database for the Company class using the insert method provided by Serverpod's ORM.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nawait Company.insert(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: Revoking Authentication Key for Current Session\nDESCRIPTION: Demonstrates retrieving and revoking the authentication key for the current authenticated session\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar authId = (await session.authenticated)?.authId;\n\nif (authId != null) {\n  await UserAuthentication.revokeAuthKey(\n    session,\n    authKeyId: authId,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Dart with Serverpod\nDESCRIPTION: This code shows how to check if a user is signed in using the Session object in a Serverpod endpoint method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a database table with YAML\nDESCRIPTION: This YAML configures the 'Note' class to be bound to a database table named 'note'.  The `table` keyword specifies the database table name.  After running `serverpod generate`, code for database interactions will be created.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\ntable: note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Ensuring Secure Random Number Generation\nDESCRIPTION: Configures the Serverpod authentication to require a secure random number generator for passwords by setting `allowUnsecureRandom` to `false`. Throws an exception if no secure random generator is available. Requires `serverpod_auth_server` module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: false,\n));\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers for Serverpod\nDESCRIPTION: This sequence of commands runs Docker to start the necessary services (Postgres and Redis) for Serverpod. Make sure this command is run inside the 'mypod/mypod_server' directory after creating the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build --detach\n```\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Functionality\nDESCRIPTION: Two-step process for password reset with email verification. First initiate the reset which sends a verification email, then reset the password using the code and new password.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.initiatePasswordReset(email);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query with Named Parameters in Dart\nDESCRIPTION: Demonstrates how to use the unsafeQuery method to execute a raw SQL query with named parameters. This method uses the extended query protocol for parameter binding to prevent SQL injection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeQuery(\n  r'SELECT * FROM mytable WHERE id = @id', \n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Module Dependencies to Server\nDESCRIPTION: Add the serverpod_auth_server dependency to your server project's pubspec.yaml file. Ensure you use the same version number as your Serverpod installation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Status Listener\nDESCRIPTION: Example of monitoring WebSocket connection status through a listener.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.addConnectionStatusListener(_chatConnectionStatusChanged);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Case-Insensitive Like Filter in Dart\nDESCRIPTION: Demonstrates how to use the ilike filter to fetch users with names starting with a specific letter, ignoring case.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.ilike('a%')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator Settings for Test Tools in YAML\nDESCRIPTION: Adds server test tools path configuration to generator.yaml to enable test tools file generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Dependencies for Serverpod Modules\nDESCRIPTION: This YAML snippet lists the dependencies required for integrating Serverpod authentication modules for various platforms within a Flutter application. Each module should specify its corresponding version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/08-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Accessing Current User Info - Dart\nDESCRIPTION: Retrieves the current user information if signed in, or returns null if not signed in.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nsessionManager.signedInUser;\n```\n\n----------------------------------------\n\nTITLE: Storing a Complex Type as JSON in Serverpod\nDESCRIPTION: This snippet illustrates how complex types like models are stored as JSON objects in the database. This results in each row having its own copy of the nested object, requiring individual updates. An alternative is to use relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nclass: Company\ntable: company\nfields:\n  address: Address # Stored as a json column\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Repair Migration for Production in Serverpod CLI\nDESCRIPTION: Command to create a repair migration targeting the production database, using the '--mode' option to specify the database source.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --mode production\n```\n\n----------------------------------------\n\nTITLE: Fetching Notes from Serverpod Endpoint\nDESCRIPTION: Asynchronous method to load notes from the server, with error handling and state management\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Floating Action Button for Note Creation in Flutter\nDESCRIPTION: This snippet adds a floating action button to the Scaffold in Flutter. When pressed, it shows the note dialog and handles saving the new note.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Data in Serverpod (Dart)\nDESCRIPTION: This snippet illustrates how to retrieve the binary data of a file directly from the server using Serverpod's storage API.  The data is returned as a ByteData object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL of a File - Dart\nDESCRIPTION: This code retrieves the public URL of an uploaded file using the getPublicUrl method. The URL is constructed based on the provided storage ID and file path, allowing public access to the stored file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating to New Database API in Serverpod 1.2\nDESCRIPTION: Examples showing how to migrate from deprecated database methods to the new API using the static 'db' field on generated models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// The new find method is a drop-in replacement.\nExample.find(...); // old\nExample.db.find(...); // new\n\n// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.\nExample.findSingleRow(...);\nExample.db.findFirstRow(...);\n\n// The new findById method is a drop-in replacement.\nExample.findById(...); // old\nExample.db.findById(...); // new\n\n// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.\nExample.delete(...);\nExample.db.deleteWhere(...);\n\n// The new findById method is a drop-in replacement but returns the id of the row deleted.\nExample.deleteRow(...); // old\nExample.db.deleteRow(...); // new\n\n// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.\nExample.update(...);\nExample.db.updateRow(...);\n\n// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.\nExample.insert(...);\nExample.db.insertRow(...);\n\n// The new count method is a drop-in replacement.\nExample.count(...);\nExample.db.count(...);\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages to Server\nDESCRIPTION: Demonstrates how to send stream messages from the client to a server endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Basic Limit Pagination in Serverpod\nDESCRIPTION: Demonstrates how to implement basic limit-based pagination by retrieving a specified number of records from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter App Setup with Serverpod Client\nDESCRIPTION: Complete implementation of the main.dart file including Serverpod client initialization and basic app structure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Serverpod Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Serverpod Example'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Sign-In Button with Additional Scopes in Dart\nDESCRIPTION: Shows how to set up the SignInWithGoogleButton widget with additional API scopes for Youtube access. This client-side configuration enables requesting extended permissions from users during authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: Converting JWT Scopes to Serverpod Scope Objects\nDESCRIPTION: Demonstrates how to convert string-based scopes from a JWT token into Serverpod Scope objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nList<String> scopes = extractScopes(token);\nSet<Scope> userScopes = scopes.map((scope) => Scope(scope)).toSet();\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Migration with Serverpod\nDESCRIPTION: Run these Bash commands in your project directory to create a new database migration using Serverpod. Ensure you are in the correct server directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Freezed Custom Class Implementation\nDESCRIPTION: Implementation of a custom class using the Freezed package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Any Filter in Dart\nDESCRIPTION: Shows how to filter users that have any related one-to-many objects (orders).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.any()\n);\n```\n\n----------------------------------------\n\nTITLE: Forced Repair Migration Command\nDESCRIPTION: Command to force create a repair migration even when no changes are detected or when there's risk of data loss.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --force\n```\n\n----------------------------------------\n\nTITLE: Adding PixelImageController and InitState\nDESCRIPTION: Implementation of state management and initialization for the pixel editor\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // The pixel image controller contains our image data and handles updates.\n  // If it is null, the image has not yet been loaded from the server.\n  PixelImageController? _imageController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Connect to the server and start listening to updates.\n    _listenToUpdates();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Database Connections in Dart Tests\nDESCRIPTION: This snippet demonstrates how to optimize the number of database connections in tests by postponing the creation of the Serverpod instance. It shows how to use setUp or setUpAll to build the session, reducing the risk of exceeding the maximum database connection limit.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given example test', (sessionBuilder, endpoints) {\n  // Instead of this\n  var session = sessionBuilder.build();\n\n\n  // Do this to postpone connecting to the database until the test group is running\n  late Session session;\n  setUpAll(() {\n    session = sessionBuilder.build();\n  });\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Model in YAML for Serverpod\nDESCRIPTION: This YAML snippet illustrates how to define a model for a company, including fields and types, for use in a Serverpod application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/02-get-started-with-mini.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<String>\n```\n\n----------------------------------------\n\nTITLE: Database Rollback Enum Definition - Dart\nDESCRIPTION: Enum defining options for database rollback behavior during test lifecycle.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n/// Options for when to rollback the database during the test lifecycle.\nenum RollbackDatabase {\n  /// After each test. This is the default.\n  afterEach,\n\n  /// After all tests.\n  afterAll,\n\n  /// Disable rolling back the database.\n  disabled,\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration for Testing\nDESCRIPTION: Provides a full example of a Docker Compose file including both development and test configurations for PostgreSQL and Redis.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Development services\n  postgres:\n    image: postgres:16.3\n    ports:\n      - '8090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>\n      POSTGRES_PASSWORD: \"<insert database development password>\"\n    volumes:\n      - <projectname>_data:/var/lib/postgresql/data\n  redis:\n    image: redis:6.2.6\n    ports:\n      - '8091:6379'\n    command: redis-server --requirepass \"<insert redis development password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n\n  # Test services\n  postgres_test:\n    image: postgres:16.3\n    ports:\n      - '9090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>_test\n      POSTGRES_PASSWORD: \"<insert database test password>\"\n    volumes:\n      - <projectname>_test_data:/var/lib/postgresql/data\n  redis_test:\n    image: redis:6.2.6\n    ports:\n      - '9091:6379'\n    command: redis-server --requirepass \"<insert redis test password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n\nvolumes:\n  <projectname>_data:\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Call at Specific Time\nDESCRIPTION: Shows how to schedule a future call to be executed at a specific date and time using futureCallAtTime method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/14-scheduling.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallAtTime(\n  'exampleFutureCall',\n  data,\n  DateTime(2025, 1, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Freezed Class in generator.yaml\nDESCRIPTION: This snippet demonstrates how to declare the Freezed custom serializable class in the `config/generator.yaml` file. This is a required step to make Serverpod aware of the custom class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Notes List UI Implementation\nDESCRIPTION: Implementation of the build method to display the list of notes using ListView.builder.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Out All Devices using Serverpod SessionManager in Dart\nDESCRIPTION: Signs out the current user from all authenticated devices using the SessionManager. Returns a boolean indicating success or failure of the operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: List Relation Count Sorting in Serverpod\nDESCRIPTION: Demonstrates sorting based on the count of a list relation (1:n relationship).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(),\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing Serializable Objects Across Modules\nDESCRIPTION: YAML configuration demonstrating how to reference serializable objects from other modules using module prefix and nickname.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/09-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Filtering for No Related Entries in Dart using Serverpod\nDESCRIPTION: This snippet uses the 'none' method to filter users without any related orders, showcasing a direct 1:n relation filter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.none()\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Serverpod\nDESCRIPTION: This code demonstrates how to implement caching for user data in a Serverpod endpoint. It first attempts to retrieve data from the cache using a unique key, and if not found, loads it from the database and stores it in the cache with a 5-minute lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(cacheKey) as UserData?;\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Side File Upload Implementation in Serverpod\nDESCRIPTION: Client-side code for uploading a file. This process involves requesting an upload description from the server, creating a FileUploader, uploading the file, and then verifying the upload with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Including Related Address Object with Employee\nDESCRIPTION: This snippet demonstrates how to include a related address object when querying for an employee using Serverpod's query framework.  It uses the `Employee.include` method to specify the related `Address` object to include in the result. The `Employee.db.findById` method is called with the `include` parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Notes in ListView\nDESCRIPTION: Builds the UI to display fetched notes using ListView.builder with conditional rendering\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Installation\nDESCRIPTION: Command to verify the successful installation of Serverpod by displaying the help menu.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod\n```\n\n----------------------------------------\n\nTITLE: Running Repair Migration in Maintenance Mode\nDESCRIPTION: Command to apply a repair migration in maintenance mode, which exits after completion with a success/failure status code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Savepoints in Dart with Serverpod Transactions\nDESCRIPTION: Illustrates the creation and usage of savepoints within a Serverpod database transaction. The example shows creating a savepoint after inserting a company and before inserting an employee.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  await Company.db.insertRow(session, company, transaction: transaction);\n  // Create savepoint\n  var savepoint = await transaction.createSavepoint();\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Outside a Range in Dart using Serverpod\nDESCRIPTION: This snippet uses 'notBetween' to filter users not aged between 18 and 65 inclusively. Requires a User model with an 'age' column.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.notBetween(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Message Channel in Streaming Session in Dart\nDESCRIPTION: Shows how to subscribe to a message channel when a stream is opened, enabling forwarding of messages to authenticated users.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Unsafe Query with Serverpod in Dart\nDESCRIPTION: Executes a single SQL query using the extended query protocol via Serverpod in Dart, returning a DatabaseResult. Utilizes parameter binding with named parameters to prevent SQL injection. Requires a session object with access to the database. Inputs are SQL query and named parameters map, output is a DatabaseResult object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeQuery(\n  r'SELECT * FROM mytable WHERE id = @id', \n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Database Index Configuration in YAML\nDESCRIPTION: Shows how to define database indexes for performance optimization in YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-Many Relation Definition with YAML (Foreign Key Field)\nDESCRIPTION: Establishes a bidirectional one-to-many relationship by using a foreign key field in the Employee class while referencing the Company class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation(name=company_employees, parent=company)\n```\n\n----------------------------------------\n\nTITLE: Fetching Companies with Limit and Offset\nDESCRIPTION: This snippet illustrates how to use both 'limit' and 'offset' parameters to skip a specified number of records and fetch the desired range of company records. Here, it skips the first 30 companies and retrieves the next 10.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n  offset: 30,\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Public File URL in Serverpod\nDESCRIPTION: Method to retrieve the public URL for a file stored in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Google OAuth Scopes in Flutter\nDESCRIPTION: This snippet demonstrates how to request additional permission scopes when signing in with Google in a Flutter application. It shows how to configure the SignInWithGoogleButton widget to request access to the YouTube API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: Client Configuration with Authentication Key Manager\nDESCRIPTION: Shows how to configure a Serverpod client with an authentication key manager\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Defining Note Model in YAML\nDESCRIPTION: YAML configuration file defining the Note class structure with a text field and database table binding\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\ntable: note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Content - Serverpod Dart\nDESCRIPTION: This code snippet retrieves the content of a file as `ByteData` from the specified storage location. It takes a `storageId` and a `path` as input. The function returns a `ByteData` object representing the file content.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Sorting in Dart using Serverpod\nDESCRIPTION: Illustrates how to sort by multiple columns using orderByList, sorting companies by name (descending) and then by id (ascending).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderByList: (t) => [\n    Order(column: t.name, orderDescending: true), \n    Order(column: t.id),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Running Server Generation Commands\nDESCRIPTION: Terminal commands to update dependencies and generate server code after adding a module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Using SignInWithFirebaseButton\nDESCRIPTION: This Dart code demonstrates how to use the `SignInWithFirebaseButton` widget from the `serverpod_auth_firebase_flutter` package. It configures the button with a Serverpod client caller, a list of Firebase authentication providers, and callbacks for successful and failed sign-in attempts. The `caller` is the Serverpod client used for communication with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithFirebaseButton(\n  caller: client.modules.auth,\n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n  onFailure: () => print('Failed to sign in with Firebase.'),\n  onSignedIn: () => print('Signed in with Firebase.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Equals in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates filtering of users by exact match using the 'equals' operator. Requires the Serverpod framework and a User model with a 'name' column. This example returns users named 'Alice'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.equals('Alice')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Database Mappings with YAML\nDESCRIPTION: This YAML snippet demonstrates how to map a serializable class to a database table in Serverpod. It defines the `Company` class, specifies the `company` table, and lists the fields with their respective types.  When `serverpod generate` is run, this mapping is used to create the database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\"\n```\n\n----------------------------------------\n\nTITLE: Using copyWith Method in Serverpod Generated Dart Classes\nDESCRIPTION: This Dart code example demonstrates the usage of the automatically generated copyWith method for efficient object copying with selective field updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar john = User(name: 'John Doe', age: 25);\nvar jane = john.copyWith(name: 'Jane Doe');\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific Auth Key in Serverpod\nDESCRIPTION: This snippet shows how to revoke a specific authentication key using the UserAuthentication.revokeAuthKey method. It demonstrates revoking a key by its ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait UserAuthentication.revokeAuthKey(\n  session,\n  authKeyId: 'auth-key-id-here',\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Filtering in Serverpod using Dart\nDESCRIPTION: Shows how to find multiple Company rows using filtering criteria with the 'find' method. Returns a List of matching models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: User Logout Implementation in Serverpod\nDESCRIPTION: Shows how to implement a logout endpoint that removes all authentication tokens for a user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass AuthenticatedEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n  Future<void> logout(Session session) async {\n    await UserAuthentication.signOutUser(session);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI\nDESCRIPTION: Install the Serverpod command-line interface globally using Dart pub tool, which enables project creation and management\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Migration Command\nDESCRIPTION: Terminal command to create a new empty migration for updating integer representation in database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Adding Client Dependencies in pubspec.yaml\nDESCRIPTION: Configuration for adding the serverpod_auth_client module dependency to the client's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating Savepoints in Serverpod Transactions\nDESCRIPTION: This code snippet shows how to create a savepoint within a transaction using the `createSavepoint` method. A savepoint is created after inserting a company, allowing for the option to roll back to this point if subsequent operations fail. The returned savepoint object can then be used to rollback the transaction to that point.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nawait session.db.transaction((transaction) async {\n  await Company.db.insertRow(session, company, transaction: transaction);\n  // Create savepoint\n  var savepoint = await transaction.createSavepoint();\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration in YAML\nDESCRIPTION: Provides a full docker-compose.yaml configuration including both development and test services for PostgreSQL and Redis.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Development services\n  postgres:\n    image: postgres:16.3\n    ports:\n      - '8090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>\n      POSTGRES_PASSWORD: \"<insert database development password>\"\n    volumes:\n      - <projectname>_data:/var/lib/postgresql/data\n  redis:\n    image: redis:6.2.6\n    ports:\n      - '8091:6379'\n    command: redis-server --requirepass \"<insert redis development password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n\n  # Test services\n  postgres_test:\n    image: postgres:16.3\n    ports:\n      - '9090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>_test\n      POSTGRES_PASSWORD: \"<insert database test password>\"\n    volumes:\n      - <projectname>_test_data:/var/lib/postgresql/data\n  redis_test:\n    image: redis:6.2.6\n    ports:\n      - '9091:6379'\n    command: redis-server --requirepass \"<insert redis test password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n\nvolumes:\n  <projectname>_data:\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Connecting to Server for Image Updates\nDESCRIPTION: This Dart snippet outlines the initialization of the `PixelImageController` in the `initState` method to manage image data and updates. The `_listenToUpdates` function connects to a server, listening and processing image data updates in real-time.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // The pixel image controller contains our image data and handles updates.\n  // If it is null, the image has not yet been loaded from the server.\n  PixelImageController? _imageController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Connect to the server and start listening to updates.\n    _listenToUpdates();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cancelling Future Calls by Identifier\nDESCRIPTION: Demonstrates how to cancel all future calls registered with a specific identifier\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/14-scheduling.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.cancelFutureCall('an-identifying-string');\n```\n\n----------------------------------------\n\nTITLE: Adding Test Passwords in YAML\nDESCRIPTION: Adds test database and Redis passwords to the passwords.yaml file in the config directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Default Serverpod Configuration\nDESCRIPTION: Default configuration used when no explicit configuration is provided, setting basic API server settings with localhost and default port\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/07-configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nServerpodConfig(\n  apiServer: ServerConfig(\n    port: 8080,\n    publicHost: 'localhost',\n    publicPort: 8080,\n    publicScheme: 'http',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Authentication Key Manager for Serverpod Client\nDESCRIPTION: Implementation of a basic AuthenticationKeyManager interface that stores tokens in memory, used to configure a Serverpod client for authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Serverpod\nDESCRIPTION: Server-side method to verify if a file upload has been completed successfully, particularly important for third-party storage services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to the Serverpod Web Server - Dart\nDESCRIPTION: This snippet demonstrates how to add custom routes to the Serverpod web server. The code shows the use of the 'addRoute' method to associate URL paths with route classes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/18-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address/');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Specifying Serverpod Server Role\nDESCRIPTION: Shows how to launch a Serverpod server with a specific role, such as serverless mode for specialized deployment scenarios\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods with Dart Extensions\nDESCRIPTION: This code snippet shows how to add custom methods to a class in Dart using extension methods. The 'MyExtension' extension adds an 'isCustomMethod' method to the 'MyClass' class, returning a boolean value 'true'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nextension MyExtension on MyClass {\n  bool isCustomMethod() {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Storage in Serverpod\nDESCRIPTION: Code to add an AWS S3 storage configuration to a Serverpod instance. This specifies settings such as storage ID, region, bucket name, and public access options.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth Flutter dependencies\nDESCRIPTION: This snippet shows how to add the Flutter packages related to `serverpod_auth` to your Flutter app's `pubspec.yaml` file. These packages provide Flutter widgets and utilities for integrating with the serverpod_auth module. Replace `1.x.x` with the actual Serverpod version you are using.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Listening to Server Stream Updates - Dart\nDESCRIPTION: Shows how to listen to incoming messages from a server endpoint using asynchronous stream handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube API on Server Side with Authorized Client\nDESCRIPTION: Demonstrates how to use the GoogleAuth.authClientForUser method to obtain an authorized client for making YouTube API calls on behalf of a user. This snippet shows how to retrieve a user's liked videos list once properly authenticated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Database Records in Dart\nDESCRIPTION: Example of inserting a new company record into the database using Serverpod's insert method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Flutter App Structure\nDESCRIPTION: Sets up the main Flutter app structure, including the PixoramaApp widget and Serverpod client initialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// lib/main.dart\n\nimport 'package:pixorama_client/pixorama_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'src/pixorama.dart';\n\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  // Start the app.\n  runApp(const PixoramaApp());\n}\n\nclass PixoramaApp extends StatelessWidget {\n  const PixoramaApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Pixorama',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: const Pixorama(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check Handler in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to create a custom health check handler function in Dart for Serverpod. It returns a list of ServerHealthMetric objects for a given timestamp, allowing for custom metric monitoring.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/13-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Note Dialog Implementation in Flutter\nDESCRIPTION: Dialog widget for creating and editing notes with a text input field and save functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Table for Notes in SQL\nDESCRIPTION: This SQL snippet creates a 'note' table to store notes with an automatic id and a non-null text field. This requires a PostgreSQL database and correct configuration for execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n--\n-- Class Note as table note\n--\n\nCREATE TABLE \"note\" (\n  \"id\" serial,\n  \"text\" text NOT NULL\n);\n\nALTER TABLE ONLY \"note\"\n  ADD CONSTRAINT note_pkey PRIMARY KEY (id);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widgets with Templates in Serverpod\nDESCRIPTION: Demonstrates how to create a custom Widget class that uses Mustache templates. The widget sets template values that will be converted to strings and passed to the template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/18-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Table Definition in Serverpod YAML\nDESCRIPTION: Demonstrates how to map a serializable Company class to a database table with a basic name field. Serverpod automatically adds an id field of type int?.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Building the Pixel Editor Interface\nDESCRIPTION: Implementation of the build method for rendering the pixel editor interface with real-time update capabilities\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: _imageController == null\n          ? const CircularProgressIndicator()\n          : PixelEditor(\n              controller: _imageController!,\n              onSetPixel: (details) {\n                // When a user clicks a pixel we will get a callback from the\n                // PixelImageController, with information about the changed\n                // pixel. When that happens we call the setPixels method on\n                // the server.\n                client.pixorama.setPixel(\n                  pixelIndex: details.tapDetails.index,\n                  colorIndex: details.colorIndex,\n                );\n              },\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Event Queue in Dart Tests\nDESCRIPTION: Basic function signature for flushing the event queue in tests. Used to wait for async events to complete before continuing test execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod passwords using YAML\nDESCRIPTION: Example YAML password file for Serverpod, containing shared and environment-specific secrets for database, Redis, and service authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/07-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  myCustomSharedSecret: 'secret_key'\n\ndevelopment:\n  database: 'development_password'\n  redis: 'development_password'\n  serviceSecret: 'development_service_secret'\n\nproduction:\n  database: 'production_password'\n  redis: 'production_password'\n  serviceSecret: 'production_service_secret'\n```\n\n----------------------------------------\n\nTITLE: Running Different Test Types with Tags in Dart\nDESCRIPTION: Examples showing how to run unit and integration tests separately using tag filters with the Dart test runner. This approach allows developers to selectively run test suites based on their category.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# All tests (unit and integration)\ndart test\n\n# Only integration tests: add --tags (-t) flag\ndart test -t integration\n\n# Only unit tests: add --exclude-tags (-x) flag\ndart test -x integration\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side method that generates an upload description to grant access for the client to upload files. This returns a string that contains the necessary upload credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Message Listener Implementation\nDESCRIPTION: Demonstrates setting up a message listener for forwarding messages to authenticated users through Redis channels.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/11-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Request for Cursor-based Pagination\nDESCRIPTION: This snippet shows how to make an initial request for cursor-based pagination, retrieving the first set of company records without a cursor. It specifies the number of records per page.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint recordsPerPage = 10;\n\nvar companies = await Company.db.find(\n    session,\n    orderBy: (t) => t.id,\n    limit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Flutter App Main Structure with Serverpod Client\nDESCRIPTION: Defines the main application structure, including app configuration, routing, and initial widget setup\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Serverpod Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Serverpod Example'),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod', which will generate three packages: server, client, and Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Class in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a basic serializable class called 'Company' with fields including name, founded date, and a list of employees. No special dependencies are required, and the class supports null safety. The defined class can be used as parameters or return types for endpoint methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart SDK Version in GitHub Actions YAML\nDESCRIPTION: This YAML snippet shows how to specify the Dart SDK version in a GitHub Actions workflow file. It ensures the correct Dart version is used during the deployment process.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup Dart SDK\n  uses: dart-lang/setup-dart@v1.6.5\n  with:\n    sdk: 3.5\n```\n\n----------------------------------------\n\nTITLE: Implementing SignInWithEmailButton in Flutter\nDESCRIPTION: Demonstrates how to use the pre-built SignInWithEmailButton widget in a Flutter application for easy email sign-in functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Generating Upload Description in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to create an upload description on the server using Serverpod's storage API. The upload description grants the client app permission to upload a file to the specified storage location.  It requires the 'path' parameter to define the file path.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Not Between Filter in Dart\nDESCRIPTION: Shows how to use the notBetween filter to fetch users outside a specific age range.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.notBetween(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Flutter App's pubspec.yaml\nDESCRIPTION: This snippet shows the necessary dependencies that need to be added to the `pubspec.yaml` file of a Flutter app to support Serverpod authentication, including `serverpod_flutter`, `auth_example_client`, `serverpod_auth_shared_flutter`, `serverpod_auth_email_flutter`, and `serverpod_auth_google_flutter`.  Note that the version numbers should match the version of Serverpod being used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Modification Query in Dart\nDESCRIPTION: Shows how to use the unsafeExecute method to run a SQL query that modifies data (e.g., INSERT, UPDATE, DELETE) without returning results. It returns the number of affected rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeExecute(\n  r'DELETE FROM mytable WHERE id = @id',\n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Submitting Diagnostic Events from Endpoints\nDESCRIPTION: Example endpoint method showing how to catch exceptions and submit them as diagnostic events for monitoring and handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass DiagnosticEventTestEndpoint extends Endpoint {\n  Future<String> submitExceptionEvent(Session session) async {\n    try {\n      throw Exception('An exception is thrown');\n    } catch (e, stackTrace) {\n      session.serverpod.experimental.submitDiagnosticEvent(\n        ExceptionEvent(e, stackTrace),\n        session: session,\n      );\n    }\n    return 'success';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Index in Serverpod YAML\nDESCRIPTION: Shows how to create an index on multiple fields in a Serverpod YAML file. The index is created on both the 'name' and 'foundedAt' fields of the 'Company' class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n```\n\n----------------------------------------\n\nTITLE: Searching for Records Using Expression in Dart\nDESCRIPTION: The Dart code enables searching for a row matching a condition with `db.findFirstRow`. It uses a typed expression for the `where` parameter to specify criteria. If no row is found, it returns `null`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Tagging a Migration in Serverpod CLI\nDESCRIPTION: Command to create a tagged migration, useful for identifying specific changes. The tag is appended to the migration name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --tag \"v1-0-0\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Notes in ListView\nDESCRIPTION: Build method to dynamically render notes as a scrollable list with conditional rendering\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Default Behavior for Object Relation in YAML\nDESCRIPTION: This snippet illustrates the default behavior when no referential actions are specified for an object relation in Serverpod. It shows that the default for both onUpdate and onDelete is NoAction.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: Model?, relation(onUpdate=NoAction, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Dart\nDESCRIPTION: Shows how to execute raw SQL queries when more advanced database operations are needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Key Manager for Serverpod Client in Dart\nDESCRIPTION: This snippet shows how to implement a custom OAuth key manager for a Serverpod client. It overrides the toHeaderValue method to format the authentication header according to the OAuth bearer token standard.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyOAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n\n  @override\n  Future<String?> toHeaderValue(String? key) async {\n    if (key == null) return null;\n    return 'Bearer ${myBearerTokenObtainer(key)}';\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Catching a Custom Exception in Serverpod Dart Client\nDESCRIPTION: This Dart snippet demonstrates how to catch a custom exception (MyException) in a Serverpod client application. It shows proper exception handling and error messaging.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  client.example.doThingy();\n}\non MyException catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Freezed Custom Class in generator.yaml for Serverpod\nDESCRIPTION: This YAML snippet shows how to declare a Freezed custom class in the config/generator.yaml file for use with Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in with Apple Button in Flutter\nDESCRIPTION: Renders a native Sign in with Apple button using the Serverpod authentication module, which triggers the Apple sign-in UI and handles authentication flow\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Status Listener in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to monitor the state of the WebSocket connection by adding a listener to the client in a Serverpod application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.addConnectionStatusListener(_chatConnectionStatusChanged);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Less Than or Equal Comparison in Dart\nDESCRIPTION: Illustrates how to use the less than or equal operator to fetch users of a certain age or younger.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age <= 25\n);\n```\n\n----------------------------------------\n\nTITLE: Catching Serializable Exceptions in Client Code\nDESCRIPTION: Shows how to catch and handle custom exceptions in the client application, with specific and generic exception handling\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\\n  client.example.doThingy();\\n}\\non (MyException) catch(e) {\\n  print(e.message);\\n}\\ncatch(e) {\\n  print('Something else went wrong.');\\n}\n```\n\n----------------------------------------\n\nTITLE: Add SERVER_CLIENT_ID to GoogleService-Info.plist (iOS)\nDESCRIPTION: This XML snippet demonstrates how to add the SERVER_CLIENT_ID to the GoogleService-Info.plist file in an iOS project. The SERVER_CLIENT_ID is the client ID from the JSON file located in the server's config directory. This step is crucial for the iOS Google Sign-In integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relation with Serverpod Module Table in YAML\nDESCRIPTION: This YAML snippet defines a class 'User' with an optional one-to-one relation to a module's 'UserInfo' class in Serverpod. It includes fields for 'age' and an index for unique 'userInfoId'. There are no specific dependencies but setting this relation requires knowledge of the module's table structures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Code for Sealed Class Hierarchy\nDESCRIPTION: The Dart code generated from sealed class definitions, showing both the sealed parent class and its child implementation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nsealed class ParentClass {\n    String name;\n}\n\nclass ChildClass extends ParentClass {\n    String name;\n    int age;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Serverpod Endpoint\nDESCRIPTION: Dart code example of implementing a Serverpod endpoint with a method to check if a company is legitimate.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass CompanyEndpoint extends Endpoint {\n  Future<bool> isLegit(Session session, Company company) async {\n    // Check if the company has the foundedDate set and that it\n    // has been around for more than one year.\n\n    if (company.foundedDate == null) {\n      return false;\n    }\n\n    var oneYearAgo = DateTime.now().subract(Duration(days: 365));\n    return company.foundedDate!.isBefore(oneYearAgo);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Caching Implementation in Serverpod\nDESCRIPTION: Demonstrates how to implement basic caching for user data in Serverpod using local cache. The method checks for cached data first, falls back to database lookup if not found, and caches the result for 5 minutes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/08-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = UserData.db.findById(session, userId);\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Future Call Class in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to create a future call by extending the FutureCall class and overriding the invoke method. The method takes a Session object and an optional SerializableModel as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/14-scheduling.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleFutureCall extends FutureCall<MyModelEntity> {\n  @override\n  Future<void> invoke(Session session, MyModelEntity? object) async {\n    // Do something interesting in the future here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages Server-Side - Dart\nDESCRIPTION: Shows how to process incoming stream messages and route them to specific channels based on message type and recipient ID. This example handles chat message routing between users.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services for Testing\nDESCRIPTION: Command to start Docker services for testing environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Dart Test Configuration\nDESCRIPTION: Basic configuration for Dart tests with integration tag setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n\n```\n\n----------------------------------------\n\nTITLE: Updating Single Row in Serverpod\nDESCRIPTION: Shows how to update a single Company record after modifying its properties.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \ncompany.name = 'New name';\nvar updatedCompany = await Company.db.updateRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration\nDESCRIPTION: Full Docker compose configuration including both development and test services for PostgreSQL and Redis.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Development services\n  postgres:\n    image: postgres:16.3\n    ports:\n      - '8090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>\n      POSTGRES_PASSWORD: \"<insert database development password>\"\n    volumes:\n      - <projectname>_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - dev\n  redis:\n    image: redis:6.2.6\n    ports:\n      - '8091:6379'\n    command: redis-server --requirepass \"<insert redis development password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - dev\n\n  # Test services\n  postgres_test:\n    image: postgres:16.3\n    ports:\n      - '9090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>_test\n      POSTGRES_PASSWORD: \"<insert database test password>\"\n    volumes:\n      - <projectname>_test_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - test\n  redis_test:\n    image: redis:6.2.6\n    ports:\n      - '9091:6379'\n    command: redis-server --requirepass \"<insert redis test password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - test\n\nvolumes:\n  <projectname>_data:\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Configuring SignInWithGoogleButton with Additional Scopes in Dart\nDESCRIPTION: Code example showing how to request additional Google API scopes when setting up the SignInWithGoogleButton widget, specifically requesting YouTube API access.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Exception with Default Values in YAML\nDESCRIPTION: This YAML code defines a `MyException` with default values for the `message` and `errorCode` fields. If these fields are not explicitly set when the exception is thrown, they will default to \"An error occurred\" and `1001` respectively.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/04-exceptions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"exception: MyException\nfields:\n  message: String, default=\\\"An error occurred\\\"\n  errorCode: int, default=1001\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Self-Relation for Member Class\nDESCRIPTION: Defines a Member class for a blocking system where members can block other members. Includes lists for both blocking and blocked-by relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Member\ntable: member\nfields:\n  name: String\n  blocking: List<Blocking>?, relation(name=member_blocked_by_me)\n  blockedBy: List<Blocking>?, relation(name=member_blocking_me)\n```\n\n----------------------------------------\n\nTITLE: Defining Student Table with Many-to-many Relationship in YAML\nDESCRIPTION: Configuration for the Student table that defines a relationship with Enrollment table. The table includes a name field and a list of enrollments with a named relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Student\ntable: student\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=student_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Token in Serverpod\nDESCRIPTION: This snippet demonstrates how to create an authentication token for a user using the signInUser method. It specifies the user ID, authentication method, and granted scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar authToken = await session.auth.signInUser(userInfo.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Update Listener\nDESCRIPTION: Implementation of _listenToUpdates method to handle real-time image updates from the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  Future<void> _listenToUpdates() async {\n    // Indefinitely try to connect and listen to updates from the server.\n    while (true) {\n      try {\n        // Get the stream of updates from the server.\n        final imageUpdates = client.pixorama.imageUpdates();\n\n        // Listen for updates from the stream. The await for construct will\n        // wait for a message to arrive from the server, then run through the\n        // body of the loop.\n        await for (final update in imageUpdates) {\n          // Check which type of update we have received.\n          if (update is ImageData) {\n            // This is a complete image update, containing all pixels in the\n            // image. Create a new PixelImageController with the pixel data.\n            setState(() {\n              _imageController = PixelImageController(\n                pixels: update.pixels,\n                palette: PixelPalette.rPlace(),\n                width: update.width,\n                height: update.height,\n              );\n            });\n          } else if (update is ImageUpdate) {\n            // Got an incremental update of the image. Just set the single\n            // pixel.\n            _imageController?.setPixelIndex(\n              pixelIndex: update.pixelIndex,\n              colorIndex: update.colorIndex,\n            );\n          }\n        }\n      } on MethodStreamException catch (_) {\n        // We lost the connection to the server, or failed to connect.\n        setState(() {\n          _imageController = null;\n        });\n      }\n\n      // Wait 5 seconds until we try to connect again.\n      await Future.delayed(Duration(seconds: 5));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String Scopes to Scope Objects in Dart\nDESCRIPTION: This snippet shows how to convert a list of String scopes (e.g., extracted from a JWT) into a Set of Scope objects in Dart. This is necessary to grant access to scope-restricted endpoints in Serverpod. The Scope class is a simple wrapper around a nullable String.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nList<String> scopes = extractScopes(token);\nSet<Scope> userScopes = scopes.map((scope) => Scope(scope)).toSet();\n\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Referential Actions\nDESCRIPTION: Full example showing a class definition with custom referential actions where updates set the parentId to null and deletes trigger no action.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence - Dart\nDESCRIPTION: This snippet checks if a file exists in the specified public storage by utilizing the fileExists method of the session storage. It returns a boolean indicating the presence of the file at the given path.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL in Dart\nDESCRIPTION: Method to get the public URL for a file stored in a public storage location\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Adding SERVER_CLIENT_ID to GoogleService-Info.plist for iOS\nDESCRIPTION: XML configuration needed in the GoogleService-Info.plist file to specify the server client ID for Google Sign In on iOS. The server client ID should match the one from your server configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom WidgetRoute in Dart\nDESCRIPTION: Defines a custom route by overriding the WidgetRoute class in Dart. The build method asynchronously returns a Widget, which represents a web page. This code requires Serverpod, Dart, and a session object as dependencies. The route uses HTTP requests to render widgets, with widgets offering HTML templates and Dart logic.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/16-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Health Check Handler in Dart for Serverpod\nDESCRIPTION: This snippet shows how to register a custom health check handler when creating a Serverpod object in Dart. The handler is passed as a parameter to the Serverpod constructor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/12-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Detaching Single Row in Relational Data in Serverpod (Dart)\nDESCRIPTION: Shows how to remove the association between an employee and a company in Serverpod using the detach row method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detachRow.employees(session, employee!);\n```\n\n----------------------------------------\n\nTITLE: Defining ImageData Model in YAML\nDESCRIPTION: YAML definition for the ImageData model which represents the entire image with pixel data and dimensions. This model will be used to send the complete image to clients upon connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# lib/src/models/image_data.spy.yaml\n\nclass: ImageData\nfields:\n  pixels: ByteData\n  width: int\n  height: int\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Serializable Objects\nDESCRIPTION: Illustrates how to reference serializable objects from other modules in YAML model files using the module prefix and nickname.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/10-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for a File in Serverpod\nDESCRIPTION: Server-side method to get the public URL for a file in a public storage. This allows files to be accessed directly through their URL.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Module Nickname Configuration\nDESCRIPTION: YAML configuration for setting up a nickname for the authentication module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Serverpod Dart\nDESCRIPTION: This Dart snippet demonstrates how to add routes to the Serverpod web server using `addRoute`. Routes specify paths that the web server should respond to and can match exact paths or patterns using an asterisk ('*'). These routes are added to the `webServer` object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/11-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Serverpod MethodCallSession\nDESCRIPTION: This Dart code snippet demonstrates how to cast a Session to a MethodCallSession and access the client's IP address using the HttpRequest extension in Serverpod. It is used to retrieve the remote IP address, even when the server is behind a load balancer. The session object must be correctly cast to MethodCallSession.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/05-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Adding GCP Cloud Storage Configuration\nDESCRIPTION: This Dart code snippet demonstrates how to add a Google Cloud Storage configuration to your Serverpod instance. It uses the `GoogleCloudStorage` class from the `serverpod_cloud_storage_gcp` package. The configuration includes the serverpod instance, storage ID, public access setting, region, bucket name, and public host.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(gcp.GoogleCloudStorage(\n    serverpod: pod,\n    storageId: 'public',\n    public: true,\n    region: 'auto',\n    bucket: 'my-bucket-name',\n    publicHost: 'storage.myapp.com',\n  ));\n```\n\n----------------------------------------\n\nTITLE: Nested Includes with Lists in Serverpod\nDESCRIPTION: Shows how to include nested objects within lists using the includes field for list entries.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        address: Address.include(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Dart with Serverpod\nDESCRIPTION: This snippet demonstrates how to implement caching for user data in a Serverpod application. It checks the local cache for user data, retrieves it from the database if not found, and stores it in the cache for future use with a 5-minute lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/08-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = UserData.db.findById(session, userId);\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages in Dart for Serverpod\nDESCRIPTION: This snippet demonstrates how to handle incoming stream messages on the server side. It checks if the message is of a specific type (MyChatMessage) and forwards it to the appropriate user channel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: InitState Override for Loading Notes\nDESCRIPTION: Implementation of initState to trigger note loading when the app starts\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Serverpod Environment and Run Mode in Dart\nDESCRIPTION: Explains how to set the 'runMode' configuration in Serverpod for different environments. By default, it reads settings from config/test.yaml, but can be overridden to other modes like development using the runMode setting.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given Products endpoint',\n  (sessionBuilder, endpoints) {\n    /* test code */\n  },\n  runMode: ServerpodRunMode.development,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Tagged Migration Command\nDESCRIPTION: Command to create a migration with a specific version tag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --tag \"v1-0-0\"\n```\n\n----------------------------------------\n\nTITLE: Calling a Serverpod Endpoint from Client\nDESCRIPTION: Example of how to call the 'hello' endpoint method from a client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Force creating migration in Serverpod\nDESCRIPTION: This bash command forces the creation of a new migration for a Serverpod project. It overrides the safeguards that prevent migration creation when no changes are identified or when there is a risk of data loss.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create-migration --force\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Index in YAML for Serverpod\nDESCRIPTION: Demonstrates how to add a basic index on a single field 'name' in a Company table. The index is named 'company_name_idx'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Authorization with Scopes on Endpoints - Dart\nDESCRIPTION: This snippet demonstrates setting up scope-based authorization for endpoints in Serverpod. By overriding the requiredScopes property, specific access levels are enforced. The use of scopes implies requireLogin is true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators on Columns in Serverpod Dart\nDESCRIPTION: The snippet shows how to perform database queries using comparison operators like greater than, less than, and their inclusive versions on integer columns in Serverpod with Dart. It assumes a User model with an integer field age. Inputs are integer values, and it fetches matching rows based on the condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age > 25\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age >= 25\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age < 25\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age <= 25\n);\n```\n\n----------------------------------------\n\nTITLE: Paginating relational lists using limit and offset in Serverpod\nDESCRIPTION: This snippet demonstrates how to paginate the included list of related objects using the `limit` and `offset` parameters in Serverpod. It retrieves a `Company` object and includes a subset of the `Employee` objects, limiting the results to 10 records starting from the 11th record. This is useful for efficiently handling large datasets.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"var user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      limit: 10,\n      offset: 10,\n    ),\n  ),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In Button in Flutter\nDESCRIPTION: This code demonstrates how to use the SignInWithAppleButton widget from the serverpod_auth_apple_flutter package. It creates a button that triggers the native Apple Sign-In UI when pressed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Logging with Exception Handling and Log Level in Dart\nDESCRIPTION: This snippet shows how to log messages with additional information such as a warning level and exception details. It utilizes the `log` method with parameters to customize the logging process during a session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/09-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Command to start the Serverpod server for the Pixorama application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Messages in Serverpod with Dart\nDESCRIPTION: The purpose of this code snippet is to demonstrate how to log a custom message during the execution of a session in Serverpod. The `log` method of the `session` object is used to record messages that are stored in the database once the session is completed. No additional dependencies are required. The input is a string message and the output is a log entry in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/08-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Database Password Configuration in YAML\nDESCRIPTION: Password configuration for database connection in passwords.yaml file under the development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n...\n```\n\n----------------------------------------\n\nTITLE: Manual Server Startup Alternative\nDESCRIPTION: Alternative method to start Postgres, Redis, and the Serverpod server manually\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/index.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d --build\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Getting User Data with Caching in Dart\nDESCRIPTION: This function retrieves user data either from the cache or the database, implementing a caching mechanism for efficient access. If the data is not found in the cache, it loads the data from the database and caches it for future requests. It uses the Serverpod framework's Session object to manage caching and database interactions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-' + userId.toString();\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(cacheKey) as UserData?;\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Indexes - YAML\nDESCRIPTION: The YAML snippet shows how to create an index on multiple fields by specifying a comma-separated list of field names under the 'fields' keyword. The index can help optimize queries that involve these fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n```\n\n----------------------------------------\n\nTITLE: Setting User Object for Streaming Session in Dart\nDESCRIPTION: Demonstrates how to associate a state with a streaming session by setting a user object when a stream is opened.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Google Sign-In Route in Serverpod\nDESCRIPTION: Dart code for registering the Google Sign-In route in the server configuration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Database Retrieval in Dart\nDESCRIPTION: This snippet checks database retrieval functionality in the context of a Serverpod test. It validates the number of product entries in the database after seeding.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ntest('then calling `all` should return all products', () async {\n    final products = await endpoints.products.all(sessionBuilder);\n    expect(products, hasLength(2));\n    expect(products.map((p) => p.name), contains(['Apple', 'Banana']));\n  });\n```\n\n----------------------------------------\n\nTITLE: Explicit One-to-Many Relationship with Foreign Key\nDESCRIPTION: Demonstrates how to define a one-to-many relationship using a foreign key field in the Employee model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation\n```\n\n----------------------------------------\n\nTITLE: Adding Database Indexes in YAML\nDESCRIPTION: Indexes are added for performance improvements. This snippet shows how to create an index on the `name` column in a YAML class-to-table mapping.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\\ntable: company\\nfields:\\n  name: String\\n  foundedDate: DateTime?\\n  employees: List<Employee>?, api\\nindexes:\\n  company_name_idx:\\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Signing Out a Specific User in Serverpod\nDESCRIPTION: This snippet signs out a user with a specified `userId` from all devices using the `UserAuthentication.signOutUser` method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Sign out the user with ID 123 from all devices\nawait UserAuthentication.signOutUser(\n  session,\n  userId: 123,\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing SignInWithGoogleButton with Custom Client IDs\nDESCRIPTION: An alternative implementation of the SignInWithGoogleButton widget, allowing manual specification of client and server IDs for iOS and Android platforms.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Add Shared Package Dependency in pubspec.yaml\nDESCRIPTION: This snippet demonstrates how to add a shared package as a dependency in the `pubspec.yaml` file of both the server and client projects. This ensures that both projects have access to the custom serializable classes. The shared package provides access to shared classes between the server and client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  my_project_shared:\n    path: ../my_project_shared\n  ...\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Dart with Serverpod Auth Module\nDESCRIPTION: This code shows how to retrieve detailed user information using the Users class from the Serverpod auth module, given a user ID and session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Age Comparison\nDESCRIPTION: Shows multiple ways to filter users based on age comparisons using greater than, greater than or equal to, less than, and less than or equal to operators\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age > 25\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Client Library in Bash\nDESCRIPTION: Command to generate the client library for Serverpod endpoints. This needs to be run from the server directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Requesting Youtube API Scope with SignInWithGoogleButton\nDESCRIPTION: This code snippet demonstrates how to request access to the Youtube API when signing in with Google. By setting the `additionalScopes` parameter of the `SignInWithGoogleButton` widget, the app will request the specified scope during the sign-in process.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration in Bash\nDESCRIPTION: This Bash command navigates to the specified directory and initiates the creation of a database migration using the Serverpod CLI tool. It is essential for updating the database schema as changes are made to the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Implementing Page-based Pagination in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to implement page-based pagination using 'limit' and 'offset'. It fetches the third page of companies, with 10 companies per page, and includes ordering by ID for consistency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint page = 3;\nint companiesPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: companiesPerPage,\n  offset: (page - 1) * companiesPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Expressions in Dart\nDESCRIPTION: These Dart snippets provide examples of how to construct expressions for querying or deleting data in Serverpod. They show how to use the table descriptor object `t` to access columns and apply operators like `equals`, `>=`, and `&` to build complex conditions. It is recommended to use parentheses when using operators.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\"\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Deployment\nDESCRIPTION: Command to deploy the Serverpod application to Google Cloud Run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Stream Session Management in Dart\nDESCRIPTION: Example of managing user objects in streaming sessions on the server side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Database Records in Dart\nDESCRIPTION: Shows how to insert new records into the database using Dart code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget in Dart\nDESCRIPTION: Illustrates how to create a custom Widget in Dart for use with Serverpod's web server. The widget is based on HTML templates and Mustache syntax for dynamic content. Specify template parameters through the values field, with dependencies including Serverpod and HTML file placement in specified directories.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/16-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Module Setup Commands\nDESCRIPTION: Terminal commands for setting up modules on the server side, including package installation and generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Serverpod Production Configuration\nDESCRIPTION: This YAML configuration file configures the database connection settings for the Serverpod in a production environment. It utilizes a Unix socket for connecting to the Postgres database via Cloud SQL Proxy, specifying the host, port, database name, and user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"database:\\n  isUnixSocket: true\\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\\n  port: 5432\\n  name: serverpod\\n  user: postgres\"\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Package Dependency in Serverpod\nDESCRIPTION: YAML configuration for adding the shared package as a dependency in the server and client projects' pubspec.yaml files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  my_project_shared:\n    path: ../my_project_shared\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating Serverpod Mini Project\nDESCRIPTION: Command to create a new Serverpod Mini project using the CLI\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/02-get-started-with-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create myminipod --mini\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to navigate to server directory, start Docker containers, and run the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\ndocker-compose up -d --build\nserverpod run\n```\n\n----------------------------------------\n\nTITLE: Finding User by Name using Custom Methods in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates a custom method for finding users by their full name by querying the `UserInfo` model directly from the database. This requires a session and utilizes Serverpod's model query capabilities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nvar userInfo = await UserInfo.db.findFirstRow(\n  session,\n  where: (t) => t.fullName.equals(name),\n);\n```\n\n----------------------------------------\n\nTITLE: Canceling Future Calls Using Identifier - Serverpod Dart\nDESCRIPTION: This example shows how to assign an `identifier` to future calls to manage or cancel them later using `cancelFutureCall`. A single identifier can be shared across multiple future calls for batch actions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/14-scheduling.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n  identifier: 'an-identifying-string',\n);\n\nawait session.serverpod.cancelFutureCall('an-identifying-string');\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Message Channel on Stream Open\nDESCRIPTION: This code demonstrates how to subscribe to a message channel when a stream is opened. It authenticates the user, retrieves their user ID, and then adds a listener to a channel specific to that user. When a message is received on that channel, it's forwarded to the client using sendStreamMessage. The subscription is automatically disposed of when the stream is closed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/14-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n\"@override\\nFuture<void> streamOpened(StreamingSession session) async {\\n  final authenticationInfo = await session.authenticated;\\n  final userId = authenticationInfo?.userId;\\n  session.messages.addListener(\\n    'user_$userId',\\n    (message) {\\n      sendStreamMessage(session, message);\\n    },\\n  );\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase in Flutter App\nDESCRIPTION: Code snippet showing how to initialize Firebase in a Flutter application's main.dart file and configure Firebase UI Auth providers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n\n...\nvoid main() async {\n  ...\n  await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n\n  firebase.FirebaseUIAuth.configureProviders([\n    firebase.PhoneAuthProvider(),\n  ]);\n\n  ...\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Building Pixel Editor Interface\nDESCRIPTION: Implementation of the build method to create the pixel editor interface with real-time update capabilities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: _imageController == null\n          ? const CircularProgressIndicator()\n          : PixelEditor(\n              controller: _imageController!,\n              onSetPixel: (details) {\n                // When a user clicks a pixel we will get a callback from the\n                // PixelImageController, with information about the changed\n                // pixel. When that happens we call the setPixels method on\n                // the server.\n                client.pixorama.setPixel(\n                  pixelIndex: details.tapDetails.index,\n                  colorIndex: details.colorIndex,\n                );\n              },\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages from Client\nDESCRIPTION: Example of sending messages from client to server through the stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/09-streams.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side endpoint code to generate an upload description that grants file upload access to the app. Uses the 'public' storage configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Server and Applying Migrations with Docker Compose\nDESCRIPTION: This command starts the Postgres and Redis Docker containers and then applies any necessary database migrations using the dart command. It assumes that Docker Desktop is running and properly configured.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cd mypod/mypod_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod with OAuth Bearer Token Validation in Dart\nDESCRIPTION: This code demonstrates how to initialize Serverpod with a custom authentication handler for validating OAuth bearer tokens. It extracts the user ID and scopes from the token and returns an AuthenticationInfo object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Bearer token validation handler\n    var (uid, scopes) = myBearerTokenValidator(token)\n    if (uid == null) return null;\n\n    return AuthenticationInfo(uid, scopes);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: ID Relation Default Referential Actions\nDESCRIPTION: Default referential action configuration for ID relations in Serverpod, with NoAction for updates and Cascade for deletions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparentId: int?, relation(parent=model_table, onUpdate=NoAction, onDelete=Cascade)\n```\n\n----------------------------------------\n\nTITLE: Updating Serverpod Pubspec Files in Bash\nDESCRIPTION: Command to generate new pubspec.yaml files for Serverpod based on templates. This is used instead of directly editing pubspec files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/06-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Client\nDESCRIPTION: Demonstrates how to initialize the client object for connecting to the Serverpod server, including connectivity monitoring setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Signing Out a Single Device in Dart with Serverpod\nDESCRIPTION: This code shows how to sign out a user from a single device using the StatusEndpoint in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutDevice();\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Example of invoking a Serverpod endpoint method from the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Defining a Serverpod Endpoint\nDESCRIPTION: This snippet defines a Serverpod endpoint class named `ExampleEndpoint`. The class extends the `Endpoint` class and contains a method called `hello`. The `hello` method takes a `Session` object and a `String` as parameters and returns a `Future<String>`. The `Session` object provides information about the call and access to the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific Auth Key in Serverpod\nDESCRIPTION: This snippet shows how to revoke a specific authentication key using the UserAuthentication.revokeAuthKey method. It demonstrates revoking a key by its ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait UserAuthentication.revokeAuthKey(\n  session,\n  authKeyId: 'auth-key-id-here',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Serverpod Model in YAML\nDESCRIPTION: Example of defining a 'Company' model in YAML format for Serverpod, including various field types.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<String>\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Module Nickname in YAML\nDESCRIPTION: Adds a nickname for the serverpod_auth module in the generator.yaml configuration file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Module Nickname\nDESCRIPTION: Optional yaml configuration to define a shorthand/nickname for the serverpod_auth module, enhancing code readability and maintainability.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Flutter\nDESCRIPTION: Async method to create a new note by calling the server endpoint and refreshing the notes list. Includes error handling for failed connections.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Direct File Upload Description in Serverpod\nDESCRIPTION: Server-side code to generate an upload description that grants clients permission to upload files to a specific storage location.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing Savepoints\nDESCRIPTION: Demonstrates how to release savepoints in a transaction, which preserves changes made after the savepoint and invalidates subsequent savepoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  // Create two savepoints\n  var savepoint = await transaction.createSavepoint();\n  var secondSavepoint = await transaction.createSavepoint();\n\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await savepoint.release();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User ID\nDESCRIPTION: Obtain the user ID of the currently authenticated user through the session object\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = await session.auth.authenticatedUserId;\n```\n\n----------------------------------------\n\nTITLE: Registering a Signed-In User in Serverpod Client\nDESCRIPTION: This snippet demonstrates how to register a successfully authenticated user in the client-side `SessionManager` in Serverpod. This stores the user information and authentication token for subsequent requests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar serverResponse = await caller.myAuthentication.login(username, password);\n\nif (serverResponse.success) {\n    // Store the user info in the session manager.\n    SessionManager sessionManager = await SessionManager.instance;\n    await sessionManager.registerSignedInUser(\n        serverResponse.userInfo!,\n        serverResponse.keyId!,\n        serverResponse.key!,\n    );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Signing Out User from All Devices in Serverpod\nDESCRIPTION: This code demonstrates how to sign a user out from all devices using the sessionManager's signOutAllDevices method. It returns a boolean indicating whether the operation was successful.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Creating Pixorama Widget Structure\nDESCRIPTION: Defines the basic structure of the Pixorama widget, including necessary imports and state management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:pixels/pixels.dart';\nimport 'package:pixorama_client/pixorama_client.dart';\n\nimport '../../main.dart';\n\nclass Pixorama extends StatefulWidget {\n  const Pixorama({super.key});\n\n  @override\n  State<Pixorama> createState() => _PixoramaState();\n}\n\nclass _PixoramaState extends State<Pixorama> {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Endpoint Returning Custom Object in Serverpod\nDESCRIPTION: Shows how to create an endpoint in a Serverpod server project that returns a custom serializable object. This demonstrates the integration of custom objects with Serverpod's endpoint system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:relation_test_shared/relation_test_shared.dart';\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<ClassName> getMyCustomClass(Session session) async {\n    return ClassName(\n      'John Doe',\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Age Greater Than 25 in Dart\nDESCRIPTION: This code snippet fetches users who are older than 25 years. It utilizes the greater-than operator for comparison, highlighting its usage within the find method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age > 25\n);\n```\n\n----------------------------------------\n\nTITLE: Building Session Instance - Dart\nDESCRIPTION: Creates a new Session instance from a sessionBuilder for use in database calls or function testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nSession session = sessionBuilder.build();\n```\n\n----------------------------------------\n\nTITLE: Initializing EmailAuthController for Custom UI\nDESCRIPTION: This Dart snippet shows how to initialize the EmailAuthController for creating a custom UI for email authentication in a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Serverpod Endpoint\nDESCRIPTION: Example showing how to create a basic endpoint class with a hello method that takes a name parameter and returns a greeting. The endpoint extends the Endpoint class and implements an async method returning a Future<String>.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Dart\nDESCRIPTION: This snippet demonstrates how to create an upload description on the server to grant file upload access to the app. It uses the session storage to create a direct file upload description for a public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Freezed Custom Class in generator.yaml\nDESCRIPTION: This snippet demonstrates how to declare a Freezed-generated custom class in the `generator.yaml` file. This ensures that Serverpod recognizes and handles the Freezed class during code generation. The class must be declared in generator.yaml to be correctly handled by Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Creating a Server-Only Class in Serverpod YAML\nDESCRIPTION: This example shows how to create a class that will only be generated on the server side, useful for objects containing private information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Rows in Dart\nDESCRIPTION: Example of inserting multiple company records in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar rows = [Company(name: 'Serverpod'), Company(name: 'Google')];\nvar companies = await Company.db.insert(session, rows);\n```\n\n----------------------------------------\n\nTITLE: Client-Side Stream Implementation in Dart\nDESCRIPTION: Shows how to implement the client side of a streaming connection, including creating stream controllers and handling messages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar inStream = StreamController();\nvar outStream = client.example.echoStream(inStream.stream);\noutStream.listen((message) {\n  print('Received message: $message');\n});\n\ninStream.add('Hello');\ninStream.add(42);\n\n// This will print\n// Received message: Hello\n// Received message: 42\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Exception in Dart Endpoint\nDESCRIPTION: This Dart snippet shows how to throw a custom exception 'MyException' within an endpoint method. The exception includes a message and an error type to inform the client of the nature of the failure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Updates Stream\nDESCRIPTION: Dart code for the imageUpdates method in PixoramaEndpoint, which returns a stream of image updates to clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass PixoramaEndpoint extends Endpoint {\n  // ...\n\n  Stream imageUpdates(Session session) async* {\n    var updateStream =\n        session.messages.createStream<ImageUpdate>(_channelPixelAdded);\n\n    yield ImageData(\n      pixels: _pixelData.buffer.asByteData(),\n      width: _imageWidth,\n      height: _imageHeight,\n    );\n\n    await for (var imageUpdate in updateStream) {\n      yield imageUpdate;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Foreign Key Field in YAML\nDESCRIPTION: This example demonstrates how to use a custom foreign key field in an object relation by specifying the 'field' parameter for the relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"# user.yaml\\nclass: User\\ntable: user\\nfields:\\n  customIdField: int\\n  address: Address?, relation(field=customIdField)\\ndepends:\\nindexes:\\n  user_address_unique_idx:\\n    fields: customIdField\\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials in Configuration - YAML\nDESCRIPTION: This snippet illustrates how to include AWS credentials in the passwords.yaml file to facilitate S3 storage access. It contains the AWS Access Key ID and Secret Key required for authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget in Serverpod Dart\nDESCRIPTION: This Dart snippet shows how to define a custom `Widget` by subclassing the `Widget` class and providing template parameters through the `values` field. The `MyPageWidget` links to an HTML template found in the `web/templates` directory and sets template variables, which can be processed using the Mustache template language.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/11-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Seeding the Database for Serverpod Tests\nDESCRIPTION: Shows how to seed the database before running tests. By default, all database operations are done inside a transaction that is rolled back after each test case.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given Products endpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insert(session, [\n    Product(name: 'Apple', price: 10),\n    Product(name: 'Banana', price: 10)\n    ]);\n  });\n\n  test('then calling `all` should return all products', () async {\n    final products = await endpoints.products.all(sessionBuilder);\n    expect(products, hasLength(2));\n    expect(products.map((p) => p.name), contains(['Apple', 'Banana']));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Records in Dart\nDESCRIPTION: Shows how to query multiple records with limit and where conditions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public URL for File in Dart (Server-side)\nDESCRIPTION: This snippet shows how to get the public URL for a file stored in a public storage. It uses the 'getPublicUrl' method with the storage ID and file path as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching and Revoking Authentication Keys in Serverpod (Dart)\nDESCRIPTION: This snippet presents how to fetch authentication keys associated with a user and revoke a specific key using the `revokeAuthKey` method. The task involves querying the `AuthKey` model and requires a session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nvar authId = (await session.authenticated)?.authId;\n\nif (authId != null) {\n  await UserAuthentication.revokeAuthKey(\n    session,\n    authKeyId: authId,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pixorama Widget Structure\nDESCRIPTION: This code snippet defines the basic structure of the Pixorama widget, which will handle the pixel drawing functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:pixels/pixels.dart';\nimport 'package:pixorama_client/pixorama_client.dart';\n\nimport '../../main.dart';\n\nclass Pixorama extends StatefulWidget {\n  const Pixorama({super.key});\n\n  @override\n  State<Pixorama> createState() => _PixoramaState();\n}\n\nclass _PixoramaState extends State<Pixorama> {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unauthenticated Session in Dart\nDESCRIPTION: Uses the AuthenticationOverride class to create an unauthenticated session, which is used by default for new sessions. This is suitable for simulating unauthenticated scenarios in tests. The static method returns an unauthenticated AuthenticationOverride instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nstatic AuthenticationOverride unauthenticated();\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Authentication Handler\nDESCRIPTION: Adds the authentication handler to the Serverpod instance in the server's main run function.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL\nDESCRIPTION: Method to get the public URL for a file stored in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Apple Auth Dependencies in Flutter\nDESCRIPTION: Configuration for adding the Apple authentication dependency to a Flutter project's pubspec.yaml file. Specifies the required package serverpod_auth_apple_flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit One-to-many Relationships with Object Relations in Serverpod\nDESCRIPTION: Example of explicitly defining a one-to-many relationship between Company and Employee models using an object relation on the Employee side, allowing multiple employees to reference the same company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget with Template in Serverpod\nDESCRIPTION: Example of creating a custom Widget class that uses Mustache templating. Shows how to pass values to the template through the widget class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/18-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Failures in Serverpod Client\nDESCRIPTION: Method to manage and update state when server connection fails\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Password - YAML\nDESCRIPTION: This YAML snippet illustrates how to define the database password for the development environment in a separate configuration file, allowing secure access to the Postgres database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"...\\ndevelopment:\\n  database: '<MY DATABASE PASSWORD>'\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Invoking Future Calls with Delay - Serverpod Dart\nDESCRIPTION: This code demonstrates how to invoke a future call after a specified delay using the `futureCallWithDelay` method. You must provide the future call's unique name, data, and delay duration. The `data` parameter must match the expected data type for the future call object or can be null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/14-scheduling.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence (Dart)\nDESCRIPTION: This code snippet checks if a file exists in the specified storage location. It uses the `fileExists` method of the storage API to determine if a file is present at the given path within the specified storage ID. Returns true if file exists, otherwise false.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating Database Column Types to BIGINT in PostgreSQL\nDESCRIPTION: SQL commands to modify table and sequence column types from INT to BIGINT. Suitable for small tables where table locking during migration is acceptable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nALTER SEQUENCE \"my_table_id_seq\" AS bigint;\nALTER TABLE \"my_table\" ALTER \"id\" TYPE bigint;\nALTER TABLE \"my_table\" ALTER \"myNumber\" TYPE bigint;\n```\n\n----------------------------------------\n\nTITLE: Signing Out Users from All Devices in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates how to sign out a user from all devices using the Serverpod session manager. It returns a boolean indicating success or failure of the operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Removing Token from AuthenticationKeyManager in Serverpod Client\nDESCRIPTION: This snippet shows how to remove a token from the `AuthenticationKeyManager` of a Serverpod client. The `remove` method is used to clear the stored token.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait client.authenticationKeyManager?.remove();\n\n```\n\n----------------------------------------\n\nTITLE: Manual Server Setup Commands\nDESCRIPTION: Alternative commands for manually starting Docker containers and the server without using serverpod run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/index.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d --build\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Client-Side Error Handling Implementation\nDESCRIPTION: Shows how to implement error handling on the client side of a streaming connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar inStream = StreamController();\nvar outStream = client.example.echoStream(inStream.stream);\noutStream.listen((message) {\n  // Do nothing\n}, onError: (error) {\n  print('Client received error: $error');\n});\n\ninStream.addError(SerializableException('Error from client'));\n\n// This will print\n// Server received error: Error from client \n// Client received error: Error from server \n```\n\n----------------------------------------\n\nTITLE: Registering Custom Health Check Handler with Serverpod in Dart\nDESCRIPTION: This code snippet shows how to register a custom health check handler when creating a Serverpod object. The handler will be called periodically to perform configured health checks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/13-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server with Custom Mode and ID\nDESCRIPTION: Command to start a Serverpod server instance with specific mode and server ID settings. This example shows how to launch the server in production mode with ID 2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/04-deployments/02-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Dart\nDESCRIPTION: This snippet shows the implementation of a _createNote method in Dart, which uses the Serverpod client to create a new note and refresh the list of notes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Key Manager for Client - Dart\nDESCRIPTION: This snippet illustrates how to configure the SimpleAuthKeyManager as the authentication key manager for a client. It stores the authentication token in memory and retrieves it when needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scopes in Endpoint Restriction in Dart\nDESCRIPTION: This snippet demonstrates how to utilize custom scopes within an endpoint, ensuring that certain methods are gated behind specific user permissions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Database Password Configuration in YAML\nDESCRIPTION: YAML configuration for storing database password in development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n```\n\n----------------------------------------\n\nTITLE: Starting a Serverpod Server with Dependencies\nDESCRIPTION: Commands to navigate to the server directory and run the Serverpod server with Postgres and Redis dependencies. This uses the serverpod run command to handle everything automatically.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\nserverpod run\n```\n\n----------------------------------------\n\nTITLE: Filtering by Related Address Street with Like in Dart\nDESCRIPTION: This snippet fetches users whose related address contains 'road' in the street field, utilizing the relation operations supported in Serverpod for one-to-one relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.address.street.like('%road%')\n);\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Storage\nDESCRIPTION: Method to verify if a specific file exists in the storage system using a storage ID and file path\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Notes State Variables in Flutter\nDESCRIPTION: Declares state variables to manage notes data and potential connection exceptions in the application\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Database Management Commands\nDESCRIPTION: Set of Docker commands for managing the development database instance, including starting, stopping, and removing the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --build --detach\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose stop\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Initializing Notes Loading in App Lifecycle\nDESCRIPTION: Override initState to trigger notes loading when the widget is first created\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Filter in Dart\nDESCRIPTION: Example of counting company records that match a specific filter condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar count = await Company.db.count(\n  session, \n  where: (t) => t.name.like('s%'),\n);\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Tests\nDESCRIPTION: Commands for starting Docker test server and running integration tests\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/11-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server/docker-local\n$ docker-compose up --build --detach\n$ ./setup-tables\n$ cd tests/serverpod_test_server\n$ dart bin/main.dart\n$ dart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Creating a Server-Only Class in Serverpod\nDESCRIPTION: Example of a class that will only be generated on the server side by setting the serverOnly property to true, useful for data that shouldn't be exposed to clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\n```\n\n----------------------------------------\n\nTITLE: Defining Scoped Fields in Class Model\nDESCRIPTION: YAML definition showing how to set different visibility scopes for class fields\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: SelectivelyHiddenClass\nfields:\n  hiddenSecretKey: String, scope=serverOnly\n  publicKey: String\n```\n\n----------------------------------------\n\nTITLE: Defining the NotesEndpoint Class in Dart\nDESCRIPTION: The Dart snippet initializes a 'NotesEndpoint' class, which will later be expanded to handle API requests for note management, leveraging Serverpod's infrastructure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  // Endpoint implementation goes here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Serverpod Class Model\nDESCRIPTION: Basic YAML definition for a Company class model with various field types including String, DateTime and List\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Registering URL Scheme in Info.plist for iOS\nDESCRIPTION: This XML snippet provides the configuration to add a URL scheme in the info.plist file of an iOS application to handle user redirection after sign-in.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Dart - Serverpod\nDESCRIPTION: This code snippet demonstrates how to cast a Session object to a MethodCallSession and retrieve the client's IP address from the HttpRequest. This illustrates how users can access client information within the context of a Serverpod method call.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/03-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Sign-In Method\nDESCRIPTION: Example of programmatically triggering the Firebase authentication UI with context and auth providers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait signInWithFirebase(\n  context: context, \n  caller: client.modules.auth, \n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-side Email Authentication in Serverpod\nDESCRIPTION: Server configuration for handling email validation and password reset emails using AuthConfig\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Defining ImageData Model in YAML\nDESCRIPTION: YAML definition for the ImageData model, which represents the entire image with pixels, width, and height.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ImageData\nfields:\n  pixels: ByteData\n  width: int\n  height: int\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Auth Database - Bash\nDESCRIPTION: Creates a new database migration that includes the authentication module tables required for database setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of Default Values in Serverpod YAML\nDESCRIPTION: Provides a complete example of setting default values for various field types in Serverpod, including DateTime, boolean, integer, double, and string fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nclass: DefaultValue\ntable: default_value\nfields:\n  ### Sets the current date and time as the default value.\n  dateTimeDefault: DateTime, default=now\n\n  ### Sets the default value for a boolean field.\n  boolDefault: bool, defaultModel=false, defaultPersist=true\n\n  ### Sets the default value for an integer field.\n  intDefault: int, defaultPersist=20\n\n  ### Sets the default value for a double field.\n  doubleDefault: double, default=10.5, defaultPersist=20.5\n\n  ### Sets the default value for a string field.\n  stringDefault: String, default=\"This is a string\", defaultModel=\"This is a string\"\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation\nDESCRIPTION: Client-side code demonstrating how to upload a file using FileUploader with upload description.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Message Listener in Serverpod\nDESCRIPTION: Shows how to add a listener callback function to a specific channel to handle incoming messages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/16-server-events.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nsession.messages.addListener('user_updates', (message) {\n  print('Received message: $message');\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Exception Handling in Serverpod\nDESCRIPTION: Shows how to log messages with additional parameters including warning level, exceptions, and stack traces. This provides more detailed logging for error tracking and debugging.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Authentication Handler\nDESCRIPTION: Implementation of the authentication handler in the server's main run method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-Time Updates Listener\nDESCRIPTION: This code snippet implements the `_listenToUpdates` method, which continuously listens for updates from the server. It handles both full image updates (`ImageData`) and individual pixel updates (`ImageUpdate`), updating the `PixelImageController` accordingly. It also includes error handling and reconnection logic.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n\"// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  Future<void> _listenToUpdates() async {\n    // Indefinitely try to connect and listen to updates from the server.\n    while (true) {\n      try {\n        // Get the stream of updates from the server.\n        final imageUpdates = client.pixorama.imageUpdates();\n\n        // Listen for updates from the stream. The await for construct will\n        // wait for a message to arrive from the server, then run through the\n        // body of the loop.\n        await for (final update in imageUpdates) {\n          // Check which type of update we have received.\n          if (update is ImageData) {\n            // This is a complete image update, containing all pixels in the\n            // image. Create a new PixelImageController with the pixel data.\n            setState(() {\n              _imageController = PixelImageController(\n                pixels: update.pixels,\n                palette: PixelPalette.rPlace(),\n                width: update.width,\n                height: update.height,\n              );\n            });\n          } else if (update is ImageUpdate) {\n            // Got an incremental update of the image. Just set the single\n            // pixel.\n            _imageController?.setPixelIndex(\n              pixelIndex: update.pixelIndex,\n              colorIndex: update.colorIndex,\n            );\n          }\n        }\n      } on MethodStreamException catch (_) {\n        // We lost the connection to the server, or failed to connect.\n        setState(() {\n          _imageController = null;\n        });\n      }\n\n      // Wait 5 seconds until we try to connect again.\n      await Future.delayed(Duration(seconds: 5));\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Modifying Query in Dart\nDESCRIPTION: `unsafeExecute` allows you to execute a single SQL statement that modifies data, such as `INSERT`, `UPDATE`, or `DELETE`, returning the number of rows affected. This example demonstrates deleting a record with parameter binding.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeExecute(\n  r'DELETE FROM mytable WHERE id = @id',\n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking if a File Exists in Serverpod Storage\nDESCRIPTION: Server-side method to check if a file exists in the specified storage. This returns a boolean indicating whether the file exists.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter App Main Structure\nDESCRIPTION: Basic Flutter application setup with client initialization and main application widget configuration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: ProtocolSerialization Implementation in Dart\nDESCRIPTION: Example of implementing the ProtocolSerialization interface to selectively omit fields when transmitting data to clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements ProtocolSerialization {\n  final String? value;\n  final String? serverSideValue;\n\n  .......\n\n  // Serializes fields specifically for protocol communication\n  Map<String, dynamic> toJsonForProtocol() {\n    return {\n      \"value\":value,\n    };\n  }\n\n  // Serializes all fields, including those intended only for server-side use\n  Map<String, dynamic> toJson() {\n    return {\n      \"value\": value,\n      \"serverSideValue\": serverSideValue,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Self-Relation Junction Table in Serverpod YAML\nDESCRIPTION: A YAML model definition for a Blocking junction table that connects members in a many-to-many self-referential relationship. It enforces uniqueness to prevent duplicate blocking relationships and uses cascade deletion to maintain referential integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Blocking\ntable: blocking\nfields:\n  blocked: Member?, relation(name=member_blocking_me, onDelete=Cascade)\n  blockedBy: Member?, relation(name=member_blocked_by_me, onDelete=Cascade)\nindexes:\n  blocking_blocked_unique_idx:\n    fields: blockedId, blockedById\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Receiving Stream Messages in Serverpod Client\nDESCRIPTION: Shows how to listen to an endpoint's stream to receive messages from the server. Uses Dart's async/await for pattern to process messages as they arrive.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Serverpod Web Server in Dart\nDESCRIPTION: This Dart code adds routes to the Serverpod web server. Use the given snippet to define paths for web pages by providing route instances and their corresponding URLs. The server will match requests to routes based on the paths' order of addition. A dependency is the Serverpod web server, with routes configured to match specific URL patterns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/16-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Protocol Serialization Implementation\nDESCRIPTION: Custom class implementation with ProtocolSerialization for selective field transmission.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements ProtocolSerialization {\n  final String? value;\n  final String? serverSideValue;\n\n  .......\n\n  // Serializes fields specifically for protocol communication\n  Map<String, dynamic> toJsonForProtocol() {\n    return {\n      \"value\":value,\n    };\n  }\n\n  // Serializes all fields, including those intended only for server-side use\n  Map<String, dynamic> toJson() {\n    return {\n      \"value\": value,\n      \"serverSideValue\": serverSideValue,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Page-Based Pagination Implementation\nDESCRIPTION: Demonstrates a complete pagination implementation using page numbers, limit, and offset with proper ordering.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint page = 3;\nint companiesPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: companiesPerPage,\n  offset: (page - 1) * companiesPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Client in Flutter\nDESCRIPTION: Sets up a Serverpod client for server communication with a local development server and configures connectivity monitoring\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http:\\/\\/localhost:8080\\/') \n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Implementing Company Endpoint\nDESCRIPTION: Server endpoint implementation with a method to check if a company is legitimate based on its founding date\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/02-get-started-with-mini.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass CompanyEndpoint extends Endpoint {\n  Future<bool> isLegit(Session session, Company company) async {\n    // Check if the company has the foundedDate set and that it\n    // has been around for more than one year.\n\n    if (company.foundedDate == null) {\n      return false;\n    }\n\n    var oneYearAgo = DateTime.now().subract(Duration(days: 365));\n    return company.foundedDate!.isBefore(oneYearAgo);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Directly Removing Auth Tokens in Serverpod\nDESCRIPTION: This code demonstrates how to directly remove authentication tokens from the database. It uses the AuthKey.db.deleteWhere method to remove tokens based on specific criteria.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait AuthKey.db.deleteWhere(\n  session,\n  where: (t) => t.userId.equals(userId) & t.method.equals('username'),\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Command to start the Serverpod server for the Pixorama application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call at a Specific Time in Dart\nDESCRIPTION: This code demonstrates how to schedule a future call to be invoked at a specific date and time using the futureCallAtTime method. It takes the future call name, data, and a DateTime object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/13-scheduling.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallAtTime(\n  'exampleFutureCall',\n  data,\n  DateTime(2025, 1, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for One-to-one Relationship in Serverpod\nDESCRIPTION: The SQL code that Serverpod generates behind the scenes to implement a one-to-one relationship with foreign key constraints and unique indexes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"address\" (\n    \"id\" serial PRIMARY KEY,\n    \"street\" text NOT NULL\n);\n\nCREATE TABLE \"user\" (\n    \"id\" serial PRIMARY KEY,\n    \"addressId\" integer NOT NULL\n);\n\n\nCREATE UNIQUE INDEX \"user_address_unique_idx\" ON \"user\" USING btree (\"addressId\");\n\nALTER TABLE ONLY \"user\"\n    ADD CONSTRAINT \"user_fk_0\"\n    FOREIGN KEY(\"addressId\")\n    REFERENCES \"address\"(\"id\")\n    ON DELETE CASCADE\n    ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Exception in YAML for Serverpod\nDESCRIPTION: This YAML snippet demonstrates how to define a serializable exception in Serverpod using a YAML file. It specifies the exception name and its fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Logout Endpoint Implementation\nDESCRIPTION: Creates an authenticated endpoint with a logout method that signs out the current user\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass AuthenticatedEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> logout(Session session) async {\n    await UserAuthentication.signOutUser(session);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter App with Pixorama Widget\nDESCRIPTION: This code snippet initializes the Flutter application, sets up the `PixoramaApp` widget, and includes the `Pixorama` widget within a `Scaffold`. It also sets up the connection to the Serverpod server using the `Client` class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"// lib/main.dart\n\nimport 'package:pixorama_client/pixorama_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'src/pixorama.dart';\n\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  // Start the app.\n  runApp(const PixoramaApp());\n}\n\nclass PixoramaApp extends StatelessWidget {\n  const PixoramaApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Pixorama',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: const Pixorama(),\n      ),\n    );\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of flushEventQueue with Generator Function\nDESCRIPTION: Demonstrates how to use flushEventQueue when working with generator functions in tests. The example shows waiting for a generator to execute up to a yield point by flushing the event queue.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = endpoints.someEndoint.generatorFunction(session);\nawait flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Initializing Notes Loading in Flutter Widget\nDESCRIPTION: Override of the initState method to load notes when the widget is first created, ensuring data is fetched when the app starts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Public File URL (Dart)\nDESCRIPTION: This code retrieves the publicly accessible URL for a file stored in a public storage.  The `getPublicUrl` method generates the URL based on the storage ID and file path.  This allows direct access to the file through a web browser or other HTTP clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple SQL Queries Using Simple Query Protocol in Dart\nDESCRIPTION: Demonstrates the use of unsafeSimpleQuery method for executing multiple SQL statements in a single query. This method uses the simple query protocol, which doesn't support parameter binding and is more susceptible to SQL injection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeSimpleQuery(\n    r'SELECT * FROM mytable WHERE id = 1; SELECT * FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row into Database Table in Dart with Serverpod\nDESCRIPTION: This snippet shows how to insert a new row into a database table using Serverpod's Dart API. It creates a Company object and inserts it into the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Building Database Expressions in Dart\nDESCRIPTION: Examples of building type-safe database query expressions using Serverpod's expression builder.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Module in Serverpod\nDESCRIPTION: Imports and sets up the server-side authentication configuration using the `serverpod_auth_server` module. Configures email validation and password reset emails. Requires `serverpod_auth_server` module and an SMTP email service. Expects asynchronous functions for sending emails with success as a boolean output.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Endpoint Implementation Example\nDESCRIPTION: Example of creating an endpoint that returns a custom class in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:relation_test_shared/relation_test_shared.dart';\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<ClassName> getMyCustomClass(Session session) async {\n    return ClassName(\n      'John Doe',\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Database Records in Dart\nDESCRIPTION: Example of inserting a new record into the database using Serverpod's typed objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Model definition with new 'scope=serverOnly' keyword\nDESCRIPTION: Updated model definition using the new 'scope=serverOnly' keyword which replaces the deprecated 'database' keyword to mark fields that should only be available on the server in Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, scope=serverOnly\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address with MethodCallSession\nDESCRIPTION: Demonstrates how to retrieve the remote IP address of a client using the Session object in a Serverpod method call. This technique works even when the server is behind a load balancer.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/05-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL/TLS for Serverpod Client in Dart\nDESCRIPTION: This snippet shows how to configure a Serverpod client to trust a server's SSL certificate. It creates a SecurityContext with a trusted certificate and passes it to the Client constructor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/21-security-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal securityContext = SecurityContext()\n  ..setTrustedCertificates('path/to/server_cert.pem');\n\n\nfinal client = Client(\n  'https://yourserver.com',\n  securityContext: securityContext,\n  ...\n);\n```\n\n----------------------------------------\n\nTITLE: Server and Database Startup Commands\nDESCRIPTION: Commands to start the database and server components.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Employee Count - Dart\nDESCRIPTION: Fetches all companies from the database and sorts them by the number of employees using the 'orderBy' parameter and the count method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Course Table with Many-to-many Relationship in YAML\nDESCRIPTION: Configuration for the Course table that defines a relationship with Enrollment table. The table includes a name field and a list of enrollments with a named relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Course\ntable: course\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=course_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows in Dart\nDESCRIPTION: This Dart snippet shows how to delete rows in the database using both the `deleteRow` and `delete` methods. It includes examples for deleting a single row and deleting rows based on a condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Installing serverpod_auth_server Dependency in YAML\nDESCRIPTION: Add the serverpod_auth_server dependency to the server's pubspec.yaml file. The version should match the Serverpod version being used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Descending Order Sorting in Serverpod\nDESCRIPTION: Shows how to sort query results in descending order by setting the orderDescending parameter to true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n  orderDescending: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Less Than or Equal Comparison in Dart\nDESCRIPTION: Shows how to use the less than or equal operator to fetch users of a specific age or younger.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age <= 25\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud Project\nDESCRIPTION: This command sets the default project ID for the Cloud Run service using the Google Cloud CLI. Developers need to replace <PROJECT_ID> with their specific project ID to ensure all future CLI commands target the correct project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Managing User Objects in Server-Side Streams\nDESCRIPTION: Shows how to associate a state object with a streaming session when a stream is opened on the server side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Future Call with Identifier\nDESCRIPTION: Shows how to add an identifier to a future call, which enables later cancellation of specific scheduled tasks\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/14-scheduling.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n  identifier: 'an-identifying-string',\n);\n```\n\n----------------------------------------\n\nTITLE: Direct Deletion of Authentication Tokens in Serverpod (Dart)\nDESCRIPTION: This extension of the previous example shows how to directly delete authentication tokens from the `AuthKey` table by applying a filter condition. Caution is advised as this bypasses standard state synchronization processes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nawait AuthKey.db.deleteWhere(\n  session,\n  where: (t) => t.userId.equals(userId) & t.method.equals('username'),\n);\n```\n\n----------------------------------------\n\nTITLE: Importing AWS S3 Storage Package in Serverpod\nDESCRIPTION: Import statement for including the AWS S3 storage package in a Serverpod project, enabling integration with Amazon S3 for file storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_s3/serverpod_cloud_storage_s3.dart'\n    as s3;\n```\n\n----------------------------------------\n\nTITLE: Initializing Pixorama Flutter Application\nDESCRIPTION: This Dart snippet initializes the Pixorama Flutter application. It replaces the default home page with a `Pixorama` widget within a `Scaffold`, organizing the user interface and setting the application theme.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// lib/main.dart\n\nimport 'package:pixorama_client/pixorama_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'src/pixorama.dart';\n\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  // Start the app.\n  runApp(const PixoramaApp());\n}\n\nclass PixoramaApp extends StatelessWidget {\n  const PixoramaApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Pixorama',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: const Pixorama(),\n      ),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload Completion in Serverpod\nDESCRIPTION: Server-side method to verify that a file upload has been completed. This is necessary especially when using third-party services like S3 or Google Cloud Storage to confirm upload success.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Serverpod Production Database Configuration\nDESCRIPTION: YAML configuration for connecting to Cloud SQL PostgreSQL database using Unix socket connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  isUnixSocket: true\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\n  port: 5432\n  name: serverpod\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Client Dependency\nDESCRIPTION: Add the serverpod_auth_client dependency to the client project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Serializable Classes in Generator\nDESCRIPTION: Explains how to register custom serializable classes in the 'config/generator.yaml' file for Serverpod to recognize them. Specifies the package path and class name. Necessary to trigger code generation for new classes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/02-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Configuration for Deployment\nDESCRIPTION: This snippet outlines the command to initialize Terraform in the specified directory for deploying infrastructure services. It prepares the environment by downloading necessary modules and dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Floating Action Button Implementation\nDESCRIPTION: Widget implementation for the floating action button that triggers the note creation dialog and handles saving new notes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod in a Serverless Role - Bash\nDESCRIPTION: Runs the Serverpod server in a serverless role using Dart, allowing it to handle only incoming connections without maintenance tasks. Requires Dart and the Serverpod software. The `--role` flag specifies the server's role ('monolith', 'serverless', or 'maintenance'). Outputs the server state tailored for serverless operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/06-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Starting the Server - Bash\nDESCRIPTION: This set of commands starts the Docker containers needed for running the Serverpod server and executes the main Dart application to start the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\ndocker compose up --build --detach\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Table by ID\nDESCRIPTION: This snippet shows how to reference a module table's ID directly by specifying it in the 'User' class. It demonstrates setting up a relation using the parent table's name and defining index constraints. Requires familiarity with YAML and Serverpod's database conventions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfoId: int, relation(parent=serverpod_user_info)\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod Mini Project with CLI Command\nDESCRIPTION: Command for creating a new Serverpod Mini project called 'pixorama'. This uses the lightweight Mini version of Serverpod without database and advanced logging features.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create pixorama --mini\n```\n\n----------------------------------------\n\nTITLE: Default Serverpod Configuration in Dart\nDESCRIPTION: The default configuration used by Serverpod when no custom configuration is provided, showing the minimal required setup for the API server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/07-configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nServerpodConfig(\n  apiServer: ServerConfig(\n    port: 8080,\n    publicHost: 'localhost',\n    publicPort: 8080,\n    publicScheme: 'http',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Dependencies\nDESCRIPTION: Commands to add Firebase Core, Auth, and UI Auth packages to a Flutter project and configure Firebase.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add firebase_core firebase_auth firebase_ui_auth\n$ flutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Client Dependencies for Email Authentication\nDESCRIPTION: Required dependencies for client and Flutter projects to enable email authentication\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exception Model\nDESCRIPTION: YAML definition for a custom exception class with message and enum type fields\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Dart\nDESCRIPTION: This snippet shows how to update a user's scopes using the 'updateUserScopes' method from the Users class, which modifies scope assignments as needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Enum with Default Value\nDESCRIPTION: Example of defining an enum with a default value for handling unknown options.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nserialized: byName\ndefault: unknown\nvalues:\n - unknown\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Storage\nDESCRIPTION: Method to check if a file exists in the specified storage location using Serverpod's storage API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Company Model\nDESCRIPTION: YAML model definition for a Company class with name, foundedDate, and employees fields\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/02-get-started-with-mini.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<String>\n```\n\n----------------------------------------\n\nTITLE: Converting String Scopes to Scope Objects\nDESCRIPTION: Code that demonstrates how to extract scopes from a token and convert them to Scope objects for use in authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nList<String> scopes = extractScopes(token);\nSet<Scope> userScopes = scopes.map((scope) => Scope(scope)).toSet();\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload Completion in Serverpod\nDESCRIPTION: Server-side method to verify if a file upload was completed successfully. Essential for confirming uploads to third-party services like S3 or Google Cloud Storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Freezed Custom Class Definition in Dart\nDESCRIPTION: This snippet shows how to define a custom class using the Freezed package in Dart. It includes annotations for Freezed to generate the necessary code for immutability and serialization. Freezed generates the required boilerplate code for serialization and immutability.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Single Row with Filter in Dart\nDESCRIPTION: Example of finding a single Company record using a filter expression\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('Serverpod'),\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations in Serverpod\nDESCRIPTION: Command to apply database migrations in Serverpod. This bash command starts the server with the --apply-migrations flag to apply pending migrations to the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Flutter App Entry Point\nDESCRIPTION: Main application setup including client initialization and basic app structure with MaterialApp configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// lib/main.dart\n\nimport 'package:pixorama_client/pixorama_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'src/pixorama.dart';\n\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  // Start the app.\n  runApp(const PixoramaApp());\n}\n\nclass PixoramaApp extends StatelessWidget {\n  const PixoramaApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Pixorama',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: const Pixorama(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Row in Database in Dart\nDESCRIPTION: This Dart snippet demonstrates how to update an existing company record in the database. It ensures the object's 'id' is set to a valid value before proceeding with the update operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Self-Relations in Serverpod - Member Class\nDESCRIPTION: Defines a Member class for a system where members can block other members, using a many-to-many self-relation. Contains references to both members being blocked and members blocking the current member.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Member\ntable: member\nfields:\n  name: String\n  blocking: List<Blocking>?, relation(name=member_blocked_by_me)\n  blockedBy: List<Blocking>?, relation(name=member_blocking_me)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Session Management in Flutter App\nDESCRIPTION: Initialize the SessionManager in your Flutter app to track user authentication state. This code sets up the client connection and configures the SessionManager to handle user sessions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  // Need to call this as we are using Flutter bindings before runApp is called.\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // The android emulator does not have access to the localhost of the machine.\n  // const ipAddress = '10.0.2.2'; // Android emulator ip for the host\n\n  // On a real device replace the ipAddress with the IP address of your computer.\n  const ipAddress = 'localhost';\n\n  // Sets up a singleton client object that can be used to talk to the server from\n  // anywhere in our app. The client is generated from your server code.\n  // The client is set up to connect to a Serverpod running on a local server on\n  // the default port. You will need to modify this to connect to staging or\n  // production servers.\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  // The session manager keeps track of the signed-in state of the user. You\n  // can query it to see if the user is currently signed in and get information\n  // about the user.\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PixoramaEndpoint Class\nDESCRIPTION: Dart code defining the core endpoint class with image dimensions and pixel data initialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass PixoramaEndpoint extends Endpoint {\n  static const _imageWidth = 64;\n  static const _imageHeight = 64;\n  static const _numPixels = _imageWidth * _imageHeight;\n\n  static const _numColorsInPalette = 16;\n  static const _defaultPixelColor = 2;\n\n  final _pixelData = Uint8List(_numPixels)\n    ..fillRange(\n      0,\n      _numPixels,\n      _defaultPixelColor,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Raw SQL Query in Dart\nDESCRIPTION: Demonstrates how to use unsafeQuery method to execute a simple SQL query and get results as a List<List<dynamic>>. This method is suitable for simple queries without joins.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nPostgreSQLResult result = await session.dbNext.unsafeQuery(\n  'SELECT * FROM mytable WHERE id = 1',\n);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Endpoint Definition in Serverpod\nDESCRIPTION: Shows how to use the @ignoreEndpoint annotation to prevent code generation for specific endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\nimport 'package:serverpod_shared/annotations.dart';\n\n@ignoreEndpoint\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using flushEventQueue with Generator Functions\nDESCRIPTION: Example showing how to use flushEventQueue when working with generator functions in endpoints. This ensures the generator has executed up to a certain point before continuing the test.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = endpoints.someEndoint.generatorFunction(session);\nawait flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Database Expression Examples\nDESCRIPTION: Various examples of building type-safe database query expressions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod in Production Mode with Custom Server ID\nDESCRIPTION: This command demonstrates how to start a Serverpod server in production mode with a specific server ID. The --mode parameter specifies the configuration file to use, and the --server-id parameter identifies the specific server instance in a cluster.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/03-deployments/01-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Uploading Files from Client-Side in Serverpod\nDESCRIPTION: Client-side implementation showing how to request an upload description, upload a file using FileUploader, and verify the upload with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages in Serverpod\nDESCRIPTION: Shows how to process incoming stream messages and route them to appropriate recipients. This example checks the message type and forwards chat messages to the specified recipient's channel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Session State Listener\nDESCRIPTION: Example of implementing a session state listener in a Flutter widget to handle authentication state changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/01-setup.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n\n  // Rebuild the page if signed in status changes.\n  sessionManager.addListener(() {\n    setState(() {});\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Failures in Flutter Notes App\nDESCRIPTION: Method to handle connection failures by updating the app state with the exception.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sorting Query in Serverpod\nDESCRIPTION: Demonstrates how to fetch companies and sort them by name in ascending order using the orderBy parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Serverpod Upgrade Command in Bash\nDESCRIPTION: This command upgrades a Serverpod Mini project to the full version by adding the necessary configuration files. It should be run from within the server directory of the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/01-upgrade-from-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create .\n```\n\n----------------------------------------\n\nTITLE: Updating Note YAML for Database Table - YAML\nDESCRIPTION: This updated YAML snippet for the 'Note' class adds a database table definition, allowing for database integration with the Serverpod framework.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\ntable: note\nfields:\n  ### The contents of the note.\n  text: String\n\n```\n\n----------------------------------------\n\nTITLE: Old Model Syntax Example\nDESCRIPTION: Example of the old model syntax using deprecated keywords.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, api\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Shows how to call the server endpoint method from the client side after code generation. Demonstrates the simplified syntax for making remote calls.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Database Connection Configuration in YAML\nDESCRIPTION: Basic database connection configuration settings in development.yaml file, including host, port, database name, and user settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndatabase:\n  host: localhost\n  port: 8090\n  name: <YOUR_PROJECT_NAME>\n  user: postgres\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit One-to-Many Relationship in Serverpod YAML\nDESCRIPTION: This snippet demonstrates how to define a one-to-many relationship between `Company` and `Employee` using implicit setup in the Serverpod framework. The relationship is established through a `List<Employee>` type in the `employees` field, with Serverpod handling the foreign key integration automatically. The YAML configuration allows for inclusion of employees in queries and supports relational operations such as filtering and sorting.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Explicit One-to-Many Relationship with Object Relation\nDESCRIPTION: Shows how to explicitly define a one-to-many relationship using an object relation approach where the Employee references the Company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Database Connection for Cloud SQL\nDESCRIPTION: YAML configuration for connecting Serverpod to a Cloud SQL PostgreSQL database using a Unix socket. This configuration should be added to the production.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  isUnixSocket: true\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\n  port: 5432\n  name: serverpod\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Invoking Future Call at Specified Time\nDESCRIPTION: Schedules a future call to be executed at a specific date and time using futureCallAtTime. It requires specifying the exact DateTime and the data to pass. The snippet relies on having the correct data model as expected by the future call.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/13-scheduling.md#2025-04-20_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nawait session.serverpod.futureCallAtTime(\n  'exampleFutureCall',\n  data,\n  DateTime(2025, 1, 1),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod Firebase Auth Package\nDESCRIPTION: Command to add the Serverpod Firebase authentication package to a Flutter project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add serverpod_auth_firebase_flutter\n```\n\n----------------------------------------\n\nTITLE: Updating pubspec.yaml files\nDESCRIPTION: This snippet shows how to update the `pubspec.yaml` files in the Serverpod project by running the `util/update_pubspecs` script. This script is used to generate the `pubspec.yaml` files based on the templates in the `templates/` directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/08-contribute.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"util/update_pubspecs\"\n```\n\n----------------------------------------\n\nTITLE: Building Session with Serverpod in Dart\nDESCRIPTION: This snippet builds a Serverpod session using a session builder, allowing configuration of session properties prior to its use in endpoint calls. It utilizes the `sessionBuilder.build()` method to create a usable session instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nSession session = sessionBuilder.build();\n```\n\n----------------------------------------\n\nTITLE: Database Index Definition in YAML\nDESCRIPTION: Shows how to define database indexes for performance optimization on specific fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Content in Dart\nDESCRIPTION: This code shows how to directly retrieve a file's content from the server using Serverpod. It returns the file content as a ByteData object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Named Serialization Enum\nDESCRIPTION: Example of defining an enum with name-based serialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nserialized: byName\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Settings in YAML\nDESCRIPTION: Example configuration for database connection details in development.yaml file, specifying host, port, database name, and user settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndatabase:\n  host: localhost\n  port: 8090\n  name: <YOUR_PROJECT_NAME>\n  user: postgres\n...\n```\n\n----------------------------------------\n\nTITLE: Adding SERVER_CLIENT_ID to iOS GoogleService-Info.plist\nDESCRIPTION: XML configuration for adding the server client ID to the GoogleService-Info.plist file for iOS Google Sign-In integration. This connects the client app with the server authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row by ID in Dart\nDESCRIPTION: This Dart snippet demonstrates how to find a single row in a database table by its ID. It uses the `findById` method on the `Company` class, passing in the session and the `companyId`. If no matching row is found, `null` is returned.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"var myCompany = await Company.findById(session, companyId);\"\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Dart\nDESCRIPTION: Server-side method to generate an upload description for granting file upload access with a specified storage ID and path\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Package for Custom Module in Bash\nDESCRIPTION: This snippet demonstrates how to create a Flutter package for a custom Serverpod module using the flutter create command with the package template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Initializing PixelImageController in Pixorama Widget\nDESCRIPTION: Sets up the PixelImageController and initializes the state for the Pixorama widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // The pixel image controller contains our image data and handles updates.\n  // If it is null, the image has not yet been loaded from the server.\n  PixelImageController? _imageController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Connect to the server and start listening to updates.\n    _listenToUpdates();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK and Setting Default Version on AWS in Bash\nDESCRIPTION: This Bash script snippet installs a specified version of Dart SDK on an AWS machine and sets it as the default version. It checks if the Dart version is already present, downloads and installs it if not, and updates the systemd service configuration. Key parameters include the Dart version defined by DART_VERSION. Dependencies include wget, unzip, and sudo privileges.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nDART_VERSION=3.5.1\n\n#### COPY THE CODE FROM HERE\nDART_VERSION=3.5.1\n\n# Uncomment the following code if you have already generated the project with the older version of serverpod cli\n# What this code do is to remove our previous way of setting dart version in the launch template\nif [ -f \"/etc/profile.d/script.sh\" ]; then\n    sudo rm /etc/profile.d/script.sh\nfi\n\n## install specified dart version if it is not present on the machine\n\nif [ ! -d \"/usr/lib/dart$DART_VERSION\" ]; then\n  wget -q https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-x64-release.zip -P /tmp\n  cd /tmp || exit\n  unzip -q dartsdk-linux-x64-release.zip\n  sudo mv dart-sdk/ /usr/lib/dart$DART_VERSION/\n  sudo chmod -R 755 /usr/lib/dart$DART_VERSION/\n  rm -rf dartsdk-linux-x64-release.zip\nfi\n\n## make symlink to use this dart as default\nsudo ln -sf \"/usr/lib/dart$DART_VERSION/bin/dart\" /usr/local/bin/dart\n\n#### STOP COPYING THE CODE FROM HERE\n\n#### THE FOLLOWING SHOULD BE THE SAME AS THE PREVIOUS CODE\ncat > /lib/systemd/system/serverpod.service << EOF\n[Unit]\nDescription=Serverpod server\nAfter=multi-user.target\n\n[Service]\nUser=ec2-user\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/serverpod/active/mypod_server/deploy/aws/scripts/run_serverpod\nRestart=always\n\n[Install]\nWantedBy=muti-user.target\nWantedBy=network-online.target\nEOF\n\nsystemctl daemon-reload\n\n```\n\n----------------------------------------\n\nTITLE: Initial Flutter HomePage State Setup\nDESCRIPTION: Basic scaffold implementation for the Flutter app's main page state\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Row in Serverpod\nDESCRIPTION: Example of deleting a single Company record from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \nvar companyDeleted = await Company.db.deleteRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Sample DNS Server Response\nDESCRIPTION: Expected output from the dig command showing the Google domain name servers that your domain should be pointing to after proper configuration with your domain registrar.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nns-cloud-b4.googledomains.com.\nns-cloud-b1.googledomains.com.\nns-cloud-b2.googledomains.com.\nns-cloud-b3.googledomains.com.\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionManager in Dart\nDESCRIPTION: Set up a SessionManager in the main function to handle user authentication state and client communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Configuration Bash Script\nDESCRIPTION: This snippet initializes the Terraform configuration, which downloads the necessary modules and prepares the environment for deployment. Ensure you have navigated to the correct directory before executing. No additional prerequisites are needed other than having Terraform installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to start the Docker containers and initialize the Serverpod server with database migrations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Defining Course Model with Many-to-Many Relationship in Serverpod\nDESCRIPTION: YAML definition for a Course model that participates in a many-to-many relationship with Student through Enrollment. The model includes a relation field to reference its enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# course.yaml\nclass: Course\ntable: course\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=course_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Storing Database Password - YAML\nDESCRIPTION: This YAML snippet illustrates how to store the database password for a development environment in the 'passwords.yaml' file, which is required for database access.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"...\\ndevelopment:\\n  database: '<MY DATABASE PASSWORD>'\\n...\"\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Serverpod Streaming Session\nDESCRIPTION: This snippet shows how to associate a state with a streaming session by setting a user object when a stream is opened.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/15-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: YAML configuration for AWS credentials in passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Index in Serverpod YAML\nDESCRIPTION: Demonstrates how to add a basic index on a single field in a Serverpod YAML file. The index is created on the 'name' field of the 'Company' class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Rolling Back to Savepoints in Dart\nDESCRIPTION: This code snippet demonstrates how to roll back to a specific savepoint using the `rollback` method on the savepoint object. It inserts a company, creates a savepoint, then inserts an employee, and finally rolls back to the savepoint. This preserves the company insertion but discards the employee insertion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nawait session.db.transaction((transaction) async {\n  // Changes preserved in the database\n  await Company.db.insertRow(session, company, transaction: transaction);\n  \n  // Create savepoint\n  var savepoint = await transaction.createSavepoint();\n\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n  // Changes rolled back \n  await savepoint.rollback();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-built Email Sign-in Button in Flutter\nDESCRIPTION: This Dart snippet demonstrates how to use the pre-built SignInWithEmailButton widget in a Flutter app for Serverpod email authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-User Stream Communication\nDESCRIPTION: Test implementation for verifying shared stream communication between multiple users. Demonstrates session management and stream testing patterns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given CommunicationExampleEndpoint', (sessionBuilder, endpoints) {\n  const int userId1 = 1;\n  const int userId2 = 2;\n\n  test(\n      'when calling postNumberToSharedStream and listenForNumbersOnSharedStream '\n      'with different sessions then number should be echoed',\n      () async {\n    var userSession1 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId1,\n        {},\n      ),\n    );\n    var userSession2 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId2,\n        {},\n      ),\n    );\n\n    var stream =\n        endpoints.testTools.listenForNumbersOnSharedStream(userSession1);\n    // Wait for `listenForNumbersOnSharedStream` to execute up to its \n    // `yield` statement before continuing\n    await flushEventQueue(); \n\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 111);\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 222);\n\n    await expectLater(stream.take(2), emitsInOrder([111, 222]));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Company Model\nDESCRIPTION: YAML configuration for defining a Company model with name, foundedDate, and employees fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<String>\n```\n\n----------------------------------------\n\nTITLE: Applying Serverpod Auth Database Migration\nDESCRIPTION: Applies the migration by starting the server with the apply-migrations flag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Using the Generated copyWith Method in Serverpod Models\nDESCRIPTION: Example of using the generated copyWith method to create a new instance of a User object with one field changed while preserving other fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar john = User(name: 'John Doe', age: 25);\nvar jane = john.copyWith(name: 'Jane Doe');\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with No Orders using None in Dart\nDESCRIPTION: This code retrieves users who have no orders associated with them, demonstrating the none method in a one-to-many relational context.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.none()\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serializable Class with Freezed\nDESCRIPTION: This Dart code snippet illustrates the creation of a custom serializable class using the Freezed package. The class 'FreezedCustomClass' is defined with fields for first name, last name, and age, and includes a factory constructor for JSON serialization. Dependencies include freezed_annotation and serverpod_serialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/02-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:serverpod_serialization/serverpod_serialization.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n    SerializationManager serializationManager,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Updated FromJson Constructor\nDESCRIPTION: Simplified fromJson factory constructor implementation in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Connecting to WebSocket on Client in Dart\nDESCRIPTION: Establishes a connection to the server's WebSocket allowing the client to send and receive messages. Requires prior authentication to ensure secure communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Test Services Configuration\nDESCRIPTION: Docker compose configuration for setting up PostgreSQL and Redis test services with separate test profiles.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\n  profiles:\n    - '' # Default profile\n    - test\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass \"<insert redis test password>\"\n  environment:\n    - REDIS_REPLICATION_MODE=master\n  profiles:\n    - '' # Default profile\n    - test\nvolumes:\n  # ...\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with More Than Three Orders using Count in Dart\nDESCRIPTION: This snippet demonstrates the use of count to fetch users with more than three orders in a one-to-many relationship, showcasing aggregate filtering.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count() > 3\n);\n```\n\n----------------------------------------\n\nTITLE: Calling an Endpoint Method from Client-Side Dart in Serverpod\nDESCRIPTION: Example of how to invoke a server endpoint method from client-side code. The client object provides access to the generated endpoint methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/06-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase and Configuring Auth Providers\nDESCRIPTION: This Dart code initializes Firebase in the Flutter application and configures the FirebaseUIAuth with specified authentication providers.  It imports necessary Firebase packages and sets up Firebase with the current platform's default options, and then configures the FirebaseUIAuth to use PhoneAuthProvider.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n\n...\nvoid main() async {\n  ...\n  await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n\n  firebase.FirebaseUIAuth.configureProviders([\n    firebase.PhoneAuthProvider(),\n  ]);\n\n  ...\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Multiple Rows in Serverpod\nDESCRIPTION: Shows how to delete multiple Company records in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.delete(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Signing In and Out Users with UserAuthentication\nDESCRIPTION: This snippet illustrates the use of the UserAuthentication class from the auth module to sign in and out users. The methods have been updated to take a session object as a parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nUserAuthentication.signInUser(session, userId, 'provider');\n\nUserAuthentication.signOutUser(session);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase in Flutter Main\nDESCRIPTION: Code to initialize Firebase in the main.dart file, including configuration of Firebase UI Auth providers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n\n...\nvoid main() async {\n  ...\n  await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n\n  firebase.FirebaseUIAuth.configureProviders([\n    firebase.PhoneAuthProvider(),\n  ]);\n\n  ...\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Button in Flutter\nDESCRIPTION: Flutter widget implementation for Google Sign-In button with server client ID and redirect URI\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flutter Package\nDESCRIPTION: Command to create a new Flutter package for custom module UI components.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Attaching Single Row in Serverpod Relations\nDESCRIPTION: Demonstrates how to link a single employee to a company using attachRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attachRow.employees(session, company!, employee!);\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration with Test Services\nDESCRIPTION: A complete Docker Compose file with both development and test services for PostgreSQL and Redis. This serves as a reference for the full configuration including volumes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Development services\n  postgres:\n    image: postgres:16.3\n    ports:\n      - '8090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>\n      POSTGRES_PASSWORD: \"<insert database development password>\"\n    volumes:\n      - <projectname>_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - dev\n  redis:\n    image: redis:6.2.6\n    ports:\n      - '8091:6379'\n    command: redis-server --requirepass \"<insert redis development password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - dev\n\n  # Test services\n  postgres_test:\n    image: postgres:16.3\n    ports:\n      - '9090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>_test\n      POSTGRES_PASSWORD: \"<insert database test password>\"\n    volumes:\n      - <projectname>_test_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - test\n  redis_test:\n    image: redis:6.2.6\n    ports:\n      - '9091:6379'\n    command: redis-server --requirepass \"<insert redis test password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - test\n\nvolumes:\n  <projectname>_data:\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation\nDESCRIPTION: Client-side code demonstrating the complete file upload process including getting upload description, uploading file, and verification.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to SessionManager Changes in Flutter\nDESCRIPTION: Subscribe to changes in the SessionManager and force a rerender of the app when the user's signed-in status changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n\n  // Rebuild the page if signed in status changes.\n  sessionManager.addListener(() {\n    setState(() {});\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server-Only Class Model\nDESCRIPTION: YAML definition for a private class that is only generated on the server side\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\n```\n\n----------------------------------------\n\nTITLE: Logical OR Operation in Dart using Serverpod\nDESCRIPTION: This example chains conditions with 'OR' to retrieve users whose names start with 'A' or 'B'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.like('A%') | t.name.like('B%'))\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator for Test Tools in YAML\nDESCRIPTION: Adds the server_test_tools_path key to the generator.yaml file to specify the location of the generated test tools file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Relation in YAML\nDESCRIPTION: This snippet modifies the previous User class definition to indicate that the relationship with Address is optional, allowing the foreign key to be null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# user.yaml\\nclass: User\\ntable: user\\nfields:\\n  address: Address?, relation(optional)\\ndepends:\\nindexes:\\n  user_address_unique_idx:\\n    fields: addressId\\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Records in Dart\nDESCRIPTION: Demonstrates different methods for deleting records from the database using Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in Serverpod\nDESCRIPTION: Command to apply migrations by starting the server with the '--apply-migrations' flag. This applies migrations as part of the startup sequence.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Rendering Notes in Flutter UI\nDESCRIPTION: Updated build method to render the fetched notes in a ListView. If notes are null, an empty Container is displayed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database SSL in Serverpod YAML\nDESCRIPTION: This YAML configuration snippet shows how to enable SSL for database connections in Serverpod's configuration file. It's important for secure connections to RDS instances.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: redis.private-production.examplepod.com\n  port: 5432\n  name: serverpod\n  user: postgres\n  requireSsl: true\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations on Server Startup\nDESCRIPTION: This Bash command runs your Serverpod server while applying any pending database migrations using the `--apply-migrations` flag. Ensure you are in the server directory and migrations have been created.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Add SignInWithGoogleButton (Flutter)\nDESCRIPTION: This Dart code snippet demonstrates how to add the `SignInWithGoogleButton` to a Flutter widget. The `caller` parameter is the auth module from the serverpod client, and the `serverClientId` (required for web) and `redirectUri` must be provided. The redirect URI must match the one configured in the Google Cloud Console.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Cache Misses with Serverpod Dart\nDESCRIPTION: This snippet extends the previous example by incorporating a CacheMissHandler in Serverpod, allowing custom processing when cache misses occur. The handler specifies database fetching with a 5-minute cache duration. Dependencies are similar, with additional usage of the CacheMissHandler class. The inputs remain a session and user ID, while the output is cached UserData. This mechanism provides flexibility for cache policy.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/08-caching.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(\n    cacheKey,\n    // If the object wasn't found in the cache, load it from the database and\n    // save it in the cache. Make it valid for 5 minutes.\n    CacheMissHandler(\n      () async => UserData.db.findById(session, userId),\n      lifetime: Duration(minutes: 5),\n    ),\n  );\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive Partial Match in Dart using Serverpod\nDESCRIPTION: This example uses 'ilike' for a case-insensitive match to fetch users whose names start with 'a' or 'A'. Employs '%' for matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.ilike('a%')\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Token Validation Handler\nDESCRIPTION: Shows how to override the default authentication handler with a custom validation method when initializing Serverpod\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    if (token != 'valid') return null;\n\n    return AuthenticationInfo(1, <Scope>{});\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Returning Data with Next Cursor\nDESCRIPTION: This example illustrates how to send both data and the next cursor back to the client, aiding in paginating requests. Requires Serverpod framework, a session, and a 'Company' model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn {  \n  'data': companies,  \n  'nextCursor': companies.last.id,\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Up Database Configuration in YAML\nDESCRIPTION: This YAML snippet sets the properties required to connect to the database, such as `host`, `port`, `name`, and `user`. It requires specifying the database's password separately in another YAML file for security reasons.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: localhost\n  port: 8090\n  name: projectname\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Unauthenticated Session Override in Dart\nDESCRIPTION: This snippet illustrates how to create an unauthenticated session override using the `AuthenticationOverride` class in Dart. It sets up a default state for testing unauthenticated scenarios.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nstatic AuthenticationOverride unauthenticated();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom WidgetRoute in Dart\nDESCRIPTION: Shows how to create a custom route by extending WidgetRoute and implementing the build method to return a specific widget\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/13-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Self-Relation in YAML\nDESCRIPTION: This code snippet defines a one-to-one self-referential relationship in a 'Post' table using YAML. The key field 'nextId' is nullable to allow initial entries without existing posts. 'previous' and 'next' fields denote navigational links between posts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nclass: Post\ntable: post\nfields:\n  content: String\n  previous: Post?, relation(name=next_previous_post)\n  nextId: int?\n  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)\nindexes:\n  next_unique_idx:\n    fields: nextId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Running dig to Verify Domain Name Servers\nDESCRIPTION: This snippet demonstrates how to use the `dig` command to verify that the domain name servers are correctly set to Google's domain name servers. It outputs the list of name servers the domain currently points to. No additional dependencies are required other than access to a Unix-like terminal with `dig` installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dig +short NS examplepod.com\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL\nDESCRIPTION: Code to get the public URL for accessing a file stored in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Migrating Deprecated Methods in Serverpod\nDESCRIPTION: This Dart code illustrates how to transition from deprecated methods to the new API functions in the updated Serverpod 1.2. The new methods are now accessible under a static db field and provide drop-in replacements with some adjustments in behavior.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// The new find method is a drop-in replacement.\nExample.find(...); // old\nExample.db.find(...); // new\n\n// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.\nExample.findSingleRow(...);\nExample.db.findFirstRow(...);\n\n// The new findById method is a drop-in replacement.\nExample.findById(...); // old\nExample.db.findById(...); // new\n\n// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.\nExample.delete(...);\nExample.db.deleteWhere(...);\n\n// The new findById method is a drop-in replacement but returns the id of the row deleted.\nExample.deleteRow(...); // old\nExample.db.deleteRow(...); // new\n\n// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.\nExample.update(...);\nExample.db.updateRow(...);\n\n// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.\nExample.insert(...);\nExample.db.insertRow(...);\n\n// The new count method is a drop-in replacement.\nExample.count(...);\nExample.db.count(...);\n```\n\n----------------------------------------\n\nTITLE: Filtering Included Relational Lists in Serverpod Query (Dart)\nDESCRIPTION: Demonstrates how to filter included relational lists in a Serverpod query. This example retrieves a company with employees whose names start with 'a'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      where: (t) => t.name.ilike('a%')\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query Execution in Dart\nDESCRIPTION: Demonstrates how to execute raw SQL queries when needed for advanced operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Sending Global Message in Dart using Serverpod with Redis\nDESCRIPTION: Shows how to send a global message across all servers using Redis integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/16-server-events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message, global: true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User ID in Serverpod\nDESCRIPTION: Shows how to get the ID of the currently authenticated user from the session object. This is a basic authentication check that can be used in any authenticated endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = await session.auth.authenticatedUserId;\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Files and Applying Migrations (Bash)\nDESCRIPTION: These commands update dependencies, generate necessary files, create a new database migration, and apply it to the database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/10-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ serverpod generate\n$ serverpod create-migration\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Specifying Index Type in Serverpod YAML\nDESCRIPTION: Demonstrates how to specify a custom index type in a Serverpod YAML file. The example sets the index type to 'brin' for the 'name' field of the 'Company' class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n```\n\n----------------------------------------\n\nTITLE: UUID Default Values Configuration\nDESCRIPTION: Examples of setting UUID default values, including random UUID generation and specific UUID assignment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nuuidDefaultRandom: UuidValue, default=random\nuuidDefaultUuid: UuidValue, default='550e8400-e29b-41d4-a716-446655440000'\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Self-Relations in Serverpod - Junction Table\nDESCRIPTION: Defines a Blocking junction table that connects members in a blocking relationship. Implements cascade deletion and a unique constraint to ensure each blocking relationship is recorded only once.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Blocking\ntable: blocking\nfields:\n  blocked: Member?, relation(name=member_blocking_me, onDelete=Cascade)\n  blockedBy: Member?, relation(name=member_blocked_by_me, onDelete=Cascade)\nindexes:\n  blocking_blocked_unique_idx:\n    fields: blockedId, blockedById\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Demo App\nDESCRIPTION: Commands to run the default Serverpod demo app in Chrome using Flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Note Loading Implementation\nDESCRIPTION: Async method to fetch notes from the server and handle potential errors\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Return Type for Delete Operations\nDESCRIPTION: This snippet shows the change in return types for delete operations, where the previous id-based returns are replaced with actual deleted object returns for better consistency and ease of use.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nCompany company = await Company.db.deleteRow(session, company);\nList<Company> companies = await Company.db.delete(session, [company]);\nList<Company> companies = await Company.db.deleteWhere(session, where: (t) => t.name.like('%Ltd'));\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod CLI Installation\nDESCRIPTION: Command to verify successful installation of Serverpod CLI by displaying the help information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod\n```\n\n----------------------------------------\n\nTITLE: Complete Flutter App Setup with Serverpod Client\nDESCRIPTION: Complete implementation of the main.dart file including client setup, app initialization, and basic UI structure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Serverpod Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Serverpod Example'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration in Serverpod Using Dart\nDESCRIPTION: This snippet demonstrates how to apply a repair migration using the server runtime. The command runs the main Dart application with a specific flag to trigger repair migration during the startup sequence.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Adding Web Server Routes in Dart\nDESCRIPTION: Demonstrates how to add routes to the Serverpod web server, including specific page routes and wildcard matching for path prefixes\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/13-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Defining an Endpoint - Dart\nDESCRIPTION: This Dart class defines an example endpoint that responds with a greeting message. It showcases asynchronous method implementation and parameters expected by the Serverpod framework.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status in Dart\nDESCRIPTION: Method demonstrating how to check user authentication status using the Session object\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var userId = await session.auth.authenticatedUserId;\n  var isSignedIn = userId == null;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Global Message in Serverpod (Dart)\nDESCRIPTION: Shows how to send a global message to all servers connected to the same Redis instance. Redis must be enabled for this to work.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/16-server-events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message, global: true);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Auth Module\nDESCRIPTION: Create a new migration that includes the auth module tables using the serverpod create-migration command line tool.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Defining Company Table for One-to-Many Relation\nDESCRIPTION: Outlines the setup for a 'Company' class table with a list of 'User' objects, establishing a one-to-many relationship via a defined relation name. It is essential to have a grasp on YAML and Serverpod's relationship modeling techniques.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<User>?, relation(name=company_employee)\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope-based Access Control\nDESCRIPTION: Implementation of scope-based access control for endpoints using the requiredScopes property\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding App Dependencies in YAML\nDESCRIPTION: Adds necessary dependencies to the app's pubspec.yaml file for authentication support.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating Custom WidgetRoute in Serverpod\nDESCRIPTION: Shows how to create a custom route by extending the WidgetRoute class and implementing the build method. Handles session and HTTP request parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/10-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Table Model Definition in YAML\nDESCRIPTION: Demonstrates how to define a basic Company model with a database table mapping. This configuration automatically adds an id field and enables database interaction methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Old Model Syntax - api Field\nDESCRIPTION: This snippet shows the old syntax for defining an API field in Serverpod model files before version 1.2. The `api` keyword has been deprecated and is being replaced.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, api\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Fields in Serverpod YAML\nDESCRIPTION: Shows how to define enum fields in Serverpod, including serialization options (by name or by index) and setting default values for enum fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByNameEnum\nserialize: byName\nvalues:\n  - byName1\n  - byName2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByIndexEnum\nserialize: byIndex\nvalues:\n  - byIndex1\n  - byIndex2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: EnumDefault\ntable: enum_default\nfields:\n  byNameEnumDefault: ByNameEnum, default=byName1\n  byIndexEnumDefault: ByIndexEnum, default=byIndex1\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Row in Serverpod\nDESCRIPTION: This snippet demonstrates how to insert a single row into the database by calling the `insertRow` method on the generated Company model. The method returns the company object with its `id` field populated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar row = Company(name: 'Serverpod');\nvar company = await Company.db.insertRow(session, row);\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Package as Dependency in pubspec.yaml for Serverpod\nDESCRIPTION: This YAML snippet demonstrates how to update the pubspec.yaml files in both server and client projects to add the new shared package as a dependency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  my_project_shared:\n    path: ../my_project_shared\n  ...\n```\n\n----------------------------------------\n\nTITLE: Registering Google Sign-In Route in Serverpod\nDESCRIPTION: Dart code for registering the Google Sign-In redirect route in the Serverpod server. This route handles the authentication callback from Google.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to YAML Models\nDESCRIPTION: This YAML snippet demonstrates how to add documentation to a model and its fields. It uses triple hashes (###) for comments, providing detailed descriptions for the 'Company' class and its attributes like 'name', 'foundedDate', and 'employees'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Sub-filter for Any Related Entry in Dart using Serverpod\nDESCRIPTION: This snippet applies a sub-filter to 'any' to identify users with any 'book' orders, enhancing specificity in 1:n relation filtering.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.any((o) => o.itemType.equals('book')))\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Button UI in ListTile\nDESCRIPTION: Updates the ListTile widget to include a delete button that removes the note from both local state and server database. Implements optimistic UI updates for better responsiveness.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Dart Test Configuration\nDESCRIPTION: Basic dart_test.yaml configuration for enabling integration tests\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating a User in Serverpod\nDESCRIPTION: This snippet demonstrates how to find an existing user by email or user identifier and, if no user is found, create a new user with the provided information using Serverpod's `Users` class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nUserInfo? userInfo;\nuserInfo = await Users.findUserByEmail(session, email);\nuserInfo ??= await Users.findUserByIdentifier(session, userIdentifier);\nif (userInfo == null) {\n  userInfo = UserInfo(\n    userIdentifier: userIdentifier,\n    userName: name,\n    email: email,\n    blocked: false,\n    created: DateTime.now().toUtc(),\n    scopeNames: [],\n  );\n  userInfo = await Users.createUser(session, userInfo, _authMethod);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Module in Generator YAML\nDESCRIPTION: This YAML snippet adds the `serverpod_auth` module to the generator configurationfile under a specified nickname. This nickname is used to reference the module from the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/08-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widgets with Templates\nDESCRIPTION: Demonstrates creating a custom widget that uses Mustache templates. Shows how to pass values to the template through the widget class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/13-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced One-to-Many Relation with Module Bridge Table in Serverpod\nDESCRIPTION: Example of a User class that creates both a bridge to a module model (UserInfo) and a one-to-many relation with a Company model. The relation is named 'company_employee' to connect with the Company model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\n  company: Company?, relation(name=company_employee)\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n  company_unique_idx:\n    fields: companyId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Module in generator.yaml\nDESCRIPTION: This snippet shows the required configuration for the serverpod_auth module in the config/generator.yaml file. It sets a nickname for the module, which will be used to reference it from the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"modules:\\n  serverpod_auth:\\n    nickname: auth\"\n```\n\n----------------------------------------\n\nTITLE: Defining Referential Actions Syntax in YAML\nDESCRIPTION: This snippet demonstrates the syntax used to define referential actions for relations in Serverpod. It specifies the parameters onUpdate and onDelete that determine how updates and deletions are handled for related records.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelation(onUpdate=<ACTION>, onDelete=<ACTION>)\n```\n\n----------------------------------------\n\nTITLE: Client Stream Message Sending\nDESCRIPTION: Shows how to send a message from the client to a server endpoint stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/11-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration in Maintenance Role\nDESCRIPTION: This snippet shows how to apply a repair migration while using the maintenance role. After applying migrations, the server yields an exit code indicating success or failure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod with Custom AuthenticationHandler in Dart\nDESCRIPTION: This snippet demonstrates how to initialize Serverpod with a custom `authenticationHandler`. The handler verifies token validity and returns an `AuthenticationInfo` object for valid tokens or `null` for invalid ones. Key parameters include the `Session` and `String token`. It requires the Serverpod framework and a suitable Dart environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Initialize Serverpod and connect it with your generated code.\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Custom validation handler\n    if (token != 'valid') return null;\n\n    return AuthenticationInfo(1, <Scope>{});\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Implementation\nDESCRIPTION: Widget for displaying loading state and error handling with retry functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Server Method from Flutter\nDESCRIPTION: Example of creating a Company object and calling the server method from a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = Company(\n  name: 'Serverpod',\n  foundedDate: DateTime(2021, 9, 27),\n  employees: [\n    'Alex',\n    'Isak',\n    'Viktor',\n  ],\n);\n\nvar result = await client.company.isLegit(company);\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation\nDESCRIPTION: Client-side code demonstrating how to upload a file using the upload description and FileUploader class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Imports in Serverpod Dart Projects\nDESCRIPTION: Illustrates the preferred way to manage imports in a Serverpod project by importing from the generated test tools file, which re-exports necessary helpers and types, instead of directly importing `serverpod_test`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'serverpod_test_tools.dart';\\\\n// Don't import `serverpod_test` directly.\\\\nimport 'package:serverpod_test/serverpod_test.dart'; ❌  \n```\n\nLANGUAGE: dart\nCODE:\n```\n// Only import the generated test tools file.\\\\n// It re-exports all helpers and types that are needed.\\\\nimport 'serverpod_test_tools.dart'; ✅ \n```\n\n----------------------------------------\n\nTITLE: Forcing Migration Creation Command\nDESCRIPTION: Command to force create a migration even when no changes are detected or when there's risk of data loss.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Authentication Key Manager\nDESCRIPTION: Basic implementation of an AuthenticationKeyManager for testing purposes that stores tokens in memory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Bulk Attaching Rows in Serverpod\nDESCRIPTION: This example explains how to associate multiple employees with a company simultaneously in Serverpod. The 'attach' bulk method ensures atomic operation. Inputs are session and employee/company IDs, and the operation links records in bulk.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attach.employees(session, company!, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Serverpod Database Delete Operations Example Dart\nDESCRIPTION: Shows the updated return types for delete operations in Serverpod 2.0, moving from returning ids to returning the actual deleted objects, thus providing consistency and ease of use in data removal processes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nint companyId = await Company.db.deleteRow(session, company);\nList<int> companyIds = await Company.db.delete(session, [company]);\nList<int> companyIds = await Company.db.deleteWhere(session, where: (t) => t.name.like('%Ltd'));\n\nReturn types after the change:\n\nCompany company = await Company.db.deleteRow(session, company);\nList<Company> companies = await Company.db.delete(session, [company]);\nList<Company> companies = await Company.db.deleteWhere(session, where: (t) => t.name.like('%Ltd'));\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Message Forwarding with Redis\nDESCRIPTION: Example of subscribing to a message channel in the streamOpened method to forward messages to specific users via Redis.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Index in YAML for Serverpod\nDESCRIPTION: Illustrates how to create a unique index on the 'name' field in a Company table. This ensures no two companies can have the same name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Hosts Configuration for Test Server\nDESCRIPTION: Adding local test server, postgres, and redis entries to /etc/hosts file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/11-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1 serverpod_test_server\n127.0.0.1 postgres\n127.0.0.1 redis\n```\n\n----------------------------------------\n\nTITLE: Updated SerializableModel Implementation\nDESCRIPTION: New implementation using SerializableModel interface, replacing SerializableEntity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements SerializableModel {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Index Configuration in YAML\nDESCRIPTION: Illustrates how to create a unique index constraint on the name field, ensuring no duplicate company names can exist in the table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/04-indexing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Dependencies to Flutter Project\nDESCRIPTION: This YAML snippet shows the dependencies to add to the pubspec.yaml file in the Flutter project for Serverpod authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling in Serverpod Streaming Methods\nDESCRIPTION: This example demonstrates error handling in Serverpod streaming methods. It shows how to handle errors on both the server and client sides, including passing serializable exceptions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/15-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Stream echoStream(Session session, Stream stream) async* {\n    stream.listen((message) {\n      // Do nothing\n    }, onError: (error) {\n      print('Server received error: $error');\n      throw SerializableException('Error from server');\n    });\n  }\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar inStream = StreamController();\nvar outStream = client.example.echoStream(inStream.stream);\noutStream.listen((message) {\n  // Do nothing\n}, onError: (error) {\n  print('Client received error: $error');\n});\n\ninStream.addError(SerializableException('Error from client'));\n\n// This will print\n// Server received error: Error from client \n// Client received error: Error from server \n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in passwords.yaml\nDESCRIPTION: This YAML snippet illustrates how to add AWS credentials to the `passwords.yaml` file for Serverpod. It includes the `AWSAccessKeyId` and `AWSSecretKey` under the `shared` section. These credentials are used to authenticate with Amazon S3.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase in Flutter Main\nDESCRIPTION: Configuration of Firebase initialization and UI providers in the main.dart file of a Flutter application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n\n...\nvoid main() async {\n  ...\n  await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n\n  firebase.FirebaseUIAuth.configureProviders([\n    firebase.PhoneAuthProvider(),\n  ]);\n\n  ...\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: DateTime Default Values in YAML\nDESCRIPTION: This YAML snippet sets default DateTime values for fields, such as 'now' for the current date and time, and a specific UTC DateTime for 'dateTimeDefaultUtc'. These defaults help manage both current and fixed DateTime scenarios.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndateTimeDefaultNow: DateTime, default=now\ndateTimeDefaultUtc: DateTime, default=2024-05-01T22:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Module Command\nDESCRIPTION: Terminal command to create a new Serverpod module using the create command with module template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/06-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Serializable Objects in Serverpod's generator.yaml\nDESCRIPTION: Shows how to declare custom serializable objects in the config/generator.yaml file of the server project. This is necessary for Serverpod to recognize and handle these custom objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nextraClasses:\n- package:my_project_shared/my_project_shared.dart:ClassName\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Data Modification with Parameter Binding\nDESCRIPTION: Shows how to execute data modification queries using unsafeExecute with named parameter binding. Returns the number of affected rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeExecute(\n  r'DELETE FROM mytable WHERE id = @id',\n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod Installation\nDESCRIPTION: Run this command to check if the Serverpod installation was successful. If configured correctly, it displays the help information for the 'serverpod' command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Adding Server Dependencies for Serverpod Auth Module\nDESCRIPTION: Configuration in server's pubspec.yaml to add the serverpod_auth_server dependency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/08-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile with Dart 3\nDESCRIPTION: This Dockerfile snippet shows the updated base image to Dart 3.0 for the build stage of the application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\nFROM dart:3.0 AS build\n\n...\n```\n\n----------------------------------------\n\nTITLE: Non-Persistent Field Configuration in YAML\nDESCRIPTION: Shows how to mark a field as non-persistent using the !persist keyword, preventing it from being stored in the database table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Example Serverpod Response\nDESCRIPTION: This is an example of the response you should receive when your Serverpod is successfully deployed and running. It includes an \"OK\" status code and a timestamp.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/06-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n\"OK 2022-05-19 14:29:16.974160Z\"\n```\n\n----------------------------------------\n\nTITLE: Advanced One-to-Many Module Relation - User Model\nDESCRIPTION: Demonstrates a more complex relation setup combining module relations with custom model relationships. Shows User model configuration with both module relation and company relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\n  company: Company?, relation(name=company_employee)\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n  company_unique_idx:\n    fields: companyId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class in YAML\nDESCRIPTION: This YAML snippet defines a basic serializable class called 'Company' with fields for the company name, founded date, and a list of employees. Supported types include basic data types and lists.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Client Module Dependencies\nDESCRIPTION: Adding the client-side module dependencies in the client's pubspec.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration Command\nDESCRIPTION: Basic command to create a new database migration in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Dependencies to Flutter Project\nDESCRIPTION: Required dependencies for the Flutter project that provide UI components for email authentication. This must be added to the pubspec.yaml of the Flutter project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Defining Company Model with Employee Relation in YAML\nDESCRIPTION: This YAML snippet defines a Company model with a one-to-many relation to the User model. It complements the advanced User model example, showing how to set up the other side of the relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<User>?, relation(name=company_employee)\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod in Production Mode with Custom Server ID\nDESCRIPTION: This command demonstrates how to start a Serverpod server in production mode with a specific server ID. It uses command-line arguments to set the mode and server ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Serverpod Web Server\nDESCRIPTION: Demonstrates how to add single page and wildcard routes to the Serverpod web server. Shows both specific path matching and wildcard path matching using asterisk notation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/13-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Adding Firebase Dependencies in Flutter\nDESCRIPTION: This Bash script installs the necessary Firebase packages for a Flutter project. It is essential to add these dependencies to use Firebase's core and authentication functionalities.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add firebase_core firebase_auth firebase_ui_auth\n$ flutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages to Server\nDESCRIPTION: Shows how to send messages from the client to the server's endpoint through the WebSocket connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/09-streams.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: GCP Storage Configuration\nDESCRIPTION: Code to configure Google Cloud Storage integration with Serverpod, including storage ID, region, and bucket settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  pod.addCloudStorage(gcp.GoogleCloudStorage(\n    serverpod: pod,\n    storageId: 'public',\n    public: true,\n    region: 'auto',\n    bucket: 'my-bucket-name',\n    publicHost: 'storage.myapp.com',\n  ));\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Serverpod\nDESCRIPTION: Shows how to retrieve the authenticated user's ID from a session object in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var userId = await session.auth.authenticatedUserId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call with an Identifier in Serverpod\nDESCRIPTION: This snippet demonstrates how to schedule a future call with an identifier. The identifier can be used to reference or cancel multiple future calls later.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/14-scheduling.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n  identifier: 'an-identifying-string',\n);\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific Auth Key for User in Serverpod\nDESCRIPTION: This snippet shows how to fetch all authentication keys for a user and revoke a specific key. It demonstrates querying the database for auth keys and revoking the last one.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar authKeys = await AuthKey.db.find(\n  session,\n  where: (t) => t.userId.equals(userId),\n);\n\nif (authKeys.isNotEmpty) {\n  var authKeyId = authKeys.last.id.toString();  // Convert the ID to string\n  await UserAuthentication.revokeAuthKey(\n    session,\n    authKeyId: authKeyId,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information\nDESCRIPTION: Demonstrates how to fetch user information using the Users class after authentication\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Page Using Limit and Offset\nDESCRIPTION: This snippet details retrieving the third page of companies, with 10 companies per page, utilizing both limit and offset parameters. The example assumes a properly configured Serverpod session, a 'Company' model, and sets an 'orderBy' to ensure consistent results.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint page = 3;\nint companiesPerPage = 10;\n\nvar companies = await Company.db.find(  \n  session,  \n  orderBy: (t) => t.id,  \n  limit: companiesPerPage,  \n  offset: (page - 1) * companiesPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level in Dart with Serverpod\nDESCRIPTION: Shows how to set a specific isolation level when initiating a transaction in Serverpod. The example uses the serializable isolation level for maximum consistency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction(\n  (transaction) async {\n    await Company.db.insertRow(session, company, transaction: transaction);\n    await Employee.db.insertRow(session, employee, transaction: transaction);\n  },\n  settings: TransactionSettings(isolationLevel: IsolationLevel.serializable),\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Included Lists in Serverpod\nDESCRIPTION: Demonstrates how to filter included lists using the where clause, showing how to filter employees by name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      where: (t) => t.name.ilike('a%')\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check Handler in Dart\nDESCRIPTION: Creates a custom health check handler function that returns a list of ServerHealthMetric objects. The handler measures custom metrics and returns their status along with timestamp and server information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/13-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Enum with Name-Based Serialization in Serverpod\nDESCRIPTION: Example of creating an enum that will be serialized using the string name of each value rather than its index, which is less fragile when values are reordered.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nserialized: byName\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Requiring Login for Endpoint Access in Dart\nDESCRIPTION: This code snippet shows how to require user login for accessing an endpoint in Serverpod. It overrides the 'requireLogin' property of the Endpoint class to ensure that only authenticated users can access the endpoint. There are no additional dependencies apart from the serverpod framework itself.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget with Template in Serverpod\nDESCRIPTION: Shows how to create a custom Widget class that uses Mustache templates for rendering. Demonstrates setting template values and parameter handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/18-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Index in YAML for Serverpod\nDESCRIPTION: Shows how to create an index on multiple fields in a Serverpod YAML configuration. The index is created on both 'name' and 'foundedAt' fields of the 'Company' class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/04-indexing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Not In Set Filter in Dart\nDESCRIPTION: Shows how to use the notInSet filter to fetch users with names not matching a set of values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notInSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Random Number Generation in AuthConfig\nDESCRIPTION: Demonstrates how to configure the AuthConfig to ensure only secure random number generation is used for password hashing in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: false,\n));\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod Auth Module in pubspec.yaml\nDESCRIPTION: This snippet shows how to add the Serverpod authentication module dependency to the server's pubspec.yaml file. It specifies the correct version to use, which should match the Serverpod version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Classes using CLI\nDESCRIPTION: This command is used to regenerate the classes managed by Serverpod after making changes in the endpoints or models directories. It should be run from the server directory of your Serverpod project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/05-server-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Registering Signed-In User in Client-Side SessionManager\nDESCRIPTION: This snippet shows how to register a signed-in user in the client-side SessionManager after a successful authentication. It uses the sessionManager.registerSignedInUser method to store user information and auth token.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar serverResponse = await caller.myAuthentication.login(username, password);\n\nif (serverResponse.success) {\n    // Store the user info in the session manager.\n    SessionManager sessionManager = await SessionManager.instance;\n    await sessionManager.registerSignedInUser(\n        serverResponse.userInfo!,\n        serverResponse.keyId!,\n        serverResponse.key!,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Exception Fields in YAML\nDESCRIPTION: This YAML snippet shows how to define default values for fields in a serializable exception. It demonstrates setting a default string message and a default integer error code for the exception.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/04-exceptions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String, default=\"An error occurred\"\n  errorCode: int, default=1001\n```\n\n----------------------------------------\n\nTITLE: Defining Child Class with Inheritance\nDESCRIPTION: YAML configuration showing how to extend a parent class using the extends keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    int: age\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializable Class with Freezed\nDESCRIPTION: Example of implementing a custom serializable class using Freezed package. Demonstrates required toJson() and fromJson() methods along with necessary annotations and imports.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/02-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:serverpod_serialization/serverpod_serialization.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n    SerializationManager serializationManager,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Sign Out Method in Serverpod - Dart\nDESCRIPTION: This snippet shows the deprecated signOut method in Serverpod, which is controlled by legacyUserSignOutBehavior configuration settings. It is recommended to use signOutDevice or signOutAllDevices instead.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum in Serverpod YAML\nDESCRIPTION: This YAML snippet defines an enum `Animal` with three possible values: `dog`, `cat`, and `bird`. By default, enums are serialized as integers based on their index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n\"enum: Animal\nvalues:\n - dog\n - cat\n - bird\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Company Model in Serverpod YAML\nDESCRIPTION: This YAML snippet defines a Company model with a 'name' field of type String. It specifies the class name and the corresponding database table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Creating Custom WidgetRoute in Dart for Serverpod\nDESCRIPTION: Shows how to create a custom WidgetRoute by extending the WidgetRoute class and implementing the build method. This method returns a Widget based on the session and HTTP request.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/10-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Demonstrates how to call a server endpoint method from the client side using the generated client code. Shows the syntax for making an async call to the hello method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side endpoint method to generate an upload description that grants file upload access to the app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Pepper in Serverpod\nDESCRIPTION: Shows how to set up a password pepper for additional security in the config/passwords.yaml file of a Serverpod project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  emailPasswordPepper: 'your-pepper'\n```\n\n----------------------------------------\n\nTITLE: Registering Health Check Handler in Serverpod\nDESCRIPTION: Shows how to register a custom health check handler when initializing a Serverpod instance. The handler is passed as a parameter to the Serverpod constructor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/10-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Index - YAML\nDESCRIPTION: This YAML example illustrates how to create a unique index, ensuring that the values of the indexed fields remain distinct within the table. The 'unique' keyword, when set to true, enforces this constraint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Basic Sorting by Column in Dart using Serverpod\nDESCRIPTION: Demonstrates how to fetch and sort companies by their name in ascending order using the orderBy parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signed-in User ID with Serverpod Session\nDESCRIPTION: This snippet retrieves the user ID of an authenticated user using the session object's authenticated method. It requires the Serverpod auth module to be set up.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = (await session.authenticated)?.userId;\n```\n\n----------------------------------------\n\nTITLE: Check User Authentication in Serverpod - Dart\nDESCRIPTION: This snippet illustrates how to check if a user is signed in using the Session object in Serverpod. The method is asynchronous and requires a valid session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Like Filter in Dart\nDESCRIPTION: Shows how to use the like filter to fetch users with names starting with a specific letter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.like('A%')\n);\n```\n\n----------------------------------------\n\nTITLE: Basic One-to-One Relationship with Id Field in YAML\nDESCRIPTION: Demonstrates the simplest implementation of a one-to-one relationship between User and Address models using an id field as a foreign key. Includes a unique index to enforce the one-to-one constraint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int, relation(parent=address) // Foreign key field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Defining Serverpod Model\nDESCRIPTION: YAML definition for a Company model with various field types including String, DateTime, and List\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/02-get-started-with-mini.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<String>\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Serializable Objects in Protocol YAML\nDESCRIPTION: Shows how to reference serializable objects from other modules using the module prefix and nickname\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Executing Non-Returning SQL Statements with Simple Protocol in Dart\nDESCRIPTION: `unsafeSimpleExecute` performs SQL statements using the simple query protocol without returning any results. Caution is advised due to the lack of parameter support, making it vulnerable to SQL injection. This example demonstrates deleting records from multiple tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeSimpleExecute(\n      r'DELETE FROM mytable WHERE id = 1; DELETE FROM othertable;'\n  );\n```\n\n----------------------------------------\n\nTITLE: Authentication State Listener\nDESCRIPTION: Implementation of a listener for authentication state changes in Flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  \n  // Rebuild the page if authentication state changes.\n  sessionManager.addListener(() {\n    setState(() {});\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Exception in YAML for Serverpod\nDESCRIPTION: This YAML snippet defines a serializable exception called 'MyException' with fields for a message and an error type. It demonstrates how to create custom exceptions that can be thrown on the server and caught on the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Referencing Serverpod Auth Module in YAML Model Definition\nDESCRIPTION: This YAML snippet shows how to reference a serializable class from the auth module in a model definition file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Greater Than Comparison in Dart\nDESCRIPTION: Illustrates how to use the greater than operator to fetch users older than a specific age.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age > 25\n);\n```\n\n----------------------------------------\n\nTITLE: Serverpod Production Database Configuration\nDESCRIPTION: YAML configuration for connecting to PostgreSQL database in Cloud SQL using Unix socket connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  isUnixSocket: true\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\n  port: 5432\n  name: serverpod\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to YAML Models\nDESCRIPTION: Example showing how to add documentation comments to a model and its fields using three hashes (###). This documentation will be included in the generated Dart code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Defining Sealed Parent Class\nDESCRIPTION: YAML definition for a sealed parent class, enabling exhaustive type checking for all possible subclasses in a hierarchy.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nsealed: true\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-One Self-Relation for Blog Posts in Serverpod\nDESCRIPTION: Defines a Post table with self-referential relationships to track post history. Uses nextId field to create links between consecutive posts, with nullable relationships to handle the first and last posts in the chain.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Post\ntable: post\nfields:\n  content: String\n  previous: Post?, relation(name=next_previous_post)\n  nextId: int?\n  next: Post?, relation(name=next_previous_post, field=nextId, onDelete=SetNull)\nindexes:\n  next_unique_idx:\n    fields: nextId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Force Creating Database Migration Command\nDESCRIPTION: Command to force create a migration even when there are no changes or potential data loss risks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit One-to-many Relationship with Foreign Key in Serverpod YAML\nDESCRIPTION: This snippet illustrates how to explicitly define a one-to-many relationship using a foreign key field in Serverpod's YAML configuration. The Employee model includes a companyId field with the 'relation' keyword to establish the relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation\n```\n\n----------------------------------------\n\nTITLE: Retrieving RDS Database URL using AWS CLI\nDESCRIPTION: Command to fetch the endpoint address of an RDS database instance using AWS CLI and jq for JSON parsing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws rds describe-db-instances --db-instance-identifier ${YOUR_DB_INSTANCE_ID} | jq \".DBInstances.[0].Endpoint.Address\" -r\n```\n\n----------------------------------------\n\nTITLE: Declaring Custom Class in generator.yaml\nDESCRIPTION: This snippet shows how to declare a custom serializable class in the `generator.yaml` file of a Serverpod project.  This step is necessary for Serverpod to recognize and handle the custom class during code generation. The generator.yaml file is necessary for Serverpod to handle this class in its generated code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/03-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n    ...\n    extraClasses:\n    - package:my_project_shared/my_project_shared.dart:ClassName\n```\n\n----------------------------------------\n\nTITLE: Registering Google Sign-In Route in Serverpod\nDESCRIPTION: Add the Google Sign-In route to the Serverpod server configuration. This sets up the endpoint for handling the Google Sign-In redirect.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Default Values Example in YAML\nDESCRIPTION: Comprehensive example showing default values for multiple data types including DateTime, boolean, integer, double, and string.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nclass: DefaultValue\ntable: default_value\nfields:\n  ### Sets the current date and time as the default value.\n  dateTimeDefault: DateTime, default=now\n\n  ### Sets the default value for a boolean field.\n  boolDefault: bool, defaultModel=false, defaultPersist=true\n\n  ### Sets the default value for an integer field.\n  intDefault: int, defaultPersist=20\n\n  ### Sets the default value for a double field.\n  doubleDefault: double, default=10.5, defaultPersist=20.5\n\n  ### Sets the default value for a string field.\n  stringDefault: String, default=\"This is a string\", defaultModel=\"This is a string\"\n```\n\n----------------------------------------\n\nTITLE: Complete Default Values Example\nDESCRIPTION: Comprehensive example showing default value configuration for various field types including DateTime, boolean, integer, double, and string.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nclass: DefaultValue\ntable: default_value\nfields:\n  dateTimeDefault: DateTime, default=now\n  boolDefault: bool, defaultModel=false, defaultPersist=true\n  intDefault: int, defaultPersist=20\n  doubleDefault: double, default=10.5, defaultPersist=20.5\n  stringDefault: String, default=\"This is a string\", defaultModel=\"This is a string\"\n```\n\n----------------------------------------\n\nTITLE: Migrating Small Tables to Bigint in SQL\nDESCRIPTION: SQL commands to alter a table's sequence and column types from int to bigint. This approach is suitable for small tables but locks the table during migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER SEQUENCE \"my_table_id_seq\" AS bigint;\nALTER TABLE \"my_table\" ALTER \"id\" TYPE bigint;\nALTER TABLE \"my_table\" ALTER \"myNumber\" TYPE bigint;\n```\n\n----------------------------------------\n\nTITLE: Retrieve Authenticated User Information Serverpod Dart\nDESCRIPTION: Illustrates changes in accessing authenticated user details through the 'authenticated' property in the session, aligning with Serverpod 2.0 standards. Key parameters include authenticated user id and scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint? userId = await session.auth.authenticatedUser;\n\nSet<Scopes>? scopes = await session.scopes;\n\nWith this:\n\nfinal authenticated = await session.authenticated;\n\n//Read authenticated userId\nint? userId = authenticated?.userId;\n\n//Read scopes\nSet<Scopes>? scopes = authenticated?.scopes;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Serverpod via CLI Bash Script\nDESCRIPTION: The code snippet demonstrates the command used to upgrade a Serverpod Mini project to the full version. It requires the Serverpod command-line tool to be installed and executed from the server directory of the project. The command adds necessary configuration files for the full version. It is important to backup the project before running this command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/01-upgrade-from-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create .\n```\n\n----------------------------------------\n\nTITLE: Defining a Relation Field in YAML Model\nDESCRIPTION: This example demonstrates how to create a database relation between two tables using the 'relation' keyword. The Company model has an optional Address field that is related to another table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address?, relation\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Any Filter in Dart\nDESCRIPTION: Demonstrates how to filter users who have any related one-to-many objects (orders in this case).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.any()\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Flutter Package for a Module (Bash)\nDESCRIPTION: This command creates a new Flutter package for custom Flutter code in a Serverpod module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/10-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Install Firebase dependencies\nDESCRIPTION: This command installs the necessary Firebase dependencies for a Flutter project: firebase_core, firebase_auth, and firebase_ui_auth.  It also runs flutterfire configure to configure Firebase project settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add firebase_core firebase_auth firebase_ui_auth\n$ flutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Status Listener in Serverpod Client\nDESCRIPTION: Demonstrates how to add a listener to monitor the connection status of the WebSocket in a Serverpod client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.addConnectionStatusListener(_chatConnectionStatusChanged);\n```\n\n----------------------------------------\n\nTITLE: File Path Example in Serverpod\nDESCRIPTION: Example of proper file path formatting for S3 compatibility, avoiding leading slashes and using standard characters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n'profile/$userId/images/avatar.png'\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows in Dart\nDESCRIPTION: This Dart snippet demonstrates how to delete rows from a database table. It shows two ways: deleting a single row using `deleteRow` and deleting multiple rows using `delete` with a `where` clause. The latter approach allows deleting rows based on specified conditions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n\"// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Opt-out in YAML\nDESCRIPTION: Example of how to opt out of managed migrations for a specific table by setting managedMigration to false in the model configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nmanagedMigration: false\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Multiple Rows in Dart\nDESCRIPTION: Example of deleting multiple Company records in a single operation\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.delete(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User Information\nDESCRIPTION: This snippet shows the new approach to retrieving authenticated user information from the session object in Serverpod 2.0. It replaces deprecated getters with the new authenticated getter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal authenticated = await session.authenticated;\n\n//Read authenticated userId\nint? userId = authenticated?.userId;\n\n//Read scopes\nSet<Scopes>? scopes = authenticated?.scopes;\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migrations in Serverpod\nDESCRIPTION: Command to create database migrations in Serverpod. This bash command generates a new migration that can be used to update the database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Logging Advanced Message with Exception in Serverpod (Dart)\nDESCRIPTION: Shows how to log a more complex message in Serverpod, including setting the log level, passing an exception, and a stack trace. This method provides more detailed logging for error scenarios.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Serverpod with Dart\nDESCRIPTION: Shows how to log a simple message using the session object in Serverpod. When the session is closed, this message will be written to the database log.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Data Structure Example for Mapped Results\nDESCRIPTION: Shows the structure of data returned by unsafeQueryMappedResults method, where results are organized by tables and columns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/10-raw-access.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n[\n  row {\n    table {\n      column: content,\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Fetching First Page with Limit\nDESCRIPTION: This code snippet demonstrates retrieving the first 10 records from the 'Company' database table using the 'limit' method to handle pagination. This requires the Serverpod framework with a predefined 'Company' database model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(  \n  session,  \n  limit: 10,\n);\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive String Matching with ilike Operation in Serverpod Dart\nDESCRIPTION: This code illustrates using ilike, a case-insensitive version of the like operation, for string pattern matching in Serverpod with Dart. It accepts patterns as input and fetches entries accordingly. notIlike serves as the negated form for excluding rows based on pattern.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_5\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.ilike('a%')\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notIlike('b%')\n);\n```\n\n----------------------------------------\n\nTITLE: Invoking an Endpoint Method - Dart\nDESCRIPTION: This code demonstrates how to call the 'hello' method defined in the ExampleEndpoint class from the client side using async/await syntax.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Finding Database Row by ID in Serverpod\nDESCRIPTION: Shows how to retrieve a single row from the database using the db.findById method by providing the row's ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Class in YAML\nDESCRIPTION: YAML configuration for defining a parent class with a name field in Serverpod's model system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionManager in Dart\nDESCRIPTION: This Dart code sets up a SessionManager to handle user authentication state, including client setup and session initialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Database Password in YAML for Serverpod\nDESCRIPTION: This YAML snippet demonstrates how to store the database password for different environments in Serverpod's passwords.yaml file. It shows the structure for the development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n...\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Failures in Dart\nDESCRIPTION: Method to handle connection failures by updating the state with null notes and storing the exception.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row into Database using Serverpod in Dart\nDESCRIPTION: This code snippet demonstrates how to insert a new row into the database using Serverpod's generated classes in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Implementing copyWith() Method for Custom Serialization in Dart\nDESCRIPTION: Example of a copyWith() method that returns a new instance of the object with specified fields replaced, implementing deep copying to ensure immutability.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nClassName copyWith({\n  String? name,\n}) {\n  return ClassName(\n    name: name ?? this.name,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using flushEventQueue with Stream Generator in Dart\nDESCRIPTION: Example demonstrating how to use flushEventQueue to ensure a generator function has executed up to a yield point when testing stream-based endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = endpoints.someEndoint.generatorFunction(session);\nawait flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Multiple Row Query with Conditions\nDESCRIPTION: Demonstrates how to query multiple rows with conditions and limits.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Docker for Development Database - Bash\nDESCRIPTION: This Bash command starts the Docker container for the Postgres database in a newly created Serverpod project, allowing for easy local development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"$ docker compose up --build --detach\"\n```\n\n----------------------------------------\n\nTITLE: Creating Compatible File Paths - Serverpod Dart\nDESCRIPTION: This code snippet gives an example of file paths to be compatible with S3, where file paths do not use a leading slash and only use standard characters and numbers. E.g. profile/$userId/images/avatar.png.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n'profile/$userId/images/avatar.png'\n```\n\n----------------------------------------\n\nTITLE: Default ID Relation Configuration\nDESCRIPTION: Shows the default referential action configuration for ID relations with NoAction for onUpdate and Cascade for onDelete.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparentId: int?, relation(parent=model_table, onUpdate=NoAction, onDelete=Cascade)\n```\n\n----------------------------------------\n\nTITLE: Creating a Class with Field-Level Visibility Control\nDESCRIPTION: Example showing how to set visibility scope on individual fields within a class. The 'scope' property can be set to 'all', 'serverOnly', or 'none'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: SelectivelyHiddenClass\nfields:\n  hiddenSecretKey: String, scope=serverOnly\n  publicKey: String\n```\n\n----------------------------------------\n\nTITLE: Implementing Endpoint Returning Custom Object in Serverpod\nDESCRIPTION: Example of a Serverpod endpoint implementation that returns a custom serializable object, demonstrating how to use custom classes in API endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:relation_test_shared/relation_test_shared.dart';\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<ClassName> getMyCustomClass(Session session) async {\n    return ClassName(\n      'John Doe',\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Multiple Rows in Serverpod using Dart\nDESCRIPTION: Shows how to delete multiple Company rows in a single atomic operation using the 'delete' method. All entries are deleted or none if any fails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.delete(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Getting Public File URL\nDESCRIPTION: This Dart code snippet retrieves the public URL of a file in a public storage using the `session.storage.getPublicUrl` method. It takes the storage ID and file path as input and returns the public URL as a string.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Serverpod Session\nDESCRIPTION: Demonstrates how to access the client's IP address from a MethodCallSession object, including cases where the server is behind a load balancer. The code casts the session to MethodCallSession and uses the remoteIpAddress extension property.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/05-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Using Query Parameters to Prevent SQL Injection in Dart\nDESCRIPTION: Query parameters can be used to prevent SQL injection by utilizing named or positional parameters. This example illustrates both types, showing how to pass parameters safely into SQL queries.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// Named parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = @color AND size = @size',\n  QueryParameters.named({\n    'color': 'green',\n    'size': 'XL',\n  }));\n\n// Positional parameters\nvar result = await db.unsafeQuery(\n  r'SELECT id FROM apparel WHERE color = $1 AND size = $2',\n  QueryParameters.positional(['green', 'XL']),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining AuthKey Table in YAML\nDESCRIPTION: YAML definition for the AuthKey table, which has been moved from Serverpod core to the serverpod_auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Provides a method of access for a user to authenticate with the server.\nclass: AuthKey\ntable: serverpod_auth_key\nfields:\n  ### The id of the user to provide access to.\n  userId: int\n\n  ### The hashed version of the key.\n  hash: String\n\n  ### The key sent to the server to authenticate.\n  key: String?, !persist\n\n  ### The scopes this key provides access to.\n  scopeNames: List<String>\n\n  ### The method of signing in this key was generated through. This can be email\n  ### or different social logins.\n  method: String\nindexes:\n  serverpod_auth_key_userId_idx:\n    fields: userId\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migration in Bash\nDESCRIPTION: Applies the migration by starting the server with the apply-migrations flag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Canceling Future Calls by Identifier\nDESCRIPTION: Shows how to cancel all future calls associated with a specific identifier.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/14-scheduling.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.cancelFutureCall('an-identifying-string');\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Auth Tokens\nDESCRIPTION: Demonstrates how to remove specific authentication tokens using the AuthKey database table\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait AuthKey.db.deleteWhere(\n  session,\n  where: (t) => t.userId.equals(userId) & t.method.equals('username'),\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Record by ID in Dart\nDESCRIPTION: Retrieving a single company record using its ID from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Route Class - Dart\nDESCRIPTION: This snippet illustrates how to create a custom route by extending the WidgetRoute class and overriding the build method to return a specific widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/18-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Test Tools for Serverpod in Bash\nDESCRIPTION: Executes the command to generate the necessary test tools for Serverpod projects, ensuring proper setup for testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Class in YAML for Serverpod\nDESCRIPTION: Example of defining a Company class with various field types in YAML format. Shows supported types including String, DateTime, and List relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Module in generator.yaml\nDESCRIPTION: This code snippet demonstrates how to add the Serverpod authentication module to the config/generator.yaml file. It sets up the module with a nickname for client-side referencing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Adding Passwords Configuration for Tests\nDESCRIPTION: Configures the database and Redis passwords required for the test setup in the appropriate YAML file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Logical OR Operator in Dart\nDESCRIPTION: Shows how to use the logical OR operator to combine multiple conditions in a query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.like('A%') | t.name.like('B%'))\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the Serverpod LSP Server via Command Line\nDESCRIPTION: Command to start the Serverpod Language Server Protocol (LSP) server which provides diagnostics for YAML protocol files. This helps developers identify and resolve potential issues in their protocol files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/09-tools/02-lsp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod language-server\n```\n\n----------------------------------------\n\nTITLE: Default Serverpod Configuration in Dart\nDESCRIPTION: Minimal default configuration used when no custom configuration is provided through environment variables, YAML files, or Dart code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/07-configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nServerpodConfig(\n  apiServer: ServerConfig(\n    port: 8080,\n    publicHost: 'localhost',\n    publicPort: 8080,\n    publicScheme: 'http',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Endpoint Scope Restriction Configuration\nDESCRIPTION: Demonstrates how to implement scope-based access control for endpoints using both login requirement and scope restrictions\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Best Practices for Transaction Management in Dart Tests\nDESCRIPTION: This snippet recommends not implementing manual teardown in tests when using 'withServerpod', as the framework automatically reverts database states post-test through transaction rollbacks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\n  });\n\n  ✅  // Clean up can be omitted since the transaction is rolled back after each by default\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: DateTime Default Values in YAML\nDESCRIPTION: Examples of setting default DateTime values using 'now' keyword and specific UTC datetime strings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndateTimeDefaultNow: DateTime, default=now\ndateTimeDefaultUtc: DateTime, default=2024-05-01T22:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serverpod Module using CLI Command\nDESCRIPTION: This snippet demonstrates how to use the serverpod create command to generate a new custom module. It shows the correct syntax for specifying the module template and naming the module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Documenting Serializable Classes\nDESCRIPTION: Shows how to add inline documentation to a serializable class definition using triple hash '###' to create documentation-style comments. Helps describe class properties and provides additional context to developers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/02-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n\n```\n\n----------------------------------------\n\nTITLE: Removing Serverpod Development Database Docker Container and Data\nDESCRIPTION: This bash command removes the Docker container for the Serverpod development database and deletes all associated data volumes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/01-connection.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values in Serverpod YAML Models\nDESCRIPTION: This YAML snippet demonstrates how to set default values for different field types in Serverpod models, including boolean, DateTime, and double.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nboolDefault: bool, default=true\ndateTimeDefaultNow: DateTime, default=now\ndateTimeDefaultUtc: DateTime, default=2024-05-01T22:00:00.000Z\ndoubleDefault: double, default=10.5\n```\n\n----------------------------------------\n\nTITLE: Generate Client Library with Serverpod CLI\nDESCRIPTION: Command-line instruction to generate client library from server endpoints using Serverpod's code generation tool\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flutter Package Command\nDESCRIPTION: Command for creating a new Flutter package for custom module functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Alternative Google Sign-In Button Implementation\nDESCRIPTION: Flutter implementation with explicit client and server IDs for iOS and Android platforms\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Managing Stream Lifecycle in Dart using Serverpod\nDESCRIPTION: Demonstrates how to create and manually cancel a message stream subscription.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/16-server-events.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nvar subscription = stream.listen((message) {\n    print('Received message: $message');\n});\n\nsubscription.cancel();\n```\n\n----------------------------------------\n\nTITLE: Legacy FromJson Constructor\nDESCRIPTION: Previous implementation of fromJson factory constructor with SerializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n    SerializationManager serializationManager,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod CLI Installation\nDESCRIPTION: Verify the Serverpod CLI installation by running the command, which displays help information\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Registering a HealthCheckHandler in Serverpod (Dart)\nDESCRIPTION: This snippet shows how to register a custom health check handler when initializing a Serverpod instance. By passing the handler during the Serverpod construction, it ensures the health checks are called every minute. The results can be visualized in Serverpod Insights or accessed from the database tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/12-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Database Query Example with Joins\nDESCRIPTION: SQL query example showing table joins with aliased columns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n \"company\".\"id\" AS \"company.id\",\n \"company\".\"name\" AS \"company.name\",\n \"company\".\"townId\" AS \"company.townId\",\n \"company_town_town\".\"id\" AS \"company_town_town.id\",\n \"company_town_town\".\"name\" AS \"company_town_town.name\",\n \"company_town_town\".\"mayorId\" AS \"company_town_town.mayorId\"\nFROM\n \"company\"\nLEFT JOIN\n \"town\" AS \"company_town_town\" ON \"company\".\"townId\" = \"company_town_town\".\"id\"\nORDER BY\n \"company\".\"name\"\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for One-to-One Relationship\nDESCRIPTION: Shows the SQL code generated by Serverpod for setting up a one-to-one relationship between `address` and `user` tables.  Includes the creation of the tables, the unique index, and the foreign key constraint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE \\\"address\\\" (\n    \\\"id\\\" serial PRIMARY KEY,\n    \\\"street\\\" text NOT NULL\n);\n\nCREATE TABLE \\\"user\\\" (\n    \\\"id\\\" serial PRIMARY KEY,\n    \\\"addressId\\\" integer NOT NULL\n);\n\n\nCREATE UNIQUE INDEX \\\"user_address_unique_idx\\\" ON \\\"user\\\" USING btree (\\\"addressId\\\");\n\nALTER TABLE ONLY \\\"user\\\"\n    ADD CONSTRAINT \\\"user_fk_0\\\"\n    FOREIGN KEY(\\\"addressId\\\")\n    REFERENCES \\\"address\\\"(\\\"id\\\")\n    ON DELETE CASCADE\n    ON UPDATE NO ACTION;\"\n```\n\n----------------------------------------\n\nTITLE: Generated Sealed Class Hierarchy\nDESCRIPTION: Example of the Dart classes generated from the sealed class YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nsealed class ParentClass {\n    String name;\n}\n\nclass ChildClass extends ParentClass {\n    String name;\n    int age;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Serverpod CLI\nDESCRIPTION: Command to enable experimental features in Serverpod using the CLI flag. This allows access to all experimental features or specific ones like inheritance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/20-experimental.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate --experimental-features=all\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit One-to-Many Relationship with Object in Serverpod (YAML)\nDESCRIPTION: This snippet shows an explicit definition of a one-to-many relationship using an object relation. The `employee.yaml` file includes a `company` field of type `Company` with the `relation` keyword, explicitly linking employees to a company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum Model with Index-Based Serialization in Serverpod\nDESCRIPTION: Example of creating an enum with Animal values that will be serialized using their index values (default behavior).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Setting Default Google Cloud Project\nDESCRIPTION: This command sets the default Google Cloud project for the Cloud Run service. Replace `<PROJECT_ID>` with your actual Google Cloud project ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"$ gcloud config set project <PROJECT_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Creating a repair migration in Serverpod targeting production\nDESCRIPTION: This bash command creates a repair migration targeting the production database. The `--mode production` option specifies that the command should connect to and pull the live database schema from the production server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create-repair-migration --mode production\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Future Call - Serverpod Dart\nDESCRIPTION: This snippet shows how to register a future call within the main run method of `server.dart`. The `registerFutureCall` method of the Serverpod object is used to register the future call instance with a globally unique name, allowing it to be invoked later.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/14-scheduling.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid run(List<String> args) async {\n  final pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n  );\n\n  ...\n\n  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Password Hash Generation in AuthConfig\nDESCRIPTION: Shows how to override the default password hash generator and validator in the AuthConfig for Serverpod authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nAuthConfig(\n  passwordHashValidator: (\n    password,\n    email,\n    hash, {\n      onError,\n      onValidationFailure,\n    },\n  ) {\n  // Custom hash validator.\n  },\n  passwordHashGenerator: (password) {\n  // Custom hash generator.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship with Object Relation in YAML\nDESCRIPTION: This example simplifies the one-to-one relationship definition by directly specifying an Address type in the User class, enabling automatic handling of the foreign key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# address.yaml\\nclass: Address\\ntable: address\\nfields:\\n  street: String\\n\\n# user.yaml\\nclass: User\\ntable: user\\nfields:\\n  address: Address?, relation // Object relation field\\ndepends:\\nindexes:\\n  user_address_unique_idx:\\n    fields: addressId\\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Test Dependencies Configuration\nDESCRIPTION: Development dependencies configuration for testing in pubspec.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package\n  test: ^1.24.2\n```\n\n----------------------------------------\n\nTITLE: Transforming Strings to Scope Objects in Dart\nDESCRIPTION: This code snippet illustrates converting a list of strings into a set of `Scope` objects in Dart, intended for use with scope-based access control in Serverpod. The function `extractScopes` should extract scope strings from a token. Requires access to the `Scope` class definition and a valid token format.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nList<String> scopes = extractScopes(token);\nSet<Scope> userScopes = scopes.map((scope) => Scope(scope)).toSet();\n```\n\n----------------------------------------\n\nTITLE: Client WebSocket Connection\nDESCRIPTION: Shows how to establish a WebSocket connection from the client to the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Class in Inheritance Model\nDESCRIPTION: YAML definition for a parent class in Serverpod's inheritance system. This establishes the base class that can be extended by child classes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: User Authentication Methods Serverpod Dart\nDESCRIPTION: Demonstrates the usage of static methods for user sign-in and sign-out in Serverpod using the 'UserAuthentication' class from the auth module. Requires authentication session management. Key parameters include 'session' and 'userId'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nUserAuthentication.signInUser(session, userId, 'provider');\n\nUserAuthentication.signOutUser(session);\n```\n\n----------------------------------------\n\nTITLE: Storing Authentication Token in Client Key Manager (Dart)\nDESCRIPTION: This snippet shows how to store a token in the client's authentication key manager with the `put` method in Dart. It demonstrates client-side token management in a Serverpod setup, requiring a pre-configured `AuthenticationKeyManager` instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait client.authenticationKeyManager?.put(token);\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL for Database Connection in YAML\nDESCRIPTION: A YAML configuration example showing how to enable SSL for database connections in the Serverpod configuration file. This is important since RDS enables SSL by default.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: redis.private-production.examplepod.com\n  port: 5432\n  name: serverpod\n  user: postgres\n  requireSsl: true\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization in Serverpod 2.0 in Dart\nDESCRIPTION: Updated custom serialization example in Dart for Serverpod 2.0, which simplifies the fromJson factory constructor by removing the serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod in Production Mode with ID\nDESCRIPTION: This snippet demonstrates how to start the Serverpod server in production mode with a specified server ID. It uses the Dart language to run the application located in the 'bin/main.dart' file with the '--mode' and '--server-id' arguments for configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Registering URL Scheme in info.plist for iOS\nDESCRIPTION: Add the CFBundleURLTypes array to the info.plist file to register the URL scheme for iOS. This allows the app to handle the callback after Google Sign-In.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Using SignInWithFirebaseButton Widget\nDESCRIPTION: Example of using the SignInWithFirebaseButton widget to trigger the Firebase authentication flow in a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithFirebaseButton(\n  caller: client.modules.auth,\n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n  onFailure: () => print('Failed to sign in with Firebase.'),\n  onSignedIn: () => print('Signed in with Firebase.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Starting the Serverpod server\nDESCRIPTION: These commands navigate to the server directory of the 'notes' project, starts the Docker containers defined in `docker-compose.yml`, and then applies database migrations using the Dart runtime. It assumes Docker is installed and running.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes/notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Greater Than or Equal Comparison in Dart\nDESCRIPTION: Demonstrates how to use the greater than or equal operator to fetch users of a certain age or older.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age >= 25\n);\n```\n\n----------------------------------------\n\nTITLE: Using Logical Operators in Filters with Serverpod Dart\nDESCRIPTION: This snippet demonstrates chaining multiple filter conditions using logical operators & and |, applying Serverpod's filtering capabilities in Dart to combine conditions. Suitable for building complex queries, it requires a Dart environment and Serverpod setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.equals('Alice') & (t.age > 25))\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.like('A%') | t.name.like('B%'))\n);\n```\n\n----------------------------------------\n\nTITLE: Building Database Expressions in Dart\nDESCRIPTION: Examples of building type-checked database expressions for queries using various operators.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Filtering by Greater Than in Dart using Serverpod\nDESCRIPTION: This snippet filters users older than a specified age using the '>' operator. Requires a User model with an 'age' column. It fetches users older than 25.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age > 25\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Serverpod Web Server\nDESCRIPTION: Demonstrates how to add single page routes and wildcard routes to the Serverpod web server. Shows both specific path matching and pattern matching with asterisk.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/11-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Configuration\nDESCRIPTION: Configuration setup for email-based authentication including validation and password reset functionality\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send your validation email here.\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send a password reset email here.\n  },\n));\n\n// Start the server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration in Maintenance Role\nDESCRIPTION: This command applies a repair migration using the maintenance role. After migrations are applied, the server exits with a status code indicating success (0) or failure (non-zero).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Multiple Related Objects Include in Serverpod\nDESCRIPTION: Example of including multiple related objects at different levels in a single query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Multiple Rows in Serverpod using Dart\nDESCRIPTION: Demonstrates how to delete multiple rows in a single atomic operation using the delete method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.delete(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Repair migration directory structure\nDESCRIPTION: This text shows the directory structure for repair migrations, consisting of a single SQL file containing the necessary statements to repair the database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n\"├── repair\n│    └── 20230821135718-v1-0-0.sql\"\n```\n\n----------------------------------------\n\nTITLE: Filtered List Relation Count Sorting in Serverpod\nDESCRIPTION: Shows how to sort based on a filtered count of related records using a sub-filter condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(\n    (employee) => employee.role.equals('developer'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod with Custom Mode and Server ID Using Bash\nDESCRIPTION: Command to start a Serverpod server in production mode with a specific server ID. This allows configuring which configuration file to use and how to identify the server in a cluster.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check Handler in Dart\nDESCRIPTION: Creates a custom health check handler function that returns a list of ServerHealthMetric objects. The handler measures custom metrics and returns their status at a given timestamp.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/10-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create your custom health metric handler.\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Server Module Setup Commands\nDESCRIPTION: Command-line instructions for adding a module to a Serverpod project, including dependency retrieval, code generation, and database migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/09-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ serverpod generate\n$ serverpod create-migration\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Explicit One-to-many Object Relation Definition in YAML\nDESCRIPTION: Shows how to explicitly define a one-to-many relationship using an object relation approach, where the Employee entity contains a reference to the Company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation\n```\n\n----------------------------------------\n\nTITLE: Setting Tags for Integration Tests in Dart\nDESCRIPTION: Creates a YAML file to specify tags for integration tests in Dart, supporting selective test execution based on tags.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Classes in YAML Models\nDESCRIPTION: This snippet shows how to reference a serializable class from another module (in this case, the auth module) in a YAML model file. This is useful for using shared data structures across modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/10-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Using CopyWith Method Example\nDESCRIPTION: Dart code example showing usage of generated copyWith method for object copying\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar john = User(name: 'John Doe', age: 25);\nvar jane = john.copyWith(name: 'Jane Doe');\n```\n\n----------------------------------------\n\nTITLE: Custom Index Type Configuration in YAML\nDESCRIPTION: Demonstrates how to specify a custom index type (BRIN in this example) instead of the default btree type. Supports all PostgreSQL index types including btree, hash, gist, spgist, gin, and brin.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/04-indexing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Button in Dart\nDESCRIPTION: Add a Google Sign-In button to the Flutter app, handling successful sign-in and failure cases.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  onSignedIn: () { ... handle sign in here ... },\n  onFailure: () { ... handle fail to sign in here ... },\n)\n```\n\n----------------------------------------\n\nTITLE: Authentication State Testing - Dart\nDESCRIPTION: Example demonstrating how to test both authenticated and unauthenticated scenarios using AuthenticationOverride.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given AuthenticatedExample endpoint', (sessionBuilder, endpoints) {\n  // Corresponds to an actual user id\n  const int userId = 1234;\n\n  group('when authenticated', () {\n    var authenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication:\n          AuthenticationOverride.authenticationInfo(userId, {Scope('user')}),\n    );\n\n    test('then calling `hello` should return greeting', () async {\n      final greeting = await endpoints.authenticatedExample\n          .hello(authenticatedSessionBuilder, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n\n  group('when unauthenticated', () {\n    var unauthenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.unauthenticated(),\n    );\n\n    test(\n        'then calling `hello` should throw `ServerpodUnauthenticatedException`',\n        () async {\n      final future = endpoints.authenticatedExample\n          .hello(unauthenticatedSessionBuilder, 'Michael');\n      await expectLater(\n          future, throwsA(isA<ServerpodUnauthenticatedException>()));\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Transaction with Custom Isolation Level\nDESCRIPTION: Shows how to set a specific isolation level for a transaction using TransactionSettings. This example uses serializable isolation level for maximum consistency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction(\n  (transaction) async {\n    await Company.db.insertRow(session, company, transaction: transaction);\n    await Employee.db.insertRow(session, employee, transaction: transaction);\n  },\n  settings: TransactionSettings(isolationLevel: IsolationLevel.serializable),\n);\n```\n\n----------------------------------------\n\nTITLE: Using Truncate Comment in Docusaurus Blog Post\nDESCRIPTION: Example showing how to use the HTML comment syntax to truncate a blog post in the list view in Docusaurus. This prevents the full content from displaying in list pages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/blog/2019-05-29-long-blog-post.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!--truncate-->\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration in Maintenance Mode\nDESCRIPTION: Command to apply a repair migration using the maintenance role, which exits after completion with a success/failure status code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndart run bin/main.dart --role maintenance --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Legacy Serialization Implementation\nDESCRIPTION: Previous implementation of model serialization requiring SerializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal SerializationManager serializationManager = Protocol();\nfinal ClassName test = ClassName.fromJson(json, serializationManager);\n```\n\n----------------------------------------\n\nTITLE: Defining ImageData Model\nDESCRIPTION: YAML definition for ImageData model that represents the complete image state with pixels and dimensions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ImageData\nfields:\n  pixels: ByteData\n  width: int\n  height: int\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Records in Dart\nDESCRIPTION: Shows how to fetch and combine related records from multiple tables in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.findById(session, id);\n\nvar employees = await Employee.find(\n  session,\n  where: (t) => t.companyId.equals(company.id),\n);\n\ncompany.employees = employees;\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Client to Client Dependencies in YAML\nDESCRIPTION: This YAML snippet shows how to add the serverpod_auth_client dependency to the client's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Configuration\nDESCRIPTION: Server-side configuration for email-based authentication including validation and password reset functionality\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send your validation email here.\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send a password reset email here.\n  },\n));\n\n// Start the server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing copyWith Method\nDESCRIPTION: Method implementation for creating immutable copies of objects with optional field updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nClassName copyWith({\n  String? name,\n}) {\n  return ClassName(\n    name: name ?? this.name,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Stream Session\nDESCRIPTION: Shows how to associate a user object with a streaming session when a stream is opened.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns in Multiple Rows\nDESCRIPTION: Example of updating specific columns in multiple Company records\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name', address: 'Baker Street')).toList();\nvar updatedCompanies = await Company.db.update(session, companies, columns: [Company.t.name]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Logging in YAML for Serverpod\nDESCRIPTION: Demonstrates how to configure session logging behavior in a YAML configuration file for Serverpod, controlling both persistent (database) and console logging.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/09-logging.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsessionLogs:\n  persistentEnabled: true   # Logs are stored in the database\n  consoleEnabled: true      # Logs are output to the console\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Screen in Flutter\nDESCRIPTION: This code creates a loading screen widget in Flutter, which displays either a loading indicator or a 'Try again' button based on the connection state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Old pubspec.yaml Configuration\nDESCRIPTION: Sample configuration of pubspec.yaml showcasing the old Dart SDK version requirement before the upgrade to Dart 3.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=2.19.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Login for Endpoints\nDESCRIPTION: Shows how to restrict endpoint access to authenticated users by overriding the requireLogin property.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Sealed Class Hierarchy\nDESCRIPTION: The resulting Dart classes generated from the sealed class definitions, showing both the sealed parent class and its child class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/20-experimental.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nsealed class ParentClass {\n    String name;\n}\n\nclass ChildClass extends ParentClass {\n    String name;\n    int age;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth Database - Unix\nDESCRIPTION: Docker command to run SQL initialization for auth tables on MacOS & Linux systems.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/01-setup.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run -T --rm postgres env PGPASSWORD=\"<db_password>\" psql -h postgres -U postgres -d <db_name> < generated/tables-auth.pgsql\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Row in Dart with Serverpod\nDESCRIPTION: This Dart snippet shows how to delete a single row from the 'company' table using the `deleteRow` method. It fetches a `Company` object by its ID and then deletes it from the database. The method returns the deleted `Company` object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"var company = await Company.db.findById(session, companyId); // Fetched company has its id set \nvar companyDeleted = await Company.db.deleteRow(session, company);\"\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Status Listener\nDESCRIPTION: Shows how to monitor the WebSocket connection status by adding a listener to the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.addConnectionStatusListener(_chatConnectionStatusChanged);\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod project with the CLI\nDESCRIPTION: Command to regenerate project files to match the latest version of Serverpod, which is necessary when upgrading to 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Launching Serverpod with Custom Mode and Server ID\nDESCRIPTION: Command for starting a Serverpod server in production mode with a specific server ID. This is useful when running multiple servers in a cluster configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Defining ImageUpdate Model in YAML\nDESCRIPTION: Creates a model to represent individual pixel updates, containing the pixel index and new color value for real-time synchronization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ImageUpdate\nfields:\n  pixelIndex: int\n  colorIndex: int\n```\n\n----------------------------------------\n\nTITLE: Note Dialog Implementation in Flutter\nDESCRIPTION: Custom dialog widget for creating and editing notes with a text input field and save functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Cursor for Next Page in Serverpod (Dart)\nDESCRIPTION: This code snippet shows how to return the cursor for the next page along with the data. This is crucial for implementing cursor-based pagination, as it allows the client to request the next set of results.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn {\n'data': companies,\n'nextCursor': companies.last.id,\n};\n```\n\n----------------------------------------\n\nTITLE: UUID Value Configuration\nDESCRIPTION: Shows how to configure random and specific UUID default values\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nuuidDefaultRandom: UuidValue, default=random\nuuidDefaultUuid: UuidValue, default='550e8400-e29b-41d4-a716-446655440000'\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Button in Dart\nDESCRIPTION: This snippet demonstrates how to add a Google Sign-In button to a Flutter app, including success and failure handlers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  onSignedIn: () { ... handle sign in here ... },\n  onFailure: () { ... handle fail to sign in here ... },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Production Repair Migration\nDESCRIPTION: Command to create a repair migration targeting the production database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --mode production\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Module Relation in YAML\nDESCRIPTION: This YAML snippet defines a User model with a relation to the UserInfo model from the auth module. It demonstrates how to create a 'bridge' table/model linking a module's model to a custom one.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Enum Value in Serverpod YAML\nDESCRIPTION: This YAML defines an enum `Animal` with a `default` value of `unknown`. If an unknown value is encountered during deserialization, it will default to `Animal.unknown`. This is useful for maintaining backward compatibility.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\"enum: Animal\nserialized: byName\ndefault: unknown\nvalues:\n - unknown\n - dog\n - cat\n - bird\"\n```\n\n----------------------------------------\n\nTITLE: Signing Out User from All Devices in Serverpod\nDESCRIPTION: This snippet shows how to sign out a user from all devices using the UserAuthentication.signOutUser method. It can be used with a specific user ID or for the currently authenticated user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait UserAuthentication.signOutUser(\n  session,\n  userId: 123,  // Optional: If omitted, the currently authenticated user will be signed out\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod LSP Server via Command Line\nDESCRIPTION: Command to initialize and run the Serverpod Language Server Protocol (LSP) server. This server provides diagnostics for YAML protocol files and enhances the development experience.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/09-tools/02-lsp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod language-server\n```\n\n----------------------------------------\n\nTITLE: Database Operation Management in Tests with Serverpod in Dart\nDESCRIPTION: Demonstrates the appropriate handling of database transactions within Serverpod where explicit database cleanup is unnecessary due to automatic transaction rollback after each test.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\\\\n  var session = sessionBuilder.build();\\\\n\\\\n  setUp(() async {\\\\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\\\\n  });\\\\n\\\\n  tearDown(() async {   \\\\n    await Product.db.deleteWhere( ❌ // Unnecessary clean up\\\\n      session,\\\\n      where: (_) => Constant.bool(true),\\\\n    );\\\\n  });\\\\n\\\\n  // ...\\\\n});\n```\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\\\\n  var session = sessionBuilder.build();\\\\n\\\\n  setUp(() async {\\\\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\\\\n  });\\\\n\\\\n  ✅  // Clean up can be omitted since the transaction is rolled back after each by default\\\\n\\\\n  // ...\\\\n}); \n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Project\nDESCRIPTION: This command generates the Serverpod project, ensuring it's up-to-date with the latest version of Serverpod. It should be run from the `server` package directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Expected Output on Successful Server Start\nDESCRIPTION: This is an example output message you should see in the terminal when the Serverpod server starts successfully, including version info and the ports where the insights and server are listening.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/index.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSERVERPOD version: 1.x.x, mode: development, time: 2022-09-12 17:22:02.825468Z\n```\n\nLANGUAGE: bash\nCODE:\n```\nInsights listening on port 8081\n```\n\nLANGUAGE: bash\nCODE:\n```\nServer default listening on port 8080\n```\n\nLANGUAGE: bash\nCODE:\n```\nWebserver listening on port 8082\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Deletion Method in Flutter\nDESCRIPTION: Helper method to delete a note using Serverpod client endpoint and refresh the notes list. Includes error handling and state management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Domain Name Servers with Dig Command in Bash\nDESCRIPTION: This command uses the 'dig' tool to query the name servers (NS) for a specified domain. It demonstrates how to verify that a domain is correctly pointing to Google's domain name servers after configuring DNS settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dig +short NS examplepod.com\n```\n\n----------------------------------------\n\nTITLE: Table Relation Definition in YAML\nDESCRIPTION: Demonstrates how to create a database relation between tables using the relation keyword, which maintains data synchronization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address?, relation\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Name Like Pattern in Dart\nDESCRIPTION: This snippet demonstrates matching against string entries using the like operator. It fetches users whose names start with 'A', showcasing partial string matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.like('A%')\n);\n```\n\n----------------------------------------\n\nTITLE: Serialization After Serverpod 2.0\nDESCRIPTION: Simplified model serialization in Serverpod 2.0 without serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal ClassName test = ClassName.fromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Limit and Offset Pagination in Serverpod\nDESCRIPTION: Shows how to use both limit and offset parameters together to skip records and implement basic pagination functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n  offset: 30,\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Referential Action Syntax in Serverpod\nDESCRIPTION: Demonstrates the basic syntax for applying referential actions to relations in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelation(onUpdate=<ACTION>, onDelete=<ACTION>)\n```\n\n----------------------------------------\n\nTITLE: Including Related Lists in Serverpod\nDESCRIPTION: Shows how to include a list of related objects (one-to-many relationship) using the includeList method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Note Data Model in YAML\nDESCRIPTION: YAML configuration file defining the Note class structure with a text field. This definition is used by Serverpod's code generator to create the serializable model class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to navigate to server directory and start the Serverpod server\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/02-get-started-with-mini.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Object Relation Default Referential Actions\nDESCRIPTION: Default referential action configuration for object relations in Serverpod, with NoAction for both update and delete operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: Model?, relation(onUpdate=NoAction, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Classes in YAML\nDESCRIPTION: Example of referencing a serializable class from another module in YAML protocol files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator Settings for Test Tools in YAML\nDESCRIPTION: Configuration setting in generator.yaml to specify the path for test tools generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Canceling Future Calls by Identifier in Dart\nDESCRIPTION: This code shows how to cancel all future calls registered with a specific identifier using the cancelFutureCall method. This allows for batch cancellation of related future calls.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/13-scheduling.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.cancelFutureCall('an-identifying-string');\n```\n\n----------------------------------------\n\nTITLE: Database Insert Operation in Dart\nDESCRIPTION: Example of inserting a new row into the database using db.insertRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nmyCompany = await Company.db.insertRow(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: Enum Serialization Modes in YAML\nDESCRIPTION: This YAML snippet modifies the serialization of the 'Animal' enum to use 'byName' instead of the default 'byIndex'. This makes the serialization less dependent on the order of enum values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nserialized: byName\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Data from Storage\nDESCRIPTION: Method to directly retrieve file data from storage on the server side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Serverpod\nDESCRIPTION: This snippet shows how to update a user's scopes using the `Users` class's `updateUserScopes` method. This method is part of the `serverpod_auth_server` package. It allows you to assign or remove scopes for a specific user, providing fine-grained control over access to different parts of your application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Defining Database-Only Fields in YAML for Serverpod\nDESCRIPTION: This example shows how to define fields that are stored in the database but not sent to the server, using the 'database' flag in the YAML definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String, database\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Flutter Package for a Serverpod Module\nDESCRIPTION: This bash command shows how to use 'flutter create' to create a new Flutter package, which can be used to add custom Flutter code to a Serverpod module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/10-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Name Set\nDESCRIPTION: Shows how to use inSet to match users against multiple names in a single query\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.inSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server with Dart in Bash\nDESCRIPTION: This command starts the test server for the Serverpod project using Dart. It requires the Dart SDK to be installed and accessible in the system's PATH. The script is executed from the `serverpod_test_server` directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/06-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Add shared package as dependency in pubspec.yaml\nDESCRIPTION: This snippet shows how to add the new dart package as a dependency in both `my_project_server/pubspec.yaml` and `my_project_client/pubspec.yaml`. This allows both the server and client to access the shared classes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  my_project_shared:\n    path: ../my_project_shared\n  ...\n```\n\n----------------------------------------\n\nTITLE: Defining a many-to-many self-relation in Serverpod with YAML (Blocking)\nDESCRIPTION: This YAML configuration defines the `Blocking` class, which serves as a junction table for the many-to-many self-referential relationship between members. It has fields `blocked` and `blockedBy`, both referencing the `Member` class. A unique index `blocking_blocked_unique_idx` ensures that each blocking relationship is only recorded once.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nclass: Blocking\ntable: blocking\nfields:\n  blocked: Member?, relation(name=member_blocking_me, onDelete=Cascade)\n  blockedBy: Member?, relation(name=member_blocked_by_me, onDelete=Cascade)\nindexes:\n  blocking_blocked_unique_idx:\n    fields: blockedId, blockedById\n    unique: true\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter App Dependencies\nDESCRIPTION: Configuration in Flutter app's pubspec.yaml to add auth-related Flutter package dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/08-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Module Dependencies - Server Configuration\nDESCRIPTION: Example of adding serverpod_auth_server module dependency to the server's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Authentication Login\nDESCRIPTION: Method for allowing existing users to sign in with their email and password using the EmailAuthController.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.signIn(email, password);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serverpod Module (Bash)\nDESCRIPTION: This command creates a new Serverpod module using the serverpod create command with the module template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/10-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign In with Explicit Client IDs in Flutter\nDESCRIPTION: Alternative Dart implementation of the SignInWithGoogleButton that provides client and server IDs explicitly instead of using JSON configuration files. This approach works for iOS and Android platforms.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Integration Tests in Dart\nDESCRIPTION: Demonstrates how to write an integration test using the generated Serverpod test tools, including importing the tools and using the withServerpod helper function.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:test/test.dart';\n\n// Import the generated file, it contains everything you need.\nimport 'test_tools/serverpod_test_tools.dart';\n\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    test('when calling `hello` then should return greeting', () async {\n      final greeting = await endpoints.example.hello(sessionBuilder, 'Michael');\n      expect(greeting, 'Hello Michael');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new migration for a Serverpod project\nDESCRIPTION: Command to create an initial migration for a project being upgraded to Serverpod 1.2. This is required to initialize the migration system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features via Command Line\nDESCRIPTION: Command for enabling experimental features in Serverpod by using the --experimental-features flag when running serverpod commands.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate --experimental-features=all\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Series of commands for creating and applying database migrations for auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --build --detach\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Adding Pixels Package to Flutter Project\nDESCRIPTION: Command to add the Pixels package to the Flutter project for drawing functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd pixorama_flutter\nflutter pub add pixels\n```\n\n----------------------------------------\n\nTITLE: Catching Serialized Exception in Client\nDESCRIPTION: Client-side code showing how to catch and handle the custom serializable exception. Includes specific exception handling for MyException and a general catch block for other errors.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  client.example.doThingy();\n}\non MyException catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Widget in Serverpod\nDESCRIPTION: Extends the `Widget` class to create a custom widget that renders a specific web page.  The constructor sets the `name` and initializes the `values` field, which is used to pass parameters to the HTML template.  These values are converted to strings before being passed to the template engine.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/18-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Simple Index in YAML for Serverpod\nDESCRIPTION: Demonstrates how to add a basic index on a single field (name) for a Company table. This improves query performance for searches on the company name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration to Deploy Infrastructure\nDESCRIPTION: This command applies the Terraform configuration to deploy the infrastructure on Google Cloud. It prompts for database passwords and requires the configuration files to be properly set up before execution. The initialization and deployment process can take several minutes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Dart\nDESCRIPTION: This method checks if the user is signed in by accessing the 'isUserSignedIn' property of the Session object, allowing for conditional logic based on user authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Pixorama Widget User Interface\nDESCRIPTION: Implements the build method for the Pixorama widget, creating the user interface for pixel drawing and handling user interactions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: _imageController == null\n          ? const CircularProgressIndicator()\n          : PixelEditor(\n              controller: _imageController!,\n              onSetPixel: (details) {\n                // When a user clicks a pixel we will get a callback from the\n                // PixelImageController, with information about the changed\n                // pixel. When that happens we call the setPixels method on\n                // the server.\n                client.pixorama.setPixel(\n                  pixelIndex: details.tapDetails.index,\n                  colorIndex: details.colorIndex,\n                );\n              },\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixel Update Method in Serverpod Endpoint\nDESCRIPTION: Handles individual pixel updates by validating input, updating server-side pixel data, and broadcasting changes to all connected clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> setPixel(\n  Session session, {\n  required int colorIndex,\n  required int pixelIndex,\n}) async {\n  if (colorIndex < 0 || colorIndex >= _numColorsInPalette) {\n    throw FormatException('colorIndex is out of range: $colorIndex');\n  }\n  if (pixelIndex < 0 || pixelIndex >= _numPixels) {\n    throw FormatException('pixelIndex is out of range: $pixelIndex');\n  }\n\n  _pixelData[pixelIndex] = colorIndex;\n\n  session.messages.postMessage(\n    _channelPixelAdded,\n    ImageUpdate(\n      pixelIndex: pixelIndex,\n      colorIndex: colorIndex,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: YouTube Embed HTML Iframe for Community Update\nDESCRIPTION: HTML markup for embedding a YouTube video with responsive styling for the July 2022 community update.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/02-support.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position : 'relative', paddingBottom : '56.25%', height : '0' }}><iframe style={{ position : 'absolute', top : '0', left : '0', width : '100%', height : '100%' }} width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/4xMAZJ9Em_I\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server-Side TLS/SSL in Serverpod\nDESCRIPTION: Demonstrates how to set up SSL/TLS security on the server side by configuring SecurityContextConfig and passing it to the Serverpod constructor. Shows certificate chain and private key configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/21-security-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal securityContext = SecurityContext()\n  ..useCertificateChain('path/to/server_cert.pem')\n  ..usePrivateKey('path/to/server_key.pem', password: 'password');\n\nServerpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  securityContextConfig: SecurityContextConfig(\n    apiServer: securityContext,\n    webServer: securityContext,\n    insightsServer: securityContext,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Exception in YAML\nDESCRIPTION: YAML configuration for creating a custom serializable exception with message and error type fields. This defines the structure of an exception that can be serialized between server and client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: New Model Syntax - scope Field\nDESCRIPTION: This code snippet shows the new syntax for defining a server-only field using the `scope` keyword with the value `serverOnly` in Serverpod model files. It replaces the deprecated `database` keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, scope=serverOnly\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Credentials in YAML\nDESCRIPTION: This YAML snippet demonstrates how to add AWS credentials to the 'passwords.yaml' file. These credentials are necessary for the S3 configuration to work and should be created from the AWS console when signed in as the root user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Running a Serverpod Server\nDESCRIPTION: Commands to navigate to the server directory and start the Serverpod server along with Postgres and Redis using Docker. This launches the complete development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\nserverpod run\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Widget Implementation\nDESCRIPTION: Loading screen component that displays either a loading indicator or error message with retry option.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Production Mode Repair Migration Command\nDESCRIPTION: Command to create a repair migration targeting the production database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --mode production\n```\n\n----------------------------------------\n\nTITLE: Finding Database Records in Dart\nDESCRIPTION: Examples of querying database records using both ID and expressions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Direct File Retrieval from Server\nDESCRIPTION: Server-side method to directly retrieve file data from storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Imports in Serverpod Tests - Don't Pattern\nDESCRIPTION: Shows incorrect import pattern by directly importing serverpod_test package alongside test tools, which creates redundant imports.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'serverpod_test_tools.dart';\n// Don't import `serverpod_test` directly.\nimport 'package:serverpod_test/serverpod_test.dart'; ❌\n```\n\n----------------------------------------\n\nTITLE: Canceling Future Calls by Identifier in Serverpod\nDESCRIPTION: This code shows how to cancel all future calls registered with a specific identifier using the cancelFutureCall method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/14-scheduling.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.cancelFutureCall('an-identifying-string');\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button UI in ListTile\nDESCRIPTION: Implementation of a delete button in a ListTile widget that removes the note locally and triggers the server deletion. Updates UI state immediately for better responsiveness.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Module Package\nDESCRIPTION: Shows how to create a Flutter package for additional custom Flutter code in a module\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/06-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Serverpod Endpoint\nDESCRIPTION: Example of creating an endpoint class with a simple method that returns a greeting. Endpoints must extend the Endpoint class and methods must have a Session parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Client Code\nDESCRIPTION: This bash command uses the serverpod generate tool to create client code and endpoint methods for the auth module, ensuring proper integration with the server code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns for Multiple Rows in Dart with Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to update specific columns of multiple rows in the 'company' table using the `update` method and the `columns` parameter. It retrieves all `Company` objects, modifies their names and addresses, but only updates the names in the database. The method returns a list of the updated `Company` objects with only the specified columns updated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"var companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name', address: 'Baker Street')).toList();\nvar updatedCompanies = await Company.db.update(session, companies, columns: (t) => [t.name]);\"\n```\n\n----------------------------------------\n\nTITLE: Notes State Management in Flutter\nDESCRIPTION: State variables for managing notes and potential connection exceptions in the application\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Company Model in YAML\nDESCRIPTION: This YAML snippet defines the structure of the 'Company' model. It specifies that the 'Company' model has a table named 'company' and a 'name' field of type String. This model is used in the examples to demonstrate CRUD operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\ntable: company\nfields:\n  name: String\"\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration in Serverpod with Default Role\nDESCRIPTION: This command applies a repair migration using the server runtime with the default role. The repair migration is applied as part of the startup sequence, and the framework ensures each repair migration is only applied once to the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Client to Client Dependencies (YAML)\nDESCRIPTION: This snippet shows how to add the serverpod_auth_client dependency to the client's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/10-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Authentication Dependencies Configuration\nDESCRIPTION: YAML configuration for adding authentication-related dependencies to a Flutter app\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Serverpod\nDESCRIPTION: Demonstrates how to retrieve detailed user information using the Users class in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom HealthCheckHandler in Dart\nDESCRIPTION: This code snippet demonstrates how to create a custom health metric handler in Serverpod by defining a function that returns a list of ServerHealthMetric objects. This function should perform necessary checks and return metrics with attributes like name, serverId, timestamp, health status, and value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/12-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create your custom health metric handler.\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updated Database Delete Operations\nDESCRIPTION: Shows the new return types for database delete operations in Serverpod 2.0\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nCompany company = await Company.db.deleteRow(session, company);\nList<Company> companies = await Company.db.delete(session, [company]);\nList<Company> companies = await Company.db.deleteWhere(session, where: (t) => t.name.like('%Ltd'));\n```\n\n----------------------------------------\n\nTITLE: Logging with Exception and Stack Trace in Serverpod (Dart)\nDESCRIPTION: Shows how to log a message with additional parameters such as log level, exception, and stack trace. This is useful for more detailed error logging and debugging.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Related Lists in Serverpod\nDESCRIPTION: Shows how to filter included lists using where clause with conditions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      where: (t) => t.name.ilike('a%')\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Dart SDK Version in pubspec.yaml\nDESCRIPTION: This code snippet depicts the changes required in the pubspec.yaml file to update the Dart SDK version to 3.0.0. It ensures compatibility with the new Serverpod version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=2.19.0 <4.0.0'\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Infrastructure Changes\nDESCRIPTION: Command to apply the Terraform configuration and deploy the infrastructure. This process takes approximately 15 minutes to complete.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Applying Referential Actions in Serverpod YAML Configuration\nDESCRIPTION: Demonstrates the syntax for applying referential actions to relations in Serverpod. The example shows how to set onUpdate and onDelete actions for a relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelation(onUpdate=<ACTION>, onDelete=<ACTION>)\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Password in YAML\nDESCRIPTION: This YAML snippet stores the password for the database in a `passwords.yaml` file. The password is used in the development environment configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages from Flutter Client to Server\nDESCRIPTION: Shows how to send serialized messages from a Flutter client to a server endpoint through the established WebSocket connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/09-streams.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hash Pepper in YAML\nDESCRIPTION: This YAML snippet shows how to configure a password hash pepper in the config/passwords.yaml file for additional security.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  emailPasswordPepper: 'your-pepper'\n```\n\n----------------------------------------\n\nTITLE: Attaching Single Row in Serverpod Relations\nDESCRIPTION: Shows how to link an individual employee to a company using attachRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attachRow.employees(session, company!, employee!);\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod in Production Mode\nDESCRIPTION: This snippet demonstrates how to start the Serverpod server in production mode with a specified server id. It uses Dart as the programming language and requires the Dart SDK to be installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/05-deployments/02-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Explicit One-to-Many Relationship with Object Relation\nDESCRIPTION: Shows how to explicitly define a one-to-many relationship using an object relation approach where the Employee references the Company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation\n```\n\n----------------------------------------\n\nTITLE: Import S3 Package (Dart)\nDESCRIPTION: This snippet shows how to import the S3 package in a Dart file for Serverpod to enable cloud storage with AWS S3.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_s3/serverpod_cloud_storage_s3.dart'\n    as s3;\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test\nDESCRIPTION: Command to run a specific test file in the Serverpod package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/06-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/serverpod\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube API with Google Client on Server\nDESCRIPTION: Retrieve an authenticated Google client for a user and interact with the YouTube API to fetch playlist items\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar googleClient = await authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youtubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n}\nelse {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server Docker Environment - Bash Commands\nDESCRIPTION: Commands to initialize the Docker test environment and setup database tables\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/10-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server/docker-local\n$ docker-compose up --build --detach\n$ ./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Migrating to SerializableModel Interface\nDESCRIPTION: Updated example showing how to implement the SerializableModel interface instead of extending SerializableEntity for creating serializable models in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements SerializableModel {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Serverpod Test Server\nDESCRIPTION: Commands to navigate to the test server directory and start the server. This needs to be running before executing individual tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/07-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Serializable Classes in generator.yaml\nDESCRIPTION: Configuration example showing how to declare custom serializable classes in the generator.yaml file so they're available to both server and client packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nextraClasses:\n  - package:my_project_shared/my_project_shared.dart:ClassName\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row Using ID in Dart\nDESCRIPTION: This snippet demonstrates locating a single database row using a specific `id` with Serverpod in Dart. Provides `null` when no row matches.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands in Bash\nDESCRIPTION: This snippet demonstrates the commands needed to update dependencies and generate code after adding a new module. It shows how to use dart pub get and serverpod generate in the server directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth_server to Server's pubspec.yaml\nDESCRIPTION: This YAML snippet shows how to add the serverpod_auth_server dependency to a Serverpod server project's pubspec.yaml file. The dependency is set to version ^0.9.x to ensure compatibility with the current Serverpod version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to Serverpod Models\nDESCRIPTION: Example showing how to add documentation to serializable objects and their fields using triple hash (###) comments that will be included in the generated code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Flutter Module Dependencies\nDESCRIPTION: Adding Flutter-specific module packages to pubspec.yaml for authentication modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/09-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Stream\nDESCRIPTION: Demonstrates how to associate a user object with a streaming session when a stream is opened.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Cloud Storage in Serverpod\nDESCRIPTION: Implementation for adding and configuring an S3 storage backend to Serverpod with custom domain support.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Index in YAML for Serverpod\nDESCRIPTION: Shows how to create an index on multiple fields (name and foundedAt) for a Company table. This can improve performance for queries that filter or sort by both company name and founding date.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n```\n\n----------------------------------------\n\nTITLE: Updating the Serverpod CLI via Dart pub\nDESCRIPTION: Commands to update the Serverpod command line interface to the latest version and verify the installed version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nserverpod version\n```\n\n----------------------------------------\n\nTITLE: Defining Database Mappings in YAML\nDESCRIPTION: This YAML snippet defines a serializable class 'Company' that includes a mapping to the 'company' database table, specifying its fields and types. This mapping enables Serverpod to automatically handle database operations for instances of the class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\n  table: company\n  fields:\n    name: String\n    foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Adding Module Nickname Configuration - YAML\nDESCRIPTION: Configures a nickname for the authentication module in the project's generator file to be used in the code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Serverpod\nDESCRIPTION: Bash command to execute all tests in the Serverpod repository\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/11-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ util/run_tests\n```\n\n----------------------------------------\n\nTITLE: Retrieving RDS Database URL in Bash\nDESCRIPTION: This command retrieves the URL for the RDS database instance using the AWS CLI. It's used to configure the database connection in the Serverpod configuration files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws rds describe-db-instances --db-instance-identifier ${YOUR_DB_INSTANCE_ID} | jq \".DBInstances.[0].Endpoint.Address\" -r\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollback Behavior in Serverpod Tests\nDESCRIPTION: This snippet provides an enumeration of rollback options available during the test lifecycle, each affecting how and when the database state is reset after test execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nenum RollbackDatabase {\n  afterEach,\n  afterAll,\n  disabled,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Types in YAML\nDESCRIPTION: Example of defining enums with byName and byIndex serialization modes, including value definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByNameEnum\nserializedFoo: byName\nvalues:\n  - byName1\n  - byName2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByIndexEnum\nserialized: byIndex\nvalues:\n  - byIndex1\n  - byIndex2\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Class Structure in YAML\nDESCRIPTION: Example of defining a Company class with various field types including String, DateTime, and List. Shows basic YAML structure for Serverpod's native serialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Handling Revoked Authentication in Serverpod\nDESCRIPTION: Example showing how to notify the server when a user's authentication is revoked, including specifying the user ID and scopes to be revoked.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = 1;\nvar revokedScopes = ['write'];\nvar message = RevokedAuthenticationScope(\n  scopes: revokedScopes,\n);\n\nawait session.messages.authenticationRevoked(\n  userId,\n  message,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Database Migrations in Bash\nDESCRIPTION: These bash commands create a new database migration and apply it to incorporate module-related schema changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Deployment Response\nDESCRIPTION: Example of a successful response when testing a Serverpod deployment by accessing the API endpoint. The response includes 'OK' followed by a timestamp.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Restricting Access to Serverpod Endpoints\nDESCRIPTION: This Dart snippet shows how to restrict access to a Serverpod endpoint by requiring user login. It overrides the `requireLogin` property and, optionally, specifies required user scopes using `requiredScopes`. The `serverpod_auth_server` package is used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  ...\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Repair Migration in Normal Mode\nDESCRIPTION: Command to apply a repair migration during normal server startup using the --apply-repair-migration flag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Monitoring WebSocket Connection Status in Flutter\nDESCRIPTION: Code to add a connection status listener to monitor the state of the WebSocket connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.addConnectionStatusListener(_chatConnectionStatusChanged);\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Freezed Custom Class\nDESCRIPTION: YAML configuration for declaring a Freezed-based custom serializable class in the Serverpod generator config file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Complete Default Values Example in YAML\nDESCRIPTION: Comprehensive example showing various default value configurations including DateTime, boolean, integer, double, and string fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nclass: DefaultValue\ntable: default_value\nfields:\n  dateTimeDefault: DateTime, default=now\n  boolDefault: bool, defaultModel=false, defaultPersist=true\n  intDefault: int, defaultPersist=20\n  doubleDefault: double, default=10.5, defaultPersist=20.5\n  stringDefault: String, default=\"This is a string\", defaultModel=\"This is a string\"\n```\n\n----------------------------------------\n\nTITLE: Starting Database Container in Bash\nDESCRIPTION: Starts the database container from the server project using Docker Compose.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Child Class\nDESCRIPTION: Example of the Dart class generated from the YAML inheritance configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass ChildClass extends ParentClass {\n    String name\n    int age\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Stream in Dart\nDESCRIPTION: Illustrates creating a stream to listen to messages on a specific channel with automatic message processing\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nstream.listen((message) {\n    print('Received message: $message');\n})\n```\n\n----------------------------------------\n\nTITLE: Client Endpoint Usage\nDESCRIPTION: Example of calling the endpoint method from the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Optional One-to-One Relationship in YAML\nDESCRIPTION: Demonstrates how to configure an optional one-to-one relationship where the foreign key can be null, using the optional keyword in the relation definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation(optional)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Direct File Retrieval from Storage\nDESCRIPTION: Method to directly retrieve file data from storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Join Query Example\nDESCRIPTION: Example of a SQL query performing a join operation between company and town tables\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n \"company\".\"id\" AS \"company.id\",\n \"company\".\"name\" AS \"company.name\",\n \"company\".\"townId\" AS \"company.townId\",\n \"company_town_town\".\"id\" AS \"company_town_town.id\",\n \"company_town_town\".\"name\" AS \"company_town_town.name\",\n \"company_town_town\".\"mayorId\" AS \"company_town_town.mayorId\"\nFROM\n \"company\"\nLEFT JOIN\n \"town\" AS \"company_town_town\" ON \"company\".\"townId\" = \"company_town_town\".\"id\"\nORDER BY\n \"company\".\"name\"\n```\n\n----------------------------------------\n\nTITLE: Basic Message Logging in Serverpod\nDESCRIPTION: Demonstrates how to log a simple message using the session object's log method. The message will be stored in the database when the session completes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/08-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Serverpod Using Session\nDESCRIPTION: This snippet demonstrates how to cast the Session object to a MethodCallSession and access the client's IP address. This works even when the server is behind a load balancer thanks to Serverpod's extension on the HttpRequest object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/05-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Relational Objects in Serverpod Query (Dart)\nDESCRIPTION: Demonstrates how to include multiple relational objects in a single Serverpod query. This example includes the employee's address, company, and the company's address.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Name Descending - Dart\nDESCRIPTION: Fetches all companies from the database and sorts them in descending order by their name using the 'orderBy' and 'orderDescending' parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n  orderDescending: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Throwing a Serializable Exception from Server Endpoint\nDESCRIPTION: Example of how to throw a serializable exception from a server endpoint. The exception includes custom data that will be serialized and sent to the client, providing more context about the error that occurred.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Enum with Name-Based Serialization\nDESCRIPTION: Example of defining an enum that uses string-based serialization rather than index-based. This is recommended as it's less fragile when changing enum values order.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nserialized: byName\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Adding Client Dependencies in YAML\nDESCRIPTION: Configuration for adding serverpod_auth_client module dependency to the client's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Custom User Lookup in Serverpod Database\nDESCRIPTION: Shows how to perform custom user lookups directly in the database using the UserInfo model, demonstrating finding a user by their full name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await UserInfo.db.findFirstRow(\n  session,\n  where: (t) => t.fullName.equals(name),\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services for Testing\nDESCRIPTION: Starts the PostgreSQL and Redis Docker containers for testing using docker-compose.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Database Query with Expression in Dart\nDESCRIPTION: Example of querying the database using db.findFirstRow with a where expression builder.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features via Command Line\nDESCRIPTION: Command line usage for enabling experimental features in Serverpod using the --experimental-features flag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate --experimental-features=all\n```\n\n----------------------------------------\n\nTITLE: Initializing Notes Load on App Start\nDESCRIPTION: Overrides initState to trigger notes loading when the widget is first created\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Database Password Configuration in YAML\nDESCRIPTION: Database password configuration stored in passwords.yaml file for development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n\n...\n```\n\n----------------------------------------\n\nTITLE: User Logout Endpoint\nDESCRIPTION: Creates a logout method to remove all authentication tokens for a user\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass AuthenticatedEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n  Future<void> logout(Session session) async {\n    await session.auth.signOutUser();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Related Entries Count\nDESCRIPTION: Shows how to filter users based on the number of related entries using the count method\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count() > 3\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Domain Name Server Setup with Bash\nDESCRIPTION: This snippet demonstrates how to test if a domain is correctly pointing to Google's name servers using the 'dig' command in Bash. Ensure you have the 'dig' command available on your system. Replace 'examplepod.com' with your domain name. It outputs the domain name servers that should match Google's servers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dig +short NS examplepod.com\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-Many Relation Definition with YAML (Object Relation)\nDESCRIPTION: Defines a bidirectional relationship between Company and Employee classes using object relations on both sides to represent the link.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation(name=company_employees)\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row by ID in Serverpod\nDESCRIPTION: This Dart code demonstrates how to find a single row in the database by its ID using the findById method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query Execution\nDESCRIPTION: Shows how to execute raw SQL queries when needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget Route in Serverpod\nDESCRIPTION: Implementation of a custom WidgetRoute class by overriding the build method. Shows how to handle HTTP requests and return widgets based on session data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/11-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Message from Client to Server (Dart)\nDESCRIPTION: Shows how to send a serialized message from the client to a server endpoint through the established stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/14-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Deprecated Sign-out Method in Dart\nDESCRIPTION: Shows the deprecated sign-out method that should be replaced with newer alternatives.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: This command initializes the Google Cloud CLI, allowing you to interact with Google Cloud services from your terminal. It prompts you to log in and select a project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ gcloud init\"\n```\n\n----------------------------------------\n\nTITLE: Canceling Message Stream in Dart\nDESCRIPTION: Demonstrates manually closing a message stream by canceling its subscription\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nvar subscription = stream.listen((message) {\n    print('Received message: $message');\n});\n\nsubscription.cancel();\n```\n\n----------------------------------------\n\nTITLE: Basic Message Logging in Serverpod\nDESCRIPTION: Demonstrates how to log a simple message using the session object's log method. The message will be stored in the serverpod_log table when the session completes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Creating One-to-One Relation with Module UserInfo\nDESCRIPTION: Demonstrates how to create a relation to a module's UserInfo table with an optional reference using YAML configuration. Shows two approaches: direct module reference and table ID reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfoId: int, relation(parent=serverpod_user_info)\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Database Query Migration Example\nDESCRIPTION: Example of a complex SQL query showing the structure used in database operations with table joins and column aliases.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n \"company\".\"id\" AS \"company.id\",\n \"company\".\"name\" AS \"company.name\",\n \"company\".\"townId\" AS \"company.townId\",\n \"company_town_town\".\"id\" AS \"company_town_town.id\",\n \"company_town_town\".\"name\" AS \"company_town_town.name\",\n \"company_town_town\".\"mayorId\" AS \"company_town_town.mayorId\"\nFROM\n \"company\"\nLEFT JOIN\n \"town\" AS \"company_town_town\" ON \"company\".\"townId\" = \"company_town_town\".\"id\"\nORDER BY\n \"company\".\"name\"\n```\n\n----------------------------------------\n\nTITLE: Model definition with new '!persist' keyword\nDESCRIPTION: Updated model definition using the new '!persist' keyword which replaces the deprecated 'api' keyword to mark fields that shouldn't be persisted to the database in Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Module to pubspec.yaml\nDESCRIPTION: This snippet demonstrates how to add the serverpod_auth_server module dependency to your project's pubspec.yaml file. The added dependency will allow your server to utilize functionality from the serverpod_auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"dependencies:\\n  serverpod_auth_server: ^0.9.x\"\n```\n\n----------------------------------------\n\nTITLE: Manual Stream Cancellation in Dart\nDESCRIPTION: This block demonstrates how to manually cancel a stream subscription to stop receiving messages. By calling `cancel` on the subscription, the stream listener is deactivated even though the session may still be open.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/16-server-events.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nvar subscription = stream.listen((message) {\n    print('Received message: $message');\n});\n\nsubscription.cancel();\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Database Connection\nDESCRIPTION: YAML configuration for connecting Serverpod to Cloud SQL PostgreSQL database using Unix socket\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  isUnixSocket: true\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\n  port: 5432\n  name: serverpod\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: YAML configuration for AWS credentials required for S3 storage integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Creating Full Serverpod Configuration\nDESCRIPTION: Command to upgrade an existing Serverpod Mini installation to the full version by generating required configuration files in the current directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/01-upgrade-from-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create .\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Class in YAML Model\nDESCRIPTION: Example of creating a base class with a single field in a Serverpod model file, serving as a parent for inheritance\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/20-experimental.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Deployment\nDESCRIPTION: Commands to initialize and apply Terraform configuration for AWS infrastructure deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization Before Serverpod 2.0 in Dart\nDESCRIPTION: Example of custom serialization in Dart before Serverpod 2.0, which required the serializationManager parameter in the fromJson factory constructor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n    SerializationManager serializationManager,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining a Serverpod Model\nDESCRIPTION: YAML code defining a 'Company' model with fields for name, founding date, and employees.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/02-get-started-with-mini.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<String>\n```\n\n----------------------------------------\n\nTITLE: Defining Course Table with Many-to-Many Relationship in Serverpod\nDESCRIPTION: YAML configuration for the Course table showing the relationship with Enrollment table. Includes a field for course name and a list of enrollments with a named relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Course\ntable: course\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=course_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation\nDESCRIPTION: Client-side code demonstrating the complete file upload process including getting upload description, uploading file data, and verifying the upload.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Serverpod Project and Starting Server\nDESCRIPTION: Commands to create a new Serverpod project named 'notes' and start the server using Docker and Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes/notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Exception Handling in Serverpod\nDESCRIPTION: Shows how to log messages with additional parameters including custom log levels, exceptions, and stack traces. This is useful for error handling and debugging.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Rolling Back to a Savepoint in Dart with Serverpod Transactions\nDESCRIPTION: Demonstrates how to roll back to a previously created savepoint within a Serverpod database transaction. This example preserves the company insertion but rolls back the employee insertion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  // Changes preserved in the database\n  await Company.db.insertRow(session, company, transaction: transaction);\n  \n  // Create savepoint\n  var savepoint = await transaction.createSavepoint();\n\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n  // Changes rolled back \n  await savepoint.rollback();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube API using Google Auth Client on Serverpod Server\nDESCRIPTION: This example shows how to use the GoogleAuth.authClientForUser method to create an authenticated client for making Google API calls on behalf of a user. It then uses this client with the googleapis package to fetch the user's liked videos from YouTube.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Authorization Scopes in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to implement custom scopes to restrict endpoint access by specifying required custom scopes in the requiredScopes property.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Future Call Class with Serverpod\nDESCRIPTION: Defines a new future call by extending the FutureCall class in Serverpod. This snippet showcases the implementation of the invoke method, which executes the task when called. It requires importing Serverpod and is dependent on a session and an optional SerializableModel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/13-scheduling.md#2025-04-20_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleFutureCall extends FutureCall<MyModelEntity> {\n  @override\n  Future<void> invoke(Session session, MyModelEntity? object) async {\n    // Do something interesting in the future here.\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listener Management in Dart\nDESCRIPTION: This code provides a way to manage listeners by adding and subsequently removing them from a message channel. Using predefined callbacks, `addListener` and `removeListener` can control when the listener is active.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/16-server-events.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myListenerCallback = (message) {\n  print('Received message: $message');\n};\n// Register the listener\nsession.messages.addListener('user_updates', myListenerCallback);\n\n// Remove the listener\nsession.messages.removeListener('user_updates', myListenerCallback);\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod with Custom Mode and Server ID\nDESCRIPTION: Command to start Serverpod in production mode with a specific server ID. This allows you to specify which configuration file to use and identify the server in a cluster.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Firebase Auth in Flutter\nDESCRIPTION: This Bash script adds the serverpod_auth_firebase_flutter package to a Flutter project. This package simplifies the integration of Firebase authentication with Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add serverpod_auth_firebase_flutter\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Server Dependency\nDESCRIPTION: This shell command adds the serverpod_auth_server package as a dependency in the server project's pubspec.yaml file. Ensure to match the version of Serverpod in use.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ dart pub add serverpod_auth_server\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration in Serverpod\nDESCRIPTION: This command applies a repair migration using the server runtime. The repair migration is applied as part of the startup sequence, and the framework ensures each repair migration is only applied once to the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Endpoint Login Requirement Configuration\nDESCRIPTION: Shows how to restrict endpoint access to authenticated users by overriding the requireLogin property\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RollbackDatabase Enum in Dart\nDESCRIPTION: Enumerates options for rolling back the database during tests in Serverpod. Different strategies include afterEach, afterAll, or disabling rollbacks. This enum allows developers to configure database state persistence for specific test scenarios.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nenum RollbackDatabase {\n  /// After each test. This is the default.\n  afterEach,\n\n  /// After all tests.\n  afterAll,\n\n  /// Disable rolling back the database.\n  disabled,\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Row by ID in Dart with Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to retrieve a single row from the 'company' table based on its ID using the `findById` method.  The `companyId` variable represents the ID of the row to retrieve. The method returns the `Company` object if found, otherwise it returns `null`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"var company = await Company.db.findById(session, companyId);\"\n```\n\n----------------------------------------\n\nTITLE: Complete AWS Installation Dependencies Script\nDESCRIPTION: Full bash script for installing and configuring Dart SDK on AWS EC2 instances, including systemd service setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nDART_VERSION=3.5.1\n\nif [ -f \"/etc/profile.d/script.sh\" ]; then\n    sudo rm /etc/profile.d/script.sh\nfi\n\nif [ ! -d \"/usr/lib/dart$DART_VERSION\" ]; then\n  wget -q https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-x64-release.zip -P /tmp\n  cd /tmp || exit\n  unzip -q dartsdk-linux-x64-release.zip\n  sudo mv dart-sdk/ /usr/lib/dart$DART_VERSION/\n  sudo chmod -R 755 /usr/lib/dart$DART_VERSION/\n  rm -rf dartsdk-linux-x64-release.zip\nfi\n\nsudo ln -sf \"/usr/lib/dart$DART_VERSION/bin/dart\" /usr/local/bin/dart\n\ncat > /lib/systemd/system/serverpod.service << EOF\n[Unit]\nDescription=Serverpod server\nAfter=multi-user.target\n\n[Service]\nUser=ec2-user\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/serverpod/active/mypod_server/deploy/aws/scripts/run_serverpod\nRestart=always\n\n[Install]\nWantedBy=muti-user.target\nWantedBy=network-online.target\nEOF\n\nsystemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Configuration for Deployment\nDESCRIPTION: This snippet initializes the Terraform configuration for deploying the infrastructure by downloading necessary modules. It requires the Terraform CLI to be installed and sets up the working directory for further operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Filtering Users with Only Book Orders using Every in Dart\nDESCRIPTION: This code snippet illustrates filtering users who exclusively have 'book' orders, utilizing the every method to ensure all related entries match a given criterion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.every((o) => o.itemType.equals('book'))\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Serverpod (Dart)\nDESCRIPTION: Simple example of logging a message in a Serverpod session. When the session is closed, this message will be written to the log table in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation None and Sub-filter in Dart\nDESCRIPTION: Demonstrates how to filter users that have no related one-to-many objects (orders) matching a specific condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.none((o) => o.itemType.equals('book')))\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Self-Relation for Cat Family Tree\nDESCRIPTION: Defines a Cat class with self-referential relationship to model mother-kitten relationships. Each cat can have one mother and multiple kittens, demonstrating a one-to-many relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Cat\ntable: cat\nfields:\n  name: String\n  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)\n  kittens: List<Cat>?, relation(name=cat_kittens)\n```\n\n----------------------------------------\n\nTITLE: Connecting WebSocket Client - Dart\nDESCRIPTION: Demonstrates how to establish a WebSocket connection from the client to the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages from Client\nDESCRIPTION: Shows how to send messages from the client to the server endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: These commands initialize Terraform in the `aws/terraform` directory and then apply the Terraform configuration.  `terraform init` is only needed the first time, while `terraform apply` creates or updates the AWS infrastructure defined in the Terraform files. The apply command takes several minutes to complete.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Adding Server Module Dependencies in pubspec.yaml\nDESCRIPTION: Configuration for adding serverpod_auth_server module dependency to the server's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-In with Apple Button in Flutter\nDESCRIPTION: Code snippet for rendering a native Sign in with Apple button using Serverpod authentication module\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Caching with Serverpod in Dart\nDESCRIPTION: This example demonstrates how to implement caching for user data in a Serverpod endpoint. It shows retrieving data from cache, falling back to database access when needed, and storing results in the cache with a specified lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(cacheKey) as UserData?;\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Opting out of migrations in Serverpod\nDESCRIPTION: This YAML snippet demonstrates how to opt a table out of Serverpod's migration system. Setting `managedMigration` to `false` prevents Serverpod from automatically managing the table's schema, requiring manual management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Example\ntable: example\nmanagedMigration: false\nfields:\n  name: String\"\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Example - Dart\nDESCRIPTION: Demonstrates how to seed the database before running tests using a session builder.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given Products endpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insert(session, [\n    Product(name: 'Apple', price: 10),\n    Product(name: 'Banana', price: 10)\n    ]);\n  });\n\n  test('then calling `all` should return all products', () async {\n    final products = await endpoints.products.all(sessionBuilder);\n    expect(products, hasLength(2));\n    expect(products.map((p) => p.name), contains(['Apple', 'Banana']));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Old vs New Model Syntax - Relations\nDESCRIPTION: Examples showing the old and new syntax for defining relations in model definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, parent=example\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, relation(parent=example)\n```\n\n----------------------------------------\n\nTITLE: Basic Class Inheritance Example - Parent Class\nDESCRIPTION: YAML definition for a parent class with a name field, demonstrating the base structure for inheritance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/20-experimental.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Applying Serverpod Repair Migration\nDESCRIPTION: This command starts the Serverpod server and applies the repair migration. The `--apply-repair-migration` flag ensures the live database schema matches the new migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Force creating a repair migration in Serverpod\nDESCRIPTION: This bash command forces the creation of a repair migration.  This overrides safeguards which prevent creation when no changes are identified or when there is a risk of data loss.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create-repair-migration --force\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Persistent Field in a Serializable Model\nDESCRIPTION: This snippet shows how to create a non-persistent field in a serializable model by using the '!persist' keyword. The example defines a 'Company' model with a 'name' field that will not be stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\n  table: company\n  fields:\n    name: String, !persist\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials in passwords.yaml\nDESCRIPTION: This code snippet shows how to add AWS credentials to the `passwords.yaml` file. These credentials are used to authenticate with the AWS S3 service.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Sorting Included Lists in Serverpod\nDESCRIPTION: Shows how to sort included lists using the orderBy clause, demonstrating sorting employees by name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      orderBy: (t) => t.name,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serverpod CLI Tools - Bash Commands\nDESCRIPTION: Commands to set up and activate Serverpod CLI tools from a local repository clone\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/04-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for One-to-One Relationship\nDESCRIPTION: This snippet illustrates the raw SQL equivalent for setting up a one-to-one relationship between User and Address tables along with foreign key constraints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE \\\"address\\\" (\\n    \\\"id\\\" serial PRIMARY KEY,\\n    \\\"street\\\" text NOT NULL\\n);\\n\\nCREATE TABLE \\\"user\\\" (\\n    \\\"id\\\" serial PRIMARY KEY,\\n    \\\"addressId\\\" integer NOT NULL\\n);\\n\\nCREATE UNIQUE INDEX \\\"user_address_unique_idx\\\" ON \\\"user\\\" USING btree (\\\"addressId\\\");\\n\\nALTER TABLE ONLY \\\"user\\\"\\n    ADD CONSTRAINT \\\"user_fk_0\\\"\\n    FOREIGN KEY(\\\"addressId\\\")\\n    REFERENCES \\\"address\\\"(\\\"id\\\")\\n    ON DELETE CASCADE\\n    ON UPDATE NO ACTION;\"\n```\n\n----------------------------------------\n\nTITLE: Database Indexes Configuration in YAML\nDESCRIPTION: Shows how to define database indexes for performance optimization in YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>?, api\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform Database Password Environment Variable\nDESCRIPTION: This command sets the `TF_VAR_DATABASE_PASSWORD_PRODUCTION` environment variable, which Terraform uses to securely set the password for the Postgres database.  The password is retrieved from the `config/passwords.yaml` file. This variable is essential for Terraform to provision the database correctly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Database-Scoped Fields in YAML\nDESCRIPTION: Demonstrates how to define fields that are only stored in the database but not exposed via API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String?, database\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod Repair Migration\nDESCRIPTION: This command creates a repair migration for the Serverpod project.  It compares the current database schema with the target schema and generates a migration to reconcile the differences.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Dependencies in YAML\nDESCRIPTION: Configuration for adding Flutter-specific module dependencies to the Flutter app's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Setting Default GCP Project\nDESCRIPTION: Command to set the default project ID for Cloud Run service deployment\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Client Library via CLI\nDESCRIPTION: Command to generate the client library for the Serverpod endpoints from the server directory. This creates the necessary code in the client directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Auth Tokens Directly from AuthKey Table in Serverpod\nDESCRIPTION: This snippet directly deletes authentication tokens from the `AuthKey` table based on user ID and authentication method.  It is strongly discouraged to use this method and instead use `UserAuthentication.revokeAuthKey`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nawait AuthKey.db.deleteWhere(\n  session,\n  where: (t) => t.userId.equals(userId) & t.method.equals('username'),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Referential Action Syntax Definition\nDESCRIPTION: Basic syntax for defining referential actions on database relations, specifying onUpdate and onDelete behaviors.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelation(onUpdate=<ACTION>, onDelete=<ACTION>)\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for Dart 3\nDESCRIPTION: Updates to the Dockerfile to use Dart 3.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM dart:3.0 AS build\n\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Dart SDK version in pubspec.yaml\nDESCRIPTION: Example of updating the Dart SDK version requirement in pubspec.yaml from 2.19.0 to 3.0.0 to meet Serverpod 1.2 requirements.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=2.19.0 <4.0.0'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Module in generator.yaml\nDESCRIPTION: Configuration for adding the serverpod_auth module with a nickname in the generator.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Demonstrates how to call the server endpoint method from the client side using the generated client code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Module Dependency in Server's pubspec.yaml\nDESCRIPTION: This snippet shows how to add the serverpod_auth_server dependency to the server's pubspec.yaml file. It's important to use the correct version number matching your Serverpod version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/10-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages Server-side\nDESCRIPTION: Implementation of message handling logic that forwards chat messages to specific user channels.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Module Relation Configuration in YAML\nDESCRIPTION: Demonstrates how to set up a basic relation between a custom User model and a module's UserInfo model using a bridge table pattern. Includes an index configuration for ensuring unique relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: File Upload Process in Dart (Client-side)\nDESCRIPTION: This snippet illustrates the client-side process of uploading a file. It includes requesting an upload description, uploading the file using a FileUploader, and verifying the upload with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage Configuration\nDESCRIPTION: Configuration setup for Google Cloud Storage integration in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(gcp.GoogleCloudStorage(\n    serverpod: pod,\n    storageId: 'public',\n    public: true,\n    region: 'auto',\n    bucket: 'my-bucket-name',\n    publicHost: 'storage.myapp.com',\n  ));\n```\n\n----------------------------------------\n\nTITLE: Defining Company and Employee Classes in YAML\nDESCRIPTION: These YAML snippets define the `Company` and `Employee` classes for demonstrating joined tables and nested objects.  They specify the fields and table mappings for each class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n\"# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, api\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  companyId: int\n  name: String\n  birthday: DateTime\"\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with an Expression in Dart\nDESCRIPTION: This Dart snippet demonstrates how to find a single row in a database table using an expression. It uses the `findSingleRow` method on the `Company` class, passing in the session and a `where` parameter. The `where` parameter is a typed expression builder that allows specifying search criteria.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"var myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to ListTile in Dart for Serverpod Note App\nDESCRIPTION: This code snippet adds a delete button to each note's ListTile. When pressed, it updates the local state and calls the delete method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Installing Local CLI Tools\nDESCRIPTION: Commands to setup Serverpod CLI tools from local repository\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/09-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Flushing Event Queue in Dart for Serverpod Tests\nDESCRIPTION: A helper function to flush the event queue in Serverpod tests. It's useful for waiting for asynchronous events to complete before continuing the test execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Exporting Database Password for Terraform\nDESCRIPTION: Sets an environment variable for the production Postgres database password used by Terraform. Must be executed before initializing and applying Terraform configuration. The password is retrieved from the passwords.yaml configuration file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Logout Endpoint in Serverpod\nDESCRIPTION: This code defines a logout endpoint that signs out the currently authenticated user from all devices. It uses the UserAuthentication.signOutUser method within an authenticated endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass AuthenticatedEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> logout(Session session) async {\n    await UserAuthentication.signOutUser(session);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-one Relationship in Serverpod YAML\nDESCRIPTION: Example of a bidirectional one-to-one relationship where both sides reference the same relationship using a shared name parameter to link them.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int\n  address: Address?, relation(name=user_address, field=addressId)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  user: User?, relation(name=user_address)\n```\n\n----------------------------------------\n\nTITLE: Client Dependencies Configuration\nDESCRIPTION: YAML configuration for required client-side dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Deployment\nDESCRIPTION: Command to run the deployment script that deploys both the API server and Insights API to Google Cloud Run. Requires configuration of database connection and service account details in the script.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Sealed Parent Class Definition\nDESCRIPTION: YAML configuration for creating a sealed parent class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nsealed: true\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Restricting Endpoint Access with requireLogin\nDESCRIPTION: This snippet shows how to restrict access to a Serverpod endpoint to only signed-in users by overriding the `requireLogin` property of the `Endpoint` class. Setting `requireLogin` to `true` ensures that only authenticated users can access the endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enrollment Junction Table in Serverpod\nDESCRIPTION: YAML configuration for the Enrollment junction table that connects Student and Course tables. Includes relations to both tables and a unique index to prevent duplicate enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Enrollment\ntable: enrollment\nfields:\n  student: Student?, relation(name=student_enrollments)\n  course: Course?, relation(name=course_enrollments)\nindexes:\n  enrollment_index_idx:\n    fields: studentId, courseId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Initialize Terraform and apply the configuration to deploy AWS infrastructure for Serverpod. The init command is only required on first deployment, while apply provisions the actual resources\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Setting Production Database Password Environment Variable\nDESCRIPTION: Export the production database password as a Terraform environment variable to enable secure database configuration during infrastructure deployment\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SessionManager in main()\nDESCRIPTION: This code snippet shows how to initialize a `SessionManager` in the `main()` function of a Flutter app. The `SessionManager` keeps track of the user's signed-in state, handles authentication keys, and manages user profile images. It uses a `Client` instance to communicate with the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"void main() async {\\n  // Need to call this as we are using Flutter bindings before runApp is called.\\n  WidgetsFlutterBinding.ensureInitialized();\\n\\n  // Sets up a singleton client object that can be used to talk to the server\\n  // from anywhere in our app. The client is generated from your server code.\\n  // The client is set up to connect to a Serverpod running on a local server on\\n  // the default port. You will need to modify this to connect to staging or\\n  // production servers.\\n  client = Client(\\n    'http://localhost:8080/',\\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\\n  );\\n\\n  // The session manager keeps track of the signed-in state of the user. You\\n  // can query it to see if the user is currently signed in and get information\\n  // about the user.\\n  sessionManager = SessionManager(\\n    caller: client.modules.auth,\\n  );\\n  await sessionManager.initialize();\\n\\n  runApp(MyApp());\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Serverpod module\nDESCRIPTION: This command creates a new Serverpod module instead of a server project. It generates both server and client Dart packages that can be shared between projects or published to pub.dev.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Child Class with Inheritance\nDESCRIPTION: The Dart code generated from the parent-child class definitions, showing how the child class extends the parent and includes both fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass ChildClass extends ParentClass {\n    String name\n    int age\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Message Logging in Serverpod\nDESCRIPTION: Demonstrates how to log a simple message using the session.log() method. The log message will be stored in the database when the session completes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/09-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Class Model in YAML\nDESCRIPTION: Example of defining a Company class model with different field types including String, DateTime, and List.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Test Environment Configuration\nDESCRIPTION: Configuration file for test environment including API, Insights, Web server, database, and Redis settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Migration System Without Data Preservation\nDESCRIPTION: The code snippets guide you through setting up a new database using Serverpod's migration system for projects with no data to preserve. It explains steps to generate a project, create a migration, and initialize a new database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down -v\n$ docker-compose up --build --detach\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Opt-out in YAML Model Definition\nDESCRIPTION: YAML configuration example showing how to opt out of managed migrations for a specific table by setting managedMigration to false. This allows manual management of the table schema instead of using Serverpod's migration system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nmanagedMigration: false\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Using UserAuthentication for Sign In/Out in Dart\nDESCRIPTION: Demonstrates how to use the new UserAuthentication class for signing in and out users in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nUserAuthentication.signInUser(session, userId, 'provider');\n\nUserAuthentication.signOutUser(session);\n```\n\n----------------------------------------\n\nTITLE: Explicit Definition of One-to-Many Relationship with YAML (Object Relation)\nDESCRIPTION: Establishes an explicit one-to-many relationship between Company and Employee using an object relation to define the connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation\n```\n\n----------------------------------------\n\nTITLE: Database Table Model Definition in YAML\nDESCRIPTION: YAML definition for a Company model class with database table mapping.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Referential Actions in Serverpod YAML\nDESCRIPTION: Provides a full example of configuring custom referential actions for a relation in Serverpod. It sets onUpdate to SetNull and onDelete to NoAction for a parentId field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: YAML configuration for AWS credentials required for S3 integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: iOS Client Configuration\nDESCRIPTION: Example of configuring the client with a specific IP address for iOS simulator compatibility\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://192.168.1.117:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Creating a Repair Migration for Production\nDESCRIPTION: Command to create a repair migration targeting the production database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --mode production\n```\n\n----------------------------------------\n\nTITLE: Fetching User Information in Serverpod\nDESCRIPTION: Demonstrates how to retrieve detailed user information using the Users class static methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Creating an Endpoint Method - Dart\nDESCRIPTION: This Dart code defines an endpoint method that checks if a company is legitimate based on its founding date, extending the Endpoint class from Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/02-get-started-with-mini.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass CompanyEndpoint extends Endpoint {\n  Future<bool> isLegit(Session session, Company company) async {\n    // Check if the company has the foundedDate set and that it\n    // has been around for more than one year.\n\n    if (company.foundedDate == null) {\n      return false;\n    }\n\n    var oneYearAgo = DateTime.now().subract(Duration(days: 365));\n    return company.foundedDate!.isBefore(oneYearAgo);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: YAML configuration for AWS credentials in the passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart Test in YAML\nDESCRIPTION: Creates a dart_test.yaml file in the server directory to set up integration test tags.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n```\n\n----------------------------------------\n\nTITLE: Related Model Field Sorting in Serverpod\nDESCRIPTION: Shows how to sort results based on a field from a related model using chained field references.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.ceo.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Building the User Interface\nDESCRIPTION: This code snippet implements the `build` method of the `_PixoramaState` class to construct the user interface. It displays a loading indicator while the image is loading, and then renders the `PixelEditor` widget. It sends pixel changes made by the user to the server via the `setPixel` method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: _imageController == null\n          ? const CircularProgressIndicator()\n          : PixelEditor(\n              controller: _imageController!,\n              onSetPixel: (details) {\n                // When a user clicks a pixel we will get a callback from the\n                // PixelImageController, with information about the changed\n                // pixel. When that happens we call the setPixels method on\n                // the server.\n                client.pixorama.setPixel(\n                  pixelIndex: details.tapDetails.index,\n                  colorIndex: details.colorIndex,\n                );\n              },\n            ),\n    );\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Set Membership Filters in Serverpod\nDESCRIPTION: Filtering records using inSet and notInSet operators for multiple value matching.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.inSet({'Alice', 'Bob'})\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notInSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Storing JSON in Database via YAML Mapping\nDESCRIPTION: Simply referencing another serializable object stores it as a JSON entry, copying the object to the database instead of referencing an ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\\ntable: company\\nfields:\\n  name: String\\n  employees: List<Employee> # Stored as JSON structure\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Column Index in YAML for Serverpod\nDESCRIPTION: Shows how to create an index on multiple fields ('name' and 'foundedAt') in a Company table. The index is named 'company_idx'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in Maintenance Mode\nDESCRIPTION: Command to apply migrations in maintenance mode, which exits after applying migrations. Useful for automated processes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Backward Compatibility Rule: Endpoint Method Preservation\nDESCRIPTION: Recommended approach for adding new functionality without breaking existing endpoint method signatures\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/12-backward-compatibility.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n2. __Do not delete endpoint methods or change their signature.__ Instead, add new methods if you must pass another set of parameters.\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for Testing Services\nDESCRIPTION: Adds PostgreSQL and Redis test services to docker-compose.yaml, ensuring isolation of test environments by defining specific ports and database credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Add to the existing services\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass 'REDIS_TEST_PASSWORD'\n  environment:\n    - REDIS_REPLICATION_MODE=master\nvolumes:\n  # ...\n  <projectname>_test_data:\n```\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Test services\n  postgres_test:\n    image: postgres:16.3\n    ports:\n      - '9090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>_test\n      POSTGRES_PASSWORD: \"<insert database test password>\"\n    volumes:\n      - <projectname>_test_data:/var/lib/postgresql/data\n  redis_test:\n    image: redis:6.2.6\n    ports:\n      - '9091:6379'\n    command: redis-server --requirepass \"<insert redis test password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n\nvolumes:\n  <projectname>_data:\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for Dart 3\nDESCRIPTION: Docker configuration update to use Dart 3.0 as the base image.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM dart:3.0 AS build\n\n...\n```\n\n----------------------------------------\n\nTITLE: Updated fromJson Implementation in Serverpod 2.0\nDESCRIPTION: Simplified fromJson factory constructor implementation in Serverpod 2.0 without serializationManager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Deployment\nDESCRIPTION: Command to deploy the Serverpod application to Google Cloud Run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod Project Setup Command\nDESCRIPTION: This Bash snippet initializes a new Serverpod project named 'notes' and prepares it for development. Essential tools like Docker must be operational for seamless execution of the subsequent server setup and migrations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes/notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Adding Server Dependencies for Serverpod Auth Module\nDESCRIPTION: Configuration for adding serverpod_auth_server dependency to the server's pubspec.yaml file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Complex Data Type Storage in YAML\nDESCRIPTION: Example of storing a complex type (Address) as a JSON column in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address # Stored as a json column\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Dart\nDESCRIPTION: Perform direct SQL queries on the database when advanced operations are required\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Implementing Junction Table for Member Blocking\nDESCRIPTION: Defines a Blocking junction table that manages the many-to-many relationship between members, including a unique constraint to prevent duplicate blocks and cascade deletion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Blocking\ntable: blocking\nfields:\n  blocked: Member?, relation(name=member_blocking_me, onDelete=Cascade)\n  blockedBy: Member?, relation(name=member_blocked_by_me, onDelete=Cascade)\nindexes:\n  blocking_blocked_unique_idx:\n    fields: blockedId, blockedById\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class - YAML\nDESCRIPTION: This YAML configuration defines a serializable class named 'Company' with fields for name and founded date. It is essential for creating data structures that can be transmitted via the API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Complex Data Type Storage in YAML\nDESCRIPTION: Example of storing a complex type (Address) as a JSON column in the database table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address\n```\n\n----------------------------------------\n\nTITLE: Registering URL Scheme in info.plist (iOS)\nDESCRIPTION: This snippet illustrates adding a URL scheme to the info.plist file to enable navigation back to the iOS app after Google Sign-In. The reversed client ID is used as the URL scheme, facilitating the redirect after authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Finding Single Row with Filter in Serverpod\nDESCRIPTION: Example of finding a single Company record using a filter expression.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('Serverpod'),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL\nDESCRIPTION: Method to get the public URL for accessing a file in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serverpod Module\nDESCRIPTION: Bash commands to create a new Serverpod module using the serverpod create command, with options for server, client, and Flutter packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/10-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create --template module my_module\n$ flutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: AWS EC2 Installation Dependencies Script\nDESCRIPTION: Bash script for installing and configuring Dart SDK version on AWS EC2 instance, including systemd service setup for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nDART_VERSION=3.5.1\n\n# Uncomment the following code if you have already generated the project with the older version of serverpod cli\n# What this code do is to remove our previous way of setting dart version in the launch template\nif [ -f \"/etc/profile.d/script.sh\" ]; then\n    sudo rm /etc/profile.d/script.sh\nfi\n\n## install specified dart version if it is not present on the machine\n\nif [ ! -d \"/usr/lib/dart$DART_VERSION\" ]; then\n  wget -q https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-x64-release.zip -P /tmp\n  cd /tmp || exit\n  unzip -q dartsdk-linux-x64-release.zip\n  sudo mv dart-sdk/ /usr/lib/dart$DART_VERSION/\n  sudo chmod -R 755 /usr/lib/dart$DART_VERSION/\n  rm -rf dartsdk-linux-x64-release.zip\nfi\n\n## make symlink to use this dart as default\nsudo ln -sf \"/usr/lib/dart$DART_VERSION/bin/dart\" /usr/local/bin/dart\n\ncat > /lib/systemd/system/serverpod.service << EOF\n[Unit]\nDescription=Serverpod server\nAfter=multi-user.target\n\n[Service]\nUser=ec2-user\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/serverpod/active/mypod_server/deploy/aws/scripts/run_serverpod\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nWantedBy=network-online.target\nEOF\n\nsystemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Module in generator.yaml\nDESCRIPTION: Configure the serverpod_auth module in the generator configuration file, specifying a nickname for client-side referencing\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions with Custom Level in Serverpod\nDESCRIPTION: Demonstrates how to log a message with a custom log level, along with an exception and stack trace. This provides richer context for debugging.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/09-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Logging Basic Message in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to log a simple message using the 'log' method of the 'session' object in Serverpod. This method is used to log custom messages during the execution of a session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence - Serverpod Dart\nDESCRIPTION: This code snippet checks if a file exists in the specified storage location. It takes a `storageId` and a `path` as input. The function returns a boolean value indicating whether the file exists.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit One-to-Many Relationship with Object Relation in Serverpod YAML\nDESCRIPTION: This snippet shows how to explicitly define a one-to-many relationship between `Company` and `Employee` using an object relation. In `employee.yaml`, the `company` field references an optional `Company` object, establishing the relationship explicitly. This setup allows multiple employees to reference the same company without a unique index constraint on the foreign key field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart Test YAML\nDESCRIPTION: Creates a dart_test.yaml file in the server directory to configure test tags.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK in AWS EC2 Init Script\nDESCRIPTION: This bash command downloads and installs a specific version of the Dart SDK on an EC2 instance. It's part of the initialization script for Serverpod servers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://storage.googleapis.com/dart-archive/channels/stable/release/3.5.1/sdk/dartsdk-linux-x64-release.zip\n```\n\n----------------------------------------\n\nTITLE: Sending Local Message in Serverpod\nDESCRIPTION: Demonstrates posting a message to a local channel using the postMessage method with a Serverpod model\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message);\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test - Bash Commands\nDESCRIPTION: Commands to execute a specific test file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/10-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server\n$ dart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Serverpod Production Database Configuration\nDESCRIPTION: YAML configuration for connecting Serverpod to Cloud SQL PostgreSQL database using Unix socket connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  isUnixSocket: true\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\n  port: 5432\n  name: serverpod\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Deployment\nDESCRIPTION: Command to deploy the Serverpod application to Google Cloud Run\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in Serverpod\nDESCRIPTION: This bash command initiates all tests in the Serverpod framework by navigating to the root directory and executing the test runner script. It ensures that all continuous integration tests pass before pushing changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/06-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Initialize Terraform Configuration\nDESCRIPTION: Command to initialize Terraform and download required Serverpod modules for infrastructure deployment\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Updating Dart SDK Version in Terraform Init Script\nDESCRIPTION: A bash command used in the Terraform init script to download and install a specific version of the Dart SDK on the AWS instance during deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://storage.googleapis.com/dart-archive/channels/stable/release/3.5.1/sdk/dartsdk-linux-x64-release.zip\n```\n\n----------------------------------------\n\nTITLE: Default Serverpod Configuration in Dart\nDESCRIPTION: The default configuration used by Serverpod when no custom configuration is provided, setting up only the API server with default values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/07-configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nServerpodConfig(\n  apiServer: ServerConfig(\n    port: 8080,\n    publicHost: 'localhost',\n    publicPort: 8080,\n    publicScheme: 'http',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration - Bash\nDESCRIPTION: This command generates a new migration for creating the 'note' table in the database, which will be applied to update the schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n\n```\n\n----------------------------------------\n\nTITLE: Basic Enum Definition\nDESCRIPTION: Example of defining a basic enum with animal types.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod Installation\nDESCRIPTION: Command to verify the Serverpod CLI installation by displaying the help menu.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializable Class with Freezed in Dart\nDESCRIPTION: Example of creating a custom serializable class using Freezed package in Dart. Demonstrates implementation of required toJson() and fromJson() methods with SerializationManager integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/02-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:serverpod_serialization/serverpod_serialization.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n    SerializationManager serializationManager,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Auth Tokens in Serverpod\nDESCRIPTION: The snippet details how to delete specific auth tokens from the `AuthKey` table by querying with given conditions such as user ID and authentication method. It assumes access to the `AuthKey` table model with required input being a session object and user ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait AuthKey.db.deleteWhere(\n  session,\n  where: (t) => t.userId.equals(userId) & t.method.equals('username'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SignInWithGoogleButton with Client and Server ID in Flutter\nDESCRIPTION: This Dart snippet illustrates how to configure the SignInWithGoogleButton in a Flutter application by supplying both the client ID for iOS and Android and the server client ID for web integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod CLI installation\nDESCRIPTION: This command tests if the Serverpod CLI is correctly installed by displaying the help information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Row to Database in Dart\nDESCRIPTION: This Dart code snippet demonstrates how to create a new instance of the Company class and insert it into the database using the static 'db.insertRow' method. The method returns the inserted object with an updated 'id'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nmyCompany = await Company.db.insertRow(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: UuidValue Default Values in YAML\nDESCRIPTION: Examples of setting UUID default values using random generation and specific UUID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nuuidDefaultRandom: UuidValue, default=random\nuuidDefaultUuid: UuidValue, default='550e8400-e29b-41d4-a716-446655440000'\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Logs in Serverpod (YAML)\nDESCRIPTION: This YAML configuration example shows how to control session logging behavior in Serverpod, including persistent storage and console output settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/09-logging.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsessionLogs:\n  persistentEnabled: true   # Logs are stored in the database\n  consoleEnabled: true      # Logs are output to the console\n```\n\n----------------------------------------\n\nTITLE: Connecting to Serverpod WebSocket from Flutter Client\nDESCRIPTION: Shows how to establish a WebSocket connection from a Flutter client to the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n```\n\n----------------------------------------\n\nTITLE: Forcing Repair Migration Creation\nDESCRIPTION: Command to force the creation of a repair migration, overriding safeguards.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --force\n```\n\n----------------------------------------\n\nTITLE: Invoking Future Calls with Delay in Dart\nDESCRIPTION: This snippet shows how to invoke a future call after a specified delay using the futureCallWithDelay method of the session's serverpod instance. It requires the future call name, the data object, and a Duration object that specifies the delay.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/14-scheduling.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Note Method in Flutter with Serverpod\nDESCRIPTION: A method to delete a note by calling the server endpoint and refreshing the notes list. It handles potential connection errors by calling a _connectionFailed method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Query with Expression in Dart\nDESCRIPTION: Example of querying the database using a typed expression builder to find a specific row.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload Completion in Serverpod\nDESCRIPTION: Server-side code to verify that a file upload has been completed successfully, which is necessary especially when using third-party storage services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Class Inheritance Example - Child Class\nDESCRIPTION: YAML definition for a child class that extends ParentClass, adding an age field while inheriting the name field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/20-experimental.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    int: age\n```\n\n----------------------------------------\n\nTITLE: Adding Pixels Package in Flutter\nDESCRIPTION: This command adds the `pixels` package as a dependency to the Flutter project. The `pixels` package is used for drawing the pixel editor in the app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"cd pixorama_flutter\nflutter pub add pixels\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing Database Connections in Dart Tests\nDESCRIPTION: Prevent exceeding max database connection limits during concurrent test execution in Dart by deferring Serverpod session creation. Requires understanding of Dart test lifecycle.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given example test', (sessionBuilder, endpoints) {\\n  // Instead of this\\n  var session = sessionBuilder.build();\\n\\n\\n  // Do this to postpone connecting to the database until the test group is running\\n  late Session session;\\n  setUpAll(() {\\n    session = sessionBuilder.build();\\n  });\\n  // ...\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring serverpod_auth Module in YAML\nDESCRIPTION: Add the serverpod_auth module to the config/generator.yaml file, specifying a nickname for client reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Simplified Flutter Widget Structure\nDESCRIPTION: Base widget structure for the notes app with a clean AppBar and Scaffold. This version removes unnecessary boilerplate code to prepare for note functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project with Serverpod CLI\nDESCRIPTION: Commands to create a new Serverpod project and start the server with Docker\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n\n$ cd notes/notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Recommended Importing Practices in Dart\nDESCRIPTION: This code snippet shows the recommended import statement for Serverpod test tools, ensuring all necessary helpers and types are re-exported, avoiding redundant imports.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Only import the generated test tools file.\n// It re-exports all helpers and types that are needed.\nimport 'serverpod_test_tools.dart'; ✅\n```\n\n----------------------------------------\n\nTITLE: Sorting Related Lists in Serverpod\nDESCRIPTION: Shows how to sort included lists using the orderBy clause.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      orderBy: (t) => t.name,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Storage\nDESCRIPTION: Method to check if a file exists in the specified storage location.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Index Type in YAML for Serverpod\nDESCRIPTION: Demonstrates how to specify a custom index type (BRIN in this case) for a Company table. This allows for optimization based on specific data characteristics and query patterns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Server Project\nDESCRIPTION: Creates a new Serverpod project using the CLI and starts the server with Docker and database migrations\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n$ cd notes/notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Firebase Auth Package\nDESCRIPTION: Command to add the Serverpod Firebase authentication package to the Flutter project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add serverpod_auth_firebase_flutter\n```\n\n----------------------------------------\n\nTITLE: Adding Server Dependencies in YAML\nDESCRIPTION: Configuration for adding serverpod_auth_server module dependency to the server's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Count and Sub-filter in Dart\nDESCRIPTION: Demonstrates how to filter users based on the count of related one-to-many objects with an additional sub-filter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count((o) => o.itemType.equals('book')) > 3\n);\n```\n\n----------------------------------------\n\nTITLE: Proper Database Setup in Serverpod Tests\nDESCRIPTION: Demonstrates correct implementation without explicit cleanup, relying on Serverpod's automatic transaction rollback.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\n  });\n\n  ✅  // Clean up can be omitted since the transaction is rolled back after each by default\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Copying and Making Deployment Script Executable\nDESCRIPTION: These commands copy the deployment script to the root of the server directory and make it executable. This allows you to run the script to deploy your server to Google Cloud Run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cp deploy/gcp/console_gcr/cloud-run-deploy.sh .\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n\"$ chmod u+x cloud-run-deploy.sh\"\n```\n\n----------------------------------------\n\nTITLE: Previous fromJson Implementation in Serverpod\nDESCRIPTION: Legacy implementation of fromJson factory constructor requiring serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n    SerializationManager serializationManager,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI Tools using Dart pub\nDESCRIPTION: Command to install Serverpod command line tools globally using Dart pub package manager. This is the first step in setting up Serverpod development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Github Actions Dart SDK Setup\nDESCRIPTION: YAML configuration for setting up Dart SDK version in Github Actions workflow file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Setup Dart SDK\n        uses: dart-lang/setup-dart@v1.6.5\n        with:\n          sdk: ${MINOR_DART_SDK_VERSION}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration in Serverpod's passwords.yaml\nDESCRIPTION: YAML configuration for adding AWS access credentials to Serverpod's passwords.yaml file. These credentials are required for S3 storage integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform for GCP Deployment\nDESCRIPTION: Command to initialize Terraform configuration and download required modules for GCP deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with Expression in Dart\nDESCRIPTION: This Dart snippet shows how to find a single row in the database using an expression with the `where` parameter. The `where` parameter is a typed expression builder.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"var myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Creating the Pixorama Widget\nDESCRIPTION: This code snippet defines the basic structure of the `Pixorama` widget, which is a stateful widget. It imports necessary packages and creates the `Pixorama` and `_PixoramaState` classes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n\"// lib/src/pixorama.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:pixels/pixels.dart';\nimport 'package:pixorama_client/pixorama_client.dart';\n\nimport '../../main.dart';\n\nclass Pixorama extends StatefulWidget {\n  const Pixorama({super.key});\n\n  @override\n  State<Pixorama> createState() => _PixoramaState();\n}\n\nclass _PixoramaState extends State<Pixorama> {\n}\"\n```\n\n----------------------------------------\n\nTITLE: Basic Table Model Definition in YAML\nDESCRIPTION: Demonstrates how to define a basic Company model with a database table mapping. Includes an automatically added 'id' field of type int?.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Code\nDESCRIPTION: Command to generate Dart classes from model definitions\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/02-get-started-with-mini.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Module to Server Dependencies in YAML\nDESCRIPTION: This snippet shows how to add the serverpod_auth_server dependency to the server's pubspec.yaml file. It demonstrates the correct format for including a Serverpod module in the server's dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Sealed Parent Class Definition\nDESCRIPTION: YAML definition for a sealed parent class, enabling exhaustive type checking for the class hierarchy.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/20-experimental.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nsealed: true\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Adding Test Database Services to Docker Compose\nDESCRIPTION: Docker Compose configuration for test databases (PostgreSQL and Redis). This creates separate database instances for testing to avoid contaminating development data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Add to the existing services\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\n  profiles:\n    - '' # Default profile\n    - test\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass \"<insert redis test password>\"\n  environment:\n    - REDIS_REPLICATION_MODE=master\n  profiles:\n    - '' # Default profile\n    - test\nvolumes:\n  # ...\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server with Custom Mode and ID\nDESCRIPTION: Command to start a Serverpod server in production mode with a specific server ID. This command demonstrates how to override the default development mode and default server ID settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/05-deployments/02-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Server with Docker Compose in Bash\nDESCRIPTION: These commands set up and start a Docker container environment for the test server of Serverpod. It builds the Docker images and brings up the containers in detached mode, using docker-compose located in the `docker_local` directory. It also includes a script to set up the database tables required for testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/06-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Launching Serverpod in Serverless Role\nDESCRIPTION: Command to start Serverpod server in serverless role. Demonstrates how to set the server role using the --role argument.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Configuring Github Actions Dart SDK Version\nDESCRIPTION: YAML configuration for specifying Dart SDK version in Github Actions workflow file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Setup Dart SDK\n        uses: dart-lang/setup-dart@v1.6.5\n        with:\n          sdk: ${MINOR_DART_SDK_VERSION}\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Test Server\nDESCRIPTION: This sequence of bash commands sets up and starts the Docker container needed for the Serverpod test server environment. It builds and detaches the Docker container, and prepares the necessary database tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/06-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Registering Health Check Handler in Dart\nDESCRIPTION: This snippet shows how to register a custom health check handler with the Serverpod instance.  It demonstrates how to pass the custom handler `myHealthCheckHandler` to the `healthCheckHandler` parameter of the `Serverpod` constructor. This ensures that the custom health checks are executed periodically by Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/12-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Client Authentication in Flutter\nDESCRIPTION: This YAML configuration snippet specifies the dependencies needed in a Flutter project to enable email authentication features, including the necessary client modules from Serverpod. The expected input is the version numbers for the dependencies, and the output is successful package installation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart SDK Version in GitHub Workflow YAML\nDESCRIPTION: A YAML configuration example for specifying the Dart SDK version in a GitHub Actions workflow file. This ensures compatibility between the development and deployment environments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Setup Dart SDK\n        uses: dart-lang/setup-dart@v1.6.5\n        with:\n          sdk: 3.5\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable in Bash\nDESCRIPTION: This command sets an environment variable with the database password for Terraform to use during deployment. It's crucial for securely passing the password to the infrastructure setup process.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 in Serverpod\nDESCRIPTION: Implementation of AWS S3 storage configuration including bucket and region settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod and Flutter App\nDESCRIPTION: These commands start the database and server for the Serverpod backend, and then launch the Flutter app in Chrome.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Running Dart Tests in Bash\nDESCRIPTION: Executes the Dart test command to run the created tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndart test\n```\n\n----------------------------------------\n\nTITLE: Defining Student Model with Enrollment Relation in Serverpod\nDESCRIPTION: This YAML snippet defines the Student model and its relationship with the Enrollment model through the `enrollments` field. The `relation` parameter is set to `student_enrollments`. This enables querying all enrollments for a specific student.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# student.yaml\nclass: Student\ntable: student\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=student_enrollments)\"\n```\n\n----------------------------------------\n\nTITLE: Including Nested Lists within Lists\nDESCRIPTION: Shows how to include lists within lists for complex relational data structures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        tools: Tool.includeList(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing flushEventQueue Function in Dart\nDESCRIPTION: A utility function that flushes the event queue to ensure asynchronous events have completed. Used in testing scenarios to wait for async operations before proceeding with test assertions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in Serverpod\nDESCRIPTION: Command to apply migrations by starting the server with the --apply-migrations flag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Preparing Cloud Run Deployment Script\nDESCRIPTION: Commands to copy the provided deployment script to the server directory and make it executable. This prepares the environment for deploying to Google Cloud Run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cp deploy/gcp/console_gcr/cloud-run-deploy.sh .\n$ chmod u+x cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Sending Global Messages with Redis in Dart\nDESCRIPTION: This example shows how to send a global message using Redis in Serverpod. By setting the `global` parameter to true, the message is sent to all servers connected to Redis. If Redis is not enabled, an exception will be thrown.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/16-server-events.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message, global: true);\n```\n\n----------------------------------------\n\nTITLE: Initial Cursor-Based Pagination Request\nDESCRIPTION: Shows how to implement the initial request for cursor-based pagination without a previous cursor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint recordsPerPage = 10;\n\nvar companies = await Company.db.find(\nsession,\norderBy: (t) => t.id,\nlimit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Signing Out All User Devices in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to sign out a user from all devices using the signOutAllDevices method, which revokes all authentication keys related to the current user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart SDK in Github Actions\nDESCRIPTION: This YAML snippet sets up the Dart SDK version in a Github Actions workflow for deploying Serverpod. Adjust the sdk version to match your project's Dart version. This script is specified in the deployment-aws.yml file under ./github/workflows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup Dart SDK\n  uses: dart-lang/setup-dart@v1.6.5\n  with:\n    sdk: 3.5\n```\n\n----------------------------------------\n\nTITLE: Client Dependencies Configuration in YAML\nDESCRIPTION: Required dependencies configuration for the client-side project using serverpod_auth_client package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Module to Server Dependencies in YAML\nDESCRIPTION: This snippet shows how to add the serverpod_auth_server dependency to the server's pubspec.yaml file. It's essential to use the correct version number matching your Serverpod version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in passwords.yaml (YAML)\nDESCRIPTION: This YAML snippet shows how to store AWS access key ID and secret key within the `passwords.yaml` file. These credentials are used by Serverpod to authenticate with AWS and access the configured S3 bucket. These credentials should be treated with care, never be committed to public code repositories, and be stored securely.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n```\n\n----------------------------------------\n\nTITLE: Running Flutter on a specific port\nDESCRIPTION: This command forces Flutter to run on a specified port, which is essential for configuring the authorized JavaScript origins and redirect URIs for web-based Google Sign-In during development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter run -d chrome --web-port=49660\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Module Dependencies to App's pubspec.yaml\nDESCRIPTION: YAML configuration for adding Serverpod authentication module client packages to a Flutter app's pubspec.yaml. Includes shared Flutter components and platform-specific authentication packages for Google and Apple.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^0.9.x\n  serverpod_auth_google_flutter: ^0.9.x\n  serverpod_auth_apple_flutter: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Creating New Modules with Serverpod Command\nDESCRIPTION: This bash command allows users to create new modules intended for shared code or publication on pub.dev. Specifying the `module` template directs the command to generate a module appropriately.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/08-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Using Updated Authentication Methods\nDESCRIPTION: Demonstrates the new static methods for user authentication using UserAuthentication class\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nUserAuthentication.signInUser(session, userId, 'provider');\n\nUserAuthentication.signOutUser(session);\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands in Bash\nDESCRIPTION: This snippet shows the commands to run after adding a module to update dependencies and generate necessary files. It includes running 'pub get' and 'serverpod generate'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional One-to-one Relationship in Serverpod YAML\nDESCRIPTION: Example of making a one-to-one relationship optional using the optional keyword, which makes the auto-generated foreign key field nullable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation(optional)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Updating Project Dependencies - Bash Command\nDESCRIPTION: Command to generate new pubspec.yaml files from templates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/06-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Serialization in Serverpod 2.0 in Dart\nDESCRIPTION: Updated serialization example in Dart for Serverpod 2.0, which simplifies the process by removing the serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal ClassName test = ClassName.fromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated signOut Method in Serverpod (Dart)\nDESCRIPTION: Shows the deprecated signOut method from StatusEndpoint, whose behavior is controlled by the legacyUserSignOutBehavior configuration setting.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Configuring Module in generator.yaml\nDESCRIPTION: Configuration for adding the serverpod_auth module with a nickname in the generator.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Note State Variables Declaration\nDESCRIPTION: Declaration of state variables for storing notes and handling connection exceptions\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\n...\n\nclass MyHomePageState extends State<MyHomePage> {\n\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sealed Parent Class in YAML\nDESCRIPTION: Demonstrates how to define a sealed parent class in YAML format for use with Serverpod's experimental sealed classes feature.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nsealed: true\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Starting the Serverpod Server\nDESCRIPTION: Command to start the Serverpod server for the Pixorama application\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Creating a Repair Migration for Specific Version in Serverpod CLI\nDESCRIPTION: Command to create a repair migration targeting a specific migration version, allowing reversion to older schema versions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --version 20230821135718-v1-0-0\n```\n\n----------------------------------------\n\nTITLE: Stopping Serverpod Development Database with Docker Compose\nDESCRIPTION: This bash command stops the Serverpod development database using Docker Compose while preserving all data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Dependencies in Flutter YAML\nDESCRIPTION: Include dependencies for Google and Apple sign-in modules in the Flutter app's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  example_client:\n    path: ../example_client\n  serverpod_auth_google_flutter: ^0.9.5\n  serverpod_auth_apple_flutter: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Module Dependencies\nDESCRIPTION: Configuration for adding auth-related Flutter package dependencies to the Flutter app's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Server Module Dependency in pubspec.yaml\nDESCRIPTION: Demonstrates how to add a server module dependency, specifically the serverpod_auth_server module, in the server's pubspec.yaml file. Ensures compatibility by using consistent version numbers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/10-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Fetching and Revoking a Specific Auth Key for a User in Serverpod\nDESCRIPTION: This snippet shows how to retrieve all authentication keys for a specific user and then revoke a particular key using the `UserAuthentication.revokeAuthKey` method in Serverpod.  It converts the ID to a string before calling `revokeAuthKey`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n```dart\n// Fetch all authentication keys for the user\nvar authKeys = await AuthKey.db.find(\n  session,\n  where: (t) => t.userId.equals(userId),\n);\n\n// Revoke a specific key (for example, the last one)\nif (authKeys.isNotEmpty) {\n  var authKeyId = authKeys.last.id.toString();  // Convert the ID to string\n  await UserAuthentication.revokeAuthKey(\n    session,\n    authKeyId: authKeyId,\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Mini Project - Bash\nDESCRIPTION: This command initializes a new Mini project using Serverpod, creating the necessary project structure and directories.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/02-get-started-with-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create myminipod --mini\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Dart\nDESCRIPTION: This code shows how to check if a file exists in the storage using Serverpod. It uses the session storage to verify the existence of a file in a public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Search Paths for Database in Serverpod YAML\nDESCRIPTION: This YAML snippet demonstrates how to customize search paths for database connections in Serverpod, allowing for working with multiple schemas. It specifies custom and public schemas in order of priority.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/01-connection.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndatabase:\n  host: localhost\n  port: 8090\n  name: <YOUR_PROJECT_NAME>\n  user: postgres\n  searchPaths:  custom, public\n...\n```\n\n----------------------------------------\n\nTITLE: Using SignInWithFirebaseButton in Flutter\nDESCRIPTION: This Dart code snippet demonstrates how to use the SignInWithFirebaseButton widget in a Flutter app to trigger Firebase sign-in flows. It requires a Serverpod client, a list of authentication providers, and handlers for failure and success outcomes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithFirebaseButton(\n  caller: client.modules.auth,\n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n  onFailure: () => print('Failed to sign in with Firebase.'),\n  onSignedIn: () => print('Signed in with Firebase.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding App Dependencies for Authentication\nDESCRIPTION: Add dependencies to the app's pubspec.yaml file for the desired sign-in methods and Serverpod authentication shared package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Defining Serverpod Endpoint in Dart\nDESCRIPTION: Example of defining a Serverpod endpoint with a 'hello' method in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subsequent Requests for Cursor-Based Pagination in Serverpod\nDESCRIPTION: Demonstrates how to use a cursor (last ID from previous page) to fetch the next set of records in cursor-based pagination. This provides more consistent results than offset pagination when data changes frequently.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint cursor = lastCompanyIdFromPreviousPage; // This is typically sent by the client\n\nvar companies = await Company.db.find(\nsession,\nwhere: Company.t.id > cursor,\norderBy: (t) => t.id,\nlimit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration using Maintenance Role\nDESCRIPTION: Command to apply a repair migration using the maintenance role. The server exits after applying migrations with a status code indicating success (0) or failure (non-zero).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Updating Dart SDK Version in Pubspec\nDESCRIPTION: Updates to the pubspec.yaml configuration to support Dart 3.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=2.19.0 <4.0.0'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row by ID in Dart with Serverpod\nDESCRIPTION: This snippet demonstrates how to find a single row in a database table by its ID using Serverpod's Dart API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile Dart Version\nDESCRIPTION: This code snippet shows how to update the Dart version in the Dockerfile. This ensures the Docker container uses the correct Dart version (3.0) for the Serverpod 1.2 project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\nFROM dart:3.0 AS build\n\n...\n```\n\n----------------------------------------\n\nTITLE: Endpoint for Shared Stream Interaction\nDESCRIPTION: This Dart code defines a simplified Serverpod endpoint, `CommunicationExampleEndpoint`, responsible for posting numbers to and listening for numbers on a shared stream using the `session.messages` API. It includes methods for posting (`postNumberToSharedStream`) and listening (`listenForNumbersOnSharedStream`) to the stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"class CommunicationExampleEndpoint {\n  static const sharedStreamName = 'shared-stream';\n  Future<void> postNumberToSharedStream(Session session, int number) async {\n    await session.messages\n        .postMessage(sharedStreamName, SimpleData(num: number));\n  }\n\n  Stream<int> listenForNumbersOnSharedStream(Session session) async* {\n    var sharedStream =\n        session.messages.createStream<SimpleData>(sharedStreamName);\n\n    await for (var message in sharedStream) {\n      yield message.num;\n    }\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Double Default Value in YAML\nDESCRIPTION: Example of setting a default double value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndoubleDefault: double, default=10.5\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud CLI tools for project setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud init\n```\n\n----------------------------------------\n\nTITLE: Accessing Google YouTube API on Server with Authenticated Client\nDESCRIPTION: This snippet shows how to use the GoogleAuth.authClientForUser method to obtain an authenticated client for a user and then use it to access the YouTube API. It demonstrates creating a client and making a request to get a user's liked videos.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to navigate to the server directory, start Docker containers, and launch the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\ndocker-compose up --build --detach\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod in Serverless Role\nDESCRIPTION: Command for starting Serverpod in serverless role, which only handles incoming connections without maintenance tasks. Useful for serverless deployments where maintenance is handled separately.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: String Default Value in YAML\nDESCRIPTION: Example of setting a default string value in a field definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nstringDefault: String, default='This is a string'\n```\n\n----------------------------------------\n\nTITLE: Creating Dart Test Configuration\nDESCRIPTION: A basic dart_test.yaml configuration that sets up integration test tags. This file configures the test runner for integration tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n\n```\n\n----------------------------------------\n\nTITLE: Updated pubspec.yaml Dart SDK Configuration\nDESCRIPTION: This code block shows the updated Dart SDK version configuration in `pubspec.yaml` files for Serverpod 1.2, requiring Dart 3.0.0 or higher. It specifies a version constraint that allows Dart versions from 3.0.0 up to, but not including, 4.0.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\\nenvironment:\\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod Auth Module Dependencies\nDESCRIPTION: Adding the serverpod_auth_server dependency to the server's pubspec.yaml file to enable authentication functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Updated FromJson Constructor Implementation\nDESCRIPTION: Simplified fromJson factory constructor in Serverpod 2.0 without serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Flutter App Structure\nDESCRIPTION: Initial setup of the Flutter app with basic scaffold and app bar implementation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Relation-Based Sorting in Serverpod\nDESCRIPTION: Shows how to sort companies based on a related model's field (CEO's name).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.ceo.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Logging with Exception and Stack Trace in Serverpod with Dart\nDESCRIPTION: This code snippet shows how to log a message with an associated exception and stack trace using the Serverpod framework in Dart. The log level can be specified to categorize the log entries. The main parameters are the message, log level, exception, and stack trace. Outputs include categorized log entries stored in the database, accessible through Serverpod Insights.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/08-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authorized User ID in Serverpod\nDESCRIPTION: Shows how to get the ID of the currently authenticated user from the session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = await session.auth.authorizedUserId;\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations During Server Start - Bash\nDESCRIPTION: This command starts the Serverpod application and applies any pending migrations automatically during the startup sequence. The '--apply-migrations' flag ensures that the migrations are applied before the server is fully up.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Commands to generate and apply database migrations for the Note table\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI Tools with Dart Pub\nDESCRIPTION: Command to install Serverpod command line tools globally using Dart pub package manager. Requires Flutter to be installed as a prerequisite.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Settings in YAML\nDESCRIPTION: Basic database connection configuration example showing host, port, database name, and user settings in development.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndatabase:\n  host: localhost\n  port: 8090\n  name: <YOUR_PROJECT_NAME>\n  user: postgres\n...\n```\n\n----------------------------------------\n\nTITLE: Model definition with new 'relation' keyword\nDESCRIPTION: Updated model definition using the new 'relation' keyword which replaces the deprecated 'parent' keyword to define relationships between tables in Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, relation(parent=example)\n```\n\n----------------------------------------\n\nTITLE: Forcing Repair Migration Creation in Serverpod CLI\nDESCRIPTION: Command to force the creation of a repair migration using the '--force' flag, overriding safeguards that prevent creation when no changes are detected or data loss is possible.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --force\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Token in Serverpod\nDESCRIPTION: This snippet illustrates how to create an authentication token for a user using the UserAuthentication.signInUser method. It specifies the user ID, authentication method, and granted scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Test Passwords in config/passwords.yaml\nDESCRIPTION: This snippet adds database and Redis passwords necessary for the test environment into the `config/passwords.yaml` file. This configuration enhances security by managing sensitive credentials effectively.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Setting Default GCP Project\nDESCRIPTION: Command to set the default project ID for Cloud Run service deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Package for Module\nDESCRIPTION: Terminal command to create a new Flutter package for custom module implementation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/08-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: File Path Format Example\nDESCRIPTION: Example of proper file path formatting compatible with S3 storage, avoiding leading slashes and using standard characters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n'profile/$userId/images/avatar.png'\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Database Container\nDESCRIPTION: Starts the database container from the server project using docker-compose.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Creating Test Configuration YAML\nDESCRIPTION: Creates a test.yaml file in the config directory with settings for API, Insights, and Web servers, as well as database and Redis configurations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Finalizing Serverpod Authentication Module Installation\nDESCRIPTION: Run pub get and serverpod generate commands to complete the authentication module setup\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Storage\nDESCRIPTION: Method to verify if a file exists in the storage system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server Manually\nDESCRIPTION: Command to start the Serverpod test server\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/11-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Adding Client Module Dependencies in YAML\nDESCRIPTION: Configuration for adding client-side authentication module packages to the app's pubspec.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^0.9.x\n  serverpod_auth_google_flutter: ^0.9.x\n  serverpod_auth_apple_flutter: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination with Limit in Serverpod\nDESCRIPTION: Demonstrates how to use the limit parameter to restrict the number of records returned in a query. This example fetches the first 10 company records from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Endpoint Address with AWS CLI\nDESCRIPTION: This bash command retrieves the endpoint address of an AWS RDS database instance using the AWS CLI and formats it with jq. Ensure AWS CLI and jq are installed and configure your AWS credentials before running this command. Replace ${YOUR_DB_INSTANCE_ID} with your actual database instance ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws rds describe-db-instances --db-instance-identifier ${YOUR_DB_INSTANCE_ID} | jq \".DBInstances.[0].Endpoint.Address\" -r\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Code\nDESCRIPTION: This command regenerates the classes managed by Serverpod, ensuring that any changes made to endpoints or models are reflected in the generated code. This is required after modifying files in the `endpoints` or `models` directories.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"$ cd mypod/mypod_server\n$ serverpod generate\"\n```\n\n----------------------------------------\n\nTITLE: Installing serverpod_auth_server Module in YAML\nDESCRIPTION: Add the serverpod_auth_server dependency to the server's pubspec.yaml file. The version should match the Serverpod version being used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Object-Based One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Shows how to define a one-to-one relationship using an object reference approach, where Serverpod automatically handles the foreign key generation and management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Classes in Protocol\nDESCRIPTION: Example of referencing a serializable class from the auth module in YAML protocol files\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Defining Field Scopes in YAML\nDESCRIPTION: This YAML snippet shows how to define the scope of a field, such as excluding it from the protocol by adding the `database` scope.  This makes the field only accessible for database storage, not via the API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: UserData\nfields:\n  name: String\n  password: String?, database\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform for Serverpod Infrastructure\nDESCRIPTION: Commands for initializing Terraform configuration and deploying the infrastructure defined in the Terraform files. This process downloads the Serverpod module and creates all necessary GCP resources.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with Util Script in Bash\nDESCRIPTION: This snippet runs all continuous integration tests for the Serverpod project locally. It assumes the current working directory is the root serverpod directory. The primary purpose is to verify code changes before making a pull request to the `dev` branch.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/06-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration in Bash\nDESCRIPTION: Initializes Terraform and applies the configuration to deploy the Serverpod infrastructure on AWS. This process creates all necessary AWS resources.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Docker Containers\nDESCRIPTION: This command builds and starts the Docker containers defined in the `docker-compose.yaml` file. It runs Postgres and Redis, which are required by Serverpod. Requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/index.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"docker-compose up -d --build\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing Database Connections in Tests\nDESCRIPTION: Example showing how to optimize database connections in tests by using setUp/setUpAll hooks instead of top-level scope initialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given example test', (sessionBuilder, endpoints) {\n  // Instead of this\n  var session = sessionBuilder.build();\n\n\n  // Do this to postpone connecting to the database until the test group is running\n  late Session session;\n  setUpAll(() {\n    session = sessionBuilder.build();\n  });\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an Exception in YAML\nDESCRIPTION: This YAML snippet illustrates how to define an exception 'MyException', with fields like 'message' and 'errorType'. It is intended for handling errors in Serverpod by defining custom exceptions in endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Dart\nDESCRIPTION: Run raw SQL statements directly on the database when more advanced operations are required, using Serverpod's query method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Client Dependency in Client's pubspec.yaml\nDESCRIPTION: This snippet shows how to add the serverpod_auth_client dependency to the client's pubspec.yaml file, ensuring the client can use the auth module's functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/10-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding SERVER_CLIENT_ID to GoogleService-Info.plist for iOS\nDESCRIPTION: This XML snippet shows how to add the SERVER_CLIENT_ID key to the GoogleService-Info.plist file in an iOS project to configure Google Sign-In.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code\nDESCRIPTION: Command to generate Dart classes from model definitions\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/02-get-started-with-mini.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Testing Diagnostic Event Handlers\nDESCRIPTION: Unit test example for diagnostic event handlers, demonstrating how to verify that events are properly submitted and propagated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var exceptionHandler = TestExceptionHandler();\n\n  withServerpod('Given withServerpod with a diagnostic event handler',\n      experimentalFeatures: ExperimentalFeatures(\n        diagnosticEventHandlers: [exceptionHandler],\n      ), (sessionBuilder, endpoints) {\n    test(\n        'when calling an endpoint method that submits an exception event '\n        'then the diagnostic event handler gets called', () async {\n      final result = await endpoints.diagnosticEventTest\n          .submitExceptionEvent(sessionBuilder);\n      expect(result, 'success');\n\n      final record = await exceptionHandler.events.first.timeout(Duration(seconds: 1));\n      expect(record.event.exception, isA<Exception>());\n      expect(record.space, equals(OriginSpace.application));\n      expect(record.context, isA<DiagnosticEventContext>());\n      expect(\n          record.context.toJson(),\n          allOf([\n            containsPair('serverId', 'default'),\n            containsPair('serverRunMode', 'test'),\n            containsPair('serverName', 'Server default'),\n          ]));\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Project\nDESCRIPTION: Commands to create and start a new Serverpod project with Docker dependencies\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n$ cd notes/notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Row in Dart\nDESCRIPTION: Example of deleting a single Company record\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \nvar companyDeleted = await Company.db.deleteRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Executing a Database Transaction in Serverpod using Dart\nDESCRIPTION: This snippet demonstrates how to use the session.db.transaction method to perform multiple database operations atomically. It inserts both a company and an employee record within a single transaction, ensuring that either both operations succeed or neither does.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Package Command\nDESCRIPTION: Terminal command for creating a new Flutter package for custom module development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS GoogleService-Info.plist\nDESCRIPTION: XML configuration for adding server client ID to the iOS GoogleService-Info.plist file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Running All Tests - Bash\nDESCRIPTION: This snippet shows how to run all tests for the Serverpod project locally after changing to the root directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/10-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ util/run_tests\n```\n\n----------------------------------------\n\nTITLE: Creating a Repair Migration in Serverpod\nDESCRIPTION: Command to create a repair migration to sync the database schema with the migration system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Old Syntax for Model Definition\nDESCRIPTION: This YAML snippet shows the old syntax for defining a Serverpod model, including deprecated keywords.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, api\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod with Dart\nDESCRIPTION: This Bash command is used to start the Serverpod application in production mode with a specific server ID. It is important to configure the server ID if you are running multiple servers in a cluster, though having the same server ID for all is feasible when using services like AWS Fargate.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/04-deployments/02-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Monitoring WebSocket Connection Status in Serverpod\nDESCRIPTION: Demonstrates how to listen for connection state changes in the Serverpod client. This allows the UI to react to connection changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\ncontroller.addConnectionStatusListener(_chatConnectionStatusChanged);\n```\n\n----------------------------------------\n\nTITLE: Creating a database migration\nDESCRIPTION: This command creates a new database migration using the Serverpod CLI. The migration includes the database schema and SQL code to create or update database tables. This is necessary whenever the table definitions change.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Dart\nDESCRIPTION: Dart code to configure the AuthConfig for allowing unsecure random number generation in the authentication module. This preserves the old behavior if secure random number generation is not available.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: true,\n));\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serverpod Module\nDESCRIPTION: Command to create a new custom Serverpod module using the module template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Note List UI Implementation\nDESCRIPTION: Widget build method implementation for displaying the list of notes using ListView.builder\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Note Model Schema\nDESCRIPTION: YAML configuration for defining a Note class with serializable properties and database table mapping\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\ntable: note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Default Referential Actions in YAML\nDESCRIPTION: This snippet illustrates the default behavior of referential actions in Serverpod, using `NoAction` for updates and `Cascade` for deletes.  It defines how related tables should be updated or deleted when changes occur in the parent table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"relation(onUpdate=NoAction, onDelete=Cascade)\"\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod with Serverless Role\nDESCRIPTION: This snippet shows how to launch the Serverpod server with the 'serverless' role. The command line uses Dart to specify the role of the server being started using the '--role' argument.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Adding Database Indexes in YAML for Serverpod\nDESCRIPTION: This snippet shows how to define database indexes in the YAML file for improved query performance. It includes options for specifying index fields and types.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Database Method Migration Examples\nDESCRIPTION: Examples of old and new database method usage in Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// The new find method is a drop-in replacement.\nExample.find(...); // old\nExample.db.find(...); // new\n\n// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.\nExample.findSingleRow(...);\nExample.db.findFirstRow(...);\n\n// The new findById method is a drop-in replacement.\nExample.findById(...); // old\nExample.db.findById(...); // new\n\n// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.\nExample.delete(...);\nExample.db.deleteWhere(...);\n\n// The new findById method is a drop-in replacement but returns the id of the row deleted.\nExample.deleteRow(...); // old\nExample.db.deleteRow(...); // new\n\n// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.\nExample.update(...);\nExample.db.updateRow(...);\n\n// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.\nExample.insert(...);\nExample.db.insertRow(...);\n\n// The new count method is a drop-in replacement.\nExample.count(...);\nExample.db.count(...);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pixorama Widget Structure\nDESCRIPTION: Initial setup of the Pixorama widget with necessary imports and class structure\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:pixels/pixels.dart';\nimport 'package:pixorama_client/pixorama_client.dart';\n\nimport '../../main.dart';\n\nclass Pixorama extends StatefulWidget {\n  const Pixorama({super.key});\n\n  @override\n  State<Pixorama> createState() => _PixoramaState();\n}\n\nclass _PixoramaState extends State<Pixorama> {\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Server Code\nDESCRIPTION: Command to generate Dart classes from model definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Fetching User ID from Session in Dart\nDESCRIPTION: This function retrieves the authenticated user's ID from the Session object. It uses the asynchronous getter 'authenticated' to access the user's authentication information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  final authenticationInfo = await session.authenticated;\n  final userId = authenticationInfo?.userId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serverpod Module\nDESCRIPTION: Command to create a new custom Serverpod module using the module template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Module Command\nDESCRIPTION: Command for creating a new custom Serverpod module using the create command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Exception in YAML\nDESCRIPTION: This YAML snippet defines a serializable exception named 'MyException' with message and errorType fields. It is structured similarly to other serializable entities but uses the 'exception' keyword to designate it as an exception.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Running Dart Tests\nDESCRIPTION: Executes the Dart test command to run all defined tests, thereby validating the functionality of the project components.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndart test\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Dart\nDESCRIPTION: Shows how to execute raw SQL queries when more advanced database operations are needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Complete AWS Install Dependencies Script\nDESCRIPTION: Full bash script for installing and configuring Dart SDK and Serverpod service on AWS EC2 instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nDART_VERSION=3.5.1\n\nif [ -f \"/etc/profile.d/script.sh\" ]; then\n    sudo rm /etc/profile.d/script.sh\nfi\n\nif [ ! -d \"/usr/lib/dart$DART_VERSION\" ]; then\n  wget -q https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-x64-release.zip -P /tmp\n  cd /tmp || exit\n  unzip -q dartsdk-linux-x64-release.zip\n  sudo mv dart-sdk/ /usr/lib/dart$DART_VERSION/\n  sudo chmod -R 755 /usr/lib/dart$DART_VERSION/\n  rm -rf dartsdk-linux-x64-release.zip\nfi\n\nsudo ln -sf \"/usr/lib/dart$DART_VERSION/bin/dart\" /usr/local/bin/dart\n\ncat > /lib/systemd/system/serverpod.service << EOF\n[Unit]\nDescription=Serverpod server\nAfter=multi-user.target\n\n[Service]\nUser=ec2-user\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/serverpod/active/mypod_server/deploy/aws/scripts/run_serverpod\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nWantedBy=network-online.target\nEOF\n\nsystemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Database Instance - Bash\nDESCRIPTION: This bash command stops the running Docker container that serves the Postgres database for a Serverpod project, effectively halting the database operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"$ docker compose stop\"\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod with Docker Compose\nDESCRIPTION: These commands navigate to the server directory, start the Docker containers using Docker Compose, and then run the Serverpod server. It assumes that Docker Desktop is running and that the necessary Docker Compose configuration is present.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"cd mypod/mypod_server\\ndocker-compose up -d --build\\nserverpod run\"\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Flutter package for a module\nDESCRIPTION: This command uses `flutter create` to create a new Flutter package for your module. This Flutter package will usually depend on the client libraries created by `serverpod create` for the module, allowing you to create custom UIs interacting with your Serverpod module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Adding Dev Dependencies for Testing\nDESCRIPTION: Updates pubspec.yaml to include serverpod_test and test packages as development dependencies, essential for running tests in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package\n  test: ^1.24.2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL\nDESCRIPTION: Method to get the public URL for accessing a file stored in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations Command\nDESCRIPTION: Terminal command to apply database migrations during server startup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container for Serverpod Test Server\nDESCRIPTION: Commands to start the Docker container for the test server, build it, and set up the required database tables. This provides the necessary infrastructure for running integration tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/07-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: State Variables Declaration for Notes Management\nDESCRIPTION: Declaration of state variables for storing notes and handling connection exceptions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nList<Note>? _notes;\nException? _connectionException;\n```\n\n----------------------------------------\n\nTITLE: State Variables Declaration\nDESCRIPTION: Declaration of state variables for storing notes and handling connection exceptions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nList<Note>? _notes;\nException? _connectionException;\n```\n\n----------------------------------------\n\nTITLE: Apply Terraform Infrastructure Configuration\nDESCRIPTION: Command to deploy the infrastructure using Terraform. This process takes approximately 15 minutes and requires database passwords from the passwords.yaml file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Removing Serverpod Development Database and Deleting All Data\nDESCRIPTION: This bash command stops the Serverpod development database and removes all associated data using the -v flag with Docker Compose.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Preparing Cloud Run Deployment Script\nDESCRIPTION: Commands to copy and make the deployment script executable in the server directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp deploy/gcp/console_gcr/cloud-run-deploy.sh .\nchmod u+x cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers for Testing in Bash\nDESCRIPTION: Runs Docker Compose to start the Postgres and Redis containers for testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Dig Command\nDESCRIPTION: Example output from the dig command showing Google's domain name servers for a correctly configured domain.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nns-cloud-b4.googledomains.com.\nns-cloud-b1.googledomains.com.\nns-cloud-b2.googledomains.com.\nns-cloud-b3.googledomains.com.\n```\n\n----------------------------------------\n\nTITLE: Repairing Migration System with Data Preservation\nDESCRIPTION: For projects holding data that needs to be retained, these snippets demonstrate the migration repair process to align the live database schema with the new migration system, while preserving existing data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart\n$ serverpod create-repair-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Running the Demo Flutter App\nDESCRIPTION: This snippet shows how to run the default demo Flutter application created with Serverpod. The command specified allows it to run in a Chrome browser, leveraging Flutter's development tools for web applications.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/03-creating-project.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Class in YAML\nDESCRIPTION: This snippet demonstrates how to define a serializable class in a YAML file using Serverpod. The class 'Company' includes fields such as 'name', 'foundedDate', and a list of 'employees'. No special dependencies are required aside from having Serverpod set up. This YAML structure will be automatically converted to Dart code when executing the 'serverpod generate' command, making it accessible for both server and client. Supported data types include basic primitives and lists. However, maps and nested lists are not supported as of the current version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands\nDESCRIPTION: These shell commands are used to finalize the installation of the Serverpod auth module. They update dependencies and generate necessary code for the server and client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Dependencies to Flutter Project\nDESCRIPTION: Adds the required dependencies for Serverpod authentication to the Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to navigate to server directory and start the Serverpod server\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/02-get-started-with-mini.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud CLI tools, which is required before deploying to Google Cloud Run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud init\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exception Model in Serverpod\nDESCRIPTION: Definition of a custom exception that can be thrown in endpoints, containing message and enum fields for describing the error.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Creating a Message Stream in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to create a stream that subscribes to a specific channel and listens for incoming messages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/16-server-events.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nstream.listen((message) {\n    print('Received message: $message');\n})\n```\n\n----------------------------------------\n\nTITLE: Using SignInWithGoogleButton in Flutter for Web Integration\nDESCRIPTION: This Dart snippet shows how to use the SignInWithGoogleButton widget in a Flutter application to initiate Google Sign-In. It includes the necessary parameters for the server client ID and redirect URI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Message Forwarding in Stream Session - Dart\nDESCRIPTION: Demonstrates how to set up message forwarding for authenticated users by subscribing to a message channel when a stream is opened. The subscription automatically handles message routing based on user ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Freezed Custom Class for Serverpod\nDESCRIPTION: Demonstrates how to create a custom class using the Freezed package, which is supported by Serverpod for custom serialization. This includes the necessary annotations and factory methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Case-Insensitive Like Filter in Dart\nDESCRIPTION: Demonstrates how to use the ilike filter for case-insensitive partial string matching on user names.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.ilike('a%')\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Stream Communication Endpoint in Dart\nDESCRIPTION: This snippet shows the implementation of a simplified endpoint for handling shared stream communication. It includes methods for posting numbers to a shared stream and listening for numbers on the shared stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CommunicationExampleEndpoint {\n  static const sharedStreamName = 'shared-stream';\n  Future<void> postNumberToSharedStream(Session session, int number) async {\n    await session.messages\n        .postMessage(sharedStreamName, SimpleData(num: number));\n  }\n\n  Stream<int> listenForNumbersOnSharedStream(Session session) async* {\n    var sharedStream =\n        session.messages.createStream<SimpleData>(sharedStreamName);\n\n    await for (var message in sharedStream) {\n      yield message.num;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Module Initialization Commands\nDESCRIPTION: Bash commands to initialize a Serverpod module, including dependency retrieval, code generation, and database migration setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/10-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ serverpod generate\n$ serverpod create-migration\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload in Dart\nDESCRIPTION: This snippet demonstrates the client-side process of uploading a file using Serverpod. It includes requesting an upload description, uploading the file, and verifying the upload with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Serverpod Server\nDESCRIPTION: Run the Serverpod server with automatic generation and reload, which starts Postgres and Redis in Docker containers\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\nserverpod run\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Series of commands for creating and applying database migrations for auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --build --detach\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Correct Method for Calling Endpoints in Serverpod Tests\nDESCRIPTION: Illustrates the proper way to call endpoints in Serverpod tests, using the provided endpoints object to ensure correct behavior and lifecycle management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    var session = sessionBuilder.build();\n\n    test('when calling `hello` then should return greeting', () async {\n      // Use the provided `endpoints` to call the endpoint that should be tested.\n      final greeting =\n          await endpoints.example.hello(session, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Serverpod Mini Project\nDESCRIPTION: Command to create a new Serverpod Mini project using the Serverpod CLI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create myminipod --mini\n```\n\n----------------------------------------\n\nTITLE: Flutter App Launch Command\nDESCRIPTION: Command to run the Flutter application in Chrome browser.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server in Serverless Role\nDESCRIPTION: Command to launch Serverpod server in serverless mode. Used when deploying to serverless environments where maintenance tasks are handled separately.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Classes in Generator Config\nDESCRIPTION: YAML configuration for declaring custom serializable classes in the generator config file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/02-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: AuthKey Table Definition\nDESCRIPTION: YAML definition for the AuthKey table that handles user authentication. This table was moved from Serverpod core to the serverpod_auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Provides a method of access for a user to authenticate with the server.\nclass: AuthKey\ntable: serverpod_auth_key\nfields:\n  ### The id of the user to provide access to.\n  userId: int\n\n  ### The hashed version of the key.\n  hash: String\n\n  ### The key sent to the server to authenticate.\n  key: String?, !persist\n\n  ### The scopes this key provides access to.\n  scopeNames: List<String>\n\n  ### The method of signing in this key was generated through. This can be email\n  ### or different social logins.\n  method: String\nindexes:\n  serverpod_auth_key_userId_idx:\n    fields: userId\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Module Command\nDESCRIPTION: Terminal command for creating a new custom Serverpod module using the create command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Client Dependency\nDESCRIPTION: Represents a YAML configuration for adding serverpod_auth_client as a dependency, necessary for client-side authentication functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod LSP Server via Command Line\nDESCRIPTION: This command initiates the Serverpod Language Server Protocol server, which provides diagnostics for YAML protocol files. It enables developers to identify and resolve potential issues in these files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/09-lsp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod language-server\n```\n\n----------------------------------------\n\nTITLE: Basic Referential Action Syntax in Serverpod YAML\nDESCRIPTION: Demonstrates the basic syntax for specifying referential actions in Serverpod relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelation(onUpdate=<ACTION>, onDelete=<ACTION>)\n```\n\n----------------------------------------\n\nTITLE: Advanced One-to-Many Module Relation - Company Model\nDESCRIPTION: Complements the advanced relation setup by showing the Company model configuration with a list of employees relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<User>?, relation(name=company_employee)\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Endpoint in Dart for Serverpod\nDESCRIPTION: A simple example of creating an endpoint class that extends the Endpoint base class. It defines a hello method that takes a Session object and a name parameter, returning a greeting string as a Future.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/06-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Commands to initialize Terraform and apply the infrastructure configuration to AWS. The init command is only needed for first-time deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Adding Server Module Dependency\nDESCRIPTION: Adding a server module like serverpod_auth to server's pubspec.yaml configuration file. Demonstrates how to include module dependencies with version specification.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/09-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Signing Out Across All Devices in Dart\nDESCRIPTION: This snippet signs a user out from all devices using the 'signOutAllDevices' method in the Serverpod framework. It retrieves the user ID from session's authentication details and revokes all related authentication keys. The snippet uses the 'client.modules.auth.status' endpoint from the 'serverpod_auth' module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test\nDESCRIPTION: Command to execute a specific test file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/07-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Finding User Information by User ID\nDESCRIPTION: Uses the Users class to look up detailed user information based on the user's unique identifier. This method retrieves comprehensive user details from the authentication system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth_client dependency\nDESCRIPTION: This snippet adds the generated client code from the `serverpod_auth` module to your client's `pubspec.yaml` file.  It is a necessary step to incorporate the client-side functionality of the `serverpod_auth` module into your project. Replace `1.x.x` with the actual Serverpod version you are using.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Generating Dart Files from YAML Models\nDESCRIPTION: Command to generate Dart files from the YAML model definitions using Serverpod's generate command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd pixorama_server\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Updated SerializableModel Implementation\nDESCRIPTION: Migration to SerializableModel interface implementation in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements SerializableModel {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Exception in YAML\nDESCRIPTION: YAML configuration for creating a custom serializable exception with message and errorType fields. Uses the 'exception' keyword instead of 'class' to define an exception type that can be passed between server and client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Adding Test Server Hosts\nDESCRIPTION: Configure local hosts file for test server, postgres, and redis integration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/11-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1 serverpod_test_server\n127.0.0.1 postgres\n127.0.0.1 redis\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Module and Company Relations in YAML\nDESCRIPTION: This YAML snippet demonstrates a more advanced example of defining a User model with both a module relation (to UserInfo) and a one-to-many relation with a Company model. It showcases how to combine module relations with custom model relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\n  company: Company?, relation(name=company_employee)\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n  company_unique_idx:\n    fields: companyId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Database Update Operation\nDESCRIPTION: Example of updating an existing database record.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Serverpod Health Check Response\nDESCRIPTION: Example of a successful health check response from a deployed Serverpod instance. The response shows a timestamp indicating when the server processed the request.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod Authentication Module in pubspec.yaml\nDESCRIPTION: Add serverpod_auth_server dependency to the project's pubspec file with the correct version number to enable authentication functionality\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Force Creating Repair Migration\nDESCRIPTION: Command to force create a repair migration despite safeguards.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --force\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod' which generates three packages: server, client, and Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Note Dialog Import Statement\nDESCRIPTION: Import statement for the note dialog component.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_flutter/note_dialog.dart';\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes\nDESCRIPTION: Method for updating a user's authorization scopes\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Development Server\nDESCRIPTION: YAML configuration for setting up the development server, including API server settings and public host configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost # Change this line\n  publicPort: 8080\n  publicScheme: http\n...\n```\n\n----------------------------------------\n\nTITLE: Blog Post Front Matter Example\nDESCRIPTION: Example of YAML front matter configuration for a Docusaurus blog post, including slug, title, authors and tags.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/blog/2021-08-26-welcome/index.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: welcome\ntitle: Welcome\nauthors: [slorber, yangshun]\ntags: [facebook, hello, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields from Database Scope\nDESCRIPTION: This YAML snippet defines a class 'UserData' with a 'password' field that is excluded from the database but included in the API protocol using the 'database' scope. This assists in keeping sensitive information from being stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String?, database\n```\n\n----------------------------------------\n\nTITLE: Using copyWith in Dart\nDESCRIPTION: The 'copyWith' method snippet in Dart demonstrates creating a modified copy of an object while retaining its unchanged fields. This example modifies the 'name' field of a 'User' object from 'John Doe' to 'Jane Doe'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar john = User(name: 'John Doe', age: 25);\nvar jane = john.copyWith(name: 'Jane Doe');\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection in Serverpod\nDESCRIPTION: YAML configuration for connecting to PostgreSQL from Cloud Run using Cloud SQL Proxy with Unix socket connection. Requires replacing the connection name placeholder with your actual GCP SQL instance connection string.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  isUnixSocket: true\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\n  port: 5432\n  name: serverpod\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: FloatingActionButton Implementation for Note Creation\nDESCRIPTION: Widget implementation for triggering note creation dialog through a floating action button in the main scaffold.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server and Database Setup Commands\nDESCRIPTION: Terminal commands for starting the database, applying migrations, and running the Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Raw SQL Queries using Simple Query Protocol in Dart\nDESCRIPTION: Demonstrates the use of unsafeSimpleQuery to execute multiple SQL statements in a single query. This method uses the simple query protocol, which doesn't support parameter binding and is more susceptible to SQL injection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeSimpleQuery(\n    r'SELECT * FROM mytable WHERE id = 1; SELECT * FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Database Mappings in YAML for Serverpod\nDESCRIPTION: This snippet demonstrates how to map a serializable class to a database table using YAML. It includes field definitions and optional database-only or API-only flags.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String, database\n```\n\n----------------------------------------\n\nTITLE: Creating Project with Serverpod Mini\nDESCRIPTION: Command to create a new Serverpod Mini project for Pixorama application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create pixorama --mini\n```\n\n----------------------------------------\n\nTITLE: Installing Authentication Flutter Dependencies\nDESCRIPTION: Add serverpod authentication flutter packages to the project's pubspec.yaml for Google and Apple sign-in support\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  example_client:\n    path: ../example_client\n  serverpod_auth_google_flutter: ^0.9.5\n  serverpod_auth_apple_flutter: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generation Commands\nDESCRIPTION: Terminal commands to update dependencies and generate required code for the module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/08-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Tagging a Migration in Serverpod\nDESCRIPTION: Command to create a migration with a specific tag, useful for identifying migrations that introduced specific changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --tag \"v1-0-0\"\n```\n\n----------------------------------------\n\nTITLE: Importing S3 Cloud Storage Package\nDESCRIPTION: Import statement for Amazon S3 Cloud Storage package in Serverpod server configuration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_s3/serverpod_cloud_storage_s3.dart'\n    as s3;\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Cloud Storage in Dart\nDESCRIPTION: This snippet shows how to add an S3 cloud storage configuration to a Serverpod. It includes setting the storage ID, region, bucket name, and public host. This should be added before starting the pod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Adding Test Profile to Docker Compose YAML\nDESCRIPTION: Adds PostgreSQL and Redis services for testing to the docker-compose.yaml file, including environment variables and volume configurations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\n  profiles:\n    - '' # Default profile\n    - test\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass \"<insert redis test password>\"\n  environment:\n    - REDIS_REPLICATION_MODE=master\n  profiles:\n    - '' # Default profile\n    - test\nvolumes:\n  # ...\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Notes Loading Implementation\nDESCRIPTION: Async method to fetch notes from the server and handle the response or errors.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod CLI Installation\nDESCRIPTION: This command tests that the Serverpod CLI was correctly installed and is accessible from the command line. It should display the help information for the serverpod command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod\n```\n\n----------------------------------------\n\nTITLE: Creating Versioned Repair Migration\nDESCRIPTION: Command to create a repair migration targeting a specific version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --version 20230821135718-v1-0-0\n```\n\n----------------------------------------\n\nTITLE: Creating Serverpod Database Migration\nDESCRIPTION: Command to create a new database migration in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Updating a Database Row in Dart\nDESCRIPTION: Update an existing database row by modifying and saving the object\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Serverpod CLI Usage\nDESCRIPTION: This snippet illustrates the basic syntax for using the Serverpod CLI.  It shows how to invoke the CLI with a specific command and optional arguments. The `<command>` placeholder represents any of the available Serverpod commands.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/07-tools/01-cli.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod <command> [arguments]\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers and Server\nDESCRIPTION: This set of commands initializes the Docker containers and starts the Serverpod server using Dart. It requires Docker and Docker Compose to be properly configured and running.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\ndocker-compose up --build --detach\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serverpod Module\nDESCRIPTION: This bash command demonstrates how to use the 'serverpod create' command to create a new custom module. The --template flag is set to 'module' to generate the appropriate project structure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/10-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Simple Authentication Key Manager\nDESCRIPTION: Implements a basic in-memory authentication key manager for storing and managing tokens\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Child Class with Inheritance in YAML\nDESCRIPTION: Shows how to define a child class that extends a parent class using Serverpod's experimental inheritance feature in YAML format.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    int: age\n```\n\n----------------------------------------\n\nTITLE: Creating Unauthenticated Override for Testing in Dart\nDESCRIPTION: Shows how to create an unauthenticated override for testing purposes. This is used to simulate scenarios where a user is not authenticated.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nstatic AuthenticationOverride unauthenticated();\n```\n\n----------------------------------------\n\nTITLE: Sealed Child Class Definition\nDESCRIPTION: YAML definition for a child class extending a sealed parent class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/20-experimental.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    age: int\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands\nDESCRIPTION: Commands to update dependencies and generate the protocol for the newly added module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Flutter App Entry Point\nDESCRIPTION: Main application setup with Serverpod client initialization and basic app structure\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// lib/main.dart\n\nimport 'package:pixorama_client/pixorama_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'src/pixorama.dart';\n\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  // Start the app.\n  runApp(const PixoramaApp());\n}\n\nclass PixoramaApp extends StatelessWidget {\n  const PixoramaApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Pixorama',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: const Pixorama(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Model definition with deprecated 'database' keyword\nDESCRIPTION: Example of a model definition using the deprecated 'database' keyword to mark fields that should only be available on the server in Serverpod 1.1 and earlier.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, database\n```\n\n----------------------------------------\n\nTITLE: Implicit One-to-many Relationship Definition in YAML\nDESCRIPTION: Demonstrates how to implicitly define a one-to-many relationship between Company and Employee entities using a List type with relation keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget Route\nDESCRIPTION: Shows how to create a custom route by extending the WidgetRoute class and implementing the build method. The route handles web requests and returns a Widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/11-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI\nDESCRIPTION: This command uses the Dart package manager (`pub`) to globally activate the `serverpod_cli` package. This makes the `serverpod` command available in the terminal, allowing you to create and manage Serverpod projects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform\nDESCRIPTION: Command to set the production database password as an environment variable for Terraform deployment. The password should be obtained from the config/passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Self-Relation for Cat Families in Serverpod\nDESCRIPTION: Creates a Cat table with self-referential relationships to model mother-kitten relationships. Each cat can have one mother and multiple kittens, using optional relations to handle cats without mothers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Cat\ntable: cat\nfields:\n  name: String\n  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)\n  kittens: List<Cat>?, relation(name=cat_kittens)\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class in Serverpod using YAML\nDESCRIPTION: Example of a YAML file that defines a serializable 'Company' class with various field types including a String, nullable DateTime, and a List of Employee objects. After running 'serverpod generate', these classes can be used between server and client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Setting Default GCP Project\nDESCRIPTION: Command to set the default project ID for Cloud Run service deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Complete Referential Action Example in Serverpod\nDESCRIPTION: A complete example showing how to define a model class with custom referential actions, setting null on updates and no action on deletes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Legacy SerializableEntity Implementation\nDESCRIPTION: Example of the deprecated SerializableEntity class usage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass extends SerializableEntity {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Database Columns from INT to BIGINT in PostgreSQL\nDESCRIPTION: SQL commands for migrating table columns from int to bigint type. Includes modifying sequence and column types. Suitable for small tables due to table locking during migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nALTER SEQUENCE \"my_table_id_seq\" AS bigint;\nALTER TABLE \"my_table\" ALTER \"id\" TYPE bigint;\nALTER TABLE \"my_table\" ALTER \"myNumber\" TYPE bigint;\n```\n\n----------------------------------------\n\nTITLE: Running Complete Test Suite in Serverpod\nDESCRIPTION: Command to execute all Serverpod tests from the root directory\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/09-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Database Table in YAML\nDESCRIPTION: Shows how to map a Company class to a database table with basic fields using YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Initializes and deploys the server infrastructure using Terraform. The 'terraform init' command is required only once to set up the configuration for a new or changed environment. Then, 'terraform apply' executes the deployment plan on AWS.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Installing Pixels Package with Flutter\nDESCRIPTION: Command to add the pixels package dependency to the Flutter project\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd pixorama_flutter\nflutter pub add pixels\n```\n\n----------------------------------------\n\nTITLE: Old Model Syntax - parent Field\nDESCRIPTION: This snippet illustrates the old syntax for defining a parent relation in Serverpod model files before version 1.2. The `parent` keyword has been moved inside the `relation` keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, parent=example\n```\n\n----------------------------------------\n\nTITLE: Updating Pubspec Files\nDESCRIPTION: Command to regenerate pubspec.yaml files after making template changes\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/11-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ util/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Commands for creating and applying database migrations after adding a module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Logs in YAML Configuration File\nDESCRIPTION: Example YAML configuration for controlling Serverpod logging behavior. This shows how to enable or disable database persistence and console output for session logs.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/09-logging.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsessionLogs:\n  persistentEnabled: true   # Logs are stored in the database\n  consoleEnabled: true      # Logs are output to the console\n```\n\n----------------------------------------\n\nTITLE: Declare Custom Serializable Classes in YAML\nDESCRIPTION: This YAML snippet shows the configuration required to declare a custom serializable class 'FreezedCustomClass' within the generator configuration file. This step is necessary to generate the required code for custom classes in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/02-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Descending Order Sorting in Dart using Serverpod\nDESCRIPTION: Shows how to sort companies in descending order by setting the orderDescending parameter to true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n  orderDescending: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Test Services to Docker Compose\nDESCRIPTION: Configures test instances of PostgreSQL and Redis services in docker-compose.yaml for isolated testing\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\n  profiles:\n    - '' # Default profile\n    - test\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass \"<insert redis test password>\"\n  environment:\n    - REDIS_REPLICATION_MODE=master\n  profiles:\n    - '' # Default profile\n    - test\nvolumes:\n  # ...\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Handler in Serverpod 2.0\nDESCRIPTION: Shows how to implement the new authentication handler by adding it to the Serverpod constructor. Requires importing the serverpod_auth_server package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Serverpod CLI with Dart Pub\nDESCRIPTION: Commands to update the Serverpod CLI to the latest version using Dart's package manager and verify the installed version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nserverpod version\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Exception Fields in Serverpod YAML\nDESCRIPTION: This YAML snippet shows how to define default values for fields in a Serverpod exception. It demonstrates using the 'default' keyword for both string and integer fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/04-exceptions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String, default=\"An error occurred\"\n  errorCode: int, default=1001\n```\n\n----------------------------------------\n\nTITLE: Running Unit and Integration Tests\nDESCRIPTION: These commands demonstrate how to run different types of tests in a Dart project. The first command runs all tests, while the second and third commands filter tests by tag to run only integration tests or exclude integration tests, respectively.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"# All tests (unit and integration)\ndart test\n\n# Only integration tests: add --tags (-t) flag\ndart test -t integration\n\n# Only unit tests: add --exclude-tags (-x) flag\ndart test -x integration\"\n```\n\n----------------------------------------\n\nTITLE: Updating Single Row in Dart\nDESCRIPTION: Example of updating a single Company record\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \ncompany.name = 'New name';\nvar updatedCompany = await Company.db.updateRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Launching Test Server\nDESCRIPTION: Commands to start the test server for running individual tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/07-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Serialization Before Serverpod 2.0 in Dart\nDESCRIPTION: Example of serialization in Dart before Serverpod 2.0, which required a serializationManager parameter for object deserialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal SerializationManager serializationManager = Protocol();\nfinal ClassName test = ClassName.fromJson(json, serializationManager);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project - Bash\nDESCRIPTION: This snippet shows how to create a new Serverpod project named 'notes' using the Serverpod CLI, and how to start the server using Docker.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create notes\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes/notes_server\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --build --detach\n\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --apply-migrations\n\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Google Service Info Plist\nDESCRIPTION: XML configuration for adding server client ID to the iOS GoogleService-Info.plist file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth Flutter Dependencies in YAML\nDESCRIPTION: This snippet demonstrates how to add the Flutter-specific dependencies for serverpod_auth in the app's pubspec.yaml file. It includes shared, Google, and Apple authentication packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^0.9.x\n  serverpod_auth_google_flutter: ^0.9.x\n  serverpod_auth_apple_flutter: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Tagged Migration Creation Command\nDESCRIPTION: Command demonstrating how to create a migration with a specific tag for better version tracking.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --tag \"v1-0-0\"\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Package for Custom Module\nDESCRIPTION: This bash command shows how to create a new Flutter package for a custom Serverpod module using the flutter create command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Full Example of Referential Actions in YAML\nDESCRIPTION: This complete example demonstrates how to define a relation in Serverpod using referential actions. It indicates how the parentId will behave upon updates and deletions of the parent record.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Accessing Database with New Session Object Methods\nDESCRIPTION: This code snippet shows the updated way of accessing the database through the session object in Serverpod 2.0. It demonstrates replacing the old dbNext access method with the new db method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nsession.db.find(...);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project - Bash\nDESCRIPTION: This command creates a new Serverpod project directory named 'mypod' that initializes the default server, client, and Flutter packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Implementing fromJson() Factory Constructor for Custom Serialization in Dart\nDESCRIPTION: Example of a fromJson() factory constructor that deserializes a JSON object, taking both the JSON data and a SerializationManager as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n  Map<String, dynamic> json,\n  SerializationManager serializationManager,\n) {\n  return ClassName(\n    name: json['name'] as String,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Note Dialog in Flutter\nDESCRIPTION: This code creates a dialog for note input in Flutter. It includes a function to show the dialog and a stateful widget for the dialog itself.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget Route in Serverpod Dart\nDESCRIPTION: This Dart code demonstrates how to define a custom route by subclassing `WidgetRoute` and implementing its `build` method. The `build` method is responsible for returning a `Widget` that defines the HTML structure returned in response to requests matching the route.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/11-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Row in Dart\nDESCRIPTION: Example of inserting a single Company record into the database using insertRow method\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar row = Company(name: 'Serverpod');\nvar company = await Company.db.insertRow(session, row);\n```\n\n----------------------------------------\n\nTITLE: Listening to Server Stream Updates\nDESCRIPTION: Example of how to listen to incoming stream messages from a server endpoint in the client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migration\nDESCRIPTION: Apply the migration by starting the server with the apply-migrations flag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: User Login Endpoint Example in Dart\nDESCRIPTION: This snippet demonstrates a basic example of a user login endpoint in Serverpod.  It authenticates the user using `authenticateUser`, and if successful, issues a token using `issueMyToken` which is then returned to the client. If authentication fails, it returns null.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass UserEndpoint extends Endpoint {\n  Future<LoginResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    var identifier = authenticateUser(session, username, password);\n    if (identifier == null) return null;\n\n    return issueMyToken(identifier, scopes: {});\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations Command\nDESCRIPTION: Command to apply pending database migrations during server startup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI using Dart\nDESCRIPTION: This command activates the Serverpod command-line interface (CLI) using Dart's package manager. Ensure that Dart and Flutter are properly installed and configured before running this command. Once activated, you can use the 'serverpod' command to manage your Serverpod projects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serverpod Module\nDESCRIPTION: Bash command to create a new custom Serverpod module using the serverpod create command with the module template. This generates both server and client Dart packages for the module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Classes in Protocol\nDESCRIPTION: Example of referencing a serializable class from the auth module in YAML protocol files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/08-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Classes for Sealed Hierarchy\nDESCRIPTION: Illustrates the resulting Dart classes generated from the YAML definitions using Serverpod's experimental sealed classes feature.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nsealed class ParentClass {\n    String name;\n}\n\nclass ChildClass extends ParentClass {\n    String name;\n    int age;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Auth Module in generator.yaml\nDESCRIPTION: This code snippet demonstrates how to add the serverpod_auth module to the generator.yaml configuration file, giving it a nickname for easier referencing from the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/10-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod with Custom Mode and Server ID\nDESCRIPTION: Command to start Serverpod server in production mode with a specific server ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Changes to Deploy Infrastructure\nDESCRIPTION: This snippet shows the command to apply the Terraform configuration, which sets up the specified infrastructure for the Serverpod application. It prompts for database passwords and executes deployment changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Relationship in YAML\nDESCRIPTION: Demonstrates how to configure parent-child relationships between database tables using YAML.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Employee\ntable: employee\nfields:\n  companyId: int, parent=company\n  name: String\n  birthday: DateTime\n```\n\n----------------------------------------\n\nTITLE: Defining ImageUpdate Model in YAML\nDESCRIPTION: YAML definition for the ImageUpdate model, which captures changes to individual pixels with their index and new color value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ImageUpdate\nfields:\n  pixelIndex: int\n  colorIndex: int\n```\n\n----------------------------------------\n\nTITLE: Basic Endpoint Implementation\nDESCRIPTION: Example of creating a basic endpoint with a hello method in Serverpod\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Output Example\nDESCRIPTION: Example of expected terminal output when successfully starting the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/index.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nStarting Serverpod.\n\n • Automatic generate and reload are enabled.\n\nSpinning up serverpod generate (this can take a few seconds).\nStarting Docker (for Postgres and Redis).\nWaiting for Postgres on localhost:8090.\nWaiting for Redis on localhost:8091.\nSetup complete. Starting the server.\n\nSERVERPOD version: 0.9.x mode: development\nInsights listening on port 8081\nServer id 0 listening on port 8080\n```\n\n----------------------------------------\n\nTITLE: Initializing User Object in Stream Session - Dart\nDESCRIPTION: Shows how to associate a user object with a streaming session when a stream is opened. The user object persists for the duration of the session and is automatically discarded when the session ends.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: User Account Creation and Validation with EmailAuthController\nDESCRIPTION: Demonstrates the process of creating a user account and validating it using the EmailAuthController in Flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.createAccountRequest(userName, email, password);\n\nawait authController.validateAccount(email, verificationCode);\n```\n\n----------------------------------------\n\nTITLE: Including Nested Objects in a List\nDESCRIPTION: This snippet demonstrates including nested objects within a list of related objects.  It fetches a company with its employees, and for each employee, it includes their address.  The `includes` field within `includeList` is used to specify the nested inclusion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        address: Address.include(),\n      ),\n    ),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Testing Shared Stream Interaction with Multiple Users\nDESCRIPTION: This Dart code demonstrates how to test scenarios involving multiple users interacting with a shared stream in Serverpod. It uses `withServerpod` to create separate sessions for different users and verifies that messages posted by one user are received by another user listening to the stream.  It ensures proper stream registration before posting messages using `flushEventQueue`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n\"withServerpod('Given CommunicationExampleEndpoint', (sessionBuilder, endpoints) {\n  const int userId1 = 1;\n  const int userId2 = 2;\n\n  test(\n      'when calling postNumberToSharedStream and listenForNumbersOnSharedStream '\n      'with different sessions then number should be echoed',\n      () async {\n    var userSession1 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId1,\n        {},\n      ),\n    );\n    var userSession2 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId2,\n        {},\n      ),\n    );\n\n    var stream =\n        endpoints.testTools.listenForNumbersOnSharedStream(userSession1);\n    // Wait for `listenForNumbersOnSharedStream` to execute up to its \n    // `yield` statement before continuing\n    await flushEventQueue(); \n\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 111);\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 222);\n\n    await expectLater(stream.take(2), emitsInOrder([111, 222]));\n  });\n});\"\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod in Serverless Role Using Bash\nDESCRIPTION: Command to start a Serverpod server with the serverless role. This configuration is optimal for serverless environments where the server only handles incoming connections without maintenance tasks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Updating Dart SDK Version in pubspec.yaml\nDESCRIPTION: Changes required in pubspec.yaml files to update the minimum Dart SDK version from 2.19.0 to 3.0.0 for Serverpod 1.2 compatibility.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=2.19.0 <4.0.0'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Old vs New Model Syntax - API Fields\nDESCRIPTION: Examples showing the old and new syntax for API fields in model definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, api\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Creating Stateful Pixorama Widget\nDESCRIPTION: This Dart snippet defines the `Pixorama` stateful widget, which serves as the main component for drawing operations. It imports essential packages and initializes a state management component for handling drawing tasks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:pixels/pixels.dart';\nimport 'package:pixorama_client/pixorama_client.dart';\n\nimport '../../main.dart';\n\nclass Pixorama extends StatefulWidget {\n  const Pixorama({super.key});\n\n  @override\n  State<Pixorama> createState() => _PixoramaState();\n}\n\nclass _PixoramaState extends State<Pixorama> {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Connection Error Handler Implementation\nDESCRIPTION: Method to handle connection failures and update the state accordingly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Indexes in YAML for Serverpod\nDESCRIPTION: This snippet illustrates how to add database indexes to improve performance, defined directly in the YAML file for the serializable object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Packages with Flutter\nDESCRIPTION: Command to install Firebase Core, Auth, and UI Auth packages to your Flutter project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add firebase_core firebase_auth firebase_ui_auth\n$ flutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations\nDESCRIPTION: Apply the migration by starting the server with the apply-migrations flag to set up auth tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Starting the Serverpod Mini Server\nDESCRIPTION: Commands to navigate to the server directory and start the Serverpod Mini server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/02-get-started-with-mini.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Flutter Dependencies in Flutter App's pubspec.yaml\nDESCRIPTION: This code snippet demonstrates how to add the necessary Serverpod auth Flutter package dependencies to the Flutter app's pubspec.yaml file for integration with various authentication methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/10-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod and Flutter App\nDESCRIPTION: These bash commands start the database and server for the Serverpod backend, and then launch the Flutter app in Chrome.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n\n$ cd notes_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Module Nickname\nDESCRIPTION: Optionally add a nickname for the auth module in the generator.yaml configuration file. This nickname will be used as the module name in your code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Commands to initialize Terraform and apply the infrastructure configuration. The init command is only needed for the first deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Updating 'api' Field in Serverpod Model Definitions\nDESCRIPTION: Migration of model definitions from the deprecated 'api' keyword to the new '!persist' keyword for fields that should not be stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, api\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serverpod CLI - Bash\nDESCRIPTION: This snippet outlines the steps required to run the Serverpod CLI command from the cloned repository, including changing the directory and activating the Dart packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/10-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tools/serverpod_cli\n$ dart pub get\n$ dart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Test Environment Configuration\nDESCRIPTION: Configuration for test environment including API, Insights, and web server settings, plus database and Redis configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Incorrect Direct Endpoint Testing in Serverpod\nDESCRIPTION: Shows incorrect way of testing endpoints by instantiating them directly, which bypasses important lifecycle events and validation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // ❌ Don't instantiate endpoints directly\n  var exampleEndpoint = ExampleEndpoint();\n\n  withServerpod('Given Example endpoint', (\n    sessionBuilder,\n    _ /* not using the provided endpoints */,\n  ) {\n    var session = sessionBuilder.build();\n\n    test('when calling `hello` then should return greeting', () async {\n      // ❌ Don't call and endpoint method directly on the endpoint class.\n      final greeting = await exampleEndpoint.hello(session, 'Michael'); \n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Note Dialog Implementation in Flutter\nDESCRIPTION: Custom dialog widget for creating and editing notes. Includes a text input field and save functionality with callback handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Endpoint in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to create a basic endpoint in Serverpod. The endpoint extends the Endpoint class and includes a method that returns a Future<String>. The method takes a Session object and a name parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart SDK Installation Script\nDESCRIPTION: Bash command for downloading specific version of Dart SDK during server initialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://storage.googleapis.com/dart-archive/channels/stable/release/3.5.1/sdk/dartsdk-linux-x64-release.zip\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Foreign Key for One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Shows how to customize the name of the foreign key field in a one-to-one relationship using the 'field' parameter. This allows for more flexibility in naming conventions and database design.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  customIdField: int\n  address: Address?, relation(field=customIdField)\nindexes:\n  user_address_unique_idx:\n    fields: customIdField\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Class with Inheritance\nDESCRIPTION: Shows the resulting Dart class structure after inheriting from a parent class with multiple fields\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/20-experimental.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass ChildClass extends ParentClass {\n    String name\n    int age\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration in Serverpod\nDESCRIPTION: YAML configuration for adding AWS access credentials to the passwords.yaml file, required for S3 storage functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Forcing Migration Creation - Bash\nDESCRIPTION: The command forces the creation of a migration even if no changes are detected or if there is potential data loss. This is done by appending the '--force' flag to the migration creation command for overriding safeguards.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Module Import\nDESCRIPTION: Shows how to import the authentication module in the server configuration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter Application - Bash\nDESCRIPTION: This command changes the directory to the Flutter app part of the Mini project and runs it in Chrome, allowing you to interact with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/02-get-started-with-mini.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Adding Google Sign-In Button in Dart\nDESCRIPTION: Implement a Google sign-in button with callback handlers for successful and failed authentication attempts\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  onSignedIn: () { ... handle sign in here ... },\n  onFailure: () { ... handle fail to sign in here ... },\n)\n```\n\n----------------------------------------\n\nTITLE: Finding a Row by ID in Serverpod using Dart\nDESCRIPTION: Demonstrates how to retrieve a single row from the database by its ID using the findById method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Migrating to SerializableModel in Dart\nDESCRIPTION: Example of migrating from SerializableEntity to SerializableModel in Dart, which is the recommended approach for creating serializable models in Serverpod 2.0 and later.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements SerializableModel {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up CLI Development Environment - Bash Commands\nDESCRIPTION: Commands to setup local development environment for Serverpod CLI tools\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/10-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tools/serverpod_cli\n$ dart pub get\n$ dart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Delete Button Implementation in ListTile\nDESCRIPTION: Adds a delete icon button to each note, removing the note from the local state and calling the delete method to remove it from the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter Package for Modules\nDESCRIPTION: This bash command creates a Flutter package that aligns with the newly created module, which may require custom Flutter code for integration. The command ensures that the created package uses the correct template for functional purposes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/08-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Adding Client Module Dependencies\nDESCRIPTION: Configuration for adding serverpod_auth_client module dependency to the client's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Dependencies to Client Project\nDESCRIPTION: This YAML snippet shows the dependencies to be added to the pubspec.yaml file in the client project for Serverpod authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating Expressions for Queries in Dart\nDESCRIPTION: Expressions are essential for condition-based operations such as finding or deleting rows. Serverpod supports statically type-checked expression building.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\\nt.name.equals('My company')\\n\\n// Companies founded at or after 2020\\nt.foundedDate >= DateTime.utc(2020)\\n\\n// Companies with number of employees between 10 and 100\\n(t.numEmployees > 10) & (t.numEmployees <= 100)\\n\\n// Companies that has the founded date set\\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Updating and Deleting Database Rows with Serverpod in Dart\nDESCRIPTION: These snippets demonstrate how to update and delete database rows using Serverpod's generated classes in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod', which generates three packages: server, client, and Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Creating a Relation by Table Reference in Serverpod\nDESCRIPTION: Alternative approach to create a relation by referencing the table name directly rather than using the module syntax. This approach is useful when only needing to access the ID of the related model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfoId: int, relation(parent=serverpod_user_info)\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring module in generator.yaml\nDESCRIPTION: This snippet demonstrates how to add the serverpod_auth module to your generator.yaml configuration file. The nickname 'auth' determines how you will reference the module from the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Apple Auth Dependency\nDESCRIPTION: Configuration for adding the Serverpod Apple authentication package to the project's dependencies\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Starting Development Database with Docker\nDESCRIPTION: Command to start a preconfigured PostgreSQL database instance using Docker Compose in detached mode.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Executing Unsafe Simple Execute for Data Modification in Dart\nDESCRIPTION: This snippet demonstrates how to run a data-modifying SQL statement using the `unsafeSimpleExecute` method. Similar to `unsafeSimpleQuery`, it does not return any results and should be used with caution due to the risks of SQL injection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeSimpleExecute(\n    r'DELETE FROM mytable WHERE id = 1; DELETE FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Row in Dart\nDESCRIPTION: Example of deleting a single company record from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \nvar id = await Company.db.deleteRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Exception in YAML\nDESCRIPTION: Example of creating a custom exception class that can be thrown from endpoints. The exception includes fields for a message and an error type using an enum.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Database Transactions in Dart\nDESCRIPTION: This Dart snippet demonstrates how to handle database transactions using the `session.db.transaction` method.  The code performs database queries within the transaction and optionally returns a value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n\"var result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n\n  // Optionally return a value.\n  return true;\n});\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Exception in Serverpod YAML\nDESCRIPTION: This example demonstrates how to define a custom exception class with fields for error message and an enum type for error classification.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Generating Dart Files from YAML Models\nDESCRIPTION: Command to generate Dart files from the YAML model definitions using serverpod generate.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd pixorama_server\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Parent-Child Relationship Definition in YAML\nDESCRIPTION: Demonstrates how to establish parent-child relationships between tables using the parent property with automatic deletion handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Employee\ntable: employee\nfields:\n  companyId: int, parent=company\n  name: String\n  birthday: DateTime\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod with Custom Mode and Server ID\nDESCRIPTION: Command to start the Serverpod server with custom configuration mode and server ID. This example demonstrates how to run the server in production mode with server ID 2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/04-deployments/01-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Commands for initializing and managing database migrations in Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down -v\n$ docker-compose up --build --detach\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart\n$ serverpod create-repair-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Defining Database Mapping in YAML\nDESCRIPTION: Define a database table mapping for a Company class with various field types and optional relationships\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Objects in YAML for Serverpod\nDESCRIPTION: Defines a serializable 'Note' object in a YAML file with a single text field for use in Serverpod. The code will be generated based on this definition. YAML parsing requires the serverpod code generator to be set up.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Basic Field Indexing in YAML Configuration\nDESCRIPTION: Demonstrates how to add a basic single-field index to a Company table using YAML configuration. The index is created on the 'name' field of the Company class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/04-indexing.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter App\nDESCRIPTION: This command launches the Flutter application, which connects to the Serverpod server and displays the pixel editor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n\"flutter run -d chrome\"\n```\n\n----------------------------------------\n\nTITLE: Importing Note Dialog in Flutter\nDESCRIPTION: This snippet shows how to import the note dialog file in the main Dart file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_flutter/note_dialog.dart';\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite in Serverpod\nDESCRIPTION: Command to run the complete test suite for Serverpod from the root directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/06-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Preparing Cloud Run Deployment Script\nDESCRIPTION: Commands to copy and make the Cloud Run deployment script executable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cp deploy/gcp/console_gcr/cloud-run-deploy.sh .\n$ chmod u+x cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: SerializableModel New Implementation\nDESCRIPTION: Updated implementation using SerializableModel interface, which replaces SerializableEntity in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements SerializableModel {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a repair migration for data preservation\nDESCRIPTION: Commands to create a repair migration that allows upgrading to Serverpod 1.2 while preserving existing database data. Requires starting the server first to access the database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Server Environment - Bash Commands\nDESCRIPTION: Series of commands to start the Docker container for test server and setup tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/06-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Directly Removing Auth Tokens in Serverpod\nDESCRIPTION: This code demonstrates how to directly remove authentication tokens from the database. It's important to note that this method bypasses necessary processes and is not recommended for standard use.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait AuthKey.db.deleteWhere(\n  session,\n  where: (t) => t.userId.equals(userId) & t.method.equals('username'),\n);\n```\n\n----------------------------------------\n\nTITLE: Running the Serverpod Application\nDESCRIPTION: Commands to start the database, server, and Flutter application. These steps are essential for running the complete notes application locally.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd notes_server\ndocker compose up --build --detach\ndart bin/main.dart\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd notes_flutter\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Test Passwords Configuration\nDESCRIPTION: Adds test database and Redis passwords to the passwords.yaml configuration file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Packages for Serverpod Module\nDESCRIPTION: This snippet demonstrates how to add Flutter-specific dependencies for the serverpod_auth module to your app's pubspec.yaml file, allowing for Google and Apple authentication features within your Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"dependencies:\\n  serverpod_auth_shared_flutter: ^0.9.x\\n  serverpod_auth_google_flutter: ^0.9.x\\n  serverpod_auth_apple_flutter: ^0.9.x\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Flutter App Structure in Dart\nDESCRIPTION: Basic structure of the Flutter app's main.dart file, including the MyApp and MyHomePage widgets.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\n// Sets up a singleton client object that can be used to talk to the server from\n// anywhere in our app. The client is generated from your server code.\n// The client is set up to connect to a Serverpod running on a local server on\n// the default port. You will need to modify this to connect to staging or\n// production servers.\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Serverpod Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Serverpod Example'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server with Custom Mode and ID\nDESCRIPTION: Command to start a Serverpod server in production mode with a specific server ID. Used for configuring server instances in a cluster.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Registering a Signed-In User in Client Session Manager\nDESCRIPTION: This code registers a signed-in user in the client’s session manager. It involves checking the server response for successful authentication and, if successful, storing the user information in the session manager. Dependencies include `SessionManager` and a caller object with a `login` method. Expected inputs are server response parameters like userInfo, keyId, and key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar serverResponse = await caller.myAuthentication.login(username, password);\n\nif (serverResponse.success) {\n    // Store the user info in the session manager.\n    SessionManager sessionManager = await SessionManager.instance;\n    await sessionManager.registerSignedInUser(\n        serverResponse.userInfo!,\n        serverResponse.keyId!,\n        serverResponse.key!,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Serverpod\nDESCRIPTION: Server-side method to verify if a file upload was completed successfully. Essential for confirming uploads to third-party services like S3 or Google Cloud Storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Serverpod Tests\nDESCRIPTION: Command to execute all tests in the Serverpod repository\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/11-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ util/run_tests\n```\n\n----------------------------------------\n\nTITLE: Updating Project Pubspec Files\nDESCRIPTION: Command to generate pubspec.yaml files from templates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/07-contribute.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Serverpod\nDESCRIPTION: Server-side method to verify if a file upload has been completed successfully.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform\nDESCRIPTION: Command to set the TF_VAR_DATABASE_PASSWORD_PRODUCTION environment variable required for Terraform deployment using the production database password from config/passwords.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication in Dart\nDESCRIPTION: Sets up custom authentication configuration in the server's main file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;  \n  \nvoid run(List<String> args) async {\n\n  auth.AuthConfig.set(auth.AuthConfig(  \n    minPasswordLength: 12,\n  ));  \n    \n  // Start the Serverpod server.  \n  await pod.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages Client-side\nDESCRIPTION: Example of receiving and handling stream messages on the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows in Dart\nDESCRIPTION: Locate multiple rows using a conditional query with Serverpod in Dart. The result is a list of matching table rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\\n  session,\\n  where: (t) => t.id < 100,\\n  limit: 50,\\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Package for Module\nDESCRIPTION: Command to create a new Flutter package for custom module Flutter code\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/06-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Logs in YAML\nDESCRIPTION: This YAML snippet provides a configuration example for enabling or disabling session logs both in the database and the console. It illustrates how to set persistent and console logging behavior directly in a configuration file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/09-logging.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsessionLogs:\n  persistentEnabled: true   # Logs are stored in the database\n  consoleEnabled: true      # Logs are output to the console\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages and Forwarding to Channels (Dart)\nDESCRIPTION: Illustrates how to handle incoming stream messages and forward them to the appropriate channels based on the message content.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/14-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New User Account with Email Authentication\nDESCRIPTION: Process for user registration with email verification. First request account creation which sends a verification email, then validate the account with the code received.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.createAccountRequest(userName, email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.validateAccount(email, verificationCode);\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Stream Session\nDESCRIPTION: Example of setting a user object when a stream is opened. The user object is associated with the streaming session and automatically discarded when the session ends.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Note Object Schema in YAML\nDESCRIPTION: Creates a serializable Note object with a text field, defining the structure for database and client-server communication\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Note\ntable: note\nfields:\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Server Dependency\nDESCRIPTION: Adds the serverpod_auth_server package as a dependency to the server project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub add serverpod_auth_server\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI\nDESCRIPTION: This command activates the Serverpod command-line interface (CLI) using Dart's pub package manager. It allows you to use the `serverpod` command to create, manage, and run Serverpod projects. Requires Flutter and Dart to be installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"dart pub global activate serverpod_cli\"\n```\n\n----------------------------------------\n\nTITLE: Blog Post YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter metadata configuration block defining the blog post's slug, title, author information, and tags.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/blog/2019-05-28-first-blog-post.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslug: first-blog-post\ntitle: First Blog Post\nauthors:\n  name: Gao Wei\n  title: Docusaurus Core Team\n  url: https://github.com/wgao19\n  image_url: https://github.com/wgao19.png\ntags: [hola, docusaurus]\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Button in Dart\nDESCRIPTION: This Dart snippet demonstrates how to add a Google Sign-In button to a Flutter app using Serverpod's authentication module. It includes callbacks for successful sign-in and failure scenarios.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  onSignedIn: () { ... handle sign in here ... },\n  onFailure: () { ... handle fail to sign in here ... },\n)\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Mini Server\nDESCRIPTION: Commands to navigate to the server directory and start the Serverpod Mini server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Server Docker Environment\nDESCRIPTION: Commands to start Docker container for test server and setup database tables\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/07-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Client Library - Bash Command\nDESCRIPTION: Command to generate the client library for the Serverpod endpoints from the server directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod'. This generates the server, client, and Flutter application packages with the necessary configurations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Index in YAML for Serverpod\nDESCRIPTION: Illustrates how to create a unique index in a Serverpod YAML configuration. The unique index is created on the 'name' field of the 'Company' class, ensuring no two companies have the same name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/04-indexing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Nickname in Generator Config\nDESCRIPTION: Configuration in generator.yaml to set up module nickname for client-side reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Installing serverpod_auth_server Module in YAML\nDESCRIPTION: This snippet shows how to include the serverpod_auth_server module in the server's pubspec.yaml file. It's important to use a version number matching the Serverpod version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows in Serverpod\nDESCRIPTION: These Dart snippets demonstrate how to delete rows in Serverpod, either a single row or multiple rows using a where expression.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth Scopes with SignInWithGoogleButton in Flutter\nDESCRIPTION: Demonstrates how to configure additional Google OAuth scopes for accessing Youtube API using the SignInWithGoogleButton widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  scopes: [YouTubeApi.youtubeReadonlyScope],\n  // other required parameters\n)\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Method from Flutter\nDESCRIPTION: Dart code demonstrating how to create a Company object and call the 'isLegit' method from a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/02-get-started-with-mini.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = Company(\n  name: 'Serverpod',\n  foundedDate: DateTime(2021, 9, 27),\n  employees: [\n    'Alex',\n    'Isak',\n    'Viktor',\n  ],\n);\n\nvar result = await client.company.isLegit(company);\n```\n\n----------------------------------------\n\nTITLE: Applying Serverpod Database Migrations\nDESCRIPTION: Command to start the Serverpod server and apply database migrations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Tests with Bash Script\nDESCRIPTION: Command to run the Serverpod test suite from the root directory using the utility script. Note that tests may not yet work on Windows machines.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/04-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Test Tools\nDESCRIPTION: Command to generate Serverpod test tools.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Updating Pubspec for Authentication Client Dependencies\nDESCRIPTION: Adds necessary client-side dependencies for using Serverpod's email authentication. Requires updates to the `pubspec.yaml` in both client and Flutter projects. Dependencies include `serverpod_auth_client`, `serverpod_auth_email_flutter`, and `serverpod_auth_shared_flutter` with specified versions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Complete Main Application Implementation\nDESCRIPTION: Full implementation of the main application including note management, UI components, and server communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n                    _notes!.add(note);\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subsequent Cursor-Based Pagination Requests\nDESCRIPTION: Demonstrates how to implement subsequent requests in cursor-based pagination using the previous cursor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint cursor = lastCompanyIdFromPreviousPage; // This is typically sent by the client\n\nvar companies = await Company.db.find(\nsession,\nwhere: Company.t.id > cursor,\norderBy: (t) => t.id,\nlimit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server\nDESCRIPTION: Commands to navigate to test server directory and start the server for testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/06-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Updated Serialization Implementation\nDESCRIPTION: Simplified serialization implementation in Serverpod 2.0 without SerializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal ClassName test = ClassName.fromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform\nDESCRIPTION: Command to set the TF_VAR_DATABASE_PASSWORD_PRODUCTION environment variable required for Terraform deployment using the production database password from config/passwords.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Defining ImageUpdate Model in YAML\nDESCRIPTION: YAML definition for the ImageUpdate model capturing changes to individual pixels.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ImageUpdate\nfields:\n  pixelIndex: int\n  colorIndex: int\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Commands for initializing and applying database migrations in Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n$ serverpod create-migration\n$ docker-compose down -v\n$ docker-compose up --build --detach\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Module Command\nDESCRIPTION: Terminal command for creating a new Serverpod module using the create command with module template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/06-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Development Database with Docker Compose\nDESCRIPTION: This bash command starts the preconfigured Docker instance with a Postgres database for Serverpod development. It builds and detaches the container.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/01-connection.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Deprecated SerializableEntity Usage in Dart\nDESCRIPTION: Example of the deprecated SerializableEntity class usage in Dart, which will be removed in Serverpod 3.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass extends SerializableEntity {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Implementation\nDESCRIPTION: Widget for displaying loading state and error handling UI in Flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Classes in Generator YAML\nDESCRIPTION: Configuration example showing how to declare custom serializable classes in the generator.yaml file for Serverpod to recognize them.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/02-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Host Entry for Test Server\nDESCRIPTION: Host file configuration needed for running individual tests locally.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/07-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1 serverpod_test_server\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth Database - Windows\nDESCRIPTION: Docker command to run SQL initialization for auth tables on Windows systems.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/01-setup.mdx#2025-04-20_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ntype .\\generated\\tables-auth.pgsql | docker compose run -T postgres env PGPASSWORD=\"<db_password>\" psql -h postgres -U postgres -d <db_name>\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI\nDESCRIPTION: Command to install the Serverpod command-line interface tool globally using Dart pub.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to navigate to the server directory, start Docker containers, and launch the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\ndocker-compose up --build --detach\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod Mini Project\nDESCRIPTION: Command to create a new Serverpod Mini project using the Serverpod CLI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create mypod --mini\n```\n\n----------------------------------------\n\nTITLE: Updating Database Records in Dart\nDESCRIPTION: Shows how to update existing records in the database using Dart code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Tests - Bash Command\nDESCRIPTION: Command to execute Serverpod's test suite from the root directory\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/04-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Button in Flutter\nDESCRIPTION: Flutter implementation of the Google Sign-In button with server client ID and redirect URI\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Preparing Cloud Run Deployment Script\nDESCRIPTION: Commands to copy and make the Cloud Run deployment script executable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cp deploy/gcp/console_gcr/cloud-run-deploy.sh .\n$ chmod u+x cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Running Individual Tests with Dart\nDESCRIPTION: This command allows a developer to run a specific test case in the Serverpod framework. It is useful for testing individual features after they have been implemented or modified.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/06-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/serverpod\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Database Container\nDESCRIPTION: This bash command uses docker-compose to start the database container for the server project, essential for applying new database migrations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Legacy fromJson Factory Constructor Implementation\nDESCRIPTION: Previous implementation of fromJson factory constructor requiring serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n    SerializationManager serializationManager,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Deployment Status\nDESCRIPTION: Example of a successful response when accessing the Serverpod API endpoint. The response includes a timestamp indicating when the server was last operational.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Test Server in Dart\nDESCRIPTION: Command to start the Serverpod test server using Dart. This is used when running individual tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/06-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Sorting with orderByList in Serverpod (Dart)\nDESCRIPTION: This code snippet illustrates how to sort by multiple columns using the `orderByList` parameter.  It fetches all companies and sorts them first by name in descending order, then by ID in ascending order.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar companies = await Company.db.find(\n  session,\n  orderByList: (t) => [\n    Order(column: t.name, orderDescending: true), \n    Order(column: t.id),\n  ],\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID Fields with Default Values in Serverpod\nDESCRIPTION: Shows how to set default values for UUID fields in Serverpod, including generating random UUIDs and setting specific UUID values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nuuidDefaultRandom: UuidValue, default=random\nuuidDefaultUuid: UuidValue, default='550e8400-e29b-41d4-a716-446655440000'\n```\n\n----------------------------------------\n\nTITLE: Executing Serverpod Upgrade Command\nDESCRIPTION: Command to upgrade an existing Serverpod Mini installation to the full version. Must be run from the server directory. This will add all necessary configuration files for the full version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/01-upgrade-from-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create .\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serverpod CLI Tools in Dart\nDESCRIPTION: Commands to set up and activate the Serverpod command-line interface tools from a local repository.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/06-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Storing Database Passwords in Serverpod\nDESCRIPTION: YAML configuration for storing database passwords in Serverpod. This snippet shows how passwords are stored in the config/passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n\n...\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Code\nDESCRIPTION: Command to generate Dart classes from Serverpod model definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/02-get-started-with-mini.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Credentials for Android\nDESCRIPTION: This bash snippet describes the command to obtain the debug SHA-1 hash in the Android project, which is used when creating client credentials on Google Cloud.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n./gradlew signingReport\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud CLI before configuring your project settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud init\n```\n\n----------------------------------------\n\nTITLE: Join Tables and Nest Objects in Dart\nDESCRIPTION: Serverpod currently lacks automatic join capability. Required table information must be acquired manually and combined as necessary.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\\nclass: Company\\ntable: company\\nfields:\\n  name: String\\n  employees: List<Employee>?, api\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# employee.yaml\\nclass: Employee\\ntable: employee\\nfields:\\n  companyId: int\\n  name: String\\n  birthday: DateTime\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.findById(session, id);\\n\\nvar employees = await Employee.find(\\n  session,\\n  where: (t) => t.companyId.equals(company.id),\\n);\\n\\ncompany.employees = employees;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: These bash commands initialize Terraform and apply the configuration to deploy the Serverpod infrastructure. Run terraform init first to prepare Terraform, and then terraform apply to execute the deployment plan. Confirm the changes when prompted.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Dart\nDESCRIPTION: Shows how to access authenticated user information and user ID from a Session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  final authenticationInfo = await session.authenticated;\n  final userId = authenticationInfo?.userId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Serverpod Request Size Limit\nDESCRIPTION: YAML configuration example showing how to modify the maximum request size limit for endpoint calls.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmaxRequestSize: 1048576\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod Auth Server Dependencies\nDESCRIPTION: Adding the serverpod_auth module as a dependency in the server project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/01-setup.mdx#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Module Nickname in Generator Config\nDESCRIPTION: Optionally add a nickname for the auth module in the config/generator.yaml file. This nickname will be used as the module name in the code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication with Unsecure Random in Serverpod\nDESCRIPTION: Configuration code to enable unsecure random number generation in the authentication module, which is disabled by default in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: true,\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Database Connection in YAML\nDESCRIPTION: This YAML configuration specifies the connection details for the database including the host, port, database name, and user credentials. This is necessary for establishing a connection with the database during application runtime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: localhost\n  port: 8090\n  name: projectname\n  user: postgres\n\n...\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Demo App\nDESCRIPTION: Commands to run the Flutter demo app in Chrome browser.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: InitState Override for Initial Notes Loading\nDESCRIPTION: Implementation of initState to load notes when the widget is first created.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Recreating Docker Database\nDESCRIPTION: These commands remove the existing database container and its volume, then starts a new database from scratch using Docker Compose.  It's used when preserving data isn't necessary.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down -v\n$ docker-compose up --build --detach \n```\n\n----------------------------------------\n\nTITLE: Adding server_test_tools_path to config\nDESCRIPTION: Sets the key server_test_tools_path in generator.yaml to specify the location of generated test tools. This key is essential for the test tools file to be generated correctly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Adding URL Scheme for iOS\nDESCRIPTION: Add a URL scheme to the info.plist file of your iOS project to enable navigation back to the app after signing in. The URL scheme is the reversed client ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Legacy SerializableEntity Implementation\nDESCRIPTION: Previous implementation using deprecated SerializableEntity class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass extends SerializableEntity {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Commands to initialize Terraform and apply the infrastructure configuration to AWS. The init command is only needed for first-time deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Selective Field Visibility\nDESCRIPTION: Example showing how to set different visibility scopes for class fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: SelectivelyHiddenClass\nfields:\n  hiddenSecretKey: String, scope=serverOnly\n  publicKey: String\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authorization Scopes in Serverpod (Dart)\nDESCRIPTION: Shows how to extend the Scope class to create custom authorization scopes for more granular access control to specific endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\n----------------------------------------\n\nTITLE: Using SignInWithFirebaseButton in Dart\nDESCRIPTION: Example of using the SignInWithFirebaseButton widget to trigger the Firebase sign-in flow in a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithFirebaseButton(\n  caller: client.modules.auth,\n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n  onFailure: () => print('Failed to sign in with Firebase.'),\n  onSignedIn: () => print('Signed in with Firebase.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration Bash Script\nDESCRIPTION: This code applies the Terraform configuration, deploying the defined infrastructure. It prompts for production and staging database passwords. Ensure the passwords are obtained from the specified configuration file, and be ready to confirm changes when prompted.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Legacy SerializableEntity Implementation\nDESCRIPTION: Example of deprecated SerializableEntity usage before migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass extends SerializableEntity {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Auth Server Package\nDESCRIPTION: Command to add the serverpod_auth_server package to the server project dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub add serverpod_auth_server\n```\n\n----------------------------------------\n\nTITLE: Migration Command for New Database Representation\nDESCRIPTION: This Bash command illustrates how to create a new empty migration to ensure that new databases are created with the bigint representation for integers in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Deployment Status Verification Response\nDESCRIPTION: Example of a successful Serverpod deployment status response displayed when accessing the API endpoint\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Serverpod (Dart)\nDESCRIPTION: Server-side code to verify if a file upload has been completed. This function takes a session and file path as parameters and returns a Future with a boolean indicating upload success.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Container\nDESCRIPTION: HTML/CSS code for embedding a YouTube video within a responsive container that maintains 16:9 aspect ratio using relative positioning.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/02-support.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position : 'relative', paddingBottom : '56.25%', height : '0' }}><iframe style={{ position : 'absolute', top : '0', left : '0', width : '100%', height : '100%' }} width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/4xMAZJ9Em_I\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod CLI Command - Dart\nDESCRIPTION: This command sequence initializes the Serverpod command line interface from the cloned repository. The commands ensure all necessary packages are fetched and the CLI is activated globally.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/07-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Github Actions Dart SDK Configuration\nDESCRIPTION: YAML configuration for setting up Dart SDK version in Github Actions workflow.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Setup Dart SDK\n        uses: dart-lang/setup-dart@v1.6.5\n        with:\n          sdk: 3.5\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Limit in Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to find multiple rows using a where expression and limit in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: DateTime Default Values in YAML\nDESCRIPTION: Examples of setting default DateTime values using now and specific UTC time.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndateTimeDefaultNow: DateTime, default=now\ndateTimeDefaultUtc: DateTime, default=2024-05-01T22:00:00.000Z\n```\n\n----------------------------------------\n\nTITLE: Adding Floating Action Button for Note Creation\nDESCRIPTION: Implementation of a floating action button that triggers the note creation dialog. The button is only shown when notes are loaded, and optimistically adds the note to the UI before sending to the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Test Server - Bash\nDESCRIPTION: This snippet shows how to start the test server by navigating to the correct directory and executing the Dart main file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/10-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server and Running Individual Tests - Dart\nDESCRIPTION: This series of commands sets up and starts the test server for running individual integration tests. It includes modifying the hosts file, starting Docker containers, and executing a specific test file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/07-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1 serverpod_test_server\n127.0.0.1 postgres\n127.0.0.1 redis\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Handler in Serverpod 2.0\nDESCRIPTION: Shows how to add the authentication handler to the Serverpod object in server.dart after moving from core to serverpod_auth package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific Dart SDK Version in Bash\nDESCRIPTION: This Bash command downloads a specific version of the Dart SDK. It's used in the AWS EC2 instance initialization script to ensure the correct Dart version is installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://storage.googleapis.com/dart-archive/channels/stable/release/3.5.1/sdk/dartsdk-linux-x64-release.zip\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Error Handling in Serverpod (Dart)\nDESCRIPTION: Example of logging an error with additional context including a warning level, exception object, and stack trace. This provides more detailed information for debugging issues in Serverpod applications.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: YAML configuration for AWS credentials in the passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Shows how to specify a custom foreign key field name for a one-to-one relationship instead of using the default auto-generated name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  customIdField: int\n  address: Address?, relation(field=customIdField)\nindexes:\n  user_address_unique_idx:\n    fields: customIdField\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Launching Pixorama Flutter App in Chrome\nDESCRIPTION: This Bash snippet provides instructions to launch the Flutter app in a Chrome browser, facilitating client-side testing of the Pixorama application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Class Structure in YAML\nDESCRIPTION: Example of defining a serializable Company class using Serverpod's native YAML configuration. Shows field definitions with different types including String, DateTime, and List of custom type.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration\nDESCRIPTION: Full docker-compose.yaml configuration including both development and test services for PostgreSQL and Redis\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Development services\n  postgres:\n    image: postgres:16.3\n    ports:\n      - '8090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>\n      POSTGRES_PASSWORD: \"<insert database development password>\"\n    volumes:\n      - <projectname>_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - dev\n  redis:\n    image: redis:6.2.6\n    ports:\n      - '8091:6379'\n    command: redis-server --requirepass \"<insert redis development password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - dev\n\n  # Test services\n  postgres_test:\n    image: postgres:16.3\n    ports:\n      - '9090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>_test\n      POSTGRES_PASSWORD: \"<insert database test password>\"\n    volumes:\n      - <projectname>_test_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - test\n  redis_test:\n    image: redis:6.2.6\n    ports:\n      - '9091:6379'\n    command: redis-server --requirepass \"<insert redis test password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - test\n\nvolumes:\n  <projectname>_data:\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Settings - Dart\nDESCRIPTION: Configures various authentication settings for user management such as password length and user image settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n  \nvoid run(List<String> args) async {\n\n  auth.AuthConfig.set(auth.AuthConfig(  \n    minPasswordLength: 12,\n  ));  \n    \n  // Start the Serverpod server.  \n  await pod.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Flutter Web App\nDESCRIPTION: Command to run the Flutter application in Chrome browser.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hash Pepper in Serverpod\nDESCRIPTION: Configuration of a password hash pepper in the passwords.yaml file for additional security. The pepper adds an extra layer of security to password hashing and storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  emailPasswordPepper: 'your-pepper'\n```\n\n----------------------------------------\n\nTITLE: Applying migrations in Serverpod\nDESCRIPTION: This bash command applies pending database migrations when starting a Serverpod server. The migrations are applied as part of the startup sequence.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"$ dart run bin/main.dart --apply-migrations\"\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed HTML for Tutorial Content\nDESCRIPTION: HTML iframe code for embedding tutorial videos with responsive container divs\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/01-tutorials.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position : 'relative', paddingBottom : '56.25%', height : '0' }}><iframe style={{ position : 'absolute', top : '0', left : '0', width : '100%', height : '100%' }} width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/3Q2vKGacfh0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n```\n\n----------------------------------------\n\nTITLE: Adding SignInWithGoogleButton\nDESCRIPTION: This code snippet demonstrates how to add a `SignInWithGoogleButton` to your Flutter app. This button allows users to sign in with their Google accounts.  The `caller` parameter is a reference to the authentication module, and `onSignedIn` and `onFailure` are callback functions that handle the success and failure cases of the sign-in process.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"SignInWithGoogleButton(\\n  caller: client.modules.auth,\\n  onSignedIn: () { ... handle sign in here ... },\\n  onFailure: () { ... handle fail to sign in here ... },\\n)\"\n```\n\n----------------------------------------\n\nTITLE: Selective Token Removal in Serverpod\nDESCRIPTION: Demonstrates how to selectively remove authentication tokens based on specific criteria using direct database access.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait AuthKey.db.deleteWhere(\n  session,\n  where: (t) => t.userId.equals(userId) & t.method.equals('username'),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth_server Dependency in Dart\nDESCRIPTION: Adds the serverpod_auth_server package as a dependency to the server project using the Dart package manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub add serverpod_auth_server\n```\n\n----------------------------------------\n\nTITLE: Using flushEventQueue Helper in Dart\nDESCRIPTION: Function signature for flushEventQueue helper that is used to flush the event queue during testing. This is useful when waiting for asynchronous events to complete before proceeding with test execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Flutter Dependencies Configuration in YAML\nDESCRIPTION: Required dependencies configuration for the Flutter project including email authentication and shared Flutter packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Dialog Import Statement\nDESCRIPTION: Import statement for the note dialog implementation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_flutter/note_dialog.dart';\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Auth Tables\nDESCRIPTION: Create a new database migration that includes the auth module tables using the Serverpod CLI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Registering a Future Call in Serverpod's Main Run Method\nDESCRIPTION: This code shows how to register a future call in the main run method of the server.dart file. The future call is registered using the registerFutureCall method on the Serverpod object, providing an instance of the future call and a unique name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/14-scheduling.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid run(List<String> args) async {\n  final pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n  );\n\n  ...\n\n  pod.registerFutureCall(ExampleFutureCall(), 'exampleFutureCall');\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Install Serverpod Firebase Auth Package\nDESCRIPTION: This command adds the serverpod_auth_firebase_flutter package to the Flutter project. This package provides widgets and methods to trigger the Firebase authentication UI and integrate it with Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add serverpod_auth_firebase_flutter\n```\n\n----------------------------------------\n\nTITLE: Starting Database Container\nDESCRIPTION: Start your database container from the server project using Docker Compose.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Sorting by Filtered Relation Count in Serverpod\nDESCRIPTION: Shows advanced sorting by using a filtered count of related entities, sorting companies by the number of employees with the specific role of 'developer'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(\n    (employee) => employee.role.equals('developer'),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Serverpod Server\nDESCRIPTION: This snippet shows how to set up the AuthConfig for email authentication in the server.dart file. It includes methods for sending validation and password reset emails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Shows how to call a Serverpod endpoint method from the client side after generating the client code using 'serverpod generate'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Setting up Dart SDK with GitHub Actions in YAML\nDESCRIPTION: This YAML snippet is used to set the Dart SDK version in a GitHub Actions workflow for deploying Serverpod to AWS. It specifies the minor version of Dart to ensure consistency between local and AWS deployment environments. Key parameters include the Dart SDK version specified by ${MINOR_DART_SDK_VERSION}.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n              - name: Setup Dart SDK\n                uses: dart-lang/setup-dart@v1.6.5\n                with:\n                  sdk: ${MINOR_DART_SDK_VERSION}\n\n```\n\n----------------------------------------\n\nTITLE: Send Message to Server Endpoint in Dart\nDESCRIPTION: Utilizes `sendStreamMessage` to send a serialized `MyMessage` object to a server endpoint. Expects `MyMessage` to include properties like `text`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube API with Google Authentication in Dart\nDESCRIPTION: Server-side implementation for accessing the YouTube API using Google authentication. Shows how to create an authenticated client and make API requests to fetch a user's liked videos playlist.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart';\nimport 'package:googleapis/youtube/v3.dart';\n\n\nfinal googleClient = await GoogleAuth.authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youTubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n\n} else {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Attaching Rows in Serverpod Relations\nDESCRIPTION: Demonstrates how to link multiple employees to a company in a single operation using the attach method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attach.employees(session, company!, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Including Related Lists in Serverpod Query\nDESCRIPTION: Shows how to include a list of related objects using the includeList method for one-to-many relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Default Referential Actions for Object Relations in Serverpod\nDESCRIPTION: Shows the default referential actions applied when using an object relation. By default, object relations use NoAction for both onUpdate and onDelete operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: Model?, relation(onUpdate=NoAction, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Database-Only Field Configuration in YAML\nDESCRIPTION: Demonstrates how to configure fields that should only be stored in the database but not exposed via API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String, database\n```\n\n----------------------------------------\n\nTITLE: Checking Domain Name Servers with dig Command\nDESCRIPTION: Command to verify domain name server configuration by querying NS records for a domain. Returns the list of nameservers that the domain is pointed to.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndig +short NS examplepod.com\n```\n\nLANGUAGE: text\nCODE:\n```\nns-cloud-b4.googledomains.com.\nns-cloud-b1.googledomains.com.\nns-cloud-b2.googledomains.com.\nns-cloud-b3.googledomains.com.\n```\n\n----------------------------------------\n\nTITLE: Example File Path\nDESCRIPTION: This Dart code snippet provides an example of a file path that is compatible with S3, emphasizing the importance of using standard characters and numbers and avoiding leading slashes. This example shows how to construct a file path including user ID and image name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n'profile/$userId/images/avatar.png'\n```\n\n----------------------------------------\n\nTITLE: String Default Value Example\nDESCRIPTION: Example of setting a default string value for a field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nstringDefault: String, default='This is a string'\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget Route in Serverpod\nDESCRIPTION: Demonstrates how to create a custom WidgetRoute by extending the base class and implementing the build method. Shows handling of session and HTTP request objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/18-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Migration - Bash\nDESCRIPTION: This command demonstrates how to append a tag to a migration name during creation, helping in identifying migrations that correspond to specific project updates or versions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --tag \"v1-0-0\"\n```\n\n----------------------------------------\n\nTITLE: Complete AWS Installation Dependencies Script with Dart Version Upgrade\nDESCRIPTION: Bash script for installing and configuring the correct Dart SDK version on AWS EC2 instances, including handling of legacy configurations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n#### COPY THE CODE FROM HERE\nDART_VERSION=3.5.1\n\n# Uncomment the following code if you have already generated the project with the older version of serverpod cli\n# What this code do is to remove our previous way of setting dart version in the launch template\nif [ -f \"/etc/profile.d/script.sh\" ]; then\n    sudo rm /etc/profile.d/script.sh\nfi\n\n## install specified dart version if it is not present on the machine\n\nif [ ! -d \"/usr/lib/dart$DART_VERSION\" ]; then\n  wget -q https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-x64-release.zip -P /tmp\n  cd /tmp || exit\n  unzip -q dartsdk-linux-x64-release.zip\n  sudo mv dart-sdk/ /usr/lib/dart$DART_VERSION/\n  sudo chmod -R 755 /usr/lib/dart$DART_VERSION/\n  rm -rf dartsdk-linux-x64-release.zip\nfi\n\n## make symlink to use this dart as default\nsudo ln -sf \"/usr/lib/dart$DART_VERSION/bin/dart\" /usr/local/bin/dart\n\n#### STOP COPYING THE CODE FROM HERE\n\n#### THE FOLLOWING SHOULD BE THE SAME AS THE PREVIOUS CODE\ncat > /lib/systemd/system/serverpod.service << EOF\n[Unit]\nDescription=Serverpod server\nAfter=multi-user.target\n\n[Service]\nUser=ec2-user\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/serverpod/active/mypod_server/deploy/aws/scripts/run_serverpod\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nWantedBy=network-online.target\nEOF\n\nsystemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Serialization in Serverpod 2.0\nDESCRIPTION: Updated model serialization example for Serverpod 2.0, showcasing the simplified process without the serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal ClassName test = ClassName.fromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Action Button for Note Creation\nDESCRIPTION: Widget implementation for the floating action button that triggers note creation dialog.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy FromJson Constructor Implementation\nDESCRIPTION: Previous implementation of fromJson factory constructor requiring serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n    SerializationManager serializationManager,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Deprecated Single Device Signout in Serverpod\nDESCRIPTION: Deprecated method to sign out the current user from a single device. This method uses the deprecated signout endpoint and should be replaced with signOutDevice or signOutAllDevices.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Auth Dependencies\nDESCRIPTION: Adding the necessary Flutter authentication package dependencies to the app's pubspec.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^0.9.x\n  serverpod_auth_google_flutter: ^0.9.x\n  serverpod_auth_apple_flutter: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Installing Local CLI Tools - Bash Commands\nDESCRIPTION: Commands to set up the Serverpod CLI tools for local development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/06-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Package Command\nDESCRIPTION: Terminal command for creating a new Flutter package for custom module Flutter code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/06-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class with YAML in Serverpod\nDESCRIPTION: Example YAML file that defines a serializable Company class with various field types including a string, nullable DateTime, and a list of Employee objects. After generation, these classes can be used as parameters or return types in endpoint methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Markdown Blog Post File Naming\nDESCRIPTION: Examples of valid blog post file naming patterns in Docusaurus that automatically extract post dates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/blog/2021-08-26-welcome/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Firebase Flutter Package\nDESCRIPTION: Command to add the serverpod_auth_firebase_flutter package to a Flutter project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add serverpod_auth_firebase_flutter\n```\n\n----------------------------------------\n\nTITLE: Starting the test server\nDESCRIPTION: This snippet shows how to start the Serverpod test server using `dart bin/main.dart`. It assumes that the current working directory is `tests/serverpod_test_server`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/08-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"cd tests/serverpod_test_server\ndart bin/main.dart\"\n```\n\n----------------------------------------\n\nTITLE: Installing Auth Client Dependencies\nDESCRIPTION: Adding serverpod_auth_client dependency to the client project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/01-setup.mdx#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Server Startup Commands\nDESCRIPTION: Terminal commands for starting the database and server components.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Launching Serverpod Server with Configuration Options\nDESCRIPTION: Demonstrates how to start a Serverpod server with specific mode, server ID, and configuration parameters\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands in Shell\nDESCRIPTION: These shell commands update dependencies and generate necessary code after installing the auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Notes Rendering in ListView\nDESCRIPTION: Updated build method to conditionally render either an empty container or a ListView of notes depending on whether notes have been successfully fetched from the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Only Class Definition\nDESCRIPTION: Example of creating a server-side only class with private information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI Tools using Dart Pub\nDESCRIPTION: Command to install Serverpod CLI tools globally using Dart pub package manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Retrieving a File - Dart\nDESCRIPTION: This snippet demonstrates how to directly retrieve a file from the server using the retrieveFile method. It fetches the file as ByteData from the public storage based on the specified path.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Uploading File from Client (Dart)\nDESCRIPTION: This client-side code snippet illustrates how to upload a file using the `FileUploader` class after obtaining an upload description from the server.  It uploads the file stream and subsequently verifies the successful completion of the upload via the server. Uses FileUploader to handle upload tasks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Flutter Packages to App Dependencies in YAML\nDESCRIPTION: This YAML code demonstrates how to add various Serverpod auth Flutter packages to the Flutter app's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in Dart with Serverpod\nDESCRIPTION: Shows how to check if a user is signed in using the Session object in a Serverpod endpoint method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var isSignedIn = await session.isUserSignedIn;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI Tool\nDESCRIPTION: Command to install the Serverpod command-line interface globally using Dart pub.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod CLI Installation\nDESCRIPTION: Command to verify successful installation of Serverpod CLI tools by displaying the help menu.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod\n```\n\n----------------------------------------\n\nTITLE: Fetching Companies with Limit and Offset in Serverpod (Dart)\nDESCRIPTION: This example shows how to use both 'limit' and 'offset' parameters to implement pagination. It skips the first 30 companies and fetches the next 10.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n  offset: 30,\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Deployment\nDESCRIPTION: Command to execute the deployment script that deploys your Serverpod application to Google Cloud Run. This script deploys both the API server and the Insights API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI Tools\nDESCRIPTION: Commands to set up the Serverpod command line interface tools from local repository.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/06-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages to Serverpod Server\nDESCRIPTION: Demonstrates how to send a serialized message from a client to a server endpoint's stream. Requires an active WebSocket connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/09-streams.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Running Pixorama Server\nDESCRIPTION: This Bash snippet describes the steps to start the Dart server for Pixorama by navigating to the server directory and executing the main server script.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Module Nickname\nDESCRIPTION: Optional configuration in generator.yaml to set a nickname for the auth module reference in code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/01-setup.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Database Method Updates in Dart\nDESCRIPTION: Examples of old and new database method usage showing the transition to the new API structure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// The new find method is a drop-in replacement.\nExample.find(...); // old\nExample.db.find(...); // new\n\n// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.\nExample.findSingleRow(...);\nExample.db.findFirstRow(...);\n\n// The new findById method is a drop-in replacement.\nExample.findById(...); // old\nExample.db.findById(...); // new\n\n// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.\nExample.delete(...);\nExample.db.deleteWhere(...);\n\n// The new findById method is a drop-in replacement but returns the id of the row deleted.\nExample.deleteRow(...); // old\nExample.db.deleteRow(...); // new\n\n// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.\nExample.update(...);\nExample.db.updateRow(...);\n\n// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.\nExample.insert(...);\nExample.db.insertRow(...);\n\n// The new count method is a drop-in replacement.\nExample.count(...);\nExample.db.count(...);\n```\n\n----------------------------------------\n\nTITLE: Token Management Methods\nDESCRIPTION: Demonstrates storing, removing, and retrieving tokens using the authentication key manager\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Store token\nawait client.authenticationKeyManager?.put(token);\n\n// Remove token\nawait client.authenticationKeyManager?.remove();\n\n// Retrieve token\nvar token = await client.authenticationKeyManager?.get();\n```\n\n----------------------------------------\n\nTITLE: Starting Docker and Serverpod Server\nDESCRIPTION: Commands to start Docker containers and run the Serverpod server in development mode\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\ndocker-compose up -d --build\nserverpod run\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS URL Scheme\nDESCRIPTION: XML configuration for registering URL scheme in iOS info.plist to handle Google Sign-In redirect\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Installing Dart SDK in AWS EC2 Instance\nDESCRIPTION: Bash script for installing and configuring a specific version of Dart SDK on AWS EC2 instance during deployment. Includes version specification, download, installation, and system service configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nDART_VERSION=3.5.1\n\n# Uncomment the following code if you have already generated the project with the older version of serverpod cli\n# What this code do is to remove our previous way of setting dart version in the launch template\nif [ -f \"/etc/profile.d/script.sh\" ]; then\n    sudo rm /etc/profile.d/script.sh\nfi\n\n## install specified dart version if it is not present on the machine\n\nif [ ! -d \"/usr/lib/dart$DART_VERSION\" ]; then\n  wget -q https://storage.googleapis.com/dart-archive/channels/stable/release/$DART_VERSION/sdk/dartsdk-linux-x64-release.zip -P /tmp\n  cd /tmp || exit\n  unzip -q dartsdk-linux-x64-release.zip\n  sudo mv dart-sdk/ /usr/lib/dart$DART_VERSION/\n  sudo chmod -R 755 /usr/lib/dart$DART_VERSION/\n  rm -rf dartsdk-linux-x64-release.zip\nfi\n\n## make symlink to use this dart as default\nsudo ln -sf \"/usr/lib/dart$DART_VERSION/bin/dart\" /usr/local/bin/dart\n\ncat > /lib/systemd/system/serverpod.service << EOF\n[Unit]\nDescription=Serverpod server\nAfter=multi-user.target\n\n[Service]\nUser=ec2-user\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/serverpod/active/mypod_server/deploy/aws/scripts/run_serverpod\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nWantedBy=network-online.target\nEOF\n\nsystemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Session Manager Setup in Flutter\nDESCRIPTION: Initialization of SessionManager for handling authentication state in a Flutter app\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Serverpod CLI Commands\nDESCRIPTION: Commands to update and verify the Serverpod CLI installation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nserverpod version\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Host Entries for Testing\nDESCRIPTION: Required host file entries for running Serverpod test server locally\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/09-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1 serverpod_test_server\n127.0.0.1 postgres\n127.0.0.1 redis\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Like Operators\nDESCRIPTION: Using like and notLike operators for case-sensitive pattern matching with wildcards.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.like('A%')\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notLike('B%')\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Infrastructure\nDESCRIPTION: Command to deploy the infrastructure using Terraform. This process takes approximately 15 minutes and requires database passwords from the config/passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Initial Cursor-Based Pagination Request\nDESCRIPTION: Shows how to implement the initial request for cursor-based pagination without a previous cursor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint recordsPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Moved and Renamed SQL File\nDESCRIPTION: This note clarifies the naming and location change for the SQL file that contains the full database schema, from `generated/tables.pgsql` to `migrations/definition.sql`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nServerpod has moved and renamed the generated SQL file for the complete database schema. Instead of the file `generated/tables.pgsql`, Serverpod now includes it as a part of each migration located in the `migrations` directory, under the name `definition.sql`.\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key Field\nDESCRIPTION: Illustrates how to specify a custom foreign key field name in a one-to-one relationship\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  customIdField: int\n  address: Address?, relation(field=customIdField)\nindexes:\n  user_address_unique_idx:\n    fields: customIdField\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud CLI tools before deployment\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud init\n```\n\n----------------------------------------\n\nTITLE: Model definition with deprecated 'api' keyword\nDESCRIPTION: Example of a model definition using the deprecated 'api' keyword to mark fields that shouldn't be persisted to the database in Serverpod 1.1 and earlier.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, api\n```\n\n----------------------------------------\n\nTITLE: Enum Default Values Configuration\nDESCRIPTION: Demonstrates setting default values for different enum serialization strategies\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nclass: EnumDefault\ntable: enum_default\nfields:\n  byNameEnumDefault: ByNameEnum, default=byName1\n  byIndexEnumDefault: ByIndexEnum, default=byIndex1\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server with Custom Mode and Server ID\nDESCRIPTION: Command to start a Serverpod server in production mode with a specific server ID. This allows for running the server with different configuration settings depending on the environment needs.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/05-deployments/02-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Foreign Key Field in YAML\nDESCRIPTION: Defines a one-to-one relationship between `User` and `Address` with a custom foreign key field specified using the `field` parameter. In this case, `customIdField` is used instead of the default `addressId`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"# user.yaml\nclass: User\ntable: user\nfields:\n  customIdField: int\n  address: Address?, relation(field=customIdField)\nindexes:\n  user_address_unique_idx:\n    fields: customIdField\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Code\nDESCRIPTION: Command to generate Serverpod-managed classes after changes in endpoints or models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres and Redis with Docker Compose\nDESCRIPTION: Alternative command to manually start the Postgres and Redis dependencies using Docker Compose. This builds and starts Docker containers required by Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/index.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with SSL in YAML\nDESCRIPTION: This YAML snippet configures the database connection settings for Serverpod, including enabling SSL for secure connections. Ensure the requireSsl flag is set to true for environments using AWS RDS databases. Customize the host, port, name, and user fields according to your database setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: redis.private-production.examplepod.com\n  port: 5432\n  name: serverpod\n  user: postgres\n  requireSsl: true\n```\n\n----------------------------------------\n\nTITLE: Boolean Default Values in YAML\nDESCRIPTION: This YAML snippet sets a default boolean value 'true' for a field 'boolDefault' of type 'bool', demonstrating how to define and utilize default values in models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nboolDefault: bool, default=true\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server Docker Container\nDESCRIPTION: Commands to start and setup the Docker container for test server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/07-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: App Dependencies Setup\nDESCRIPTION: YAML configuration for Flutter app dependencies including authentication modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Makefile Commands in Bash\nDESCRIPTION: Shows how to list all available commands in the project's Makefile. This is useful for developers to quickly see what operations are available.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ make help\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod CLI installation\nDESCRIPTION: This command checks if Serverpod CLI is correctly installed by displaying the help information for the 'serverpod' command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands\nDESCRIPTION: Terminal commands to update dependencies and generate necessary code for the auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Basic Flutter App Structure for Notes App\nDESCRIPTION: Initial structure for the Flutter application's main file, including client setup and a minimal UI scaffold.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Opt-out in YAML\nDESCRIPTION: Example of opting out of managed migrations for a specific table by setting 'managedMigration' to false in the YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nmanagedMigration: false\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Adding auth client dependencies to app pubspec.yaml\nDESCRIPTION: This snippet shows how to add the client-side authentication packages to your Flutter app's pubspec.yaml file. These packages provide the client components needed to work with the authentication module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^0.9.x\n  serverpod_auth_google_flutter: ^0.9.x\n  serverpod_auth_apple_flutter: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Creating Compatible File Paths for S3 Storage\nDESCRIPTION: Example of how to structure file paths that will be compatible with S3 storage, avoiding leading slashes and using standard characters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n'profile/$userId/images/avatar.png'\n```\n\n----------------------------------------\n\nTITLE: Implementing toJson Method for Custom Serialization in Dart\nDESCRIPTION: Example of implementing the toJson method required for custom serializable objects in Serverpod, which returns a Map with the object's properties.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMap<String, dynamic> toJson() {\nreturn {\n    name: 'John Doe',\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for One-to-One Relationship\nDESCRIPTION: The SQL code that Serverpod generates behind the scenes to implement the one-to-one relationship with proper constraints and indexes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"address\" (\n    \"id\" serial PRIMARY KEY,\n    \"street\" text NOT NULL\n);\n\nCREATE TABLE \"user\" (\n    \"id\" serial PRIMARY KEY,\n    \"addressId\" integer NOT NULL\n);\n\n\nCREATE UNIQUE INDEX \"user_address_unique_idx\" ON \"user\" USING btree (\"addressId\");\n\nALTER TABLE ONLY \"user\"\n    ADD CONSTRAINT \"user_fk_0\"\n    FOREIGN KEY(\"addressId\")\n    REFERENCES \"address\"(\"id\")\n    ON DELETE CASCADE\n    ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages in Serverpod Client\nDESCRIPTION: Illustrates how to send a stream message to a specific endpoint on the Serverpod server from a client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/09-streams.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Multi-Field Indexing in YAML Configuration\nDESCRIPTION: Shows how to create a composite index on multiple fields (name and foundedAt) in a Company table using YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/04-indexing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration in Serverpod\nDESCRIPTION: Command to create a new migration in the Serverpod project's server package directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Database Configuration with SSL in YAML\nDESCRIPTION: YAML configuration example for database connection settings with SSL enabled, including host, port, database name, and user details.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: redis.private-production.examplepod.com\n  port: 5432\n  name: serverpod\n  user: postgres\n  requireSsl: true\n```\n\n----------------------------------------\n\nTITLE: Custom Identification in Serverpod\nDESCRIPTION: This code shows how to implement custom user identification by directly querying the database with the `UserInfo` model to find a user by name. It requires the `Serverpod` setup with the `UserInfo` model accessible. Input includes a session object and the user’s name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await UserInfo.db.findFirstRow(\n  session,\n  where: (t) => t.fullName.equals(name),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Test Dependencies in YAML\nDESCRIPTION: Adds test and serverpod_test packages as dev dependencies in the pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package\n  test: ^1.24.2\n```\n\n----------------------------------------\n\nTITLE: Adding Test Server Host Entry\nDESCRIPTION: Command to add local host entry for test server configuration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/07-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1 serverpod_test_server\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Records in Dart\nDESCRIPTION: Shows how to query multiple records with conditions and limits.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod CLI Installation\nDESCRIPTION: Test the Serverpod CLI installation by running the serverpod command, which displays help information if configured correctly\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Manually Deploying Serverpod Documentation\nDESCRIPTION: Shows the command to manually deploy the documentation. This requires access to the Serverpod Github 'serverpod.github.io' repository.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ util/deploy\n```\n\n----------------------------------------\n\nTITLE: Test Passwords Configuration\nDESCRIPTION: Adds database and Redis test passwords to the passwords.yaml configuration file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers and Running the Server\nDESCRIPTION: Commands to navigate to the server directory, start the required Docker containers (Postgres and Redis) in detached mode, and then run the Serverpod server using the main Dart entry point.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\ndocker-compose up --build --detach\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform\nDESCRIPTION: A command to set the TF_VAR_DATABASE_PASSWORD_PRODUCTION environment variable needed for Terraform to properly configure the Postgres database during deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ export TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Defining User Model with Module Table Reference in YAML\nDESCRIPTION: This YAML snippet shows an alternative way to define a User model with a relation to a module table, referencing only the table name to access the id. It's useful when you only need to access the id of the related module table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfoId: int, relation(parent=serverpod_user_info)\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Calling Endpoints in Tests - Do Pattern\nDESCRIPTION: Demonstrates the correct way to call endpoint methods using the provided endpoints parameter from withServerpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    var session = sessionBuilder.build();\n\n    test('when calling `hello` then should return greeting', () async {\n      // ✅ Use the provided `endpoints` to call the endpoint that should be tested.\n      final greeting =\n          await endpoints.example.hello(session, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Configuration in YAML\nDESCRIPTION: Examples of enum configuration with byName and byIndex serialization modes, including default values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByNameEnum\nserialized: byName\nvalues:\n  - byName1\n  - byName2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByIndexEnum\nserialized: byIndex\nvalues:\n  - byIndex1\n  - byIndex2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: EnumDefault\ntable: enum_default\nfields:\n  byNameEnumDefault: ByNameEnum, default=byName1\n  byIndexEnumDefault: ByIndexEnum, default=byIndex1\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Dependencies in YAML for Module Integration\nDESCRIPTION: This YAML snippet configures the server dependencies required for integrating the `serverpod_auth` module into a Dart project. The version placeholder must be replaced with the actual version used for compatibility across all packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/08-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Maintenance Mode Migration Command\nDESCRIPTION: Command to apply migrations in maintenance mode, which exits after completion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations for Auth Module - Bash\nDESCRIPTION: Starts the Dart server with the 'apply-migrations' flag to apply the created migrations to the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Catching Custom Exception in Dart Client\nDESCRIPTION: This Dart snippet captures the thrown 'MyException' in the client application. It demonstrates how to handle the exception specifically and also how to catch any other unforeseen exceptions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntry {\n  client.example.doThingy();\n}\non (MyException) catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Settings in YAML\nDESCRIPTION: Configuration settings for database connection including host, port, name, and user details stored in development.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: localhost\n  port: 8090\n  name: projectname\n  user: postgres\n\n...\n```\n\n----------------------------------------\n\nTITLE: Updating Pubspec Files - Bash Command\nDESCRIPTION: Command to generate new pubspec.yaml files from templates\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/04-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Database Cleanup in Tests - Don't Pattern\nDESCRIPTION: Shows unnecessary database cleanup in tearDown when using withServerpod, which already handles transaction rollback by default.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\n  });\n\n  tearDown(() async {   \n    await Product.db.deleteWhere( ❌ // Unnecessary clean up\n      session,\n      where: (_) => Constant.bool(true),\n    );\n  });\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Test Tools in Bash\nDESCRIPTION: Runs the Serverpod generate command to create the test tools file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile with Dart 3 Version\nDESCRIPTION: This Dockerfile change updates the Dart version to 3.0 for building the project. Ensuring the environment uses the correct Dart version is crucial for application compatibility.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM dart:3.0 AS build\n```\n\n----------------------------------------\n\nTITLE: Initializing Google API Access with YouTube Scope\nDESCRIPTION: Configure SignInWithGoogleButton to request YouTube API access by specifying the required OAuth scope\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  scopes: [YouTubeApi.youtubeReadonlyScope],\n  // other required parameters\n)\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for Dart 3.0\nDESCRIPTION: Example of updating the Dockerfile to use Dart 3.0, which is required for Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM dart:3.0 AS build\n\n...\n```\n\n----------------------------------------\n\nTITLE: Removing Docker-based Postgres Database for Serverpod Development\nDESCRIPTION: This bash command removes the Docker container and associated volumes for the Postgres database used in Serverpod development, effectively deleting all data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Displaying Serverless Pricing in Markdown\nDESCRIPTION: This markdown table shows the approximate starting pricing for the primary required services of a minimal serverless setup on Google Cloud Platform. It includes costs for Cloud Run and Cloud SQL for PostgreSQL.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/01-deployment-strategy.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Service                  | Min cost |\n| :----------------------- | :------- |\n| Cloud Run                |  $0 / mo |\n| Cloud SQL for PostgreSQL | $10 / mo |\n```\n\n----------------------------------------\n\nTITLE: Adding Server Module Dependencies in YAML\nDESCRIPTION: Configuration for adding the serverpod_auth_server module to the server's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App in Chrome\nDESCRIPTION: This command launches the Flutter app in Chrome for testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Dependencies in pubspec.yaml\nDESCRIPTION: Configuration for adding Flutter-specific auth module dependencies to the Flutter app's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serverpod Module using CLI\nDESCRIPTION: This bash command demonstrates how to create a new custom Serverpod module using the serverpod create command with the module template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Advanced Error Logging in Serverpod\nDESCRIPTION: Shows how to log errors with additional context including warning level, exception object, and stack trace information. This provides more detailed logging for debugging and error tracking.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/08-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-many Foreign Key Relation in YAML\nDESCRIPTION: Shows how to create a bidirectional one-to-many relationship using a foreign key approach with named relationships and parent specification.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation(name=company_employees, parent=company)\n```\n\n----------------------------------------\n\nTITLE: Caching with CacheMissHandler in Serverpod\nDESCRIPTION: This Dart code snippet illustrates how to use a `CacheMissHandler` in Serverpod to automatically populate the cache when a miss occurs.  The `CacheMissHandler` is passed to the `get` method of the local cache. If the data is not found, the handler is executed to fetch the data from the database, save it in the cache with a specified lifetime, and then return it.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/07-caching.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get(\n    cacheKey,\n    // If the object wasn't found in the cache, load it from the database and\n    // save it in the cache. Make it valid for 5 minutes.\n    CacheMissHandler(\n      () async => UserData.db.findById(session, userId),\n      lifetime: Duration(minutes: 5),\n    ),\n    );\n\n  // Return the user data to the client\n  return userData;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI\nDESCRIPTION: Command to install the Serverpod CLI tool globally using Dart pub.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Authentication Dependency in Pubspec\nDESCRIPTION: Adds the Serverpod Apple authentication package to the project's dependencies for Flutter client-side implementation\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Logging Messages with Exceptions in Serverpod Using Dart\nDESCRIPTION: This snippet shows how to log messages with additional parameters such as log level, exception, and stack trace. It helps in capturing error details during session execution, enhancing debugging efforts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/07-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Running an individual Dart test\nDESCRIPTION: This snippet demonstrates how to run an individual Dart test using the `dart test` command. It assumes the current working directory is `tests/serverpod_test_server` and targets the `test/connection_test.dart` file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/08-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"cd tests/serverpod_test_server\ndart test test/connection_test.dart\"\n```\n\n----------------------------------------\n\nTITLE: Calling an Endpoint from the Client-Side in Serverpod\nDESCRIPTION: Demonstrates how to call the example endpoint's hello method from the client side after running 'serverpod generate' to create the client-side code. The client code abstracts away the network calls and presents a clean API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Importing S3 Cloud Storage Package in Dart\nDESCRIPTION: Import statement for adding S3 cloud storage support to a Serverpod application\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_s3/serverpod_cloud_storage_s3.dart'\n    as s3;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data with Limit and Offset in Dart\nDESCRIPTION: Demonstrates the use of 'limit' and 'offset' parameters to paginate and retrieve specific chunks of data, skipping the first 30 records to fetch the 31st to 40th company. Helpful for efficient data loading. Requires a Serverpod session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n  offset: 30,\n);\n```\n\n----------------------------------------\n\nTITLE: Register URL Scheme in info.plist (iOS)\nDESCRIPTION: This XML snippet shows how to register a URL scheme in the info.plist file of an iOS project. The URL scheme is the reversed client ID of the iOS app and is necessary for navigating back to the app after the user signs in. Replace `your_reversed_client_id` with the actual reversed client ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Flutter App Launch Command\nDESCRIPTION: Command to run the Flutter application in Chrome browser.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Opt-out in YAML Model\nDESCRIPTION: YAML configuration example showing how to opt out of managed migrations for a specific table by setting managedMigration to false.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nmanagedMigration: false\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Table Reference Relation Configuration in YAML\nDESCRIPTION: Shows how to create a relation by directly referencing a module's table name when only the ID field access is needed. Includes index configuration for maintaining data integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfoId: int, relation(parent=serverpod_user_info)\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Serverpod Health Check Response\nDESCRIPTION: Example of a successful health check response from a deployed Serverpod instance, showing timestamp in UTC.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/04-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Updates in Pixorama Widget\nDESCRIPTION: Implements the _listenToUpdates method to handle real-time updates from the server, including full image updates and individual pixel changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  Future<void> _listenToUpdates() async {\n    // Indefinitely try to connect and listen to updates from the server.\n    while (true) {\n      try {\n        // Get the stream of updates from the server.\n        final imageUpdates = client.pixorama.imageUpdates();\n\n        // Listen for updates from the stream. The await for construct will\n        // wait for a message to arrive from the server, then run through the\n        // body of the loop.\n        await for (final update in imageUpdates) {\n          // Check which type of update we have received.\n          if (update is ImageData) {\n            // This is a complete image update, containing all pixels in the\n            // image. Create a new PixelImageController with the pixel data.\n            setState(() {\n              _imageController = PixelImageController(\n                pixels: update.pixels,\n                palette: PixelPalette.rPlace(),\n                width: update.width,\n                height: update.height,\n              );\n            });\n          } else if (update is ImageUpdate) {\n            // Got an incremental update of the image. Just set the single\n            // pixel.\n            _imageController?.setPixelIndex(\n              pixelIndex: update.pixelIndex,\n              colorIndex: update.colorIndex,\n            );\n          }\n        }\n      } on MethodStreamException catch (_) {\n        // We lost the connection to the server, or failed to connect.\n        setState(() {\n          _imageController = null;\n        });\n      }\n\n      // Wait 5 seconds until we try to connect again.\n      await Future.delayed(Duration(seconds: 5));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Formatted SQL Result JSON\nDESCRIPTION: Provides an example of a JSON structure resulting from SQL queries, highlighting the difference in results between 'unsafeQueryMappedResults' and transforming results using 'toColumnMap' in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"company.id\": 38,\n    \"company.name\": \"Apple\",\n    \"company.townId\": 62,\n    \"company_town_town.id\": 62,\n    \"company_town_town.name\": \"San Francisco\",\n    \"company_town_town.mayorId\": null\n  },\n  {\n    \"company.id\": 37,\n    \"company.name\": \"Serverpod\",\n    \"company.townId\": 61,\n    \"company_town_town.id\": 61,\n    \"company_town_town.name\": \"Stockholm\",\n    \"company_town_town.mayorId\": null\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Nested Includes with Lists in Serverpod\nDESCRIPTION: The code shows how to include nested objects within lists using 'includeList' and 'includes'. Each entry in the list will have access to the nested object. Dependencies include Serverpod framework. Expects 'session' and 'employeeId' as inputs, and outputs nested relational data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        address: Address.include(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Cloud Storage Configuration to Serverpod\nDESCRIPTION: Server initialization code to add an S3 cloud storage configuration to a Serverpod instance, specifying storage ID, region, bucket, and public access settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Module in Serverpod's server.dart\nDESCRIPTION: This snippet demonstrates how to configure the authentication module in Serverpod's `server.dart` file. It shows how to set up the `sendValidationEmail` and `sendPasswordResetEmail` callbacks to handle email sending for user validation and password resets.  You'll need to implement the email sending logic within these callbacks using a service like Sendgrid or Mandrill.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nThen, add the configuration before you start your Serverpod:\n\n```dart\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send your validation email here.\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send a password reset email here.\n  },\n));\n\n// Start the server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Seeding Database for Tests in Serverpod\nDESCRIPTION: Demonstrates seeding a database using Serverpod sessions within test cases. The withServerpod function sets up a test with new Products inserted in the database. These inserts are rolled back after each test by default. Dependencies include Serverpod and a configured database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given Products endpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insert(session, [\n    Product(name: 'Apple', price: 10),\n    Product(name: 'Banana', price: 10)\n    ]);\n  });\n\n  test('then calling `all` should return all products', () async {\n    final products = await endpoints.products.all(sessionBuilder);\n    expect(products, hasLength(2));\n    expect(products.map((p) => p.name), contains(['Apple', 'Banana']));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Filter in Serverpod using Dart\nDESCRIPTION: Demonstrates how to find multiple rows using filtering criteria with the find method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Default GCP Project\nDESCRIPTION: Command to set the default project ID for Cloud Run service configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Updating Package Specifications\nDESCRIPTION: Command to generate new pubspec.yaml files from templates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/06-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML and CSS\nDESCRIPTION: Code for embedding a responsive YouTube video player with custom styling for proper aspect ratio and positioning.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/02-support.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position : 'relative', paddingBottom : '56.25%', height : '0' }}><iframe style={{ position : 'absolute', top : '0', left : '0', width : '100%', height : '100%' }} width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/4xMAZJ9Em_I\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n```\n\n----------------------------------------\n\nTITLE: Migration directory structure\nDESCRIPTION: This shows the directory structure for migrations. Each migration has a directory labeled with a timestamp, and includes files describing the database schema and changesets.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"├── migrations\n│    ├── 20231205080937028\n│    ├── 20231205081959122\n│    └── migration_registry.txt \"\n```\n\n----------------------------------------\n\nTITLE: Getting SHA-1 key from production keystore\nDESCRIPTION: This bash script retrieves the SHA-1 key from your production keystore. This key is crucial for configuring the Android app with Google Sign-In in a production environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ keytool -list -v -keystore /path/to/keystore\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker-based Postgres Database for Serverpod Development\nDESCRIPTION: This bash command stops the Docker container running the Postgres database for Serverpod development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose stop\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Flutter Package\nDESCRIPTION: This snippet illustrates how to create a custom Flutter package using the flutter create command. This is useful for adding custom Flutter code that interfaces with the serverpod module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"flutter create --template package my_module_flutter\"\n```\n\n----------------------------------------\n\nTITLE: Running Markdown Linter on Serverpod Documentation\nDESCRIPTION: Demonstrates how to run the markdown linter on the documentation files to ensure consistent formatting across all markdown files in the docs directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\n$ markdownlint './docs/**/*.md'\n\n# Or if you have Make installed, use this make command\n$ make format\n```\n\n----------------------------------------\n\nTITLE: Handling Concurrent Transactions in Serverpod Tests\nDESCRIPTION: This snippet illustrates how to handle concurrent transactions within tests and emphasizes the need for careful configuration to avoid exceptions during database operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> concurrentTransactionCalls(\n  Session session,\n) async {\n  await Future.wait([\n    session.db.transaction((tx) => /*...*/),\n    // Will throw `InvalidConfigurationException` if `rollbackDatabase` \n    // is not set to `RollbackDatabase.disabled` in `withServerpod`\n    session.db.transaction((tx) => /*...*/),\n  ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Session Manager in Flutter\nDESCRIPTION: Setup code for initializing the SessionManager and client configuration in a Flutter application's main function.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Scheme in info.plist for iOS Google Sign In\nDESCRIPTION: XML configuration required in the info.plist file to register the URL scheme for Google Sign In on iOS. This enables the app to handle the callback after Google authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit One-to-Many Relationship in Serverpod (YAML)\nDESCRIPTION: This code snippet demonstrates an implicit one-to-many relationship between a `Company` and `Employee`. Serverpod infers the relation based on the `List<Employee>` type and the `relation` keyword in the `company.yaml` file. A foreign key field is automatically added to the `Employee` table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Stream Message Handler Implementation\nDESCRIPTION: Shows how to handle incoming stream messages and route them to specific user channels using message posting.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/11-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands\nDESCRIPTION: Bash commands to update dependencies and generate code after adding a module. These commands should be run from the server directory to properly integrate the module with the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection Details in YAML for Serverpod\nDESCRIPTION: This YAML snippet shows how to specify database connection details in the Serverpod configuration file. It includes host, port, database name, and user information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/01-connection.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndatabase:\n  host: localhost\n  port: 8090\n  name: <YOUR_PROJECT_NAME>\n  user: postgres\n...\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Cloud Storage Configuration (Dart)\nDESCRIPTION: This code snippet demonstrates how to configure Serverpod to use S3 for cloud storage. It instantiates `S3CloudStorage` and adds it to the Serverpod instance.  Key parameters include the storage ID, public access setting, AWS region, bucket name, and optional public host (e.g., CloudFront URL).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n```dart\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite in Serverpod\nDESCRIPTION: Command to execute all tests from the root Serverpod directory\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/07-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Object Relation with Automatic Handling\nDESCRIPTION: Demonstrates Serverpod's automated relation handling by defining an object relation field with automatic foreign key generation\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Github Actions Dart SDK Version in YAML\nDESCRIPTION: YAML configuration for specifying Dart SDK version in Github Actions deployment workflow. Sets up the Dart environment for deployment using the dart-lang/setup-dart action.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup Dart SDK\n  uses: dart-lang/setup-dart@v1.6.5\n  with:\n    sdk: ${MINOR_DART_SDK_VERSION}\n```\n\n----------------------------------------\n\nTITLE: Server Status Output\nDESCRIPTION: Example console output showing successful server startup with port information for different services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/index.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSERVERPOD version: 1.x.x, mode: development, time: 2022-09-12 17:22:02.825468Z\nInsights listening on port 8081\nServer default listening on port 8080\nWebserver listening on port 8082\n```\n\n----------------------------------------\n\nTITLE: Server and Database Setup Commands\nDESCRIPTION: Terminal commands for starting the database and server components using Docker and Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: This command starts the Serverpod server for the Pixorama app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Default Referential Actions for ID Relations in Serverpod\nDESCRIPTION: Illustrates the default referential actions for ID relations in Serverpod. onUpdate defaults to NoAction, while onDelete defaults to Cascade.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparentId: int?, relation(parent=model_table, onUpdate=NoAction, onDelete=Cascade)\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Dependencies in Flutter YAML\nDESCRIPTION: Include necessary dependencies in the Flutter app's pubspec.yaml for Google and Apple sign-in support.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  example_client:\n    path: ../example_client\n  serverpod_auth_google_flutter: ^0.9.5\n  serverpod_auth_apple_flutter: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Password Hash Generator\nDESCRIPTION: Illustrates how to override the default password hash generator by providing custom validators and generators in the `AuthConfig` class. This can disrupt compatibility with the default hash generator and should be used if existing stored passwords need preservation or migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nAuthConfig(\n  passwordHashValidator: (\n    password,\n    email,\n    hash, {\n      onError,\n      onValidationFailure,\n    },\n  ) {\n  // Custom hash validator.\n  },\n  passwordHashGenerator: (password) {\n  // Custom hash generator.\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Migration\nDESCRIPTION: Command to create a new database migration after making changes to database-mapped models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Auth Module in generator.yaml\nDESCRIPTION: This snippet shows the configuration of the `serverpod_auth` module in the `config/generator.yaml` file. The `nickname` determines how you reference the module from the client. If a nickname isn't provided, a default one will be used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: User Sign-In with EmailAuthController\nDESCRIPTION: Shows how to implement user sign-in functionality using the EmailAuthController in Flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.signIn(email, password);\n```\n\n----------------------------------------\n\nTITLE: Setting Database Field Scope in YAML\nDESCRIPTION: Fields can be given specific scopes to exclude them from either the API or the database. Here, `password` is stored in the database but not accessible by the API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\\nfields:\\n  name: String\\n  password: String?, database\n```\n\n----------------------------------------\n\nTITLE: All Devices Sign-out in Dart\nDESCRIPTION: Demonstrates how to sign out a user from all devices simultaneously.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Nickname in generator.yaml\nDESCRIPTION: Shows how to add a module with an optional nickname in the generator.yaml configuration file. The nickname determines how the module is referenced from the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/10-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Tagged Repair Migration Command\nDESCRIPTION: Command showing how to create a repair migration with a specific tag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --tag \"reset-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Adding Test Server to Hosts File for Individual Tests\nDESCRIPTION: Command to add an entry for the test server to the local hosts file. This is required before running individual tests to ensure the test server can be resolved correctly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/07-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n127.0.0.1 serverpod_test_server\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row by ID in Dart\nDESCRIPTION: This Dart snippet shows how to find a single company in the database by its 'id'. It returns null if no matching row is found. This demonstrates the usage of generated serializable classes for querying.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Subsequent Request Using Cursor for Pagination\nDESCRIPTION: This example demonstrates how to use a cursor for subsequent pagination requests, allowing the retrieval of records greater than the last encountered cursor value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint cursor = lastCompanyIdFromPreviousPage; // This is typically sent by the client\n\nvar companies = await Company.db.find(\n    session,\n    where: Company.t.id > cursor,\n    orderBy: (t) => t.id,\n    limit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Deprecated Database Methods in Dart\nDESCRIPTION: This code block demonstrates the deprecated database methods and their replacements using the new `db` field in Serverpod 1.2.  It shows the old and new syntax for common database operations such as `find`, `findSingleRow`, `findById`, `delete`, `deleteRow`, `update`, `insert`, and `count`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// The new find method is a drop-in replacement.\\nExample.find(...); // old\\nExample.db.find(...); // new\n\n// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.\\nExample.findSingleRow(...);\\nExample.db.findFirstRow(...);\n\n// The new findById method is a drop-in replacement.\\nExample.findById(...); // old\\nExample.db.findById(...); // new\n\n// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.\\nExample.delete(...);\\nExample.db.deleteWhere(...);\n\n// The new findById method is a drop-in replacement but returns the id of the row deleted.\\nExample.deleteRow(...); // old\\nExample.db.deleteRow(...); // new\n\n// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.\\nExample.update(...);\\nExample.db.updateRow(...);\n\n// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.\\nExample.insert(...);\\nExample.db.insertRow(...);\n\n// The new count method is a drop-in replacement.\\nExample.count(...);\\nExample.db.count(...);\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server - Bash Commands\nDESCRIPTION: Commands to start the Serverpod test server instance\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/10-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Class Implementation in Dart\nDESCRIPTION: Full implementation of a custom serializable class including constructor, toJson, and fromJson methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ClassName {\n  String name;\n  ClassName(this.name);\n\n  toJson() {\n    return {\n      'name': name,\n    };\n  }\n\n  factory ClassName.fromJson(\n    Map<String, dynamic> jsonSerialization,\n  ) {\n    return ClassName(\n      jsonSerialization['name'],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring serverpod_auth Module in YAML\nDESCRIPTION: This snippet demonstrates how to configure the serverpod_auth module in the config/generator.yaml file. It assigns a nickname to the module for client-side referencing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Layout in HTML\nDESCRIPTION: This code snippet demonstrates how to embed a YouTube video with a responsive layout using HTML and inline CSS. It creates a container with a 16:9 aspect ratio and positions the iframe absolutely within it.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/04-support.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position : 'relative', paddingBottom : '56.25%', height : '0' }}><iframe style={{ position : 'absolute', top : '0', left : '0', width : '100%', height : '100%' }} width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/AmHZP6T1NdQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n```\n\n----------------------------------------\n\nTITLE: Backward Compatibility Rule: Parameter Management\nDESCRIPTION: Guidelines for maintaining endpoint method parameter stability to ensure compatibility between different app versions\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/12-backward-compatibility.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. __Avoid changing parameter names in endpoint methods.__\n```\n\n----------------------------------------\n\nTITLE: Running all tests locally with util script\nDESCRIPTION: This snippet shows how to execute all tests in the Serverpod project by using the `util/run_tests` script. The script is executed from the root `serverpod` directory and is designed to run all available tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/08-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"util/run_tests\"\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server with Custom Mode and ID\nDESCRIPTION: Command to start a Serverpod server in production mode with a specific server ID. Shows how to use the --mode and --server-id flags to configure server instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Deployment\nDESCRIPTION: Command to execute the deployment script for deploying the Serverpod application to Cloud Run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget Routes in Serverpod\nDESCRIPTION: Shows how to create a custom route by extending the WidgetRoute class and implementing the build method. The build method receives a session and HTTP request, returning a Widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/18-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services in Bash\nDESCRIPTION: Runs Docker containers based on the Docker Compose configuration to set up the test environment with isolated services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Migrating Small Tables to BIGINT in SQL\nDESCRIPTION: SQL commands to modify table and sequence data types from INT to BIGINT for small tables. This approach locks the table during migration and is not recommended for large tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nALTER SEQUENCE \"my_table_id_seq\" AS bigint;\nALTER TABLE \"my_table\" ALTER \"id\" TYPE bigint;\nALTER TABLE \"my_table\" ALTER \"myNumber\" TYPE bigint;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data by ID in Serverpod\nDESCRIPTION: Dart code showing how to retrieve a single row from the database by its ID using Serverpod's ORM.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Object Storage Configuration in YAML\nDESCRIPTION: Shows how to configure storing object references as JSON structures in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee> # Stored as JSON structure\n```\n\n----------------------------------------\n\nTITLE: Connecting and Creating Users in Serverpod\nDESCRIPTION: The snippet demonstrates finding or creating a user in the database using the user’s email or a unique identifier. If no existing user is found, a new `UserInfo` instance is created with specified information. Prerequisites include having the `Users` class available, indicating various methods to identify users. Expected input includes a session object and user-specific parameters such as email and name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nUserInfo? userInfo;\nuserInfo = await Users.findUserByEmail(session, email);\nuserInfo ??= await Users.findUserByIdentifier(session, userIdentifier);\nif (userInfo == null) {\n  userInfo = UserInfo(\n    userIdentifier: userIdentifier,\n    userName: name,\n    email: email,\n    blocked: false,\n    created: DateTime.now().toUtc(),\n    scopeNames: [],\n  );\n  userInfo = await Users.createUser(session, userInfo, _authMethod);\n}\n```\n\n----------------------------------------\n\nTITLE: Building Pixorama User Interface\nDESCRIPTION: This Dart snippet implements the `build` method for the `Pixorama` widget, providing a user interface to display a loading indicator or the pixel editor. It facilitates pixel drawing and updates through server communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: _imageController == null\n          ? const CircularProgressIndicator()\n          : PixelEditor(\n              controller: _imageController!,\n              onSetPixel: (details) {\n                // When a user clicks a pixel we will get a callback from the\n                // PixelImageController, with information about the changed\n                // pixel. When that happens we call the setPixels method on\n                // the server.\n                client.pixorama.setPixel(\n                  pixelIndex: details.tapDetails.index,\n                  colorIndex: details.colorIndex,\n                );\n              },\n            ),\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Database-Mapped Serializable Class\nDESCRIPTION: YAML definition that extends the Company class to include database table mapping, allowing for ORM operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase in Main Application\nDESCRIPTION: This Dart snippet shows the initialization of Firebase within the main function of a Flutter project. It includes importing necessary packages, configuring Firebase options, and setting up Firebase UI authentication providers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n\n...\nvoid main() async {\n  ...\n  await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n\n  firebase.FirebaseUIAuth.configureProviders([\n    firebase.PhoneAuthProvider(),\n  ]);\n\n  ...\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Module Reference in YAML Models\nDESCRIPTION: Example of referencing a module's serializable class in YAML model definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/09-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud CLI tools for project setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud init\n```\n\n----------------------------------------\n\nTITLE: Configuring Module in Generator Config\nDESCRIPTION: Adding the serverpod_auth module configuration to the generator.yaml file with a nickname for client reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Deprecated Sign Out Method in Serverpod (Dart)\nDESCRIPTION: This snippet shows the deprecated method for signing out a user. It's included with a warning to use 'signOutDevice' or 'signOutAllDevices' instead, as it calls a deprecated status endpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart SDK in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet configures the Dart SDK version in a GitHub Actions workflow. It's used to ensure the correct Dart version is used during deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup Dart SDK\n  uses: dart-lang/setup-dart@v1.6.5\n  with:\n    sdk: 3.5\n```\n\n----------------------------------------\n\nTITLE: Starting the Test Server\nDESCRIPTION: This command is used to launch the main Dart application for the Serverpod test server. It must be run after the Docker container has been started.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/06-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generation Commands\nDESCRIPTION: Terminal commands to update dependencies and generate required module code\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Health Metric Handler in Dart\nDESCRIPTION: This snippet defines a custom health metric handler that checks the server health and returns a list of health metrics based on the provided timestamp. It utilizes the Serverpod framework and requires access to the Serverpod instance and the timestamp of the health check.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/10-health-checks.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Create your custom health metric handler.\nFuture<List<ServerHealthMetric>> myHealthCheckHandler(\n    Serverpod pod, DateTime timestamp) async {\n  // Actually perform some checks.\n\n  // Return a list of health metrics for the given timestamp.\n  return [\n    ServerHealthMetric(\n      name: 'MyMetric',\n      serverId: pod.serverId,\n      timestamp: timestamp,\n      isHealthy: true,\n      value: 1.0,\n    ),\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test File\nDESCRIPTION: Command to execute a specific test file in the test server\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/09-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Implementing SignInWithEmailButton in Flutter\nDESCRIPTION: A pre-built sign-in button widget that handles everything from user signups to password resets. This snippet shows how to integrate the button into a Flutter application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n SignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Optimizing Database Connections in Serverpod Tests\nDESCRIPTION: Pattern for optimizing database connections during tests by postponing session creation until the test group is running. Useful when hitting database connection limits in environments with many CPU cores.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given example test', (sessionBuilder, endpoints) {\n  // Instead of this\n  var session = sessionBuilder.build();\n\n\n  // Do this to postpone connecting to the database until the test group is running\n  late Session session;\n  setUpAll(() {\n    session = sessionBuilder.build();\n  });\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Client Module Dependency Configuration\nDESCRIPTION: Adding client-side module dependencies to pubspec.yaml for Serverpod client packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/09-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: SQL Migration for Small Tables to Bigint\nDESCRIPTION: SQL commands to modify table sequences and columns from int to bigint type. This approach is suitable for small tables as it locks the table during migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nALTER SEQUENCE \"my_table_id_seq\" AS bigint;\nALTER TABLE \"my_table\" ALTER \"id\" TYPE bigint;\nALTER TABLE \"my_table\" ALTER \"myNumber\" TYPE bigint;\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Random Number Generation in Dart\nDESCRIPTION: This Dart snippet demonstrates how to configure the AuthConfig to prevent fallback to unsecure random number generation for password hashing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: false,\n));\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter App Dependencies\nDESCRIPTION: Configuration for adding auth-related Flutter package dependencies to the app's pubspec.yaml\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Exception in Serverpod Endpoint\nDESCRIPTION: Example of throwing a custom exception from a Serverpod endpoint implementation. Shows how to create and throw the exception with custom parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Auth Module in Generator Config YAML\nDESCRIPTION: This code snippet illustrates how to add the serverpod_auth module to the config/generator.yaml file. It shows how to specify the module and assign it a nickname for referencing from the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authorization Scopes in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to create custom authorization scopes by extending the Scope class for more granular access control.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Development Database with Data\nDESCRIPTION: Command to stop the Docker database instance and remove all associated data volumes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Creating a custom Serverpod module\nDESCRIPTION: This command uses the `serverpod create` command to generate a new Serverpod module. The `--template module` flag specifies that a module structure should be created, and `my_module` is the name of the new module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container for Serverpod Test Server in Bash\nDESCRIPTION: Commands to start the Docker container for the Serverpod test server, including building and detaching the container, and setting up tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/06-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-Many with Foreign Key\nDESCRIPTION: Illustrates a bidirectional one-to-many relationship using a foreign key field and named relationship parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation(name=company_employees, parent=company)\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Relational Queries using Serverpod in Dart\nDESCRIPTION: Shows how to filter and sort lists of related objects using the where and orderBy clauses. This example filters employees based on their name and sorts them alphabetically, requiring the Serverpod framework.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      where: (t) => t.name.ilike('a%')\n    ),\n  ),\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      orderBy: (t) => t.name,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Database-Scoped Field Definition\nDESCRIPTION: Example showing how to define fields that are only stored in the database but not exposed via API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String?, database\n```\n\n----------------------------------------\n\nTITLE: Using SignInWithEmailButton Widget in Flutter\nDESCRIPTION: This Dart snippet demonstrates how to use the pre-built SignInWithEmailButton widget for email authentication in a Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Container\nDESCRIPTION: HTML/CSS code for embedding a responsive YouTube video player using a container div with relative positioning and an iframe with absolute positioning to maintain aspect ratio.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/02-videos.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position : 'relative', paddingBottom : '56.25%', height : '0' }}><iframe style={{ position : 'absolute', top : '0', left : '0', width : '100%', height : '100%' }} width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/3Q2vKGacfh0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Package for Custom Serverpod Module\nDESCRIPTION: This code snippet shows how to use the flutter create command to generate a new Flutter package for a custom Serverpod module. It demonstrates the correct syntax for creating a package template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test\nDESCRIPTION: Command to run a specific test in the Serverpod test suite\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/11-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server\n$ dart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Development Server\nDESCRIPTION: YAML configuration for setting up the development server with API endpoints and public access settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost # Change this line\n  publicPort: 8080\n  publicScheme: http\n...\n```\n\n----------------------------------------\n\nTITLE: Complete NotesEndpoint class\nDESCRIPTION: This Dart code represents the complete `NotesEndpoint` class, including methods for retrieving all notes, creating a note, and deleting a note. This class serves as the API endpoint for managing notes in the application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    // By ordering by the id column, we always get the notes in the same order\n    // and not in the order they were updated.\n    return await Note.db.find(\n      session,\n      orderBy: (t) => t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.db.insertRow(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.db.deleteRow(session, note);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod' which generates three packages: server, client, and Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Column in Single Row\nDESCRIPTION: Example of updating specific columns in a single Company record\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); \ncompany.name = 'New name';\ncompany.address = 'Baker street'\nvar updatedCompany = await Company.db.updateRow(session, company, columns: [Company.t.name]);\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Dependencies to Flutter Project\nDESCRIPTION: This YAML snippet shows the dependencies to be added to the pubspec.yaml file in the Flutter project for Serverpod authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Module Database Migration\nDESCRIPTION: This bash command creates a new database migration that includes tables for the auth module, preparing the database schema for use with Serverpod's authentication features.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Not Between Filter in Dart\nDESCRIPTION: Shows how to use the notBetween filter to fetch users outside a specific age range.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.notBetween(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Docker Compose Configuration\nDESCRIPTION: Full docker-compose.yaml configuration including both development and test services for PostgreSQL and Redis.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Development services\n  postgres:\n    image: postgres:16.3\n    ports:\n      - '8090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>\n      POSTGRES_PASSWORD: \"<insert database development password>\"\n    volumes:\n      - <projectname>_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - dev\n  redis:\n    image: redis:6.2.6\n    ports:\n      - '8091:6379'\n    command: redis-server --requirepass \"<insert redis development password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - dev\n\n  # Test services\n  postgres_test:\n    image: postgres:16.3\n    ports:\n      - '9090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>_test\n      POSTGRES_PASSWORD: \"<insert database test password>\"\n    volumes:\n      - <projectname>_test_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - test\n  redis_test:\n    image: redis:6.2.6\n    ports:\n      - '9091:6379'\n    command: redis-server --requirepass \"<insert redis test password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - test\n\nvolumes:\n  <projectname>_data:\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Testing Diagnostic Event Handlers\nDESCRIPTION: Unit test example for verifying diagnostic event handler functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  var exceptionHandler = TestExceptionHandler();\n\n  withServerpod('Given withServerpod with a diagnostic event handler',\n      experimentalFeatures: ExperimentalFeatures(\n        diagnosticEventHandlers: [exceptionHandler],\n      ), (sessionBuilder, endpoints) {\n    test(\n        'when calling an endpoint method that submits an exception event '\n        'then the diagnostic event handler gets called', () async {\n      final result = await endpoints.diagnosticEventTest\n          .submitExceptionEvent(sessionBuilder);\n      expect(result, 'success');\n\n      final record = await exceptionHandler.events.first.timeout(Duration(seconds: 1));\n      expect(record.event.exception, isA<Exception>());\n      expect(record.space, equals(OriginSpace.application));\n      expect(record.context, isA<DiagnosticEventContext>());\n      expect(\n          record.context.toJson(),\n          allOf([\n            containsPair('serverId', 'default'),\n            containsPair('serverRunMode', 'test'),\n            containsPair('serverName', 'Server default'),\n          ]));\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Migration Command\nDESCRIPTION: Terminal command to create a new empty migration to ensure new databases use the updated bigint representation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to navigate to the server directory and start the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_server\n$ dart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Serverpod Documentation Website\nDESCRIPTION: Demonstrates how to install project dependencies using either npm directly or the provided Makefile command. This step is necessary before starting local development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd serverpod_docs\n\n# Using npm\n$ npm install\n\n# Or if you have Make installed, use this make command\n$ make install\n```\n\n----------------------------------------\n\nTITLE: Accessing Client IP Address in Serverpod Dart\nDESCRIPTION: This snippet casts a Session to a MethodCallSession to access the client's IP address via the HttpRequest object. This is useful when the server is behind a load balancer. Ensure you have the necessary HttpRequest extension available in your Serverpod environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/03-sessions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession as MethodCallSession;\nvar ipAddress = session.httpRequest.remoteIpAddress;\n```\n\n----------------------------------------\n\nTITLE: Detaching Single Row in Serverpod Relations\nDESCRIPTION: Shows how to remove the association between an employee and a company using the detachRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detachRow.employees(session, employee!);\n```\n\n----------------------------------------\n\nTITLE: Efficient Database Setup and Teardown in Serverpod Tests\nDESCRIPTION: Shows how to properly set up and tear down database operations in Serverpod tests, leveraging the automatic transaction rollback feature.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\n  });\n\n  // Clean up can be omitted since the transaction is rolled back after each by default\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod Installation\nDESCRIPTION: This snippet is used to verify the Serverpod installation by displaying the help text for the `serverpod` command. If Serverpod is correctly installed, running this command should display the help screen.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Importing GCP Cloud Storage Package\nDESCRIPTION: Import statement for Google Cloud Storage package in Serverpod server configuration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_gcp/serverpod_cloud_storage_gcp.dart'\n    as gcp;\n```\n\n----------------------------------------\n\nTITLE: Database Transaction Example in Dart\nDESCRIPTION: Shows how to use database transactions for atomic operations in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Using flushEventQueue with Generator Function in Dart\nDESCRIPTION: This code snippet shows how to use `flushEventQueue` in conjunction with a generator function in a Serverpod endpoint. The purpose is to ensure the generator function executes up to a `yield` statement before proceeding further in the test. This is especially helpful when the test depends on the state of the generator after yielding.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = endpoints.someEndoint.generatorFunction(session);\nawait flushEventQueue();\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Client\nDESCRIPTION: Shows how to initialize the Serverpod client with connectivity monitoring for Flutter applications.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Streams in Dart\nDESCRIPTION: This snippet illustrates creating a stream with the `createStream` method to receive messages from a channel. It listens for messages posted to the specified channel, allowing for real-time message processing. The stream is closed automatically when the session ends, but it can be manually canceled by calling `cancel` on the subscription.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/16-server-events.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nstream.listen((message) {\n    print('Received message: $message');\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration in Bash\nDESCRIPTION: Creates a new migration that includes the auth module tables using the serverpod create-migration command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Shows how to implement a bidirectional one-to-one relationship where both sides can access the related entity using a shared relationship name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int\n  address: Address?, relation(name=user_address, field=addressId)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  user: User?, relation(name=user_address)\n```\n\n----------------------------------------\n\nTITLE: Note Dialog Implementation in Flutter\nDESCRIPTION: Dialog widget for creating and editing notes with a text input field and save functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documented YAML Class Definition\nDESCRIPTION: Enhanced version of the Company class definition that includes documentation comments using the triple hash syntax. Shows how to document both the class and its individual fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/02-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App for Serverpod Mini\nDESCRIPTION: Commands to navigate to the Flutter app directory and run the app in Chrome.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Complete Main.dart File Structure for Serverpod Flutter App\nDESCRIPTION: The complete structure of the main.dart file for the notes app, including the client initialization, app configuration, and basic UI setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\n// Sets up a singleton client object that can be used to talk to the server from\n// anywhere in our app. The client is generated from your server code.\n// The client is set up to connect to a Serverpod running on a local server on\n// the default port. You will need to modify this to connect to staging or\n// production servers.\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Serverpod Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Serverpod Example'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In Button in Flutter\nDESCRIPTION: Code example showing how to implement the Apple Sign-In button widget in a Flutter application using the serverpod_auth_apple_flutter package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Preparing Cloud Run Deployment Script\nDESCRIPTION: Commands to copy and make the Cloud Run deployment script executable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cp deploy/gcp/console_gcr/cloud-run-deploy.sh .\n$ chmod u+x cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Extra Classes Configuration in YAML\nDESCRIPTION: Configuration entry in generator.yaml for declaring custom serializable classes that should be included in the generation process.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/02-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Installing Markdown Linter for Serverpod Docs Formatting\nDESCRIPTION: Shows how to install the markdownlint-cli globally for consistent formatting of markdown files in the documentation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\n$ npm install -g markdownlint-cli\n\n# Or if you have Make installed, use this make command\n$ make install-linter\n```\n\n----------------------------------------\n\nTITLE: Adding Floating Action Button for Note Creation in Flutter\nDESCRIPTION: This snippet adds a floating action button to the Scaffold in the build method of 'MyHomePageState'. It triggers the note creation dialog when pressed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Relation Model Definition in YAML\nDESCRIPTION: Demonstrates how to create database relations between tables using the relation keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address?, relation\n```\n\n----------------------------------------\n\nTITLE: Calling an Endpoint Method from Client Side in Dart\nDESCRIPTION: This Dart code demonstrates how to call the 'hello' method defined in an endpoint from the client side. It asynchronously awaits the response and provides the name 'World' as a parameter. This snippet aids in understanding how to interact with server endpoints after client code generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Client-side File Upload Implementation\nDESCRIPTION: Client-side code demonstrating how to upload a file using the upload description and FileUploader class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod generator commands\nDESCRIPTION: These commands fetch the dependencies and generate the necessary code to integrate the module. Run these from your server's directory after updating the configuration files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Demo App\nDESCRIPTION: Commands to run the Flutter demo application in Chrome\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Installation\nDESCRIPTION: This command checks if the Serverpod CLI was installed correctly. It should display the help information for the `serverpod` command if the installation was successful.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod\n```\n\n----------------------------------------\n\nTITLE: Database Index Configuration in YAML\nDESCRIPTION: Example of adding database indexes to tables for performance optimization, including field specification and index naming.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>?, api\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Server Environment\nDESCRIPTION: Commands to start the Docker container for test server and setup database tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/06-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Custom Email Authentication Implementation in Dart\nDESCRIPTION: Complete example of custom email authentication implementation using EmailAuthController, including account creation, validation, sign-in, and password reset functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/01-email.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nfinal authController = EmailAuthController(client.modules.auth);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.createAccountRequest(userName, email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.validateAccount(email, verificationCode);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.signIn(email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.initiatePasswordReset(email);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Failure Handling Method\nDESCRIPTION: A method to handle connection failures by updating the state to clear the notes list and store the exception for potential error display.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows in Dart\nDESCRIPTION: Delete specific rows using the `delete` or `deleteRow` methods in Dart. Supports conditional deletion using expressions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\\nawait Company.deleteRow(session, myCompany);\\n\\n// Delete all rows where the company name ends with 'Ltd'\\nawait Company.delete(\\n  where: (t) => t.name.like('%Ltd'),\\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Name Not Equal in Dart\nDESCRIPTION: This snippet illustrates how to fetch users whose name is not 'Bob'. It also shows how rows with a null value are included when a non-null value is used in the notEquals comparison.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notEquals('Bob')\n);\n```\n\n----------------------------------------\n\nTITLE: Alternative Google Sign-In Button Implementation\nDESCRIPTION: Flutter implementation with explicit client and server IDs for iOS and Android platforms\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  clientId: _googleClientId, // Client ID of the client (null on web)\n  serverClientId: _googleServerClientId, // Client ID from the server (required on web)\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key Field in One-to-One Relationship\nDESCRIPTION: Shows how to customize the foreign key field name in a one-to-one relationship using the field parameter in the relation definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  customIdField: int\n  address: Address?, relation(field=customIdField)\nindexes:\n  user_address_unique_idx:\n    fields: customIdField\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Widget with Mustache Template Values\nDESCRIPTION: Demonstrates creating a custom widget with template values that can be rendered using Mustache templating\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/13-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage in Serverpod\nDESCRIPTION: Implementation of S3 cloud storage configuration in Serverpod, including region, bucket, and public host settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations Command\nDESCRIPTION: Terminal command for applying database migrations during server startup using the --apply-migrations flag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Adding routes to the Serverpod web server\nDESCRIPTION: Adds routes to the Serverpod web server using the `addRoute` method. The first example adds a single page, while the second matches all paths starting with '/item/'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/18-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Registering Google Sign-In Route in Serverpod\nDESCRIPTION: Dart code for registering the Google Sign-In route in the server configuration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Server Test Tools Path to config/generator.yaml\nDESCRIPTION: This snippet adds the `server_test_tools_path` key to the `config/generator.yaml` file, which specifies where the test tools file will be generated. It's crucial for configuring the testing environment for existing projects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Button in Dart\nDESCRIPTION: Add a Google sign-in button to a Flutter app, specifying callbacks for successful sign-in and failure scenarios.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  onSignedIn: () { ... handle sign in here ... },\n  onFailure: () { ... handle fail to sign in here ... },\n)\n```\n\n----------------------------------------\n\nTITLE: Model Definition Updates\nDESCRIPTION: Examples showing the old and new syntax for model definitions, including changes to api, database, and parent keywords.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, api\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, !persist\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, database\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, scope=serverOnly\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, parent=example\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, relation(parent=example)\n```\n\n----------------------------------------\n\nTITLE: Testing Authenticated Endpoint in Dart\nDESCRIPTION: This snippet shows how to use a session builder with the `withServerpod` helper to test an authenticated endpoint. It verifies that the endpoint returns the expected greeting when called with the authenticated session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given AuthenticatedExample endpoint', (sessionBuilder, endpoints) {\n  // Corresponds to an actual user id\n  const int userId = 1234;\n\n  group('when authenticated', () {\n    var authenticatedSessionBuilder = sessionBuilder.copyWith(\n      authentication:\n          AuthenticationOverride.authenticationInfo(userId, {Scope('user')}),\n    );\n\n    test('then calling `hello` should return greeting', () async {\n      final greeting = await endpoints.authenticatedExample\n          .hello(authenticatedSessionBuilder, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL and Redis Test Services in docker-compose.yaml\nDESCRIPTION: This code snippet configures two new services, `postgres_test` and `redis_test`, in the `docker-compose.yaml` file. These services facilitate the testing environment by isolating them from the development environment. It includes port mappings, environment variables, and is recommended for use in testing states.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\n  profiles:\n    - '' # Default profile\n    - test\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass \"<insert redis test password>\"\n  environment:\n    - REDIS_REPLICATION_MODE=master\n  profiles:\n    - '' # Default profile\n    - test\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Serverpod Web Server\nDESCRIPTION: Demonstrates how to add single page routes and wildcard paths to the Serverpod web server. Shows basic route configuration patterns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/10-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Apple Auth Dependency in Flutter\nDESCRIPTION: Add the serverpod_auth_apple_flutter dependency to the pubspec.yaml file in your Flutter project. This allows you to use Apple Sign-In functionality in your Serverpod application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Between and NotBetween Filters in Serverpod\nDESCRIPTION: Using between and notBetween operators for range filtering with inclusive boundaries.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.between(18, 65)\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.notBetween(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Flutter\nDESCRIPTION: Async method to create notes by calling the server endpoint and refreshing the notes list with error handling.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Included Lists in Serverpod\nDESCRIPTION: Demonstrates how to paginate included lists using limit and offset parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      limit: 10,\n      offset: 10,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Authentication Key Manager for Client in Dart\nDESCRIPTION: This snippet outlines how to define a simple in-memory authentication key manager in Dart, `SimpleAuthKeyManager`, implementing the `AuthenticationKeyManager` interface, for use with a Serverpod client. The manager stores tokens temporarily and requires methods `get`, `put`, and `remove`. Not suitable for production environments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass SimpleAuthKeyManager extends AuthenticationKeyManager {\n  String? _key;\n\n  @override\n  Future<String?> get() async {\n    return _key;\n  }\n\n  @override\n  Future<void> put(String key) async {\n    _key = key;\n  }\n\n  @override\n  Future<void> remove() async {\n    _key = null;\n  }\n}\n\n\nvar client = Client('http://$localhost:8080/',\n    authenticationKeyManager: SimpleAuthKeyManager())\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Deprecated Sign-out Method in Dart\nDESCRIPTION: This snippet illustrates the deprecated 'signOut' method for signing out users, highlighting the transition to 'signOutDevice' or 'signOutAllDevices'. Configurable through the 'legacyUserSignOutBehavior', the snippet uses the 'client.modules.auth.status' endpoint but is not recommended for new implementations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Getting Upload Description - Dart\nDESCRIPTION: This snippet creates a function to obtain an upload description which grants the app permission to upload a file. The function takes a session and the file path as parameters and returns a string representing the upload description.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Secure Random Configuration (Dart)\nDESCRIPTION: Dart code snippet to configure securely random password hash generation by setting 'allowUnsecureRandom' to false in the 'AuthConfig'. This ensures security by avoiding cryptographically unsecure random numbers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: false,\n));\n```\n\n----------------------------------------\n\nTITLE: Handling Revoked Authentication in Serverpod (Dart)\nDESCRIPTION: This code snippet shows how to notify the server when a user's authentication is revoked. It demonstrates the use of the session.messages.authenticationRevoked method to raise the appropriate event.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = 1;\nvar revokedScopes = ['write'];\nvar message = RevokedAuthenticationScope(\n  scopes: revokedScopes,\n);\n\nawait session.messages.authenticationRevoked(\n  userId,\n  message,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod'. This generates three packages: a server package, a client package, and a pre-configured Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Message Channel on Stream Opened in Dart\nDESCRIPTION: This overrides the streamOpened method to subscribe to a user-specific message channel, forwarding messages received to the client through `sendStreamMessage`. An authenticated session is required.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Email Account Creation Request (Dart)\nDESCRIPTION: This function triggers an email account creation request, sending a validation email to the user using the 'createAccountRequest' method of 'EmailAuthController'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.createAccountRequest(userName, email, password);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Serverpod Server\nDESCRIPTION: Sets up the AuthConfig for handling validation and password reset emails in the main server.dart file. This snippet demonstrates how to configure the email sending functions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send the validation email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send the password reset email to the user.\n    // Return `true` if the email was successfully sent, otherwise `false`.\n    return true;\n  },\n));\n\n// Start the Serverpod server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Notes Endpoint\nDESCRIPTION: Complete implementation of the NotesEndpoint class with CRUD operations for managing notes in the database\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package/serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    // By ordering by the id column, we always get the notes in the same order\n    // and not in the order they were updated.\n    return await Note.db.find(\n      session,\n      orderBy: (t) => t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.db.insertRow(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.db.deleteRow(session, note);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct File Retrieval from Storage\nDESCRIPTION: Method to directly retrieve file data from storage as ByteData.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Main Application Implementation\nDESCRIPTION: Full implementation of the main application including state management, UI, and server communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'note_dialog.dart';\n\nvar client = Client('http://localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Notes',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Notes'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  MyHomePageState createState() => MyHomePageState();\n}\n\nclass MyHomePageState extends State<MyHomePage> {\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  @override\n  void initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  Future<void> _loadNotes() async {\n    try {\n      final notes = await client.notes.getAllNotes();\n      setState(() {\n        _notes = notes;\n      });\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  Future<void> _createNote(Note note) async {\n    try {\n      await client.notes.createNote(note);\n      await _loadNotes();\n    } catch (e) {\n      _connectionFailed(e);\n    }\n  }\n\n  void _connectionFailed(dynamic exception) {\n    setState(() {\n      _notes = null;\n      _connectionException = exception;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n      body: _notes == null\n          ? LoadingScreen(\n              exception: _connectionException,\n              onTryAgain: _loadNotes,\n            )\n          : ListView.builder(\n              itemCount: _notes!.length,\n              itemBuilder: ((context, index) {\n                return ListTile(\n                  title: Text(_notes![index].text),\n                );\n              }),\n            ),\n      floatingActionButton: _notes == null\n          ? null\n          : FloatingActionButton(\n              onPressed: () {\n                showNoteDialog(\n                  context: context,\n                  onSaved: (text) {\n                    var note = Note(\n                      text: text,\n                    );\n                    _notes!.add(note);\n                    _createNote(note);\n                  },\n                );\n              },\n              child: const Icon(Icons.add),\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Note Dialog Widget in Flutter\nDESCRIPTION: Implementation of a dialog widget for note creation with text input and save functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nvoid showNoteDialog({\n  required BuildContext context,\n  String text = '',\n  required ValueChanged<String> onSaved,\n}) {\n  showDialog(\n    context: context,\n    builder: (context) => NoteDialog(\n      text: text,\n      onSaved: onSaved,\n    ),\n  );\n}\n\nclass NoteDialog extends StatefulWidget {\n  const NoteDialog({\n    required this.text,\n    required this.onSaved,\n    super.key,\n  });\n\n  final String text;\n  final ValueChanged<String> onSaved;\n\n  @override\n  NoteDialogState createState() => NoteDialogState();\n}\n\nclass NoteDialogState extends State<NoteDialog> {\n  final TextEditingController controller = TextEditingController();\n\n  @override\n  void initState() {\n    super.initState();\n    controller.text = widget.text;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Dialog(\n      child: Padding(\n        padding: const EdgeInsets.all(16.0),\n        child: Column(\n          children: [\n            Expanded(\n              child: TextField(\n                controller: controller,\n                expands: true,\n                maxLines: null,\n                minLines: null,\n                decoration: const InputDecoration(\n                  border: InputBorder.none,\n                  hintText: 'Write your note here...',\n                ),\n              ),\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () {\n                widget.onSaved(controller.text);\n                Navigator.of(context).pop();\n              },\n              child: const Text('Save'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod Mini Project\nDESCRIPTION: Command to create a new Serverpod Mini project using the Serverpod CLI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/02-get-started-with-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create myminipod --mini\n```\n\n----------------------------------------\n\nTITLE: Defining an Endpoint Method Using Dart\nDESCRIPTION: This code defines a simple endpoint named 'ExampleEndpoint' in Dart which includes a method 'hello' that takes a 'Session' and a 'String' parameter, and returns a greeting message. It demonstrates how to structure an endpoint that adheres to the requirements of Serverpod. The code needs the 'serverpod' package as a dependency and assumes that it's placed in the appropriate directory for endpoint generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud CLI tools for project setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Checking if a File Exists in Storage\nDESCRIPTION: Server-side code to check if a file exists in a specific storage location, which can be useful before attempting to access the file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Tagging a repair migration in Serverpod\nDESCRIPTION: This bash command creates a repair migration with a specific tag. The tag is appended to the migration name, making it easier to identify migrations associated with specific changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create-repair-migration --tag \\\"reset-migrations\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Sign-in with Apple Button in Flutter\nDESCRIPTION: Code for implementing the SignInWithAppleButton widget in a Flutter application. The widget requires passing the authentication module from the Serverpod client to handle authentication flow.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Migration System Setup Commands\nDESCRIPTION: Commands for setting up and initializing the new migration system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n$ serverpod create-migration\n$ docker-compose down -v\n$ docker-compose up --build --detach\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: New Model Syntax - relation Field\nDESCRIPTION: This snippet demonstrates the new syntax for defining a parent relation using the `relation` keyword in Serverpod model files.  The `parent` attribute is now nested within the `relation` keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, relation(parent=example)\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Button\nDESCRIPTION: Adding a Google sign-in button with success and failure handlers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/07-authentication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  onSignedIn: () { ... handle sign in here ... },\n  onFailure: () { ... handle fail to sign in here ... },\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server - Bash Command\nDESCRIPTION: Command to start the Serverpod test server instance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/06-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Sign-In Button with Additional Scopes in Dart\nDESCRIPTION: This snippet demonstrates how to configure the SignInWithGoogleButton widget to request additional scopes beyond the default user information. In this example, it adds the YouTube API scope to access the user's YouTube data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: New Database Method Usage\nDESCRIPTION: This Dart snippet illustrates the usage of new database retrieval methods in the Serverpod framework, replacing older deprecated methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// The new find method is a drop-in replacement.\nExample.find(...); // old\nExample.db.find(...); // new\n\n// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.\nExample.findSingleRow(...);\nExample.db.findFirstRow(...);\n\n// The new findById method is a drop-in replacement.\nExample.findById(...); // old\nExample.db.findById(...); // new\n\n// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.\nExample.delete(...);\nExample.db.deleteWhere(...);\n\n// The new findById method is a drop-in replacement but returns the id of the row deleted.\nExample.deleteRow(...); // old\nExample.db.deleteRow(...); // new\n\n// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.\nExample.update(...);\nExample.db.updateRow(...);\n\n// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.\nExample.insert(...);\nExample.db.insertRow(...);\n\n// The new count method is a drop-in replacement.\nExample.count(...);\nExample.db.count(...);\n```\n\n----------------------------------------\n\nTITLE: Database Join Query SQL Example Serverpod\nDESCRIPTION: This SQL snippet performs a left join operation between the 'company' and 'town' tables. It demonstrates the format transformation from 'unsafeQueryMappedResults' to using 'toColumnMap()' with 'unsafeQuery' for consistent query result structuring.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n \"company\".\"id\" AS \"company.id\",\n \"company\".\"name\" AS \"company.name\",\n \"company\".\"townId\" AS \"company.townId\",\n \"company_town_town\".\"id\" AS \"company_town_town.id\",\n \"company_town_town\".\"name\" AS \"company_town_town.name\",\n \"company_town_town\".\"mayorId\" AS \"company_town_town.mayorId\"\nFROM\n \"company\"\nLEFT JOIN\n \"town\" AS \"company_town_town\" ON \"company\".\"townId\" = \"company_town_town\".\"id\"\nORDER BY\n \"company\".\"name\"\n\n```\n\n----------------------------------------\n\nTITLE: Implementing User Data Caching in Serverpod using Dart\nDESCRIPTION: Demonstrates how to implement a caching mechanism for user data using Serverpod's session object. The code shows how to check for cached data, retrieve from database if not cached, and store in cache with a specified lifetime.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/04-caching.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<UserData> getUserData(Session session, int userId) async {\n  // Define a unique key for the UserData object\n  var cacheKey = 'UserData-$userId';\n\n  // Try to retrieve the object from the cache\n  var userData = await session.caches.local.get<UserData>(cacheKey);\n\n  // If the object wasn't found in the cache, load it from the database and\n  // save it in the cache. Make it valid for 5 minutes.\n  if (userData == null) {\n    userData = session.db.findById(tUserData, userId) as UserData?;\n    await session.caches.local.put(cacheKey, userData!, lifetime: Duration(minutes: 5));\n  }\n\n  // Return the user data to the client\n  return userData;\n}\n```\n\n----------------------------------------\n\nTITLE: Client WebSocket Connection\nDESCRIPTION: Shows how to establish a WebSocket connection from the client to the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/11-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n```\n\n----------------------------------------\n\nTITLE: Adding Test Tools Path to Generator Configuration\nDESCRIPTION: Configuration addition for generator.yaml to enable test tools generation. This sets the output path for the test tools file to be generated at test/integration/test_tools.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Defining Database-Only Fields in YAML for Serverpod\nDESCRIPTION: This snippet shows how to define fields that are stored in the database but not sent to the server, using the 'database' flag in a YAML file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String?, database\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Pixorama Widget Structure\nDESCRIPTION: Initial setup of the Pixorama stateful widget with basic imports and class structure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nimport 'package:flutter/material.dart';\nimport 'package:pixels/pixels.dart';\nimport 'package:pixorama_client/pixorama_client.dart';\n\nimport '../../main.dart';\n\nclass Pixorama extends StatefulWidget {\n  const Pixorama({super.key});\n\n  @override\n  State<Pixorama> createState() => _PixoramaState();\n}\n\nclass _PixoramaState extends State<Pixorama> {\n}\n```\n\n----------------------------------------\n\nTITLE: New Syntax for Model Definition\nDESCRIPTION: This YAML snippet shows the updated syntax for defining a Serverpod model, including the replacement for deprecated keywords.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Handler in Serverpod 2.0\nDESCRIPTION: Shows how to implement the new authentication handler in the server.dart file using the serverpod_auth_server package\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Deployment Script\nDESCRIPTION: This command executes the `cloud-run-deploy.sh` script, which deploys your Serverpod application to Google Cloud Run. You need to configure the script with your database instance connection name and service account email before running it.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"$ ./cloud-run-deploy.sh\"\n```\n\n----------------------------------------\n\nTITLE: Requiring Login for Serverpod Endpoints in Dart\nDESCRIPTION: This snippet illustrates how to restrict access to a Serverpod endpoint to only authenticated users by overriding the requireLogin property.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Serverpod CLI\nDESCRIPTION: Commands to update and verify the Serverpod command line interface installation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nserverpod version\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Tutorial Video with HTML/CSS\nDESCRIPTION: HTML and CSS code for responsive embedding of YouTube video tutorials within the documentation. Uses relative positioning and padding for proper aspect ratio maintenance.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/01-tutorials.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position : 'relative', paddingBottom : '56.25%', height : '0' }}><iframe style={{ position : 'absolute', top : '0', left : '0', width : '100%', height : '100%' }} width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/3Q2vKGacfh0\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform\nDESCRIPTION: Command to set the TF_VAR_DATABASE_PASSWORD_PRODUCTION environment variable required for Terraform deployment using the production password from config/passwords.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Dependencies in Flutter\nDESCRIPTION: Commands to add Firebase core, auth, and UI auth packages to the Flutter project and configure Firebase.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add firebase_core firebase_auth firebase_ui_auth\n$ flutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Storage\nDESCRIPTION: Method to check if a file exists in the specified storage location using Serverpod's storage API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Client Module Dependency\nDESCRIPTION: Demonstrates adding client module dependencies in the client's pubspec.yaml file, specifically for the serverpod_auth client packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/10-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Defining a one-to-many self-relation in Serverpod with YAML\nDESCRIPTION: This YAML configuration defines a one-to-many self-referential relationship between cats and their mothers. The `Cat` class has fields for `name`, `mother` (referencing another `Cat`), and `kittens` (a list of `Cat` objects). The `mother` field is marked as `optional` and the `onDelete` is set to `SetNull`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nclass: Cat\ntable: cat\nfields:\n  name: String\n  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)\n  kittens: List<Cat>?, relation(name=cat_kittens)\n```\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Serverpod\nDESCRIPTION: Shows how to update a user's authorization scopes using the Users.updateUserScopes method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Multiple Rows in Serverpod Dart\nDESCRIPTION: This Dart code demonstrates how to delete multiple rows in a batch operation using the 'delete' method. It deletes a list of companies atomically from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.delete(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS S3 Storage in Dart\nDESCRIPTION: This code snippet shows how to set up AWS S3 storage for use with Serverpod. It demonstrates adding an S3 cloud storage configuration with parameters like region, bucket name, and public host.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Mapping in YAML\nDESCRIPTION: Shows how to map a Company class to a database table with fields and relationships using YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Storage\nDESCRIPTION: Server-side code to check if a file exists in the specified storage location using the fileExists method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: DNS Lookup with dig command\nDESCRIPTION: This command-line snippet demonstrates how to use the `dig` utility to query the Name Server (NS) records for a given domain. It is used to verify that the domain's DNS settings are correctly configured and pointing to the Google Cloud DNS servers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"$ dig +short NS examplepod.com\"\n```\n\n----------------------------------------\n\nTITLE: Custom Index Type Specification\nDESCRIPTION: Demonstrates how to specify a custom index type (BRIN in this example) instead of the default btree index type for PostgreSQL optimization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Authorization Scopes in Dart\nDESCRIPTION: This snippet demonstrates how to define custom authorization scopes in a Serverpod application by extending the Scope class. The CustomScope class allows for more granular access control and is used to specify scopes like 'userRead' and 'userWrite'. Custom scopes can then be enforced at route level through the 'requiredScopes' property of endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Database Access Updates in Serverpod 2.0\nDESCRIPTION: Shows the transition from deprecated dbNext to the new db field for database operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nsession.dbNext.find(...);\n\n// becomes\n\nsession.db.find(...);\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Table by ID in One-to-One Relation in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a 'User' class referencing a 'userInfoId' for one-to-one relations, where only an ID from a Serverpod module's table is accessed. It includes the 'age' field and an index for uniqueness of 'userInfoId'. Understanding of the specific module table names is required.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfoId: int, relation(parent=serverpod_user_info)\n  age: int\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod in a Specified Mode and Server ID - Bash\nDESCRIPTION: Starts the Serverpod server using Dart with specified mode and server id options. Required dependencies include Dart and the necessary Serverpod configuration files. The `--mode` option specifies the configuration mode ('development', 'staging', or 'production'), and the `--server-id` option sets the server's identifier for use in clusters. The command outputs the server state configured for a particular role and port settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/06-deployments/05-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Defining a many-to-many self-relation in Serverpod with YAML (Member)\nDESCRIPTION: This YAML configuration defines the `Member` class for a many-to-many self-referential relationship, allowing members to block each other. Each member has a list of members they are blocking (`blocking`) and a list of members blocking them (`blockedBy`). These lists are connected to the `Blocking` class through relations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nclass: Member\ntable: member\nfields:\n  name: String\n  blocking: List<Blocking>?, relation(name=member_blocked_by_me)\n  blockedBy: List<Blocking>?, relation(name=member_blocking_me)\n```\n```\n\n----------------------------------------\n\nTITLE: Bulk detaching rows in Serverpod\nDESCRIPTION: This snippet demonstrates how to remove associations for multiple employees simultaneously using the `detach` method in Serverpod. It retrieves a list of `Employee` objects by their IDs and then removes the relationships between all the employees and the company. This operation is atomic, meaning all detachments succeed, or none do.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\n\"var employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detach.employees(session, [employee!]);\"\n```\n\n----------------------------------------\n\nTITLE: Database Delete Operations Return Type Changes\nDESCRIPTION: Shows the updated return types for database delete operations in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nCompany company = await Company.db.deleteRow(session, company);\nList<Company> companies = await Company.db.delete(session, [company]);\nList<Company> companies = await Company.db.deleteWhere(session, where: (t) => t.name.like('%Ltd'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Database Connection\nDESCRIPTION: YAML configuration for setting up the database connection in production environment using Cloud SQL Proxy.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  isUnixSocket: true\n  host: /cloudsql/my-project:us-central1:database-name/.s.PGSQL.5432\n  port: 5432\n  name: serverpod\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Serverpod (Dart)\nDESCRIPTION: Shows how to update a user's authorization scopes using the Users class's updateUserScopes method, replacing all previously stored scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Defining Student Model with Many-to-Many Relationship in Serverpod\nDESCRIPTION: YAML definition for a Student model that participates in a many-to-many relationship with Course through Enrollment. The model includes a relation field to reference its enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# student.yaml\nclass: Student\ntable: student\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=student_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter demo app\nDESCRIPTION: Commands to navigate to the Flutter app directory and run the app in Chrome. The -d flag specifies the device to run on.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/03-creating-project.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Example Endpoint Implementation\nDESCRIPTION: Server-side endpoint implementation returning a custom class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:relation_test_shared/relation_test_shared.dart';\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<ClassName> getMyCustomClass(Session session) async {\n    return ClassName(\n      'John Doe',\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Row in Serverpod\nDESCRIPTION: This Dart code shows how to update a row in the database using the update method in Serverpod. The object being updated must have its id set to a non-null value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Terraform\nDESCRIPTION: This bash command sets an environment variable used by Terraform to configure the production database password during deployment. Replace <MY PRODUCTION PASSWORD> with the actual password defined in your config/passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable\nDESCRIPTION: Command to set the database password as an environment variable for Terraform deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: New Model Syntax Example\nDESCRIPTION: Example of the new model syntax using updated keywords.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Optimizing Database Connections in Tests\nDESCRIPTION: This Dart code provides a workaround to avoid exceeding the maximum database connection limit during concurrent testing in Serverpod. It suggests initializing the session within `setUpAll` instead of at the top level scope to postpone database connection attempts until the test group is actively running.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n\"withServerpod('Given example test', (sessionBuilder, endpoints) {\n  // Instead of this\n  var session = sessionBuilder.build();\n\n\n  // Do this to postpone connecting to the database until the test group is running\n  late Session session;\n  setUpAll(() {\n    session = sessionBuilder.build();\n  });\n  // ...\n});\"\n```\n\n----------------------------------------\n\nTITLE: Defining Database Indexes with YAML\nDESCRIPTION: This YAML snippet demonstrates how to add indexes to database tables for performance reasons.  It adds an index to the `name` field of the `company` table. The `fields` key holds a comma-separated list of column names. Other options are the type key (default is `btree`), and a `unique` key (default is `false`).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\nindexes:\n  company_name_idx:\n    fields: name\"\n```\n\n----------------------------------------\n\nTITLE: Using inSet Operation for Matching Multiple Values in Serverpod Dart\nDESCRIPTION: This code snippet showcases the inSet method to check if a column value matches any value in a set of values, supported in Serverpod using Dart. An input set of strings is required. If the set is empty, no rows are included. It provides the negated notInSet version as well, which performs the opposite operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.inSet({'Alice', 'Bob'})\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notInSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Database After Serverpod Test with Concurrency\nDESCRIPTION: Details the process of cleaning up a database manually after a concurrently tested session with rollbackDatabase.disabled in Serverpod. Demonstrates using tearDownAll to reset database state. This approach prevents data leaks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given ProductsEndpoint when calling concurrentTransactionCalls',\n  (sessionBuilder, endpoints) {\n    tearDownAll(() async {\n      var session = sessionBuilder.build();\n      // If something was saved to the database in the endpoint,\n      // for example a `Product`, then it has to be cleaned up!\n      await Product.db.deleteWhere(\n        session,\n        where: (_) => Constant.bool(true),\n      );\n    });\n\n    test('then should execute and commit all transactions', () async {\n      var result =\n          await endpoints.products.concurrentTransactionCalls(sessionBuilder);\n      // ...\n    });\n  },\n  rollbackDatabase: RollbackDatabase.disabled,\n);\n```\n\n----------------------------------------\n\nTITLE: Database Method Updates\nDESCRIPTION: Examples of old and new database method usage patterns in Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// The new find method is a drop-in replacement.\nExample.find(...); // old\nExample.db.find(...); // new\n\n// The old findSingleRow method has changed name to findFirstRow but is otherwise a drop-in replacement.\nExample.findSingleRow(...);\nExample.db.findFirstRow(...);\n\n// The new findById method is a drop-in replacement.\nExample.findById(...); // old\nExample.db.findById(...); // new\n\n// The old delete method has been renamed to deleteWhere and now returns a list of ids of rows that was deleted.\nExample.delete(...);\nExample.db.deleteWhere(...);\n\n// The new findById method is a drop-in replacement but returns the id of the row deleted.\nExample.deleteRow(...); // old\nExample.db.deleteRow(...); // new\n\n// The old update method has been renamed too updateRow and now returns the entire updated object as a new copy.\nExample.update(...);\nExample.db.updateRow(...);\n\n// The old insert method has been renamed too insertRow. The object you pass in is no longer modified, instead a new copy with the added row is returned which contains the inserted id. This means no mutations of the input object.\nExample.insert(...);\nExample.db.insertRow(...);\n\n// The new count method is a drop-in replacement.\nExample.count(...);\nExample.db.count(...);\n```\n\n----------------------------------------\n\nTITLE: Adding Test Passwords to Configuration\nDESCRIPTION: Addition to the passwords.yaml file to include credentials for test databases. This is required for connecting to the test instances of PostgreSQL and Redis.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Updating a Row in Dart\nDESCRIPTION: This Dart snippet demonstrates how to update an existing row in the database. First, it retrieves the row using `findById`. Then, it modifies a field of the object. Finally, it calls the `update` method to persist the changes to the database.  The object that you update must have its `id` set to a non `null` value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n\"var myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Database Rollback for Concurrent Transaction Tests\nDESCRIPTION: Shows how to disable automatic database rollbacks when testing concurrent transactions, which would otherwise cause conflicts. Includes proper cleanup to avoid test data leakage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given ProductsEndpoint when calling concurrentTransactionCalls',\n  (sessionBuilder, endpoints) {\n    tearDownAll(() async {\n      var session = sessionBuilder.build();\n      // If something was saved to the database in the endpoint,\n      // for example a `Product`, then it has to be cleaned up!\n      await Product.db.deleteWhere(\n        session,\n        where: (_) => Constant.bool(true),\n      );\n    });\n\n    test('then should execute and commit all transactions', () async {\n      var result =\n          await endpoints.products.concurrentTransactionCalls(sessionBuilder);\n      // ...\n    });\n  },\n  rollbackDatabase: RollbackDatabase.disabled,\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing Serializable Objects in YAML\nDESCRIPTION: This YAML snippet demonstrates how to reference serializable objects from other modules by specifying the module prefix and nickname. This is essential for maintaining clear structure and object references across modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/08-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Storage\nDESCRIPTION: Method to check if a file exists in the specified storage location.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Message Logging in Serverpod with Dart\nDESCRIPTION: Demonstrates how to log a basic message using the session.log() method in Serverpod. The log entry will be written to the database when the session completes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Handling Database Transactions and Quelled Exceptions in Serverpod Tests\nDESCRIPTION: Demonstrates how quelled exceptions within database transactions differ in behavior between test tools and production code. Describes using rollbackDatabase with disabled setting for such scenarios to mimic production behavior.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar transactionFuture = session.db.transaction((tx) async {\n    var data = UniqueData(number: 1, email: 'test@test.com');\n    try {\n        await UniqueData.db.insertRow(session, data, transaction: tx);\n        await UniqueData.db.insertRow(session, data, transaction: tx);\n    } on DatabaseException catch (_) {\n        // Ignore the database exception\n    }\n});\n\n// ATTENTION: This will throw an exception in production\n// but not in the test tools.\nawait transactionFuture;\n```\n\n----------------------------------------\n\nTITLE: Revoking User Authentication in Serverpod\nDESCRIPTION: This snippet demonstrates how to revoke a user's authentication in Serverpod and notify the server. It uses the `session.messages.authenticationRevoked` method to raise an event. The example shows revoking scopes for a given user id. Different revocation messages are used for different revocation needs (user, authId, scope).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = 1;\nvar revokedScopes = ['write'];\nvar message = RevokedAuthenticationScope(\n  scopes: revokedScopes,\n);\n\nawait session.messages.authenticationRevoked(\n  userId,\n  message,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Nested Includes in Serverpod Queries\nDESCRIPTION: The snippet shows how to include deeply nested relational data using Serverpod. The 'include' method is used to fetch nested objects like 'company' and 'address'. Serverpod framework is required. Inputs are 'session' and 'employeeId', and outputs include an employee and their associated nested objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Expressions for Queries in Dart\nDESCRIPTION: This Dart snippet provides examples of how to create expressions for querying the database using conditions on fields such as equalities, inequalities, and logical operators, demonstrating Serverpod's ease of use with type-safe queries.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod Business Logic with Session Dependencies\nDESCRIPTION: Example demonstrating how to test business logic that depends on a Serverpod Session object using the withServerpod helper. This pattern allows testing database-dependent business logic that's separate from endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given decreasing product quantity when quantity is zero', (\n  sessionBuilder,\n  _,\n) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, [\n      Product(\n        id: 123,\n        name: 'Apple',\n        quantity: 0,\n      ),\n    ]);\n  });\n\n  test('then should throw `InvalidOperationException`',\n      () async {\n    var future = ProductsBusinessLogic.updateQuantity(\n      session,\n      id: 123,\n      decrease: 1,\n    );\n\n    await expectLater(future, throwsA(isA<InvalidOperationException>()));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod in Serverless Role\nDESCRIPTION: Command to launch Serverpod server in serverless role configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Messages in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to log a custom message during the execution of a session using the 'log' method of the 'session' object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/09-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Client Dependencies Setup (Yaml)\nDESCRIPTION: This YAML snippet shows how to add the necessary dependencies for email authentication in a client project using Serverpod. The versions indicated are placeholders and should be replaced based on project requirements.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Generating Code for Serializable Objects\nDESCRIPTION: Command to run the Serverpod code generator, which creates Dart code based on the YAML definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Adding Client Dependencies\nDESCRIPTION: Configuration in client's pubspec.yaml to add the serverpod_auth_client dependency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/08-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Testing Multi-User Stream Interactions in Serverpod\nDESCRIPTION: Test case that verifies multiple users can interact with a shared stream using separate sessions. Uses the flushEventQueue helper to ensure the stream is registered before messages are posted.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given CommunicationExampleEndpoint', (sessionBuilder, endpoints) {\n  const int userId1 = 1;\n  const int userId2 = 2;\n\n  test(\n      'when calling postNumberToSharedStream and listenForNumbersOnSharedStream '\n      'with different sessions then number should be echoed',\n      () async {\n    var userSession1 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId1,\n        {},\n      ),\n    );\n    var userSession2 = sessionBuilder.copyWith(\n      authentication: AuthenticationOverride.authenticationInfo(\n        userId2,\n        {},\n      ),\n    );\n\n    var stream =\n        endpoints.testTools.listenForNumbersOnSharedStream(userSession1);\n    // Wait for `listenForNumbersOnSharedStream` to execute up to its \n    // `yield` statement before continuing\n    await flushEventQueue(); \n\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 111);\n    await endpoints.testTools.postNumberToSharedStream(userSession2, 222);\n\n    await expectLater(stream.take(2), emitsInOrder([111, 222]));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Building Pixorama User Interface\nDESCRIPTION: This build method creates the user interface for the Pixorama widget, displaying either a progress indicator or the PixelEditor based on the image controller's state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // ...\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: _imageController == null\n          ? const CircularProgressIndicator()\n          : PixelEditor(\n              controller: _imageController!,\n              onSetPixel: (details) {\n                // When a user clicks a pixel we will get a callback from the\n                // PixelImageController, with information about the changed\n                // pixel. When that happens we call the setPixels method on\n                // the server.\n                client.pixorama.setPixel(\n                  pixelIndex: details.tapDetails.index,\n                  colorIndex: details.colorIndex,\n                );\n              },\n            ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Deletion Method in Dart\nDESCRIPTION: Helper method that handles the deletion of a note by calling the server endpoint and refreshing the notes list. Includes error handling for failed connections.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Client Dependencies\nDESCRIPTION: Add the serverpod_auth_client dependency to your client project's pubspec.yaml file for client-side authentication functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Defining AuthKey Table in YAML\nDESCRIPTION: This YAML definition provides the structure for the serverpod_auth_key table, including fields for user access, key attributes, and indexes. It's essential for integrating with the new authentication system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Provides a method of access for a user to authenticate with the server.\nclass: AuthKey\ntable: serverpod_auth_key\nfields:\n  ### The id of the user to provide access to.\n  userId: int\n\n  ### The hashed version of the key.\n  hash: String\n\n  ### The key sent to the server to authenticate.\n  key: String?, !persist\n\n  ### The scopes this key provides access to.\n  scopeNames: List<String>\n\n  ### The method of signing in this key was generated through. This can be email\n  ### or different social logins.\n  method: String\nindexes:\n  serverpod_auth_key_userId_idx:\n    fields: userId\n```\n\n----------------------------------------\n\nTITLE: Connecting WebSocket Client\nDESCRIPTION: Example of establishing WebSocket connection from client to server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n```\n\n----------------------------------------\n\nTITLE: Defining Course Model with Enrollment Relation in Serverpod\nDESCRIPTION: This YAML snippet defines the Course model, including a relationship with the Enrollment model through the `enrollments` field. The `relation` specifies the name of the relationship as `course_enrollments`, indicating the foreign key in the Enrollment table that references the Course table. This allows querying enrollments associated with a specific course.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# course.yaml\nclass: Course\ntable: course\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=course_enrollments)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Serializable Class in Dart using Freezed\nDESCRIPTION: This Dart snippet illustrates how to create a custom serializable class using the Freezed package, complete with JSON serialization methods. It requires Freezed annotations and integrates with the Serverpod serialization framework.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/02-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:serverpod_serialization/serverpod_serialization.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n    SerializationManager serializationManager,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SignInWithGoogleButton to Widget\nDESCRIPTION: This snippet demonstrates how to add the `SignInWithGoogleButton` to a Flutter widget.  It takes a caller and serverClientId as input and an optional redirect URI that defines the location the client is redirected to after successfully signing in.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_google_flutter/serverpod_auth_google_flutter.dart';\n\n\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  serverClientId: _googleServerClientId, // needs to be supplied for the web integration\n  redirectUri: Uri.parse('http://localhost:8082/googlesignin'),\n)\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Dart\nDESCRIPTION: This code snippet shows how to update a user's scopes using the 'Users' class in the Serverpod framework. The 'updateUserScopes' method requires the 'serverpod_auth_server' package. It takes the session object, user ID, and new set of scopes as parameters, replacing all previously stored scopes for the user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Tokens in Serverpod\nDESCRIPTION: The snippet describes creating an authentication token for a user via the `signInUser` method from the `UserAuthentication` class, which requires a session object, the user ID, authentication method name, and a set of scopes. The output is an authentication token that is linked to a user identifier. Prerequisites include the `UserAuthentication` class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI Tools using Dart pub\nDESCRIPTION: Command to install Serverpod's command line interface tools globally using Dart pub package manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Validating Database State in Async Operations in Dart\nDESCRIPTION: This snippet illustrates a potential edge case where a database exception is caught within a transaction, highlighting how this scenario behaves differently in tests against production code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar transactionFuture = session.db.transaction((tx) async {\n    var data = UniqueData(number: 1, email: 'test@test.com');\n    try {\n        await UniqueData.db.insertRow(session, data, transaction: tx);\n        await UniqueData.db.insertRow(session, data, transaction: tx);\n    } on DatabaseException catch (_) {\n        // Ignore the database exception\n    }\n};\n\n// ATTENTION: This will throw an exception in production\n// but not in the test tools.\nawait transactionFuture;\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands\nDESCRIPTION: Terminal commands to update dependencies and generate module protocol code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget in Serverpod\nDESCRIPTION: This snippet demonstrates how to create a custom Widget by overriding the Widget class. It shows how to set template parameters using the 'values' field, which are then passed to the corresponding HTML template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/10-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Not Equals Filter in Dart\nDESCRIPTION: Shows how to use the notEquals filter to fetch users whose name is not a specific value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notEquals('Bob')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional One-to-many Relationship with Foreign Key in Serverpod YAML\nDESCRIPTION: This snippet shows how to define a bidirectional one-to-many relationship using a foreign key field in Serverpod's YAML configuration. The Company model includes a List<Employee> field, while the Employee model uses a companyId field with relation parameters to establish the relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation(name=company_employees, parent=company)\n```\n\n----------------------------------------\n\nTITLE: Defining Company Class with Employee Relation in YAML\nDESCRIPTION: The snippet outlines a 'Company' class with a one-to-many relationship to a list of 'User' objects named 'employees'. It accomplishes this using the same 'company_employee' naming for the relation, facilitating connections between the company and its employees in Serverpod modules.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<User>?, relation(name=company_employee)\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with Responsive Container\nDESCRIPTION: HTML/JSX code for embedding a YouTube video player within a responsive container that maintains 16:9 aspect ratio. The code is repeated multiple times for different video updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/04-support.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style={{ position : 'relative', paddingBottom : '56.25%', height : '0' }}><iframe style={{ position : 'absolute', top : '0', left : '0', width : '100%', height : '100%' }} width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/AmHZP6T1NdQ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Upload Description - Serverpod Dart\nDESCRIPTION: This code snippet creates an upload description on the server, granting access to the app to upload a file to a specified path within a storage ID. It requires a `Session` object and a file `path` as input. The function returns a string representing the upload description or null if it fails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-Many Relationship with Object Relation in Serverpod YAML\nDESCRIPTION: This snippet defines a bidirectional one-to-many relationship using an object relation in Serverpod. The `company_employees` name parameter ensures a mutual connection between `Company` and `Employee` by linking the `employees` list in `Company` with the `company` field in `Employee`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation(name=company_employees)\n```\n\n----------------------------------------\n\nTITLE: Importing Test Tools in Dart\nDESCRIPTION: This snippet demonstrates the correct way to import testing tools in a Serverpod project. It advises against importing 'serverpod_test' directly, recommending the use of 'serverpod_test_tools.dart' which re-exports all necessary helpers and types. This prevents redundant imports and potential linting issues.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'serverpod_test_tools.dart';\n// Don't import `serverpod_test` directly.\nimport 'package:serverpod_test/serverpod_test.dart'; ❌\n```\n\n----------------------------------------\n\nTITLE: Filtering Relational Lists in Serverpod\nDESCRIPTION: Demonstrates the use of a 'where' clause to filter query results in Serverpod. It filters employees based on name starting with 'a'. Requires Serverpod framework. Inputs include session and ID parameters; output is filtered employee list.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      where: (t) => t.name.ilike('a%')\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Declaring State Variables for Notes in Dart\nDESCRIPTION: Declaration of state variables to hold the list of notes and potential connection exceptions in the MyHomePageState class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\n...\n\nclass MyHomePageState extends State<MyHomePage> {\n\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Handler in Serverpod\nDESCRIPTION: Integration of authentication handler into the Serverpod server instance setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImageData Model in YAML\nDESCRIPTION: Defines the data structure for representing the entire image with pixel data, width, and height. Used for serialization between client and server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ImageData\nfields:\n  pixels: ByteData\n  width: int\n  height: int\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Rows in Dart\nDESCRIPTION: Delete single or multiple database rows using different methods\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Serializable Class with Freezed\nDESCRIPTION: Implementation of a custom serializable class using the Freezed package. Demonstrates how to create a class that complies with Serverpod's serialization requirements.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/02-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:serverpod_serialization/serverpod_serialization.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n    SerializationManager serializationManager,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Custom Messages in Dart\nDESCRIPTION: Logs a custom message into the serverpod database using the session\\'s log method. No additional dependencies are required. Key parameter `message` refers to the text to be logged. Inputs are simple strings, and the output is an entry in the database. Ensure that the serverpod is properly setup to capture logs.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Tokens in Serverpod (Dart)\nDESCRIPTION: This snippet illustrates how to create an authentication token for a user after successful login or registration. It uses the `signInUser` method from the `UserAuthentication` class, assigning method type and scope to the token, and requires a session and user ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nvar authToken = await UserAuthentication.signInUser(userInfo.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Content in Dart\nDESCRIPTION: Method to directly retrieve a file's content from a specified storage location\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Dart (Server-side)\nDESCRIPTION: This code snippet shows how to verify that a file upload has been completed on the server side. It's necessary because there's no other way to know if the file was uploaded or if the upload was canceled when using third-party services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Auth Tokens in Serverpod\nDESCRIPTION: This section describes how to sign out a user across all devices by removing all associated auth tokens using the `signOutUser` method from the `UserAuthentication` class. The implementation requires a session object, with the `logout` method as the primary function.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass AuthenticatedEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n  Future<void> logout(Session session) async {\n    await UserAuthentication.signOutUser(session);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Repair Migration in Serverpod CLI\nDESCRIPTION: Command to create a repair migration, used when the database schema is out of sync with the migration system. By default, it connects to a running development server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Streaming Method in Dart\nDESCRIPTION: An example of a streaming method that echoes back messages received through a stream. The method uses async* to yield messages and supports dynamic stream types.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/15-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Stream echoStream(Session session, Stream stream) async* {\n    await for (var message in stream) {\n      yield message;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Transactions with Callbacks in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to use the 'session.db.transaction' method in Serverpod to execute multiple database operations as a single atomic transaction. If any operation fails, the entire transaction rolls back, ensuring data integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Generating SQL for One-to-One Relationship in PostgreSQL\nDESCRIPTION: Provides the SQL code that Serverpod generates behind the scenes to set up a one-to-one relationship. It includes table creation, unique index, and foreign key constraint definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"address\" (\n    \"id\" serial PRIMARY KEY,\n    \"street\" text NOT NULL\n);\n\nCREATE TABLE \"user\" (\n    \"id\" serial PRIMARY KEY,\n    \"addressId\" integer NOT NULL\n);\n\n\nCREATE UNIQUE INDEX \"user_address_unique_idx\" ON \"user\" USING btree (\"addressId\");\n\nALTER TABLE ONLY \"user\"\n    ADD CONSTRAINT \"user_fk_0\"\n    FOREIGN KEY(\"addressId\")\n    REFERENCES \"address\"(\"id\")\n    ON DELETE CASCADE\n    ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Filters in Dart with Serverpod\nDESCRIPTION: This Dart snippet shows how to count the number of rows in the 'company' table that match a filter using the `count` method. It counts the number of `Company` objects whose names start with 's'. The method returns an `int` representing the number of matching rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n\"var count = await Company.db.count(\n  session, \n  where: (t) => t.name.like('s%'),\n);\"\n```\n\n----------------------------------------\n\nTITLE: Defining an example endpoint method\nDESCRIPTION: This Dart code defines an example endpoint method named `example` within the `NotesEndpoint` class. The method takes a `Session` object as its first parameter and returns a `Future<void>`. Endpoints must return a `Future` of a serializable object, primitive datatype, or void.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> example(Session session) async {\n  // Endpoint implementation goes here\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Floating Action Button for Note Creation in Flutter\nDESCRIPTION: This snippet adds a floating action button to the Scaffold in the build method. When pressed, it shows the note dialog and creates a new note when saved.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL/TLS for Serverpod Server in Dart\nDESCRIPTION: This snippet demonstrates how to set up SSL/TLS security for a Serverpod server instance. It shows the creation of a SecurityContext with certificate and private key, which is then passed to the Serverpod constructor via SecurityContextConfig.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/21-security-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal securityContext = SecurityContext()\n  ..useCertificateChain('path/to/server_cert.pem')\n  ..usePrivateKey('path/to/server_key.pem', password: 'password');\n\nServerpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  securityContextConfig: SecurityContextConfig(\n    apiServer: securityContext,\n    webServer: securityContext,\n    insightsServer: securityContext,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Handler Serverpod Dart\nDESCRIPTION: This snippet shows the setup required to integrate a custom authentication handler in Serverpod. It requires the 'serverpod_auth' package to be imported, and the 'authenticationHandler' must be set in the 'Serverpod' object. Dependencies include serverpod_auth_server package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example dig command output\nDESCRIPTION: This text snippet shows an example of the output from the dig command when querying for Name Server (NS) records.  The output confirms that the domain is pointing to Google's domain name servers, indicating successful DNS configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"ns-cloud-b4.googledomains.com.\\nns-cloud-b1.googledomains.com.\\nns-cloud-b2.googledomains.com.\\nns-cloud-b3.googledomains.com.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Test Services in Docker Compose\nDESCRIPTION: Adds PostgreSQL and Redis test services to the Docker Compose setup, allowing for isolated testing without polluting the main development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Add to the existing services\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass 'REDIS_TEST_PASSWORD'\n  environment:\n    - REDIS_REPLICATION_MODE=master\nvolumes:\n  # ...\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Screen in Flutter\nDESCRIPTION: This code creates a LoadingScreen widget that displays either a loading indicator or a 'Try again' button based on the connection state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields from Protocol with YAML\nDESCRIPTION: This YAML snippet demonstrates how to exclude a field from the protocol by adding the `database` flag to the type. This means the field will be saved to the database but never sent to the server. It shows how to define a `UserData` class where the `password` field is only stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: UserData\nfields:\n  name: String\n  password: String, database\"\n```\n\n----------------------------------------\n\nTITLE: Executing Simple Query - Dart\nDESCRIPTION: This snippet shows how to execute a simple SQL query using the `unsafeSimpleQuery` method. This method does not support parameter binding, which can lead to SQL injection if not handled carefully. This mode is useful for executing multiple statements at once.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeSimpleQuery(\n    r'SELECT * FROM mytable WHERE id = 1; SELECT * FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class in Serverpod using YAML\nDESCRIPTION: A YAML example showing how to define a serializable Company class with various field types including a String, nullable DateTime, and a list of Employee objects. This file would be placed in the protocol directory and converted to Dart code using the serverpod generate command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Displaying Server Cluster Pricing in Markdown\nDESCRIPTION: This markdown table shows the approximate starting pricing for the primary required services of a minimal server cluster setup on Google Cloud Platform. It includes costs for Compute Engine Instance, Cloud Load Balancing, and Cloud SQL for PostgreSQL.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/01-deployment-strategy.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Service                  | Min cost |\n| :----------------------- | :------- |\n| Compute Engine Instance  |  $7 / mo |\n| Cloud Load Balancing     | $19 / mo |\n| Cloud SQL for PostgreSQL | $10 / mo |\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth_server dependency\nDESCRIPTION: This snippet shows how to add the `serverpod_auth_server` package as a dependency to your server's `pubspec.yaml` file.  It is a necessary step to incorporate the server-side functionality of the `serverpod_auth` module into your project. Replace `1.x.x` with the actual Serverpod version you are using.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Managed Table in YAML - YAML\nDESCRIPTION: This YAML snippet defines a table named 'example' without managed migrations. The 'managedMigration' flag set to false indicates manual management of this table's lifecycle, requiring explicit SQL code for any migrations related to it.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\n  table: example\n  managedMigration: false\n  fields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Full Example of Referential Actions in YAML\nDESCRIPTION: This example shows a complete YAML configuration for a Serverpod class, including a relation with specific `onUpdate` and `onDelete` actions.  When the parent `example` is updated, the `parentId` in the child table is set to null. When the parent is deleted, no action is taken.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\"\n```\n\n----------------------------------------\n\nTITLE: Updated Authentication Information Retrieval\nDESCRIPTION: Demonstrates the new way to retrieve authenticated user information and scopes\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal authenticated = await session.authenticated;\n\n//Read authenticated userId\nint? userId = authenticated?.userId;\n\n//Read scopes\nSet<Scopes>? scopes = authenticated?.scopes;\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: Terminal commands for creating and applying database migrations for module setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Activating Serverpod CLI in Dart\nDESCRIPTION: Installs and activates the Serverpod CLI tool locally from the cloned Serverpod repository. This action requires Dart and its package manager. Adjustments might be necessary for different Dart versions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/06-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Configuring session logs in YAML\nDESCRIPTION: This YAML snippet shows how to configure session log persistence and console output. `persistentEnabled: true` enables storing logs in the database, while `consoleEnabled: true` directs logs to the console.  Environment variables will override these settings if both are provided.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/09-logging.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"sessionLogs:\n  persistentEnabled: true   # Logs are stored in the database\n  consoleEnabled: true      # Logs are output to the console\"\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Classes in YAML\nDESCRIPTION: Example of referencing a serializable class from another module in YAML protocol files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Performing One-to-One Relation Operations in Serverpod Dart\nDESCRIPTION: Shows how to access fields of related objects in one-to-one relationships directly for filtering, using Serverpod with Dart. Assumes relational setup between models, typically fetching related object properties. The sample checks for street field content in related address entries.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.address.street.like('%road%')\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Class in YAML for Serverpod\nDESCRIPTION: This YAML snippet defines a `Company` class with fields for `name` (String), `foundedDate` (DateTime, nullable), and `employees` (List of `Employee` objects). This model is used by Serverpod to generate corresponding Dart code for both the server and the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\"\n```\n\n----------------------------------------\n\nTITLE: Finding or Creating User in Serverpod Authentication\nDESCRIPTION: This snippet demonstrates how to find an existing user by email or identifier, or create a new user if not found. It uses Serverpod's Users class methods for user management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nUserInfo? userInfo;\nuserInfo = await Users.findUserByEmail(session, email);\nuserInfo ??= await Users.findUserByIdentifier(session, userIdentifier);\nif (userInfo == null) {\n  userInfo = UserInfo(\n    userIdentifier: userIdentifier,\n    userName: name,\n    email: email,\n    blocked: false,\n    created: DateTime.now().toUtc(),\n    scopeNames: [],\n  );\n  userInfo = await Users.createUser(session, userInfo, _authMethod);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope-Based Authorization for Endpoints in Serverpod (Dart)\nDESCRIPTION: Shows how to restrict endpoint access based on user scopes by overriding the requiredScopes property, which implicitly sets requireLogin to true and only allows users with matching scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Test Services to Docker Compose\nDESCRIPTION: Configures PostgreSQL and Redis test services in docker-compose.yaml for isolated testing environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npostgres_test:\n  image: postgres:16.3\n  ports:\n    - '9090:5432'\n  environment:\n    POSTGRES_USER: postgres\n    POSTGRES_DB: <projectname>_test\n    POSTGRES_PASSWORD: \"<insert database test password>\"\n  volumes:\n    - <projectname>_test_data:/var/lib/postgresql/data\n  profiles:\n    - '' # Default profile\n    - test\nredis_test:\n  image: redis:6.2.6\n  ports:\n    - '9091:6379'\n  command: redis-server --requirepass \"<insert redis test password>\"\n  environment:\n    - REDIS_REPLICATION_MODE=master\n  profiles:\n    - '' # Default profile\n    - test\nvolumes:\n  # ...\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Adding Dev Dependencies in pubspec.yaml\nDESCRIPTION: This snippet updates the `pubspec.yaml` file to include the necessary dev dependencies for the testing framework and Serverpod test tools. It ensures that the correct versions are used, maintaining compatibility with the core Serverpod package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package\n  test: ^1.24.2\n```\n\n----------------------------------------\n\nTITLE: Uploading a File - Dart\nDESCRIPTION: This client-side code snippet demonstrates how to request an upload description, upload a file using a stream, and verify the upload. It encapsulates the whole file upload process on the client side, ensuring efficient memory usage during file transfers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/10-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level in Dart\nDESCRIPTION: This code snippet demonstrates how to configure the transaction isolation level using the `TransactionSettings` object. It inserts a company and an employee within a transaction with the isolation level set to `IsolationLevel.serializable`. The isolation level determines how the transaction interacts with concurrent database operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nawait session.db.transaction(\n  (transaction) async {\n    await Company.db.insertRow(session, company, transaction: transaction);\n    await Employee.db.insertRow(session, employee, transaction: transaction);\n  },\n  settings: TransactionSettings(isolationLevel: IsolationLevel.serializable),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Sorting with orderDescending in Serverpod (Dart)\nDESCRIPTION: This code snippet shows how to sort query results in descending order by setting the `orderDescending` parameter to true within the `find` method. It fetches all companies and sorts them by their name in descending order.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/08-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n  orderDescending: true,\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Course Model with Enrollment Relation in YAML\nDESCRIPTION: This YAML snippet defines the `Course` model with a `name` field and a relation to the `Enrollment` model through the `enrollments` field. The `relation` attribute specifies the name of the relation as `course_enrollments`, which will be used in the junction table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# course.yaml\nclass: Course\ntable: course\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=course_enrollments)\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class in YAML for Serverpod\nDESCRIPTION: This YAML snippet demonstrates how to define a serializable 'Company' class with various field types including String, nullable DateTime, and a List of Employee objects. It showcases the structure and syntax used in Serverpod's protocol directory for generating Dart code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/02-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Sending Message to Server Endpoint\nDESCRIPTION: This snippet demonstrates how to send a message to a server-side endpoint from the client. The sendStreamMessage method is called on the endpoint object, passing a SerializableModel object (MyMessage in this case) as the message. This allows the client to initiate real-time communication with the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/14-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n\"client.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\\n\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Server Cluster and Serverless Deployment Options in Markdown\nDESCRIPTION: This markdown table compares the pros and cons of server cluster and serverless deployment options for Serverpod. It highlights the advantages and disadvantages of each approach in terms of features, cost, and complexity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/01-deployment-strategy.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|      | Server cluster | Serverless |\n| :--- | :--------| :--------- |\n| Pros | All features are supported.  Great for real time communication.  Cost efficient at scale. | Minimal starting cost.  Easier configuration.  Minimal maintenance. |\n| Cons | Slightly higher starting cost.  More complex to set up. | Limited feature set.  The server cannot have a state. |\n```\n\n----------------------------------------\n\nTITLE: Client Session Management in Serverpod (Dart)\nDESCRIPTION: This Dart example refers to client-side functionality where an authentication response received from the server is used to register the user in the session manager. It assumes the existence of a singleton `SessionManager`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nvar serverResponse = await caller.myAuthentication.login(username, password);\n\nif (serverResponse.success) {\n    // Store the user info in the session manager.\n    SessionManager sessionManager = await SessionManager.instance;\n    await sessionManager.registerSignedInUser(\n        serverResponse.userInfo!,\n        serverResponse.keyId!,\n        serverResponse.key!,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Full docker-compose.yaml Configuration\nDESCRIPTION: This complete configuration of the `docker-compose.yaml` file includes development and testing services for PostgreSQL and Redis. It outlines the necessary database setup for both environments, ensuring isolation of development and test instances.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  # Development services\n  postgres:\n    image: postgres:16.3\n    ports:\n      - '8090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>\n      POSTGRES_PASSWORD: \"<insert redis development password>\"\n    volumes:\n      - <projectname>_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - dev\n  redis:\n    image: redis:6.2.6\n    ports:\n      - '8091:6379'\n    command: redis-server --requirepass \"<insert redis development password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - dev\n\n  # Test services\n  postgres_test:\n    image: postgres:16.3\n    ports:\n      - '9090:5432'\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_DB: <projectname>_test\n      POSTGRES_PASSWORD: \"<insert database test password>\"\n    volumes:\n      - <projectname>_test_data:/var/lib/postgresql/data\n    profiles:\n      - '' # Default profile\n      - test\n  redis_test:\n    image: redis:6.2.6\n    ports:\n      - '9091:6379'\n    command: redis-server --requirepass \"<insert redis test password>\"\n    environment:\n      - REDIS_REPLICATION_MODE=master\n    profiles:\n      - '' # Default profile\n      - test\n\nvolumes:\n  <projectname>_data:\n  <projectname>_test_data:\n```\n\n----------------------------------------\n\nTITLE: Initializing PixoramaEndpoint Class\nDESCRIPTION: Dart code defining the PixoramaEndpoint class with constants and pixel data initialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:typed_data';\n\nimport 'package:serverpod/serverpod.dart';\n\nclass PixoramaEndpoint extends Endpoint {\n  static const _imageWidth = 64;\n  static const _imageHeight = 64;\n  static const _numPixels = _imageWidth * _imageHeight;\n\n  static const _numColorsInPalette = 16;\n  static const _defaultPixelColor = 2;\n  \n  final _pixelData = Uint8List(_numPixels)\n    ..fillRange(\n      0,\n      _numPixels,\n      _defaultPixelColor,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Apple Sign-In Button in Flutter\nDESCRIPTION: Shows how to implement the Sign In with Apple button widget in a Flutter application using the serverpod_auth_apple_flutter package. The button triggers the native sign-in UI when pressed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_email_flutter/serverpod_auth_email_flutter.dart';\n\nSignInWithAppleButton(\n  caller: client.modules.auth,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Opening with User Object in Serverpod\nDESCRIPTION: Shows how to associate a custom user object with a streaming session when a client connects. This pattern is useful for maintaining stateful connections.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding a Field from Database Persistence in Serverpod\nDESCRIPTION: This snippet shows how to prevent a specific field from being persisted in the database by using the `!persist` keyword in the YAML configuration. By default, all fields are persisted unless explicitly excluded.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nclass: Company\ntable: company\nfields:\n  name: String, !persist \n```\n```\n\n----------------------------------------\n\nTITLE: Defining Exception with Default Values\nDESCRIPTION: YAML configuration showing how to define default values for exception fields. Demonstrates setting default string and integer values for exception properties.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/04-exceptions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String, default=\"An error occurred\"\n  errorCode: int, default=1001\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Dig Command for Name Servers\nDESCRIPTION: This snippet shows the expected output from the 'dig' command when querying name servers. It lists the Google domain name servers that should be associated with the domain after proper configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nns-cloud-b4.googledomains.com.\nns-cloud-b1.googledomains.com.\nns-cloud-b2.googledomains.com.\nns-cloud-b3.googledomains.com.\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Auth Module in Generator Config (YAML)\nDESCRIPTION: This snippet demonstrates how to add the serverpod_auth module to the config/generator.yaml file, assigning it a nickname for client-side referencing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/10-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Creating Repair Migration Command\nDESCRIPTION: Command to create a repair migration for synchronizing database schema with migration system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Defining Child Class with Inheritance\nDESCRIPTION: YAML definition for a child class that extends a parent class using the 'extends' keyword, inheriting all fields from the parent.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    int: age\n```\n\n----------------------------------------\n\nTITLE: Uploading File from Client-Side (Dart)\nDESCRIPTION: This snippet outlines the client-side process for uploading a file using a previously obtained upload description. It uses a FileUploader to send the file data as a stream and subsequently verifies the upload with the server.  It uploads using myStream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar uploadDescription = await client.myEndpoint.getUploadDescription('myfile');\nif (uploadDescription != null) {\n  var uploader = FileUploader(uploadDescription);\n  await uploader.upload(myStream);\n  var success = await client.myEndpoint.verifyUpload('myfile');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Database Migrations\nDESCRIPTION: These commands create a new database migration based on changes introduced by the module and then apply the migration to the database. This ensures that the database schema is updated to support the module's data structures. It should be run from the server's directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/10-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit One-to-Many Relationship with Foreign Key in Serverpod (YAML)\nDESCRIPTION: This example demonstrates an explicit definition of a one-to-many relationship using a foreign key field. The `employee.yaml` file contains a `companyId` field of type `int` with the `relation` keyword, establishing a link to the `Company` table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation\n```\n\n----------------------------------------\n\nTITLE: Verifying Domain Name Servers\nDESCRIPTION: This Bash command checks if the domain points to the correct Google Cloud DNS name servers. Dependencies include having the 'dig' command available in the command line interface used. Input is a domain name, and output is a list of Google Cloud DNS name servers associated with the domain.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndig +short NS examplepod.com\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation to Serializable Objects in YAML\nDESCRIPTION: This YAML snippet shows how to include documentation in a serializable class using three hashes (###) to annotate class and field descriptions. The example provides context on the fields of a 'Company' class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/02-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Endpoint in Dart\nDESCRIPTION: This snippet demonstrates how to create an endpoint in Serverpod by extending the Endpoint class. The hello method takes a Session and a String name as parameters, returning a greeting message. The method must return a typed Future.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Exception in a Serverpod Endpoint\nDESCRIPTION: This Dart code shows how to throw a custom exception (MyException) within a Serverpod endpoint. It demonstrates passing custom data through the exception, which can be caught and used on the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/04-exceptions.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Future<void> doThingy(Session session) {\n    // ... do stuff ...\n    if (failure) {\n      throw MyException(\n        message: 'Failed to do thingy',\n        errorType: MyEnum.thingyError,\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Class with Freezed in Dart for Serverpod\nDESCRIPTION: This Dart snippet shows how to implement a custom class using the Freezed package, which is supported by Serverpod. It includes the necessary imports and annotations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Notes in Flutter ListView\nDESCRIPTION: Implementation of the build method to display fetched notes in a ListView. Shows an empty container if notes aren't loaded yet, otherwise renders each note as a ListTile.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NotesEndpoint Class in Dart\nDESCRIPTION: Dart code defining the NotesEndpoint class with methods for creating, deleting, and retrieving notes from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/server.dart';\n\nimport '../generated/protocol.dart';\n\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    // By ordering by the id column, we always get the notes in the same order\n    // and not in the order they were updated.\n    return await Note.db.find(\n      session,\n      orderBy: (t) => t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.db.insertRow(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.db.deleteRow(session, note);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Self-Relation with Junction Table in YAML\nDESCRIPTION: This block defines a many-to-many self-referential relationship between 'Member' entities using a junction table 'Blocking'. The setup allows querying 'blocking' and 'blockedBy' relationships and enforces uniqueness in the block relations with a combined index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nclass: Member\ntable: member\nfields:\n  name: String\n  blocking: List<Blocking>?, relation(name=member_blocked_by_me)\n  blockedBy: List<Blocking>?, relation(name=member_blocking_me)\n```\n\nLANGUAGE: YAML\nCODE:\n```\nclass: Blocking\ntable: blocking\nfields:\n  blocked: Member?, relation(name=member_blocking_me, onDelete=Cascade)\n  blockedBy: Member?, relation(name=member_blocked_by_me, onDelete=Cascade)\nindexes:\n  blocking_blocked_unique_idx:\n    fields: blockedId, blockedById\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Raw SQL Updates using Simple Query Protocol in Dart\nDESCRIPTION: Shows how to use unsafeSimpleExecute to run multiple SQL statements that modify data. This method uses the simple query protocol and doesn't return results, only the number of affected rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeSimpleExecute(\n    r'DELETE FROM mytable WHERE id = 1; DELETE FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Catching a Serializable Exception in Dart\nDESCRIPTION: This Dart code shows how to catch the `MyException` thrown from the server in the client application. It demonstrates the standard `try...on...catch` block for handling exceptions, including a generic `catch` block for unexpected errors.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/04-exceptions.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n\"try {\n  client.example.doThingy();\n}\non MyException catch(e) {\n  print(e.message);\n}\ncatch(e) {\n  print('Something else went wrong.');\n}\"\n```\n\n----------------------------------------\n\nTITLE: JSON Deserialization Factory in Dart\nDESCRIPTION: This snippet shows the implementation of the fromJson() factory in Dart, which is required for custom serialization in Serverpod. It takes a Map<String, dynamic> representing the JSON serialization of the object as input. This factory is used to create a new instance of the class from the JSON data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n    factory ClassName.fromJson(\n    Map<String, dynamic> json,\n    ) {\n    return ClassName(\n        name: json['name'] as String,\n    );\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Bidirectional One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Shows how to set up a bidirectional one-to-one relationship where both sides of the relationship are explicitly specified. This configuration allows for easy navigation between related entities in both directions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int\n  address: Address?, relation(name=user_address, field=addressId)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  user: User?, relation(name=user_address)\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Using Dart Configuration Object\nDESCRIPTION: Example of configuring Serverpod programmatically in Dart by passing a ServerpodConfig instance to the Serverpod constructor. Shows configuration for API, insights, and web servers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/07-configuration.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nServerpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  config: ServerpodConfig(\n    apiServer: ServerConfig(\n      port: 8080,\n      publicHost: 'localhost',\n      publicPort: 8080,\n      publicScheme: 'http',\n    ),\n    insightsServer: ServerConfig(\n      port: 8081,\n      publicHost: 'localhost',\n      publicPort: 8081,\n      publicScheme: 'http',\n    ),\n    webServer: ServerConfig(\n      port: 8082,\n      publicHost: 'localhost',\n      publicPort: 8082,\n      publicScheme: 'http',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Serverpod Passwords and Secrets in YAML\nDESCRIPTION: Example of a passwords configuration file that contains secrets for different services across various run modes. Includes a shared section for secrets common to all modes and specific sections for development and production environments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/07-configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  myCustomSharedSecret: 'secret_key'\n\ndevelopment:\n  database: 'development_password'\n  redis: 'development_password'\n  serviceSecret: 'development_service_secret'\n\nproduction:\n  database: 'production_password'\n  redis: 'production_password'\n  serviceSecret: 'production_service_secret'\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Deletion in Dart for Serverpod Note App\nDESCRIPTION: This snippet defines a method to delete a note using the Serverpod client. It calls the deleteNote endpoint and refreshes the notes list. Error handling is included to manage connection failures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Deeply Nested Objects\nDESCRIPTION: This snippet demonstrates how to include deeply nested objects. It includes an employee, the related company, and the company's address using nested `include` calls. The snippet shows how to traverse multiple levels of relationships in a single query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: String Matching with Like Operation in Serverpod Dart\nDESCRIPTION: The snippet utilizes the like method for pattern matching against string columns using special characters like % and _ for partial match capabilities. The method takes a string pattern and fetches matching database entries. Unlike is also shown for performing negated matches.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.like('A%')\n);\n```\n\nLANGUAGE: Dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notLike('B%')\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Database Layer Access in Session Serverpod Dart\nDESCRIPTION: This snippet shows the migration from 'session.dbNext' to 'session.db' for database operations in Serverpod 2.0. Ensure the correct database field is accessed in server-side logic.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nsession.dbNext.find(...);\n\nbecomes\n\nsession.db.find(...);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project using Serverpod\nDESCRIPTION: This snippet demonstrates how to create a new Serverpod project named 'mypod'. The command initializes the project and sets up the necessary directory structure for both server and client sides, including packages for server code, client communication, and Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/03-creating-project.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query to Modify Data - Dart\nDESCRIPTION: This snippet illustrates how to execute a SQL query with the `unsafeExecute` method for modifying data (like DELETE). It returns the number of affected rows and uses parameter binding to avoid SQL injection weaknesses.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeExecute(\n  r'DELETE FROM mytable WHERE id = @id',\n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Freezed Custom Class Implementation in Dart\nDESCRIPTION: Example of implementing a custom serializable class using the Freezed package, which automatically generates required methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted Query Results Using toColumnMap\nDESCRIPTION: This SQL snippet demonstrates a query that retrieves data using a join, showing the transition from unsafeQueryMappedResults to the new method of formatting results with toColumnMap.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n \"company\".\"id\" AS \"company.id\",\n \"company\".\"name\" AS \"company.name\",\n \"company\".\"townId\" AS \"company.townId\",\n \"company_town_town\".\"id\" AS \"company_town_town.id\",\n \"company_town_town\".\"name\" AS \"company_town_town.name\",\n \"company_town_town\".\"mayorId\" AS \"company_town_town.mayorId\"\nFROM\n \"company\"\nLEFT JOIN\n \"town\" AS \"company_town_town\" ON \"company\".\"townId\" = \"company_town_town\".\"id\"\nORDER BY\n \"company\".\"name\"\n```\n\n----------------------------------------\n\nTITLE: Keytool Command for SHA-1 Key (Android)\nDESCRIPTION: This bash command is used to retrieve the SHA-1 key from your production keystore for Android apps. This key is required to configure the Android client credentials in the Google Cloud Console. Replace `/path/to/keystore` with the actual path to your keystore file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ keytool -list -v -keystore /path/to/keystore\n```\n\n----------------------------------------\n\nTITLE: Adding Message Listener in Dart using Serverpod\nDESCRIPTION: Shows how to add a message listener to a specific channel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/16-server-events.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nsession.messages.addListener('user_updates', (message) {\n  print('Received message: $message');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship with ID Field in YAML\nDESCRIPTION: This snippet shows how to define a one-to-one relationship using an 'id' field in the User and Address models by creating a foreign key and a unique index on the foreign key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# address.yaml\\nclass: Address\\ntable: address\\nfields:\\n  street: String\\n\\n# user.yaml\\nclass: User\\ntable: user\\nfields:\\n  addressId: int, relation(parent=address) // Foreign key field\\ndepends:\\nindexes:\\n  user_address_unique_idx:\\n    fields: addressId\\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Subsequent Requests for Cursor-based Pagination in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to make subsequent requests in cursor-based pagination. It uses the last ID from the previous page as a cursor to fetch the next set of records, ensuring efficient pagination for large datasets.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint cursor = lastCompanyIdFromPreviousPage; // This is typically sent by the client\n\nvar companies = await Company.db.find(\nsession,\nwhere: Company.t.id > cursor,\norderBy: (t) => t.id,\nlimit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Inserting Several Rows in Serverpod\nDESCRIPTION: This snippet shows how to insert multiple rows in a batch operation using the `insert` method, which is atomic. The operation will not create any entries if any single entry fails, ensuring data integrity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar rows = [Company(name: 'Serverpod'), Company(name: 'Google')];\nvar companies = await Company.db.insert(session, rows);\n```\n\n----------------------------------------\n\nTITLE: Correct Serverpod Endpoint Calling in Dart\nDESCRIPTION: Demonstrates the proper way to call serverpod endpoints using test tools, ensuring that lifecycle events and validations are executed as in production.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  withServerpod('Given Example endpoint', (sessionBuilder, endpoints) {\n    var session = sessionBuilder.build();\n\n    test('when calling `hello` then should return greeting', () async {\n      // ✅ Use the provided `endpoints` to call the endpoint that should be tested.\n      final greeting =\n          await endpoints.example.hello(session, 'Michael');\n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Old pubspec.yaml Dart SDK Configuration\nDESCRIPTION: This code block shows the old Dart SDK version configuration in `pubspec.yaml` files before upgrading to Serverpod 1.2. It specifies a version constraint that allows Dart versions from 2.19.0 up to, but not including, 4.0.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n...\\nenvironment:\\n  sdk: '>=2.19.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Invoking Future Calls at a Specific Time in Dart\nDESCRIPTION: This snippet demonstrates how to invoke a future call at a specific time by calling the futureCallAtTime method of the serverpod instance. It requires the future call name, the data object, and a DateTime object representing the desired execution time.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/14-scheduling.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallAtTime(\n  'exampleFutureCall',\n  data,\n  DateTime(2025, 1, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Dart\nDESCRIPTION: A helper method to create new notes by calling the server endpoint and refreshing the notes list. It includes error handling to manage connection failures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Dart\nDESCRIPTION: This Dart snippet demonstrates how to execute raw SQL queries against the database in Serverpod. It uses the `query` method on the `session.db` object and passes the SQL query string as a parameter.  The result is returned as a `List<List<dynamic>>` containing the rows and columns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n\"var result = await session.db.query('SELECT * FROM mytable WHERE ...');\"\n```\n\n----------------------------------------\n\nTITLE: Setting Field Scope in YAML\nDESCRIPTION: This YAML snippet configures the visibility of individual fields 'hiddenSecretKey' and 'publicKey' in the 'SelectivelyHiddenClass'. 'hiddenSecretKey' is limited to the server side using 'scope=serverOnly', while 'publicKey' is available to both the client and server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: SelectivelyHiddenClass\nfields:\n  hiddenSecretKey: String, scope=serverOnly\n  publicKey: String\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Scheme in iOS info.plist\nDESCRIPTION: XML configuration for iOS info.plist to register a URL scheme using the reversed client ID. This enables app navigation after the Google Sign-In authentication flow.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Self-Relation in Serverpod YAML Model\nDESCRIPTION: A YAML model definition for a Cat class with a self-referential one-to-many relationship, representing the relationship between a mother cat and her kittens. Each cat can have at most one mother but can have multiple kittens.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Cat\ntable: cat\nfields:\n  name: String\n  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)\n  kittens: List<Cat>?, relation(name=cat_kittens)\n```\n\n----------------------------------------\n\nTITLE: Extracting Scopes from Token - Dart\nDESCRIPTION: This snippet demonstrates how to extract scopes from a JWT token and convert them into Scope objects. It highlights the requirement of converting the String format stored in the token into a usable format for authentication purposes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nList<String> scopes = extractScopes(token);\nSet<Scope> userScopes = scopes.map((scope) => Scope(scope)).toSet();\n```\n\n----------------------------------------\n\nTITLE: Defining a serializable object with YAML\nDESCRIPTION: This YAML code defines a serializable object named 'Note' with a single field 'text' of type String. The `class` keyword specifies the class name, and the `fields` keyword defines the fields and their types.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Model Syntax Updates in Serverpod\nDESCRIPTION: This snippet demonstrates the changes introduced in Serverpod 1.2 for defining models, substituting deprecated keywords with new ones. Using the updated syntax aligns models with the new Serverpod features while retaining backward compatibility.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, api\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, !persist\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, database\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, scope=serverOnly\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, parent=example\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, relation(parent=example)\n```\n\n----------------------------------------\n\nTITLE: Test Environment Configuration\nDESCRIPTION: Configuration for test environment including API, Insights, and web server settings with database and Redis configurations\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ninsightsServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\nwebServer:\n  port: 0\n  publicHost: localhost\n  publicPort: 0\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 9090\n  name: <projectname>_test\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 9091\n```\n\n----------------------------------------\n\nTITLE: Deleting Notes in Serverpod Flutter App\nDESCRIPTION: A method to delete a note by calling the server endpoint and refreshing the notes list. Handles potential connection failures and updates the local state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Self-Relation for Member Blocking System in YAML\nDESCRIPTION: Defines Member and Blocking classes to create a member blocking system. Uses a junction table to track blocking relationships between members with unique constraints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Member\ntable: member\nfields:\n  name: String\n  blocking: List<Blocking>?, relation(name=member_blocked_by_me)\n  blockedBy: List<Blocking>?, relation(name=member_blocking_me)\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Blocking\ntable: blocking\nfields:\n  blocked: Member?, relation(name=member_blocking_me, onDelete=Cascade)\n  blockedBy: Member?, relation(name=member_blocked_by_me, onDelete=Cascade)\nindexes:\n  blocking_blocked_unique_idx:\n    fields: blockedId, blockedById\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod using YAML\nDESCRIPTION: Example YAML configuration file for Serverpod, specifying settings for API server, insights server, web server, database, Redis, and session logs.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/07-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost\n  publicPort: 8080\n  publicScheme: http\n\ninsightsServer:\n  port: 8081\n  publicHost: localhost\n  publicPort: 8081\n  publicScheme: http\n\nwebServer:\n  port: 8082\n  publicHost: localhost\n  publicPort: 8082\n  publicScheme: http\n\ndatabase:\n  host: localhost\n  port: 8090\n  name: database_name\n  user: postgres\n\nredis:\n  enabled: false\n  host: localhost\n  port: 8091\n\nmaxRequestSize: 524288\n\nsessionLogs:\n  persistentEnabled: true\n  consoleEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform for Serverpod Deployment - Bash\nDESCRIPTION: This snippet demonstrates how to set an environment variable for the Postgres database password and initialize Terraform for the Serverpod deployment. The password is read from a configuration file to ensure security.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/06-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: Commands to navigate to the Flutter app directory and run the app in Chrome.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/04-get-started-with-mini.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Run Mode Configuration in Dart\nDESCRIPTION: Example of overriding the default run mode in Serverpod tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given Products endpoint',\n  (sessionBuilder, endpoints) {\n    /* test code */\n  },\n  runMode: ServerpodRunMode.development,\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Junction Table for Many-to-Many Relationship in Serverpod\nDESCRIPTION: YAML definition for an Enrollment model that serves as a junction table between Student and Course. It includes relations to both entities and a unique index to prevent duplicate enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# enrollment.yaml\nclass: Enrollment\ntable: enrollment\nfields:\n  student: Student?, relation(name=student_enrollments)\n  course: Course?, relation(name=course_enrollments)\nindexes:\n  enrollment_index_idx:\n    fields: studentId, courseId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth module to config/generator.yaml\nDESCRIPTION: This code snippet adds the `serverpod_auth` module to the `config/generator.yaml` file. This tells Serverpod to include the authentication module when generating client and server code. The `nickname` property defines the client's reference name for the module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"modules:\\n  serverpod_auth:\\n    nickname: auth\"\n```\n\n----------------------------------------\n\nTITLE: Basic One-to-One Relationship with ID Field in Serverpod YAML\nDESCRIPTION: Demonstrates the basic implementation of a one-to-one relationship between User and Address models using an ID field. The relationship is enforced through a foreign key with a unique index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int, relation(parent=address) // Foreign key field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple SQL Modification Queries Using Simple Query Protocol in Dart\nDESCRIPTION: Shows how to use unsafeSimpleExecute method to run multiple SQL modification queries without returning results. This method uses the simple query protocol and should be used with extreme caution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeSimpleExecute(\n    r'DELETE FROM mytable WHERE id = 1; DELETE FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase in Flutter App\nDESCRIPTION: Code to initialize Firebase in your Flutter app's main.dart file and configure the Firebase UI Auth providers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n\n...\nvoid main() async {\n  ...\n  await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n\n  firebase.FirebaseUIAuth.configureProviders([\n    firebase.PhoneAuthProvider(),\n  ]);\n\n  ...\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving RDS Database URL using AWS CLI\nDESCRIPTION: This command uses the AWS CLI to fetch the endpoint address of an RDS database instance. It's used to configure the database connection in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws rds describe-db-instances --db-instance-identifier ${YOUR_DB_INSTANCE_ID} | jq \".DBInstances.[0].Endpoint.Address\" -r\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Server Code\nDESCRIPTION: Command line instructions for regenerating Serverpod managed classes after making changes to endpoints or models. Must be executed from within the server project directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/05-server-overview.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit One-to-many Relationship with Object Relation in Serverpod YAML\nDESCRIPTION: This snippet shows how to explicitly define a one-to-many relationship using an object relation in Serverpod's YAML configuration. The Employee model includes a Company field with the 'relation' keyword to establish the relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  company: Company?, relation\n```\n\n----------------------------------------\n\nTITLE: Logging Messages with Serverpod in Dart\nDESCRIPTION: Demonstrates how to log a simple message during the execution of a session in a Serverpod application using Dart. The log method of the session object is used, which automatically writes messages to the database once a session is completed. No additional dependencies are required beyond the Serverpod framework.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/07-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Running Unit and Integration Tests Separately in Dart\nDESCRIPTION: This snippet shows how to run unit and integration tests separately using the 'integration' tag as a filter. It demonstrates commands for running all tests, only integration tests, and only unit tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# All tests (unit and integration)\ndart test\n\n# Only integration tests: add --tags (-t) flag\ndart test -t integration\n\n# Only unit tests: add --exclude-tags (-x) flag\ndart test -x integration\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Serializable Class with Freezed in Dart\nDESCRIPTION: Example of a custom serializable class implementation using the Freezed package, which is supported by Serverpod for easier immutable class creation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\nimport 'package:serverpod_serialization/serverpod_serialization.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n    SerializationManager serializationManager,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: AuthKey Table Definition in YAML\nDESCRIPTION: YAML configuration for the AuthKey table definition, including fields for user authentication and access management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Provides a method of access for a user to authenticate with the server.\nclass: AuthKey\ntable: serverpod_auth_key\nfields:\n  ### The id of the user to provide access to.\n  userId: int\n\n  ### The hashed version of the key.\n  hash: String\n\n  ### The key sent to the server to authenticate.\n  key: String?, !persist\n\n  ### The scopes this key provides access to.\n  scopeNames: List<String>\n\n  ### The method of signing in this key was generated through. This can be email\n  ### or different social logins.\n  method: String\nindexes:\n  serverpod_auth_key_userId_idx:\n    fields: userId\n```\n\n----------------------------------------\n\nTITLE: Limiting Class Visibility in YAML\nDESCRIPTION: This YAML snippet defines a class 'MyPrivateClass' with restricted visibility to the server only by setting the 'serverOnly' property to true. It ensures that sensitive fields, like 'hiddenSecretKey', are not exposed to the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\n```\n\n----------------------------------------\n\nTITLE: Applying a database migration\nDESCRIPTION: This command applies the database migrations. It starts the server in maintenance mode and applies the migrations upon startup. The `--role maintenance` flag ensures that the server shuts down after the migrations are applied.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth_server dependency in pubspec.yaml\nDESCRIPTION: This code snippet adds the `serverpod_auth_server` dependency to the `pubspec.yaml` file of your Serverpod server project. This dependency is required for the server-side authentication logic. The version number should match the version of `serverpod` being used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"dependencies:\\n  serverpod_auth_server: ^0.9.5\"\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship with Id Field in YAML\nDESCRIPTION: Defines a one-to-one relationship between `User` and `Address` using an `addressId` field in the `User` model as a foreign key. A unique index is created on the `addressId` field to ensure the one-to-one constraint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int, relation(parent=address) // Foreign key field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Serverpod Endpoint in Dart\nDESCRIPTION: Demonstrates how to create a basic endpoint class that extends Endpoint with a simple hello method. The endpoint must return a typed Future and accept a Session object as its first parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging a message in Dart\nDESCRIPTION: This snippet demonstrates how to log a simple message using the `session.log` method in Dart. This method writes the message to the database log, associating it with the current session. It provides a basic way to track the execution flow and important events within a session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/09-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n\"session.log('This is working well');\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Row in Serverpod\nDESCRIPTION: This snippet illustrates how to update a single row using the `updateRow` method. It requires that the object to be updated has its `id` set, and it will return the updated object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \ncompany.name = 'New name';\nvar updatedCompany = await Company.db.updateRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pixel Update Method\nDESCRIPTION: Server method to handle pixel updates and broadcast changes to connected clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> setPixel(\n  Session session, {\n    required int colorIndex,\n    required int pixelIndex,\n  }) async {\n    if (colorIndex < 0 || colorIndex >= _numColorsInPalette) {\n      throw FormatException('colorIndex is out of range: $colorIndex');\n    }\n    if (pixelIndex < 0 || pixelIndex >= _numPixels) {\n      throw FormatException('pixelIndex is out of range: $pixelIndex');\n    }\n\n    _pixelData[pixelIndex] = colorIndex;\n\n    session.messages.postMessage(\n      _channelPixelAdded,\n      ImageUpdate(\n        pixelIndex: pixelIndex,\n        colorIndex: colorIndex,\n      ),\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: AuthKey Table Definition in YAML\nDESCRIPTION: YAML configuration for the AuthKey table structure, defining fields and indexes for authentication management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Provides a method of access for a user to authenticate with the server.\nclass: AuthKey\ntable: serverpod_auth_key\nfields:\n  ### The id of the user to provide access to.\n  userId: int\n\n  ### The hashed version of the key.\n  hash: String\n\n  ### The key sent to the server to authenticate.\n  key: String?, !persist\n\n  ### The scopes this key provides access to.\n  scopeNames: List<String>\n\n  ### The method of signing in this key was generated through. This can be email\n  ### or different social logins.\n  method: String\nindexes:\n  serverpod_auth_key_userId_idx:\n    fields: userId\n```\n\n----------------------------------------\n\nTITLE: Updating Pubspec Files with Util Script in Bash\nDESCRIPTION: Generates updated `pubspec.yaml` files by running a utility script located in the Serverpod project's root directory. This process involves making modifications in the `templates/` directory first as editing the pubspec files directly is discouraged.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/06-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Adding host entries to /etc/hosts\nDESCRIPTION: This snippet demonstrates how to add entries to the `/etc/hosts` file to resolve hostnames for the test server, PostgreSQL, and Redis instances. This is required for the local testing environment to function correctly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/08-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"127.0.0.1 serverpod_test_server\n127.0.0.1 postgres\n127.0.0.1 redis\"\n```\n\n----------------------------------------\n\nTITLE: Running pub get and serverpod generate\nDESCRIPTION: These commands finalize the installation of the authentication module. `flutter pub get` fetches the necessary dependencies, and `serverpod generate` generates the client and server code, including the authentication module. These commands should be run from the server's directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n\"flutter pub get\\nserverpod generate\"\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Update with Named Parameters in Dart\nDESCRIPTION: Shows how to use the unsafeExecute method to run a SQL statement that modifies data (e.g., DELETE) with named parameters. This method returns the number of affected rows.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nint result = await session.db.unsafeExecute(\n  r'DELETE FROM mytable WHERE id = @id',\n  parameters: QueryParameters.named({'id': 1}),\n);\n```\n\n----------------------------------------\n\nTITLE: Flutter Run Command with Specific Port (Web)\nDESCRIPTION: This bash command forces Flutter to run on a specific port for web development. This is useful for configuring the authorized JavaScript origins and redirect URIs in the Google Cloud Console. Replace `49660` with the desired port number.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ flutter run -d chrome --web-port=49660\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Listener in Stream Session\nDESCRIPTION: Example of subscribing to a message channel when a stream is opened. Messages are forwarded to specific users based on their user ID through Redis for cluster support.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Authentication Keys in Serverpod (Dart)\nDESCRIPTION: This example shows how to revoke specific authentication keys in Serverpod using the `revokeAuthKey` method from the `UserAuthentication` class. It details fetching session-specific authentication information and managing authentication state changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_4\n\nLANGUAGE: Dart\nCODE:\n```\nawait UserAuthentication.revokeAuthKey(\n  session,\n  authKeyId: 'auth-key-id-here',\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Health Check Handler - Dart\nDESCRIPTION: This snippet demonstrates how to register the custom health check handler with a Serverpod instance. The healthCheckHandler parameter allows the application to assign a specific function that will perform health checks at regular intervals.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/13-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Old vs New Model Syntax - Server Fields\nDESCRIPTION: Examples showing the old and new syntax for server-only fields in model definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, database\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, scope=serverOnly\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple SQL Statements with Simple Query Protocol\nDESCRIPTION: Demonstrates using unsafeSimpleQuery for executing multiple SQL statements in a single query. Note that this method doesn't support parameter binding and should be used with caution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/10-raw-access.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nDatabaseResult result = await session.db.unsafeSimpleQuery(\n    r'SELECT * FROM mytable WHERE id = 1; SELECT * FROM othertable;'\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Independent One-to-One Relationships in Serverpod YAML\nDESCRIPTION: Demonstrates how to define multiple independent one-to-one relationships between two entities. This configuration allows for more complex data structures and relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  friendsAddress: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: friendsAddressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  resident: User?, relation\nindexes:\n  address_user_unique_idx:\n    fields: residentId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Checking DNS Configuration with dig Command\nDESCRIPTION: Command to verify that a domain is correctly pointing to Google's domain name servers by querying the NS records. This helps confirm the domain's DNS configuration is properly set up before deploying your Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dig +short NS examplepod.com\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations\nDESCRIPTION: Command to apply pending migrations during server startup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod with Dart\nDESCRIPTION: Example of configuring Serverpod using a Dart configuration object, specifying settings for API server, insights server, and web server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/07-configuration.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nServerpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  config: ServerpodConfig(\n    apiServer: ServerConfig(\n      port: 8080,\n      publicHost: 'localhost',\n      publicPort: 8080,\n      publicScheme: 'http',\n    ),\n    insightsServer: ServerConfig(\n      port: 8081,\n      publicHost: 'localhost',\n      publicPort: 8081,\n      publicScheme: 'http',\n    ),\n    webServer: ServerConfig(\n      port: 8082,\n      publicHost: 'localhost',\n      publicPort: 8082,\n      publicScheme: 'http',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Upload Description in Serverpod (Dart)\nDESCRIPTION: Server-side code to create an upload description, granting access for file uploads. This function takes a session and file path as parameters and returns a Future with the upload description string.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Object to Database Table in YAML\nDESCRIPTION: This YAML snippet defines a mapping from the `Company` class to a database table called `company`. Specify fields to define the columns in the table. It enables the use of ORM features for the `Company` class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/01-get-started/08-working-with-database.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Module to Client Dependencies in YAML\nDESCRIPTION: This code shows how to add the necessary client-side dependencies for the Serverpod Auth module to the app's pubspec.yaml file. It includes shared Flutter package and specific authentication providers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^0.9.x\n  serverpod_auth_google_flutter: ^0.9.x\n  serverpod_auth_apple_flutter: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Forcing Repair Migration Creation - Bash\nDESCRIPTION: This command forces the creation of a repair migration even when the system detects no changes or risks of data loss. The '--force' flag allows developers to proceed regardless of the usual safeguards.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --force\n```\n\n----------------------------------------\n\nTITLE: Defining a Future Call Class in Dart for Serverpod\nDESCRIPTION: This snippet shows how to create a future call by extending the FutureCall class and overriding the invoke method. The method takes a Session object and an optional SerializableModel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/14-scheduling.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleFutureCall extends FutureCall<MyModelEntity> {\n  @override\n  Future<void> invoke(Session session, MyModelEntity? object) async {\n    // Do something interesting in the future here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Authorization with Scopes in Dart\nDESCRIPTION: This class sets 'requiredScopes' to restrict access to the endpoint based on user scopes. It explicitly requires login in tandem with scope settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {Scope.admin};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Complex SQL Query for Join Operation\nDESCRIPTION: An example of a complex SQL query performing a join operation, used to illustrate changes in query result formatting.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n \"company\".\"id\" AS \"company.id\",\n \"company\".\"name\" AS \"company.name\",\n \"company\".\"townId\" AS \"company.townId\",\n \"company_town_town\".\"id\" AS \"company_town_town.id\",\n \"company_town_town\".\"name\" AS \"company_town_town.name\",\n \"company_town_town\".\"mayorId\" AS \"company_town_town.mayorId\"\nFROM\n \"company\"\nLEFT JOIN\n \"town\" AS \"company_town_town\" ON \"company\".\"townId\" = \"company_town_town\".\"id\"\nORDER BY\n \"company\".\"name\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Serverpod Endpoint in Dart\nDESCRIPTION: This snippet demonstrates how to create a basic endpoint in Serverpod. The endpoint extends the Endpoint class and defines a method that returns a Future<String>. The method takes a Session object and a String parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Student Table in YAML\nDESCRIPTION: Defines the Student model structure, linking it to the Enrollment table similarly to the course definition. It shares the prerequisites of using the Serverpod framework for data management and relationship configuration in databases.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# student.yaml\nclass: Student\ntable: student\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=student_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Self-Relation for Cat Family Tree in YAML\nDESCRIPTION: Defines a Cat class with self-referential relationships to model mother-kitten relationships. Each cat can have one mother and multiple kittens.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/04-self-relations.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Cat\ntable: cat\nfields:\n  name: String\n  mother: Cat?, relation(name=cat_kittens, optional, onDelete=SetNull)\n  kittens: List<Cat>?, relation(name=cat_kittens)\n```\n\n----------------------------------------\n\nTITLE: Defining Bidirectional One-to-many Relationships with Foreign Key in Serverpod\nDESCRIPTION: Example of defining a bidirectional one-to-many relationship between Company and Employee using a list relation on the Company side and a foreign key on the Employee side, connected with a named relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation(name=company_employees)\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation(name=company_employees, parent=company)\n```\n\n----------------------------------------\n\nTITLE: Defining a Note Class - YAML\nDESCRIPTION: This YAML snippet defines the structure of a 'Note' object that holds text notes. It specifies the class name and its fields to be generated by the code generator.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\nfields:\n  ### The contents of the note.\n  text: String\n\n```\n\n----------------------------------------\n\nTITLE: Basic Transaction Operation in Serverpod\nDESCRIPTION: Demonstrates how to perform a basic database transaction that inserts both a company and employee record atomically. The transaction will rollback if any operation fails, ensuring data consistency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await Employee.db.insertRow(session, employee, transaction: transaction);\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring State Variables for Notes Management\nDESCRIPTION: Adding state variables to the MyHomePageState class to store the fetched notes and any connection exceptions that might occur during API calls.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_client/notes_client.dart';\n...\n\nclass MyHomePageState extends State<MyHomePage> {\n\n  List<Note>? _notes;\n  Exception? _connectionException;\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Including Nested Objects in Relational Lists in Serverpod Query (Dart)\nDESCRIPTION: Demonstrates how to include nested objects within a relational list in a Serverpod query. This example retrieves a company with all related employees, each including their address.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        address: Address.include(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to ListTile in Flutter\nDESCRIPTION: Implementation of a delete button in a ListTile widget that triggers note deletion. Updates local state immediately for responsive UI and then performs server deletion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Initializing PixoramaEndpoint Class\nDESCRIPTION: Dart code defining the PixoramaEndpoint class with constants for image dimensions and pixel data initialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:typed_data';\n\nimport 'package:serverpod/serverpod.dart';\n\nclass PixoramaEndpoint extends Endpoint {\n  static const _imageWidth = 64;\n  static const _imageHeight = 64;\n  static const _numPixels = _imageWidth * _imageHeight;\n\n  static const _numColorsInPalette = 16;\n  static const _defaultPixelColor = 2;\n\n  final _pixelData = Uint8List(_numPixels)\n    ..fillRange(\n      0,\n      _numPixels,\n      _defaultPixelColor,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage in Serverpod (Dart)\nDESCRIPTION: Server-side code to add S3 cloud storage configuration to a Serverpod instance. It specifies the storage ID, region, bucket name, and public host for the S3 storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Registering Future Call with Identifier in Dart\nDESCRIPTION: This snippet demonstrates how to register a future call with an identifier, which allows the call to be referenced later. It shows how to cancel all future calls associated with the same identifier.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/14-scheduling.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n  identifier: 'an-identifying-string',\n);\n\nawait session.serverpod.cancelFutureCall('an-identifying-string');\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for One-to-One Relationship\nDESCRIPTION: Shows the SQL code that Serverpod generates behind the scenes to implement a one-to-one relationship with proper constraints and indexes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"address\" (\n    \"id\" serial PRIMARY KEY,\n    \"street\" text NOT NULL\n);\n\nCREATE TABLE \"user\" (\n    \"id\" serial PRIMARY KEY,\n    \"addressId\" integer NOT NULL\n);\n\n\nCREATE UNIQUE INDEX \"user_address_unique_idx\" ON \"user\" USING btree (\"addressId\");\n\nALTER TABLE ONLY \"user\"\n    ADD CONSTRAINT \"user_fk_0\"\n    FOREIGN KEY(\"addressId\")\n    REFERENCES \"address\"(\"id\")\n    ON DELETE CASCADE\n    ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Adding Delete Button to Notes ListTile in Flutter\nDESCRIPTION: Implementation of a delete button in a ListTile that updates the UI state immediately and then calls the _deleteNote method to persist the change on the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nListTile(\n  ...\n  trailing: IconButton(\n    icon: const Icon(Icons.delete),\n    onPressed: () {\n      var note = _notes![index];\n\n      setState(() {\n        _notes!.remove(note);\n      });\n\n      _deleteNote(note);\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Sorting with Serverpod's orderByList\nDESCRIPTION: Demonstrates how to sort by multiple columns using orderByList, where companies are first sorted by name in descending order and then by id in ascending order.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderByList: (t) => [\n    Order(column: t.name, orderDescending: true), \n    Order(column: t.id),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Serverpod Project\nDESCRIPTION: This command creates a new Serverpod project with the specified name. It sets up the basic directory structure and generates the initial server, client, and Flutter app packages. Requires Docker to be running and Serverpod CLI installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"serverpod create mypod\"\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit One-to-many Relationships in Serverpod YAML Models\nDESCRIPTION: Example of defining a one-to-many relationship implicitly between Company and Employee models using the List type with relation keyword. The foreign key is automatically integrated into the Employee table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with an Expression in Dart\nDESCRIPTION: This Dart snippet demonstrates how to find multiple rows in a database table using an expression. It uses the `find` method on the `Company` class, passing in the table object, a `where` parameter to specify the search criteria, and a `limit` to restrict the number of returned rows. The `where` parameter is a typed expression builder.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n\"var companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\"\n```\n\n----------------------------------------\n\nTITLE: Regenerating Serverpod Code\nDESCRIPTION: Command to regenerate client code after modifying endpoints or models in the server package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Updating Serverpod CLI to Latest Version\nDESCRIPTION: This snippet upgrades the Serverpod command line interface to the latest version using Dart's package manager. It ensures that developers can access the latest features and improvements available in Serverpod CLI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nserverpod version\n```\n\n----------------------------------------\n\nTITLE: Revoking Auth Key for Current Session in Serverpod\nDESCRIPTION: This code demonstrates how to revoke the authentication key for the current session. It fetches the authentication information and uses the authId to revoke the key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar authId = (await session.authenticated)?.authId;\n\nif (authId != null) {\n  await UserAuthentication.revokeAuthKey(\n    session,\n    authKeyId: authId,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Serverpod\nDESCRIPTION: Demonstrates how to log a simple message using the session object's log method. The message will be written to the database when the session completes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration in Bash\nDESCRIPTION: These commands initialize Terraform and apply the infrastructure configuration. They are used to deploy the AWS resources required for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Checking User Sign-in Status with Serverpod auth\nDESCRIPTION: This Dart snippet shows how to retrieve the signed-in user's ID using the Serverpod framework. It checks if the user is signed-in by comparing the `userId` to null. Requires a `Session` object and access to `auth` property for execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var userId = await session.auth.authenticatedUserId;\n  var isSignedIn = userId != null;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Starting a Serverpod Server\nDESCRIPTION: Command to manually start the Serverpod server after setting up dependencies. This directly executes the main Dart file for the server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/index.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Sorting Relational Lists in Serverpod\nDESCRIPTION: This code snippet shows sorting the results of a query based on a specific field using Serverpod's 'orderBy'. It sorts employees by name with inputs like session and employee ID and outputs a sorted employee list.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      orderBy: (t) => t.name,\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Referential Actions in Serverpod\nDESCRIPTION: Demonstrates a complete class definition with custom referential actions. In this example, if the parent is updated, parentId will be set to null (SetNull), and if the parent is deleted, no action will be taken (NoAction).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  parentId: int?, relation(parent=example, onUpdate=SetNull, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Running All Tests using Serverpod CLI - Dart\nDESCRIPTION: This command runs all the continuous integration tests automatically when a pull request is sent to the main branch of the Serverpod repository. For local testing, the command should be executed from the root Serverpod directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/07-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Defining Enrollment Junction Table in YAML\nDESCRIPTION: Configuration for the Enrollment junction table that connects Student and Course tables. Includes relations to both tables and a unique index to prevent duplicate enrollments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Enrollment\ntable: enrollment\nfields:\n  student: Student?, relation(name=student_enrollments)\n  course: Course?, relation(name=course_enrollments)\nindexes:\n  enrollment_index_idx:\n    fields: studentId, courseId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod LSP Server Using Bash\nDESCRIPTION: This snippet provides the command to launch the Serverpod Language Server Protocol server. It is intended for developers needing to run diagnostics on YAML protocol files, ensuring they can identify and resolve issues effectively.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/09-tools/02-lsp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\\$ serverpod language-server\n```\n\n----------------------------------------\n\nTITLE: Finding User by Name in Serverpod\nDESCRIPTION: This snippet shows how to query the database directly to find a user by their full name using the `UserInfo` model in Serverpod. This provides an example of implementing custom user identification methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n```dart\nvar userInfo = await UserInfo.db.findFirstRow(\n  session,\n  where: (t) => t.fullName.equals(name),\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Expressions for Queries in Serverpod\nDESCRIPTION: These Dart snippets show various ways to create expressions for use in database queries in Serverpod, demonstrating comparison operators and logical operators.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// The name column of the Company table equals 'My company')\nt.name.equals('My company')\n\n// Companies founded at or after 2020\nt.foundedDate >= DateTime.utc(2020)\n\n// Companies with number of employees between 10 and 100\n(t.numEmployees > 10) & (t.numEmployees <= 100)\n\n// Companies that has the founded date set\nt.foundedDate.notEquals(null)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget for Serverpod Web Server in Dart\nDESCRIPTION: Illustrates the creation of a custom Widget by extending the Widget class. This example sets up a template with a title parameter, demonstrating how to pass values to the Mustache template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/10-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Exception in YAML\nDESCRIPTION: Creates a serializable exception called MyException with message and errorType fields. Exceptions are defined in YAML files using the 'exception' keyword instead of 'class', following the same pattern as serializable models.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Implementing fromJson() Factory Constructor for Custom Serialization in Dart\nDESCRIPTION: This snippet demonstrates how to implement the fromJson() factory constructor, which takes a JSON serialization as parameters and creates an object instance. This is the second required method for custom serialization in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/03-serialization.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\nMap<String, dynamic> json,\n) {\nreturn ClassName(\n    name: json['name'] as String,\n);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dart Commands for Module Addition\nDESCRIPTION: This bash snippet outlines the commands needed to fetch dependencies and generate protocols after adding a module to your project. It must be executed in the server's directory to ensure proper integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"dart pub get\\nserverpod generate\"\n```\n\n----------------------------------------\n\nTITLE: Advanced One-to-Many Relation with Company and Employees\nDESCRIPTION: Shows a more complex example of module relations using a one-to-many relationship between Users and Companies, utilizing a named relation and explicit indexing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: User\ntable: user\nfields:\n  userInfo: module:auth:UserInfo?, relation\n  age: int\n  company: Company?, relation(name=company_employee)\nindexes:\n  user_info_id_unique_idx:\n    fields: userInfoId\n    unique: true\n  company_unique_idx:\n    fields: companyId\n    unique: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<User>?, relation(name=company_employee)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Dependencies to pubspec.yaml\nDESCRIPTION: Required dependencies for using the test tools with Serverpod. Adds the serverpod_test package (which should match the serverpod version) and the standard Dart test package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package\n  test: ^1.24.2\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Endpoint\nDESCRIPTION: Example of a Dart endpoint implementation that extends Endpoint class and includes a method to check company legitimacy\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/02-get-started-with-mini.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass CompanyEndpoint extends Endpoint {\n  Future<bool> isLegit(Session session, Company company) async {\n    // Check if the company has the foundedDate set and that it\n    // has been around for more than one year.\n\n    if (company.foundedDate == null) {\n      return false;\n    }\n\n    var oneYearAgo = DateTime.now().subract(Duration(days: 365));\n    return company.foundedDate!.isBefore(oneYearAgo);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Cleanup Example in Dart\nDESCRIPTION: Demonstrates manual database cleanup when using disabled rollback configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given ProductsEndpoint when calling concurrentTransactionCalls',\n  (sessionBuilder, endpoints) {\n    tearDownAll(() async {\n      var session = sessionBuilder.build();\n      // If something was saved to the database in the endpoint,\n      // for example a `Product`, then it has to be cleaned up!\n      await Product.db.deleteWhere(\n        session,\n        where: (_) => Constant.bool(true),\n      );\n    });\n\n    test('then should execute and commit all transactions', () async {\n      var result =\n          await endpoints.products.concurrentTransactionCalls(sessionBuilder);\n      // ...\n    });\n  },\n  rollbackDatabase: RollbackDatabase.disabled,\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Pixel Image Controller\nDESCRIPTION: Adding PixelImageController and initState method to handle image data management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// lib/src/pixorama.dart\n\nclass _PixoramaState extends State<Pixorama> {\n  // The pixel image controller contains our image data and handles updates.\n  // If it is null, the image has not yet been loaded from the server.\n  PixelImageController? _imageController;\n\n  @override\n  void initState() {\n    super.initState();\n\n    // Connect to the server and start listening to updates.\n    _listenToUpdates();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Serverpod Endpoint for Notes\nDESCRIPTION: Defines a NotesEndpoint class with methods for creating, deleting, and retrieving notes from the database\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass NotesEndpoint extends Endpoint {\n  Future<List<Note>> getAllNotes(Session session) async {\n    return await Note.db.find(\n      session,\n      orderBy: (t) => t.id,\n    );\n  }\n\n  Future<void> createNote(Session session, Note note) async {\n    await Note.db.insertRow(session, note);\n  }\n\n  Future<void> deleteNote(Session session, Note note) async {\n    await Note.db.deleteRow(session, note);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dart Commands for Module Integration\nDESCRIPTION: This bash snippet outlines the commands necessary to fetch dependencies and generate the necessary server files after adding a module to the project. Executing this command is crucial for ensuring the module is integrated properly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/08-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Fetching Notes from Serverpod Backend\nDESCRIPTION: Asynchronous method to load notes from the server endpoint with error handling. Updates state with received notes or calls the connection failure handler.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Dart (Server-side)\nDESCRIPTION: This snippet demonstrates how to create an upload description on the server, granting access to the app to upload a file. It uses the 'public' storage and takes a path parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving RDS Database URL with AWS CLI\nDESCRIPTION: A command to retrieve the URL for an RDS database instance using the AWS CLI. This command uses jq to extract the database endpoint address from the AWS CLI response.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws rds describe-db-instances --db-instance-identifier ${YOUR_DB_INSTANCE_ID} | jq \".DBInstances.[0].Endpoint.Address\" -r\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Implementation\nDESCRIPTION: Widget for displaying loading state and error handling with retry functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Old Model Syntax - database Field\nDESCRIPTION: This code snippet shows the old syntax for defining a database field in Serverpod model files before version 1.2. The `database` keyword has been deprecated and is being replaced.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  serverField: String, database\n```\n\n----------------------------------------\n\nTITLE: Releasing Savepoints in Dart with Serverpod Transactions\nDESCRIPTION: Shows how to release savepoints within a Serverpod database transaction. The example creates two savepoints and releases the first one, which invalidates the second savepoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-transactions.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait session.db.transaction((transaction) async {\n  // Create two savepoints\n  var savepoint = await transaction.createSavepoint();\n  var secondSavepoint = await transaction.createSavepoint();\n\n  await Company.db.insertRow(session, company, transaction: transaction);\n  await savepoint.release();\n});\n```\n\n----------------------------------------\n\nTITLE: Initial Cursor-Based Pagination Request in Dart\nDESCRIPTION: Introduces cursor-based pagination with an initial request, retrieving the first 'n' records sorted by ID without a cursor. Ideal for maintaining data integrity with updates. Requires a Serverpod session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint recordsPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands in Shell\nDESCRIPTION: Execute commands to update dependencies and generate Serverpod code after adding the auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL in Dart\nDESCRIPTION: This snippet demonstrates how to get the public URL of a file stored in a public storage using Serverpod. This is useful for accessing files that are publicly available.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Class Example in Dart\nDESCRIPTION: This snippet shows an example of a custom class implementation in Dart with `toJson` and `fromJson` methods. It demonstrates how to serialize and deserialize the class to and from JSON format.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/03-serialization.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass ClassName {\n  String name;\n  ClassName(this.name);\n\n  toJson() {\n    return {\n      'name': name,\n    };\n  }\n\n  factory ClassName.fromJson(\n    Map<String, dynamic> jsonSerialization,\n  ) {\n    return ClassName(\n      jsonSerialization['name'],\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project\nDESCRIPTION: This command creates a new Serverpod project named 'mypod'. The command generates a directory structure with three essential Dart packages, each serving a different role in the application architecture.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Implementing Delete Note Method in Dart for Serverpod Note App\nDESCRIPTION: This method deletes a note using the Serverpod client, then reloads the notes list. It includes error handling for connection failures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _deleteNote(Note note) async {\n  try {\n    await client.notes.deleteNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Github Actions Dart SDK Configuration\nDESCRIPTION: YAML configuration for setting up specific Dart SDK version in Github Actions workflow.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Setup Dart SDK\n        uses: dart-lang/setup-dart@v1.6.5\n        with:\n          sdk: 3.5\n```\n\n----------------------------------------\n\nTITLE: Tagging a Repair Migration\nDESCRIPTION: Command to create a tagged repair migration for easier identification.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --tag \"reset-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Future Call in Dart\nDESCRIPTION: Defines a custom future call by extending the FutureCall class and overriding the invoke method, which allows scheduling asynchronous tasks with optional model data\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/14-scheduling.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleFutureCall extends FutureCall<MyModelEntity> {\n  @override\n  Future<void> invoke(Session session, MyModelEntity? object) async {\n    // Do something interesting in the future here.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Extra Classes in YAML for Serverpod\nDESCRIPTION: This YAML snippet provides an example of how to declare additional classes in the generator configuration for Serverpod, specifying a shared package that includes the custom class 'FreezedCustomClass'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/02-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Shows how to set up a bidirectional one-to-one relationship where both entities can access each other through the same relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int\n  address: Address?, relation(name=user_address, field=addressId)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  user: User?, relation(name=user_address)\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Exception Handling in Serverpod\nDESCRIPTION: Demonstrates how to log errors with additional context including warning levels, exceptions, and stack traces. This provides more detailed information for debugging purposes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/05-logging.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nsession.log(\n  'Oops, something went wrong',\n  level: LogLevel.warning,\n  exception: e,\n  stackTrace: stackTrace,\n);\n```\n\n----------------------------------------\n\nTITLE: Revoking Current Session's Auth Key in Serverpod\nDESCRIPTION: This code demonstrates how to revoke the authentication key for the current session. It fetches the authentication information from the session and revokes the corresponding key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar authId = (await session.authenticated)?.authId;\n\nif (authId != null) {\n  await UserAuthentication.revokeAuthKey(\n    session,\n    authKeyId: authId,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching a Single Employee from a Company\nDESCRIPTION: This snippet shows how to remove the association between an employee and a company using the `detachRow` method. It retrieves the employee object and then removes its link to the company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detachRow.employees(session, employee!);\n\n```\n\n----------------------------------------\n\nTITLE: Disabled Rollback Test Example - Dart\nDESCRIPTION: Example showing how to properly clean up database state when rollback is disabled.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given ProductsEndpoint when calling concurrentTransactionCalls',\n  (sessionBuilder, endpoints) {\n    tearDownAll(() async {\n      var session = sessionBuilder.build();\n      // If something was saved to the database in the endpoint,\n      // for example a `Product`, then it has to be cleaned up!\n      await Product.db.deleteWhere(\n        session,\n        where: (_) => Constant.bool(true),\n      );\n    });\n\n    test('then should execute and commit all transactions', () async {\n      var result =\n          await endpoints.products.concurrentTransactionCalls(sessionBuilder);\n      // ...\n    });\n  },\n  rollbackDatabase: RollbackDatabase.disabled,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Routes to Serverpod Web Server in Dart\nDESCRIPTION: Demonstrates how to add single page routes and wildcard routes to the Serverpod web server. This snippet shows the basic syntax for defining routes and their corresponding paths.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/10-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Database Configuration - YAML\nDESCRIPTION: This YAML snippet contains the database connection configuration details, including host, port, database name, and user details that are essential for connecting to the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: localhost\n  port: 8090\n  name: projectname\n  user: postgres\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token from AuthenticationKeyManager in Serverpod Client\nDESCRIPTION: This snippet demonstrates how to retrieve the authentication token from the `AuthenticationKeyManager` in a Serverpod client using the `get` method. The retrieved token can then be used for various purposes on the client-side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar token = await client.authenticationKeyManager?.get();\n\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated Session Override in Dart\nDESCRIPTION: This snippet demonstrates how to create an authenticated session override with specific user details using the `AuthenticationOverride.authenticationInfo` method. This enables testing of endpoints requiring user authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nstatic AuthenticationOverride authenticationInfo(\n  int userId,\n  Set<Scope> scopes, {\n  String? authId,\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering by Non-matching Set in Dart using Serverpod\nDESCRIPTION: This snippet applies 'notInSet' to filter users whose names do not belong to a specific set, 'Alice' or 'Bob'. Names with 'null' values are included.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notInSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Companies with Limit\nDESCRIPTION: This code snippet demonstrates how to retrieve a specific number of company records using the 'limit' parameter in a database query. The example fetches the first 10 companies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n);\n```\n\n----------------------------------------\n\nTITLE: Including Multiple Related Objects\nDESCRIPTION: This example includes several different objects configured by specifying the named parameters. `Employee` has relations to `Address` and `Company` and `Company` has relation to `Address`.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    address: Address.include(),\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Module to Server Dependencies (YAML)\nDESCRIPTION: This snippet shows how to add the serverpod_auth_server dependency to the server's pubspec.yaml file. It's important to use the same version number as other Serverpod packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/10-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL - Serverpod Dart\nDESCRIPTION: This code snippet retrieves the public URL of a file stored in a public storage. It takes a `storageId` and a `path` as input. The function returns a string representing the public URL of the file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Server-Only Class Model\nDESCRIPTION: Example of defining a model that will only be generated on the server side by setting the serverOnly property to true. This is useful for models containing sensitive information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyPrivateClass\nserverOnly: true\nfields:\n  hiddenSecretKey: String\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Serverpod Docs\nDESCRIPTION: Shows how to start a local development server for the documentation website. This allows developers to see live updates as they make changes to the documentation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\n$ npm start\n\n# Or if you have Make installed, use this make command\n$ make start\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Serverpod Web Server\nDESCRIPTION: Demonstrates how to add single page and wildcard routes to the Serverpod web server. Routes can be configured with specific paths or with wildcards to match multiple paths.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/18-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Age Less Than 25 in Dart\nDESCRIPTION: This example illustrates how to fetch all users who are younger than 25 using the less-than operator. It shows effective usage of comparison in the query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age < 25\n);\n```\n\n----------------------------------------\n\nTITLE: Specifying Index Type in YAML for Serverpod\nDESCRIPTION: Demonstrates how to specify a custom index type (BRIN in this case) for the 'name' field in a Company table. All PostgreSQL index types are supported.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    type: brin\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Sign-In Button with Additional Scopes in Dart\nDESCRIPTION: Example showing how to set up a Google Sign-In button with additional OAuth scopes for accessing YouTube API. The code demonstrates adding the YouTube scope to the authentication request.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: Floating Action Button Implementation\nDESCRIPTION: Implementation of FloatingActionButton widget to trigger note creation dialog in the main app scaffold.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    ...\n    floatingActionButton: _notes == null\n      ? null\n      : FloatingActionButton(\n          onPressed: () {\n            showNoteDialog(\n              context: context,\n              onSaved: (text) {\n                var note = Note(\n                  text: text,\n                );\n                _notes!.add(note);\n\n                _createNote(note);\n              },\n            );\n          },\n          child: const Icon(Icons.add),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: This code snippet initializes the Google Cloud CLI for setting up the environment needed to deploy Serverpod on Google Cloud Run. This is a prerequisite step to configure the gcloud tool with the developer's Google account.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud init\n```\n\n----------------------------------------\n\nTITLE: Creating Table Relations in Serverpod\nDESCRIPTION: Example of using the 'relation' keyword to create a database relation between tables. This creates a relation between the 'company' table and the 'address' table, keeping the data in sync across tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address?, relation\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Serverpod Endpoint in Dart\nDESCRIPTION: Shows how to create a basic endpoint class with a hello method that accepts a session and name parameter. The endpoint extends the Endpoint class and returns a Future<String>.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Serverpod Create Command for Upgrade\nDESCRIPTION: Command to upgrade an existing Serverpod Mini installation to the full version. This should be run from within the server directory and will add all necessary configuration files for the full version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/01-upgrade-from-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create .\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Future Call at a Specific Time in Serverpod\nDESCRIPTION: This code shows how to schedule a future call to be invoked at a specific date and time using the futureCallAtTime method. The example schedules the call for January 1, 2025.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/14-scheduling.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallAtTime(\n  'exampleFutureCall',\n  data,\n  DateTime(2025, 1, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Database Cleanup in Tests - Do Pattern\nDESCRIPTION: Demonstrates the correct approach by omitting explicit cleanup, relying on Serverpod's automatic transaction rollback.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\n  });\n\n  ✅  // Clean up can be omitted since the transaction is rolled back after each by default\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering within a Range in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates the use of 'between' to filter users aged inclusively between 18 and 65. Requires a User model with an 'age' column.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.between(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Serverpod Endpoint in Dart\nDESCRIPTION: Demonstrates how to create a basic endpoint class with a hello method that accepts a session and name parameter. The endpoint extends the Endpoint class and returns a Future<String>.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detaching a Single Row in Serverpod\nDESCRIPTION: Demonstrates removing an employee's association with a company using Serverpod's 'detachRow'. Requires session and employee ID, outputs the detached record association.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detachRow.employees(session, employee!);\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Authentication\nDESCRIPTION: Customize the Authentication Configuration in the main server.dart file by importing the serverpod_auth_server module and setting up the AuthConfig.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;  \n  \nvoid run(List<String> args) async {\n\n  auth.AuthConfig.set(auth.AuthConfig(  \n    minPasswordLength: 12,\n  ));  \n    \n  // Start the Serverpod server.  \n  await pod.start();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations in Dart\nDESCRIPTION: Runs the main server application with the apply-migrations flag to update the database schema based on the latest migration scripts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Registering Google Sign In Route in Serverpod Server\nDESCRIPTION: Dart code to register the Google Sign In route in the Serverpod server. This route is necessary for the web redirect after Google authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific User's Auth Key in Serverpod\nDESCRIPTION: This snippet shows how to fetch all authentication keys for a user and revoke a specific key. It demonstrates retrieving keys from the database and revoking the last key as an example.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar authKeys = await AuthKey.db.find(\n  session,\n  where: (t) => t.userId.equals(userId),\n);\n\nif (authKeys.isNotEmpty) {\n  var authKeyId = authKeys.last.id.toString();  // Convert the ID to string\n  await UserAuthentication.revokeAuthKey(\n    session,\n    authKeyId: authKeyId,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Default Referential Actions for Object Relations in Serverpod\nDESCRIPTION: Shows the default referential actions applied to object relations in Serverpod when not explicitly specified. Both onUpdate and onDelete default to NoAction.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: Model?, relation(onUpdate=NoAction, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Serverpod Endpoint in Dart\nDESCRIPTION: Demonstrates how to create a basic endpoint class that extends Endpoint with a simple hello method. The endpoint handles a string parameter and returns a Future<String>.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/01-working-with-endpoints.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Module\nDESCRIPTION: This snippet describes how to create a new module using the serverpod create command with the template flag set to module. This command generates both server and client Dart packages for the module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/06-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"serverpod create --template module my_module\"\n```\n\n----------------------------------------\n\nTITLE: Filtering by Less Than in Dart using Serverpod\nDESCRIPTION: This snippet shows filtering users younger than a specific age using the '<' operator. It requires a User model with an 'age' column, fetching users younger than 25.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age < 25\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Google Sign-In Route in Dart Server\nDESCRIPTION: This Dart snippet demonstrates how to register a route for Google Sign-In in a Serverpod application. The route should be set up to handle authentication responses in the web application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth\n\n\nvoid run(List<String> args) async {\n  ...\n  pod.webServer.addRoute(auth.RouteGoogleSignIn(), '/googlesignin');\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DNS Server Configuration using dig Command\nDESCRIPTION: Command to verify domain name server configuration by querying NS records for a domain. The output should show Google's cloud nameservers if configured correctly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndig +short NS examplepod.com\n```\n\nLANGUAGE: bash\nCODE:\n```\nns-cloud-b4.googledomains.com.\nns-cloud-b1.googledomains.com.\nns-cloud-b2.googledomains.com.\nns-cloud-b3.googledomains.com.\n```\n\n----------------------------------------\n\nTITLE: Signing Out All Devices in Serverpod - Dart\nDESCRIPTION: This snippet demonstrates how to sign out a user across all devices by invoking the signOutAllDevices method in Serverpod, which revokes all authentication keys associated with the user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Client-Side Session Management in Serverpod\nDESCRIPTION: Shows how to handle authentication response and register a signed-in user using SessionManager on the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar serverResponse = await caller.myAuthentication.login(username, password);\n\nif (serverResponse.success) {\n    // Store the user info in the session manager.\n    SessionManager sessionManager = await SessionManager.instance;\n    await sessionManager.registerSignedInUser(\n        serverResponse.userInfo!,\n        serverResponse.keyId!,\n        serverResponse.key!,\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Content in Dart (Server-side)\nDESCRIPTION: This code demonstrates how to directly retrieve a file's content from the server. It uses the 'retrieveFile' method with the storage ID and file path as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Combining Filter Conditions with Logical OR in Dart\nDESCRIPTION: This example uses the | operator to retrieve users whose names start with either 'A' or 'B', showcasing the use of logical disjunction in querying.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.like('A%') | t.name.like('B%'))\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Notes from Server in Dart\nDESCRIPTION: Asynchronous method to fetch notes from the server endpoint and update the state. It also handles potential connection failures.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _loadNotes() async {\n  try {\n    final notes = await client.notes.getAllNotes();\n    setState(() {\n      _notes = notes;\n    });\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Flutter Dependencies\nDESCRIPTION: Adding Flutter-specific authentication dependencies for Google and Apple sign-in to the app's pubspec.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  example_client:\n    path: ../example_client\n  serverpod_auth_google_flutter: ^0.9.5\n  serverpod_auth_apple_flutter: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Recreating the database container for migration\nDESCRIPTION: Docker commands to fully recreate the database container when upgrading to Serverpod 1.2 without needing to preserve data. This removes the existing database and creates a fresh one.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose down -v\n$ docker-compose up --build --detach \n```\n\n----------------------------------------\n\nTITLE: Stopping Serverpod Docker Containers\nDESCRIPTION: This command stops the Docker containers defined in the `docker-compose.yaml` file. It is used to shut down Postgres and Redis, which are required by Serverpod. Requires Docker and Docker Compose to be installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/index.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"docker-compose stop\"\n```\n\n----------------------------------------\n\nTITLE: Finding Rows with a Condition - Dart\nDESCRIPTION: This code retrieves a single row from the database matching specific criteria using the findSingleRow method and a typed expression.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for One-to-One Relationship\nDESCRIPTION: Shows the equivalent SQL schema for creating a one-to-one relationship between User and Address tables\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE \"address\" (\n    \"id\" serial PRIMARY KEY,\n    \"street\" text NOT NULL\n);\n\nCREATE TABLE \"user\" (\n    \"id\" serial PRIMARY KEY,\n    \"addressId\" integer NOT NULL\n);\n\nCREATE UNIQUE INDEX \"user_address_unique_idx\" ON \"user\" USING btree (\"addressId\");\n\nALTER TABLE ONLY \"user\"\n    ADD CONSTRAINT \"user_fk_0\"\n    FOREIGN KEY(\"addressId\")\n    REFERENCES \"address\"(\"id\")\n    ON DELETE CASCADE\n    ON UPDATE NO ACTION;\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows from Database Table in Dart with Serverpod\nDESCRIPTION: This snippet demonstrates how to delete rows from a database table, both a single row and multiple rows using an expression, with Serverpod's Dart API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Listening to WebSocket Stream in Dart\nDESCRIPTION: Listens to incoming messages on a client's WebSocket stream, processing each message with `_handleMessage`. Intended for real-time data updates from server endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/09-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-one Relationship with Object Field in Serverpod YAML\nDESCRIPTION: Example of configuring a one-to-one relationship using an object field approach where Serverpod automatically generates the foreign key field and handles the relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation // Object relation field\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Database Migration SQL for Small Tables\nDESCRIPTION: SQL commands to modify table and sequence data types from int to bigint. Suitable for small tables due to table locking during migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER SEQUENCE \"my_table_id_seq\" AS bigint;\nALTER TABLE \"my_table\" ALTER \"id\" TYPE bigint;\nALTER TABLE \"my_table\" ALTER \"myNumber\" TYPE bigint;\n```\n\n----------------------------------------\n\nTITLE: Overriding Run Mode in Serverpod Tests\nDESCRIPTION: This snippet demonstrates how to explicitly set the run mode for the Serverpod test environment, allowing flexibility in testing based on different configurations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given Products endpoint',\n  (sessionBuilder, endpoints) {\n    /* test code */\n  },\n  runMode: ServerpodRunMode.development,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsecure Random in Authentication Module\nDESCRIPTION: Dart code to enable unsecure random number generation in the AuthConfig. This preserves the old behavior, as the default is now set to false in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: true,\n));\n```\n\n----------------------------------------\n\nTITLE: Object-Based One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Shows how to define a one-to-one relationship using an object reference instead of an explicit ID field, allowing for automated handling of the relationship.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Launching Serverpod Server with Custom Mode and ID\nDESCRIPTION: Command to start a Serverpod server in production mode with a specific server ID. The --mode flag specifies the configuration mode (development/staging/production) while --server-id identifies the specific server instance in a cluster.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/03-deployments/01-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Running All Serverpod Tests with Utility Script\nDESCRIPTION: This command runs all the Serverpod tests from the root directory using the provided utility script. This is the recommended way to verify your changes before submitting a pull request.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/07-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Custom User Identification in Serverpod\nDESCRIPTION: This code snippet shows how to implement a custom identification method by directly accessing the database. It demonstrates finding a user by their full name using the UserInfo model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await UserInfo.db.findFirstRow(\n  session,\n  where: (t) => t.fullName.equals(name),\n);\n```\n\n----------------------------------------\n\nTITLE: AuthKey Table Definition\nDESCRIPTION: YAML definition for the serverpod_auth_key table structure used for authentication\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Provides a method of access for a user to authenticate with the server.\nclass: AuthKey\ntable: serverpod_auth_key\nfields:\n  ### The id of the user to provide access to.\n  userId: int\n\n  ### The hashed version of the key.\n  hash: String\n\n  ### The key sent to the server to authenticate.\n  key: String?, !persist\n\n  ### The scopes this key provides access to.\n  scopeNames: List<String>\n\n  ### The method of signing in this key was generated through.\n  method: String\nindexes:\n  serverpod_auth_key_userId_idx:\n    fields: userId\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side endpoint method to generate an upload description for file uploads. Creates a description that grants access to upload files to the public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods with Dart Extensions\nDESCRIPTION: Example showing how to extend generated model classes with custom methods using Dart's extension feature, allowing additional functionality without modifying the generated code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nextension MyExtension on MyClass {\n  bool isCustomMethod() {\n    return true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parent/Child Relationships in YAML\nDESCRIPTION: The parent property establishes a relationship between child and parent tables. Upon deletions, referencing rows are automatically removed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Employee\\ntable: employee\\nfields:\\n  companyId: int, parent=company\\n  name: String\\n  birthday: DateTime\n```\n\n----------------------------------------\n\nTITLE: Copying Cloud Run Deployment Script\nDESCRIPTION: Command to copy the pre-created Cloud Run deployment script to the root of your server directory. This script is used to deploy your Serverpod application to Google Cloud Run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cp deploy/gcp/console_gcr/cloud-run-deploy.sh .\n$ chmod u+x cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Bidirectional One-to-One Relationship\nDESCRIPTION: Shows how to implement a bidirectional one-to-one relationship where both entities can access each other through a named relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  addressId: int\n  address: Address?, relation(name=user_address, field=addressId)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n\n# address.yaml\nclass: Address\ntable: address\nfields:\n  street: String\n  user: User?, relation(name=user_address)\n```\n\n----------------------------------------\n\nTITLE: Adding SERVER_CLIENT_ID to GoogleService-Info.plist for iOS\nDESCRIPTION: Add the SERVER_CLIENT_ID key-value pair to the GoogleService-Info.plist file for iOS configuration. This step is necessary to provide the server client ID for Google Sign-In.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>SERVER_CLIENT_ID</key>\n  <string>your_server_client_id</string>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Dart (Server-side)\nDESCRIPTION: This code demonstrates how to check if an uploaded file exists in the storage. It uses the 'fileExists' method with the storage ID and file path as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Widget Route in Serverpod\nDESCRIPTION: Shows how to create a custom route by extending WidgetRoute class and implementing the build method. The route handles web requests and returns a Widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/18-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SHA-1 Key from Production Keystore for Android\nDESCRIPTION: Bash command to obtain the SHA-1 key from a production keystore file for Android applications. This key is required when creating Google client credentials for production Android apps.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ keytool -list -v -keystore /path/to/keystore\n```\n\n----------------------------------------\n\nTITLE: Company Model with Reverse Relation to User in Serverpod\nDESCRIPTION: Definition of a Company class that maintains a list of employees through a one-to-many relation with the User model. The relation is named 'company_employee' to match the corresponding relation in the User model.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<User>?, relation(name=company_employee)\n```\n\n----------------------------------------\n\nTITLE: Implicit One-to-Many Relationship Definition in YAML\nDESCRIPTION: Demonstrates how to implicitly define a one-to-many relationship between Company and Employee entities using the List type and relation keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, relation\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Route in Serverpod\nDESCRIPTION: Shows how to create a custom route by extending the WidgetRoute class and implementing the build method. The route handles session and HTTP request objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/11-webserver.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass MyRoute extends WidgetRoute {\n  @override\n  Future<Widget> build(Session session, HttpRequest request) async {\n    return MyPageWidget(title: 'Home page');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested List Includes with Additional Objects\nDESCRIPTION: Demonstrates including nested objects within list includes, showing how to include address information for each employee in a company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        address: Address.include(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Field Scopes in Serverpod YAML Model\nDESCRIPTION: This snippet illustrates how to set different visibility scopes for individual fields within a class, allowing for fine-grained control over field accessibility.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: SelectivelyHiddenClass\nfields:\n  hiddenSecretKey: String, scope=serverOnly\n  publicKey: String\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migration - Bash\nDESCRIPTION: This command starts the server in maintenance mode while applying the database migrations to ensure the latest schema is in use.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n\n```\n\n----------------------------------------\n\nTITLE: Custom User Identification in Serverpod\nDESCRIPTION: This code snippet shows how to implement a custom user identification method by directly accessing the database. It uses the UserInfo model to find a user by their full name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await UserInfo.db.findFirstRow(\n  session,\n  where: (t) => t.fullName.equals(name),\n);\n```\n\n----------------------------------------\n\nTITLE: Defining a Company Class Model in YAML for Serverpod\nDESCRIPTION: This snippet demonstrates how to define a serializable Company class with various field types including String, DateTime, and a List of Employee objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Shows how to call a Serverpod endpoint method from the client side using the generated client code. Demonstrates passing a string parameter and handling the async response.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Counting Rows in Serverpod\nDESCRIPTION: This snippet demonstrates how to count the number of rows that match a specific filter using the `count` method. It returns an integer representing the count.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar count = await Company.db.count(\n  session,\n  where: (t) => t.name.like('s%'),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Tagged Repair Migration\nDESCRIPTION: Command to create a repair migration with a specific tag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --tag \"reset-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Serverpod with Script\nDESCRIPTION: This command sequence prepares a script for deploying Serverpod to Google Cloud Run. It involves copying and granting execute permission to the deployment script, which must then be manually edited to include specific server details before execution.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/05-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncp deploy/gcp/console_gcr/cloud-run-deploy.sh .\nchmod u+x cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Sub-filter for No Related Entries in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates filtering users with no orders of type 'book', applying a sub-filter to the 'none' operator in a 1:n relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where:((t) => t.orders.none((o) => o.itemType.equals('book')))\n);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Scopes for Endpoint Authorization in Serverpod (Dart)\nDESCRIPTION: Shows how to apply custom authorization scopes to restrict access to endpoints with fine-grained permission control.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass MyEndpoint extends Endpoint {\n  @override\n  bool get requireLogin => true;\n\n  @override\n  Set<Scope> get requiredScopes => {CustomScope.userRead, CustomScope.userWrite};\n\n  Future<void> myMethod(Session session) async {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button with React in MDX\nDESCRIPTION: This snippet demonstrates how to create an interactive button using React within an MDX blog post. It uses the onClick event to display an alert when the button is clicked.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/blog/2021-08-01-mdx-blog-post.mdx#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Test Tags Setup in dart_test.yaml\nDESCRIPTION: This snippet creates a `dart_test.yaml` file for configuring test tags related to integration tests, essential for categorizing and running specific test cases within the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side endpoint method to generate an upload description for file uploads. This grants access for the client to upload files to the specified storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sorting by Column Name in Dart with Serverpod\nDESCRIPTION: Demonstrates how to fetch all companies from the database and sort them by their name in ascending order using the orderBy parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Dependencies to Flutter App\nDESCRIPTION: Add the necessary dependencies to your Flutter app's pubspec.yaml file to support authentication, including serverpod_auth_shared_flutter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Basic Index Definition in YAML\nDESCRIPTION: Demonstrates how to add a simple single-column index to a Company table using YAML configuration. Creates an index named 'company_name_idx' on the 'name' field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Adding Routes in Serverpod\nDESCRIPTION: Examples of adding single page routes and wildcard routes to the Serverpod web server. Shows how to configure both specific paths and pattern matching paths.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/11-webserver.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n// Add a single page.\npod.webServer.addRoute(MyRoute(), '/my/page/address');\n\n// Match all paths that start with /item/\npod.webServer.addRoute(AnotherRoute(), '/item/*');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL in Serverpod (Dart)\nDESCRIPTION: Server-side code to get the public URL of a file in storage. It uses the getPublicUrl method of the storage object, taking storageId and file path as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Serverpod server console output\nDESCRIPTION: Example console output when the Serverpod server starts successfully, showing the version, mode, and the ports for different services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/03-creating-project.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSERVERPOD version: 2.x.x, mode: development, time: 2022-09-12 17:22:02.825468Z\nInsights listening on port 8081\nServer default listening on port 8080\nWebserver listening on port 8082\n```\n\n----------------------------------------\n\nTITLE: Using the copyWith Method in Generated Classes\nDESCRIPTION: Example of using the generated copyWith method to create a modified copy of an object. This method allows updating specific fields while keeping others unchanged.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/02-models.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar john = User(name: 'John Doe', age: 25);\nvar jane = john.copyWith(name: 'Jane Doe');\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth dependency to server pubspec.yaml\nDESCRIPTION: This snippet shows how to add the serverpod_auth_server dependency to your server's pubspec.yaml file. This is the first step to integrate the authentication module into your Serverpod project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Count Related Entries in Dart using Serverpod\nDESCRIPTION: This code filters users with more than three orders using a 1:n relation. The count function must compare to a static value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count() > 3\n);\n```\n\n----------------------------------------\n\nTITLE: Handling and Routing Stream Messages on the Server\nDESCRIPTION: Implementation of the handleStreamMessage method to process incoming messages and route them to the appropriate recipient channels.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Serverpod CLI\nDESCRIPTION: This command updates the Serverpod command-line interface (CLI) to the latest version. It uses the `dart pub global activate` command, which installs the specified package globally.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Manual Stream Cancellation in Serverpod\nDESCRIPTION: Demonstrates how to manually cancel a message stream subscription when needed rather than waiting for automatic session closure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/16-server-events.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nvar subscription = stream.listen((message) {\n    print('Received message: $message');\n});\n\nsubscription.cancel();\n```\n\n----------------------------------------\n\nTITLE: Setting Up SessionManager in Dart\nDESCRIPTION: Initializes the SessionManager and Client in the app's main file for handling user authentication state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  const ipAddress = 'localhost';\n\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Serverpod (Dart)\nDESCRIPTION: Server-side code to check if a file exists in storage. It uses the fileExists method of the storage object, taking storageId and file path as parameters.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Pubspec.yaml Files - Dart\nDESCRIPTION: This command generates updated pubspec.yaml files based on the changes made in the templates directory. It's crucial for maintaining package dependencies in the Serverpod project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/07-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Including Lists Within Lists\nDESCRIPTION: This example returns a company with all related employees included. Each employee will have the related tools list included.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        tools: Tool.includeList(),\n      ),\n    ),\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Unique Index in Serverpod YAML\nDESCRIPTION: Illustrates how to create a unique index in a Serverpod YAML file. The unique index is created on the 'name' field of the 'Company' class, ensuring no two companies have the same name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\nindexes:\n  company_name_idx:\n    fields: name\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Overriding initState to Load Notes on App Start\nDESCRIPTION: Overriding the initState method to load notes from the server when the app starts, ensuring data is fetched immediately when the screen is created.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Secrets in YAML\nDESCRIPTION: YAML structure for configuring secrets in Serverpod with shared and environment-specific sections. Secrets include database passwords, service tokens, and storage credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/07-configuration.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\\n  database: <password>\\n  serviceSecret: <token>\\n  redis: <password>\\n  HMACAccessKeyId: <key>\\n  HMACSecretKey: <secret>\\n  AWSAccessKeyId: <key>\\n  AWSSecretKey: <secret>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User ID in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to retrieve the ID of a signed-in user using the session object in Serverpod. It uses the 'authenticated' property of the session to get the user ID asynchronously.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = (await session.authenticated)?.userId;\n```\n\n----------------------------------------\n\nTITLE: Serverpod Health Check Response\nDESCRIPTION: Example of a successful health check response from a deployed Serverpod instance. The response includes a timestamp indicating when the server was checked.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/06-deployments/04-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Package as Dependency in Serverpod's pubspec.yaml\nDESCRIPTION: Demonstrates how to update the pubspec.yaml files in both server and client projects to include the shared package containing custom serializable objects as a dependency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  my_project_shared:\n    path: ../my_project_shared\n  ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget with Template Values\nDESCRIPTION: Demonstrates creating a custom Widget class that uses Mustache templates. Shows how to set template values for rendering.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/10-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Request for Cursor-Based Pagination in Serverpod\nDESCRIPTION: Shows how to make the initial request for cursor-based pagination when no cursor is available yet. This fetches the first batch of records ordered by ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint recordsPerPage = 10;\n\nvar companies = await Company.db.find(\nsession,\norderBy: (t) => t.id,\nlimit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Calling an Endpoint Method from Client-Side Dart in Serverpod\nDESCRIPTION: This code shows how to call the hello method of the example endpoint from the client side in a Serverpod application. It uses the generated client code to make the call.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages and Posting to Channels in Dart\nDESCRIPTION: Illustrates how to handle incoming stream messages and post them to appropriate channels based on message type and recipient.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Companies with Limit in Serverpod (Dart)\nDESCRIPTION: This snippet demonstrates how to use the 'limit' parameter to fetch a specified number of companies from the database. It retrieves the first 10 companies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Related Model Field in Dart using Serverpod\nDESCRIPTION: This example shows how to sort companies based on a field from a related model. It sorts companies by their CEO's name using a chained field reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.ceo.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Launching Serverpod Server with Custom Mode and ID\nDESCRIPTION: Command to start a Serverpod server in production mode with a specific server ID. The command demonstrates how to use the --mode and --server-id flags to configure server instances.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/05-deployments/02-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side endpoint method to generate an upload description for file uploads. This grants access to the app to upload files to the specified storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Streaming Methods\nDESCRIPTION: Shows how to handle errors in streaming methods, including passing serializable exceptions between client and server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/15-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass ExampleEndpoint extends Endpoint {\n  Stream echoStream(Session session, Stream stream) async* {\n    stream.listen((message) {\n      // Do nothing\n    }, onError: (error) {\n      print('Server received error: $error');\n      throw SerializableException('Error from server');\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Shows how to customize the foreign key field name in a one-to-one relationship using the field parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  customIdField: int\n  address: Address?, relation(field=customIdField)\nindexes:\n  user_address_unique_idx:\n    fields: customIdField\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Implementing setPixel Method in PixoramaEndpoint\nDESCRIPTION: Dart code for the setPixel method in PixoramaEndpoint, handling pixel updates and broadcasting changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:pixorama_server/src/generated/protocol.dart';\n\nclass PixoramaEndpoint extends Endpoint {\n  // ...\n\n  static const _channelPixelAdded = 'pixel-added';\n\n  Future<void> setPixel(\n    Session session, {\n    required int colorIndex,\n    required int pixelIndex,\n  }) async {\n    if (colorIndex < 0 || colorIndex >= _numColorsInPalette) {\n      throw FormatException('colorIndex is out of range: $colorIndex');\n    }\n    if (pixelIndex < 0 || pixelIndex >= _numPixels) {\n      throw FormatException('pixelIndex is out of range: $pixelIndex');\n    }\n\n    _pixelData[pixelIndex] = colorIndex;\n\n    session.messages.postMessage(\n      _channelPixelAdded,\n      ImageUpdate(\n        pixelIndex: pixelIndex,\n        colorIndex: colorIndex,\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out Users in Serverpod (Dart)\nDESCRIPTION: It describes methods for signing out users from all devices using the `signOutUser` method of the `UserAuthentication` class. This method optionally accepts a user ID and ensures session synchronization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nawait UserAuthentication.signOutUser(\n  session,\n  userId: 123,  // Optional: If omitted, the currently authenticated user will be signed out\n);\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Directly with Dart\nDESCRIPTION: This command runs the Serverpod server directly using the Dart runtime. It assumes that the necessary dependencies are installed and that the server is configured correctly. Used in development without the `serverpod run` command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/index.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"dart bin/main.dart\"\n```\n\n----------------------------------------\n\nTITLE: Basic Logging in Serverpod Using Dart\nDESCRIPTION: Simple example of logging a message in Serverpod using the session.log method. When the session is closed, the message will be written to the serverpod_log table in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages in Server Endpoint\nDESCRIPTION: Shows how to handle incoming stream messages and route them to specific user channels in a chat application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project\nDESCRIPTION: This command generates a new Serverpod project with predefined packages for server, client, and Flutter implementations. Docker must be running prior to executing this command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Nickname in Generator YAML\nDESCRIPTION: Optional configuration for specifying a module nickname in generator.yaml. This determines how the module is referenced from the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/09-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Generating Dart Files from Model Definitions\nDESCRIPTION: Command to generate Dart files from the YAML model definitions using Serverpod's code generation. This creates the actual model classes used in the application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd pixorama_server\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Initial Request for Cursor-based Pagination in Dart using Serverpod\nDESCRIPTION: This code snippet shows how to make the initial request for cursor-based pagination. It retrieves the first set of records without using a cursor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nint recordsPerPage = 10;\n\nvar companies = await Company.db.find(\nsession,\norderBy: (t) => t.id,\nlimit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Nested List within List Includes\nDESCRIPTION: Shows how to include lists within lists, demonstrating the inclusion of tools for each employee in a company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      includes: Employee.include(\n        tools: Tool.includeList(),\n      ),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Module in Generator Config\nDESCRIPTION: Adding the serverpod_auth module configuration to the generator.yaml file to include it in code generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Creating Session Instance in Dart\nDESCRIPTION: Creates a Session instance using the sessionBuilder's build method for testing purposes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nSession session = sessionBuilder.build();\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod Installation\nDESCRIPTION: This command checks if the Serverpod CLI is correctly installed and configured. It displays the help information for the `serverpod` command if the installation was successful. Requires the Serverpod CLI to be installed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"serverpod\"\n```\n\n----------------------------------------\n\nTITLE: Generating Note Class Code - Bash\nDESCRIPTION: This command runs the Serverpod code generator to create the necessary Dart code for the 'Note' class based on the previously defined YAML structure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: These commands initialize Terraform and apply the infrastructure configuration. They are used to set up the AWS resources required for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Ignoring Serverpod Endpoint Definition\nDESCRIPTION: Demonstrates how to use the @ignoreEndpoint annotation to prevent code generation for specific endpoints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod/serverpod.dart';\nimport 'package:serverpod_shared/annotations.dart';\n\n@ignoreEndpoint\nclass ExampleEndpoint extends Endpoint {\n  Future<String> hello(Session session, String name) async {\n    return 'Hello $name';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relation Filtering in Dart using Serverpod\nDESCRIPTION: This snippet demonstrates filtering using a 1:1 relation by matching a related field, retrieving users linked to addresses with streets containing 'road'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.address.street.like('%road%')\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Hash Pepper (Yaml)\nDESCRIPTION: This YAML configuration snippet specifies adding a password hash pepper for enhanced security. The `emailPasswordPepper` is set in 'config/passwords.yaml'. It must remain confidential.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  emailPasswordPepper: 'your-pepper'\n```\n\n----------------------------------------\n\nTITLE: Registering Health Check Handler with Serverpod\nDESCRIPTION: Shows how to register a custom health check handler when initializing a Serverpod instance. The handler is passed as a parameter during Serverpod object creation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/12-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Applying migrations in Serverpod using maintenance role\nDESCRIPTION: This bash command applies pending database migrations using the maintenance role.  After migrations are applied, the server exits with an exit code indicating success or failure.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n\"$ dart run bin/main.dart --role maintenance --apply-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres and Redis for Testing\nDESCRIPTION: Runs the Docker Compose command to build and start the PostgreSQL and Redis services in detached mode, which is necessary before running tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Creating a New Version of Serverpod Documentation\nDESCRIPTION: Explains how to create a new version of the documentation. This is useful when updating documentation for a new release of Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Using npm\n$ npm run docusaurus docs:version X.X.X\n\n# Or if you have Make installed, use this make command\n$ make version VERSION=X.X.X\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS URL Scheme\nDESCRIPTION: XML configuration for registering URL scheme in iOS info.plist to handle authentication callback\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/04-providers/02-google.md#2025-04-20_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dict>\n  ...\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>your_reversed_client_id</string>\n      </array>\n    </dict>\n  </array>\n</dict>\n```\n\n----------------------------------------\n\nTITLE: Running Flutter on a Specific Web Port\nDESCRIPTION: This bash snippet provides a command to force Flutter to run on a specific port in the web environment, which is useful during development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/02-google.md#2025-04-20_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ flutter run -d chrome --web-port=49660\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI via Dart pub\nDESCRIPTION: Command to globally install the Serverpod command-line interface tool using Dart pub. This is the first step in setting up your Serverpod development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Key Field Name in One-to-one Relationship\nDESCRIPTION: Example of using a custom foreign key field name instead of the auto-generated one by specifying the field parameter in the relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  customIdField: int\n  address: Address?, relation(field=customIdField)\nindexes:\n  user_address_unique_idx:\n    fields: customIdField\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User ID in Serverpod\nDESCRIPTION: Fetch the current authenticated user's ID from the session object. This method provides a way to access the user's unique identifier when they are signed in.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = (await session.authenticated)?.userId;\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Serverpod\nDESCRIPTION: YAML configuration for database connection settings in Serverpod's development environment. This configuration includes the host, port, database name, and user information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: localhost\n  port: 8090\n  name: projectname\n  user: postgres\n\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Docker-based Postgres Database for Serverpod Development\nDESCRIPTION: This bash command starts a Docker container with a preconfigured Postgres database for Serverpod development. It builds the container if necessary and runs it in detached mode.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test - Bash\nDESCRIPTION: This snippet illustrates how to run an individual test in the Serverpod test server environment by navigating to the directory and executing a specific test file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/10-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server\n$ dart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Forcing Migration Creation in Serverpod CLI\nDESCRIPTION: Command to force the creation of a migration using the '--force' flag, overriding safeguards that prevent migration creation when no changes are detected or data loss is possible.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Updated Note Model with Database Table Definition\nDESCRIPTION: Enhanced YAML configuration that adds database table support to the Note class, enabling persistent storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\ntable: note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Run Mode in Serverpod Tests\nDESCRIPTION: Demonstrates how to override the default run mode (test) with a different run mode such as development for testing purposes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/02-the-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod(\n  'Given Products endpoint',\n  (sessionBuilder, endpoints) {\n    /* test code */\n  },\n  runMode: ServerpodRunMode.development,\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Serverpod\nDESCRIPTION: This Dart snippet demonstrates how to execute raw SQL queries on the database using the query method in Serverpod, returning a List<List<dynamic>> with rows and columns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Content in Serverpod (Dart)\nDESCRIPTION: Server-side code to retrieve the content of a file from storage. It uses the retrieveFile method of the storage object, returning the file content as ByteData.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Freezed Custom Class Implementation\nDESCRIPTION: Implementation of a custom class using the Freezed package for code generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'freezed_custom_class.freezed.dart';\npart 'freezed_custom_class.g.dart';\n\n@freezed\nclass FreezedCustomClass with _$FreezedCustomClass {\n  const factory FreezedCustomClass({\n    required String firstName,\n    required String lastName,\n    required int age,\n  }) = _FreezedCustomClass;\n\n  factory FreezedCustomClass.fromJson(\n    Map<String, Object?> json,\n  ) =>\n      _$FreezedCustomClassFromJson(json);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Serverpod Passwords in YAML\nDESCRIPTION: Example of a YAML passwords file for Serverpod, containing shared and environment-specific secrets for database, Redis, and service authentication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/07-configuration.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  myCustomSharedSecret: 'secret_key'\n\ndevelopment:\n  database: 'development_password'\n  redis: 'development_password'\n  serviceSecret: 'development_service_secret'\n\nproduction:\n  database: 'production_password'\n  redis: 'production_password'\n  serviceSecret: 'production_service_secret'\n```\n\n----------------------------------------\n\nTITLE: Returning Data with Cursor in Cursor-based Pagination\nDESCRIPTION: This snippet illustrates how to prepare the response for the client in cursor-based pagination, including the data and the last cursor for further requests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn {\n    'data': companies,\n    'lastCursor': companies.last.id,\n};\n```\n\n----------------------------------------\n\nTITLE: Flutter Dependencies Setup for Authentication (Yaml)\nDESCRIPTION: This YAML snippet adds Flutter-specific dependencies required for setting up email authentication using Serverpod's auth modules. It assumes a Flutter project environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Session Manager Implementation\nDESCRIPTION: Flutter app initialization with SessionManager setup for authentication state management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  const ipAddress = 'localhost';\n\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Index Definition\nDESCRIPTION: Shows how to create a composite index on multiple columns (name and foundedAt) in a Company table using YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/04-indexing.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedAt: DateTime\nindexes:\n  company_idx:\n    fields: name, foundedAt\n```\n\n----------------------------------------\n\nTITLE: Implementing Connection Failure Handling in Flutter\nDESCRIPTION: Method to handle connection failures in the Flutter app by updating the state with the exception and clearing the notes list.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Dart with Serverpod\nDESCRIPTION: This snippet shows how to update a user's scopes using the Users class in Serverpod, replacing all previously stored scopes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Creating a migration in Serverpod\nDESCRIPTION: This bash command creates a new migration for a Serverpod project. It reads the database schema from the last migration and compares it to the database schema necessary to accommodate the project's current database requirements.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create-migration\"\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Database and Data - Bash\nDESCRIPTION: This Bash command removes the Docker container for the Postgres database and deletes all associated data, allowing for a clean start in local development.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"$ docker compose down -v\"\n```\n\n----------------------------------------\n\nTITLE: Updating 'parent' Relation in Serverpod Model Definitions\nDESCRIPTION: Migration of model definitions from the deprecated 'parent' keyword to the new 'relation' syntax for defining relationships between tables.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, parent=example\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, relation(parent=example)\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload Completion\nDESCRIPTION: Server-side method to verify that a file upload has been successfully completed, especially important for third-party storage services\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a migration in Serverpod\nDESCRIPTION: This bash command creates a new migration with a specific tag.  The tag is appended to the migration name, making it easier to identify migrations associated with specific changes or releases.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"$ serverpod create-migration --tag \\\"v1-0-0\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod with Custom Token Validation\nDESCRIPTION: Sets up a Serverpod instance with a custom authentication handler that validates tokens and returns AuthenticationInfo objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n  args,\n  Protocol(),\n  Endpoints(),\n  authenticationHandler: (Session session, String token) async {\n    /// Custom validation handler\n    if (token != 'valid') return null;\n\n    return AuthenticationInfo(1, <Scope>{});\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod LSP Server using Command Line\nDESCRIPTION: Command to initialize and run the Serverpod Language Server Protocol (LSP) server. This server provides diagnostics for YAML protocol files in development environments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/09-tools/02-lsp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod language-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Classes in YAML Generator Config\nDESCRIPTION: YAML configuration for declaring custom serializable objects in the Serverpod generator config file, which makes them available to both server and client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nextraClasses:\n- package:my_project_shared/my_project_shared.dart:ClassName\n```\n\n----------------------------------------\n\nTITLE: Running the Demo App - Bash\nDESCRIPTION: This command changes to the Flutter app directory and runs the demo application in Chrome. It utilizes the Flutter command with the appropriate device flag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_flutter\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Logging Simple Messages in Serverpod - Dart\nDESCRIPTION: This code snippet demonstrates how to log a simple message using the `log` method on the `session` object. It captures the basic logging functionality within a Serverpod session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Submitting Diagnostic Events in Serverpod Endpoint\nDESCRIPTION: Shows how to submit diagnostic events from a Serverpod endpoint using the experimental submitDiagnosticEvent method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass DiagnosticEventTestEndpoint extends Endpoint {\n  Future<String> submitExceptionEvent(Session session) async {\n    try {\n      throw Exception('An exception is thrown');\n    } catch (e, stackTrace) {\n      session.serverpod.experimental.submitDiagnosticEvent(\n        ExceptionEvent(e, stackTrace),\n        session: session,\n      );\n    }\n    return 'success';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Flutter Web on a Specific Port\nDESCRIPTION: Bash command to force Flutter to run on a specific web port, which is useful when configuring the authorized JavaScript origins in Google Cloud Console for web integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter run -d chrome --web-port=49660\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Storage Configuration\nDESCRIPTION: Configuration code for setting up AWS S3 storage integration with Serverpod, including region and bucket settings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(s3.S3CloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'us-west-2',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Auth Module in Generator YAML\nDESCRIPTION: This code demonstrates how to add the serverpod_auth module to the config/generator.yaml file, assigning it a nickname for easier referencing from the client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/10-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Starting Docker containers and the Serverpod server\nDESCRIPTION: Commands to navigate to the server directory, start Docker containers for Postgres and Redis, and launch the Serverpod server with database migrations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/03-creating-project.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Note List UI Implementation\nDESCRIPTION: Build method implementation for rendering the list of notes using ListView.builder.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Serverpod\nDESCRIPTION: Server-side method to verify if a file upload has been completed successfully, particularly important when using third-party storage services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/10-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Auth Token in Serverpod\nDESCRIPTION: Demonstrates how to create an authentication token with specific user ID, authentication method, and scopes using the UserAuthentication class\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/05-custom-overrides.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar authToken = await session.auth.signInUser(myUserObject.id, 'myAuthMethod', scopes: {\n    Scope('delete'),\n    Scope('create'),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Module\nDESCRIPTION: Demonstrates how to create a new module using the serverpod create command with the module template\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for Stored Files\nDESCRIPTION: Server-side code to retrieve the public URL for a file in storage, which can be used to access files in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Authentication in Serverpod\nDESCRIPTION: Code snippet showing how to import and configure email authentication in the server.dart file. Sets up handlers for validation and password reset emails.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n```\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  sendValidationEmail: (session, email, validationCode) async {\n    // Send your validation email here.\n  },\n  sendPasswordResetEmail: (session, userInfo, validationCode) async {\n    // Send a password reset email here.\n  },\n));\n\n// Start the server.\nawait pod.start();\n```\n\n----------------------------------------\n\nTITLE: Running an Individual Serverpod Test\nDESCRIPTION: Commands to navigate to the test server directory and run a specific test file. This is useful when focusing on a particular feature or bug fix.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/07-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Using EmailAuthController Methods for Authentication\nDESCRIPTION: These Dart snippets demonstrate how to use various methods of the EmailAuthController for user signup, account validation, sign-in, and password reset.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.createAccountRequest(userName, email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.validateAccount(email, verificationCode);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.signIn(email, password);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.initiatePasswordReset(email);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait authController.resetPassword(email, verificationCode, password);\n```\n\n----------------------------------------\n\nTITLE: Handling Stream Messages in Serverpod\nDESCRIPTION: Implementation of message handling in a stream session, demonstrating how to process and forward chat messages to specific recipients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Database Instance - Bash\nDESCRIPTION: This bash command is used to start a Docker container that runs a Postgres database instance for a Serverpod project. It builds and detaches the instance so that it runs in the background.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"$ docker compose up --build --detach\"\n```\n\n----------------------------------------\n\nTITLE: Running Terraform for Infrastructure Deployment\nDESCRIPTION: Commands to initialize Terraform and apply the infrastructure configuration. This will create all necessary AWS resources for the Serverpod application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Manual Listener Management in Serverpod\nDESCRIPTION: Demonstrates how to manually add and remove a message listener callback from a channel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/16-server-events.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myListenerCallback = (message) {\n  print('Received message: $message');\n};\n// Register the listener\nsession.messages.addListener('user_updates', myListenerCallback);\n\n// Remove the listener\nsession.messages.removeListener('user_updates', myListenerCallback);\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod in Production Mode\nDESCRIPTION: This command demonstrates how to start a Serverpod server in production mode with a specific server ID. It uses command-line arguments to specify the mode and server ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/04-deployments/02-general.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart --mode production --server-id 2\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class in YAML\nDESCRIPTION: YAML definition for a Company class with name and foundedDate fields, which Serverpod will use to generate serializable Dart classes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Implementing copyWith Method for Custom Serialization in Dart\nDESCRIPTION: Example of implementing the copyWith method required for custom serializable objects in Serverpod, which creates a new instance with specified fields replaced.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nClassName copyWith({\n  String? name,\n}) {\n  return ClassName(\n    name: name ?? this.name,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Mapping in YAML\nDESCRIPTION: Shows how to map a Company class to a database table with fields for name, founded date, and employee relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Description in Serverpod\nDESCRIPTION: Server-side endpoint implementation for generating file upload descriptions that grant upload access to the app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<String?> getUploadDescription(Session session, String path) async {\n  return await session.storage.createDirectFileUploadDescription(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Page-Based Pagination Implementation\nDESCRIPTION: Demonstrates how to implement page-based pagination by calculating offset based on page number and items per page.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nint page = 3;\nint companiesPerPage = 10;\n\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.id,\n  limit: companiesPerPage,\n  offset: (page - 1) * companiesPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload Completion in Serverpod\nDESCRIPTION: Server-side verification method to confirm successful file upload completion, especially important for third-party storage services.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Repair Migration\nDESCRIPTION: This command restarts the Serverpod application with a flag to apply the repair migration, ensuring the database schema is updated to match the new migration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row in Database - Dart\nDESCRIPTION: This snippet demonstrates how to retrieve a row from the database using its ID with the findById method of the Company class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/01-get-started.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Stream Message Listener Implementation\nDESCRIPTION: Shows how to implement a message listener that forwards messages to authenticated users through Redis channels.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/09-streams.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> streamOpened(StreamingSession session) async {\n  session.messages.addListener(\n    'user_${await session.auth.authenticatedUserId}',\n    (message) {\n      sendStreamMessage(session, message);\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Module in generator.yaml\nDESCRIPTION: This YAML configuration adds the serverpod_auth module to a project's generator.yaml file. The nickname 'auth' sets how the module will be referenced from the client code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Case-Insensitive Not Like Filter in Dart\nDESCRIPTION: Shows how to use the notIlike filter for case-insensitive exclusion based on partial string matching on names.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notIlike('b%')\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations in Serverpod\nDESCRIPTION: Command to apply database migrations when starting a Serverpod server. This ensures the database schema is updated before the application runs.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Migration Setup for Projects with Data to Preserve\nDESCRIPTION: Sequence of commands to set up the migration system for existing Serverpod projects where preserving data is required, using the repair migration system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart\n$ serverpod create-repair-migration\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Flutter Packages to App Dependencies (YAML)\nDESCRIPTION: This snippet demonstrates how to add various Serverpod auth Flutter packages to the Flutter app's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/10-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Authentication Handler in Dart\nDESCRIPTION: Adds the serverpod_auth_server authentication handler to a Serverpod instance. It sets up the server to handle user authentication using predefined methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Pubspecs - Bash\nDESCRIPTION: This snippet provides the command used to generate the pubspec.yaml files after making changes to the template files in the Serverpod project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/10-contribute.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ util/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Filtering Any Related Entry in Dart using Serverpod\nDESCRIPTION: The snippet demonstrates the 'any' operator to fetch users with any related order, a basic 1:n relation filter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.any()\n);\n```\n\n----------------------------------------\n\nTITLE: Running Dig Command to Verify Domain Name Servers\nDESCRIPTION: Command to verify that a domain is correctly pointed to Google's name servers by displaying the NS records for the domain.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dig +short NS examplepod.com\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod with Authentication Handler in Dart\nDESCRIPTION: Shows how to initialize a Serverpod instance with the new authentication handler from the serverpod_auth_server package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/serverpod_auth_server.dart' as auth;\n\nvoid run(List<String> args) async {\n  var pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    authenticationHandler: auth.authenticationHandler, // Add this line\n  );\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Dependencies in YAML\nDESCRIPTION: This YAML snippet shows how to add dependencies for Google and Apple sign-in to the app's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  example_client:\n    path: ../example_client\n  serverpod_auth_google_flutter: ^0.9.5\n  serverpod_auth_apple_flutter: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Dependencies in Flutter\nDESCRIPTION: YAML configuration showing how to add Google and Apple authentication dependencies to a Flutter project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  example_client:\n    path: ../example_client\n  serverpod_auth_google_flutter: ^0.9.5\n  serverpod_auth_apple_flutter: ^0.9.5\n```\n\n----------------------------------------\n\nTITLE: Optional One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Demonstrates how to create an optional one-to-one relationship where the foreign key can be null, using the optional keyword in the relation definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation(optional)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Authentication Dependency in Flutter\nDESCRIPTION: Adding the serverpod_auth_apple_flutter dependency to the Flutter project's pubspec.yaml file to enable Apple sign-in functionality. The dependency needs to match the Serverpod version being used.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Executing Serverpod Upgrade Command in Bash\nDESCRIPTION: This command upgrades a Serverpod Mini project to the full version by adding the necessary configuration files. It should be run from the server directory of the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/01-upgrade-from-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create .\n```\n\n----------------------------------------\n\nTITLE: Configuring Enum Serialization in Serverpod YAML\nDESCRIPTION: This example demonstrates how to set the serialization method for an enum to use the name of the enum value instead of its index.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nenum: Animal\nserialized: byName\nvalues:\n - dog\n - cat\n - bird\n```\n\n----------------------------------------\n\nTITLE: Serialization Before Serverpod 2.0\nDESCRIPTION: Example of model serialization in versions prior to Serverpod 2.0, which required a serializationManager parameter for object deserialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal SerializationManager serializationManager = Protocol();\nfinal ClassName test = ClassName.fromJson(json, serializationManager);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart SDK Version in GitHub Workflow\nDESCRIPTION: YAML configuration for specifying the Dart SDK version to use in the GitHub Actions deployment workflow.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n      - name: Setup Dart SDK\n        uses: dart-lang/setup-dart@v1.6.5\n        with:\n          sdk: ${MINOR_DART_SDK_VERSION}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Table Mapping in YAML\nDESCRIPTION: Demonstrates how to map a serializable class to a database table using YAML configuration with fields for company name and founding date.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Creating a Flutter package for a custom module\nDESCRIPTION: This command creates a Flutter package to complement your custom Serverpod module. This is useful when you want to add custom Flutter widgets or functionality to your module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/06-modules.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication with Unsecure Random in Serverpod\nDESCRIPTION: Configuration code for enabling unsecure random number generation in the authentication module. Sets the allowUnsecureRandom property in AuthConfig.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: true,\n));\n```\n\n----------------------------------------\n\nTITLE: Calling Server Method from Flutter\nDESCRIPTION: Example of creating a Company object and calling the server method from Flutter app\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/02-get-started-with-mini.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = Company(\n  name: 'Serverpod',\n  foundedDate: DateTime(2021, 9, 27),\n  employees: [\n    'Alex',\n    'Isak',\n    'Viktor',\n  ],\n);\n\nvar result = await client.company.isLegit(company);\n```\n\n----------------------------------------\n\nTITLE: Using Serverpod CLI in Bash\nDESCRIPTION: Demonstrates the basic usage syntax for the Serverpod CLI. This command structure allows developers to execute various Serverpod-related tasks from the command line.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/07-cli.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod <command> [arguments]\n```\n\n----------------------------------------\n\nTITLE: Session Manager Implementation\nDESCRIPTION: Flutter implementation of SessionManager for handling user authentication state.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nlate SessionManager sessionManager;\nlate Client client;\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  const ipAddress = 'localhost';\n\n  client = Client(\n    'http://$ipAddress:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  )..connectivityMonitor = FlutterConnectivityMonitor();\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Password in YAML\nDESCRIPTION: This YAML snippet specifies the database password required for authentication when connecting to the database. It ensures secure access to sensitive database operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n\n...\n```\n\n----------------------------------------\n\nTITLE: Logging a Simple Message in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to log a basic message using the session object in Serverpod. This method is used to log custom messages during the execution of a session.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: Deprecated Sign Out Method in Serverpod\nDESCRIPTION: Deprecated method for signing out a user. This method uses the deprecated signOut status endpoint and should be replaced with signOutDevice or signOutAllDevices.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Setting Default Google Cloud Project\nDESCRIPTION: Command to set the default Google Cloud project for your Cloud Run service. Replace <PROJECT_ID> with your actual Google Cloud project ID.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Deployment Status\nDESCRIPTION: Expected response from a successfully deployed Serverpod instance when accessed through the browser. The response includes an OK status and a timestamp.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Bulk Detaching Rows in Relational Data in Serverpod (Dart)\nDESCRIPTION: Demonstrates how to remove associations for multiple employees simultaneously in Serverpod. This operation is atomic.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detach.employees(session, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Table Row in Serverpod\nDESCRIPTION: This Dart code snippet shows how to insert a new row into the database using the insert method of the db field in the Session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod'. This generates three packages: a server package, a client package, and a pre-configured Flutter app.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod Firebase Auth Package\nDESCRIPTION: Command for adding the Serverpod Firebase authentication package to a Flutter project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add serverpod_auth_firebase_flutter\n```\n\n----------------------------------------\n\nTITLE: Adding Test Passwords to YAML\nDESCRIPTION: Adds test database and Redis passwords to the passwords.yaml file in the config directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Setting User Object in Stream Opening (Dart)\nDESCRIPTION: Demonstrates how to associate a state with a streaming session when a stream is opened on the server side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/14-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project using the CLI tool\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Creating Production Repair Migration\nDESCRIPTION: Command to create a repair migration targeting production database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --mode production\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Infrastructure Configuration\nDESCRIPTION: Command to apply the Terraform configuration and deploy the infrastructure to GCP. This process takes approximately 15 minutes to complete.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Default Referential Action in ID Relations\nDESCRIPTION: Shows the default settings for referential actions in one-to-one ID relations. NoAction is used for updates, while Cascade is applied for deletions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparentId: int?, relation(parent=model_table, onUpdate=NoAction, onDelete=Cascade)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Login Endpoint in Serverpod\nDESCRIPTION: Example of a custom login endpoint that authenticates users and issues tokens.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass UserEndpoint extends Endpoint {\n  Future<LoginResponse> login(\n    Session session,\n    String username,\n    String password,\n  ) async {\n    var identifier = authenticateUser(session, username, password);\n    if (identifier == null) return null;\n\n    return issueMyToken(identifier, scopes: {});\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform in Bash\nDESCRIPTION: Sets an environment variable with the production database password for Terraform to use during deployment. The password is retrieved from the config/passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Compatible File Paths for S3 in Serverpod\nDESCRIPTION: Example of creating a file path that's compatible with S3 storage. This avoids using leading slashes and uses standard characters and numbers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n'profile/$userId/images/avatar.png'\n```\n\n----------------------------------------\n\nTITLE: Adding Shared Package as Dependency in pubspec.yaml\nDESCRIPTION: Example showing how to update the pubspec.yaml files in both server and client projects to include the shared package as a dependency.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  my_project_shared:\n    path: ../my_project_shared\n  ...\n```\n\n----------------------------------------\n\nTITLE: Adding serverpod_auth_server Dependency in YAML\nDESCRIPTION: This snippet shows how to add the serverpod_auth_server dependency to the server's pubspec.yaml file. It specifies the package name and version range.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Imports in Serverpod Tests - Do Pattern\nDESCRIPTION: Demonstrates the correct way to import test tools by using only the generated test tools file which re-exports all necessary helpers and types.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Only import the generated test tools file.\n// It re-exports all helpers and types that are needed.\nimport 'serverpod_test_tools.dart'; ✅\n```\n\n----------------------------------------\n\nTITLE: Receiving Stream Messages in Flutter Client\nDESCRIPTION: Implementation of a listener for incoming messages from a server endpoint using Dart's async/await for loop.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/09-streams.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration using Standard Server Runtime\nDESCRIPTION: Command to apply a repair migration during server startup using the standard runtime mode. The repair migration is applied as part of the startup sequence.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Defining Child Class for Sealed Hierarchy in YAML\nDESCRIPTION: Shows how to define a child class that extends a sealed parent class using Serverpod's experimental sealed classes feature in YAML format.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    age: int\n```\n\n----------------------------------------\n\nTITLE: Signing Out All Devices Using Serverpod SessionManager in Dart\nDESCRIPTION: Signs out a user from all their authenticated devices using the SessionManager. Returns a boolean indicating success or failure of the operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nawait sessionManager.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Declaring Freezed Custom Class in Serverpod's generator.yaml\nDESCRIPTION: Shows how to declare a Freezed custom class in the config/generator.yaml file, allowing Serverpod to recognize and use the custom class for serialization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/03-serialization.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Finding a Row by ID in Serverpod using Dart\nDESCRIPTION: Retrieves a single Company row from the database by its 'id' using the 'findById' method. Returns the model or null if not found.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Updating Specific Columns in Multiple Rows\nDESCRIPTION: Shows how to update specific columns in multiple records while leaving others unchanged.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name', address: 'Baker Street')).toList();\nvar updatedCompanies = await Company.db.update(session, companies, columns: (t) => [t.name]);\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI with Dart\nDESCRIPTION: Command to install the Serverpod command-line interface globally using Dart pub. This is the first step in setting up Serverpod development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Defining ImageData Model in YAML\nDESCRIPTION: YAML definition for the ImageData model representing the entire image with pixels, width, and height.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ImageData\nfields:\n  pixels: ByteData\n  width: int\n  height: int\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Expression in Dart with Serverpod\nDESCRIPTION: This snippet demonstrates how to find multiple rows in a database table using an expression and limit with Serverpod's Dart API.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Module Relation with Bridge Table - Company Model\nDESCRIPTION: Company model definition showing the inverse relationship to User model, completing the one-to-many relationship example.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<User>?, relation(name=company_employee)\n```\n\n----------------------------------------\n\nTITLE: Default Referential Actions for ID Relations in Serverpod\nDESCRIPTION: Shows the default referential actions applied when using an ID relation. By default, ID relations use NoAction for onUpdate and Cascade for onDelete operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparentId: int?, relation(parent=model_table, onUpdate=NoAction, onDelete=Cascade)\n```\n\n----------------------------------------\n\nTITLE: Updated Authentication Information Retrieval\nDESCRIPTION: Demonstrates the new way to retrieve authenticated user information and scopes using the authenticated getter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal authenticated = await session.authenticated;\n\n//Read authenticated userId\nint? userId = authenticated?.userId;\n\n//Read scopes\nSet<Scopes>? scopes = authenticated?.scopes;\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Server and Flutter App\nDESCRIPTION: These bash commands demonstrate how to start the database, server, and Flutter app for development and testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Installing Pixels Package in Flutter Project\nDESCRIPTION: This command adds the 'pixels' package to the Flutter project, which is used for drawing the pixel editor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd pixorama_flutter\nflutter pub add pixels\n```\n\n----------------------------------------\n\nTITLE: Inserting a Row into the Database\nDESCRIPTION: Example of creating a Company object and inserting it into the database using the generated ORM methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nmyCompany = await Company.db.insertRow(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project\nDESCRIPTION: Generate a new Serverpod project with three Dart packages: server, client, and Flutter app, using the serverpod create command\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Explicit One-to-many Foreign Key Definition in YAML\nDESCRIPTION: Illustrates defining a one-to-many relationship using a foreign key field in the Employee entity referencing the Company.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation\n```\n\n----------------------------------------\n\nTITLE: Configuring Google API Sign-In with YouTube Scope\nDESCRIPTION: Demonstrates how to add YouTube API scope to Google Sign-In and access user's YouTube data on the server side\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  scopes: [YouTubeApi.youtubeReadonlyScope],\n  // other required parameters\n)\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar googleClient = await authClientForUser(session, userId);\n\nif (googleClient != null) {\n  var youtubeApi = YouTubeApi(googleClient);\n\n  var favorites = await youTubeApi.playlistItems.list(\n    ['snippet'],\n    playlistId: 'LL', // Liked List\n  );\n}\nelse {\n  // The user hasn't signed in with Google.\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Rows with Serverpod in Dart\nDESCRIPTION: In Dart, use Serverpod to insert a new row into the database by calling the insert method on the serializable class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Removing a Message Listener in Serverpod (Dart)\nDESCRIPTION: Shows how to manually remove a listener from a channel when it's no longer needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/16-server-events.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myListenerCallback = (message) {\n  print('Received message: $message');\n};\n// Register the listener\nsession.messages.addListener('user_updates', myListenerCallback);\n\n// Remove the listener\nsession.messages.removeListener('user_updates', myListenerCallback);\n```\n\n----------------------------------------\n\nTITLE: Updating Pubspec Files in Serverpod\nDESCRIPTION: Command to generate updated pubspec.yaml files from templates. This should be used instead of directly editing pubspec.yaml files when making dependency changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/07-contribute.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Model definition with deprecated 'parent' keyword\nDESCRIPTION: Example of a model definition using the deprecated 'parent' keyword to define relationships between tables in Serverpod 1.1 and earlier.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  parentId: int, parent=example\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration in Dart\nDESCRIPTION: Configuration code to enable unsecure random number generation in the authentication module. Default behavior now requires secure random number generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: true,\n));\n```\n\n----------------------------------------\n\nTITLE: Documented Class Model\nDESCRIPTION: Example showing how to add documentation comments to class and field definitions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Commands to initialize Terraform and apply the infrastructure configuration to AWS. The init command is only needed for first-time deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Row with Expression in Serverpod\nDESCRIPTION: This Dart code shows how to find a single row using a where expression with the findSingleRow method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Database-Only Field Definition in YAML\nDESCRIPTION: Demonstrates how to define fields that are stored in the database but excluded from the API protocol.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: UserData\nfields:\n  name: String\n  password: String, database\n```\n\n----------------------------------------\n\nTITLE: Adding Database Indexes in YAML for Serverpod\nDESCRIPTION: This snippet demonstrates how to add database indexes to improve performance, defined in the YAML file for a Company class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Default Serverpod Configuration in Dart\nDESCRIPTION: The default configuration used when no YAML config files exist, no environment variables are configured, and no Dart config is supplied.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/07-configuration.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nServerpodConfig(\n  apiServer: ServerConfig(\n    port: 8080,\n    publicHost: 'localhost',\n    publicPort: 8080,\n    publicScheme: 'http',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Authentication Information Retrieval Updates\nDESCRIPTION: Demonstrates the new way to retrieve authenticated user information and scopes in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal authenticated = await session.authenticated;\n\n//Read authenticated userId\nint? userId = authenticated?.userId;\n\n//Read scopes\nSet<Scopes>? scopes = authenticated?.scopes;\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage in Serverpod\nDESCRIPTION: Configuration method to add Google Cloud Storage as a backend for file storage with custom settings\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\npod.addCloudStorage(gcp.GoogleCloudStorage(\n  serverpod: pod,\n  storageId: 'public',\n  public: true,\n  region: 'auto',\n  bucket: 'my-bucket-name',\n  publicHost: 'storage.myapp.com',\n));\n```\n\n----------------------------------------\n\nTITLE: Bulk Detaching Rows in Serverpod Relations\nDESCRIPTION: Demonstrates how to remove multiple employee-company associations in a single operation using the detach method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detach.employees(session, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Enum Default Values Configuration\nDESCRIPTION: Configuration for enum default values in a class definition, showing both byName and byIndex enum defaults.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nclass: EnumDefault\ntable: enum_default\nfields:\n  byNameEnumDefault: ByNameEnum, default=byName1\n  byIndexEnumDefault: ByIndexEnum, default=byIndex1\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Exception Fields in YAML for Serverpod\nDESCRIPTION: This YAML snippet demonstrates how to define default values for fields in a serializable exception named 'MyException'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/04-exceptions.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String, default=\"An error occurred\"\n  errorCode: int, default=1001\n```\n\n----------------------------------------\n\nTITLE: Converting String Scopes to Scope Objects\nDESCRIPTION: Demonstrates how to convert string-based scopes from a JWT token into Scope objects used by Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/05-custom-overrides.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nList<String> scopes = extractScopes(token);\nSet<Scope> userScopes = scopes.map((scope) => Scope(scope)).toSet();\n```\n\n----------------------------------------\n\nTITLE: Client-Side Stream Message Handling\nDESCRIPTION: Shows how to receive and send messages through the WebSocket connection on the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Pixels Package in Flutter\nDESCRIPTION: Command to add the pixels package dependency to the Flutter project for pixel art editing functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd pixorama_flutter\nflutter pub add pixels\n```\n\n----------------------------------------\n\nTITLE: Correct Test Dependency Import in Dart\nDESCRIPTION: Demonstrates the proper way to import test dependencies using only the generated test tools file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Only import the generated test tools file.\n// It re-exports all helpers and types that are needed.\nimport 'serverpod_test_tools.dart'; ✅\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Signed-In User Information\nDESCRIPTION: Retrieves the current user's information using the signedInUser property of the SessionManager. Returns a UserInfo object or null if no user is signed in.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nsessionManager.signedInUser;\n```\n\n----------------------------------------\n\nTITLE: Detaching Single Row in Serverpod Relations\nDESCRIPTION: Shows how to remove the association between an employee and a company using detachRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detachRow.employees(session, employee!);\n```\n\n----------------------------------------\n\nTITLE: Bulk Attaching Rows in Serverpod Relations\nDESCRIPTION: Demonstrates how to associate multiple employees with a company in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.attach.employees(session, company!, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod LSP Server via Command Line\nDESCRIPTION: Command to initialize and run the Serverpod Language Server Protocol server which provides diagnostics for YAML protocol files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/09-tools/02-lsp.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod language-server\n```\n\n----------------------------------------\n\nTITLE: Tagging a Repair Migration in Serverpod CLI\nDESCRIPTION: Command to create a tagged repair migration, useful for identifying specific repair actions. The tag is appended to the migration name.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --tag \"reset-migrations\"\n```\n\n----------------------------------------\n\nTITLE: Manual Docker Container Setup\nDESCRIPTION: Manually start Postgres, Redis, and Docker containers using docker-compose for more granular server management\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/index.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d --build\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Defining Child Class of Sealed Parent\nDESCRIPTION: YAML definition for a child class that extends a sealed parent class, maintaining the type safety benefits of sealed hierarchies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/20-experimental.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    age: int\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Not Like Filter in Dart\nDESCRIPTION: Shows how to use the notLike filter to exclude users based on partial string matching on names.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notLike('B%')\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Dart SDK Version in Pubspec\nDESCRIPTION: Updates to the pubspec.yaml configuration to support Dart 3.0, which is required for Serverpod 1.2.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=2.19.0 <4.0.0'\n```\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Records in Dart\nDESCRIPTION: Shows different methods for deleting database records, including single row and conditional deletion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Ordering Results in Queries in Dart\nDESCRIPTION: Ordering query results by specifying a column. Use the `orderBy` parameter with Serverpod's `find` method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/05-database-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\\n  session,\\n  orderBy: Company.t.name,\\n);\n```\n\n----------------------------------------\n\nTITLE: Sorting Companies by Name Ascending - Dart\nDESCRIPTION: Fetches all companies from the database and sorts them in ascending order by their name using the 'orderBy' parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Dev Dependencies in pubspec.yaml for Dart\nDESCRIPTION: Includes essential packages as development dependencies in the pubspec.yaml file for testing in Dart projects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package\n  test: ^1.24.2\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Commands to initialize Terraform and apply the infrastructure configuration to AWS. The init command is only needed for first-time deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieving User ID from Session in Serverpod\nDESCRIPTION: Gets the ID of the currently authenticated user from the session object. This is a fundamental operation for identifying the logged-in user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = (await session.authenticated)?.userId;\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Installation\nDESCRIPTION: Command to verify that Serverpod CLI is properly installed by displaying the help menu. This confirms that the installation was successful and the command is accessible.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod\n```\n\n----------------------------------------\n\nTITLE: Explicit One-to-Many Relationship with Foreign Key\nDESCRIPTION: Demonstrates how to define a one-to-many relationship using a foreign key field in the Employee entity.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/02-one-to-many.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  name: String\n  companyId: int, relation\n```\n\n----------------------------------------\n\nTITLE: Requesting YouTube Scope with SignInWithGoogleButton (Dart)\nDESCRIPTION: This snippet demonstrates how to add the YouTube scope to the `SignInWithGoogleButton` widget. This will prompt the user to grant permission for the application to access their YouTube data during the sign-in process. The scope is added to the `additionalScopes` parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/02-google.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  ...\n  additionalScopes: const ['https://www.googleapis.com/auth/youtube'],\n)\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to start Docker containers and run the Serverpod server with migrations\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Optional One-to-One Relationship in Serverpod YAML\nDESCRIPTION: Demonstrates how to make a one-to-one relationship optional using the optional keyword, allowing the foreign key to be nullable.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/03-relations/01-one-to-one.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# user.yaml\nclass: User\ntable: user\nfields:\n  address: Address?, relation(optional)\nindexes:\n  user_address_unique_idx:\n    fields: addressId\n    unique: true\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Message to Serverpod Endpoint in Dart\nDESCRIPTION: This snippet demonstrates how to send a message to a server endpoint using the sendStreamMessage method in a Serverpod client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/09-streams.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Default Object Relation Configuration in Serverpod\nDESCRIPTION: Shows the default referential action configuration for object relations with NoAction for both update and delete operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: Model?, relation(onUpdate=NoAction, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: Defining Note Object with Database Table in YAML\nDESCRIPTION: Updated YAML configuration that includes a database table definition for the Note object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\ntable: note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Nested Include Operations in Serverpod\nDESCRIPTION: Shows how to include deeply nested related objects in a query, demonstrating multi-level relationship traversal.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(\n  session,\n  employeeId,\n  include: Employee.include(\n    company: Company.include(\n      address: Address.include(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation Count Filter in Dart\nDESCRIPTION: Illustrates how to filter users based on the count of related one-to-many objects (orders in this case).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.count() > 3\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with Serverpod in Dart\nDESCRIPTION: This snippet demonstrates how to execute raw SQL queries using Serverpod when more advanced database operations are needed.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.query('SELECT * FROM mytable WHERE ...');\n```\n\n----------------------------------------\n\nTITLE: Server Output Log Example\nDESCRIPTION: Example of expected server output showing version, mode, and listening ports.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSERVERPOD version: 2.x.x, mode: development, time: 2022-09-12 17:22:02.825468Z\nInsights listening on port 8081\nServer default listening on port 8080\nWebserver listening on port 8082\n```\n\n----------------------------------------\n\nTITLE: Dart SDK Installation Script for AWS\nDESCRIPTION: Bash command for downloading specific version of Dart SDK on Linux servers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://storage.googleapis.com/dart-archive/channels/stable/release/3.5.1/sdk/dartsdk-linux-x64-release.zip\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Firebase Sign-In Flow\nDESCRIPTION: Code example showing how to programmatically trigger the Firebase authentication UI using the signInWithFirebase method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait signInWithFirebase(\n  context: context, \n  caller: client.modules.auth, \n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Legacy Serialization Implementation in Dart\nDESCRIPTION: Example of the previous serialization approach that required a serializationManager parameter for object conversion.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal SerializationManager serializationManager = Protocol();\nfinal ClassName test = ClassName.fromJson(json, serializationManager);\n```\n\n----------------------------------------\n\nTITLE: Database Insert Operation in Dart\nDESCRIPTION: Code example showing how to insert a new row into the database using Serverpod's ORM.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = Company(name: 'Serverpod corp.', foundedDate: DateTime.now());\nmyCompany = await Company.db.insertRow(session, myCompany);\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Client\nDESCRIPTION: Demonstrates how to initialize a singleton client object for server communication, including connectivity monitoring setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Module Packages\nDESCRIPTION: Shows how to add Flutter-specific module packages in the Flutter app's pubspec.yaml, including authentication-related packages.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/10-modules.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: UuidValue Default Values in YAML\nDESCRIPTION: Examples of setting UUID default values using 'random' keyword and specific UUID strings.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nuuidDefaultRandom: UuidValue, default=random\nuuidDefaultUuid: UuidValue, default='550e8400-e29b-41d4-a716-446655440000'\n```\n\n----------------------------------------\n\nTITLE: Database SSL Configuration Example\nDESCRIPTION: YAML configuration example showing how to enable SSL for database connections in Serverpod environment configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  host: redis.private-production.examplepod.com\n  port: 5432\n  name: serverpod\n  user: postgres\n  requireSsl: true\n```\n\n----------------------------------------\n\nTITLE: Subsequent Cursor-Based Pagination Requests\nDESCRIPTION: Demonstrates how to implement subsequent requests in cursor-based pagination using the last ID as cursor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint cursor = lastCompanyIdFromPreviousPage; // This is typically sent by the client\n\nvar companies = await Company.db.find(\n  session,\n  where: Company.t.id > cursor,\n  orderBy: (t) => t.id,\n  limit: recordsPerPage,\n);\n```\n\n----------------------------------------\n\nTITLE: Executing Repair Migration Command\nDESCRIPTION: Command to apply a repair migration during server startup using the standard runtime mode.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndart run bin/main.dart --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Creating Serverpod Mini Project for Pixorama\nDESCRIPTION: Command to create a new Serverpod Mini project named Pixorama using the serverpod CLI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create pixorama --mini\n```\n\n----------------------------------------\n\nTITLE: Monitoring Authentication Changes - Dart\nDESCRIPTION: Adds a listener to the SessionManager that rebuilds the UI when the user's sign-in state changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  sessionManager.addListener(() {\n    setState(() {});\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Data from Storage\nDESCRIPTION: Server-side code to directly retrieve file content from storage, returning the file as ByteData.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/08-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migrations in Serverpod\nDESCRIPTION: Command for creating database migrations in Serverpod. Migrations are used to evolve your database schema as your application changes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Sorting in Descending Order with Serverpod\nDESCRIPTION: Shows how to retrieve companies sorted by name in descending order by setting the orderDescending parameter to true.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/08-sort.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.name,\n  orderDescending: true,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Diagnostic Event Endpoint\nDESCRIPTION: Example of an endpoint implementation that submits diagnostic events.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nclass DiagnosticEventTestEndpoint extends Endpoint {\n  Future<String> submitExceptionEvent(Session session) async {\n    try {\n      throw Exception('An exception is thrown');\n    } catch (e, stackTrace) {\n      session.serverpod.experimental.submitDiagnosticEvent(\n        ExceptionEvent(e, stackTrace),\n        session: session,\n      );\n    }\n    return 'success';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Listener Lifecycle in Dart using Serverpod\nDESCRIPTION: Demonstrates how to add and remove a message listener from a channel.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/16-server-events.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myListenerCallback = (message) {\n  print('Received message: $message');\n};\n// Register the listener\nsession.messages.addListener('user_updates', myListenerCallback);\n\n// Remove the listener\nsession.messages.removeListener('user_updates', myListenerCallback);\n```\n\n----------------------------------------\n\nTITLE: Default Object Relation Configuration\nDESCRIPTION: Shows the default referential action configuration for object relations with NoAction for both onUpdate and onDelete.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparent: Model?, relation(onUpdate=NoAction, onDelete=NoAction)\n```\n\n----------------------------------------\n\nTITLE: SerializableEntity Legacy Implementation\nDESCRIPTION: Example of the deprecated SerializableEntity class usage that will be removed in version 3.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass extends SerializableEntity {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Out All Devices in Dart with Serverpod\nDESCRIPTION: This snippet demonstrates how to sign out a user from all devices using the StatusEndpoint in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutAllDevices();\n```\n\n----------------------------------------\n\nTITLE: Retrieving User ID from Session in Serverpod\nDESCRIPTION: Gets the user ID of the currently authenticated user from the session object. This is a basic way to identify the logged-in user.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/03-working-with-users.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = (await session.authenticated)?.userId;\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization in Serverpod 2.0\nDESCRIPTION: Updated custom fromJson constructor for Serverpod 2.0, demonstrating the removal of the serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Documenting Class Model\nDESCRIPTION: YAML definition showing how to add documentation comments to classes and fields\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n### Information about a company.\nclass: Company\nfields:\n  ### The name of the company.\n  name: String\n\n  ### The date the company was founded, if known.\n  foundedDate: DateTime?\n\n  ### A list of people currently employed at the company.\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: User Authentication Methods in Serverpod 2.0\nDESCRIPTION: Demonstrates the new static methods for user authentication and sign out operations using UserAuthentication class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nUserAuthentication.signInUser(session, userId, 'provider');\n\nUserAuthentication.signOutUser(session);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Not In Set Filter in Dart\nDESCRIPTION: Demonstrates how to use the notInSet filter to fetch users with names not matching a set of values.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.name.notInSet({'Alice', 'Bob'})\n);\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers Manually for Serverpod\nDESCRIPTION: Command to manually start the required Docker containers for Postgres and Redis, which are dependencies for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/index.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod server with migrations flag\nDESCRIPTION: Command to start the Serverpod server with the --apply-migrations flag, which initializes the database using the created migrations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User ID in Dart with Serverpod\nDESCRIPTION: Demonstrates how to retrieve the authenticated user's ID using the Session object in a Serverpod endpoint method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/02-basics.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var userId = await session.auth.authenticatedUserId;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverpod Development Server\nDESCRIPTION: YAML configuration for development server settings including port, host, and scheme configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiServer:\n  port: 8080\n  publicHost: localhost # Change this line\n  publicPort: 8080\n  publicScheme: http\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Serialization Package with Dart CLI\nDESCRIPTION: Command to add the serverpod_serialization package to a shared package project, which provides access to the SerializationManager class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my_project_shared\n$ dart pub add serverpod_serialization\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Pepper in Serverpod\nDESCRIPTION: This YAML snippet demonstrates how to configure a password pepper in the config/passwords.yaml file for additional security in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  emailPasswordPepper: 'your-pepper'\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Sign-In Button\nDESCRIPTION: Example of implementing a Google sign-in button in Flutter with success and failure handlers.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  caller: client.modules.auth,\n  onSignedIn: () { ... handle sign in here ... },\n  onFailure: () { ... handle fail to sign in here ... },\n)\n```\n\n----------------------------------------\n\nTITLE: Non-Persistent Field Configuration in Serverpod\nDESCRIPTION: Shows how to mark a field as non-persistent using the !persist keyword, preventing it from being stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Authorization Scopes\nDESCRIPTION: Demonstrates how to create custom authorization scopes by extending the Scope class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/02-basics.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomScope extends Scope {\n  const CustomScope(String name) : super(name);\n\n  static const userRead = CustomScope('userRead');\n  static const userWrite = CustomScope('userWrite');\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation None Filter in Dart\nDESCRIPTION: Shows how to filter users who have no related one-to-many objects (orders in this case).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.none()\n);\n```\n\n----------------------------------------\n\nTITLE: Direct File Retrieval from Server\nDESCRIPTION: Method to directly retrieve file data from the server storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myByteData = await session.storage.retrieveFile(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Non-Persistent Field Configuration in YAML\nDESCRIPTION: Shows how to mark a field as non-persistent using the !persist keyword, preventing it from being stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Object Storage Configuration in YAML\nDESCRIPTION: Shows how to configure storing referenced objects as JSON structures in the database using YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee> # Stored as JSON structure\n```\n\n----------------------------------------\n\nTITLE: Multi-Column Sorting in Serverpod\nDESCRIPTION: Demonstrates sorting by multiple columns using orderByList, sorting companies by name (descending) and id (ascending).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-sort.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderByList: (t) => [\n    Order(column: t.name, orderDescending: true), \n    Order(column: t.id),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Sign-in Button with Youtube Scope in Dart\nDESCRIPTION: Example showing how to set up a Google Sign-in button with additional YouTube API access scope.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/09-authentication.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithGoogleButton(\n  scopes: [YouTubeApi.youtubeReadonlyScope],\n  // other required parameters\n)\n```\n\n----------------------------------------\n\nTITLE: Revoking Specific Authentication Key\nDESCRIPTION: Shows methods for revoking authentication keys using different approaches in Serverpod\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/06-custom-providers.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait UserAuthentication.revokeAuthKey(\n  session,\n  authKeyId: 'auth-key-id-here',\n);\n```\n\n----------------------------------------\n\nTITLE: Client Stream Message Listener\nDESCRIPTION: Demonstrates how to listen for incoming messages from a server endpoint stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/11-streams.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait for (var message in client.myEndpoint.stream) {\n  _handleMessage(message);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Installation\nDESCRIPTION: Command to verify that Serverpod CLI tools are properly installed by displaying the help menu. This confirms the installation was successful.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Rows in Serverpod using Dart\nDESCRIPTION: Shows how to insert multiple rows in a single atomic operation using the insert method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar rows = [Company(name: 'Serverpod'), Company(name: 'Google')];\nvar companies = await Company.db.insert(session, rows);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget in Serverpod\nDESCRIPTION: Example of creating a custom Widget class that uses Mustache templates. Demonstrates how to pass values to the template system.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/11-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Note Definition with Database Table\nDESCRIPTION: The YAML snippet extends the Note class definition to include a database table binding. This allows the Serverpod generator to create code that interacts with the specified table.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n### Holds a note with a text written by the user.\nclass: Note\ntable: note\nfields:\n  ### The contents of the note.\n  text: String\n```\n\n----------------------------------------\n\nTITLE: Non-Persistent Field Configuration in YAML\nDESCRIPTION: Demonstrates how to mark a field as non-persistent using the !persist keyword, preventing it from being stored in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Module Command\nDESCRIPTION: Terminal command to create a new Serverpod module using the create command with module template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/08-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relation Filtering\nDESCRIPTION: Filtering based on related object properties in one-to-one relationships.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.address.street.like('%road%')\n);\n```\n\n----------------------------------------\n\nTITLE: Example Serverpod Endpoint for Shared Stream Communication\nDESCRIPTION: A simplified endpoint that demonstrates how to implement shared stream functionality in Serverpod, allowing multiple users to post messages to and listen for messages from a common stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/03-advanced-examples.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass CommunicationExampleEndpoint {\n  static const sharedStreamName = 'shared-stream';\n  Future<void> postNumberToSharedStream(Session session, int number) async {\n    await session.messages\n        .postMessage(sharedStreamName, SimpleData(num: number));\n  }\n\n  Stream<int> listenForNumbersOnSharedStream(Session session) async* {\n    var sharedStream =\n        session.messages.createStream<SimpleData>(sharedStreamName);\n\n    await for (var message in sharedStream) {\n      yield message.num;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User Object Management in Streaming Sessions\nDESCRIPTION: Demonstrates how to set and manage user objects during a streaming session on the server-side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/15-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling Future Call with Delay\nDESCRIPTION: Shows how to schedule a future call to be executed after a specific duration using futureCallWithDelay method\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/14-scheduling.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait session.serverpod.futureCallWithDelay(\n  'exampleFutureCall',\n  data,\n  const Duration(hours: 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Managing Listeners in Dart\nDESCRIPTION: Demonstrates adding and removing a specific listener callback from a channel\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myListenerCallback = (message) {\n  print('Received message: $message');\n};\n// Register the listener\nsession.messages.addListener('user_updates', myListenerCallback);\n\n// Remove the listener\nsession.messages.removeListener('user_updates', myListenerCallback);\n```\n\n----------------------------------------\n\nTITLE: Default ID Relation Configuration in Serverpod\nDESCRIPTION: Shows the default referential action configuration for ID relations with NoAction for updates and Cascade for deletes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/03-relations/05-referential-actions.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparentId: int?, relation(parent=model_table, onUpdate=NoAction, onDelete=Cascade)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Widget - Dart\nDESCRIPTION: This snippet shows how to define a custom Widget by extending the Widget class. It sets the title in the values field, which is used in an associated HTML template.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/18-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test\nDESCRIPTION: Commands to run a specific test file in the test server directory\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/07-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Row in Serverpod using Dart\nDESCRIPTION: Shows how to delete a single row from the database using the deleteRow method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \nvar companyDeleted = await Company.db.deleteRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Less Than Comparison in Dart\nDESCRIPTION: Demonstrates how to use the less than operator to fetch users younger than a specific age.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age < 25\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Server Module Dependency in pubspec.yaml\nDESCRIPTION: Demonstrates how to add a server module dependency, specifically the serverpod_auth_server module, to the project's server pubspec.yaml file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Failures in Flutter Serverpod App\nDESCRIPTION: Implements a method to handle server connection failures by updating the application state\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverpod Client\nDESCRIPTION: Demonstrates how to initialize the client object for connecting to the Serverpod server with connectivity monitoring.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication with Unsecure Random in Dart\nDESCRIPTION: Configuration code to enable unsecure random number generation in the authentication module using AuthConfig.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: true,\n));\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Dependencies in Flutter\nDESCRIPTION: Commands to add Firebase Core, Auth, and UI Auth packages to a Flutter project and configure Firebase.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ flutter pub add firebase_core firebase_auth firebase_ui_auth\n$ flutterfire configure\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Exception in YAML\nDESCRIPTION: Defines a custom exception with message and error type fields using Serverpod's exception definition syntax\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/04-exceptions.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\\nfields:\\n  message: String\\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Shows how to call the server endpoint method from the client side after code generation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Storing Database Password in YAML for Serverpod\nDESCRIPTION: This YAML snippet demonstrates how to store the database password for the development environment in Serverpod's passwords.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Sealed Parent Class\nDESCRIPTION: Example of creating a sealed parent class in a Serverpod model file to enable exhaustive type checking\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/20-experimental.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nsealed: true\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Updating a Single Row in Serverpod using Dart\nDESCRIPTION: Shows how to update a single row in the database using the updateRow method in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId); // Fetched company has its id set \ncompany.name = 'New name';\nvar updatedCompany = await Company.db.updateRow(session, company);\n```\n\n----------------------------------------\n\nTITLE: Duration Default Value in YAML\nDESCRIPTION: Example of setting a default duration value using days, hours, minutes, seconds, and milliseconds format.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndurationDefault: Duration, default=1d 2h 10min 30s 100ms\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Logical AND Operator in Dart\nDESCRIPTION: Demonstrates how to combine multiple conditions using the logical AND operator in a query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.equals('Alice') & (t.age > 25))\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Child Class with Inheritance\nDESCRIPTION: Demonstrates extending a parent class and adding additional fields in a Serverpod model file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/20-experimental.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ChildClass\nextends: ParentClass\nfields:\n    int: age\n```\n\n----------------------------------------\n\nTITLE: Bulk Detaching Rows in Serverpod Relations\nDESCRIPTION: Demonstrates how to remove multiple employee associations in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detach.employees(session, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Folder Structure for Shared Package in Serverpod\nDESCRIPTION: Example of the recommended folder structure when using a shared package for custom serializable classes in a Serverpod project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n├── my_project_client\n├── my_project_flutter\n├── my_project_server\n├── my_project_shared\n```\n\n----------------------------------------\n\nTITLE: Configuring Freezed Custom Class in generator.yaml\nDESCRIPTION: Example showing how to declare a Freezed-based custom class in the generator.yaml configuration file for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/03-serialization.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nextraClasses:\n  - package:my_shared_package/my_shared_package.dart:FreezedCustomClass\n```\n\n----------------------------------------\n\nTITLE: Finding User Information by User ID\nDESCRIPTION: Retrieve detailed user information using the Users class static method with a session and user ID\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar userInfo = await Users.findUserByUserId(session, userId!);\n```\n\n----------------------------------------\n\nTITLE: Deprecated SerializableEntity Usage\nDESCRIPTION: Example of a class extending the deprecated SerializableEntity, which will be removed in Serverpod 3.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass extends SerializableEntity {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Detaching Rows in Serverpod Relations\nDESCRIPTION: Shows how to remove multiple employee-company associations in a single operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar employee = await Employee.db.findById(session, employeeId);\n\nawait Company.db.detach.employees(session, [employee!]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Sign-In Button\nDESCRIPTION: Implementation of a Firebase sign-in button using Serverpod's SignInWithFirebaseButton widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithFirebaseButton(\n  caller: client.modules.auth,\n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n  onFailure: () => print('Failed to sign in with Firebase.'),\n  onSignedIn: () => print('Signed in with Firebase.'),\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Auth Module Code\nDESCRIPTION: Generate the client code and endpoint methods for the auth module using the Serverpod CLI generator.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Setting Dart Version in AWS Installation Script\nDESCRIPTION: Bash script configuration for specifying Dart SDK version during AWS deployment installation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nDART_VERSION=3.5.1\n\n```\n\n----------------------------------------\n\nTITLE: Manual Firebase Sign-In Implementation\nDESCRIPTION: Direct method call implementation for Firebase authentication using Serverpod's signInWithFirebase method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait signInWithFirebase(\n  context: context, \n  caller: client.modules.auth, \n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Server Startup Commands\nDESCRIPTION: Command line instructions for starting the database and server components.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command\nDESCRIPTION: Command to generate and apply database migrations for the Note table\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator for Test Tools in YAML\nDESCRIPTION: Adds the server_test_tools_path key to the generator.yaml file to specify the location for generated test tools.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Multiple Rows in Dart\nDESCRIPTION: Example of updating multiple company records in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name')).toList();\nvar updatedCompanies = await Company.db.update(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Between Filter in Dart\nDESCRIPTION: Demonstrates how to use the between filter to fetch users within a specific age range.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.age.between(18, 65)\n);\n```\n\n----------------------------------------\n\nTITLE: Manually Closing a Message Stream\nDESCRIPTION: Shows how to create a stream and manually cancel its subscription\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/16-server-events.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar stream = session.messages.createStream('user_updates');\nvar subscription = stream.listen((message) {\n    print('Received message: $message');\n});\n\nsubscription.cancel();\n```\n\n----------------------------------------\n\nTITLE: Duration Default Value in YAML\nDESCRIPTION: Example of setting a default duration value using the format 'Xd Xh Xmin Xs Xms'.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndurationDefault: Duration, default=1d 2h 10min 30s 100ms\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for Dart 3\nDESCRIPTION: Updates required in the Dockerfile to use Dart 3.0 as the base image for building Serverpod applications.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM dart:3.0 AS build\n\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Logical OR Operator in Dart\nDESCRIPTION: Demonstrates how to use the logical OR operator to combine multiple conditions in a query.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/06-filter.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.like('A%') | t.name.like('B%'))\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable for Terraform\nDESCRIPTION: Command to set the TF_VAR_DATABASE_PASSWORD_PRODUCTION environment variable required for Terraform deployment using the production password from config/passwords.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Rows by Filter in Serverpod\nDESCRIPTION: Demonstrates how to delete Company records that match a specific filter condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar companiesDeleted = await Company.db.deleteWhere(\n  session,\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Filter in Dart\nDESCRIPTION: Retrieving multiple company records with filtering and limit constraints.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Local Message in Dart\nDESCRIPTION: Demonstrates posting a message to a local channel using the postMessage method with a Serverpod model\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/16-server-events.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvar message = UserUpdate(); // Model that represents changes to user data.\nsession.messages.postMessage('user_updates', message);\n```\n\n----------------------------------------\n\nTITLE: Database Relation Definition in YAML\nDESCRIPTION: Demonstrates how to create a database relation between tables using the relation keyword for referenced objects.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  address: Address?, relation\n```\n\n----------------------------------------\n\nTITLE: iOS Client Configuration\nDESCRIPTION: Example of configuring the client with a specific IP address for iOS simulator compatibility.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar client = Client('http://192.168.1.117:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n```\n\n----------------------------------------\n\nTITLE: Pre-built Sign In with Email Button in Flutter\nDESCRIPTION: Using the SignInWithEmailButton widget for quick email authentication integration\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nSignInWithEmailButton(\n  caller: client.modules.auth,\n  onSignedIn: () {\n    // Optional callback when user successfully signs in\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod CLI Version\nDESCRIPTION: This command checks the installed version of the Serverpod CLI.  It is used to confirm that the CLI has been successfully updated to the latest version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod version\n```\n\n----------------------------------------\n\nTITLE: Filtering Related Lists in Serverpod\nDESCRIPTION: Demonstrates filtering included lists using where clause conditions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/07-relation-queries.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar user = await Company.db.findById(\n  session,\n  employeeId,\n  include: Company.include(\n    employees: Employee.includeList(\n      where: (t) => t.name.ilike('a%')\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Google Cloud Project\nDESCRIPTION: Command to set the default project ID for your Cloud Run service deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Configuring Passwords for Test Environment\nDESCRIPTION: Specifies the passwords for the test database and Redis in config/passwords.yaml to securely manage test credentials.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Class with Inheritance\nDESCRIPTION: Illustrates the resulting Dart class generated from the YAML definitions using Serverpod's experimental inheritance feature.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass ChildClass extends ParentClass {\n    String name\n    int age\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying File Upload in Dart\nDESCRIPTION: Server-side method to confirm the successful completion of a file upload to a specific storage location\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> verifyUpload(Session session, String path) async {\n  return await session.storage.verifyDirectFileUpload(\n    storageId: 'public',\n    path: path,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Server Docker Environment\nDESCRIPTION: Commands to start the Docker container for test server and setup tables\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/09-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server/docker_local\ndocker-compose up --build --detach\n./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Finding Database Records in Dart\nDESCRIPTION: Examples of querying database records using findById and findSingleRow with expressions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Users with One-to-Many Relation None Filter in Dart\nDESCRIPTION: Shows how to filter users that have no related one-to-many objects (orders).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/06-filter.md#2025-04-20_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.orders.none()\n);\n```\n\n----------------------------------------\n\nTITLE: Database Index Definition\nDESCRIPTION: Demonstrates how to add database indexes to table definitions for performance optimization.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>?, api\nindexes:\n  company_name_idx:\n    fields: name\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Sign-In Dependencies in Flutter\nDESCRIPTION: Configuration for adding the Serverpod Apple authentication package to a Flutter project's dependencies in pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Auth Flow with signInWithFirebase Method\nDESCRIPTION: Example of triggering the Firebase authentication UI programmatically using the signInWithFirebase method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/05-firebase.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nawait signInWithFirebase(\n  context: context, \n  caller: client.modules.auth, \n  authProviders: [\n    firebase.PhoneAuthProvider(),\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Parent Class in YAML for Inheritance\nDESCRIPTION: Demonstrates how to define a parent class in YAML format for use with Serverpod's experimental inheritance feature.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: ParentClass\nfields:\n    name: String\n```\n\n----------------------------------------\n\nTITLE: Configuring Diagnostic Event Handlers\nDESCRIPTION: Example of setting up diagnostic event handlers in Serverpod constructor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/20-experimental.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n  var serverpod = Serverpod(\n    ...\n    experimentalFeatures: ExperimentalFeatures(\n      diagnosticEventHandlers: [\n        AsEventHandler((event, {required space, required context}) {\n          print('$event  Origin is $space\\n  Context is ${context.toJson()}');\n        }),\n      ],\n    ),\n  );\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Multiple Rows in Serverpod\nDESCRIPTION: Example of updating multiple Company records in a single atomic operation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name')).toList();\nvar updatedCompanies = await Company.db.update(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Running Module Setup Commands\nDESCRIPTION: Illustrates the commands to run after adding a module to update dependencies and generate protocol files\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/06-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Creating a New Serverpod Project\nDESCRIPTION: Use the Serverpod CLI to create a new project with server, client, and Flutter packages\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features via CLI\nDESCRIPTION: Command to activate experimental features in Serverpod, with options to enable specific or all experimental capabilities\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/20-experimental.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate --experimental-features=all\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code for Auth Module\nDESCRIPTION: Generate the client code and endpoint methods for the auth module using the serverpod generate command line tool.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Shared Package in Serverpod\nDESCRIPTION: Example of a recommended folder structure for Serverpod projects with a shared package for custom serializable classes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n├── my_project_client\n├── my_project_flutter\n├── my_project_server\n├── my_project_shared\n```\n\n----------------------------------------\n\nTITLE: Table Relationships in YAML\nDESCRIPTION: Demonstrates how to define related tables using YAML configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# company.yaml\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee>?, api\n\n# employee.yaml\nclass: Employee\ntable: employee\nfields:\n  companyId: int\n  name: String\n  birthday: DateTime\n```\n\n----------------------------------------\n\nTITLE: Configuring Generator Test Tools Path in YAML\nDESCRIPTION: Adds the server_test_tools_path configuration to generator.yaml to enable test tools file generation\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Using Custom Class in Serverpod Endpoint\nDESCRIPTION: Example of using a custom serializable class in a Serverpod endpoint to return data to clients.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/03-serialization.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:relation_test_shared/relation_test_shared.dart';\nimport 'package:serverpod/serverpod.dart';\n\nclass ExampleEndpoint extends Endpoint {\n  Future<ClassName> getMyCustomClass(Session session) async {\n    return ClassName(\n      'John Doe',\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Module with Unsecure Random Generation\nDESCRIPTION: Setting up authentication configuration to enable unsecure random number generation in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nauth.AuthConfig.set(auth.AuthConfig(\n  allowUnsecureRandom: true,\n));\n```\n\n----------------------------------------\n\nTITLE: Updating Dart SDK Version in Pubspec\nDESCRIPTION: Updates to the pubspec.yaml configuration to support Dart 3.0 requirements.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Defining Company Model in YAML for Serverpod\nDESCRIPTION: YAML definition for a Company model in Serverpod, specifying the class name, table name, and fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Basic Table Model Definition in YAML\nDESCRIPTION: Defines a basic Company model with a database table mapping. Automatically includes an id field of type int?.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/02-models.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Generated Sealed Class Hierarchy in Dart\nDESCRIPTION: Shows the Dart implementation of a sealed class hierarchy with a parent and child class\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/20-experimental.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nsealed class ParentClass {\n    String name;\n}\n\nclass ChildClass extends ParentClass {\n    String name;\n    int age;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Apple Authentication Dependency in Pubspec\nDESCRIPTION: Adds the Serverpod Apple authentication package to the project's dependencies for Flutter applications\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/04-providers/03-apple.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Connecting WebSocket in Serverpod Client\nDESCRIPTION: Code snippet showing how to establish a WebSocket connection from the client to the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n```\n\n----------------------------------------\n\nTITLE: Serializable Class Definition\nDESCRIPTION: YAML configuration for defining a serializable Company class with name and foundedDate fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Rows with Filter in Dart\nDESCRIPTION: Example of finding multiple Company records with filtering and limit\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Counting Filtered Rows in Serverpod\nDESCRIPTION: Example of counting Company records that match a specific filter condition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nvar count = await Company.db.count(\n  session, \n  where: (t) => t.name.like('s%'),\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring serverpod_auth Module in YAML\nDESCRIPTION: This code adds the serverpod_auth module to the config/generator.yaml file, specifying a nickname for client reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Filtering by Related Object Properties\nDESCRIPTION: Demonstrates filtering users based on properties of related objects in one-to-one and one-to-many relationships\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => t.address.street.like('%road%')\n);\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Multiple Rows in Dart\nDESCRIPTION: Example of updating multiple Company records in a single atomic operation\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(session);\ncompanies = companies.map((c) => c.copyWith(name: 'New name')).toList();\nvar updatedCompanies = await Company.db.update(session, companies);\n```\n\n----------------------------------------\n\nTITLE: Database Row Update in Dart\nDESCRIPTION: Shows how to update existing database rows using Dart with the Serverpod session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Configuring Dart Version in AWS Installation Script\nDESCRIPTION: Bash script for specifying the Dart SDK version for AWS EC2 installation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nDART_VERSION=3.5.1\n\n```\n\n----------------------------------------\n\nTITLE: Finding Database Rows using Serverpod in Dart\nDESCRIPTION: These snippets show various ways to find database rows using Serverpod, including finding by ID and using expressions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/03-concepts/03-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Import Statement\nDESCRIPTION: Import statement for the loading screen widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_flutter/note_dialog.dart';\n```\n\n----------------------------------------\n\nTITLE: Module Reference in YAML Model\nDESCRIPTION: Example of referencing a module's serializable class in YAML model files.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: MyClass\nfields:\n  userInfo: module:auth:UserInfo\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serverpod CLI Locally\nDESCRIPTION: Commands to activate and use local Serverpod command-line interface\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/11-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tools/serverpod_cli\n$ dart pub get\n$ dart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Activating Serverpod CLI locally\nDESCRIPTION: These commands are used to activate the `serverpod` command-line interface (CLI) locally from the cloned repository. It navigates to the `tools/serverpod_cli` directory, gets the dependencies, and then activates the CLI globally using the `path` source.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/08-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"cd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\"\n```\n\n----------------------------------------\n\nTITLE: Updated pubspec.yaml Configuration\nDESCRIPTION: This is the updated pubspec.yaml configuration for Dart 3.0.0, which sets the environment SDK requirement to a newer version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nenvironment:\n  sdk: '>=3.0.0 <4.0.0'\n```\n\n----------------------------------------\n\nTITLE: Generating Serverpod Client Library\nDESCRIPTION: Command to generate client library code for the Serverpod endpoints from the server directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Row in Serverpod\nDESCRIPTION: Example of inserting a single Company record into the database using the insertRow method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar row = Company(name: 'Serverpod');\nvar company = await Company.db.insertRow(session, row);\n```\n\n----------------------------------------\n\nTITLE: Test Dependencies Configuration\nDESCRIPTION: Adds required test dependencies to pubspec.yaml for Serverpod testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  serverpod_test: <serverpod version> # Should be same version as the `serverpod` package\n  test: ^1.24.2\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Message to Serverpod Endpoint from Client\nDESCRIPTION: This code demonstrates how to send a message to a Serverpod endpoint's stream from a client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/15-streams.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Running the Serverpod Server Manually\nDESCRIPTION: Command to manually start the Serverpod server application after the Docker containers are running.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/index.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Updating Database Records in Dart\nDESCRIPTION: Demonstrates how to update existing database records using the update method.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Module Dependencies\nDESCRIPTION: Demonstrates adding Flutter-specific module packages to the Flutter app's pubspec.yaml\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n  serverpod_auth_apple_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password Environment Variable\nDESCRIPTION: Bash command to set the database password as an environment variable for Terraform deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ export TF_VAR_DATABASE_PASSWORD_PRODUCTION=\"<MY PRODUCTION PASSWORD>\"\n```\n\n----------------------------------------\n\nTITLE: Loading Screen Widget Implementation\nDESCRIPTION: Widget for displaying loading state and error handling with retry functionality.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/material.dart';\n\nclass LoadingScreen extends StatelessWidget {\n  const LoadingScreen({\n    this.exception,\n    required this.onTryAgain,\n    super.key,\n  });\n\n  final Exception? exception;\n  final VoidCallback onTryAgain;\n\n  @override\n  Widget build(BuildContext context) {\n    if (exception != null) {\n      return Center(\n        child: ElevatedButton(\n          onPressed: onTryAgain,\n          child: const Text('Try again'),\n        ),\n      );\n    } else {\n      return const Center(\n        child: CircularProgressIndicator(),\n      );\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Serverpod Request Size Limit\nDESCRIPTION: YAML configuration example showing how to modify the maximum request size limit.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmaxRequestSize: 1048576\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server\nDESCRIPTION: Commands to navigate to server directory, start Docker containers, and launch the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/index.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd mypod/mypod_server\ndocker-compose up --build --detach\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server Docker Container\nDESCRIPTION: Docker commands to build and start test server container with database setup\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/11-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tests/serverpod_test_server/docker-local\n$ docker-compose up --build --detach\n$ ./setup-tables\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Version\nDESCRIPTION: This command verifies the installed version of the Serverpod CLI, ensuring that it is updated to the latest version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod version\n```\n\n----------------------------------------\n\nTITLE: Serialization Implementation Before Serverpod 2.0\nDESCRIPTION: Example of model serialization before Serverpod 2.0, requiring SerializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal SerializationManager serializationManager = Protocol();\nfinal ClassName test = ClassName.fromJson(json, serializationManager);\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Configuration\nDESCRIPTION: Command to initialize Terraform configuration and download required modules for Serverpod deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/02-deploying-to-gce-terraform.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code for Auth Module in Bash\nDESCRIPTION: Generates the client code and endpoint methods for the auth module using the serverpod generate command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Logical Operators in Serverpod Filters\nDESCRIPTION: Combining multiple conditions using logical AND (&) and OR (|) operators.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/06-filter.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.equals('Alice') & (t.age > 25))\n);\n```\n\nLANGUAGE: dart\nCODE:\n```\nawait User.db.find(\n  where: (t) => (t.name.like('A%') | t.name.like('B%'))\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User ID from Session\nDESCRIPTION: Shows how to get the authenticated user's ID using the session object in a Serverpod application\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nvar userId = await session.auth.authorizedUserId;\n```\n\n----------------------------------------\n\nTITLE: Calling Serverpod Endpoint from Client\nDESCRIPTION: Shows how to call the server endpoint method from the client side.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/01-working-with-endpoints.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await client.example.hello('World');\n```\n\n----------------------------------------\n\nTITLE: Running Complete Test Suite - Bash Command\nDESCRIPTION: Command to run all Serverpod tests from the root directory of the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/06-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Database Row Insertion in Dart\nDESCRIPTION: Example of inserting a new row into the database using Dart with the Serverpod session object.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/03-database-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Activating Local Serverpod CLI\nDESCRIPTION: Steps to run the serverpod command line tool from a cloned repository\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/11-contribute.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd tools/serverpod_cli\n$ dart pub get\n$ dart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Database Delete Operations\nDESCRIPTION: Shows different ways to delete records from the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// Delete a single row\nawait Company.deleteRow(session, myCompany);\n\n// Delete all rows where the company name ends with 'Ltd'\nawait Company.delete(\n  where: (t) => t.name.like('%Ltd'),\n);\n```\n\n----------------------------------------\n\nTITLE: Finding Single Row with Filter in Dart\nDESCRIPTION: Example of finding a single company record using a filter expression.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/05-crud.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findFirstRow(\n  session,\n  where: (t) => t.name.equals('Serverpod'),\n);\n```\n\n----------------------------------------\n\nTITLE: Cursor-Based Pagination Response Format\nDESCRIPTION: Shows how to structure the response for cursor-based pagination including the next cursor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/09-pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn {\n  'data': companies,\n  'nextCursor': companies.last.id,\n};\n```\n\n----------------------------------------\n\nTITLE: Authentication Dependencies Configuration\nDESCRIPTION: YAML configuration for adding authentication-related dependencies to a Flutter app\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n  serverpod_auth_email_flutter: ^1.x.x\n  serverpod_auth_google_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Running Full Test Suite for Serverpod\nDESCRIPTION: Command to execute all Serverpod tests from the root directory.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/07-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter App\nDESCRIPTION: Commands to navigate to the Flutter app directory and run the app in Chrome.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/02-get-started-with-mini.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI using Dart pub\nDESCRIPTION: This command installs the Serverpod command-line interface globally using Dart's package manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Sorting by Relation Count in Serverpod\nDESCRIPTION: Demonstrates sorting companies by counting the number of related records (employees).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/08-sort.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  orderBy: (t) => t.employees.count(),\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Server Dependencies in pubspec.yaml\nDESCRIPTION: Configuration for adding the serverpod_auth_server module dependency to the server's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Running Flutter App\nDESCRIPTION: Commands to navigate to Flutter directory and run the app in Chrome\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/02-get-started-with-mini.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd myminipod/myminipod_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Docker Database Management Commands\nDESCRIPTION: Command line instructions for starting, stopping, and removing Docker database container.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --build --detach\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose stop\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Simplified Serialization in Serverpod 2.0\nDESCRIPTION: Updated serialization code showing the simplified approach without serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal ClassName test = ClassName.fromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile for Dart 3\nDESCRIPTION: Docker configuration update to use Dart 3.0 as the base image.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nFROM dart:3.0 AS build\n\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Auth Module Nickname in Generator Config\nDESCRIPTION: Optionally adds a nickname for the auth module in the config/generator.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Simple SQL Query Without Aliases\nDESCRIPTION: A simple SQL query without aliases, used to illustrate changes in query result formatting.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n \"id\",\n \"name\",\n \"townId\"\nFROM\n \"company\"\nORDER BY\n \"name\"\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI\nDESCRIPTION: Command to globally activate the Serverpod command-line interface using Dart pub\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Sending Stream Messages from Client\nDESCRIPTION: Example of sending messages from the client to the server through a stream.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/15-streams.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclient.myEndpoint.sendStreamMessage(MyMessage(text: 'Hello'));\n```\n\n----------------------------------------\n\nTITLE: Database Query Operations\nDESCRIPTION: Examples of various query operations including findById and where conditions.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await Company.findById(session, companyId);\n\nvar myCompany = await Company.findSingleRow(\n  session,\n  where: (t) => t.name.equals('My Company'),\n);\n```\n\n----------------------------------------\n\nTITLE: Updated fromJson Factory Constructor in Serverpod 2.0\nDESCRIPTION: Simplified implementation of fromJson factory constructor without serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Updated SerializableModel Implementation\nDESCRIPTION: Migration example showing how to implement the new SerializableModel interface.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements SerializableModel {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Password in YAML\nDESCRIPTION: Example of storing database password in passwords.yaml configuration file under the development environment section.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/01-connection.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n...\n```\n\n----------------------------------------\n\nTITLE: User Scope Update Implementation\nDESCRIPTION: Shows how to update a user's access scopes using the Users class\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Adding pixels Package to Flutter Project\nDESCRIPTION: This Bash snippet demonstrates how to add the `pixels` package to a Flutter project using the Flutter package manager. This is a prerequisite for enabling pixel drawing functionality in the application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd pixorama_flutter\nflutter pub add pixels\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in Maintenance Mode\nDESCRIPTION: Command to apply migrations in maintenance mode with exit code feedback.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Legacy SerializableEntity Implementation\nDESCRIPTION: Example of deprecated SerializableEntity usage that will be removed in version 3.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass extends SerializableEntity {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Serverpod Authentication Key Table Definition YAML\nDESCRIPTION: Details the structure of the 'serverpod_auth_key' table as a YAML configuration for user authentication. Fields include user id, hash, key, scopes, and signing method. This structure guides implementing custom token management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/12-upgrading/01-upgrade-to-two.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nclass: AuthKey\ntable: serverpod_auth_key\nfields:\n  userId: int\n  hash: String\n  key: String?, !persist\n  scopeNames: List<String>\n  method: String\nindexes:\n  serverpod_auth_key_userId_idx:\n    fields: userId\n\n```\n\n----------------------------------------\n\nTITLE: Calling Endpoints in Tests - Don't Pattern\nDESCRIPTION: Shows incorrect pattern of directly instantiating and calling endpoint methods, which bypasses important lifecycle events and validation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  // ❌ Don't instantiate endpoints directly\n  var exampleEndpoint = ExampleEndpoint();\n\n  withServerpod('Given Example endpoint', (\n    sessionBuilder,\n    _ /* not using the provided endpoints */,\n  ) {\n    var session = sessionBuilder.build();\n\n    test('when calling `hello` then should return greeting', () async {\n      // ❌ Don't call and endpoint method directly on the endpoint class.\n      final greeting = await exampleEndpoint.hello(session, 'Michael'); \n      expect(greeting, 'Hello, Michael!');\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Definition\nDESCRIPTION: Example of defining a custom exception with message and enum type fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexception: MyException\nfields:\n  message: String\n  errorType: MyEnum\n```\n\n----------------------------------------\n\nTITLE: Setting Default GCP Project\nDESCRIPTION: Command to set the default project ID for Cloud Run service deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud config set project <PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public File URL\nDESCRIPTION: Method to get the public URL for accessing a file in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Single Device Sign-out in Dart\nDESCRIPTION: Shows how to implement sign-out functionality for a single device using StatusEndpoint.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOutDevice();\n```\n\n----------------------------------------\n\nTITLE: Defining Company Model in Serverpod YAML\nDESCRIPTION: YAML configuration for defining a simple Company model with a name field in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/05-crud.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n```\n\n----------------------------------------\n\nTITLE: Updated Custom Serialization in Serverpod 2.0\nDESCRIPTION: Simplified custom fromJson factory constructor in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: YAML configuration for AWS credentials required for S3 storage integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands in Shell\nDESCRIPTION: Execute commands to update dependencies and generate Serverpod code after adding the auth module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nflutter pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Cursor-Based Pagination Response Format\nDESCRIPTION: Shows how to structure the response data for cursor-based pagination including the next cursor.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nreturn {\n'data': companies,\n'lastCursor': companies.last.id,\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Database Container - Bash\nDESCRIPTION: Starts the database container using Docker Compose to prepare for authentication operations.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: JSON Object Storage Definition\nDESCRIPTION: Example of storing nested objects as JSON structures in database columns.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  employees: List<Employee> # Stored as JSON structure\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Storage\nDESCRIPTION: Method to verify if a file exists in the specified storage location.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting WebSocket in Serverpod Client\nDESCRIPTION: Shows how to establish a WebSocket connection to the Serverpod server from a client application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration in YAML\nDESCRIPTION: YAML configuration for adding AWS access credentials to the Serverpod passwords file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI Update\nDESCRIPTION: Commands to update and verify the Serverpod command line interface installation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nserverpod version\n```\n\n----------------------------------------\n\nTITLE: Creating a Repair Migration for Specific Version\nDESCRIPTION: Command to create a repair migration targeting a specific migration version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --version 20230821135718-v1-0-0\n```\n\n----------------------------------------\n\nTITLE: Stopping Serverpod Development Database Docker Container\nDESCRIPTION: This bash command stops the running Docker container for the Serverpod development database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/01-connection.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose stop\n```\n\n----------------------------------------\n\nTITLE: Versioned Repair Migration Command\nDESCRIPTION: Command to create a repair migration targeting a specific version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --version 20230821135718-v1-0-0\n```\n\n----------------------------------------\n\nTITLE: Adding Module Client Dependency in Client pubspec.yaml\nDESCRIPTION: Illustrates adding the client-side module package to the client's pubspec.yaml file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Flutter App Launch Command\nDESCRIPTION: Command to run the Flutter application in Chrome browser.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Updated SerializableModel Implementation\nDESCRIPTION: Migration example showing the new SerializableModel interface implementation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass CustomClass implements SerializableModel {\n  // Your code here\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Serverpod CLI\nDESCRIPTION: Shows how to use the --experimental-features flag in the Serverpod CLI to enable experimental features.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/20-experimental.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod generate --experimental-features=all\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Generator Settings\nDESCRIPTION: Configuration in generator.yaml to set up the serverpod_auth module with a nickname.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/08-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Implementing toJson Method in Dart\nDESCRIPTION: Basic implementation of the toJson method required for custom serialization in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMap<String, dynamic> toJson() {\nreturn {\n    name: 'John Doe',\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Launching the Flutter Web App\nDESCRIPTION: Command to run the Flutter application in Chrome browser\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nflutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Updating Database Records in Dart\nDESCRIPTION: Demonstrates how to update existing database records.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/03-database-communication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nvar myCompany = await session.db.findById(tCompany, companyId) as Company?;\nmyCompany.name = 'New name';\nawait session.db.update(myCompany);\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI\nDESCRIPTION: Command to initialize the Google Cloud CLI tools for project setup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud init\n```\n\n----------------------------------------\n\nTITLE: Dialog Import Statement\nDESCRIPTION: Import statement for the note dialog widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_flutter/note_dialog.dart';\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Database Rows in Dart\nDESCRIPTION: Retrieve multiple database rows with optional filtering and limits\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.find(\n  tCompany,\n  where: (t) => t.id < 100,\n  limit: 50,\n);\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in Dart\nDESCRIPTION: Method to verify if a file exists in a specific storage location\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.6/02-concepts/08-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar exists = await session.storage.fileExists(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Database Transactions in Dart\nDESCRIPTION: Demonstrates how to use database transactions for atomic operations in Dart.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/03-database-communication.md#2025-04-20_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nvar result = await session.db.transaction((transaction) async {\n  // Do some database queries here.\n\n  // Optionally return a value.\n  return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting WebSocket in Client\nDESCRIPTION: Demonstrates how to establish a WebSocket connection from the client to the Serverpod server.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/09-streams.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nawait client.connectWebSocket();\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration Command\nDESCRIPTION: Terminal command for creating a new database migration in Serverpod project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/01-get-started.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Enum Configuration in YAML\nDESCRIPTION: Examples of enum configuration with byName and byIndex serialization methods.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByNameEnum\nserialized: byName\nvalues:\n  - byName1\n  - byName2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nenum: ByIndexEnum\nserialized: byIndex\nvalues:\n  - byIndex1\n  - byIndex2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nclass: EnumDefault\ntable: enum_default\nfields:\n  byNameEnumDefault: ByNameEnum, default=byName1\n  byIndexEnumDefault: ByIndexEnum, default=byIndex1\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example\nDESCRIPTION: Example folder structure for a Serverpod project with shared package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n├── my_project_client\n├── my_project_flutter\n├── my_project_server\n├── my_project_shared\n```\n\n----------------------------------------\n\nTITLE: Creating Tagged Database Migration\nDESCRIPTION: Command to create a migration with a specific version tag.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --tag \"v1-0-0\"\n```\n\n----------------------------------------\n\nTITLE: Database Password Configuration in YAML\nDESCRIPTION: Example of storing database password in passwords.yaml configuration file for development environment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\ndevelopment:\n  database: '<MY DATABASE PASSWORD>'\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Serialization Before Serverpod 2.0\nDESCRIPTION: Example of a custom fromJson constructor in versions prior to Serverpod 2.0, which required the serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfactory ClassName.fromJson(\n    Map<String, dynamic> json,\n    SerializationManager serializationManager,\n  ) {\n    return ClassName(\n      json['name'],\n    );\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations in Maintenance Mode\nDESCRIPTION: Command to apply migrations in maintenance mode, useful for automated processes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Creating Serverpod Project with Mini Version\nDESCRIPTION: Command to create a new Serverpod project using the Mini version, which is lightweight and doesn't include a database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create pixorama --mini\n```\n\n----------------------------------------\n\nTITLE: Defining Student Table with Many-to-Many Relationship in Serverpod\nDESCRIPTION: YAML configuration for the Student table showing the relationship with Enrollment table. Includes a field for student name and a list of enrollments with a named relation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/03-relations/03-many-to-many.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Student\ntable: student\nfields:\n  name: String\n  enrollments: List<Enrollment>?, relation(name=student_enrollments)\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI using Dart pub\nDESCRIPTION: This command installs the Serverpod command-line interface globally using Dart pub. It allows you to use the 'serverpod' command in your terminal.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Installing Serverpod CLI\nDESCRIPTION: Command to install the Serverpod command-line interface globally using Dart pub.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/index.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Test Passwords Configuration\nDESCRIPTION: Configuration for test database and Redis passwords.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntest:\n  database: '<insert database test password>'\n  redis: '<insert redis test password>'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cloud Run Deployment Script\nDESCRIPTION: Commands to copy and make the Cloud Run deployment script executable\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cp deploy/gcp/console_gcr/cloud-run-deploy.sh .\n$ chmod u+x cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Applying Migrations Command\nDESCRIPTION: Command to apply pending migrations during server startup.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Simplified Serialization in Serverpod 2.0\nDESCRIPTION: Updated model serialization implementation in Serverpod 2.0 without SerializationManager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal ClassName test = ClassName.fromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Defining a Serializable Class in Serverpod (YAML)\nDESCRIPTION: This YAML code defines a serializable class called `Company` with two fields: `name` (String) and `foundedDate` (DateTime?). This definition is used by Serverpod to generate Dart code for the class, making it easily serializable and usable in communication between the server and client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Company\nfields:\n  name: String\n  foundedDate: DateTime?\"\n```\n\n----------------------------------------\n\nTITLE: Module Nickname Configuration\nDESCRIPTION: YAML configuration to set a nickname for the auth module in generator config.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Creating Versioned Repair Migration\nDESCRIPTION: Command to create a repair migration targeting a specific version.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --version 20230821135718-v1-0-0\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Mini Project\nDESCRIPTION: Command to create a new Serverpod Mini project using the CLI\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/02-get-started-with-mini.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create myminipod --mini\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Package\nDESCRIPTION: Command to add AWS S3 storage package dependency to the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/12-file-uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub add serverpod_cloud_storage_s3\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test - Bash Command\nDESCRIPTION: Command to run a specific test file in the Serverpod package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/06-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/serverpod\ndart test test/connection_test.dart\n```\n\n----------------------------------------\n\nTITLE: Executing Cloud Run Deployment\nDESCRIPTION: Command to deploy the Serverpod application to Google Cloud Run.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/07-deployments/03-deploying-to-gcr-console.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./cloud-run-deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Integer Default Value Configuration\nDESCRIPTION: Shows how to set a default integer value for a field\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nintDefault: int, default=10\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Server Dependency\nDESCRIPTION: Adding the serverpod_auth_server dependency to the server's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.5/02-concepts/06-modules.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_server: ^0.9.x\n```\n\n----------------------------------------\n\nTITLE: Setting Up CLI Development Environment\nDESCRIPTION: Commands to setup local development environment for Serverpod CLI tools\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/07-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration Command\nDESCRIPTION: Terminal command to create a new database migration in Serverpod project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/01-get-started/08-working-with-database.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Starting Database Container\nDESCRIPTION: Start the database container from the server project using docker-compose.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/10-authentication/01-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up --build --detach\n```\n\n----------------------------------------\n\nTITLE: Defining Serializable Class in YAML\nDESCRIPTION: Example of defining a serializable 'Company' class in YAML for Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Implementing toJson Method in Dart\nDESCRIPTION: Basic implementation of toJson method for custom serialization in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nMap<String, dynamic> toJson() {\nreturn {\n    name: 'John Doe',\n};\n}\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Commands for Module Integration\nDESCRIPTION: These bash commands show how to run 'pub get' and 'serverpod generate' to add the module to the project's deserializer, as well as create and apply database migrations for the new module.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/10-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ serverpod generate\n$ serverpod create-migration\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Dialog Import Statement\nDESCRIPTION: Import statement for the note dialog implementation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:notes_flutter/note_dialog.dart';\n```\n\n----------------------------------------\n\nTITLE: Serializable Class Definition\nDESCRIPTION: YAML configuration for defining a serializable class in Serverpod\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/01-get-started.md#2025-04-20_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\nfields:\n  name: String\n  foundedDate: DateTime?\n```\n\n----------------------------------------\n\nTITLE: Integer Default Value in YAML\nDESCRIPTION: Example of setting a default integer value in a field definition.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/02-models.md#2025-04-20_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nintDefault: int, default=10\n```\n\n----------------------------------------\n\nTITLE: Serverpod Project Generation Command\nDESCRIPTION: Bash command to generate Serverpod project files and protocol definitions for the Pixorama application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create pixorama --mini\ncd pixorama_server\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Removing Docker Database Instance - Bash\nDESCRIPTION: This command is used to completely remove the Docker container running the Postgres database, along with all associated data volumes. This will result in the loss of all database data.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"$ docker compose down -v\"\n```\n\n----------------------------------------\n\nTITLE: Generating Test Tools with Serverpod CLI\nDESCRIPTION: Uses the Serverpod CLI to generate test tools for the project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Force Creating Repair Migration\nDESCRIPTION: Command to force create a repair migration bypassing safety checks.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration --force\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Installation\nDESCRIPTION: Command to verify the Serverpod CLI installation by displaying help information.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server\nDESCRIPTION: Commands to navigate to test server directory and start the server\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/07-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Client Dependencies Configuration\nDESCRIPTION: YAML configuration for required client-side dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Dart Test Configuration\nDESCRIPTION: Configures integration test tags in dart_test.yaml.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/04-upgrade-to-two-point-two.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n  integration: {}\n```\n\n----------------------------------------\n\nTITLE: Integer Default Value Example\nDESCRIPTION: Example of setting a default integer value for a field.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/02-models.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nintDefault: int, default=10\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serverpod Module\nDESCRIPTION: Command to create a new Serverpod module using the serverpod create command\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/06-modules.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nserverpod create --template module my_module\n```\n\n----------------------------------------\n\nTITLE: Creating Repair Migration Command\nDESCRIPTION: Command to create a repair migration for synchronizing database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: String Default Value Configuration\nDESCRIPTION: Demonstrates setting a default string value for a field\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nstringDefault: String, default='This is a string'\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Field in YAML for Serverpod\nDESCRIPTION: Demonstrates how to set a default duration value for a field in Serverpod YAML configuration. The example shows a duration of 1 day, 2 hours, 10 minutes, 30 seconds, and 100 milliseconds.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/02-models.md#2025-04-20_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndurationDefault: Duration, default=1d 2h 10min 30s 100ms\n```\n\n----------------------------------------\n\nTITLE: Accessing Database in Serverpod 2.0 in Dart\nDESCRIPTION: Shows how to access the database using the new db field on the Session object in Serverpod 2.0.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nsession.db.find(...);\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Class Example\nDESCRIPTION: The resulting Dart class generated from the YAML inheritance definition, showing both inherited and new fields.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/20-experimental.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass ChildClass extends ParentClass {\n    String name\n    int age\n}\n```\n\n----------------------------------------\n\nTITLE: Importing S3 Cloud Storage Package\nDESCRIPTION: This Dart code snippet shows how to import the Serverpod Cloud Storage S3 package in your `server.dart` file. This import is required to use Amazon S3 with Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_s3/serverpod_cloud_storage_s3.dart'\n    as s3;\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Tools Path in YAML\nDESCRIPTION: Sets the path for test tool generation in the generator configuration file. This is required for the test tools to be generated correctly.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver_test_tools_path: test/integration/test_tools\n```\n\n----------------------------------------\n\nTITLE: Create Empty Migration Command\nDESCRIPTION: Terminal command to create a new empty migration for ensuring new database representation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Adding Serverpod Auth Dependencies to Client Project\nDESCRIPTION: Adds the necessary dependencies for Serverpod authentication to the client project's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/11-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Finding Record by ID in Dart\nDESCRIPTION: Retrieving a single Company record using its ID\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/06-database/05-crud.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nvar company = await Company.db.findById(session, companyId);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration in Serverpod\nDESCRIPTION: Basic command to create a new database migration in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/06-database/11-migrations.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration\n```\n\n----------------------------------------\n\nTITLE: Create Empty Migration Command\nDESCRIPTION: Terminal command to create a new empty migration in Serverpod 2.0\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create-migration --force\n```\n\n----------------------------------------\n\nTITLE: Updating Pubspec Files\nDESCRIPTION: Command to regenerate pubspec.yaml files from templates\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/11-contribute.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ util/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: String Default Value in YAML\nDESCRIPTION: Example of setting a default string value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nstringDefault: String, default='This is a string'\n```\n\n----------------------------------------\n\nTITLE: Running Dart Tests\nDESCRIPTION: Executes the Dart tests using the dart test command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndart test\n```\n\n----------------------------------------\n\nTITLE: Integer Default Value in YAML\nDESCRIPTION: Example of setting a default integer value.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/02-models.md#2025-04-20_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nintDefault: int, default=10\n```\n\n----------------------------------------\n\nTITLE: Running Dart Tests\nDESCRIPTION: Command to execute Dart tests.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/01-get-started.md#2025-04-20_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndart test\n```\n\n----------------------------------------\n\nTITLE: Applying Database Migrations\nDESCRIPTION: Command to start the server with the --apply-migrations flag to update the database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Connection Failure Handler\nDESCRIPTION: Method to handle connection failures by updating state with error information\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/03-tutorials/01-first-app.mdx#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nvoid _connectionFailed(dynamic exception) {\n  setState(() {\n    _notes = null;\n    _connectionException = exception;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase in Flutter Application\nDESCRIPTION: This Dart code initializes Firebase in a Flutter application, configuring providers for Firebase UI authentication. It requires importing the necessary Firebase packages and running Firebase.initializeApp() with appropriate options.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/04-providers/05-firebase.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:firebase_ui_auth/firebase_ui_auth.dart' as firebase;\nimport 'package:firebase_core/firebase_core.dart';\nimport 'firebase_options.dart';\n\n...\nvoid main() async {\n  ...\n  await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n\n  firebase.FirebaseUIAuth.configureProviders([\n    firebase.PhoneAuthProvider(),\n  ]);\n\n  ...\n  runApp(const MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Email Authentication Module Import\nDESCRIPTION: Import statement for the Serverpod authentication module\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/07-authentication.md#2025-04-20_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_auth_server/module.dart' as auth;\n```\n\n----------------------------------------\n\nTITLE: Rendering Notes in Flutter UI\nDESCRIPTION: Updated build method to display the fetched notes in a ListView or show an empty container if notes are not yet loaded.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nWidget build(BuildContext context) {\n  return Scaffold(\n    appBar: AppBar(\n      title: Text(widget.title),\n    ),\n    body: _notes == null\n      ? Container()\n      : ListView.builder(\n          itemCount: _notes!.length,\n          itemBuilder: ((context, index) {\n            return ListTile(\n              title: Text(_notes![index].text),\n            );\n          }),\n        ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Serverpod Project\nDESCRIPTION: Command to create a new Serverpod project named 'mypod' using the serverpod CLI tool.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/01-get-started.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ serverpod create mypod\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Check in Dart\nDESCRIPTION: Demonstrates how to check authentication status using the Session object's auth field to get the authenticated user ID\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/07-authentication.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> myMethod(Session session) async {\n  var userId = await session.auth.authenticatedUserId;\n  var isSignedIn = userId == null;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ImageUpdate Model in YAML\nDESCRIPTION: YAML definition for the ImageUpdate model which captures changes to individual pixels. It includes the pixel's index in the byte array and its new color value for real-time updates.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# lib/src/models/image_update.spy.yaml\n\nclass: ImageUpdate\nfields:\n  pixelIndex: int\n  colorIndex: int\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Widget with Template\nDESCRIPTION: Demonstrates how to create a custom Widget class that uses Mustache templates. Shows how to pass values to the template system for rendering.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/11-webserver.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass MyPageWidget extends Widget {\n  MyPageWidget({String title}) : super(name: 'my_page') {\n    values = {\n      'title': title,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Client Dependencies\nDESCRIPTION: Configuration for adding serverpod_auth_client dependency to the client's pubspec.yaml\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/06-modules.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Applying Repair Migration in Maintenance Mode\nDESCRIPTION: Command to apply a repair migration using the maintenance role. This method applies migrations and exits with a status code indicating success (0) or failure (non-zero).\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/06-database/11-migrations.md#2025-04-20_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart --role maintenance --apply-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Getting Public URL for Stored File\nDESCRIPTION: Method to retrieve the public URL for accessing a file in public storage.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/08-file-uploads.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvar url = await session.storage.getPublicUrl(\n  storageId: 'public',\n  path: 'my/file/path',\n);\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example\nDESCRIPTION: Example folder structure for a Serverpod project with shared package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/06-concepts/03-serialization.md#2025-04-20_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n├── my_project_client\n├── my_project_flutter\n├── my_project_server\n├── my_project_shared\n```\n\n----------------------------------------\n\nTITLE: Initializing State and Loading Notes in Dart\nDESCRIPTION: Override of the initState method to load notes when the app starts.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/05-tutorials/01-first-app.mdx#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nvoid initState() {\n  super.initState();\n  _loadNotes();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Note Creation Method in Dart\nDESCRIPTION: This snippet defines a helper method '_createNote' inside the 'MyHomePageState' class to create new notes using the Serverpod client.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _createNote(Note note) async {\n  try {\n    await client.notes.createNote(note);\n    await _loadNotes();\n  } catch (e) {\n    _connectionFailed(e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server Setup Commands\nDESCRIPTION: Terminal commands for setting up module dependencies and generating required code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/10-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub get\n$ serverpod generate\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Serverpod CLI for Development\nDESCRIPTION: Commands to set up the Serverpod command-line interface for development from the cloned repository. This activates the local version of the CLI globally.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/07-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Server\nDESCRIPTION: This command starts the Serverpod server using Dart. It's required before creating a repair migration to fetch the live database schema.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Configuration\nDESCRIPTION: YAML configuration for adding shared package dependencies.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  my_project_shared:\n    path: ../my_project_shared\n  ...\n```\n\n----------------------------------------\n\nTITLE: Stream Message Handler\nDESCRIPTION: Implements message handling logic for routing chat messages to specific user channels.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/04-concepts/09-streams.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> handleStreamMessage(\n  StreamingSession session,\n  SerializableEntity message,\n) async {\n  if (message is MyChatMessage) {\n    session.messages.postMessage(\n      'user_${message.recipientId}',\n      message,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Message Logging in Serverpod\nDESCRIPTION: Demonstrates how to log a simple message using the session.log() method in Serverpod. The log entry will be written to the database when the session completes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/05-logging.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nsession.log('This is working well');\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration (YAML)\nDESCRIPTION: This snippet shows how to configure AWS credentials in the `passwords.yaml` file for Serverpod.  It includes adding the AWS access key ID and secret key.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/08-file-uploads.md#2025-04-20_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Defining Parent-Child Relationships in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a parent-child relationship between tables using the `parent` property. This ensures data integrity and automatic deletion of child records when the parent is deleted.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.0/04-concepts/05-database-communication.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"class: Employee\ntable: employee\nfields:\n  companyId: int, parent=company\n  name: String\n  birthday: DateTime\"\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Server with Docker\nDESCRIPTION: Commands to start the required Docker containers (Postgres and Redis) and launch the Serverpod server with database migrations applied.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/01-get-started.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd mypod/mypod_server\n$ docker compose up --build --detach\n$ dart bin/main.dart --apply-migrations\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Package Command\nDESCRIPTION: Terminal command to create a new Flutter package for custom module Flutter code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/06-modules.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nflutter create --template package my_module_flutter\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Dependencies to Client Project\nDESCRIPTION: Required dependencies for the client project to enable email authentication functionality. This must be added to the pubspec.yaml of the client project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/05-concepts/10-authentication/04-providers/01-email.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  ...\n  serverpod_auth_client: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Initialize Migration System with Data Preservation\nDESCRIPTION: This section provides the commands necessary to initialize the migration system while preserving existing data in the database.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run bin/main.dart\n$ serverpod create-repair-migration\n```\n\n----------------------------------------\n\nTITLE: Importing Test Dependencies in Dart\nDESCRIPTION: Shows incorrect way of importing test dependencies with redundant imports from serverpod_test package.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'serverpod_test_tools.dart';\n// Don't import `serverpod_test` directly.\nimport 'package:serverpod_test/serverpod_test.dart'; ❌\n```\n\n----------------------------------------\n\nTITLE: Setting Up App Dependencies\nDESCRIPTION: Adding required dependencies for authentication in the Flutter app's pubspec.yaml file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/05-concepts/09-authentication/01-setup.mdx#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  flutter:\n    sdk: flutter\n  serverpod_flutter: ^1.x.x\n  auth_example_client:\n    path: ../auth_example_client\n  \n  serverpod_auth_shared_flutter: ^1.x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Generator Settings\nDESCRIPTION: Configuration in generator.yaml to set up the serverpod_auth module with a nickname for client references\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/04-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Flutter App Structure\nDESCRIPTION: This Dart code sets up the main structure of the Flutter app, including the client configuration and the PixoramaApp widget.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.4.0/05-tutorials/02-real-time-communication.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// lib/main.dart\n\nimport 'package:pixorama_client/pixorama_client.dart';\nimport 'package:flutter/material.dart';\nimport 'package:serverpod_flutter/serverpod_flutter.dart';\n\nimport 'src/pixorama.dart';\n\nvar client = Client('http://$localhost:8080/')\n  ..connectivityMonitor = FlutterConnectivityMonitor();\n\nvoid main() {\n  // Start the app.\n  runApp(const PixoramaApp());\n}\n\nclass PixoramaApp extends StatelessWidget {\n  const PixoramaApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Pixorama',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: Scaffold(\n        body: const Pixorama(),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: YAML configuration for AWS credentials required for S3 storage integration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Generator Configuration YAML\nDESCRIPTION: YAML configuration for declaring custom serializable objects in Serverpod.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/03-serialization.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n...\nextraClasses:\n- package:my_project_shared/my_project_shared.dart:ClassName\n```\n\n----------------------------------------\n\nTITLE: File Path Example for S3 Compatibility\nDESCRIPTION: Example of creating S3-compatible file paths using standard characters and avoiding leading slashes.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/12-file-uploads.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n'profile/$userId/images/avatar.png'\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod Generate Commands\nDESCRIPTION: Terminal commands to update dependencies and generate module code.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/06-modules.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart pub get\nserverpod generate\n```\n\n----------------------------------------\n\nTITLE: Flutter App Launch Command\nDESCRIPTION: Command to start the Flutter application in Chrome browser.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/05-tutorials/01-first-app.mdx#2025-04-20_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ cd notes_flutter\n$ flutter run -d chrome\n```\n\n----------------------------------------\n\nTITLE: Deprecated Sign Out Method in Dart with Serverpod\nDESCRIPTION: This code shows the deprecated signOut method in Serverpod, which should be replaced with signOutDevice or signOutAllDevices.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/06-concepts/11-authentication/02-basics.md#2025-04-20_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nawait client.modules.auth.status.signOut();  // Deprecated\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Default Value in YAML\nDESCRIPTION: Demonstrates how to set a default duration value with specific time components\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/02-models.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndurationDefault: Duration, default=1d 2h 10min 30s 100ms\n```\n\n----------------------------------------\n\nTITLE: Defining Database Mappings in YAML for Serverpod\nDESCRIPTION: This snippet demonstrates how to define a database mapping for a Company class using YAML. It includes fields for name, founding date, and a list of employees.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/03-database-communication.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Company\ntable: company\nfields:\n  name: String\n  foundedDate: DateTime?\n  employees: List<Employee>\n```\n\n----------------------------------------\n\nTITLE: Serverpod Health Check Response\nDESCRIPTION: Example of a successful health check response from a deployed Serverpod instance, showing timestamp in UTC.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.10/04-deployments/01-deploying-to-aws.md#2025-04-20_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOK 2022-05-19 14:29:16.974160Z\n```\n\n----------------------------------------\n\nTITLE: Running Serverpod with a Specific Role\nDESCRIPTION: Command to start Serverpod with a serverless role. This changes how the server behaves regarding maintenance tasks and state management.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/05-general.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart bin/main.dart --role serverless\n```\n\n----------------------------------------\n\nTITLE: Unnecessary Database Cleanup in Serverpod Tests\nDESCRIPTION: Shows incorrect implementation with unnecessary database cleanup in tearDown, since Serverpod handles this automatically through transaction rollback.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/06-concepts/19-testing/04-best-practises.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nwithServerpod('Given ProductsEndpoint', (sessionBuilder, endpoints) {\n  var session = sessionBuilder.build();\n\n  setUp(() async {\n    await Product.db.insertRow(session, Product(name: 'Apple', price: 10));\n  });\n\n  tearDown(() async {   \n    await Product.db.deleteWhere( ❌ // Unnecessary clean up\n      session,\n      where: (_) => Constant.bool(true),\n    );\n  });\n\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Serverpod CLI Installation\nDESCRIPTION: Command to verify that the Serverpod CLI has been correctly installed and is accessible from the command line. Running this should display the help information for the serverpod command.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Updating Project Dependencies\nDESCRIPTION: Command to update pubspec.yaml files from templates\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.21/07-contribute.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Importing S3 Package - Serverpod Dart\nDESCRIPTION: This code snippet imports the S3 cloud storage package for Serverpod. This allows you to use S3 as a storage provider for your Serverpod application.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.7/03-concepts/08-file-uploads.md#2025-04-20_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:serverpod_cloud_storage_s3/serverpod_cloud_storage_s3.dart'\n    as s3;\n```\n\n----------------------------------------\n\nTITLE: Updating User Scopes in Serverpod\nDESCRIPTION: This Dart snippet demonstrates updating a user's scopes in Serverpod using the `Users` class. It requires an active session and a valid `userId`. Define the necessary scopes using the `Scope` class.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/07-authentication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nawait Users.updateUserScopes(session, userId, {Scope.admin});\n```\n\n----------------------------------------\n\nTITLE: Starting Serverpod Test Server\nDESCRIPTION: Commands to navigate to test server directory and start the server\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/09-contribute.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd tests/serverpod_test_server\ndart bin/main.dart\n```\n\n----------------------------------------\n\nTITLE: Initializing Session Manager\nDESCRIPTION: Setting up the client and session manager for handling authentication state and server communication.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/03-concepts/07-authentication.md#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  client = Client(\n    'http://localhost:8080/',\n    authenticationKeyManager: FlutterAuthenticationKeyManager(),\n  );\n\n  sessionManager = SessionManager(\n    caller: client.modules.auth,\n  );\n  await sessionManager.initialize();\n\n  runApp(MyApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Commands to initialize Terraform and apply the infrastructure configuration. The init command is only needed for first-time deployment.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/05-deployments/01-deploying-to-aws.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Nickname in generator.yaml\nDESCRIPTION: Shows how to configure a module nickname in the config/generator.yaml file, which determines how the module is referenced from the client\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.0.0/04-concepts/06-modules.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Installing Auth Server Module\nDESCRIPTION: Command to add the serverpod_auth_server dependency to the server project.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/06-concepts/11-authentication/01-setup.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart pub add serverpod_auth_server\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serverpod CLI\nDESCRIPTION: This command is performed to set up the Serverpod command line interface from a local clone of the repository. It installs necessary dependencies and activates the CLI tool for use.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/06-contribute.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Serialization Before Serverpod 2.0\nDESCRIPTION: Example of model serialization before Serverpod 2.0, showing the required serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal SerializationManager serializationManager = Protocol();\nfinal ClassName test = ClassName.fromJson(json, serializationManager);\n```\n\n----------------------------------------\n\nTITLE: Verifying Serverpod Installation\nDESCRIPTION: Command to verify the Serverpod CLI installation by displaying the help menu.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/index.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nserverpod\n```\n\n----------------------------------------\n\nTITLE: Downloading Dart SDK in Init Script\nDESCRIPTION: This bash command downloads the specified Dart SDK version for use in the server deployment environment. Replace the version number with the desired Dart SDK version as needed. The command should be included in the init-script.sh file for deployment configuration.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nwget -q https://storage.googleapis.com/dart-archive/channels/stable/release/3.5.1/sdk/dartsdk-linux-x64-release.zip\n```\n\n----------------------------------------\n\nTITLE: Updated Session Database Access\nDESCRIPTION: Shows the transition from deprecated dbNext to new db field usage\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.5.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nsession.dbNext.find(...);\n\n// becomes\n\nsession.db.find(...);\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for Serverpod in Bash\nDESCRIPTION: Command to run all tests for Serverpod from the root directory. This is used for continuous integration and local testing.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/06-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nutil/run_tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Github Actions Dart SDK Version\nDESCRIPTION: YAML configuration for specifying Dart SDK version in Github Actions workflow file.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.3.0/07-deployments/04-deploying-to-aws.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Setup Dart SDK\n  uses: dart-lang/setup-dart@v1.6.5\n  with:\n    sdk: ${MINOR_DART_SDK_VERSION}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Database Row in Dart\nDESCRIPTION: Insert a new Company object into the database using the insert method\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/03-database-communication.md#2025-04-20_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvar myRow = Company(name: 'Serverpod corp.', employees: []);\nawait Company.insert(session, myRow);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Serverpod CLI Tools\nDESCRIPTION: Commands to setup and activate the Serverpod CLI tools from local repository.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.20/07-contribute.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/serverpod_cli\ndart pub get\ndart pub global activate --source path .\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic MyHomePageState Class in Flutter\nDESCRIPTION: The minimal implementation of the MyHomePageState class with a basic scaffold and app bar, which serves as the foundation for the notes app UI.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/03-tutorials/01-first-app.mdx#2025-04-20_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass MyHomePageState extends State<MyHomePage> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(widget.title),\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Connection Details - YAML\nDESCRIPTION: This YAML snippet defines the connection details for a Postgres database in a Serverpod configuration file, specifically for the development environment. It specifies parameters such as the database host, port, name, and user required for establishing the connection.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/06-concepts/06-database/01-connection.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"...\\ndatabase:\\n  host: localhost\\n  port: 8090\\n  name: <YOUR_PROJECT_NAME>\\n  user: postgres\\n...\"\n```\n\n----------------------------------------\n\nTITLE: New Model Syntax - !persist Field\nDESCRIPTION: This snippet demonstrates the new syntax for defining an API field using the `!persist` keyword in Serverpod model files. It replaces the deprecated `api` keyword.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.2.0/12-upgrading/01-upgrade-to-one-point-two.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclass: Example\ntable: example\nfields:\n  name: String\n  apiField: String, !persist\n```\n\n----------------------------------------\n\nTITLE: Updating Project Pubspec Files\nDESCRIPTION: Command to generate pubspec.yaml files from templates\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-1.1.1/09-contribute.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nutil/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Updating Package Specifications - Bash Commands\nDESCRIPTION: Command to generate pubspec.yaml files from templates\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/10-contribute.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ util/update_pubspecs\n```\n\n----------------------------------------\n\nTITLE: Adding Test Server Entries - Text\nDESCRIPTION: This snippet lists the necessary entries to add at the end of the /etc/hosts file for the test server, PostgreSQL, and Redis.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/10-contribute.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1 serverpod_test_server\n127.0.0.1 postgres\n127.0.0.1 redis\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration\nDESCRIPTION: YAML configuration for storing AWS access credentials in the Serverpod passwords file\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.0.0/05-concepts/11-file-uploads.md#2025-04-20_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nshared:\n  AWSAccessKeyId: 'XXXXXXXXXXXXXX'\n  AWSSecretKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX'\n```\n\n----------------------------------------\n\nTITLE: Updating CLI in Dart\nDESCRIPTION: This command activates the latest version of the Serverpod command line interface globally using Dart's package manager.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/02-upgrade-to-one-point-two.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub global activate serverpod_cli\n```\n\n----------------------------------------\n\nTITLE: Setting User Object for Streaming Session in Dart\nDESCRIPTION: This snippet demonstrates how to associate a state with a streaming session by setting a user object when a stream is opened. The user object is automatically discarded when the session ends.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.9/03-concepts/09-streams.md#2025-04-20_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> streamOpened(StreamingSession session) async {\n  setUserObject(session, MyUserObject());\n}\n```\n\n----------------------------------------\n\nTITLE: Running All Serverpod Tests - Bash Commands\nDESCRIPTION: Command to execute all Serverpod tests from the root directory\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.1.0/10-contribute.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ util/run_tests\n```\n\n----------------------------------------\n\nTITLE: Configuring serverpod_auth Module in YAML\nDESCRIPTION: Add the serverpod_auth module to the config/generator.yaml file, specifying a nickname for client reference.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.8/03-concepts/07-authentication.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodules:\n  serverpod_auth:\n    nickname: auth\n```\n\n----------------------------------------\n\nTITLE: Registering Health Check Handler with Serverpod\nDESCRIPTION: Shows how to register a custom health check handler when initializing a Serverpod instance. The handler is passed as a parameter during Serverpod object creation.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.22/04-concepts/10-health-checks.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal pod = Serverpod(\n    args,\n    Protocol(),\n    Endpoints(),\n    healthCheckHandler: myHealthCheckHandler,\n  );\n```\n\n----------------------------------------\n\nTITLE: Model Serialization Before Serverpod 2.0\nDESCRIPTION: Example of model serialization in previous versions of Serverpod, showing the required serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal SerializationManager serializationManager = Protocol();\nfinal ClassName test = ClassName.fromJson(json, serializationManager);\n```\n\n----------------------------------------\n\nTITLE: Model Serialization After Serverpod 2.0\nDESCRIPTION: Simplified model serialization in Serverpod 2.0, without the serializationManager parameter.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-2.2.0/08-upgrading/03-upgrade-to-two.md#2025-04-20_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal Map<String, dynamic> json = classInstance.toJson();\nfinal ClassName test = ClassName.fromJson(json);\n```\n\n----------------------------------------\n\nTITLE: Limit and Offset Pagination in Serverpod\nDESCRIPTION: Shows how to combine limit and offset parameters to skip records and implement basic pagination.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/docs/06-concepts/06-database/09-pagination.md#2025-04-20_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvar companies = await Company.db.find(\n  session,\n  limit: 10,\n  offset: 30,\n);\n```\n\n----------------------------------------\n\nTITLE: Server Status Output\nDESCRIPTION: Example output showing the running Serverpod server with version information and port assignments.\nSOURCE: https://github.com/serverpod/serverpod_docs/blob/main/versioned_docs/version-0.9.11/index.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nSERVERPOD version: 0.9.11 mode: development time: 2022-09-12 17:22:02.825468Z\nInsights listening on port 8081\nServer default listening on port 8080\nWebserver listening on port 8082\n```"
  }
]