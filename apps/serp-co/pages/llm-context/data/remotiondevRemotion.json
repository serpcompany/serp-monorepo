[
  {
    "owner": "remotion-dev",
    "repo": "remotion",
    "content": "TITLE: Scaffolding a Remotion Project using npm\nDESCRIPTION: This command uses npx (part of npm) to execute the `create-video` package, scaffolding a new Remotion project. It prompts the user to select a template. This is the recommended command when using npm as the package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/getting-started.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Use npm as the package manager\"\nnpx create-video@latest\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Player with Custom Video Component - React TSX\nDESCRIPTION: Demonstrates how to integrate the <Player> component into a React application. Shows how to define a custom video component (MyVideo) and include it in the Player, specifying properties such as frame duration and video dimensions. Requires the @remotion/player library, and optionally React and TypeScript. Inputs are the component, durationInFrames, compositionWidth, compositionHeight, and fps; outputs are a rendered video player within a React component. This pattern enables embedding Remotion-powered video playback in typical React setups.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: index.tsx\\n// ---cut---\\nimport {Player} from '@remotion/player';\\nimport {MyVideo} from './remotion/MyVideo';\\n\\nexport const App: React.FC = () => {\\n  return <Player component={MyVideo} durationInFrames={120} compositionWidth={1920} compositionHeight={1080} fps={30} />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Remotion Project using NPX\nDESCRIPTION: This shell command utilizes `npx` to run the latest version of the `create-video` package. It bootstraps a new Remotion project directory with the necessary files and configurations, allowing users to start creating videos with React immediately. Node.js and npm (which includes npx) must be installed beforehand.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpx create-video@latest\n```\n\n----------------------------------------\n\nTITLE: Calculating Remotion Composition Metadata from Video Duration using media-parser in TypeScript\nDESCRIPTION: Implements the `calculateMetadata` function using `parseMedia` from `@remotion/media-parser`. This function asynchronously retrieves the video's duration (`slowDurationInSeconds`) and dimensions based on the `src` prop, then calculates the required `durationInFrames`, `fps`, `width`, and `height` for the Remotion composition. It requires `@remotion/media-parser` to be installed and throws an error if the source is not a valid video file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/align-duration.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype MyCompProps = {\n  src: string;\n};\n\n// ---cut---\n\nimport {CalculateMetadataFunction} from 'remotion';\nimport {parseMedia} from '@remotion/media-parser';\n\nexport const calculateMetadata: CalculateMetadataFunction<MyCompProps> = async ({props}) => {\n  const {slowDurationInSeconds, dimensions} = await parseMedia({\n    src: props.src,\n    fields: {\n      slowDurationInSeconds: true,\n      dimensions: true,\n    },\n  });\n\n  if (dimensions === null) {\n    // For example when passing an MP3 file:\n    throw new Error('Not a video file');\n  }\n\n  const fps = 30;\n\n  return {\n    durationInFrames: Math.floor(slowDurationInSeconds * fps),\n    fps,\n    width: dimensions.width,\n    height: dimensions.height,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Remotion Thumbnail Component in React\nDESCRIPTION: Demonstrates the basic usage of the <Thumbnail> component from '@remotion/player' to render a specific frame (frame 30) of a Remotion composition ('MyVideo'). It sets necessary properties like composition dimensions, duration, FPS, and passes input props to the video component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/thumbnail.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\n// @filename: ./remotion/MyVideo.tsx\nexport const MyVideo: React.FC<{title: string}> = ({title}) => <>{title}</>;\n\n// @filename: index.tsx\n// ---cut---\nimport {Thumbnail} from '@remotion/player';\nimport {MyVideo} from './remotion/MyVideo';\n\nexport const App: React.FC = () => {\n  return (\n    <Thumbnail\n      component={MyVideo}\n      compositionWidth={600}\n      compositionHeight={600}\n      frameToDisplay={30}\n      durationInFrames={120}\n      fps={30}\n      inputProps={{\n        title: 'Foo',\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Composition Metadata with useVideoConfig - Remotion - TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use the useVideoConfig hook from Remotion within a functional React component to access details about the current video composition, such as width, height, fps, and durationInFrames. It requires the remotion package and a valid Remotion project setup. The key properties (width, height, fps, durationInFrames) are destructured from the hook and logged to the console, and the component renders a simple message. Inputs consist of the React component context, and outputs are both console logs for property values and the rendered component content. There are no special limitations beyond requiring Remotion context.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-video-config.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { useVideoConfig } from \"remotion\";\n\nexport const MyComp: React.FC = () => {\n  const { width, height, fps, durationInFrames } = useVideoConfig();\n  console.log(width); // 1920\n  console.log(height); // 1080\n  console.log(fps); // 30;\n  console.log(durationInFrames); // 300\n\n  return <div>Hello World!</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Remotion Composition Component in TSX\nDESCRIPTION: Creates a simple functional component `MyComposition` in a file named `remotion/Composition.tsx`. This component serves as a placeholder for a Remotion video composition and initially returns `null`. It's the first step in setting up the necessary file structure for Remotion integration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"remotion/Composition.tsx\"\nexport const MyComposition = () => {\n  return null;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching and Passing API Data with Remotion Compositions in TypeScript\nDESCRIPTION: This snippet shows how to asynchronously fetch data from an API within the calculateMetadata prop of a Remotion Composition and inject the resulting data as a prop to a React component before rendering. It utilizes async/await syntax and fetch, requiring Remotion and React as dependencies, and expects the API response to be JSON serializable. Inputs are default or input props, and outputs are new props (with fetched data merged in) passed to the Composition component. The component expects id and data (API response or null) as props.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Composition } from \"remotion\";\n\ntype ApiResponse = {\n  title: string;\n  description: string;\n};\ntype MyCompProps = {\n  id: string;\n  data: ApiResponse | null;\n};\n\nconst MyComp: React.FC<MyCompProps> = () => null;\n\nexport const Root: React.FC = () => {\n  return (\n    <Composition\n      id=\"MyComp\"\n      component={MyComp}\n      durationInFrames={300}\n      fps={30}\n      width={1920}\n      height={1080}\n      defaultProps={{\n        id: \"1\",\n        data: null,\n      }}\n      calculateMetadata={async ({ props }) => {\n        const data = await fetch(`https://example.com/api/${props.id}`);\n        const json = await data.json();\n\n        return {\n          props: {\n            ...props,\n            data: json,\n          },\n        };\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Image Sequences with Remotion (TypeScript)\nDESCRIPTION: Shows dynamic image loading based on the current frame number, using Remotion hooks and helpers. useCurrentFrame() retrieves the frame, which is interpolated into the staticFile path for sequential image rendering via Img. Requires remotion, useCurrentFrame(), and sequentially named image files in the public/ folder.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Img, staticFile, useCurrentFrame } from \\\"remotion\\\";\\n\\nconst MyComp: React.FC = () => {\\n  const frame = useCurrentFrame();\\n\\n  return <Img src={staticFile(`/frame${frame}.png`)} />;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Remotion Root Component and Registering a Composition in TSX\nDESCRIPTION: Defines the `RemotionRoot` component in `remotion/Root.tsx`. This component imports React, the `Composition` component from Remotion, and the `MyComposition` component. It uses the `<Composition>` tag to register `MyComposition`, specifying properties like `id`, `durationInFrames`, `fps`, `width`, and `height`, configuring it within the Remotion environment. Dependencies include `react` and `remotion`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"remotion/Root.tsx\"\n// @filename: Composition.tsx\nexport const MyComposition: React.FC = () => {\n  return null;\n};\n// @filename: Root.tsx\n// ---cut---\nimport React from 'react';\nimport {Composition} from 'remotion';\nimport {MyComposition} from './Composition';\n\nexport const RemotionRoot: React.FC = () => {\n  return (\n    <>\n      <Composition\n        id=\"Empty\"\n        component={MyComposition}\n        durationInFrames={60}\n        fps={30}\n        width={1280}\n        height={720}\n      />\n    </>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Overriding Webpack Configuration Using Async ES Module Import - Remotion Config API - TypeScript\nDESCRIPTION: Demonstrates how to override Remotion's Webpack configuration by using an async function within the TypeScript config file. It imports a local module ('./src/enable-sass') at runtime and applies it to the existing Webpack config. This pattern requires '@remotion/cli/config' and '@remotion/bundler', and enables dynamic loading of configuration logic, which is useful for advanced customization. File placement is 'remotion.config.ts' and code is intended for a CommonJS environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: src/enable-sass.ts\\nimport {WebpackOverrideFn} from '@remotion/bundler';\\nexport const enableSass: WebpackOverrideFn = (c) => c;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: remotion.config.ts\\n// ---cut---\\nimport {Config} from '@remotion/cli/config';\\n\\nConfig.overrideWebpackConfig(async (currentConfiguration) => {\\n  const {enableSass} = await import('./src/enable-sass');\\n  return enableSass(currentConfiguration);\\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Deterministic Random Numbers with remotion.random() (TypeScript)\nDESCRIPTION: Demonstrates the usage of the `random()` function from the Remotion library. It shows how providing the same seed (number or string) consistently yields the same pseudorandom number between 0 and 1. An example generates an array of objects with deterministic random coordinates. It also illustrates that calling `random()` without an argument results in a type error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/random.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { random } from \"remotion\";\n\nconst rand = random(1); // 0.07301638228818774\nconst rand2 = random(1); // still 0.07301638228818774\n\nconst randomCoordinates = new Array(10).fill(true).map((a, i) => {\n  return {\n    x: random(`random-x-${i}`),\n    y: random(`random-y-${i}`),\n  };\n}); // will always be [{x: 0.2887063352391124, y: 0.18660089606419206}, ...]\n\n// @ts-expect-error\nrandom(); // Error: random() argument must be a number or a string\n```\n\n----------------------------------------\n\nTITLE: Recommended: Using Remotion Img Tag for Reliable Rendering - TypeScript/React\nDESCRIPTION: This snippet illustrates the preferred method of rendering images in Remotion by using the <Img> component from 'remotion'. This ensures Remotion can accurately detect when the image is loaded before continuing rendering, preventing flickering in the final output. Dependencies include the 'remotion' package for the <Img> and <AbsoluteFill> components. The key parameter, 'src', defines the image URL. This approach provides seamless integration with Remotion's rendering pipeline and should replace any usage of Next.js's <Image> component for video generation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/nextjs-image.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst src = \"abc\";\n// ---cut---\nimport { AbsoluteFill, Img } from \"remotion\";\n\nconst myMarkup = <Img src=\"https://picsum.photos/200/300\" />;\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS Lambda Function via Remotion Lambda - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the deployFunction method from @remotion/lambda to deploy an AWS Lambda function for video rendering. Dependencies required are @remotion/lambda and an AWS account with necessary permissions. The main parameters include region, timeoutInSeconds, memorySizeInMb, createCloudWatchLogGroup, and diskSizeInMb. The function returns the created function's name. Inputs are deployment configuration options and output is an object with functionName and alreadyExisted. Constraints include AWS-imposed limits on timeout, memory, and disk size, and the region must match the Lambda Layer.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/deployfunction.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {deployFunction} from '@remotion/lambda';\n\nconst {functionName} = await deployFunction({\n  region: 'us-east-1',\n  timeoutInSeconds: 120,\n  memorySizeInMb: 2048,\n  createCloudWatchLogGroup: true,\n  diskSizeInMb: 2048,\n});\nconsole.log(functionName);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Fade-In Animation in Remotion (React TSX)\nDESCRIPTION: This React component (`FadeIn`) uses the `useCurrentFrame` hook from Remotion to get the current frame number. It calculates the `opacity` style property to gradually increase from 0 to 1 over the first 60 frames by dividing the frame number by 60 and clamping the result at 1 using `Math.min`. This creates a fade-in effect for the displayed text.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animating-properties.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {4, 15} title=\"FadeIn.tsx\"\nimport { AbsoluteFill, useCurrentFrame } from \"remotion\";\n// ---cut---\nexport const FadeIn = () => {\n  const frame = useCurrentFrame();\n\n  const opacity = Math.min(1, frame / 60);\n\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"white\",\n        fontSize: 80,\n      }}\n    >\n      <div style={{ opacity: opacity }}>Hello World!</div>\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Root Component in Remotion (TypeScript)\nDESCRIPTION: This snippet shows the typical entry file (`src/index.ts`) for a Remotion project. It imports the `registerRoot` function from 'remotion' and the main `Root` component from './Root', then calls `registerRoot` to register the `Root` component as the application's entry point.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {registerRoot} from 'remotion';\nimport {Root} from './Root';\n\nregisterRoot(Root);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Video using SSR APIs in TypeScript\nDESCRIPTION: This example TypeScript script demonstrates how to bundle a Remotion project, select a composition, and render a video file using the @remotion/renderer and @remotion/bundler packages. It assumes you have the necessary dependencies installed (including @remotion/renderer, @remotion/bundler, and path), and that a valid Remotion composition exists (e.g., 'HelloWorld' in ./src/index.ts). Key parameters include compositionId (for selecting the composition), inputProps (for parametrizing render properties), and outputLocation (destination for the rendered .mp4 file). The script outputs a video in H264 codec, can be customized for audio or images, and logs when rendering completes. Limitations: intended for Node.js or Bun, not for direct use in Next.js environments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ssr-node.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {bundle} from '@remotion/bundler';\nimport {renderMedia, selectComposition} from '@remotion/renderer';\nimport path from 'path';\n\n// The composition you want to render\nconst compositionId = 'HelloWorld';\n\n// You only have to create a bundle once, and you may reuse it\n// for multiple renders that you can parametrize using input props.\nconst bundleLocation = await bundle({\n  entryPoint: path.resolve('./src/index.ts'),\n  // If you have a webpack override in remotion.config.ts, pass it here as well.\n  webpackOverride: (config) => config,\n});\n\n// Parametrize the video by passing props to your component.\nconst inputProps = {\n  foo: 'bar',\n};\n\n// Get the composition you want to render. Pass `inputProps` if you\n// want to customize the duration or other metadata.\nconst composition = await selectComposition({\n  serveUrl: bundleLocation,\n  id: compositionId,\n  inputProps,\n});\n\n// Render the video. Pass the same `inputProps` again\n// if your video is parametrized with data.\nawait renderMedia({\n  composition,\n  serveUrl: bundleLocation,\n  codec: 'h264',\n  outputLocation: `out/${compositionId}.mp4`,\n  inputProps,\n});\n\nconsole.log('Render done!');\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Remotion CLI - Console\nDESCRIPTION: This command invokes Remotion's CLI to render the project into an MP4 video. Dependencies, including Remotion, must be installed beforehand. The command produces a rendered video file as output, facilitating preview or deployment of the generated animation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-three/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Registering Remotion Root Component in TypeScript with registerRoot\nDESCRIPTION: This snippet demonstrates how to define and register a Remotion root component in a TypeScript project. It starts by exporting a functional component (RemotionRoot) from Root.tsx, then imports and registers this component as the root in index.ts using registerRoot from Remotion. Dependencies include 'remotion' and React. The main parameter is the root component itself. Input is the exported component, and the output is a registered application root; improper structure or duplicate registration may cause runtime errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/register-root.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: ./Root.tsx\\nexport const RemotionRoot = () => <></>;\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: index.ts\\n// ---cut---\\nimport { registerRoot } from \\\"remotion\\\";\\nimport { RemotionRoot } from \\\"./Root\\\";\\n\\nregisterRoot(RemotionRoot);\n```\n\n----------------------------------------\n\nTITLE: Rendering and Configuring GIFs with Remotion <Gif> Component in TypeScript React\nDESCRIPTION: This TypeScript React snippet demonstrates how to import and render the <Gif> component from the @remotion/gif package within a Remotion project. It shows how to synchronize the GIF's playback with the Remotion video context, pass key props including width, height, src, fit, playbackRate, and attach a React ref typed as HTMLCanvasElement. Dependencies include react, remotion, and @remotion/gif. The required inputs are the GIF URL and the video configuration provided by useVideoConfig, while optional props control playback, sizing, and looping behavior. The output is a rendered GIF on a canvas synchronized with Remotion's frame timeline. This approach enables GIFs to integrate seamlessly into custom Remotion video compositions and supports advanced props for extended control.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/gif/gif.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useRef} from 'react';\\nimport {useVideoConfig} from 'remotion';\\n// ---cut---\\nimport {Gif} from '@remotion/gif';\\n\\nexport const MyComponent: React.FC = () => {\\n  const {width, height} = useVideoConfig();\\n  const ref = useRef<HTMLCanvasElement>(null);\\n\\n  return (\\n    <Gif\\n      ref={ref}\\n      src=\\\"https://media.giphy.com/media/3o72F7YT6s0EMFI0Za/giphy.gif\\\"\\n      width={width}\\n      height={height}\\n      fit=\\\"fill\\\"\\n      playbackRate={2}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Props in a Remotion React Component (TypeScript)\nDESCRIPTION: Defines a React functional component with typed props using TypeScript and demonstrates how to access those props within the component. Requires React and TypeScript; the 'Props' type enforces the structure of accepted properties. Inputs are 'propOne' (string) and 'propTwo' (number), and outputs a JSX element displaying the passed-in props. This pattern ensures type safety and maintainable component code.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/passing-props.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Props = {\n  propOne: string;\n  propTwo: number;\n}\n\nexport const MyComponent: React.FC<Props> = ({propOne, propTwo}) => {\n  return (\n    <div>props: {propOne}, {propTwo}</div>\n  );\n}\n// - MyComponent\n```\n\n----------------------------------------\n\nTITLE: Getting Suggested AWS User Policy with getUserPolicy() in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and call the `getUserPolicy()` function from the `@remotion/lambda` package. The function returns a string containing the recommended inline JSON policy required for the AWS user executing Remotion commands or Node.js functions. The expected output is a JSON object string defining the necessary IAM permissions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getuserpolicy.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {getUserPolicy} from '@remotion/lambda';\n\nconsole.log(getUserPolicy()); /* `\n{\n  \"Version\": \"2012-10-17\",\n  \"Statements\": [\n    // ...\n  ]\n}\n` */\n```\n\n----------------------------------------\n\nTITLE: Project Structure Showing Image Sequence Assets (Text)\nDESCRIPTION: Presents a folder structure for projects using sequences of images as assets (e.g., for animation frames). frame1.png, frame2.png, and frame3.png reside alongside package.json, ready to be accessed dynamically within the Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nmy-video/\\n├─ public/\\n│  ├─ frame1.png\\n│  ├─ frame2.png\\n│  ├─ frame3.png\\n├─ package.json\\n\n```\n\n----------------------------------------\n\nTITLE: Bundling Remotion Project Using bundle() in Node.js - TypeScript\nDESCRIPTION: This snippet demonstrates how to bundle a Remotion project in a Node.js environment using the bundle() function from the @remotion/bundler package. It imports path for file system handling and invokes bundle() with the entry point to the Remotion source, including an example of passing a webpack override. To run, ensure @remotion/bundler is installed and that your entry point path and any custom webpackOverride are correct. The serveUrl output will point to the bundled build directory, typically used as input for renderMedia().\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/bundle.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport path from 'path';\\nimport {bundle} from '@remotion/bundler';\\n\\nconst serveUrl = await bundle({\\n  entryPoint: path.join(process.cwd(), './src/index.ts'),\\n  // If you have a webpack override in remotion.config.ts, pass it here as well.\\n  webpackOverride: (config) => config,\\n});\n```\n\n----------------------------------------\n\nTITLE: Preloading an Image with Remotion Preload API in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the preloadImage function from the @remotion/preload package to preload an image URL. By calling preloadImage with the image URL, a <link rel=\"preload\" as=\"image\"> tag is added to the HTML document head, which enables browsers to fetch the image in advance for immediate display when mounted using the <Img> tag. The returned function allows un-preloading the image by removing the preload link. Requires @remotion/preload as a dependency. The main input is the image URL as a string, and the code should be executed in a browser or a Remotion-based project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload-image.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { preloadImage } from \"@remotion/preload\";\n\nconst unpreload = preloadImage(\n  \"https://images.unsplash.com/photo-1561336313-0bd5e0b27ec8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1740&q=80\"\n);\n\n// If you want to un-preload the image later\nunpreload();\n```\n\n----------------------------------------\n\nTITLE: Registering a Remotion Composition with Default Props (TypeScript)\nDESCRIPTION: Registers a React component as a Remotion composition, specifying explicit default props. Assumes the presence of imported components and types. Uses 'Composition' from Remotion, passing size, fps, and a defaultProps object, which must match the props schema of 'MyComponent'. This prevents issues with previews missing required props and ensures predictable rendering. Dependencies: React, Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/passing-props.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// organize-imports-ignore\n\n// @filename: MyComponent.tsx\nimport React from 'react';\nexport const MyComponent: React.FC<{\n  propOne: string;\n  propTwo: number;\n}> = () => null;\n\n// @filename: Root.tsx\n\n// ---cut---\nimport React from 'react';\nimport {Composition} from 'remotion';\nimport {MyComponent} from './MyComponent';\n\nexport const Root: React.FC = () => {\n  return (\n    <>\n      <Composition\n        id=\"my-video\"\n        width={1080}\n        height={1080}\n        fps={30}\n        durationInFrames={30}\n        component={MyComponent}\n        defaultProps={{\n          propOne: 'Hi',\n          propTwo: 10,\n        }}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Aborting Stale Requests in calculateMetadata with AbortSignal (Remotion, TypeScript)\nDESCRIPTION: This snippet details using the abortSignal argument to cancel stale API requests in calculateMetadata, a recommended pattern when user-edited props change rapidly. Uses the fetch API's signal option along with Remotion's CalculateMetadataFunction. Prerequisites: Remotion, React, TypeScript, and understanding of AbortController. Inputs: props and abortSignal; output: Promise with props updated with fetched data or rejection if aborted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\n// ---cut---\nimport type { CalculateMetadataFunction } from \"remotion\";\n\ntype ApiResponse = {\n  title: string;\n  description: string;\n};\ntype MyCompProps = {\n  id: string;\n  data: ApiResponse | null;\n};\n\n// ---cut---\nexport const calculateMyCompMetadata: CalculateMetadataFunction<\n  MyCompProps\n> = async ({ props, abortSignal }) => {\n  const data = await fetch(`https://example.com/api/${props.id}`, {\n    signal: abortSignal,\n  });\n  const json = await data.json();\n\n  return {\n    props: {\n      ...props,\n      data: json,\n    },\n  };\n};\n\nexport const MyComp: React.FC<MyCompProps> = () => null;\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Lottie Animation with Remotion in TypeScript/React\nDESCRIPTION: This snippet demonstrates how to asynchronously fetch a Lottie animation JSON from a public URL and render it in a Remotion composition using React. It utilizes Remotion's delayRender, continueRender, and cancelRender functions for controlled rendering, and manages the LottieAnimationData state. The animation renders only after the data fetch succeeds; errors during loading are handled with cancelRender. Prerequisites: Remotion, @remotion/lottie, and a CORS-enabled Lottie animation JSON resource. Input: a remote JSON animation URL. Output: the rendered Lottie component, with null returned until data is ready.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/lottie-remote.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Lottie, LottieAnimationData } from \"@remotion/lottie\";\nimport { useEffect, useState } from \"react\";\nimport { cancelRender, continueRender, delayRender } from \"remotion\";\n\nconst Balloons = () => {\n  const [handle] = useState(() => delayRender(\"Loading Lottie animation\"));\n\n  const [animationData, setAnimationData] =\n    useState<LottieAnimationData | null>(null);\n\n  useEffect(() => {\n    fetch(\"https://assets4.lottiefiles.com/packages/lf20_zyquagfl.json\")\n      .then((data) => data.json())\n      .then((json) => {\n        setAnimationData(json);\n        continueRender(handle);\n      })\n      .catch((err) => {\n        cancelRender(err);\n      });\n  }, [handle]);\n\n  if (!animationData) {\n    return null;\n  }\n\n  return <Lottie animationData={animationData} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in .env File (txt)\nDESCRIPTION: Demonstrates the required format for storing the AWS Access Key ID and Secret Access Key in a `.env` file at the project root. These environment variables are used by Remotion Lambda tools and the SDK for authentication with AWS.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nREMOTION_AWS_ACCESS_KEY_ID=<Access key ID>\nREMOTION_AWS_SECRET_ACCESS_KEY=<Secret access key>\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Speed Video Segments in Remotion (TypeScript)\nDESCRIPTION: This TSX snippet defines a configuration array `segments` where each object specifies the original duration and desired playback speed for a part of the video. The `accumulateSegments` function calculates the actual start frame, end frame, playback speed, and the point in the source video time for each segment based on the variable speeds. The `SpeedSegments` component uses the `useCurrentFrame` hook to determine the current segment, then utilizes Remotion's `Sequence` and `OffthreadVideo` components to render only the active segment. It dynamically sets the `startFrom` property (time in the source video) and `playbackRate` for the `OffthreadVideo` based on the current segment's calculated data. It requires the `remotion` library and a video file (e.g., 'bigbuckbunny.mp4' accessed via `staticFile`). Note the specific handling of the `src` prop with `#t=0,` to opt-out of Remotion's automatic media fragment addition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/different-segments-at-different-speeds.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {OffthreadVideo, Sequence, staticFile, useCurrentFrame} from 'remotion';\n\nconst segments = [\n  {\n    duration: 100,\n    speed: 0.5,\n  },\n  {\n    duration: 100,\n    speed: 1,\n  },\n  {\n    duration: 200,\n    speed: 2,\n  },\n  {\n    duration: 400,\n    speed: 4,\n  },\n];\n\ntype AccumulatedSegment = {\n  start: number;\n  passedVideoTime: number;\n  end: number;\n  speed: number;\n};\n\nexport const accumulateSegments = () => {\n  const accumulatedSegments: AccumulatedSegment[] = [];\n  let accumulatedDuration = 0;\n  let accumulatedPassedVideoTime = 0;\n\n  for (const segment of segments) {\n    const duration = segment.duration / segment.speed;\n    accumulatedSegments.push({\n      end: accumulatedDuration + duration,\n      speed: segment.speed,\n      start: accumulatedDuration,\n      passedVideoTime: accumulatedPassedVideoTime,\n    });\n\n    accumulatedPassedVideoTime += segment.duration;\n    accumulatedDuration += duration;\n  }\n\n  return accumulatedSegments;\n};\n\nexport const SpeedSegments = () => {\n  const frame = useCurrentFrame();\n  const accumulated = accumulateSegments();\n\n  const currentSegment = accumulated.find(\n    (segment) => frame > segment.start && frame <= segment.end,\n  );\n\n  if (!currentSegment) {\n    return;\n  }\n\n  return (\n    <Sequence from={currentSegment.start}>\n      <OffthreadVideo\n        pauseWhenBuffering\n        startFrom={currentSegment.passedVideoTime}\n        // Remotion will automatically add a time fragment to the end of the video URL\n        // based on `startFrom`. Opt out of this by adding one yourself.\n        // https://www.remotion.dev/docs/media-fragments\n        src={`${staticFile('bigbuckbunny.mp4')}#t=0,`}\n        playbackRate={currentSegment.speed}\n      />\n    </Sequence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Sequential Timed Children with Remotion Sequence (React/TypeScript)\nDESCRIPTION: Demonstrates how to use the Remotion <Sequence> API to time-shift and display different React components as segments of a video timeline. Components Intro, Clip, and Outro are displayed at different frame intervals by adjusting the 'from' and 'durationInFrames' props. Requires the 'remotion' library and TypeScript/React; input is composition of child components, and output is sequenced rendering over specified frame ranges.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Sequence} from 'remotion';\n\nexport const Intro = () => <></>;\nexport const Clip = () => <></>;\nexport const Outro = () => <></>;\n\n// ---cut---\n\nconst MyTrailer = () => {\n  return (\n    <>\n      <Sequence durationInFrames={30}>\n        <Intro />\n      </Sequence>\n      <Sequence from={30} durationInFrames={30}>\n        <Clip />\n      </Sequence>\n      <Sequence from={60}>\n        <Outro />\n      </Sequence>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Zod Schema for Remotion Props (TypeScript)\nDESCRIPTION: This snippet defines a Zod schema named `MySchema`. It specifies an object structure containing an 'array' field, which itself is an array of objects, each having a 'subfield' property of type string. This schema defines the structure for the component's default props.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/focus-default-props-path.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"schema.ts\"\nimport { z } from \"zod\";\n\nconst MySchema = z.object({\n  array: z.array(\n    z.object({\n      subfield: z.string(),\n    }),\n  ),\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Trimming and Delaying Sequence Content (Remotion Nested Sequences, React/TypeScript)\nDESCRIPTION: Demonstrates advanced timing logic by nesting Remotion Sequences: an outer Sequence delays content by 30 frames, while the inner Sequence trims 15 frames from its start. Child BlueSquare will thus appear 30 frames in, with its animation advanced by 15 frames at mount. Requires 'remotion' and React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// @include: example-BlueSquare\nimport {Sequence} from 'remotion';\n// ---cut---\nconst TrimAndDelayExample: React.FC = () => {\n  return (\n    <Sequence from={30}>\n      <Sequence from={-15}>\n        <BlueSquare />\n      </Sequence>\n    </Sequence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Sequential Scene Transitions with <TransitionSeries> in Remotion (TypeScript/React)\nDESCRIPTION: This snippet defines a React component that organizes three colored scenes using <TransitionSeries>, with transitions between each scene specifying timing and presentation effects (fade and wipe). It requires @remotion/transitions, @remotion/transitions/fade, and @remotion/transitions/wipe as dependencies. The <Fill> helper component accepts a color and fills the background. Duration and animation parameters (e.g., frames for each scene and transition type/timing) are key props, controlling the sequence and nature of transitions rendered in a video project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/transitionseries.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill } from \\\"remotion\\\";\nconst Fill = ({ color }: { color: string }) => (\n  <AbsoluteFill style={{ backgroundColor: color }} />\n);\n\n// ---cut---\nimport {\n  linearTiming,\n  springTiming,\n  TransitionSeries,\n} from \\\"@remotion/transitions\\\";\n\nimport { fade } from \\\"@remotion/transitions/fade\\\";\nimport { wipe } from \\\"@remotion/transitions/wipe\\\";\n\nexport const MyComp: React.FC = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Fill color=\\\"blue\\\" />\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        timing={springTiming({ config: { damping: 200 } })}\n        presentation={fade()}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Fill color=\\\"black\\\" />\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        timing={linearTiming({ durationInFrames: 30 })}\n        presentation={wipe()}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Fill color=\\\"white\\\" />\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Using calculateMetadata with Remotion Composition in TypeScript\nDESCRIPTION: This snippet demonstrates how to define and use a calculateMetadata function with Remotion's Composition component in TypeScript. It imports needed types and components, defines a TypeScript type for component props, declares a reusable React component, and then shows a calculateMetadata function that dynamically assigns duration, transforms props, and sets a default codec. The example requires React and remotion libraries and expects props including 'text' and 'duration'. The calculateMetadata function is passed into the Composition component, allowing dynamic, prop-driven configuration of composition metadata. Outputs include a customized metadata object, and the pattern depends on JSON-serializable return values, async support, and integration with Remotion render processes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/calculate-metadata.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\nexport type MyComponentProps = {\n  text: string;\n  duration: number;\n};\n\nexport const MyComponent: React.FC<MyComponentProps> = ({text}) => {\n  return <div>{text}</div>;\n};\n\n// @filename: Vid.tsx\n// ---cut---\nimport React from 'react';\nimport {CalculateMetadataFunction, Composition} from 'remotion';\nimport {MyComponent, MyComponentProps} from './MyComp';\n\nconst calculateMetadata: CalculateMetadataFunction<MyComponentProps> = ({props, defaultProps, abortSignal}) => {\n  return {\n    // Change the metadata\n    durationInFrames: props.duration,\n    // or transform some props\n    props,\n    // or add per-composition default codec\n    defaultCodec: 'h264',\n  };\n};\n\nexport const Root: React.FC = () => {\n  return (\n    <Composition\n      id=\"MyComp\"\n      component={MyComponent}\n      durationInFrames={300}\n      fps={30}\n      width={1920}\n      height={1080}\n      defaultProps={{\n        text: 'Hello World',\n        duration: 1,\n      }}\n      calculateMetadata={calculateMetadata}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding the Remotion <Player /> in a React App - React (TSX)\nDESCRIPTION: Defines an App component demonstrating how to embed the Remotion <Player /> in a React application. Passes the composition component, input props, video parameters (duration, dimensions, fps), and styling to the player instance for in-app video preview. Requires @remotion/player installed and the referenced MyComp component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\n// @filename: ./remotion/MyComp.tsx\nexport const MyComp = () => <><\\/>;\n\n// @filename: index.tsx\n// ---cut---\nimport {Player} from '@remotion/player';\nimport {MyComp} from './remotion/MyComp';\n\nexport const App: React.FC = () => {\n  return (\n    <Player\n      component={MyComp}\n      inputProps={{text: 'World'}}\n      durationInFrames={120}\n      compositionWidth={1920}\n      compositionHeight={1080}\n      fps={30}\n      style={{\n        width: 1280,\n        height: 720,\n      }}\n      controls\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Full Rendering Script (TypeScript/MJS)\nDESCRIPTION: A complete script (`render.mjs`) that combines project bundling and dataset rendering. It imports necessary functions from `@remotion/bundler` and `@remotion/renderer`, the dataset, and webpack configuration. It first bundles the project, then iterates through the dataset, selecting the composition and rendering a video for each data entry.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// @filename: dataset.ts\nexport const data = [\n  {\n    name: 'React',\n    repo: 'facebook/react',\n    logo: 'https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg',\n  },\n  {\n    name: 'Remotion',\n    repo: 'remotion-dev/remotion',\n    logo: 'https://github.com/remotion-dev/logo/raw/main/withouttitle/element-0.png',\n  },\n];\n\n// @filename: webpack-override.ts\nimport type {WebpackOverrideFn} from '@remotion/bundler';\nexport const webpackOverride: WebpackOverrideFn = (f) => f;\n\n// @filename: render.ts\n// ---cut---\nimport {selectComposition, renderMedia} from '@remotion/renderer';\nimport {webpackOverride} from './webpack-override';\nimport {bundle} from '@remotion/bundler';\nimport {data} from './dataset';\n\nconst compositionId = 'MyComp';\n\nconst bundleLocation = await bundle({\n  entryPoint: './src/index.ts',\n  // If you have a webpack override in remotion.config.ts, pass it here as well.\n  webpackOverride: webpackOverride,\n});\n\nfor (const entry of data) {\n  const composition = await selectComposition({\n    serveUrl: bundleLocation,\n    id: compositionId,\n    inputProps: entry,\n  });\n\n  await renderMedia({\n    composition,\n    serveUrl: bundleLocation,\n    codec: 'h264',\n    outputLocation: `out/${entry.name}.mp4`,\n    inputProps: entry,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Local Audio using staticFile in Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates referencing local audio files stored in the project's `public/` folder. Import both `Audio` and `staticFile` from 'remotion'. Use `staticFile('your-audio.mp3')` within the `src` prop of the `Audio` component to correctly reference the local asset.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Audio, staticFile} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\treturn <Audio src={staticFile('audio.mp3')} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Separating Player and Controls for Optimal Updates - Remotion in TypeScript\nDESCRIPTION: This improved example separates the Player rendering from time-tracking UI, each as sibling components sharing a ref, leading to significantly less re-rendering of the Player. PlayerOnly is responsible purely for rendering the Player, while ControlsOnly handles updating and displaying current time using event listeners. Dependencies include React, @remotion/player, and a MyVideo component. All player props are passed via a constant, and refs are shared for control synchronization. The approach helps maintain smooth playback under rapid state changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/best-practices.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx twoslash title=\\\"\\u2705 Better\\\"\\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;// @filename: index.tsx\\nconst otherProps = {\\n  durationInFrames: 120,\\n  compositionWidth: 1920,\\n  compositionHeight: 1080,\\n  fps: 30,\\n} as const;\\nimport {Player, PlayerRef} from '@remotion/player';\\nimport {useEffect, useRef, useState} from 'react';\\nimport {MyVideo} from './remotion/MyVideo';\\n// ---cut---\\nconst PlayerOnly: React.FC<{\\n  playerRef: React.RefObject<PlayerRef | null>;\\n}> = ({playerRef}) => {\\n  return <Player ref={playerRef} component={MyVideo} {...otherProps} />;\\n};\\n\\nconst ControlsOnly: React.FC<{\\n  playerRef: React.RefObject<PlayerRef | null>;\\n}> = ({playerRef}) => {\\n  const [currentTime, setCurrentTime] = useState(0);\\n\\n  useEffect(() => {\\n    playerRef.current?.addEventListener('timeupdate', (e) => {\\n      setCurrentTime(e.detail.frame);\\n    });\\n  }, []);\\n\\n  return <div>Current time: {currentTime}</div>;\\n};\\n\\nexport const App: React.FC = () => {\\n  const playerRef = useRef<PlayerRef>(null);\\n\\n  return (\\n    <>\\n      <PlayerOnly playerRef={playerRef} />\\n      <ControlsOnly playerRef={playerRef} />\\n    </>\\n  );\\n};\\n```\n```\n\n----------------------------------------\n\nTITLE: Registering a Composition in Remotion Root (TypeScript)\nDESCRIPTION: Illustrates how to register a React component as a composition using Remotion's <Composition> within the application's root. Depends on the 'remotion' package and expects that MyComposition is defined in the local context. The composition's video properties (durationInFrames, fps, width, height) are statically provided. Output is the registration of a composition that will appear in Remotion's sidebar. Multiple compositions can be registered by wrapping them in a React Fragment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/the-fundamentals.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Composition} from 'remotion';\n// @include: example-MyComposition\n// ---cut---\n\nexport const RemotionRoot: React.FC = () => {\n  return (\n    <Composition\n      id=\\\"MyComposition\\\"\n      durationInFrames={150}\n      fps={30}\n      width={1920}\n      height={1080}\n      component={MyComposition}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the interpolate Helper for Animations in Remotion (React TSX)\nDESCRIPTION: This snippet demonstrates using Remotion's `interpolate` function as a more readable alternative for creating animations. It maps the current frame number (input range `[0, 60]`) to an opacity value (output range `[0, 1]`). The `extrapolateRight: \"clamp\"` option prevents the opacity from exceeding 1 after frame 60. This achieves the same fade-in effect as the previous example but in a more declarative way. It depends on the `frame` variable obtained via `useCurrentFrame`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animating-properties.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { useCurrentFrame } from \"remotion\";\nconst frame = useCurrentFrame();\n// ---cut---\nimport { interpolate } from \"remotion\";\n\nconst opacity = interpolate(frame, [0, 60], [0, 1], {\n  /*                        ^^^^^   ^^^^^    ^^^^\n  Variable to interpolate ----|       |       |\n  Input range ------------------------|       |\n  Output range -------------------------------|  */\n  extrapolateRight: \"clamp\",\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Remotion Component (TSX)\nDESCRIPTION: A React functional component (`MyComposition`) using TypeScript and Remotion APIs. It accepts `name`, `repo`, and `logo` as props and uses Remotion hooks (`useCurrentFrame`, `useVideoConfig`) and animation functions (`spring`, `interpolate`) to create an animated presentation of the data within an `AbsoluteFill` container. This component serves as the template for the videos.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {AbsoluteFill, Img, interpolate, spring, useCurrentFrame, useVideoConfig} from 'remotion';\n\ntype Props = {\n  name: string;\n  logo: string;\n  repo: string;\n};\n\nexport const MyComposition: React.FC<Props> = ({name, repo, logo}) => {\n  const frame = useCurrentFrame();\n  const {fps} = useVideoConfig();\n\n  const scale = spring({\n    fps,\n    frame: frame - 10,\n    config: {\n      damping: 100,\n    },\n  });\n\n  const opacity = interpolate(frame, [30, 40], [0, 1], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'clamp',\n  });\n  const moveY = interpolate(frame, [20, 30], [10, 0], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'clamp',\n  });\n\n  return (\n    <AbsoluteFill\n      style={{\n        scale: String(scale),\n        backgroundColor: 'white',\n        fontWeight: 'bold',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          alignItems: 'center',\n          gap: 20,\n        }}\n      >\n        <Img\n          src={logo}\n          style={{\n            height: 80,\n          }}\n        />\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <div\n            style={{\n              fontSize: 40,\n              transform: `translateY(${moveY}px)`,\n              lineHeight: 1,\n            }}\n          >\n            {name}\n          </div>\n          <div\n            style={{\n              fontSize: 20,\n              opacity,\n              lineHeight: 1.25,\n            }}\n          >\n            {repo}\n          </div>\n        </div>\n      </div>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Bezier Easing with interpolate() in TypeScript\nDESCRIPTION: Shows how to use the `easing` option in `interpolate` to apply a non-linear transition, specifically using a Bezier curve defined by `Easing.bezier()`. It also combines easing with clamping (`extrapolateLeft: 'clamp'`, `extrapolateRight: 'clamp'`) for controlled animation behavior. Examples cover both simple and multi-point interpolation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { useCurrentFrame } from \"remotion\";\nconst frame = useCurrentFrame();\n// ---cut---\nimport { interpolate, Easing } from \"remotion\";\n\ninterpolate(frame, [0, 100], [0, 1], {\n  easing: Easing.bezier(0.8, 0.22, 0.96, 0.65),\n  extrapolateLeft: \"clamp\",\n  extrapolateRight: \"clamp\",\n});\n\n//this is Remotion2.0 feature\ninterpolate(frame, [0, 10, 40, 100], [0, 0.2, 0.6, 1], {\n  easing: Easing.bezier(0.8, 0.22, 0.96, 0.65),\n  extrapolateLeft: \"clamp\",\n  extrapolateRight: \"clamp\",\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Remotion Composition Component (JSX)\nDESCRIPTION: Refers to the React component used to register a renderable Composition within the Remotion Studio. It bundles the visual component with metadata like dimensions, duration, and FPS.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/composition.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Composition>\n```\n\n----------------------------------------\n\nTITLE: Validating AWS Permissions with Remotion CLI (bash)\nDESCRIPTION: Runs the Remotion Lambda CLI command to check if the configured AWS user permissions are sufficient by validating them against the AWS Policy Simulator. This optional step helps diagnose potential permission issues after setting up the user policy.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda policies validate\n```\n\n----------------------------------------\n\nTITLE: Example: Using useDelayRender to Control Rendering in a Remotion React Component (TypeScript)\nDESCRIPTION: This example demonstrates how to use the useDelayRender hook in a functional React component to delay rendering until asynchronous data fetching has completed. Dependencies include React (useCallback, useEffect, useState), Remotion's API, and a network endpoint. The component initializes the delayed render, fetches API data, and resumes rendering by calling continueRender once data is loaded. The most significant parameters are the API endpoint and the continueRender callback. Output is a rendered React element with fetched data, and improper handling of the callback can lead to indefinite rendering delays.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/use-delay-render.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { continueRender, delayRender } from \\\"remotion\\\";\n\ntype ContinueRenderFnBound = () => void;\n\nexport const useDelayRender = (label?: string): ContinueRenderFnBound => {\n  const [handle] = useState(() => delayRender(label));\n\n  return useCallback(() => {\n    continueRender(handle);\n  }, [handle]);\n};\n\n// ---cut---\n\nimport { useCallback, useEffect, useState } from \\\"react\\\";\n\nexport const MyVideo = () => {\n  const [data, setData] = useState(null);\n  const continueRender = useDelayRender();\n\n  const fetchData = useCallback(async () => {\n    const response = await fetch(\\\"http://example.com/api\\\");\n    const json = await response.json();\n    setData(json);\n\n    continueRender();\n  }, [continueRender]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {data ? (\n        <div>This video has data from an API! {JSON.stringify(data)}</div>\n      ) : null}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a Polygon Path using makePolygon() in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `makePolygon` function from `@remotion/shapes`. It generates the necessary data (SVG path string, width, height, transform origin, and instructions) for a 5-sided polygon with a radius of 80 units. The resulting properties are then logged to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/make-polygon.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makePolygon } from \"@remotion/shapes\";\n\nconst { path, width, height, transformOrigin, instructions } = makePolygon({\n  points: 5,\n  radius: 80,\n});\n\nconsole.log(path); // M 76.08452130361228 0 L 152.16904260722458 55.278640450004204 L 123.10734148701013 144.72135954999578 L 29.061701120214437 144.72135954999578 L 0 55.27864045000418\nconsole.log(width); // 160\nconsole.log(height); // 160\nconsole.log(transformOrigin); // '80 80'\nconsole.log(instructions); // '[{type: \"M\"}, ...]' \n\n```\n\n----------------------------------------\n\nTITLE: Customizing Spring Animation Duration in Remotion (TypeScript/React)\nDESCRIPTION: This example shows how to apply the spring() function from Remotion with a custom 'durationInFrames' parameter, forcing the animation to fit exactly within 40 frames. Dependencies are identical to the previous example: Remotion and its relevant hooks. It highlights use of the 'durationInFrames' key to ensure the animation completes in a fixed frame window, which can be useful for synchronizing animations with timed video sequences; the output remains an animated value, now constrained in its transition duration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spring.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { spring, useCurrentFrame, useVideoConfig } from \"remotion\";\n// ---cut---\nconst frame = useCurrentFrame();\nconst { fps } = useVideoConfig();\n\nconst value = spring({\n  frame,\n  fps,\n  config: {\n    stiffness: 100,\n  },\n  durationInFrames: 40,\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating and Applying Metadata with Remotion calculateMetadata - TypeScript/React\nDESCRIPTION: This snippet demonstrates how to configure a Remotion <Composition> to dynamically determine its duration based on properties retrieved from the source video using the calculateMetadata callback. Dependencies include the remotion library and @remotion/media-parser package. The calculateMetadata function asynchronously fetches the video's duration and calculates durationInFrames according to the project's frame rate. Props may be overridden via input parameters during rendering. Input properties include the video src URL. The output is a React composition rendered with a duration that matches the source media. This approach is recommended for Remotion v4.0.0 and later to avoid redundant network calls and ensure deterministic metadata resolution.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-metadata.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\nimport {Composition, Video} from 'remotion';\n\ntype MyCompProps = {\n  src: string;\n};\n\nconst MyComp: React.FC<MyCompProps> = ({src}) => {\n  return <Video src={src} />;\n};\n\nexport const Root: React.FC = () => {\n  return (\n    <Composition\n      id=\"MyComp\"\n      component={MyComp}\n      durationInFrames={300}\n      fps={30}\n      width={1920}\n      height={1080}\n      defaultProps={{\n        src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n      }}\n      calculateMetadata={async ({props}) => {\n        const {slowDurationInSeconds} = await parseMedia({\n          src: props.src,\n          fields: {slowDurationInSeconds: true},\n        });\n\n        return {\n          durationInFrames: Math.floor(slowDurationInSeconds * 30),\n        };\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing an Image Asset Using staticFile in Remotion (TypeScript)\nDESCRIPTION: Demonstrates how to import and display a static image using Remotion's Img component and the staticFile() helper. Requires the remotion package as a dependency. The staticFile() function is used to resolve the path to logo.png in the public/ folder, which is then rendered through <Img /> in a React functional component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Img, staticFile } from \\\"remotion\\\";\\n\\nexport const MyComp: React.FC = () => {\\n  return <Img src={staticFile(\\\"logo.png\\\")} />;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Remotion Compositions in TypeScript Root Component\nDESCRIPTION: Shows how to define and export a Remotion root component that includes multiple Composition components, each with distinct parameters, wrapped in a React Fragment. Each composition specifies properties like id, fps, height, width, durationInFrames, and the associated component. Dependencies are 'remotion', 'React', and the individual composition components. Intended inputs are composition configuration props; the output is aggregated composition registration. Constraints include ensuring correct composition props and React component structure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/register-root.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: MyComponent.tsx\\nexport default () => <></>;\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: MyOtherComponent.tsx\\nexport default () => <></>;\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: index.tsx\\nimport { Composition } from \\\"remotion\\\";\\n// ---cut---\\nimport MyComponent from \\\"./MyComponent\\\";\\nimport MyOtherComponent from \\\"./MyOtherComponent\\\";\\n\\nexport const RemotionRoot = () => {\\n  return (\\n    <>\\n      <Composition\\n        id=\\\"comp\\\"\\n        fps={30}\\n        height={1080}\\n        width={1920}\\n        durationInFrames={90}\\n        component={MyComponent}\\n      />\\n      <Composition\\n        id=\\\"anothercomp\\\"\\n        fps={30}\\n        height={1080}\\n        width={1920}\\n        durationInFrames={90}\\n        component={MyOtherComponent}\\n      />\\n    </>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining and Rendering Still and Video Compositions with Remotion in TypeScript/React\nDESCRIPTION: This example demonstrates how to define both a video and a still image composition using the Remotion library in a TypeScript/React project. The MyComp component is created as a stub, and Composition and Still are rendered in MyVideo with the same component but different properties. Dependencies include React and Remotion, and the code requires importing the relevant components and ensuring that Remotion is set up in the project. The parameters width and height control the output size, fps and durationInFrames control the video length for Composition, while Still omits these for a single frame. The output produces either a video or a still image depending on the component used.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/still.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./MyComp.tsx\\nexport const MyComp = () => <></>;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @filename: index.tsx\\n// ---cut---\\nimport { Composition, Still } from \\\"remotion\\\";\\nimport { MyComp } from \\\"./MyComp\\\";\\n\\nexport const MyVideo = () => {\\n  return (\\n    <>\\n      <Composition\\n        id=\\\"my-video\\\"\\n        component={MyComp}\\n        width={1080}\\n        height={1080}\\n        fps={30}\\n        durationInFrames={3 * 30}\\n      />\\n      <Still id=\\\"my-image\\\" component={MyComp} width={1080} height={1080} />\\n    </>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering with JSON Props File in Remotion CLI - Bash\nDESCRIPTION: This example shows how to reference a file containing JSON input properties when rendering a Remotion composition using the --props flag. Instead of an inline JSON string, the path to a JSON file is provided. Remotion parses the file and injects its contents as props for the project's runtime. The JSON file must be valid and accessible at the specified path, and Remotion must be set up in the environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-input-props.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render --props=./path/to/props.json\n```\n\n----------------------------------------\n\nTITLE: Generating Ellipse Data with makeEllipse in TypeScript\nDESCRIPTION: This TypeScript example demonstrates importing and utilizing the `makeEllipse` function from `@remotion/shapes`. It constructs an ellipse with specified horizontal (`rx`) and vertical (`ry`) radii, extracting the resulting SVG path string, bounding box dimensions (width, height), and transform origin. These generated properties are then logged for inspection.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/make-ellipse.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx twoslash title=\"ellipse.ts\"\nimport { makeEllipse } from \"@remotion/shapes\";\n\nconst { path, width, height, transformOrigin } = makeEllipse({\n  rx: 100,\n  ry: 50,\n});\n\nconsole.log(path); // M 100 0 a 100 100 0 1 0 1 0\nconsole.log(width); // 200\nconsole.log(height); // 100\nconsole.log(transformOrigin); // '100 50'\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Image Redirects in Preloading with Remotion Preload API in TypeScript\nDESCRIPTION: This code shows how to handle potential redirects when preloading images using the @remotion/preload package. It combines the preloadImage and resolveRedirect functions to ensure the final resolved image URL is preloaded, improving the likelihood that the desired image is fetched and cached. If resolveRedirect fails (e.g., due to CORS limitations), it falls back to preloading the original URL. The snippet also demonstrates creating a React component that renders the resolved (or original) image using the <Img> component. Requires @remotion/preload and remotion as dependencies. Inputs are the original image URL; outputs are side effects of improved image load reliability.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload-image.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { preloadImage, resolveRedirect } from \"@remotion/preload\";\nimport { Img } from \"remotion\";\n\n// This code gets executed immediately once the page loads\nlet urlToLoad =\n  \"https://images.unsplash.com/photo-1561336313-0bd5e0b27ec8?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1740&q=80\";\n\nresolveRedirect(urlToLoad)\n  .then((resolved) => {\n    // Was able to resolve a redirect, setting this as the image to load\n    urlToLoad = resolved;\n  })\n  .catch((err) => {\n    // Was unable to resolve redirect e.g. due to no CORS support\n    console.log(\"Could not resolve redirect\", err);\n  })\n  .finally(() => {\n    // In either case, we try to preload the original or resolved URL\n    preloadImage(urlToLoad);\n  });\n\n// This code only executes once the component gets mounted\nconst MyComp: React.FC = () => {\n  // If the component did not mount immediately, this will be the resolved URL.\n\n  // If the component mounted immediately, this will be the original URL.\n  // In that case preloading is ineffective anyway.\n  return <Img src={urlToLoad}></Img>;\n};\n```\n\n----------------------------------------\n\nTITLE: Accelerated Video Playback with Frame Accumulation in Remotion (TypeScript/React)\nDESCRIPTION: This snippet correctly implements accelerated video playback in Remotion by accumulating the elapsed time for each frame, ensuring the video advances smoothly as playback speed changes dynamically. It uses a remapSpeed helper to sum up the playback rates for all frames up to the current, calculates the correct starting video frame (startFrom), and adjusts playbackRate accordingly. Required dependencies are React and Remotion; the key parameters include frame (from useCurrentFrame), a custom speedFunction, and video source URL. The rendered output is a Sequence containing an OffthreadVideo that reflects the desired speed profile, with limitations about timeline jumps in Remotion Studio if the frame is not calculated idempotently.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/accelerated-video.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {interpolate, Sequence, useCurrentFrame, OffthreadVideo} from 'remotion';\\n\\nconst remapSpeed = (frame: number, speed: (fr: number) => number) => {\\n  let framesPassed = 0;\\n  for (let i = 0; i <= frame; i++) {\\n    framesPassed += speed(i);\\n  }\\n\\n  return framesPassed;\\n};\\n\\nexport const AcceleratedVideo: React.FC = () => {\\n  const frame = useCurrentFrame();\\n\\n  const speedFunction = (f: number) => interpolate(f, [0, 500], [1, 5]);\\n\\n  const remappedFrame = remapSpeed(frame, speedFunction);\\n\\n  return (\\n    <Sequence from={frame}>\\n      <OffthreadVideo\\n        startFrom={Math.round(remappedFrame)}\\n        playbackRate={speedFunction(frame)}\\n        src=\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4#disable\"\\n      />\\n    </Sequence>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Timing Element Display with Sequence in Remotion (TypeScript)\nDESCRIPTION: This code snippet illustrates how to use the Sequence component along with AbsoluteFill in Remotion to control element timing and layering. It arranges an image to be displayed for the entire sequence, while a heading is shown only for a specified duration using the Sequence from and durationInFrames props. Dependencies include React and Remotion's AbsoluteFill, Img, staticFile, and Sequence components. Key parameters are Sequence's from (start frame) and durationInFrames (life span in frames). The output is a video in which the background is always visible, but the text appears starting from frame 60 for 40 frames.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layers.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\\nimport {AbsoluteFill, Img, staticFile, Sequence} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Sequence>\\n        <Img src={staticFile('bg.png')} />\\n      </Sequence>\\n      <Sequence from={60} durationInFrames={40}>\\n        <h1>This text appears after 60 frames!</h1>\\n      </Sequence>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Listening for PlayerRef Seeked Event (TypeScript/React)\nDESCRIPTION: Focuses on handling the 'seeked' event on PlayerRef to execute code whenever video playback position changes due to seeking. Event parameter includes e.detail.frame for the new frame index. Requires '@remotion/player', React, and a playerRef configured. Limited to responding only to seeked events, not frame updates during playback.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_10\n\nLANGUAGE: TSX\nCODE:\n```\nimport {PlayerRef} from '@remotion/player';\nimport {useRef} from 'react';\nconst playerRef = useRef<PlayerRef>(null);\nif (!playerRef.current) {\n  throw new Error();\n}\n// ---cut---\nplayerRef.current.addEventListener('seeked', (e) => {\n  console.log('seeked to ' + e.detail.frame); // seeked to 120\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Bar Audio Visualization in Remotion (TSX)\nDESCRIPTION: This React component demonstrates how to create a simple bar chart audio visualization. It uses the `useAudioData` hook from `@remotion/media-utils` to load audio data from a static file and the `visualizeAudio` function to calculate the amplitude for 16 frequency bands at the current frame. The component then renders a series of blue divs whose widths correspond to the calculated amplitudes, alongside the playing `<Audio>` component. It requires `@remotion/media-utils`, `remotion`, and React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/visualization.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport {useAudioData, visualizeAudio} from '@remotion/media-utils';\nimport {Audio, staticFile, useCurrentFrame, useVideoConfig} from 'remotion';\n\nconst music = staticFile('music.mp3');\n\nexport const MyComponent: React.FC = () => {\n  const frame = useCurrentFrame();\n  const {width, height, fps} = useVideoConfig();\n  const audioData = useAudioData(music);\n\n  if (!audioData) {\n    return null;\n  }\n\n  const visualization = visualizeAudio({\n    fps,\n    frame,\n    audioData,\n    numberOfSamples: 16,\n  }); // [0.22, 0.1, 0.01, 0.01, 0.01, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n  // Render a bar chart for each frequency, the higher the amplitude,\n  // the longer the bar\n  return (\n    <div>\n      <Audio src={music} />\n      {visualization.map((v) => {\n        return <div style={{width: 1000 * v, height: 15, backgroundColor: 'blue'}} />;\n      })}\n    </div>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Volume Slider for Remotion Player in React (tsx)\nDESCRIPTION: Defines a `VolumeSlider` React component (tsx) that interacts with a Remotion player instance via a `playerRef`. It uses `useState` to manage the `volume` and `muted` state locally. `useEffect` sets up event listeners ('volumechange', 'mutechange') on the player to synchronize the component's state with the actual player state. The slider's `onChange` handler updates the player's volume using `playerRef.current.setVolume()` and handles unmuting the player if the volume is adjusted above zero while muted. The slider visually represents the volume, showing 0 when muted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/custom-controls.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PlayerRef} from '@remotion/player';\nimport React, {useEffect, useState} from 'react';\n\nexport const VolumeSlider: React.FC<{ // tsx(React)\n  playerRef: React.RefObject<PlayerRef | null>;\n}> = ({playerRef}) => {\n  const [volume, setVolume] = useState(playerRef.current?.getVolume() ?? 1);\n  const [muted, setMuted] = useState(playerRef.current?.isMuted() ?? false);\n\n  useEffect(() => {\n    const {current} = playerRef;\n    if (!current) {\n      return;\n    }\n\n    const onVolumeChange = () => {\n      setVolume(current.getVolume());\n    };\n\n    const onMuteChange = () => {\n      setMuted(current.isMuted());\n    };\n\n    current.addEventListener('volumechange', onVolumeChange);\n    current.addEventListener('mutechange', onMuteChange);\n\n    return () => {\n      current.removeEventListener('volumechange', onVolumeChange);\n      current.removeEventListener('mutechange', onMuteChange);\n    };\n  }, [playerRef]);\n\n  const onChange: React.ChangeEventHandler<HTMLInputElement> =\n    React.useCallback(\n      (evt) => {\n        if (!playerRef.current) {\n          return;\n        }\n\n        const newVolume = Number(evt.target.value);\n        if (newVolume > 0 && playerRef.current.isMuted()) {\n          playerRef.current.unmute();\n        }\n\n        playerRef.current.setVolume(newVolume);\n      },\n      [playerRef],\n    );\n\n  return (\n    <input\n      value={muted ? 0 : volume}\n      type=\"range\"\n      min={0}\n      max={1}\n      step={0.01}\n      onChange={onChange}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Sequential Videos with Remotion Series - TypeScript\nDESCRIPTION: Defines a React component that renders an array of videos in sequence using <Series> and <OffthreadVideo> from the Remotion library. Expects a list of video sources and pre-determined durations; throws if any duration is missing. Each <Series.Sequence> displays one video sequentially. Requires Remotion as a dependency and expects each video object to have 'src' and 'durationInFrames'. The output is a seamless video composition with exact video switching where each video ends.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/sequence.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {OffthreadVideo, Series} from 'remotion';\n\ntype VideoToEmbed = {\n  src: string;\n  durationInFrames: number | null;\n};\n\ntype Props = {\n  videos: VideoToEmbed[];\n};\n\nexport const VideosInSequence: React.FC<Props> = ({videos}) => {\n  return (\n    <Series>\n      {videos.map((vid) => {\n        if (vid.durationInFrames === null) {\n          throw new Error('Could not get video duration');\n        }\n\n        return (\n          <Series.Sequence key={vid.src} durationInFrames={vid.durationInFrames}>\n            <OffthreadVideo src={vid.src} />\n          </Series.Sequence>\n        );\n      })}\n    </Series>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Selecting a Specific Remotion Composition (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to use the `selectComposition()` function from `@remotion/renderer` to retrieve metadata for a specific Remotion composition. It first bundles a Remotion project using `bundle()` from `@remotion/bundler`, then calls `selectComposition()` with the bundle URL (`serveUrl`), the target composition's `id`, and any necessary `inputProps`. The resulting composition object contains metadata like width, height, fps, and durationInFrames, which are then logged to the console. Requires `@remotion/bundler` and `@remotion/renderer` packages, and a valid Remotion project entry point.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/select-composition.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ---cut---\nimport {bundle} from '@remotion/bundler';\nimport {selectComposition} from '@remotion/renderer';\n\nconst bundled = await bundle({entryPoint: require.resolve('./src/index.ts')});\nconst composition = await selectComposition({\n  serveUrl: bundled,\n  id: 'MyComposition',\n  inputProps: {},\n});\n\nconsole.log(composition.id); // \"MyComposition\"\nconsole.log(composition.width, composition.height);\nconsole.log(composition.fps, composition.durationInFrames);\n```\n\n----------------------------------------\n\nTITLE: Embedding Video with OffthreadVideo in Remotion (TypeScript/React)\nDESCRIPTION: This snippet shows how to embed a video into a Remotion component using the `OffthreadVideo` component. It requires importing `OffthreadVideo` from 'remotion'. The `src` prop specifies the video source (URL or local file via `staticFile`). Standard CSS styles can be applied via the `style` prop. Optional props like `startFrom`, `endAt`, and `volume` control playback.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {OffthreadVideo} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\treturn (\n\t\t<div>\n\t\t\t<OffthreadVideo\n\t\t\t\tsrc=\"https://remotion.dev/bbb.mp4\"\n\t\t\t\tstyle={{width: '100%'}}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Video Composition in Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates the structure of the `Root.tsx` file. It defines a React functional component (`Root`) that uses the `Composition` component from 'remotion' to define a video render. Key props include `id`, `component` (the React component to render), `durationInFrames`, `width`, `height`, `fps`, and `defaultProps` for the rendered component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Composition} from 'remotion';\nimport {MyComp} from './MyComp';\n\nexport const Root: React.FC = () => {\n\treturn (\n\t\t<>\n\t\t\t<Composition\n\t\t\t\tid=\"MyComp\"\n\t\t\t\tcomponent={MyComp}\n\t\t\t\tdurationInFrames={120}\n\t\t\t\twidth={1920}\n\t\t\t\theight={1080}\n\t\t\t\tfps={30}\n\t\t\t\tdefaultProps={{}}\n\t\t\t/>\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Generating IAM Role Policy with Remotion CLI (bash)\nDESCRIPTION: Executes the Remotion Lambda CLI command to generate the JSON definition for an IAM policy required by the Lambda execution role. The output should be copied and used when creating the `remotion-lambda-policy` in AWS IAM during Step 2 of the setup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda policies role\n```\n\n----------------------------------------\n\nTITLE: Creating Transitions between Sequences with TransitionSeries (TypeScript/React)\nDESCRIPTION: Shows how to use `TransitionSeries` from `@remotion/transitions` for sequential elements with transitions. Requires alternating `TransitionSeries.Sequence` (specifying content and duration) and `TransitionSeries.Transition` (specifying timing and presentation like `fade` or `wipe`). The order is crucial. Requires `@remotion/transitions` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react'; // Added React import\nimport {\n\tlinearTiming,\n\tspringTiming,\n\tTransitionSeries,\n} from '@remotion/transitions';\nimport {Fill} from 'remotion'; // Added Fill import based on usage\nimport {fade} from '@remotion/transitions/fade';\nimport {wipe} from '@remotion/transitions/wipe';\n\nexport const MyComp: React.FC = () => {\n\treturn (\n\t\t<TransitionSeries>\n\t\t\t<TransitionSeries.Sequence durationInFrames={60}>\n\t\t\t\t<Fill color=\"blue\" />\n\t\t\t</TransitionSeries.Sequence>\n\t\t\t<TransitionSeries.Transition\n\t\t\t\ttiming={springTiming({config: {damping: 200}})}\n\t\t\t\tpresentation={fade()}\n\t\t\t/>\n\t\t\t<TransitionSeries.Sequence durationInFrames={60}>\n\t\t\t\t<Fill color=\"black\" />\n\t\t\t</TransitionSeries.Sequence>\n\t\t\t<TransitionSeries.Transition\n\t\t\t\ttiming={linearTiming({durationInFrames: 30})}\n\t\t\t\tpresentation={wipe()}\n\t\t\t/>\n\t\t\t<TransitionSeries.Sequence durationInFrames={60}>\n\t\t\t\t<Fill color=\"white\" />\n\t\t\t</TransitionSeries.Sequence>\n\t\t</TransitionSeries>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Recommended: Using Remotion's <Img> and <AbsoluteFill> for Backgrounds (TSX)\nDESCRIPTION: Illustrates the recommended solution to avoid flickering when displaying images in Remotion. It uses the dedicated `<Img>` component to handle image loading and `<AbsoluteFill>` to layer content (like text) on top of the image. This ensures Remotion waits for the image to load before rendering the frame.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/background-image.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst src = \"abc\";\n// ---cut---\nimport { AbsoluteFill, Img } from \"remotion\";\n\nconst myMarkup = (\n  <AbsoluteFill>\n    <AbsoluteFill>\n      <Img\n        style={{\n          width: \"100%\",\n        }}\n        src={src}\n      />\n    </AbsoluteFill>\n    <AbsoluteFill>\n      <p>Hello World</p>\n    </AbsoluteFill>\n  </AbsoluteFill>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Spring Animation in Remotion (TypeScript/React)\nDESCRIPTION: This TypeScript/TSX snippet demonstrates how to use the spring() function from Remotion to animate a value based on the current video frame and fps using default configuration for spring stiffness. It requires the Remotion package and assumes usage inside a React component where both useCurrentFrame and useVideoConfig hooks are available. The primary parameters are 'frame' and 'fps', with a custom 'config' object allowing you to tune the physical properties of the animation; output is a smoothly animated value progressing with the video timeline.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spring.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { spring, useCurrentFrame, useVideoConfig } from \"remotion\";\n// ---cut---\nconst frame = useCurrentFrame();\nconst { fps } = useVideoConfig();\n\nconst value = spring({\n  frame,\n  fps,\n  config: {\n    stiffness: 100,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Remotion Composition Component in TypeScript\nDESCRIPTION: This TypeScript (TSX) snippet demonstrates how to set up a Remotion Composition using React components, specifying exact video parameters such as width, height, frame rate (fps), and duration in frames. It defines a function component MyComponent and registers it for rendering by the Remotion Composition. Make sure to have \"react\" and \"remotion\" installed, and use a TypeScript environment capable of handling JSX syntax. The key props—width, height, fps, durationInFrames, component, and id—determine the output video’s dimensions and playback properties. Output is a registered video composition visible to Remotion’s rendering pipeline, with customization constraints dependent on codec and output format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/quality.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Composition } from \"remotion\";\n\nconst MyComponent = () => {\n  return <div>Hello World</div>;\n};\n\nconst Root: React.FC = () => {\n  return (\n    <Composition\n      width={1920}\n      height={1080}\n      fps={30}\n      durationInFrames={100}\n      component={MyComponent}\n      id=\"MyComp\"\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Progress Callback for stitchFramesToVideo - Remotion Renderer - TypeScript\nDESCRIPTION: Defines an onProgress callback function to receive updates about the encoding progress during video stitching with stitchFramesToVideo. The callback accepts the current frame number as an argument and logs it, allowing tracking of rendering progress. No dependencies are strictly required, but this function should be passed as the onProgress property to stitchFramesToVideo; it expects a number for the frameNumber and outputs logs to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/stitch-frames-to-video.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst onProgress = (frameNumber: number) => {\n  console.log(`Encoding progress: on ${frameNumber} frame`);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Sequential Videos Causing Potential Flicker in Remotion with TypeScript\nDESCRIPTION: This React component uses Remotion's `AbsoluteFill`, `Sequence`, and `OffthreadVideo` to display `video1.mp4` for the first 120 frames and then `video2.mp4` for the next 120 frames. This sequential loading without preloading can cause flickering in the Remotion Player as `video2.mp4` only starts loading when its sequence begins at frame 120.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/video-flicker.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Sequence, OffthreadVideo} from 'remotion';\\n\\nconst MyComponent: React.FC = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Sequence from={0} durationInFrames={120}>\\n        <OffthreadVideo src=\\\"https://example.com/video1.mp4\\\" />\\n      </Sequence>\\n      <Sequence from={120} durationInFrames={120}>\\n        <OffthreadVideo src=\\\"https://example.com/video2.mp4\\\" />\\n      </Sequence>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Trimming Video with startFrom/endAt in Remotion (TSX)\nDESCRIPTION: This example demonstrates how to trim a video using the `startFrom` and `endAt` props of the Remotion `<Video>` component. Assuming a composition FPS of 30, `startFrom={60}` trims the first 2 seconds, and `endAt={120}` trims everything after the 4-second mark. The video will effectively play the segment from 00:02:00 to 00:04:00.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, staticFile, Video} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video src={staticFile('video.webm')} startFrom={60} endAt={120} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Input Props to Remotion Cloud Run Render - Bash\nDESCRIPTION: Shows how to pass input properties to the selected composition by providing a JSON string via the '--props' flag in the CLI. This feature allows for dynamic content rendering using input data. Dependencies include a properly serialized JSON string or a path to a JSON file, ensuring compatibility with the environment, as Windows shells may not support inline JSON.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/render.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun render test-site tiles --service-name=remotion--3-3-82--mem512mi--cpu1-0--t-800 --props='{\"hi\": \"there\"}'\n```\n\n----------------------------------------\n\nTITLE: Interpolating Named and Hex Colors with Remotion interpolateColors() in TSX\nDESCRIPTION: Demonstrates using `interpolateColors` in a TSX context to map the current frame number (divided by 10) over the range [0, 20] to a color between 'red' and 'yellow', and between '#ff0000' and '#ffff00'. It imports `interpolateColors` and `useCurrentFrame` from 'remotion'. The resulting color is in `rgba` format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate-colors.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { interpolateColors, useCurrentFrame } from \"remotion\";\n\nconst frame = useCurrentFrame() / 10;\n\nconst color = interpolateColors(frame, [0, 20], [\"red\", \"yellow\"]); // rgba(255, 128, 0, 1)\n\nconst color2 = interpolateColors(frame, [0, 20], [\"#ff0000\", \"#ffff00\"]); // rgba(255, 128, 0, 1)\n```\n```\n\n----------------------------------------\n\nTITLE: Animating Component Styles with interpolateStyles() in React (TSX)\nDESCRIPTION: This React functional component demonstrates using `interpolateStyles` from `@remotion/animation-utils` to animate styles. It interpolates `opacity` and `transform` (using `makeTransform` and `translateY`) based on a fixed input value (15) across specified input and output ranges ([0, 30, 60] mapping to corresponding style objects). The resulting interpolated styles object is then applied to a `div` element.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/interpolate-styles.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ---cut---\nimport {\n  interpolateStyles,\n  makeTransform,\n  translateY,\n} from \"@remotion/animation-utils\";\n\nconst MyComponent: React.FC = () => {\n  const animatedStyles = interpolateStyles(\n    15,\n    [0, 30, 60],\n    [\n      { opacity: 0, transform: makeTransform([translateY(-50)]) },\n      { opacity: 1, transform: makeTransform([translateY(0)]) },\n      { opacity: 0, transform: makeTransform([translateY(50)]) },\n    ],\n  );\n\n  return <div style={animatedStyles} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Freezing Components at a Specific Frame with Remotion - TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use Remotion's <Freeze> component to fix its children at frame 30 in a TypeScript/React application. It imports the Freeze component and includes BlueSquare as a child, ensuring that the visuals and hooks within BlueSquare will always reflect frame 30 while rendering. Requires 'remotion' as a dependency, and expects the BlueSquare component to be previously defined or imported.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/freeze.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Freeze } from \"remotion\";\n\nconst MyVideo = () => {\n  return (\n    <Freeze frame={30}>\n      <BlueSquare />\n    </Freeze>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Conditionally Muting Audio with the muted Prop in Remotion (TSX)\nDESCRIPTION: Shows how to dynamically mute or unmute the audio based on the current frame using the `muted` prop. This example utilizes the `useCurrentFrame` hook to mute the audio (`muted={true}`) only for the first 30 frames of the composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, staticFile, useCurrentFrame} from 'remotion';\n\nexport const MyVideo = () => {\n  const frame = useCurrentFrame();\n  return (\n    <AbsoluteFill>\n      <Audio src={staticFile('audio.mp3')} muted={frame < 30} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Trimming End with Remotion Sequence durationInFrames (React/TypeScript)\nDESCRIPTION: Wraps the BlueSquare component in a Remotion <Sequence> and sets 'durationInFrames' to 45, unmounting the child after 45 frames. Useful for defining the visibility window of child components within a video sequence. Depends on 'remotion' and React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// @include: example-BlueSquare\nimport {Sequence} from 'remotion';\n// ---cut---\nconst ClipExample: React.FC = () => {\n  return (\n    <Sequence durationInFrames={45}>\n      <BlueSquare />\n    </Sequence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Delaying Render Until Async Data Loads in Remotion (TypeScript/React)\nDESCRIPTION: Implements a React component that delays video rendering until asynchronous data is fetched from an API. Uses useState to store the delay handle, and useEffect to trigger data fetching. Once data arrives, continueRender is called to unblock rendering. Requires remotion, React, and a fetch-compatible environment. Input: none, Output: rendered component with fetched data. All async work must resolve within Remotion's timeout (default 30s) or the render will fail.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/delay-render.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCallback, useEffect, useState } from \"react\";\nimport { continueRender, delayRender } from \"remotion\";\n\nexport const MyVideo = () => {\n  const [data, setData] = useState(null);\n  const [handle] = useState(() => delayRender());\n\n  const fetchData = useCallback(async () => {\n    const response = await fetch(\"http://example.com/api\");\n    const json = await response.json();\n    setData(json);\n\n    continueRender(handle);\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {data ? (\n        <div>This video has data from an API! {JSON.stringify(data)}</div>\n      ) : null}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic <Video> Usage with Local File in Remotion (TSX)\nDESCRIPTION: This snippet demonstrates the basic usage of the Remotion `<Video>` component. It imports `AbsoluteFill`, `staticFile`, and `Video` from 'remotion'. Inside a component `MyComposition`, it uses `<AbsoluteFill>` to position the video and renders a `<Video>` element. The `src` prop is set using `staticFile('video.webm')` to reference a video file located in the `public/` folder.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, staticFile, Video} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video src={staticFile('video.webm')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Translating SVG Path Horizontally and Vertically with translatePath() (TypeScript)\nDESCRIPTION: This example demonstrates translating a more complex SVG path, involving arcs, both horizontally (by 10 units) and vertically (by 20 units) using the `translatePath` function from `@remotion/paths`. The original path string, x-offset, and y-offset are provided. The function returns the new, translated path string which is then printed. Requires the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/translate-path.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title='translate-x-and-y.ts'\nimport { translatePath } from \"@remotion/paths\";\n\nconst translatedPath = translatePath(\n  \"M 35,50 a 25,25,0,1,1,50,0 a 25,25,0,1,1,-50,0\",\n  10,\n  20\n);\nconsole.log(translatedPath); // \"M 45 70 a 25 25 0 1 1 50 0 a 25, 5 0 1 1 -50 0\"\n```\n```\n\n----------------------------------------\n\nTITLE: Interpolating RGB and RGBA Colors with Remotion interpolateColors() in TSX\nDESCRIPTION: Illustrates using `interpolateColors` in TSX to interpolate between `rgb` color strings and `rgba` color strings based on the current frame number within the range [0, 20]. It imports `interpolateColors` and `useCurrentFrame` from 'remotion' and shows how opacity is interpolated when using RGBA. The output is an `rgba` color string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate-colors.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { interpolateColors, useCurrentFrame } from \"remotion\";\n\nconst frame = useCurrentFrame(); // 10\n\n// RGB colors\nconst color = interpolateColors(\n  frame,\n  [0, 20],\n  [\"rgb(255, 0, 0)\", \"rgb(255, 255, 0)\"]\n); // rgba(255, 128, 0, 1)\n\n// RGBA colors\nconst color2 = interpolateColors(\n  frame,\n  [0, 20],\n  [\"rgba(255, 0, 0, 1)\", \"rgba(255, 255, 0, 0)\"]\n); // rgba(255, 128, 0, 0.5)\n```\n```\n\n----------------------------------------\n\nTITLE: Delaying Audio Playback with Remotion Sequence in TypeScript\nDESCRIPTION: This code snippet demonstrates delaying audio playback in a Remotion composition by wrapping an Audio component within a Sequence component whose from property is set to 100. This setup makes the audio start playing at the 100th frame rather than from the beginning. Required dependencies are Remotion and its provided components (AbsoluteFill, Audio, Sequence, staticFile). The 'src' parameter of the Audio component should point to the desired audio file, and 'from' controls the delay in frames. The function expects to be used within a Remotion project, with the frame-based timeline, and outputs a composition with audio starting at the specified frame.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/delaying.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, Sequence, staticFile} from 'remotion';\\n\\nexport const MyComposition = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Sequence from={100}>\\n        <Audio src={staticFile('audio.mp3')} />\\n      </Sequence>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple React Component for Trail Example in TypeScript\nDESCRIPTION: This snippet defines a basic React functional component named `BlueSquare`. It serves as a placeholder element within the `<Trail>` component example, representing the content that will have the trail effect applied. It requires React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/trail.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```twoslash include example\nconst BlueSquare: React.FC = () => <div></div>\n// - BlueSquare\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Spring Animations with spring in Remotion (TypeScript/React)\nDESCRIPTION: Illustrates using the `spring()` helper function from 'remotion' to create physics-based spring animations. It typically requires the current `frame` (from `useCurrentFrame`), the composition's `fps` (from `useVideoConfig`), and an optional `config` object to customize the spring's behavior (e.g., `damping`). The function returns the animated value for the given frame.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {spring, useCurrentFrame, useVideoConfig} from 'remotion'; // Added imports\n\nexport const MyComp: React.FC = () => {\n\tconst frame = useCurrentFrame();\n\tconst {fps} = useVideoConfig();\n\n\tconst value = spring({\n\t\tfps,\n\t\tframe,\n\t\tconfig: {\n\t\t\tdamping: 200,\n\t\t},\n\t});\n\treturn (\n\t\t<div>\n\t\t\tFrame {frame}: {value}\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Dynamic Metadata Calculation in Remotion Composition in TypeScript\nDESCRIPTION: Demonstrates how to integrate the `calculateMetadata` function into the `Root` component. The `Composition` component is configured with `MyComp`, a default `src` prop for the video, and the imported `calculateMetadata` function. This allows the composition's duration and dimensions to be determined dynamically based on the video source specified in `defaultProps`. The example includes stubs for `MyComp` and an alternative `calculateMetadata` using `getVideoMetadata` from `@remotion/media-utils`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/align-duration.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: MyComp.tsx\nimport React from 'react';\nimport {CalculateMetadataFunction} from 'remotion';\nimport {getVideoMetadata} from '@remotion/media-utils';\n\nexport const MyComp: React.FC<MyCompProps> = () => {\n  return null;\n};\ntype MyCompProps = {\n  src: string;\n};\n\nexport const calculateMetadata: CalculateMetadataFunction<MyCompProps> = async ({props}) => {\n  const data = await getVideoMetadata(props.src);\n  const fps = 30;\n\n  return {\n    durationInFrames: Math.floor(data.durationInSeconds * fps),\n    fps,\n  };\n};\n\n// @filename: Root.tsx\n// ---cut---\n\nimport React from 'react';\nimport {Composition} from 'remotion';\nimport {MyComp, calculateMetadata} from './MyComp';\n\nexport const Root: React.FC = () => {\n  return (\n    <Composition\n      id=\"MyComp\"\n      component={MyComp}\n      durationInFrames={300}\n      fps={30}\n      width={1920}\n      height={1080}\n      defaultProps={{\n        src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n      }}\n      calculateMetadata={calculateMetadata}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Attaching Zod Schema and Default Props to Remotion Composition in TypeScript\nDESCRIPTION: This snippet illustrates how to associate a Zod schema (`myCompSchema`) with a Remotion `<Composition>` component using the `schema` prop. It also demonstrates providing `defaultProps` that conform to the defined schema, which is required when a schema is specified. This setup enables validation and visual editing of props in the Remotion Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/schemas.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: MyComponent.tsx\nimport React from \"react\";\nimport { z } from \"zod\";\n\nexport const myCompSchema = z.object({\n  propOne: z.string(),\n  propTwo: z.string(),\n});\n\nexport const MyComponent: React.FC<z.infer<typeof myCompSchema>> = ({\n  propOne,\n  propTwo,\n}) => {\n  return (\n    <div>\n      <h1>{propOne}</h1>\n      <h2>{propTwo}</h2>\n    </div>\n  );\n};\n\n// @filename: Root.tsx\n// organize-imports-ignore\n// ---cut---\nimport React from \"react\";\nimport { Composition } from \"remotion\";\nimport { MyComponent, myCompSchema } from \"./MyComponent\";\n\nexport const RemotionRoot: React.FC = () => {\n  return (\n    <Composition\n      id=\"my-video\"\n      component={MyComponent}\n      durationInFrames={100}\n      fps={30}\n      width={1920}\n      height={1080}\n      schema={myCompSchema}\n      defaultProps={{\n        propOne: \"Hello World\",\n        propTwo: \"Welcome to Remotion\",\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Composition using Remotion CLI - Bash\nDESCRIPTION: This Bash code snippet presents the primary usage pattern for the Remotion CLI's render command. It shows how to render a video or audio file from a specified entry point or serve URL, composition ID, and output location. Dependencies include Node.js, a Remotion project setup, and any referenced assets or configuration files. The command accepts various command-line flags, and supports positional arguments (<entry-point|serve-url>, <composition-id>, <output-location>), with fallback defaults for omitted parameters. The output is a rendered media file in the specified or default directory, and the operation can be customized using numerous CLI switches for encoding, image sequence export, audio processing, and more.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/render.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render <entry-point|serve-url>? <composition-id> <output-location>\n```\n\n----------------------------------------\n\nTITLE: Composing a Remotion Project with Schema, Component, and Async Metadata in TypeScript\nDESCRIPTION: This complete example sets up a Remotion project by importing a component, its props schema, and a metadata fetcher, wiring them into a top-level Composition. It demonstrates best practices for modular Remotion code: React components, Zod schemas, and async metadata fetching. Dependencies: React, Remotion, Zod. Inputs are id/data props, outputs are a Composition that uses schema validation and async metadata logic.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: src/MyComp.tsx\n// organize-imports-ignore\nimport React from \"react\";\nimport { CalculateMetadataFunction } from \"remotion\";\nimport { z } from \"zod\";\n\nconst apiResponse = z.object({ title: z.string(), description: z.string() });\n\nexport const myCompSchema = z.object({\n  id: z.string(),\n  data: z.nullable(apiResponse),\n});\n\ntype Props = z.infer<typeof myCompSchema>;\n\nexport const calcMyCompMetadata: CalculateMetadataFunction<Props> = async ({\n  props,\n}) => {\n  const data = await fetch(`https://example.com/api/${props.id}`);\n  const json = await data.json();\n\n  return {\n    props: {\n      ...props,\n      data: json,\n    },\n  };\n};\n\nexport const MyComp: React.FC<Props> = ({ data }) => {\n  if (data === null) {\n    throw new Error(\"Data was not fetched\");\n  }\n\n  return <div>{data.title}</div>;\n};\n\n// @filename: src/Root.tsx\n// ---cut---\nimport React from \"react\";\nimport { Composition } from \"remotion\";\nimport { MyComp, calcMyCompMetadata, myCompSchema } from \"./MyComp\";\n\nexport const Root = () => {\n  return (\n    <Composition\n      id=\"MyComp\"\n      component={MyComp}\n      durationInFrames={300}\n      fps={30}\n      width={1920}\n      height={1080}\n      defaultProps={{\n        id: \"1\",\n        data: null,\n      }}\n      schema={myCompSchema}\n      calculateMetadata={calcMyCompMetadata}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Videos from Dataset (TypeScript)\nDESCRIPTION: Shows the core rendering logic using `@remotion/renderer`. It imports the dataset, iterates through each entry, uses `selectComposition` to get composition metadata (passing the entry as `inputProps`), and then calls `renderMedia` to render an MP4 video for that entry, specifying the output location and codec.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n// @filename: dataset.ts\nexport const data = [\n  {\n    name: 'React',\n    repo: 'facebook/react',\n    logo: 'https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg',\n  },\n  {\n    name: 'Remotion',\n    repo: 'remotion-dev/remotion',\n    logo: 'https://github.com/remotion-dev/logo/raw/main/withouttitle/element-0.png',\n  },\n];\n\n// @filename: render.ts\nconst compositionId = 'MyComp';\nconst bundleLocation = 'xxx';\n// ---cut---\nimport {renderMedia, selectComposition} from '@remotion/renderer';\nimport {data} from './dataset';\n\nfor (const entry of data) {\n  const composition = await selectComposition({\n    serveUrl: bundleLocation,\n    id: compositionId,\n    inputProps: entry,\n  });\n\n  await renderMedia({\n    composition,\n    serveUrl: bundleLocation,\n    codec: 'h264',\n    outputLocation: `out/${entry.name}.mp4`,\n    inputProps: entry,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useCurrentFrame within a Sequence in Remotion (TypeScript/React)\nDESCRIPTION: This example shows how `useCurrentFrame` behaves inside a component rendered by `Sequence`. The frame number obtained via the hook is relative to the `Sequence`'s start time (`from` prop), starting at 0 when the sequence begins, not the global composition frame number.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Sequence, useCurrentFrame} from 'remotion'; // Added useCurrentFrame import\n\nexport const Child: React.FC = () => {\n\tconst frame = useCurrentFrame();\n\n\treturn <div>At frame 10, this should be 0: {frame}</div>;\n};\n\nexport const MyComp: React.FC = () => {\n\treturn (\n\t\t<Sequence from={10} durationInFrames={20}>\n\t\t\t<Child />\n\t\t</Sequence>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Greenscreen Effect on Canvas using Remotion and TSX\nDESCRIPTION: This React component (`Greenscreen`) demonstrates a chroma key (greenscreen) effect using `<OffthreadVideo>` and Canvas. It receives video frames via the `onVideoFrame` callback, draws them to a canvas, and then retrieves the pixel data using `context.getImageData`. The code iterates through the pixel data array, identifying pixels with high green values and low red/blue values, and sets their alpha channel (`imageFrame.data[i + 3]`) based on the `opacity` prop to make them transparent. The modified image data is then drawn back onto the canvas using `context.putImageData`. Requires `React`, `remotion`, a video source URL, and includes necessary global type declarations for video frame callbacks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video-manipulation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\ndeclare global {\n  interface VideoFrameMetadata {\n    presentationTime: DOMHighResTimeStamp;\n    expectedDisplayTime: DOMHighResTimeStamp;\n    width: number;\n    height: number;\n    mediaTime: number;\n    presentedFrames: number;\n    processingDuration?: number;\n    captureTime?: DOMHighResTimeStamp;\n    receiveTime?: DOMHighResTimeStamp;\n    rtpTimestamp?: number;\n  }\n  type VideoFrameRequestCallbackId = number;\n  interface HTMLVideoElement extends HTMLMediaElement {\n    requestVideoFrameCallback(\n      callback: (now: DOMHighResTimeStamp, metadata: VideoFrameMetadata) => any,\n    ): VideoFrameRequestCallbackId;\n    cancelVideoFrameCallback(handle: VideoFrameRequestCallbackId): void;\n  }\n}\nimport React, {useCallback, useEffect, useRef} from 'react';\nimport {AbsoluteFill, useVideoConfig, OffthreadVideo} from 'remotion';\n\n// ---cut---\nexport const Greenscreen: React.FC<{\n  opacity: number;\n}> = ({opacity}) => {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const {width, height} = useVideoConfig();\n\n  // Process a frame\n  const onVideoFrame = useCallback(\n    (frame: CanvasImageSource) => {\n      if (!canvas.current) {\n        return;\n      }\n      const context = canvas.current.getContext('2d');\n\n      if (!context) {\n        return;\n      }\n\n      context.drawImage(frame, 0, 0, width, height);\n      const imageFrame = context.getImageData(0, 0, width, height);\n      const {length} = imageFrame.data;\n\n      // If the pixel is very green, reduce the alpha channel\n      for (let i = 0; i < length; i += 4) {\n        const red = imageFrame.data[i + 0];\n        const green = imageFrame.data[i + 1];\n        const blue = imageFrame.data[i + 2];\n        if (green > 100 && red < 100 && blue < 100) {\n          imageFrame.data[i + 3] = opacity * 255;\n        }\n      }\n      context.putImageData(imageFrame, 0, 0);\n    },\n    [height, width],\n  );\n\n  return (\n    <AbsoluteFill>\n      <AbsoluteFill>\n        <OffthreadVideo\n          style={{opacity: 0}}\n          onVideoFrame={onVideoFrame}\n          src=\"https://remotion-assets.s3.eu-central-1.amazonaws.com/just-do-it-short.mp4\"\n        />\n      </AbsoluteFill>\n      <AbsoluteFill>\n        <canvas ref={canvas} width={width} height={height} />\n      </AbsoluteFill>\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Registering the Remotion Root and Composition Entry Point - TypeScript\nDESCRIPTION: This TypeScript snippet illustrates registering the Remotion root component using registerRoot from the remotion library. It organizes code into three parts: a dummy composition, a root component to include one or more compositions, and finally, registering that root as the project entry point in index.ts. Dependencies are react and remotion. Core parameters include composition ID, component, duration, fps, size, and the designated root. Input components must be defined under the remotion directory. Output is a Remotion project ready for studio and rendering commands. Ensure all root registration is set up in the index.ts file as the entry point.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player-into-remotion-project.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// @filename: Composition.tsx\\nexport const MyComposition: React.FC = () => {\\n  return null;\\n};\\n// @filename: Root.tsx\\nimport React from \\\"react\\\";\\nimport { Composition } from \\\"remotion\\\";\\nimport { MyComposition } from \\\"./Composition\\\";\\n\\nexport const RemotionRoot: React.FC = () => {\\n  return (\\n    <>\\n      <Composition\\n        id=\\\"MyComp\\\"\\n        component={MyComposition}\\n        durationInFrames={60}\\n        fps={30}\\n        width={1280}\\n        height={720}\\n      />\\n    </>\\n  );\\n};\\n// @filename: index.ts\\n// ---cut---\\nimport { registerRoot } from \\\"remotion\\\";\\nimport { RemotionRoot } from \\\"./Root\\\";\\n\\nregisterRoot(RemotionRoot);\n```\n\n----------------------------------------\n\nTITLE: Using Remotion's random() API for Deterministic Randomness (TypeScript/React)\nDESCRIPTION: This code demonstrates generating a deterministic array of random values in a Remotion React component by using the remotion/random API. Each element is seeded with a consistently derived value so that results stay identical across all rendering threads. Dependencies: remotion (random), React. Key parameters: unique seed for each coordinate. Inputs: none, Outputs: JSX fragment. Limitation: Requires seeds to be unique to avoid repetition of random numbers.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/using-randomness.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { random } from \\\"remotion\\\";\nconst MyComp: React.FC = () => {\n  // No need to use useState\n  const randomValues = new Array(10).fill(true).map((a, i) => {\n    return {\n      x: random(`x-${i}`),\n      y: random(`y-${i}`),\n    };\n  });\n\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Optimistic Video Upload Preview and Source Switching in Remotion (TypeScript/React)\nDESCRIPTION: Implements an optimistic video upload mechanism: immediately generates a blob URL for local video previews using URL.createObjectURL, then replaces it with the remote URL post-upload. The UI switches between states ('empty', 'blob', 'cloud') by tracking the upload status in component state. Requires React, useCallback, useState, and Remotion's Player. Calls URL.revokeObjectURL to free memory after switching to the cloud URL. Inputs include a file from the user; outputs are live video preview and then remote video playback.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video-uploads.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComposition: React.FC<{videoUrl: string}> = ({videoUrl}) => {\n  return null;\n};\n\nconst upload = async (file: File) => {\n  return 'https://example.com';\n};\n\n// ---cut---\nimport {Player} from '@remotion/player';\nimport {useCallback, useState} from 'react';\n\ntype VideoState =\n  | {\n      type: 'empty';\n    }\n  | {\n      type: 'blob' | 'cloud';\n      url: string;\n    };\n\nexport const RemotionPlayer: React.FC = () => {\n  const [videoState, setVideoState] = useState<VideoState>({\n    type: 'empty',\n  });\n\n  const handleChange = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files === null) {\n      return;\n    }\n\n    const file = event.target.files[0];\n    const blobUrl = URL.createObjectURL(file);\n    setVideoState({type: 'blob', url: blobUrl});\n    const cloudUrl = await upload(file);\n    setVideoState({type: 'cloud', url: cloudUrl});\n    URL.revokeObjectURL(blobUrl);\n  }, []);\n\n  return (\n    <div>\n      {videoState.type !== 'empty' ? <Player component={MyComposition} durationInFrames={120} compositionWidth={1920} compositionHeight={1080} fps={30} inputProps={{videoUrl: videoState.url}} /> : null}\n      <input type=\"file\" onChange={handleChange} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Sequential Scenes with Remotion Series in TypeScript/React\nDESCRIPTION: Demonstrates how to utilize the Remotion `<Series>` component to sequence multiple `<Series.Sequence>` subcomponents, each displaying a `Square` with a different color for a specified duration. Requires `remotion` and a pre-defined `Square` component as dependencies. Accepts no external input; each `Series.Sequence` is shown for its assigned `durationInFrames`. The main output is a composed React component rendering the timed sequence.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/series.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @include: example-Square\n// ---cut---\nimport { Series } from \"remotion\";\n\nexport const Example: React.FC = () => {\n  return (\n    <Series>\n      <Series.Sequence durationInFrames={40}>\n        <Square color={\"#3498db\"} />\n      </Series.Sequence>\n      <Series.Sequence durationInFrames={20}>\n        <Square color={\"#5ff332\"} />\n      </Series.Sequence>\n      <Series.Sequence durationInFrames={70}>\n        <Square color={\"#fdc321\"} />\n      </Series.Sequence>\n    </Series>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying and Rendering Remotion Project on Lambda via Shell\nDESCRIPTION: This shell script demonstrates the sequence of Remotion Lambda CLI commands to deploy a Lambda function, upload the Remotion project (site) to S3, and start a render job for a specific composition. It includes setting memory for the function, naming the site, enabling folder expiry, and specifying automatic deletion for the rendered video. Requires Remotion CLI and Bun installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/lambda-rendering.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbunx remotion lambda functions deploy --memory=3009\nbunx remotion lambda sites create --site-name=remotion-recorder --enable-folder-expiry\nbunx remotion lambda render remotion-recorder <composition-id> --delete-after=\"7-days\"\n```\n\n----------------------------------------\n\nTITLE: Using Easing.bezier with interpolate in Remotion (TSX)\nDESCRIPTION: This React functional component demonstrates how to use Remotion's `interpolate` function with a custom `Easing.bezier` curve. It animates the `scale` transform of an `AbsoluteFill` element based on the current frame, clamping the interpolation output between 0 and 1.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill, useCurrentFrame } from \"remotion\";\n// ---cut---\nimport { Easing, interpolate } from \"remotion\";\n\nconst MyVideo: React.FC = () => {\n  const frame = useCurrentFrame();\n  const interpolated = interpolate(frame, [0, 100], [0, 1], {\n    easing: Easing.bezier(0.8, 0.22, 0.96, 0.65),\n    extrapolateLeft: \"clamp\",\n    extrapolateRight: \"clamp\",\n  });\n  return (\n    <AbsoluteFill\n      style={{\n        transform: `scale(${interpolated})`,\n        backgroundColor: \"red\",\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Remotion Lambda Site Using CLI - Shell Command\nDESCRIPTION: Executes the Remotion Lambda CLI command to bundle a project and upload it to S3, optionally specifying an entry point. This command is used to deploy Remotion video projects for Lambda-based and local rendering workflows. The entry point argument controls which component or file is used; if omitted, a default is auto-detected. Outputs a serve URL for video rendering. Requires Remotion Lambda CLI and AWS credentials configured.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/sites/create.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda sites create <entry-point>?\n```\n\n----------------------------------------\n\nTITLE: Fitting Remotion Player to Fullscreen Container in React (TypeScript/TSX)\nDESCRIPTION: This TypeScript/React code snippet demonstrates how to make the Remotion Player component fill a fullscreen container while maintaining the aspect ratio of the video. Dependencies include React and Remotion libraries ('@remotion/player', 'remotion'). The key technique uses a wrapping div with CSS absolute positioning and the aspectRatio CSS property based on composition dimensions. Key parameters are compositionWidth, compositionHeight, and Player props like fps, durationInFrames, and style. This approach outputs a Player that centers and scales responsively in any viewport without distorting its aspect ratio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/scaling.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Player} from '@remotion/player';\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nconst MyComp: React.FC = () => {\n  return <AbsoluteFill style={{backgroundColor: 'black'}} />;\n};\n\nexport const FullscreenPlayer = () => {\n  const compositionWidth = 300;\n  const compositionHeight = 200;\n\n  return (\n    <div\n      style={{\n        width: '100vw',\n        height: '100vh',\n        backgroundColor: 'gray',\n        // Any container with \"position: relative\" will work\n        position: 'relative',\n      }}\n    >\n      <div\n        style={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          margin: 'auto',\n          aspectRatio: `${compositionWidth} / ${compositionHeight}`,\n          maxHeight: '100%',\n          maxWidth: '100%',\n        }}\n      >\n        <Player\n          controls\n          component={MyComp}\n          compositionWidth={compositionWidth}\n          compositionHeight={compositionHeight}\n          durationInFrames={200}\n          fps={30}\n          style={{\n            width: '100%',\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Timing Element Visibility with Sequence in Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates the `Sequence` component from 'remotion', used to control the timing of child elements. The `from` prop specifies the frame number when the children should start appearing, and `durationInFrames` specifies how long they should remain visible. The `from` prop can be negative.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Sequence} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\treturn (\n\t\t<Sequence from={10} durationInFrames={20}>\n\t\t\t<div>This only appears after 10 frames</div>\n\t\t</Sequence>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Absolute Frame within a Sequence in Remotion (TSX)\nDESCRIPTION: This example illustrates a method to access the absolute timeline frame within a component rendered inside a `<Sequence>`. It involves calling `useCurrentFrame` in the parent component (`MyVideo`) to get the absolute frame and then passing this value down as a prop (`absoluteFrame`) to the child component (`Subtitle`) within the `<Sequence>`. The child component can then access both the relative frame (via its own `useCurrentFrame` call) and the absolute frame (via the prop).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-current-frame.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { Sequence, useCurrentFrame } from \"remotion\";\n\n// ---cut---\n\nconst Subtitle: React.FC<{ absoluteFrame: number }> = ({ absoluteFrame }) => {\n  console.log(useCurrentFrame()); // 15\n  console.log(absoluteFrame); // 25\n\n  return null;\n};\n\nconst MyVideo = () => {\n  const frame = useCurrentFrame(); // 25\n\n  return (\n    <Sequence from={10}>\n      <Subtitle absoluteFrame={frame} />\n    </Sequence>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Using staticFile with Img Component in Remotion (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Img component and staticFile function from Remotion, generate a public URL for an image, and use it as the src of an <Img /> component. Prerequisites include having the remotion library installed and a public/ directory with the referenced asset. The input parameter is the asset path inside public/, and the output of staticFile is a URL string suitable for use in Remotion components or fetch calls.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/staticfile.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Img, staticFile } from \"remotion\";\n\nconst myImage = staticFile(`/my-image.png`);\n\n// ...\n\n<Img src={myImage} />;\n```\n\n----------------------------------------\n\nTITLE: Handling Stretched Videos with WebCodecs in TSX\nDESCRIPTION: This snippet shows how `@remotion/media-parser` provides necessary metadata for handling videos with non-square pixel aspect ratios (stretched videos). The `track` object passed to `onVideoTrack` contains `codedWidth`, `codedHeight`, `displayAspectWidth`, and `displayAspectHeight`. The example logs a sample object showing these properties. These dimensions should be passed when creating `EncodedVideoChunk` instances to ensure the `VideoDecoder` handles the aspect ratio correction correctly.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {OnVideoTrack} from '@remotion/media-parser';\n\nconst onVideoTrack: OnVideoTrack = async ({track}) => {\n  const videoDecoder = new VideoDecoder({\n    output: console.log,\n    error: console.error,\n  });\n  videoDecoder.configure(track);\n\n  return async (sample) => {\n    console.log(sample);\n    // {\n    //   codedWidth: 1440,\n    //   codedHeight: 1080,\n    //   displayAspectWidth: 1920,\n    //   displayAspectHeight: 1080,\n    //   ...\n    // }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Ensuring Chrome Installation via Remotion CLI\nDESCRIPTION: Command-line interface command used to ensure that the required Chrome Headless Shell (or Chrome for Testing if specified) is downloaded and available for Remotion rendering tasks. Recommended for server-side rendering setups to prepare the browser beforehand.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion browser ensure\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Props via Remotion CLI (Bash)\nDESCRIPTION: Provides command-line invocations to override default composition props during a render using the Remotion CLI. Props can be provided inline as valid JSON or as a file path to a JSON file. Requires Remotion to be installed and supports any valid compositional inputs. 'propOne' and 'propTwo' are passed as runtime overrides. Limitations: JSON must be properly formatted and serializable.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/passing-props.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render HelloWorld out/helloworld.mp4 --props='{\"propOne\": \"Hi\", \"propTwo\": 10}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render HelloWorld out/helloworld.mp4 --props=./path/to/props.json\n```\n\n----------------------------------------\n\nTITLE: Implementing a Loop Toggle Button in React (tsx)\nDESCRIPTION: Defines a React functional component `LoopButton` using TypeScript (tsx). This component receives a boolean `loop` state and its corresponding setter function `setLoop` as props. It renders a button that, when clicked, toggles the `loop` state by calling `setLoop`. The button's text dynamically changes to indicate whether looping is enabled or disabled based on the `loop` prop. It uses `React.useCallback` to memoize the `onClick` handler.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/custom-controls.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\n\nexport const LoopButton: React.FC<{ // tsx(React)\n  loop: boolean;\n  setLoop: React.Dispatch<React.SetStateAction<boolean>>;\n}> = ({loop, setLoop}) => {\n  const onClick = React.useCallback(() => {\n    setLoop((prev) => !prev);\n  }, [setLoop]);\n\n  return (\n    <button type=\"button\" onClick={onClick}>\n      {loop ? 'Loop enabled' : 'Loop disabled'}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Image Load Errors with <Img> onError Prop in Remotion (TSX)\nDESCRIPTION: Illustrates how to implement error handling for the `<Img>` component using the `onError` prop. This callback function receives the error event if the image fails to load (after potential retries from v3.3.82 onwards). Handling this error is crucial to prevent render timeouts; the component should be unmounted or the `src` changed upon error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/img.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { AbsoluteFill, Img, staticFile } from \"remotion\";\n\nexport const MyComp: React.FC = () => {\n  return (\n    <AbsoluteFill>\n      <Img\n        src={staticFile(\"hi.png\")}\n        onError={(event) => {\n          // Handle image loading error here\n        }}\n      />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Calculating Text Dimensions with Remotion Layout Utils in TypeScript\nDESCRIPTION: Demonstrates importing and invoking the measureText function from @remotion/layout-utils to calculate text width and height in a browser environment. Requires installation of @remotion/layout-utils as a dependency and access to the DOM (will not work in Node.js or Bun). The parameters such as text, fontFamily, fontWeight, fontSize, and letterSpacing must be provided, and the function returns an object with height and width. Result is cached for identical inputs, and developers should ensure all fonts are loaded before measurement for accuracy.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/measure-text.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {measureText} from '@remotion/layout-utils';\\n\\nconst text = 'remotion';\\nconst fontFamily = 'Arial';\\nconst fontWeight = '500';\\nconst fontSize = 12;\\nconst letterSpacing = '1px';\\n\\nmeasureText({\\n  text,\\n  fontFamily,\\n  fontWeight,\\n  fontSize,\\n  letterSpacing,\\n}); // { height: 14, width: 20 }\n```\n\n----------------------------------------\n\nTITLE: Generating a Single CSS Rotate Transform in Remotion (TSX)\nDESCRIPTION: Shows how to use the `rotate` function from `@remotion/animation-utils` to generate a CSS `rotate` transform string. The generated string is then assigned to a variable and used in the `style` prop of a `div`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { rotate } from \"@remotion/animation-utils\";\n\nconst transform = rotate(45);\n// => \"rotate(45deg)\"\n\nconst markup = <div style={{ transform }} />;\n```\n```\n\n----------------------------------------\n\nTITLE: Controlling Video Audio Playback in Remotion (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates rendering an <OffthreadVideo /> component within a Remotion composition using AbsoluteFill. It utilizes the staticFile helper to reference a local video file ('video.mp4'). The snippet specifically showcases how to adjust the audio properties of the video by setting the playbackRate to 2 (double speed) and volume to 0.5 (half volume). It requires the `remotion` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/from-video.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, OffthreadVideo, staticFile} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo src={staticFile('video.mp4')} playbackRate={2} volume={0.5} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Public URLs for Multiple Assets with staticFile (TypeScript)\nDESCRIPTION: This snippet demonstrates generating URLs for different asset types with staticFile, including images and fonts. It also presents sample expected output, showing how staticFile returns URLs with unique static paths for use in Remotion components or custom loaders. Dependencies include remotion v2.5.7 or higher and a public directory with the referenced files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/staticfile.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { staticFile } from \"remotion\";\n\nconst myImage = staticFile(`/my-image.png`); // \"/static-32e8nd/my-image.png\"\nconst font = staticFile(`/font.woff2`); // \"/static-32e8nd/font.woff2\"\n```\n\n----------------------------------------\n\nTITLE: Defining max-height ResizeOperation in TypeScript\nDESCRIPTION: Shows how to define a `ResizeOperation` object for use with `convertMedia`. This specific configuration scales a video down so its height is at most the specified `maxHeight` (480 pixels), preserving the aspect ratio. It requires the `ResizeOperation` type from `@remotion/webcodecs`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resizing.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ResizeOperation} from '@remotion/webcodecs';\n\nconst resize: ResizeOperation = {\n  mode: 'max-height',\n  maxHeight: 480,\n};\n```\n\n----------------------------------------\n\nTITLE: Centralized Font Loading in Remotion with waitForFonts (React TypeScript)\nDESCRIPTION: This snippet defines a shared asynchronous function for preloading multiple font families (from @remotion/google-fonts/Inter and @remotion/google-fonts/RobotoMono) within a Remotion project. It uses delayRender and continueRender from remotion to block playback until fonts are ready, and cancelRender on errors, preventing premature rendering. This pattern enables a robust font loading experience across component trees by exporting the waitForFonts utility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/best-practices.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {fontFamily as regularFont, loadFont as loadRegular} from '@remotion/google-fonts/Inter';\\n\\nimport {fontFamily as monospaceFont, loadFont as loadMonospace} from '@remotion/google-fonts/RobotoMono';\\n\\nimport {cancelRender, continueRender, delayRender} from 'remotion';\\n\\nconst regular = loadRegular();\\nconst monospace = loadMonospace();\\n\\nexport const waitForFonts = async () => {\\n  await regular.waitUntilDone();\\n  await monospace.waitUntilDone();\\n};\\n\\nconst delay = delayRender('Loading fonts');\\n\\nwaitForFonts()\\n  .then(() => continueRender(delay))\\n  .catch((err) => cancelRender(err));\n```\n\n----------------------------------------\n\nTITLE: Attaching and Removing PlayerRef Event Listeners (TypeScript/React)\nDESCRIPTION: Illustrates the process of registering and cleaning up multiple typed event listeners on the Remotion PlayerRef. Event handlers respond to play, ratechange, volumechange, pause, ended, error, fullscreenchange, scalechange, mutechange, seeked, and timeupdate. Uses CallbackListener types for event safety. Dependencies: '@remotion/player', React, CallbackListener types. Be sure to remove all event listeners during cleanup to prevent leaks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport {PlayerRef} from '@remotion/player';\nimport {useEffect, useRef} from 'react';\n// ---cut---\nimport {CallbackListener} from '@remotion/player';\nconst playerRef = useRef<PlayerRef>(null);\n\nuseEffect(() => {\n  if (!playerRef.current) {\n    return;\n  }\n  const onPlay: CallbackListener<'play'> = () => {\n    console.log('play');\n  };\n  const onRateChange: CallbackListener<'ratechange'> = (e) => {\n    console.log('ratechange', e.detail.playbackRate);\n  };\n  const onVolumeChange: CallbackListener<'volumechange'> = (e) => {\n    console.log('new volume', e.detail.volume);\n  };\n\n  const onPause: CallbackListener<'pause'> = () => {\n    console.log('pausing');\n  };\n\n  const onSeeked: CallbackListener<'seeked'> = (e) => {\n    console.log('seeked to ' + e.detail.frame);\n  };\n\n  const onTimeupdate: CallbackListener<'timeupdate'> = (e) => {\n    console.log('time has updated to ' + e.detail.frame);\n  };\n\n  const onEnded: CallbackListener<'ended'> = () => {\n    console.log('ended');\n  };\n\n  const onError: CallbackListener<'error'> = (e) => {\n    console.log('error', e.detail.error);\n  };\n\n  const onFullscreenChange: CallbackListener<'fullscreenchange'> = (e) => {\n    console.log('fullscreenchange', e.detail.isFullscreen);\n  };\n\n  const onScaleChange: CallbackListener<'scalechange'> = (e) => {\n    console.log('scalechange', e.detail.scale);\n  };\n\n  const onMuteChange: CallbackListener<'mutechange'> = (e) => {\n    console.log('mutechange', e.detail.isMuted);\n  };\n\n  playerRef.current.addEventListener('play', onPlay);\n  playerRef.current.addEventListener('ratechange', onRateChange);\n  playerRef.current.addEventListener('volumechange', onVolumeChange);\n  playerRef.current.addEventListener('pause', onPause);\n  playerRef.current.addEventListener('ended', onEnded);\n  playerRef.current.addEventListener('error', onError);\n  playerRef.current.addEventListener('fullscreenchange', onFullscreenChange);\n  playerRef.current.addEventListener('scalechange', onScaleChange);\n  playerRef.current.addEventListener('mutechange', onMuteChange);\n\n  // See below for difference between `seeked` and `timeupdate`\n  playerRef.current.addEventListener('seeked', onSeeked);\n  playerRef.current.addEventListener('timeupdate', onTimeupdate);\n\n  return () => {\n    // Make sure to clean up event listeners\n    if (playerRef.current) {\n      playerRef.current.removeEventListener('play', onPlay);\n      playerRef.current.removeEventListener('ratechange', onRateChange);\n      playerRef.current.removeEventListener('volumechange', onVolumeChange);\n      playerRef.current.removeEventListener('pause', onPause);\n      playerRef.current.removeEventListener('ended', onEnded);\n      playerRef.current.removeEventListener('error', onError);\n      playerRef.current.removeEventListener('fullscreenchange', onFullscreenChange);\n      playerRef.current.removeEventListener('scalechange', onScaleChange);\n      playerRef.current.removeEventListener('mutechange', onMuteChange);\n      playerRef.current.removeEventListener('seeked', onSeeked);\n      playerRef.current.removeEventListener('timeupdate', onTimeupdate);\n    }\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using `composition.props` and `inputProps` with `renderMedia` in Remotion v4 (TSX)\nDESCRIPTION: This code demonstrates the updated way to pass props when using `renderMedia` from `@remotion/renderer` in Remotion v4. The `composition` object, whether fetched or manually constructed, now includes a `props` field which defines the actual props passed to the component during render. The separate `inputProps` option is now primarily used for data retrieval within the component via `getInputProps()`, distinct from the props used for rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {5-7}\nimport {renderMedia} from '@remotion/renderer';\n\nconst options = {\n  codec: 'h264',\n  serveUrl: 'https://example.com',\n} as const;\n\nconst composition = {\n  width: 1920,\n  height: 1080,\n  fps: 30,\n  durationInFrames: 30 * 5,\n  id: 'comp-name',\n  defaultProps: {},\n  defaultCodec: null,\n  defaultOutName: null,\n} as const;\n\n// ---cut---\nawait renderMedia({\n  ...options,\n  composition: {\n    ...composition,\n    props: {\n      title: 'Hello world',\n    },\n  },\n  inputProps: {\n    title: 'Hi there',\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Delaying Render to Await Asynchronous Metadata with React Hooks - TypeScript/React\nDESCRIPTION: This example uses useEffect and Remotion's delayRender/continueRender to block composition evaluation until asynchronous metadata fetching (with parseMedia) is complete. It demonstrates acquiring video duration before rendering, setting the duration in React state, and passing it to the <Composition>. Key dependencies are remotion, useEffect, useState from React, and @remotion/media-parser. Parameterization of the video asset is achieved via props. Error handling for failed network calls is included. This pattern is deprecated for v4+ because repeated execution during concurrent render workers may lead to excess API calls; calculateMetadata should be preferred.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-metadata.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useEffect, useState} from 'react';\nimport {Composition, continueRender, delayRender} from 'remotion';\nconst VideoTesting: React.FC = () => null;\n// ---cut---\nimport {parseMedia} from '@remotion/media-parser';\n\nexport const Index: React.FC = () => {\n  const [handle] = useState(() => delayRender());\n  const [duration, setDuration] = useState(1);\n\n  useEffect(() => {\n    parseMedia({\n      src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n      fields: {\n        slowDurationInSeconds: true,\n      },\n    })\n      .then(({slowDurationInSeconds}) => {\n        setDuration(Math.round(slowDurationInSeconds * 30));\n        continueRender(handle);\n      })\n      .catch((err) => {\n        console.log(`Error fetching metadata: ${err}`);\n      });\n  }, [handle]);\n\n  return (\n    <Composition\n      id=\"dynamic-duration\"\n      component={VideoTesting}\n      width={1080}\n      height={1080}\n      fps={30}\n      durationInFrames={duration}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Local Video File Metadata using Remotion Media Parser in TypeScript\nDESCRIPTION: This example shows how to parse metadata (duration and dimensions) from a local video file using parseMedia in combination with the nodeReader interface from @remotion/media-parser/node. The snippet assumes access to the file path and requires both @remotion/media-parser and @remotion/media-parser/node packages. The reader parameter is necessary for local files. The function returns metadata as per the specified fields.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/parse-media.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\nimport {nodeReader} from '@remotion/media-parser/node';\\n\\nconst result = await parseMedia({\\n  src: '/Users/jonnyburger/Downloads/my-video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n  reader: nodeReader,\\n});\n```\n\n----------------------------------------\n\nTITLE: Ensuring ffprobe Binary with Remotion Renderer (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the ensureFfprobe() function from @remotion/renderer to verify that the ffprobe binary is available in your Node.js project. It performs an asynchronous operation to check for or download ffprobe into node_modules as needed. The function accepts an optional configuration object (e.g., remotionRoot) and returns a promise that resolves to an object indicating installation status and binary location. Key dependencies: @remotion/renderer and a compatible Node.js environment. This API throws if platform support or download fails.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/ensure-ffprobe.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ensureFfprobe } from \"@remotion/renderer\";\n\nawait ensureFfprobe();\n```\n\n----------------------------------------\n\nTITLE: Loading Lottie Animation from Static File with Remotion in TypeScript\nDESCRIPTION: This React-Remotion component demonstrates asynchronously fetching a Lottie animation JSON file from the public directory using staticFile() and the browser fetch API. It leverages delayRender to pause rendering until animation data is loaded, then continues or cancels rendering depending on fetch success. Dependencies include @remotion/lottie, remotion, and React. The component maintains animationData in state, using LottieAnimationData as a type, and safely renders the <Lottie> component when the data is available. Expected input is a valid Lottie JSON file (e.g., data.json) placed in the public folder; the output is the rendered animation within the Remotion video. Failure to load the animation will halt rendering via cancelRender.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/lottie-staticfile.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lottie, LottieAnimationData } from \"@remotion/lottie\";\nimport { useEffect, useState } from \"react\";\nimport {\n  cancelRender,\n  continueRender,\n  delayRender,\n  staticFile,\n} from \"remotion\";\n\nconst Square = () => {\n  const [handle] = useState(() => delayRender(\"Loading Lottie animation\"));\n\n  const [animationData, setAnimationData] =\n    useState<LottieAnimationData | null>(null);\n\n  useEffect(() => {\n    fetch(staticFile(\"data.json\"))\n      .then((data) => data.json())\n      .then((json) => {\n        setAnimationData(json);\n        continueRender(handle);\n      })\n      .catch((err) => {\n        cancelRender(err);\n      });\n  }, [handle]);\n\n  if (!animationData) {\n    return null;\n  }\n\n  return <Lottie animationData={animationData} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Using noise2D from Remotion Noise - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the noise2D function from the @remotion/noise package and use it to calculate a deterministic 2D noise value for given x and y coordinates with a specified seed. The only dependency is the @remotion/noise package (which relies internally on simplex-noise). The key parameters include 'seed' (string or number for repeatability), 'x', and 'y' (numbers). The function returns a number between -1 and 1 corresponding to the noise at the given (x, y). This is suitable for applications like procedural animation or generative graphics.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/noise/noise-2d.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { noise2D } from \"@remotion/noise\";\n\nconst x = 32;\nconst y = 40;\nconsole.log(noise2D(\"my-seed\", x, y)); // a number in the interval [-1, 1] which corresponds to (x, y) coord.\n```\n\n----------------------------------------\n\nTITLE: Enabling Corepack for PNPM Version Management (Shell)\nDESCRIPTION: Enables Corepack, a tool included with Node.js, to manage package manager versions. This ensures that the specific version of pnpm (v8.10.2) required by the Remotion project is automatically used. Requires Node.js with Corepack support.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncorepack enable\n```\n\n----------------------------------------\n\nTITLE: Preloading Media Assets with Remotion Utilities in TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use Remotion's \\'prefetch\\' and \\'staticFile\\' utilities to preload audio files in a React component before updating the audio source. Dependencies include Remotion (providing \\'prefetch\\' and \\'staticFile\\') and React. The \\'setAudioUrl\\' function updates the current audio, triggered by a select dropdown. By awaiting \\'prefetch().waitUntilDone()\\', the asset is loaded before the audio source is changed, preventing non-seekable errors. The input is a change event from the dropdown, and the output is an updated audio source. Preloading assets requires CORS support from the static assets' server.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/non-seekable-media.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst setAudioUrl = (url: string) => {};\n// ---cut---\n\nimport { prefetch, staticFile } from \"remotion\";\n\nconst MyComp = () => {\n  return (\n    <select\n      onChange={(e) => {\n        prefetch(e.target.value)\n          .waitUntilDone()\n          .then(() => {\n            setAudioUrl(e.target.value);\n          });\n      }}\n    >\n      <option value={staticFile(\"sample.mp3\")}>Audio 0</option>\n      <option value={staticFile(\"sample2.mp3\")}>Audio 1</option>\n      <option value={staticFile(\"sample3.mp3\")}>Audio 2</option>\n    </select>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing the Mute Button in Remotion Player with TypeScript\nDESCRIPTION: This snippet demonstrates customizing the Mute button for the Remotion Player controls via the `renderMuteButton` prop (available from v4.0.188). It uses a `useCallback` hook within the `App` component to define the rendering function. This function receives `muted` (boolean) and `volume` (number) states and conditionally returns a custom `VolumeOffIcon` or `VolumeOnIcon` component. Note that this prop only renders the button; click handlers must be implemented separately using `PlayerRef` methods like `.setVolume()` and `.setMuted()`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nconst VolumeOnIcon: React.FC = () => null;\nconst VolumeOffIcon: React.FC = () => null;\nconst MyVideo: React.FC = () => null;\n// ---cut---\nimport {Player, RenderMuteButton} from '@remotion/player';\nimport {useCallback} from 'react';\n\nexport const App: React.FC = () => {\n  const renderMuteButton: RenderMuteButton = useCallback(({muted, volume}) => {\n    const isMutedOrVolumeZero = muted || volume === 0;\n    if (isMutedOrVolumeZero) {\n      return <VolumeOffIcon />;\n    }\n\n    return <VolumeOnIcon />;\n  }, []);\n\n  return <Player fps={30} component={MyVideo} durationInFrames={120} compositionWidth={1920} compositionHeight={1080} renderMuteButton={renderMuteButton} />;\n}; \n```\n```\n\n----------------------------------------\n\nTITLE: Using makeTransform Helper from @remotion/animation-utils in TSX\nDESCRIPTION: Demonstrates using the `makeTransform`, `rotate`, and `translate` helper functions from the `@remotion/animation-utils` library to programmatically generate CSS `transform` strings in a type-safe manner. Requires installing `@remotion/animation-utils`. `translate(50, 50)` generates 'translate(50px, 50px)', and `makeTransform` combines multiple transforms.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transforms.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { makeTransform, rotate, translate } from \"@remotion/animation-utils\";\n\nconst transform = translate(50, 50);\n// => \"translate(50px, 50px)\"\n\nconst multiTransform = makeTransform([rotate(45), translate(50, 50)]);\n// => \"rotate(45deg) translate(50px, 50px)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Offthread Video Composition in Remotion (TypeScript/React)\nDESCRIPTION: Defines a React component that displays an uploaded video using Remotion's OffthreadVideo within AbsoluteFill. It expects a 'videoURL' prop, provided externally (e.g., from a Player), and returns the video player for the given URL. Dependencies include Remotion's AbsoluteFill and OffthreadVideo. The snippet illustrates component composition and prop-based integration with uploaded file URLs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video-uploads.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst upload = async (file: File) => {\n  return 'https://example.com';\n};\n// ---cut---\nimport {AbsoluteFill, OffthreadVideo} from 'remotion';\n\ntype VideoProps = {\n  videoURL: string;\n};\n\nexport const MyComponent: React.FC<VideoProps> = ({videoURL}) => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo src={videoURL} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up a Spring Animation Driver with spring() in TypeScript\nDESCRIPTION: Initializes a spring animation using the `spring()` function from Remotion. This function takes the current `frame` and the video's `fps` (frames per second, obtained from `useVideoConfig`) to generate a `driver` value, which typically animates from 0 to 1 based on spring physics. This driver value can then be used as input for interpolation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {useCurrentFrame, interpolate, spring, useVideoConfig} from 'remotion';\n\nconst frame = useCurrentFrame();\nconst {fps} = useVideoConfig();\nconst driver = spring({\n  frame,\n  fps\n});\n// - spring\n```\n\n----------------------------------------\n\nTITLE: Colocating Schema, Component, and Fetcher for Remotion Metadata in TypeScript\nDESCRIPTION: This sample colocates schema definition (with Zod), component typing, and async metadata fetcher in a TypeScript file. Props are validated/typed with Zod, while calculateMetadata makes a real API call and injects the result into props. Prerequisites are Remotion, Zod, and TypeScript. Inputs are props (including id), outputs are transformed props with fetched API response. Throws if data is null inside component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport { CalculateMetadataFunction } from \"remotion\";\nimport { z } from \"zod\";\n\nconst apiResponse = z.object({ title: z.string(), description: z.string() });\n\nexport const myCompSchema = z.object({\n  id: z.string(),\n  data: z.nullable(apiResponse),\n});\n\ntype Props = z.infer<typeof myCompSchema>;\n\nexport const calcMyCompMetadata: CalculateMetadataFunction<Props> = async ({\n  props,\n}) => {\n  const data = await fetch(`https://example.com/api/${props.id}`);\n  const json = await data.json();\n\n  return {\n    props: {\n      ...props,\n      data: json,\n    },\n  };\n};\n\nexport const MyComp: React.FC<Props> = ({ data }) => {\n  if (data === null) {\n    throw new Error(\"Data was not fetched\");\n  }\n\n  return <div>{data.title}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating TikTok-Style Caption Pages Using Remotion in TypeScript\nDESCRIPTION: This TypeScript/TSX code demonstrates how to use the createTikTokStyleCaptions function from the @remotion/captions package to group an array of Caption objects into 'pages' based on the combineTokensWithinMilliseconds parameter. The captions array includes individual tokens with text, timing, and optional confidence. The API outputs an object containing a structured pages array with page text, start/duration times, and a list of tokens for potential word-by-word animation. To function correctly, the text field must preserve whitespace, and the rendered container should utilize CSS white-space: pre to maintain formatting. This snippet operates in browser, Node.js, or Bun environments and depends on @remotion/captions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/captions/create-tiktok-style-captions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createTikTokStyleCaptions, Caption} from '@remotion/captions';\n\nconst captions: Caption[] = [\n  {\n    text: 'Using',\n    startMs: 40,\n    endMs: 300,\n    timestampMs: 200,\n    confidence: null,\n  },\n  {\n    text: \" Remotion's\",\n    startMs: 300,\n    endMs: 900,\n    timestampMs: 440,\n    confidence: null,\n  },\n  {\n    text: ' TikTok',\n    startMs: 900,\n    endMs: 1260,\n    timestampMs: 1080,\n    confidence: null,\n  },\n  {\n    text: ' template,',\n    startMs: 1260,\n    endMs: 1950,\n    timestampMs: 1600,\n    confidence: null,\n  },\n];\n\nconst {pages} = createTikTokStyleCaptions({\n  captions,\n  combineTokensWithinMilliseconds: 1200,\n});\n\n/* pages: [\n  {\n    text: \"Using Remotion's\",\n    startMs: 40,\n    durationMs: 860,\n    tokens: [\n      {\n        text: 'Using',\n        fromMs: 40,\n        toMs: 300,\n      },\n      {\n        text: \" Remotion's\",\n        fromMs: 300,\n        toMs: 900,\n      },\n    ],\n  },\n  {\n    text: 'TikTok template,',\n    startMs: 900,\n    durationMs: 1050,\n    tokens: [\n      {\n        text: 'TikTok',\n        fromMs: 900,\n        toMs: 1260,\n      },\n      {\n        text: ' template,',\n        fromMs: 1260,\n        toMs: 1950,\n      },\n    ],\n  }\n] */\n```\n\n----------------------------------------\n\nTITLE: Animating Values with interpolate in Remotion (TypeScript/React)\nDESCRIPTION: Demonstrates the `interpolate()` helper function from 'remotion' for mapping a changing value (like the current frame) from an input range (e.g., `[0, 100]`) to an output range (e.g., `[0, 1]`). This is useful for creating linear animations. The optional fourth argument with `extrapolateLeft: 'clamp'` and `extrapolateRight: 'clamp'` prevents the output value from exceeding the defined output range.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {interpolate, useCurrentFrame} from 'remotion'; // Added useCurrentFrame import\n\nexport const MyComp: React.FC = () => {\n\tconst frame = useCurrentFrame();\n\tconst value = interpolate(frame, [0, 100], [0, 1], {\n\t\textrapolateLeft: 'clamp',\n\t\textrapolateRight: 'clamp',\n\t});\n\treturn (\n\t\t<div>\n\t\t\tFrame {frame}: {value}\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding a Video with Explicit Dimensions in HTML\nDESCRIPTION: This HTML snippet shows how to embed a video file using the <video> tag with explicit width and height attributes set to 1920x1080. It is intended for integration into web pages to ensure precise video display sizing. No JavaScript or external libraries are required—just a web browser capable of rendering HTML5 video. The primary parameters are the src attribute (the video file path), and width/height, which control the player’s display dimensions. The actual displayed sharpness will depend on device pixel density and source-video quality.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/quality.mdx#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<video src=\"video.mp4\" width=\"1920\" height=\"1080\"></video>\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Download Handlers and Ensuring Installation - TypeScript\nDESCRIPTION: This example demonstrates the creation of reusable download progress and version selection callbacks, then passing them to ensureBrowser. Developers define onProgress and onBrowserDownload functions, allowing custom handling and logging of both download events and the specific Chrome version required. The code highlights dependency on @remotion/renderer and the need for compatible TypeScript type imports (OnBrowserDownload, DownloadBrowserProgressFn). Inputs include the onBrowserDownload callback with internally defined version and onProgress, and ensureBrowser returns a promise that completes when setup is finished.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/ensure-browser.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ensureBrowser, OnBrowserDownload, DownloadBrowserProgressFn} from '@remotion/renderer';\\n\\nconst onProgress: DownloadBrowserProgressFn = ({percent, downloadedBytes, totalSizeInBytes}) => {\\n  console.log(`${Math.round(percent * 100)}% downloaded`);\\n};\\n\\nconst onBrowserDownload: OnBrowserDownload = () => {\\n  console.log('Downloading browser');\\n\\n  return {\\n    // Pass `null` to use Remotion's recommendation.\\n    version: '133.0.6943.141',\\n    onProgress,\\n  };\\n};\\n\\nawait ensureBrowser({\\n  onBrowserDownload,\\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Local Media File Metadata using nodeReader in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to use the `parseMedia` function from `@remotion/media-parser` in conjunction with `nodeReader` from `@remotion/media-parser/node` to read metadata (duration and dimensions) from a video file located on the local file system. It requires the `@remotion/media-parser` package and a Node.js or Bun runtime environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/node-reader.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\nimport {nodeReader} from '@remotion/media-parser/node';\n\nconst result = await parseMedia({\n  src: '/Users/jonnyburger/Downloads/my-video.mp4',\n  fields: {\n    durationInSeconds: true,\n    dimensions: true,\n  },\n  reader: nodeReader,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Development Preview Server using NPM\nDESCRIPTION: Runs the 'dev' script defined in the project's `package.json` file using NPM. This typically starts the Remotion development server, enabling a live preview with hot-reloading for video development.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-blank/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Video Compositions - Console\nDESCRIPTION: This command triggers Remotion to render specified video compositions from the project. Dependency: Remotion CLI tools must be installed (typically included as a dependency). No parameters are passed here, so Remotion uses defaults or prompts for further input as needed. The command outputs the generated video file(s) to the configured output directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-skia/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Slide Transition with TransitionSeries in Remotion (TSX)\nDESCRIPTION: This TSX snippet demonstrates creating a simple transition between two `Letter` components using Remotion's `<TransitionSeries>`. It defines a `Letter` component for display and then uses `TransitionSeries.Sequence` to define the content segments and `TransitionSeries.Transition` with a `slide` presentation and `linearTiming` to animate between them. It requires `AbsoluteFill`, `TransitionSeries`, `linearTiming` from Remotion and `slide` from `@remotion/transitions/slide`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill } from \"remotion\";\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 200,\n        color: \"white\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { linearTiming, TransitionSeries } from \"@remotion/transitions\";\nimport { slide } from \"@remotion/transitions/slide\";\n\nconst BasicTransition = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\"#0b84f3\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={slide()}\n        timing={linearTiming({ durationInFrames: 30 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Letter color=\"pink\">B</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Launching Remotion Studio for Audiogram Editing - Shell\nDESCRIPTION: Starts Remotion Studio in development mode using npx. This launches an interactive UI for editing and previewing audiogram parameters. Requires prior installation of all dependencies. No arguments needed; defaults to development configuration and opens Remotion Studio in the browser.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-audiogram/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion studio\n\n```\n\n----------------------------------------\n\nTITLE: Loading Local Images with <Img> and staticFile() in Remotion (TSX)\nDESCRIPTION: Demonstrates using the Remotion `<Img>` component to display a local image. The image file (`hi.png`) should be placed in the `public/` folder, and the `staticFile()` helper function is used to generate the correct path for the `src` prop. This ensures Remotion preloads the image before rendering the frame.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/img.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { AbsoluteFill, Img, staticFile } from \"remotion\";\n\nexport const MyComp: React.FC = () => {\n  return (\n    <AbsoluteFill>\n      <Img src={staticFile(\"hi.png\")} />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Remotion Easing API with Interpolate (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to use the `interpolate` function from Remotion along with the `Easing` API. It demonstrates interpolating a value based on the current `frame` number between 0 and 100, applying a custom bezier easing curve defined by `Easing.bezier(0.8, 0.22, 0.96, 0.65)`. It also clamps the output value if the frame is outside the input range [0, 100].\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-15-remotion-1-3.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Easing, interpolate } from \"remotion\";\n\ninterpolate(frame, [0, 100], {\n  easing: Easing.bezier(0.8, 0.22, 0.96, 0.65),\n  extrapolateLeft: \"clamp\",\n  extrapolateRight: \"clamp\",\n});\n```\n\n----------------------------------------\n\nTITLE: Concatenating Audio and Video Chunks Using combineChunks - Remotion - JavaScript\nDESCRIPTION: Demonstrates the use of the Remotion combineChunks() API to assemble pre-rendered audio and video chunks into a single output file. Dependencies include the Remotion library and arrays of absolute file paths for each video and audio chunk, along with specific render and composition parameters gathered during earlier rendering steps. Key parameters such as videoFiles, audioFiles, outputLocation, codec, and others help maintain consistency and correctness. Inputs include arrays of chunk paths and configuration objects, while the output is a finalized media file. Misconfiguration of values, especially frame ranges, may result in errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/distributed-rendering.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example of using Remotion combineChunks API to concatenate media chunks\ncombineChunks({\n  videoFiles: [/* array of absolute video chunk paths, in order */],\n  audioFiles: [/* array of absolute audio chunk paths, in order */],\n  outputLocation: /* absolute file path for output */,  \n  onProgress: (progress) => { /* handle progress updates */ },\n  codec: 'h264', // Use final codec, not chunked variant (e.g., not 'h264-ts')\n  framesPerChunk: /* frames rendered per chunk, as used during rendering */,\n  fps: /* same value from selectComposition or rendering */, \n  preferLossless: /* value used in renderMedia if any */, \n  compositionDurationInFrames: /* total duration in frames from selectComposition */,  \n  frameRange: [/* startFrame, endFrame */],\n  audioCodec: null, // or custom value if set during rendering\n  audioBitrate: /* bitrate if set */, \n  numberOfGifLoops: null, // or number if rendering GIFs\n  everyNthFrame: /* if set during rendering */,\n  logLevel: 'info', // optional, for output verbosity\n  metadata: { /* optional metadata */ },\n  cancelSignal: /* optional, for cancellation support */, \n  binariesDirectory: /* optional binaries path */\n}); // Ensure all parameter values match those used during chunked rendering for correct concatenation\n```\n\n----------------------------------------\n\nTITLE: Complete Dockerfile for Remotion Application\nDESCRIPTION: Defines a multi-stage Docker build process for a Remotion application. It starts from a Node.js base image, installs necessary system dependencies for Chrome, copies project files, installs dependencies using a package manager (defaulting to npm), installs Chrome via Remotion's browser command, and sets up the entry point to run a render script.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM node:22-bookworm-slim\n\n# Install Chrome dependencies\nRUN apt-get update\nRUN apt install -y \\\n  libnss3 \\\n  libdbus-1-3 \\\n  libatk1.0-0 \\\n  libgbm-dev \\\n  libasound2 \\\n  libxrandr2 \\\n  libxkbcommon-dev \\\n  libxfixes3 \\\n  libxcomposite1 \\\n  libxdamage1 \\\n  libatk-bridge2.0-0 \\\n  libpango-1.0-0 \\\n  libcairo2 \\\n  libcups2\n\n# Copy everything from your project to the Docker image. Adjust if needed.\nCOPY package.json package*.json yarn.lock* pnpm-lock.yaml* bun.lockb* bun.lock* tsconfig.json* remotion.config.* ./\nCOPY src ./src\n\n# If you have a public folder:\nCOPY public ./public\n\n# Install the right package manager and dependencies - see below for Yarn/PNPM\nRUN npm i\n\n# Install Chrome\nRUN npx remotion browser ensure\n\n# Run your application\nCOPY render.mjs render.mjs\nCMD [\"node\", \"render.mjs\"]\n```\n\n----------------------------------------\n\nTITLE: Using Variables for Font Properties in Text Measurement (TypeScript/React)\nDESCRIPTION: This snippet shows how to parameterize font properties (text, fontFamily, fontWeight, fontSize) as variables for both measureText utility invocation and actual rendered markup. This ensures consistent font properties are applied when measuring and displaying the text, reducing the possibility of layout discrepancies. This reusable variable pattern helps maintain congruency across UI and measurement calculations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/best-practices.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport {measureText} from '@remotion/layout-utils';\\n\\nconst text = 'Hello world';\\nconst fontFamily = 'Inter';\\nconst fontWeight = 'bold';\\nconst fontSize = 16;\\n\\n// Use the variable in the measurement function:\\nmeasureText({\\n  text,\\n  fontFamily,\\n  fontWeight,\\n  fontSize,\\n});\\n\\n// As well as in markup\\n<div style={{fontFamily, fontWeight, fontSize}}>{text}</div>;\n```\n\n----------------------------------------\n\nTITLE: Animating a Moving Dot with Delay using Remotion in TypeScript\nDESCRIPTION: This snippet defines a Move React component which animates its children vertically using Remotion's spring and interpolate functions. The animation start is delayed by the delay prop (number), and the move is applied along the Y axis using a spring curve. Dependencies are remotion, react, and the component expects children and a numeric delay. The spring config creates a bounce effect with configurable damping, causing the children to move upwards when rendered.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\\nimport {\\n  AbsoluteFill,\\n  interpolate,\\n  spring,\\n  useCurrentFrame,\\n  useVideoConfig,\\n} from 'remotion';\\n\\nexport const Move: React.FC<{\\n  children: React.ReactNode;\\n  delay: number;\\n}> = ({children, delay}) => {\\n  const {fps} = useVideoConfig();\\n  const frame = useCurrentFrame();\\n\\n  const down = spring({\\n    fps,\\n    frame: frame - delay,\\n    config: {\\n      damping: 200,\\n    },\\n    durationInFrames: 120,\\n  });\\n\\n  const y = interpolate(down, [0, 1], [0, -400]);\\n\\n  return (\\n    <AbsoluteFill\\n      style={{\\n        translate: `0 ${y}px`,\\n      }}\\n    >\\n      {children}\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Inspecting Video Metadata with Remotion CLI - Plain Text\nDESCRIPTION: This snippet demonstrates how to extract and display metadata embedded in video files (e.g., .mp4) using the 'npx remotion ffprobe' command-line interface. No additional dependencies are required beyond having Remotion and its ffprobe utility installed. Input is a video file path, output is parsed metadata (title, artist, comment, streams, etc) printed to the console. Limitations include dependency on supported file formats and reliance on Remotion's internal ffprobe integration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/metadata.mdx#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n$ npx remotion ffprobe bigbuckbunny.mp4\\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'bigbuckbunny.mp4':\\n  Metadata:\\n    major_brand     : mp42\\n    minor_version   : 0\\n    compatible_brands: isomavc1mp42\\n    creation_time   : 2010-01-10T08:29:06.000000Z\\n    comment         : This is a comment\\n    artist          : Remotion\\n  Duration: 00:09:56.47, start: 0.000000, bitrate: 2119 kb/s\\n  Stream #0:0[0x1](und): Audio: aac (LC) (mp4a / 0x6134706D), 44100 Hz, stereo, fltp, 125 kb/s (default)\\n      Metadata:\\n        creation_time   : 2010-01-10T08:29:06.000000Z\\n        handler_name    : (C) 2007 Google Inc. v08.13.2007.\\n        vendor_id       : [0][0][0][0]\\n  Stream #0:1[0x2](und): Video: h264 (High) (avc1 / 0x31637661), yuv420p(progressive), 1280x720 [SAR 1:1 DAR 16:9], 1991 kb/s, 24 fps, 24 tbr, 24k tbn (default)\\n      Metadata:\\n        creation_time   : 2010-01-10T08:29:06.000000Z\\n        handler_name    : (C) 2007 Google Inc. v08.13.2007.\\n        vendor_id       : [0][0][0][0]\n```\n\n----------------------------------------\n\nTITLE: Handling URI-Unsafe Characters Since v4.0 in staticFile (TypeScript)\nDESCRIPTION: This snippet shows that from v4.0 onwards, staticFile() automatically encodes URI-unsafe characters in asset filenames, such as #, ensuring correct URL generation. The function uses encodeURIComponent internally, so user-supplied input should be unencoded to avoid double encoding. The output is a properly encoded static URL, supporting reliable loading of assets with special characters.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/staticfile.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nstaticFile(\"my-image#portrait.png\"); // \"/my-image%23portrait.png\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Tracks as Timeline Elements with Remotion in React/TypeScript\nDESCRIPTION: Implements reusable React components to render tracks and their items on the timeline using Remotion primitives. Handles conditional rendering depending on the item type (solid, text, video) and overlays items at the correct time intervals using Sequence components. Requires React, Remotion, and the previously defined types; integrates with other components by passing track and item data. Input: Track[]; Output: Rendered timeline composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/building-a-timeline.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: types.ts\ntype BaseItem = {\n  from: number;\n  durationInFrames: number;\n  id: string;\n};\n\nexport type SolidItem = BaseItem & {\n  type: 'solid';\n  color: string;\n};\n\nexport type TextItem = BaseItem & {\n  type: 'text';\n  text: string;\n  color: string;\n};\n\nexport type VideoItem = BaseItem & {\n  type: 'video';\n  src: string;\n};\n\nexport type Item = SolidItem | TextItem | VideoItem;\n\nexport type Track = {\n  name: string;\n  items: Item[];\n};\n\n// @filename: Main.tsx\n// ---cut---\nimport type {Track, Item} from './types';\nimport React from 'react';\nimport {AbsoluteFill, Sequence, OffthreadVideo} from 'remotion';\n\nconst ItemComp: React.FC<{\n  item: Item;\n}> = ({item}) => {\n  if (item.type === 'solid') {\n    return <AbsoluteFill style={{backgroundColor: item.color}} />;\n  }\n\n  if (item.type === 'text') {\n    return <h1>{item.text}</h1>;\n  }\n\n  if (item.type === 'video') {\n    return <OffthreadVideo src={item.src} />;\n  }\n\n  throw new Error(`Unknown item type: ${JSON.stringify(item)}`);\n};\n\nconst Track: React.FC<{\n  track: Track;\n}> = ({track}) => {\n  return (\n    <AbsoluteFill>\n      {track.items.map((item) => {\n        return (\n          <Sequence key={item.id} from={item.from} durationInFrames={item.durationInFrames}>\n            <ItemComp item={item} />\n          </Sequence>\n        );\n      })}\n    </AbsoluteFill>\n  );\n};\n\nexport const Main: React.FC<{\n  tracks: Track[];\n}> = ({tracks}) => {\n  return (\n    <AbsoluteFill>\n      {tracks.map((track) => {\n        return <Track track={track} key={track.name} />;\n      })}\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering the Remotion Root - React (TSX)\nDESCRIPTION: Demonstrates how to register the root of Remotion compositions. Uses registerRoot from remotion to register the main video composition component, making it discoverable by Remotion Studio and CLI tools. Assumes MyVideo is imported from './Video' and that both remotion and correct composition bindings exist.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: ./Root.tsx\nexport const MyVideo: React.FC<{text: string}> = () => <><\\/>;\n\n// ---cut---\nimport {registerRoot} from 'remotion';\nimport {MyVideo} from './Video';\n\nregisterRoot(MyVideo);\n```\n\n----------------------------------------\n\nTITLE: Custom Poster Overlay for Remotion Player - React TSX\nDESCRIPTION: Demonstrates the use of a renderPoster callback to overlay custom content (such as a spinner or poster message) over the Remotion Player in specified playback states. Uses useCallback for memoization and leverages the height, width, and isBuffering parameters to adapt the overlay. Requires @remotion/player, remotion, React, and a custom Spinner. The Player is configured to show the poster when unplayed. Inputs to renderPoster include player dimensions and buffering state; outputs are a custom JSX overlay. This approach enables enhanced user experience during video load, pause, or buffer states.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCallback} from 'react';\\nimport {AbsoluteFill} from 'remotion';\\n\\nconst Component: React.FC = () => null;\\nconst Spinner: React.FC = () => null;\\n\\n// ---cut---\\n\\nimport type {RenderPoster} from '@remotion/player';\\nimport {Player} from '@remotion/player';\\n\\nconst MyApp: React.FC = () => {\\n  const renderPoster: RenderPoster = useCallback(({height, width, isBuffering}) => {\\n    if (isBuffering) {\\n      return (\\n        <AbsoluteFill style={{justifyContent: 'center', alignItems: 'center'}}>\\n          <Spinner />\\n        </AbsoluteFill>\\n      );\\n    }\\n\\n    return (\\n      <AbsoluteFill style={{backgroundColor: 'gray'}}>\\n        Click to play! ({height}x{width})\\n      </AbsoluteFill>\\n    );\\n  }, []);\\n\\n  return <Player fps={30} component={Component} durationInFrames={100} compositionWidth={1080} compositionHeight={1080} renderPoster={renderPoster} showPosterWhenUnplayed />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onFrameUpdate Callback for Remotion Renderer in TypeScript\nDESCRIPTION: Defines an onFrameUpdate callback for renderFrames() to receive frame rendering progress. The function logs how many frames have been rendered, which frame was just rendered, and how long it took to render that frame. Parameters are framesRendered (number), frame (number, available since v3.0.0), and timeToRenderInMilliseconds (number, available since v3.2.30) in that order. There are no prerequisites; the callback reports and logs the rendering process; inputs are numbers reflecting current performance and progress.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-frames.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst onFrameUpdate = (framesRendered: number, frame: number, timeToRenderInMilliseconds: number) => {\\n  console.log(`${framesRendered} frames rendered.`);\\n\\n  // From v3.0.0\\n  console.log(`${frame} was just rendered.`);\\n\\n  // From v3.2.30\\n  console.log(`It took ${timeToRenderInMilliseconds}ms to render that frame.`);\\n};\n```\n\n----------------------------------------\n\nTITLE: Using reduceInstructions() to Simplify Path Instructions in TypeScript\nDESCRIPTION: Demonstrates importing `reduceInstructions` and `ReducedInstruction` from `@remotion/paths` and using the function to convert an array of path instructions (including relative 'm' and horizontal 'h') into a simplified array containing only absolute 'M' and 'L' instructions. The expected output, consisting solely of 'M', 'L', 'C', or 'Z' instruction types, is shown in comments. Requires the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/reduce-instructions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash\nimport { reduceInstructions, ReducedInstruction } from \"@remotion/paths\";\n\nconst simplified: ReducedInstruction[] = reduceInstructions([\n  { type: \"m\", dx: 10, dy: 10 },\n  { type: \"h\", dx: 100 },\n]);\n\n/*\n  [\n    {type: 'M', x: 10, y: 10},\n    {type: 'L', x: 110, y: 10},\n  ]\n*/\n```\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with Font Readiness in Remotion (TypeScript/React)\nDESCRIPTION: This example demonstrates how to wrap a component that uses text-measuring utilities inside a WaitForFonts higher-order component. It exports and imports fontFamily and the WaitForFonts HOC from helpers, ensuring the dependent MyCompInner safely invokes measureText only after fonts are loaded. This encapsulation prevents premature computation and ensures consistency between the measured and displayed text in composition trees.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/best-practices.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: fonts.ts\\nexport const regular = 'Inter';\\n\\n// @filename: WaitForFonts.tsx\\nexport const WaitForFonts: React.FC<{\\n  children: React.ReactNode;\\n}> = ({children}) => {\\n  // ...\\n  return children;\\n};\\n\\n// @filename: MyComp.tsx\\n// ---cut---\\nimport React from 'react';\\nimport {regular} from './fonts';\\nimport {WaitForFonts} from './WaitForFonts';\\nimport {measureText} from '@remotion/layout-utils';\\n\\nconst MyCompInner: React.FC = () => {\\n  // Safe to call measureText() here\\n  const measurement = measureText({\\n    fontFamily: regular,\\n    fontSize: 14,\\n    fontWeight: '400',\\n    text: 'Hello world',\\n  });\\n\\n  return null;\\n};\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <WaitForFonts>\\n      <MyCompInner />\\n    </WaitForFonts>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Excluding Audio via Remotion Lambda CLI\nDESCRIPTION: Demonstrates using the `npx remotion lambda render` command with the `--muted` flag to perform a render without audio via AWS Lambda. It requires the S3 URL of the bundled project and the composition ID.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion lambda render --muted https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw my-comp\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects and Preloading Videos with Remotion Preload in TypeScript/React\nDESCRIPTION: This snippet illustrates how to reliably preload a video asset that may experience HTTP redirects, using both the preloadVideo and resolveRedirect functions from @remotion/preload. The resolveRedirect function attempts to fetch the final resolved URL prior to preloading, with CORS limitations potentially impacting redirect resolution. Preloading proceeds with either the resolved or original URL. The @remotion/preload and remotion packages are required as dependencies, and the code expects a valid video URL. The logic executes preload logic outside of React components, ensuring the asset is available for immediate use inside a React component using the Video tag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload-video.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { preloadVideo, resolveRedirect } from \"@remotion/preload\";\nimport { Video } from \"remotion\";\n\n// This code gets executed immediately once the page loads\nlet urlToLoad =\n  \"https://player.vimeo.com/external/291648067.hd.mp4?s=94998971682c6a3267e4cbd19d16a7b6c720f345&profile_id=175&oauth2_token_id=57447761\";\n\nresolveRedirect(urlToLoad)\n  .then((resolved) => {\n    // Was able to resolve a redirect, setting this as the video to load\n    urlToLoad = resolved;\n  })\n  .catch((err) => {\n    // Was unable to resolve redirect e.g. due to no CORS support\n    console.log(\"Could not resolve redirect\", err);\n  })\n  .finally(() => {\n    // In either case, we try to preload the original or resolved URL\n    preloadVideo(urlToLoad);\n  });\n\n// This code only executes once the component gets mounted\nconst MyComp: React.FC = () => {\n  // If the component did not mount immediately, this will be the resolved URL.\n\n  // If the component mounted immediately, this will be the original URL.\n  // In that case preloading is ineffective anyway.\n  return <Video src={urlToLoad}></Video>;\n};\n```\n\n----------------------------------------\n\nTITLE: Composing the Main Editor Layout – Remotion/React – TypeScript\nDESCRIPTION: Defines the Main React component, orchestrating presentation of items, selection, and outlines within a styled AbsoluteFill wrapper. The component handles pointer events to control selection, renders all layers and outlines in appropriate Z-order, and accepts callbacks to propagate state changes and selection. Dependencies are React, remotion (AbsoluteFill), Layer, SortedOutlines, and the Item type. Key parameters are lists of items, selected/changed item handlers, and the selected item id; output is a fully interactive editor section. Prerequisite: understanding event propagation and Remotion's layout primitives.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useCallback} from 'react';\nimport {AbsoluteFill} from 'remotion';\nimport type {Item} from './item';\nimport {Layer} from './Layer';\nimport {SortedOutlines} from './SortedOutlines';\n\nexport type MainProps = {\n  readonly items: Item[];\n  readonly setSelectedItem: React.Dispatch<React.SetStateAction<number | null>>;\n  readonly selectedItem: number | null;\n  readonly changeItem: (itemId: number, updater: (item: Item) => Item) => void;\n};\n\nconst outer: React.CSSProperties = {\n  backgroundColor: '#eee',\n};\n\nconst layerContainer: React.CSSProperties = {\n  overflow: 'hidden',\n};\n\nexport const Main: React.FC<MainProps> = ({\n  items,\n  setSelectedItem,\n  selectedItem,\n  changeItem,\n}) => {\n  const onPointerDown = useCallback(\n    (e: React.PointerEvent) => {\n      if (e.button !== 0) {\n        return;\n      }\n\n      setSelectedItem(null);\n    },\n    [setSelectedItem],\n  );\n\n  return (\n    <AbsoluteFill style={outer} onPointerDown={onPointerDown}>\n      <AbsoluteFill style={layerContainer}>\n        {items.map((item) => {\n          return <Layer key={item.id} item={item} />;\n        })}\n      </AbsoluteFill>\n      <SortedOutlines\n        selectedItem={selectedItem}\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering a Lottie Animation in Remotion (TSX)\nDESCRIPTION: This React component (`Balloons`) demonstrates how to load a Lottie animation JSON file stored in the `public/` directory using Remotion's `staticFile()` function and the browser's `fetch` API. It uses React's `useState` and `useEffect` hooks to manage the asynchronous loading of the animation data. Remotion's `delayRender`, `continueRender`, and `cancelRender` functions are employed to handle the rendering process during data fetching. Once loaded, the animation data is passed to the `Lottie` component from `@remotion/lottie` for rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/lottie-lottiefiles.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Animation.tsx\"\nimport { Lottie, LottieAnimationData } from \"@remotion/lottie\";\nimport { useEffect, useState } from \"react\";\nimport {\n  cancelRender,\n  continueRender,\n  delayRender,\n  staticFile,\n} from \"remotion\";\n\nconst Balloons = () => {\n  const [handle] = useState(() => delayRender(\"Loading Lottie animation\"));\n\n  const [animationData, setAnimationData] =\n    useState<LottieAnimationData | null>(null);\n\n  useEffect(() => {\n    fetch(staticFile(\"animation.json\"))\n      .then((data) => data.json())\n      .then((json) => {\n        setAnimationData(json);\n        continueRender(handle);\n      })\n      .catch((err) => {\n        cancelRender(err);\n      });\n  }, [handle]);\n\n  if (!animationData) {\n    return null;\n  }\n\n  return <Lottie animationData={animationData} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Managing Item Selection and Resize Outlines – Remotion/React – TypeScript\nDESCRIPTION: Implements a SelectionOutline React component to visually outline and enable item selection, hovering, and movement using Remotion's scale and pointer events. It renders resize handles (through ResizeHandle) when the item is selected and processes drag operations to move the item or change its selected state. Dependencies include React, Remotion (useCurrentScale), the ResizeHandle component, and the Item type. Inputs include callbacks for item modification and selection state. Outputs are an absolutely positioned div that handles dragging and hover outlines, limited to rectangular selections and four-corner resizing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useCallback, useMemo} from 'react';\nimport {useCurrentScale} from 'remotion';\n\nimport {ResizeHandle} from './ResizeHandle';\nimport type {Item} from './item';\n\nexport const SelectionOutline: React.FC<{\n\titem: Item;\n\tchangeItem: (itemId: number, updater: (item: Item) => Item) => void;\n\tsetSelectedItem: React.Dispatch<React.SetStateAction<number | null>>;\n\tselectedItem: number | null;\n\tisDragging: boolean;\n}> = ({item, changeItem, setSelectedItem, selectedItem, isDragging}) => {\n\tconst scale = useCurrentScale();\n\tconst scaledBorder = Math.ceil(2 / scale);\n\n\tconst [hovered, setHovered] = React.useState(false);\n\n\tconst onMouseEnter = useCallback(() => {\n\t\tsetHovered(true);\n\t}, []);\n\n\tconst onMouseLeave = useCallback(() => {\n\t\tsetHovered(false);\n\t}, []);\n\n\tconst isSelected = item.id === selectedItem;\n\n\tconst style: React.CSSProperties = useMemo(() => {\n\t\treturn {\n\t\t\twidth: item.width,\n\t\t\theight: item.height,\n\t\t\tleft: item.left,\n\t\t\ttop: item.top,\n\t\t\tposition: 'absolute',\n\t\t\toutline:\n\t\t\t\t(hovered && !isDragging) || isSelected\n\t\t\t\t\t? `${scaledBorder}px solid #0B84F3`\n\t\t\t\t\t: undefined,\n\t\t\tuserSelect: 'none',\n\t\t\ttouchAction: 'none',\n\t\t};\n\t}, [item, hovered, isDragging, isSelected, scaledBorder]);\n\n\tconst startDragging = useCallback(\n\t\t(e: PointerEvent | React.MouseEvent) => {\n\t\t\tconst initialX = e.clientX;\n\t\t\tconst initialY = e.clientY;\n\n\t\t\tconst onPointerMove = (pointerMoveEvent: PointerEvent) => {\n\t\t\t\tconst offsetX = (pointerMoveEvent.clientX - initialX) / scale;\n\t\t\t\tconst offsetY = (pointerMoveEvent.clientY - initialY) / scale;\n\t\t\t\tchangeItem(item.id, (i) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...i,\n\t\t\t\t\t\tleft: Math.round(item.left + offsetX),\n\t\t\t\t\t\ttop: Math.round(item.top + offsetY),\n\t\t\t\t\t\tisDragging: true,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst onPointerUp = () => {\n\t\t\t\tchangeItem(item.id, (i) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...i,\n\t\t\t\t\t\tisDragging: false,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\twindow.removeEventListener('pointermove', onPointerMove);\n\t\t\t};\n\n\t\t\twindow.addEventListener('pointermove', onPointerMove, {passive: true});\n\n\t\t\twindow.addEventListener('pointerup', onPointerUp, {\n\t\t\t\tonce: true,\n\t\t\t});\n\t\t},\n\t\t[item, scale, changeItem],\n\t);\n\n\tconst onPointerDown = useCallback(\n\t\t(e: React.MouseEvent) => {\n\t\t\te.stopPropagation();\n\t\t\tif (e.button !== 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetSelectedItem(item.id);\n\t\t\tstartDragging(e);\n\t\t},\n\t\t[item.id, setSelectedItem, startDragging],\n\t);\n\n\treturn (\n\t\t<div\n\t\t\tonPointerDown={onPointerDown}\n\t\t\tonPointerEnter={onMouseEnter}\n\t\t\tonPointerLeave={onMouseLeave}\n\t\t\tstyle={style}\n\t\t>\n\t\t\t{isSelected ? (\n\t\t\t\t<>\n\t\t\t\t\t<ResizeHandle item={item} setItem={changeItem} type=\"top-left\" />\n\t\t\t\t\t<ResizeHandle item={item} setItem={changeItem} type=\"top-right\" />\n\t\t\t\t\t<ResizeHandle item={item} setItem={changeItem} type=\"bottom-left\" />\n\t\t\t\t\t<ResizeHandle item={item} setItem={changeItem} type=\"bottom-right\" />\n\t\t\t\t</>\n\t\t\t) : null}\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Video Metadata from a Hosted URL Using Remotion Media Parser in TypeScript\nDESCRIPTION: This snippet demonstrates how to extract metadata (duration and dimensions) from a video file hosted at a URL using the @remotion/media-parser library. The parseMedia function is used asynchronously by specifying the video source (src) and a fields object to request specific metadata properties. This approach works in browser environments as well as Node.js and Bun. The function returns an object containing the requested metadata properties such as durationInSeconds and dimensions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/metadata.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\nconst result = await parseMedia({\\n  src: 'https://example.com/my-video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n});\\n\\nconsole.log(result.durationInSeconds); // 10\\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\n```\n\n----------------------------------------\n\nTITLE: Layering Content with <AbsoluteFill> in React/TSX\nDESCRIPTION: Demonstrates using nested `<AbsoluteFill>` components to layer elements within a Remotion composition. An `<OffthreadVideo>` component is placed in the lower layer, serving as a full-screen background, and an `<h1>` tag containing text is placed in an overlaying `<AbsoluteFill>` component, appearing on top. Requires the `remotion` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/absolute-fill.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, OffthreadVideo} from 'remotion';\n\nconst MyComp = () => {\n  return (\n    <AbsoluteFill>\n      <AbsoluteFill>\n        <OffthreadVideo src=\"https://example.com/video.mp4\" />\n      </AbsoluteFill>\n      <AbsoluteFill>\n        <h1>This text is written on top!</h1>\n      </AbsoluteFill>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Frame-Rate-Independent Animation in Remotion (TypeScript)\nDESCRIPTION: Shows how to animate over time using the actual fps value from useVideoConfig for robust, frame-rate-independent motion. This ensures identical timing regardless of fps. Dependencies include Remotion with useCurrentFrame, useVideoConfig, and interpolate. Key parameters: frame (current frame), fps (frames per second from config). Input: frame, output: animationProgress within [0, 1] for one second. Strongly recommended for stable timing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/multiple-fps.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {useVideoConfig, interpolate, useCurrentFrame} from 'remotion';\\nconst frame = useCurrentFrame();\\n// ---cut---\\n// Animate from second 1 to second 2\\nconst {fps} = useVideoConfig();\\nconst animationProgress = interpolate(frame, [1 * fps, 2 * fps], [0, 1], {\\n  extrapolateLeft: 'clamp',\\n  extrapolateRight: 'clamp',\\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Media on Lambda Using Node.js API - JavaScript\nDESCRIPTION: The renderMediaOnLambda() function initiates a cloud video rendering process on AWS Lambda. Requires previous deployment of Lambda function and site, along with AWS credentials. The main input is the rendering parameters (e.g., composition ID); the output is a rendering job and associated progress metadata.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nrenderMediaOnLambda()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Props at Render-Time with getInputProps - TypeScript/React\nDESCRIPTION: This snippet illustrates how to access dynamically provided input props during a Remotion render using getInputProps from the remotion library. No React component structure is shown here; only extraction of prop values like src from inputProps. This is useful for parameterizing assets at runtime by retrieving props passed to the renderer. No asynchronous logic or external dependencies are required beyond remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-metadata.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport {getInputProps} from 'remotion';\n\nconst inputProps = getInputProps();\nconst src = inputProps.src;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering OffthreadVideo or Video with Ref Forwarding in Remotion (TypeScript)\nDESCRIPTION: This snippet defines a React component that checks the Remotion environment to decide whether to render <OffthreadVideo /> (when rendering for export) or a <Video /> component (when in Player preview), allowing a ref to be attached to the underlying <Video />. It requires React, Remotion components, and correct import/setup of environment utilities. The component expects properties conforming to RemotionOffthreadVideoProps, properly handles the imageFormat prop only for the appropriate component, and utilizes React.forwardRef for ref transparency. Input props include typical video attributes; output is a React element for composable video rendering. Only one video component type will be rendered at a time, according to the current environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/offthread-video-while-rendering.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {forwardRef} from 'react';\\nimport {getRemotionEnvironment, OffthreadVideo, RemotionOffthreadVideoProps, Video} from 'remotion';\\n\\nfunction OffthreadWhileRenderingRefForwardingFunction(props: RemotionOffthreadVideoProps, ref: React.Ref<HTMLVideoElement>) {\\n  const isPreview = !getRemotionEnvironment().isRendering;\\n\\n  if (isPreview) {\\n    const {imageFormat, ...otherProps} = props;\\n    return <Video ref={ref} {...otherProps} />;\\n  }\\n\\n  return <OffthreadVideo {...props} />;\\n}\\n\\nexport const OffthreadVideoWhileRendering = forwardRef(OffthreadWhileRenderingRefForwardingFunction);\n```\n\n----------------------------------------\n\nTITLE: Defining <AbsoluteFill> Styles in TypeScript\nDESCRIPTION: Defines the `React.CSSProperties` object representing the default inline styles applied by the `<AbsoluteFill>` component. These styles make the element cover its parent completely using absolute positioning (top, left, right, bottom set to 0, width and height to 100%) and use flexbox (display: flex, flexDirection: column) for layout within the fill.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/absolute-fill.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport React from 'react';\n// ---cut---\nconst style: React.CSSProperties = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  right: 0,\n  bottom: 0,\n  width: '100%',\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Table of Contents for GIF API (Markdown + JSX)\nDESCRIPTION: This snippet renders the previously imported TableOfContents component within the API section of the documentation. By placing <TableOfContents /> under the APIs heading, the documentation displays a navigable outline of available methods and properties specific to the GIF integration. The component requires JavaScript/React context processing within Markdown (e.g., MDX).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/gif/index.mdx#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<TableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Higher-Order React Component for Font Readiness in Remotion (TypeScript)\nDESCRIPTION: This React component, WaitForFonts, renders its children only after required fonts are loaded by invoking the waitForFonts utility, which preloads multiple fonts asynchronously. It uses delayRender, continueRender, and cancelRender from remotion to synchronize font load with rendering, and manages its loaded state internally with a boolean. This design pattern ensures any wrapped component dependent on font metrics executes at the correct time, preventing layout glitches due to late font loads.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/best-practices.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: fonts.ts\\nimport {fontFamily as regularFont, loadFont as loadRegular} from '@remotion/google-fonts/Inter';\\n\\nimport {fontFamily as monospaceFont, loadFont as loadMonospace} from '@remotion/google-fonts/RobotoMono';\\n\\nimport {cancelRender, continueRender, delayRender} from 'remotion';\\n\\nexport const regular = loadRegular();\\nconst monospace = loadMonospace();\\n\\nexport const waitForFonts = async () => {\\n  await regular.waitUntilDone();\\n  await monospace.waitUntilDone();\\n};\\n\\nconst delay = delayRender('Loading fonts');\\n\\nwaitForFonts()\\n  .then(() => continueRender(delay))\\n  .catch((err) => cancelRender(err));\\n\\n// @filename: WaitForFonts.tsx\\n// ---cut---\\nimport React, {useEffect, useState} from 'react';\\nimport {cancelRender, continueRender, delayRender} from 'remotion';\\nimport {waitForFonts} from './fonts';\\n\\nexport const WaitForFonts: React.FC<{\\n  children: React.ReactNode;\\n}> = ({children}) => {\\n  const [fontsLoaded, setFontsLoaded] = useState(false);\\n  const [handle] = useState(() => delayRender('<WaitForFonts> component'));\\n\\n  useEffect(() => {\\n    return () => {\\n      continueRender(handle);\\n    };\\n  }, [handle]);\\n\\n  useEffect(() => {\\n    const delay = delayRender('Waiting for fonts to be loaded');\\n\\n    waitForFonts()\\n      .then(() => {\\n        continueRender(handle);\\n        continueRender(delay);\\n        setFontsLoaded(true);\\n      })\\n      .catch((err) => {\\n        cancelRender(err);\\n      });\\n  }, [fontsLoaded, handle]);\\n\\n  if (!fontsLoaded) {\\n    return null;\\n  }\\n\\n  return <>{children}</>;\\n};\n```\n\n----------------------------------------\n\nTITLE: Checking AWS Lambda Quotas with Remotion CLI (bash)\nDESCRIPTION: Executes the Remotion Lambda CLI command to retrieve and display the AWS Lambda concurrent execution limits for the current AWS account and region. This is useful for understanding potential scaling limitations, especially for new AWS accounts which might have lower default limits.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda quotas\n```\n\n----------------------------------------\n\nTITLE: Validating Webhook Signature in a Next.js API Route using Remotion Lambda (TypeScript)\nDESCRIPTION: This code demonstrates the implementation of the validateWebhookSignature() function within a Next.js API route to authenticate incoming webhook requests. It utilizes TypeScript types for request and response objects, imports validateWebhookSignature and WebhookPayload from '@remotion/lambda/client', and applies signature validation using environment variables. The handler differentiates payloads based on type and sends a JSON response on success. Required dependencies include @remotion/lambda/client and access to the webhook secret in environment variables.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/validatewebhooksignature.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NextApiRequest = {\n  body: object;\n  headers: Record<string, string>;\n};\ntype NextApiResponse = {\n  status: (code: number) => { json: (body: object) => void };\n};\n// ---cut---\nimport {\n  validateWebhookSignature,\n  WebhookPayload,\n} from \"@remotion/lambda/client\";\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse,\n) {\n  validateWebhookSignature({\n    secret: process.env.WEBHOOK_SECRET as string,\n    body: req.body,\n    signatureHeader: req.headers[\"x-remotion-signature\"] as string,\n  });\n\n  // If code reaches this path, the webhook is authentic.\n  const payload = req.body as WebhookPayload;\n  if (payload.type === \"success\") {\n    // ...\n  } else if (payload.type === \"timeout\") {\n    // ...\n  }\n\n  res.status(200).json({\n    success: true,\n  });\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Polygon with Remotion Shapes (TSX)\nDESCRIPTION: This TSX snippet demonstrates rendering a 5-sided polygon (pentagon) using the `<Polygon />` component from `@remotion/shapes`. It imports `Polygon` and `AbsoluteFill` from their respective packages. The `MyComposition` functional component renders the polygon with 5 points and a radius of 80 pixels, centered within an `AbsoluteFill` container that provides a white background.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/polygon.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Polygon } from \"@remotion/shapes\";\nimport { AbsoluteFill } from \"remotion\";\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Polygon points={5} radius={80} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Aborting a Media Parsing Process with Remotion Media Parser\nDESCRIPTION: This snippet shows how to cancel (abort) an ongoing media parsing operation using `mediaParserController` from `@remotion/media-parser`. It sets up a controller, begins parsing a media source, and then calls the `abort()` method on the controller after a 10-second delay. The promise returned by `parseMedia` will reject when aborted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/pause-resume-abort.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {mediaParserController, parseMedia} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\n\nparseMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  controller,\n})\n  .then(() => {\n    console.log('Finished parsing');\n  })\n  .catch((err) => {\n    console.error('Error parsing', err);\n  });\n\n// Cancel after 10 seconds\nawait new Promise((resolve) => setTimeout(resolve, 10_000));\ncontroller.abort();\n```\n\n----------------------------------------\n\nTITLE: Resolving and Preloading Videos with @remotion/preload in TypeScript\nDESCRIPTION: This snippet integrates both resolveRedirect and preloadVideo from @remotion/preload to best-effort preload a remote video. It attempts to resolve the final media URL, updating the urlToLoad variable, and preloads either the resolved or original URL. The example also shows how the resolved URL is used as a source for the Remotion <Video> component in a React functional component. Dependencies are @remotion/preload and remotion, and key parameters are the external video URL and the updated urlToLoad variable. The snippet accounts for the timing of resolution and mounting and expects Promises for asynchronous control.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/resolve-redirect.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { preloadVideo, resolveRedirect } from \"@remotion/preload\";\nimport { Video } from \"remotion\";\n\n// This code gets executed immediately once the page loads\nlet urlToLoad =\n  \"https://player.vimeo.com/external/291648067.hd.mp4?s=94998971682c6a3267e4cbd19d16a7b6c720f345&profile_id=175&oauth2_token_id=57447761\";\n\nresolveRedirect(urlToLoad)\n  .then((resolved) => {\n    // Was able to resolve a redirect, setting this as the video to load\n    urlToLoad = resolved;\n  })\n  .catch((err) => {\n    // Was unable to resolve redirect e.g. due to no CORS support\n    console.log(\"Could not resolve redirect\", err);\n  })\n  .finally(() => {\n    // In either case, we try to preload the original or resolved URL\n    preloadVideo(urlToLoad);\n  });\n\n// This code only executes once the component gets mounted\nconst MyComp: React.FC = () => {\n  // If the component did not mount immediately, this will be the resolved URL.\n\n  // If the component mounted immediately, this will be the original URL.\n  // In that case preloading is ineffective anyway.\n  return <Video src={urlToLoad}></Video>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Webpack Override with bundle API (TypeScript)\nDESCRIPTION: Illustrates passing a webpackOverride function to Remotion's bundle() Node.js API for custom Webpack configuration during SSR. The override is imported from a reusable file, and bundle() is called asynchronously. Requires the @remotion/bundler package and TypeScript ESNext syntax.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ./src/webpack-override.ts\nimport {WebpackOverrideFn} from '@remotion/bundler';\nexport const webpackOverride: WebpackOverrideFn = (c) => c;\n// @filename: remotion.config.ts\n// @target: esnext\n// ---cut---\nimport {bundle} from '@remotion/bundler';\nimport {webpackOverride} from './src/webpack-override';\n\nawait bundle({\n  entryPoint: require.resolve('./src/index.ts'),\n  webpackOverride,\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Remotion Video Sequences in React with Media Fragments - TypeScript\nDESCRIPTION: This React component demonstrates how to use Remotion's Sequence and OffthreadVideo components to render a segment of a video, leveraging useVideoConfig to dynamically calculate the time window. The code relies on the remotion library and expects the fps (frames per second) context to be available. The OffthreadVideo src will be automatically appended with a media fragment by Remotion, optimizing video loading. Input is the video source URL and the output is a React element that plays a partial video for the specified duration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-fragments.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Sequence, OffthreadVideo, useVideoConfig} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  const {fps} = useVideoConfig();\\n\\n  return (\\n    <Sequence from={2 * fps} durationInFrames={4 * fps}>\\n      <OffthreadVideo src=\\\"https://example.com/bbb.mp4\\\" />\\n    </Sequence>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Using <Video> with a Remote URL in Remotion (TSX)\nDESCRIPTION: This code shows how to use the Remotion `<Video>` component to load and display a video from a remote URL. It imports `AbsoluteFill` and `Video` from 'remotion'. The `<Video>` component's `src` prop is directly assigned the URL string of the video file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Video} from 'remotion';\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video src=\"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Animating SVG Element in Remotion with React (TypeScript)\nDESCRIPTION: This snippet defines a React functional component that renders an SVG wrapped in Remotion's AbsoluteFill. It uses Remotion hooks to access the current animation frame and video config. Styles are applied to the <g> element (the grouped vehicle) to enable centered origin for transformations, preparing the SVG for animation. Dependencies: remotion, React. Inputs: none. Outputs: SVG with properly grouped and styled elements, ready to receive animation transforms.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/figma.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AbsoluteFill, useCurrentFrame, useVideoConfig } from \\\"remotion\\\";\n\nexport const Rocket: React.FC = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \\\"pink\\\",\n        justifyContent: \\\"center\\\",\n        alignItems: \\\"center\\\",\n      }}\n    >\n      <svg\n        width=\\\"800\\\"\n        height=\\\"800\\\"\n        viewBox=\\\"0 0 394 394\\\"\n        fill=\\\"none\\\"\n        xmlns=\\\"http://www.w3.org/2000/svg\\\"\n      >\n        <g\n          id=\\\"vehicle\\\"\n          style={{\n            transformOrigin: \\\"center center\\\",\n            transformBox: \\\"fill-box\\\",\n          }}\n        >\n          // vehicle's paths\n        </g>\n      </svg>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Media Programmatically using Node.js/Bun (TypeScript/TSX)\nDESCRIPTION: Provides a Node.js/Bun script (`render.mjs`) using TypeScript/TSX syntax that renders media programmatically. It imports `renderMedia` and `selectComposition` from `@remotion/renderer`, defines input props, specifies the deployed Studio `serveUrl`, selects the `HelloWorld` composition, and calls `renderMedia` to initiate the render process. Requires the `@remotion/renderer` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst outputLocation = '/path/to/frames';\n\nimport {renderMedia, selectComposition} from '@remotion/renderer';\n\n// ---cut---\nconst inputProps = {\n  titleText: 'Hello World',\n};\n\nconst serveUrl = 'https://remotion-helloworld.vercel.app';\n\nconst composition = await selectComposition({\n  serveUrl,\n  id: 'HelloWorld',\n  inputProps,\n});\n\nawait renderMedia({\n  composition,\n  serveUrl,\n  codec: 'h264',\n  inputProps,\n});\n```\n\n----------------------------------------\n\nTITLE: Registering the Remotion Root Component as the Entry Point in TypeScript\nDESCRIPTION: Creates the `remotion/index.ts` file, which serves as the Remotion entry point. It imports `registerRoot` from Remotion and the previously defined `RemotionRoot` component. Calling `registerRoot(RemotionRoot)` makes this file the designated entry point for Remotion tools like the Studio and renderer, connecting the defined compositions to the framework. Depends on the `remotion` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts twoslash title=\"remotion/index.ts\"\n// @filename: Composition.tsx\nexport const MyComposition: React.FC = () => {\n  return null;\n};\n// @filename: Root.tsx\nimport React from \"react\";\nimport { Composition } from \"remotion\";\nimport { MyComposition } from \"./Composition\";\n\nexport const RemotionRoot: React.FC = () => {\n  return (\n    <>\n      <Composition\n        id=\"MyComp\"\n        component={MyComposition}\n        durationInFrames={60}\n        fps={30}\n        width={1280}\n        height={720}\n      />\n    </>\n  );\n};\n// @filename: index.ts\n// ---cut---\nimport { registerRoot } from \"remotion\";\nimport { RemotionRoot } from \"./Root\";\n\nregisterRoot(RemotionRoot);\n```\n```\n\n----------------------------------------\n\nTITLE: Layering Elements with AbsoluteFill in Remotion (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the AbsoluteFill component from Remotion to layer elements in a React video composition. It imports AbsoluteFill, Img, and staticFile, then layers an image and text by stacking AbsoluteFill containers. The lowest AbsoluteFill renders the background image, while a higher AbsoluteFill renders an overlaying text. No external dependencies are needed beyond the Remotion library. All props and JSX elements are shown unmodified; the overlay text appears above the image, and the output is a video frame with the image background and overlaid heading.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layers.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\\nimport {AbsoluteFill, Img, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <AbsoluteFill>\\n      <AbsoluteFill>\\n        <Img src={staticFile('bg.png')} />\\n      </AbsoluteFill>\\n      <AbsoluteFill>\\n        <h1>This text appears on top of the video!</h1>\\n      </AbsoluteFill>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Initiating a Video Render with Remotion Lambda API (TypeScript)\nDESCRIPTION: This code triggers a video render job on Remotion Lambda using the Node.JS client library. It calls `renderMediaOnLambda` with necessary parameters like AWS region, the previously retrieved function name, the serve URL, composition ID ('HelloWorld'), input props, codec settings, and privacy level. It returns the `renderId` and `bucketName` needed for tracking progress.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getFunctions, renderMediaOnLambda, getRenderProgress} from '@remotion/lambda/client';\n\nconst url = 'string';\nconst functions = await getFunctions({\n  region: 'us-east-1',\n  compatibleOnly: true,\n});\n\nconst functionName = functions[0].functionName;\n// ---cut---\n\nconst {renderId, bucketName} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName,\n  serveUrl: url,\n  composition: 'HelloWorld',\n  inputProps: {},\n  codec: 'h264',\n  imageFormat: 'jpeg',\n  maxRetries: 1,\n  framesPerLambda: 20,\n  privacy: 'public',\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying a Basic Player with @remotion/player in TypeScript React\nDESCRIPTION: Demonstrates usage of the @remotion/player component within a React app, using a minimal MyVideo component. Requires @remotion/player to be installed and a valid composition component (MyVideo). Key parameters are durationInFrames, compositionWidth, compositionHeight, and fps. No controls or interactivity are present; the Player renders the video as per props. Inputs: video component and playback properties. Outputs: a rendered player with the specified video and settings.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player } from \"@remotion/player\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  return (\\n    <Player\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Combining Chunks with Remotion Renderer (TypeScript)\nDESCRIPTION: This example demonstrates how to use the combineChunks() function from the @remotion/renderer package to merge separately rendered video and audio files into a single output. It specifies input video and audio chunk arrays, target output location, codecs, frame rate, and additional configuration required for correct assembly. Requires Node.js, remotion/renderer installed, and that input chunks are previously rendered and accessible at specified absolute paths. Output is written to the configured path as an MP4 file, and the function returns a Promise upon completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/combine-chunks.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {combineChunks} from '@remotion/renderer';\n\n// Video files rendered as separate chunks\nconst videoFiles = ['/path/to/chunk1.mp4', '/path/to/chunk2.mp4', '/path/to/chunk3.mp4'];\n\n// Optional audio files corresponding to each video chunk\nconst audioFiles = ['/path/to/chunk1.aac', '/path/to/chunk2.aac', '/path/to/chunk3.aac'];\n\nawait combineChunks({\n  outputLocation: '/path/to/final-video.mp4',\n  videoFiles,\n  audioFiles,\n  codec: 'h264',\n  fps: 30,\n  framesPerChunk: 100,\n  audioCodec: 'aac',\n  preferLossless: false,\n  compositionDurationInFrames: 300,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Audio Visualization with visualizeAudio() in React (TypeScript)\nDESCRIPTION: Demonstrates how to use the `visualizeAudio` function within a React functional component to visualize audio data. It fetches audio data using `useAudioData`, processes it with `visualizeAudio` based on the current frame and FPS from `useVideoConfig`, and then renders a simple bar chart where each bar's width corresponds to the amplitude of a specific frequency range. Requires `@remotion/media-utils`, `remotion`, and a React environment. Assumes an audio file 'music.mp3' is available via `staticFile`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/visualize-audio.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useAudioData, visualizeAudio} from '@remotion/media-utils';\nimport {Audio, staticFile, useCurrentFrame, useVideoConfig} from 'remotion';\n\nexport const MyComponent: React.FC = () => {\n  const frame = useCurrentFrame();\n  const {width, height, fps} = useVideoConfig();\n  const audioData = useAudioData(staticFile('music.mp3'));\n\n  if (!audioData) {\n    return null;\n  }\n\n  const visualization = visualizeAudio({\n    fps,\n    frame,\n    audioData,\n    numberOfSamples: 16,\n  }); // [0.22, 0.1, 0.01, 0.01, 0.01, 0.02, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n  // Render a bar chart for each frequency, the higher the amplitude,\n  // the longer the bar\n  return (\n    <div>\n      <Audio src={staticFile('music.mp3')} />\n      {visualization.map((v) => {\n        return <div style={{width: 1000 * v, height: 15, backgroundColor: 'blue'}} />;\n      })}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sequencing Remotion Components with Series in TSX\nDESCRIPTION: This snippet introduces a new React component `Main` that uses Remotion's `<Series>` component to combine `One` and `Two` sequentially. Each component is wrapped in a `<Series.Sequence>` specifying its duration. This creates a single, longer animation composed of the individual parts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/combine-compositions.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: One.tsx\nimport React from \"react\";\nexport const One: React.FC = () => {\n  return <div>One</div>;\n};\n\n// @filename: Two.tsx\nimport React from \"react\";\nexport const Two: React.FC = () => {\n  return <div>Two</div>;\n};\n\n// @filename: Main.tsx\n// ---cut---\nimport React from \"react\";\nimport { Series } from \"remotion\";\nimport { One } from \"./One\";\nimport { Two } from \"./Two\";\n\nexport const Main: React.FC = () => {\n  return (\n    <Series>\n      <Series.Sequence durationInFrames={120}>\n        <One />\n      </Series.Sequence>\n      <Series.Sequence durationInFrames={120}>\n        <Two />\n      </Series.Sequence>\n    </Series>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Remotion Project with Tailwind Support using CLI\nDESCRIPTION: Demonstrates how to use the Remotion CLI (`create-video`) with different package managers (npm, pnpm, bun, yarn) to initialize a new video project. Selecting a template that supports Tailwind is required during the CLI prompts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-video@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm create video\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun create video\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn create video\n```\n\n----------------------------------------\n\nTITLE: Using Tailwind CSS Classes with <AbsoluteFill> in TSX\nDESCRIPTION: Shows an example of applying Tailwind CSS utility classes directly to an `<AbsoluteFill>` component using the `className` prop. Specifically, it demonstrates using `flex flex-row` to override the default `flex-direction: column`. Since Remotion v4.0.249, the component automatically detects conflicting Tailwind classes and disables the corresponding default inline styles to ensure the utility classes take precedence as expected. Requires `remotion` and `tailwindcss`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/absolute-fill.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<AbsoluteFill className=\"flex flex-row\" />\n```\n\n----------------------------------------\n\nTITLE: Calculating Combined Spring Animations in Remotion (TypeScript)\nDESCRIPTION: This snippet demonstrates combining two Remotion `spring` animations using subtraction. It calculates an `enter` animation that progresses from 0 to 1 and an `exit` animation that starts near the end, also going from 0 to 1. Subtracting `exit` from `enter` creates a smooth scale-in and scale-out effect. Requires the `remotion` library.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-math.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Enter and exit\"\nimport { spring, useCurrentFrame, useVideoConfig } from \"remotion\";\n\nconst frame = useCurrentFrame();\nconst { fps, durationInFrames } = useVideoConfig();\n\nconst enter = spring({\n  fps,\n  frame,\n  config: {\n    damping: 200,\n  },\n});\n\nconst exit = spring({\n  fps,\n  config: {\n    damping: 200,\n  },\n  durationInFrames: 20,\n  delay: durationInFrames - 20,\n  frame,\n});\n\nconst scale = enter - exit;\n```\n```\n\n----------------------------------------\n\nTITLE: Using a Reusable Title Component in a Remotion Video (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the previously defined `Title` component within a main Remotion video component called `MyVideo`. It imports necessary functions and components from `remotion`, defines the `Title` component, and then renders a single instance of `<Title>` with the text \"Hello World\" inside an `<AbsoluteFill>` container, which makes the title cover the entire video area.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequences.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, interpolate, useCurrentFrame} from 'remotion';\n\nconst Title: React.FC<{title: string}> = ({title}) => {\n  const frame = useCurrentFrame();\n  const opacity = interpolate(frame, [0, 20], [0, 1], {\n    extrapolateRight: 'clamp',\n  });\n\n  return (\n    <div style={{opacity, textAlign: 'center', fontSize: '7em'}}>{title}</div>\n  );\n};\n\nexport const MyVideo = () => {\n  return (\n    <AbsoluteFill>\n      <Title title=\"Hello World\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Setting Remotion Composition Duration in TypeScript\nDESCRIPTION: This example illustrates how to adjust durationInFrames (and optionally fps, width, height) before render by returning them from calculateMetadata. Designed for dynamic video durations based on props, with a focus on calculation logic. Requires Remotion and TypeScript. Input props should have a field specifying duration in seconds; output sets the corresponding frame count.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nimport { CalculateMetadataFunction } from \"remotion\";\n\ntype MyCompProps = {\n  durationInSeconds: number;\n};\n\nexport const calculateMyCompMetadata: CalculateMetadataFunction<\n  MyCompProps\n> = ({ props }) => {\n  const fps = 30;\n  const durationInSeconds = props.durationInSeconds;\n\n  return {\n    durationInFrames: durationInSeconds * fps,\n    fps,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Video via Command Line\nDESCRIPTION: This console command uses the Remotion CLI (executed via `npx`) to initiate the server-side rendering process for the video composition defined in the project. This command generates the final video output file(s).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-google/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n```console\nnpx remotion render\n```\n```\n\n----------------------------------------\n\nTITLE: Manually Validating and Handling Remotion Lambda Webhooks with Express - JavaScript\nDESCRIPTION: Demonstrates an explicit implementation for handling Remotion webhook POST and OPTIONS requests in Express, including signature validation via validateWebhookSignature. External dependencies: express, body-parser, and @remotion/lambda/client required. Adds CORS/test headers, handles all three payload types by 'type', and sends a status response. Listens on port 3000.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\\nimport bodyParser from 'body-parser';\\nimport {validateWebhookSignature} from '@remotion/lambda/client';\\n\\nconst router = express();\\nconst jsonParser = bodyParser.json();\\n\\nconst handler = (req, res) => {\\n  //  add headers to enable  testing\\n  const ENABLE_TESTING = true;\\n\\n  if (ENABLE_TESTING) {\\n    res.setHeader('Access-Control-Allow-Origin', 'https://www.remotion.dev');\\n    res.setHeader('Access-Control-Allow-Methods', 'OPTIONS,POST');\\n    res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, X-Remotion-Status, X-Remotion-Signature, X-Remotion-Mode');\\n  }\\n\\n  // dont go forward if just testing\\n  if (req.method === 'OPTIONS') {\\n    // custom code to handle OPTIONS request\\n    // logger(req).info('OPTIONS request received');\\n    res.status(200).end();\\n    return;\\n  }\\n\\n  // validate the webhook signature\\n  validateWebhookSignature({\\n    signatureHeader: req.header('X-Remotion-Signature'),\\n    body: req.body,\\n    secret: 'mysecret',\\n  });\\n\\n  //  custom logic\\n  const payload = req.body;\\n  if (payload.type === 'success') {\\n    //success logic here\\n  } else if (payload.type === 'error') {\\n    //error logic here\\n  } else if (payload.type === 'timeout') {\\n    //timeout logic here\\n  }\\n\\n  // send response\\n  res.status(200).json({success: true});\\n};\\n\\nrouter.post('/webhook', jsonParser, handler);\\n\\nrouter.options('/webhook', jsonParser, handler);\\n\\nrouter.listen(3000, () => {\\n  console.log('Server is running on port 3000');\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion for Apple ProRes Transparent Video Export (TypeScript)\nDESCRIPTION: Shows how to programmatically set up Remotion for ProRes exports that include alpha channels, targeting professional video workflows. Requires '@remotion/cli/config'; used in 'remotion.config.ts'. Sets video image format to PNG, pixel format to 'yuva444p10le', codec to 'prores', and profile to '4444', ensuring compatibility with editors like Final Cut Pro and Adobe Premiere for transparent videos.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transparent-videos.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\n\nConfig.setVideoImageFormat(\"png\");\nConfig.setPixelFormat(\"yuva444p10le\");\nConfig.setCodec(\"prores\");\nConfig.setProResProfile(\"4444\");\n```\n\n----------------------------------------\n\nTITLE: Modifying Subtitle Rendering Behavior in Remotion (diff, TypeScript/React)\nDESCRIPTION: This snippet shows a code change (diff format) in 'remotion/captions/srt/SrtPreviewAndEditor/SrtPreviewAndEditor.tsx' for the Remotion video rendering framework. It removes a conditional check that returns null during rendering, which would otherwise suppress subtitle overlay during final export and result in SRT file output only. By deleting the shown lines, subtitles will be burned visually into videos in all layouts, not just as a separate file. No external dependencies are introduced, but this requires familiarity with the Remotion rendering lifecycle. Key parameter is the isRendering property from getRemotionEnvironment().\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/exporting-subtitles.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-  // During rendering, you will get the actual .srt file instead of the preview.\\n-  if (getRemotionEnvironment().isRendering) {\\n-    return null;\\n\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Regular Templates (Remotion, Bash)\nDESCRIPTION: This Bash command starts the development environment for Remotion projects that use the regular template setup. It assumes you have npm installed and have set up your Remotion project using regular templates. When run, it launches a server for Remotion Studio, typically available at localhost:3000. There are no parameters required, and it is suitable only for standard template Remotion projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preview.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Anti-Pattern for Randomness in Remotion TSX Components\nDESCRIPTION: Demonstrates an incorrect way to generate random values within a Remotion component using `Math.random()` inside `useState`. This approach causes inconsistent values during multi-threaded rendering because each rendering instance will produce different random numbers, leading to visual discrepancies. This snippet serves as a warning against this common mistake.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-26-remotion-1-4.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx {5-6}\nexport const MyComp = () => {\n  // ⚠️ Bug! Random values will change during render\n  const [particles] = useState(() => {\n    return new Array(100).fill(true).map(() => ({\n      x: Math.random(),\n      y: Math.random(),\n    }));\n  });\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Programmatic Control of @remotion/player via React Ref in TypeScript\nDESCRIPTION: Demonstrates programmatic control by obtaining the Player's ref and exposing imperative methods like seekTo. Utilizes useRef and useCallback React hooks; requires PlayerRef type from @remotion/player. The seekToMiddle function moves playback to the 60th frame. Inputs: playerRef, user-triggered callback. Outputs: player seeks as instructed. Limitation: example assumes the consumer wires the callback (e.g., button) for actual use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player, PlayerRef } from \"@remotion/player\";\\nimport { useCallback, useRef } from \"react\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  const playerRef = useRef<PlayerRef>(null);\\n\\n  const seekToMiddle = useCallback(() => {\\n    const { current } = playerRef;\\n    if (!current) {\\n      return;\\n    }\\n    current.seekTo(60);\\n  }, []);\\n\\n  return (\\n    <Player\\n      ref={playerRef}\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Presigned URLs for AWS S3 Uploads - TypeScript\nDESCRIPTION: Defines an async function to generate S3 presigned URLs using the AWS SDK, including upload constraints (like max file size) and randomized file keys. Requires dependencies: '@aws-sdk/s3-request-presigner', '@remotion/lambda/client', and environment variables for AWS region. Expects contentType, contentLength, expiresIn (in seconds), bucketName, and region. Returns both presigned upload URL and the public read URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/presigned-urls.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getSignedUrl} from '@aws-sdk/s3-request-presigner';\nimport {AwsRegion, getAwsClient} from '@remotion/lambda/client';\n\nexport const generatePresignedUrl = async (contentType: string, contentLength: number, expiresIn: number, bucketName: string, region: AwsRegion): Promise<{presignedUrl: string; readUrl: string}> => {\n  if (contentLength > 1024 * 1024 * 200) {\n    throw new Error(`File may not be over 200MB. Yours is ${contentLength} bytes.`);\n  }\n\n  const {client, sdk} = getAwsClient({\n    region: process.env.REMOTION_AWS_REGION as AwsRegion,\n    service: 's3',\n  });\n\n  const key = crypto.randomUUID();\n\n  const command = new sdk.PutObjectCommand({\n    Bucket: bucketName,\n    Key: key,\n    ACL: 'public-read',\n    ContentLength: contentLength,\n    ContentType: contentType,\n  });\n\n  const presignedUrl = await getSignedUrl(client, command, {\n    expiresIn,\n  });\n\n  // The location of the asset after the upload\n  const readUrl = `https://${bucketName}.s3.${region}.amazonaws.com/${key}`;\n\n  return {presignedUrl, readUrl};\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing Google Font Loading with loadFont - Remotion TypeScript\nDESCRIPTION: Demonstrates best practices for using the loadFont function from @remotion/google-fonts/Inter in a TypeScript (tsx) Remotion project. Shows both an incorrect usage where all font weights and subsets are loaded by default, and a recommended usage loading only the required weights and subsets (regular and bold, Latin subset). Dependencies: @remotion/google-fonts/Inter package. Key parameters are style (default 'normal'), subsets (e.g., ['latin']), and weights (e.g., ['400', '700']). Input is the font style and options object; output is the loaded font resources in Remotion without timeout errors. Limitations: Only subsets and weights provided are loaded, improving performance and reliability.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/font-loading-errors.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {loadFont} from '@remotion/google-fonts/Inter';\\n\\n// \\u274C Avoid: Loading all weights and subsets\\nloadFont();\\n\\n// \\u2705 Recommended: Load only required weights and subsets\\nloadFont('normal', {\\n  subsets: ['latin'],\\n  weights: ['400', '700'], // Only load regular (400) and bold (700)\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring the Data Structure for Timeline Items in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type representing an individual timeline item in the editor. It outlines all necessary properties: a unique id, time bounds (from, durationInFrames), position (left, top), dimensions (width, height), color, and isDragging for UI states. This type is required by all components that manipulate items throughout the application, serving as a contract for shape and usage of each item.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: item.ts\\n// ---cut---\\n// @include: item\n```\n\n----------------------------------------\n\nTITLE: Generating CSS translateX() Transform in Remotion (TSX)\nDESCRIPTION: Demonstrates using the `translateX` function from `@remotion/animation-utils` to generate a CSS `translateX()` transform string. It accepts the translation value as a number (defaulting to px), a string with a unit, or a number and an optional unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { translateX } from \"@remotion/animation-utils\";\n\nconst transform = translateX(10);\n// => \"translateX(10px)\"\n\nconst transform2 = translateX(\"12rem\");\n// => \"translateX(12rem)\"\n\nconst transform3 = translateX(10, \"%\");\n// => \"translateX(10%)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Presigned URL API Endpoint in Next.js App Router - TypeScript/TSX\nDESCRIPTION: A complete Next.js API endpoint using the App Router for generating presigned S3 upload URLs. Handles request validation, user settings checks, constraints, and invokes the URL generation function. Relies on environment variables for bucket and region configuration. Expects POST requests with JSON including size and contentType, returns presignedUrl and readUrl in JSON.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/presigned-urls.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {NextResponse} from 'next/server';\nimport {getSignedUrl} from '@aws-sdk/s3-request-presigner';\nimport {AwsRegion, getAwsClient} from '@remotion/lambda/client';\n\nconst generatePresignedUrl = async ({contentType, contentLength, expiresIn, bucketName, region}: {contentType: string; contentLength: number; expiresIn: number; bucketName: string; region: AwsRegion}): Promise<{presignedUrl: string; readUrl: string}> => {\n  if (contentLength > 1024 * 1024 * 200) {\n    throw new Error(`File may not be over 200MB. Yours is ${contentLength} bytes.`);\n  }\n\n  const {client, sdk} = getAwsClient({\n    region: process.env.REMOTION_AWS_REGION as AwsRegion,\n    service: 's3',\n  });\n\n  const key = crypto.randomUUID();\n\n  const command = new sdk.PutObjectCommand({\n    Bucket: bucketName,\n    Key: key,\n    ACL: 'public-read',\n    ContentLength: contentLength,\n    ContentType: contentType,\n  });\n\n  const presignedUrl = await getSignedUrl(client, command, {\n    expiresIn,\n  });\n\n  // The location of the asset after the upload\n  const readUrl = `https://${bucketName}.s3.${region}.amazonaws.com/${key}`;\n\n  return {presignedUrl, readUrl};\n};\n\nexport const POST = async (request: Request) => {\n  if (!process.env.REMOTION_AWS_BUCKET_NAME) {\n    throw new Error('REMOTION_AWS_BUCKET_NAME is not set');\n  }\n\n  if (!process.env.REMOTION_AWS_REGION) {\n    throw new Error('REMOTION_AWS_REGION is not set');\n  }\n\n  const json = await request.json();\n  if (!Number.isFinite(json.size)) {\n    throw new Error('size is not a number');\n  }\n  if (typeof json.contentType !== 'string') {\n    throw new Error('contentType is not a string');\n  }\n\n  const {presignedUrl, readUrl} = await generatePresignedUrl({\n    contentType: json.contentType,\n    contentLength: json.size,\n    expiresIn: 60 * 60 * 24 * 7,\n    bucketName: process.env.REMOTION_AWS_BUCKET_NAME as string,\n    region: process.env.REMOTION_AWS_REGION as AwsRegion,\n  });\n\n  return NextResponse.json({presignedUrl, readUrl});\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Using npm - Bash\nDESCRIPTION: Installs the Remotion core package using npm, the Node.js package manager. This command requires npm to be installed in the environment. The 'remotion' package will be added to the dependencies in the project's package.json file. Input is executed from a terminal, and no additional arguments are required.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/remotion.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i remotion\n```\n\n----------------------------------------\n\nTITLE: Preloading a Font Using @remotion/preload - TypeScript/React\nDESCRIPTION: This snippet demonstrates basic usage of the preloadFont() function from the @remotion/preload package in a TypeScript/React context. It imports the API, invokes it with a remote font URL to preload the font for immediate rendering when an <Img> tag is mounted, and optionally provides a way to undo the preloading using the returned cleanup function. The preloadFont() call should be executed before components that depend on the font are rendered. No additional dependencies other than @remotion/preload are required. The input is a string URL to a .woff2 font, and the output is an unpreload function for cleanup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload-font.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { preloadFont } from \"@remotion/preload\";\n\nconst unpreload = preloadFont(\n  \"https://fonts.gstatic.com/s/roboto/v30/KFOlCnqEu92Fr1MmYUtfBxc4AMP6lbBP.woff2\"\n);\n\n// If you want to un-preload the font later\nunpreload();\n```\n\n----------------------------------------\n\nTITLE: Parsing Video Metadata Using Web Worker - Remotion Media Parser (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use parseMediaOnWebWorker from the @remotion/media-parser/worker package to parse a video's duration and dimensions in the browser using a Web Worker. It asynchronously processes a video file from a remote URL, returning metadata without blocking the main thread. Dependencies include the @remotion/media-parser/worker package, and the snippet assumes a TS/React environment. The input is an object with 'src' (video URL) and 'fields' to specify metadata to extract, and the result contains the requested properties. Only remote sources are supported; parsing happens in a worker.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/workers.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMediaOnWebWorker} from '@remotion/media-parser/worker';\\n\\nconst result = await parseMediaOnWebWorker({\\n  src: 'https://example.com/my-video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n});\\n\\nconsole.log(result.durationInSeconds); // 10\\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\\n\n```\n\n----------------------------------------\n\nTITLE: Retrying delayRender with Retries Option in Remotion (TypeScript/React)\nDESCRIPTION: Demonstrates passing a retries option to delayRender, instructing Remotion to retry rendering if a delay is not resolved within the timeout. Useful for flaky async operations (e.g., remote asset fetches). The retries option is an integer number of attempts. Supported directly in delayRender and via eligible media component props. Requires Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/delay-render.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { delayRender } from \"remotion\";\n\ndelayRender(\"Loading asset...\", {\n  retries: 1, // default: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Spring Animation with Variable FPS in Remotion (TypeScript)\nDESCRIPTION: Demonstrates configuring spring animations with duration, delay, and fps parameters set relative to current fps. Uses spring from Remotion, setup via useCurrentFrame and useVideoConfig. Inputs: frame (current frame), fps (from config), durationInFrames (frames to animate), delay (frames to wait before starting). Outputs: animationProgress scalar. Ensures timing consistency across frame rates. Requires Remotion's motion API and hooks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/multiple-fps.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {spring, useCurrentFrame, useVideoConfig} from 'remotion';\\nconst frame = useCurrentFrame();\\nconst {fps} = useVideoConfig();\\n// ---cut---\\nconst animationProgress = spring({\\n  frame,\\n  fps,\\n  durationInFrames: 2 * fps,\\n  delay: 1 * fps,\\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Length of a Valid SVG Path\nDESCRIPTION: This snippet demonstrates the basic usage of the `getLength()` function from `@remotion/paths`. It imports the function and calculates the length of a simple SVG line path ('M 0 0 L 100 0'). The result (100) is then printed to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-length.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLength } from \"@remotion/paths\";\n\nconst length = getLength(\"M 0 0 L 100 0\");\nconsole.log(length); // 100\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Not Clearing Buffer Handle on Seek (TypeScript/React)\nDESCRIPTION: Shows another incorrect usage pattern, similar to the previous one, where `delayPlayback` is invoked inside `useState`. This example specifically highlights that even with a cleanup function in `useEffect`, if the user seeks away from the component's time range before the timeout completes, the initial buffer handle created by `useState` might not be properly cleared, potentially causing persistent buffering issues. The correct approach is to manage the handle creation and cleanup within `useEffect`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-buffer-state.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"❌ Doesn't clear the buffer handle when seeking to a different portion of a video\"\nimport React, { useState } from \"react\";\nimport { useBufferState } from \"remotion\";\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n  const [delayHandle] = useState(() => buffer.delayPlayback()); // 💥\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      delayHandle.unblock();\n    }, 5000);\n\n    return () => {\n      delayHandle.unblock();\n    };\n  }, []);\n\n  return <></>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Attaching a React Ref to <AbsoluteFill> in TSX\nDESCRIPTION: Illustrates how to attach a React ref to the underlying `<div>` element rendered by the `<AbsoluteFill>` component using the `useRef` hook from React. When using TypeScript, the ref must be explicitly typed as `React.RefObject<HTMLDivElement>` or similar. This allows direct DOM manipulation if needed. Requires `react` and `remotion` packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/absolute-fill.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRef} from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nconst content = <div>Hello, World</div>;\n// ---cut---\nconst MyComp = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  return <AbsoluteFill ref={ref}>{content}</AbsoluteFill>;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Spring Animations for Scale in Remotion (React TSX)\nDESCRIPTION: This React component (`MyVideo`) demonstrates using Remotion's `spring` function to create a natural spring animation. It uses the current frame (`useCurrentFrame`) and the video's frames per second (`useVideoConfig`) as inputs to the `spring` function. The resulting value animates from 0 to 1 by default and is used here to drive the `scale` transform property, making the text element scale in with a characteristic bounce.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animating-properties.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {7-12, 20}\nimport { spring, useCurrentFrame, useVideoConfig } from \"remotion\";\n\nexport const MyVideo = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const scale = spring({\n    fps,\n    frame,\n  });\n\n  return (\n    <div\n      style={{\n        flex: 1,\n        textAlign: \"center\",\n        fontSize: \"7em\",\n      }}\n    >\n      <div style={{ transform: `scale(${scale})` }}>Hello World!</div>\n    </div>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Generating CSS translate3d() Transform in Remotion (TSX)\nDESCRIPTION: Shows how to use the `translate3d` function from `@remotion/animation-utils` to create a CSS `translate3d()` transform string. It accepts arguments for X, Y, and Z translation, supporting numbers (defaulting to px), strings with units, and number/unit pairs for each axis.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { translate3d } from \"@remotion/animation-utils\";\n\nconst transform = translate3d(10, 20, 30);\n// => \"translate3d(10px, 20px, 30px)\"\n\nconst transform2 = translate3d(\"10px\", \"20%\", \"30rem\");\n// => \"translate3d(10px, 20%, 30rem)\"\n\nconst transform3 = translate3d(10, \"%\", 20, \"px\", 30, \"px\");\n// => \"translate3d(10%, 20px, 30px)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Calling delayPlayback inside useState (TypeScript/React)\nDESCRIPTION: Illustrates a problematic pattern where `buffer.delayPlayback()` is called within the `useState` initializer. While this might appear to work in production, it causes issues in development with React Strict Mode. Strict Mode calls initializer functions twice, meaning `delayPlayback` is called twice, but only the second handle is stored. The first handle is never unblocked, leading to perpetual buffering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-buffer-state.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"❌ Causes problems with React strict mode\"\nimport React, { useState } from \"react\";\nimport { useBufferState } from \"remotion\";\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n  const [delayHandle] = useState(() => buffer.delayPlayback()); // 💥\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      delayHandle.unblock();\n    }, 5000);\n  }, []);\n\n  return <></>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering and Polling Lambda Video Render - Remotion Lambda - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to use the remotion_lambda gem to initiate a video render job on AWS Lambda via Remotion, and then poll for its progress and completion status. Dependencies include the remotion_lambda gem matching the deployed @remotion/lambda package version, AWS credentials, and a properly set REMOTION_APP_FUNCTION_NAME in the environment. The code configures a client, builds a payload, submits the render request, and repeatedly checks render progress or errors until done, printing progress updates. Inputs are composition, codec, input_props (passed as a hash), and Lambda function name; outputs are the rendering status and metadata. The approach assumes all payload fields are proper snake_case as per SDK conventions, and the input size stays within 60KB.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/ruby.mdx#_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'remotion_lambda'\n\nclient = RemotionLambda::Client.new(\n  region: 'eu-central-1',\n)\n\nfunction_name = ENV.fetch('REMOTION_APP_FUNCTION_NAME')\n\npayload = get_render_media_on_lambda_payload(\n  composition: \"still-helloworld\",\n  download_behavior: {\n    type: \"play-in-browser\",\n  },\n  codec: \"h264\",\n  input_props: {\n    message: \"Hello from props!\",\n  }\n)\n\nres = client.render_media_on_lambda(function_name, payload)\nputs res\nwhile true\n  render_progress_payload = get_render_progress_payload(\n    render_id: res[\"renderId\"],\n    bucket_name: res[\"bucketName\"],\n  )\n  progress = client.get_render_progress(function_name, render_progress_payload)\n  puts progress[\"overallProgress\"]\n  break if progress[\"done\"]\n  break if progress[\"fatalErrorEncountered\"]\n  sleep 1\nend\n```\n\n----------------------------------------\n\nTITLE: Error Handling with normalizePath in @remotion/paths (TypeScript)\nDESCRIPTION: This snippet shows how normalizePath from @remotion/paths handles malformed input. It attempts to normalize an invalid string ('remotion'), demonstrating that the function throws an error in such cases. Suitable for testing and demonstrating robustness, it emphasizes the necessity for valid SVG path data as input. The snippet relies on the @remotion/paths package and is written in TypeScript, using conventional error handling expectations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/normalize-path.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { normalizePath } from \"@remotion/paths\";\n// ---cut---\nnormalizePath(\"remotion\"); // Error: Malformed path data: ...\n```\n\n----------------------------------------\n\nTITLE: Printing User Permissions for AWS Lambda via Remotion CLI - Shell\nDESCRIPTION: This snippet provides a shell command to print out the required IAM user policies for Remotion Lambda. It assumes that npx and Node.js are installed and prints the permissions for a user account interacting with Remotion Lambda. Bash or compatible terminal is required, and the command does not take any parameters. The output is the user policy, formatted for use in the AWS Console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/policies.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda policies user\n```\n\n----------------------------------------\n\nTITLE: Trimming Video Playback with <OffthreadVideo> Props in Remotion (tsx)\nDESCRIPTION: Illustrates how to trim the beginning and end of a video using the `startFrom` and `endAt` props of the `<OffthreadVideo>` component. Assuming a 30 FPS composition, `startFrom={60}` skips the first 2 seconds, and `endAt={120}` stops playback after the 4-second mark, resulting in a 2-second playback duration. Requires `AbsoluteFill`, `OffthreadVideo`, and `staticFile` imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, OffthreadVideo, staticFile} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo src={staticFile('video.webm')} startFrom={60} endAt={120} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Media Files with parseMediaOnWebWorker and Remotion in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the experimental parseMediaOnWebWorker() function from the @remotion/media-parser/worker module. This function allows for asynchronous parsing of media files (such as video) in a Web Worker context to avoid blocking the main thread in browser or Bun environments. The example parses a remote MP4 file, requesting metadata such as durationInSeconds and dimensions, and logs these results to the console. Required dependencies include the @remotion/media-parser package, and execution context must provide Web Worker support. Key inputs include the media file source (src) and the fields of interest. The output is a Promise that resolves to an object with the requested metadata fields.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/parse-media-on-web-worker.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMediaOnWebWorker} from '@remotion/media-parser/worker';\n\nconst result = await parseMediaOnWebWorker({\n  src: 'https://example.com/my-video.mp4',\n  fields: {\n    durationInSeconds: true,\n    dimensions: true,\n  },\n});\n\nconsole.log(result.durationInSeconds); // 10\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Site with Node.js API (typescript)\nDESCRIPTION: Demonstrates programmatically deploying a Remotion project using the `deploySite` function from `@remotion/lambda` in Node.js. It requires the S3 bucket name (obtained via `getOrCreateBucket`), the project's entry point path, AWS region, and an optional `siteName` for naming and overwriting deployments. It returns the serve URL for the deployed site. Requires `@remotion/lambda` and the `path` module.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport {deploySite, getOrCreateBucket} from '@remotion/lambda';\n\nconst {bucketName} = await getOrCreateBucket({\n  region: 'us-east-1',\n});\n// ---cut---\nconst {serveUrl} = await deploySite({\n  bucketName,\n  entryPoint: path.resolve(process.cwd(), 'src/index.ts'),\n  region: 'us-east-1',\n  siteName: 'my-video',\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Path Utilities to getSubpaths in Remotion v4 - TypeScript / TSX\nDESCRIPTION: This code sample demonstrates the new way to split SVG path strings into subpaths using getSubpaths, replacing the removed getParts API. It shows how to import the updated path functions from '@remotion/paths', extract subpaths, compute path lengths, get points and tangents at specific lengths. Required dependencies: '@remotion/paths'. The code expects a valid SVG path string as input and outputs various geometric properties of the subpath.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getLength, getPointAtLength, getSubpaths, getTangentAtLength} from '@remotion/paths';\n\nconst path = 'M 0 0 L 100 100';\nconst parts = getSubpaths(path[0]);\nconst length = getLength(parts[0]);\nconst start = getPointAtLength(parts[0], 0);\nconst end = getPointAtLength(parts[0], length);\nconst tangent = getTangentAtLength(parts[0], length / 2);\n```\n\n----------------------------------------\n\nTITLE: Combining delayRender and delayPlayback for Buffering and Rendering (TypeScript/React)\nDESCRIPTION: Combines delayRender with useBufferState.delayPlayback() to coordinate both render delays and UI buffering in the Remotion Player or Studio. This pattern blocks both screenshotting (render) and gauge (player) until async work is complete, handling cleanup on unmount. Requires Remotion, React, and useBufferState. Inputs: timeout triggers, Outputs: component readiness upon completion of delays.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/delay-render.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useBufferState, delayRender, continueRender } from \"remotion\";\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n  const [handle] = React.useState(() => delayRender());\n\n  React.useEffect(() => {\n    const delayHandle = buffer.delayPlayback();\n\n    setTimeout(() => {\n      delayHandle.unblock();\n      continueRender(handle);\n    }, 5000);\n\n    return () => {\n      delayHandle.unblock();\n    };\n  }, []);\n\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rotating a Video 90 Degrees Clockwise with @remotion/webcodecs (TypeScript/React)\nDESCRIPTION: This snippet demonstrates use of the convertMedia() function from the @remotion/webcodecs package to rotate a video 90 degrees clockwise in the browser. It imports the necessary function, specifies the video source, target container format, and desired rotation in the convertMedia call. Dependencies include @remotion/webcodecs, and the src parameter must be a valid video URL. The code returns a Promise which resolves when the conversion completes. The container format and rotation can be adjusted through the parameters.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/rotation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\\n\\nawait convertMedia({\\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\\n  container: 'webm',\\n  rotate: 90,\\n});\n```\n\n----------------------------------------\n\nTITLE: Adjusting Playback Speed of <OffthreadVideo> in Remotion (tsx)\nDESCRIPTION: Shows how to control the playback speed of an `<OffthreadVideo>` using the `playbackRate` prop. Setting `playbackRate={2}` makes the video play twice as fast. Requires `AbsoluteFill`, `OffthreadVideo`, and `staticFile` imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, OffthreadVideo, staticFile} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo playbackRate={2} src={staticFile('video.webm')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion Player for 'do-nothing' Mode (TSX)\nDESCRIPTION: This TSX code demonstrates setting the `browserMediaControlsBehavior` prop to `do-nothing` mode for the Remotion `<Player>`. This reverts to the behavior before Remotion v4.0.221, where Remotion does not interact with media keys, leaving handling entirely to the browser. This can lead to inconsistencies, such as media elements resuming playback via media keys without the Player itself resuming.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/media-keys.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst otherProps = {\n  compositionHeight: 720,\n  compositionWidth: 1280,\n  inputProps: {},\n  durationInFrames: 120,\n  fps: 30,\n  component: () => null,\n};\n// ---cut---\n\nimport {Player} from '@remotion/player';\n\nexport const MyComp: React.FC = () => {\n  return (\n    <Player\n      browserMediaControlsBehavior={{\n        mode: 'do-nothing',\n      }}\n      {...otherProps}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Converting MP4 to WebM from URL using @remotion/webcodecs in TSX\nDESCRIPTION: This snippet demonstrates converting a video from a URL (MP4 format) to WebM format using the `convertMedia` function from `@remotion/webcodecs`. It requires the `@remotion/webcodecs` package and assumes the source URL is CORS-enabled. The `src` parameter specifies the input URL, and `container` specifies the desired output format ('webm').\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-a-video.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering an Ellipse with Remotion's `<Ellipse />` Component (TSX)\nDESCRIPTION: This TSX example demonstrates how to use the `<Ellipse />` component from `@remotion/shapes` within a Remotion `AbsoluteFill` container. It imports `Ellipse` and `AbsoluteFill`, then renders an ellipse centered on a white background. The ellipse has an x-radius (`rx`) of 100, a y-radius (`ry`) of 50, a green `fill`, a red `stroke`, and a `strokeWidth` of 1.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/ellipse.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Ellipse } from \"@remotion/shapes\";\nimport { AbsoluteFill } from \"remotion\";\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Ellipse rx={100} ry={50} fill=\"green\" stroke=\"red\" strokeWidth={1} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Bucket for Remotion Lambda (TypeScript)\nDESCRIPTION: Demonstrates how to pass a custom output bucket and object key to the renderMediaOnLambda function in Remotion Lambda. This snippet shows how to use the outName option to specify both the destination bucket name and output key, allowing rendered media to be saved in a different S3 bucket. Requires @remotion/lambda as a dependency, IAM permissions on the destination bucket, and correct region alignment. Key parameters are region, functionName, composition, serveUrl, inputProps, codec, imageFormat, maxRetries, privacy, and outName object containing key and bucketName. The returned object includes the bucketName and renderId of the media.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/custom-destination.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {renderMediaOnLambda} from '@remotion/lambda';\n// ---cut---\n\nconst {bucketName, renderId} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  composition: 'MyVideo',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  inputProps: {},\n  codec: 'h264',\n  imageFormat: 'jpeg',\n  maxRetries: 1,\n  privacy: 'public',\n  outName: {\n    key: 'my-output',\n    bucketName: 'output-bucket',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Delaying Video Start with Sequence in Remotion (TypeScript)\nDESCRIPTION: This component demonstrates how to delay the appearance of a video on the timeline by wrapping OffthreadVideo in Remotion's Sequence component, using the from parameter to set an offset in frames. Requires remotion and React as dependencies. The video starts at frame 60, and must be available in the public directory; Sequence acts as a parent to delay its child components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile, Sequence} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <Sequence from={60}>\\n      <OffthreadVideo src={staticFile('video.mp4')} />\\n    </Sequence>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing the <Trail> Component for Motion Blur Effect in Remotion (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `<Trail>` component from `@remotion/motion-blur` within a Remotion composition. It wraps an `<AbsoluteFill>` containing a `BlueSquare` component (defined previously). The `layers`, `lagInFrames`, and `trailOpacity` props are configured to create a trail effect with 50 layers, a 0.1 frame lag between each, and full initial opacity. It requires React, Remotion (`AbsoluteFill`), and `@remotion/motion-blur` (`Trail`), and the child element must be absolutely positioned.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/trail.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\n// @include: example-BlueSquare\n// ---cut---\nimport {Trail} from '@remotion/motion-blur';\nimport {AbsoluteFill} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <Trail layers={50} lagInFrames={0.1} trailOpacity={1}>\n      <AbsoluteFill\n        style={{\n          backgroundColor: 'white',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <BlueSquare />\n      </AbsoluteFill>\n    </Trail>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining useDelayRender Hook with Remotion in TypeScript\nDESCRIPTION: This code defines a custom React hook, useDelayRender, which leverages Remotion's delayRender and continueRender functions to defer component rendering. Dependencies include React (useState, useCallback) and Remotion libraries. The hook returns a callback function, which when called, signals Remotion to continue rendering; it can accept an optional label parameter for debugging or tracking. Expected input is an optional string label, and output is a function to call after async tasks finish. There are no exceptional limitations, but correct integration with Remotion is required.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/use-delay-render.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useCallback, useState } from \\\"react\\\";\nimport { continueRender, delayRender } from \\\"remotion\\\";\n\ntype ContinueRenderFnBound = () => void;\n\nexport const useDelayRender = (label?: string): ContinueRenderFnBound => {\n  const [handle] = useState(() => delayRender(label));\n\n  return useCallback(() => {\n    continueRender(handle);\n  }, [handle]);\n};\n```\n\n----------------------------------------\n\nTITLE: Executing the Remotion Lambda Function Removal Command (Shell)\nDESCRIPTION: This command uses `npx` to run the Remotion CLI and invoke the `lambda functions rmall` subcommand. It initiates the process of deleting all Remotion-related AWS Lambda functions in the currently configured or specified AWS region. The command will typically list each function found and ask for confirmation before deletion, unless the `--yes` flag is provided. Requires Node.js, Remotion CLI, and configured AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/functions/rmall.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda functions rmall\n```\n\n----------------------------------------\n\nTITLE: Defining Top 100 Google Fonts Array in TypeScript for Remotion\nDESCRIPTION: This TypeScript code defines and exports an array named `top100`. This array contains configuration objects for the 100 most popular Google Fonts, optimized for use with Remotion. Each object includes the font family name and a dynamic import function (`load`) to lazy-load the specific font data from `@remotion/google-fonts` only when needed, reducing the initial bundle size. This array is intended to be used instead of calling `getAvailableFonts()` for better performance.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/font-picker.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash\nimport type {GoogleFont} from '@remotion/google-fonts';\n\nexport const top100 = [\n  {\n    family: 'Abel',\n    load: () => import('@remotion/google-fonts/Abel') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Anton',\n    load: () => import('@remotion/google-fonts/Anton') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Archivo',\n    load: () => import('@remotion/google-fonts/Archivo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Arimo',\n    load: () => import('@remotion/google-fonts/Arimo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Arvo',\n    load: () => import('@remotion/google-fonts/Arvo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Asap',\n    load: () => import('@remotion/google-fonts/Asap') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Assistant',\n    load: () => import('@remotion/google-fonts/Assistant') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Barlow',\n    load: () => import('@remotion/google-fonts/Barlow') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Barlow Condensed',\n    load: () => import('@remotion/google-fonts/BarlowCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Barlow Semi Condensed',\n    load: () => import('@remotion/google-fonts/BarlowSemiCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Bebas Neue',\n    load: () => import('@remotion/google-fonts/BebasNeue') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Bitter',\n    load: () => import('@remotion/google-fonts/Bitter') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cabin',\n    load: () => import('@remotion/google-fonts/Cabin') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cairo',\n    load: () => import('@remotion/google-fonts/Cairo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Caveat',\n    load: () => import('@remotion/google-fonts/Caveat') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Chakra Petch',\n    load: () => import('@remotion/google-fonts/ChakraPetch') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Comfortaa',\n    load: () => import('@remotion/google-fonts/Comfortaa') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cormorant Garamond',\n    load: () => import('@remotion/google-fonts/CormorantGaramond') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Crimson Text',\n    load: () => import('@remotion/google-fonts/CrimsonText') as Promise<GoogleFont>,\n  },\n  {\n    family: 'DM Sans',\n    load: () => import('@remotion/google-fonts/DMSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Dancing Script',\n    load: () => import('@remotion/google-fonts/DancingScript') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Dosis',\n    load: () => import('@remotion/google-fonts/Dosis') as Promise<GoogleFont>,\n  },\n  {\n    family: 'EB Garamond',\n    load: () => import('@remotion/google-fonts/EBGaramond') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Exo 2',\n    load: () => import('@remotion/google-fonts/Exo2') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Figtree',\n    load: () => import('@remotion/google-fonts/Figtree') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Fira Sans',\n    load: () => import('@remotion/google-fonts/FiraSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Fira Sans Condensed',\n    load: () => import('@remotion/google-fonts/FiraSansCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Fjalla One',\n    load: () => import('@remotion/google-fonts/FjallaOne') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Heebo',\n    load: () => import('@remotion/google-fonts/Heebo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Hind',\n    load: () => import('@remotion/google-fonts/Hind') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Hind Siliguri',\n    load: () => import('@remotion/google-fonts/HindSiliguri') as Promise<GoogleFont>,\n  },\n  {\n    family: 'IBM Plex Mono',\n    load: () => import('@remotion/google-fonts/IBMPlexMono') as Promise<GoogleFont>,\n  },\n  {\n    family: 'IBM Plex Sans',\n    load: () => import('@remotion/google-fonts/IBMPlexSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Inconsolata',\n    load: () => import('@remotion/google-fonts/Inconsolata') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Inter',\n    load: () => import('@remotion/google-fonts/Inter') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Josefin Sans',\n    load: () => import('@remotion/google-fonts/JosefinSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Jost',\n    load: () => import('@remotion/google-fonts/Jost') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Kanit',\n    load: () => import('@remotion/google-fonts/Kanit') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Karla',\n    load: () => import('@remotion/google-fonts/Karla') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Lato',\n    load: () => import('@remotion/google-fonts/Lato') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Lexend',\n    load: () => import('@remotion/google-fonts/Lexend') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Libre Baskerville',\n    load: () => import('@remotion/google-fonts/LibreBaskerville') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Libre Franklin',\n    load: () => import('@remotion/google-fonts/LibreFranklin') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Lobster',\n    load: () => import('@remotion/google-fonts/Lobster') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Lora',\n    load: () => import('@remotion/google-fonts/Lora') as Promise<GoogleFont>,\n  },\n  {\n    family: 'M PLUS Rounded 1c',\n    load: () => import('@remotion/google-fonts/MPLUSRounded1c') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Manrope',\n    load: () => import('@remotion/google-fonts/Manrope') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Maven Pro',\n    load: () => import('@remotion/google-fonts/MavenPro') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Merriweather',\n    load: () => import('@remotion/google-fonts/Merriweather') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Montserrat',\n    load: () => import('@remotion/google-fonts/Montserrat') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Mukta',\n    load: () => import('@remotion/google-fonts/Mukta') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Mulish',\n    load: () => import('@remotion/google-fonts/Mulish') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Nanum Gothic',\n    load: () => import('@remotion/google-fonts/NanumGothic') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Color Emoji',\n    load: () => import('@remotion/google-fonts/NotoColorEmoji') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans',\n    load: () => import('@remotion/google-fonts/NotoSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans Arabic',\n    load: () => import('@remotion/google-fonts/NotoSansArabic') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans HK',\n    load: () => import('@remotion/google-fonts/NotoSansHK') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans JP',\n    load: () => import('@remotion/google-fonts/NotoSansJP') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans KR',\n    load: () => import('@remotion/google-fonts/NotoSansKR') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans SC',\n    load: () => import('@remotion/google-fonts/NotoSansSC') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans TC',\n    load: () => import('@remotion/google-fonts/NotoSansTC') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Serif',\n    load: () => import('@remotion/google-fonts/NotoSerif') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Serif JP',\n    load: () => import('@remotion/google-fonts/NotoSerifJP') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Nunito',\n    load: () => import('@remotion/google-fonts/Nunito') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Nunito Sans',\n    load: () => import('@remotion/google-fonts/NunitoSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Open Sans',\n    load: () => import('@remotion/google-fonts/OpenSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Oswald',\n    load: () => import('@remotion/google-fonts/Oswald') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Outfit',\n    load: () => import('@remotion/google-fonts/Outfit') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Overpass',\n    load: () => import('@remotion/google-fonts/Overpass') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Oxygen',\n    load: () => import('@remotion/google-fonts/Oxygen') as Promise<GoogleFont>,\n  },\n  {\n    family: 'PT Sans',\n    load: () => import('@remotion/google-fonts/PTSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'PT Sans Narrow',\n    load: () => import('@remotion/google-fonts/PTSansNarrow') as Promise<GoogleFont>,\n  },\n  {\n    family: 'PT Serif',\n    load: () => import('@remotion/google-fonts/PTSerif') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Pacifico',\n    load: () => import('@remotion/google-fonts/Pacifico') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Play',\n    load: () => import('@remotion/google-fonts/Play') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Playfair Display',\n    load: () => import('@remotion/google-fonts/PlayfairDisplay') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Poppins',\n    load: () => import('@remotion/google-fonts/Poppins') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Prompt',\n    load: () => import('@remotion/google-fonts/Prompt') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Public Sans',\n    load: () => import('@remotion/google-fonts/PublicSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Quicksand',\n    load: () => import('@remotion/google-fonts/Quicksand') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Rajdhani',\n    load: () => import('@remotion/google-fonts/Rajdhani') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Raleway',\n    load: () => import('@remotion/google-fonts/Raleway') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Red Hat Display',\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing the Play/Pause Button in Remotion Player with TypeScript\nDESCRIPTION: This snippet demonstrates how to provide a custom Play/Pause button implementation for the Remotion Player using the `renderPlayPauseButton` prop. It defines a React functional component `App` that uses the `useCallback` hook to memoize the rendering function. This function receives `playing` and `isBuffering` (since v4.0.111) states as arguments and returns a custom React element (`MySpinner`, `MyPlayButton`, or `MyPauseButton`) based on the current player state. Returning `null` (since v4.0.111) falls back to the default UI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"App.tsx\"\nconst MyPlayButton: React.FC = () => null;\nconst MyPauseButton: React.FC = () => null;\nconst MySpinner: React.FC = () => null;\nconst MyVideo: React.FC = () => null;\n// ---cut---\nimport {Player, RenderPlayPauseButton} from '@remotion/player';\nimport {useCallback} from 'react';\n\nexport const App: React.FC = () => {\n  const renderPlayPauseButton: RenderPlayPauseButton = useCallback(({playing, isBuffering}) => {\n    // Since v4.0.111, isBuffering is available\n    if (playing && isBuffering) {\n      return <MySpinner />;\n    }\n\n    if (playing) {\n      return <MyPlayButton />;\n    }\n\n    return <MyPauseButton />;\n  }, []);\n\n  return <Player component={MyVideo} durationInFrames={120} compositionWidth={1920} compositionHeight={1080} fps={30} renderPlayPauseButton={renderPlayPauseButton} />;\n}; \n```\n```\n\n----------------------------------------\n\nTITLE: Passing Input Props to Remotion Still Render on Cloud Run (Shell)\nDESCRIPTION: Demonstrates rendering a still ('tiles') from a site ('test-site') while passing input properties using the `--props` flag. The properties are provided as a serialized JSON string. The `--service-name` flag specifies the target service.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/still.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun still test-site tiles --service-name=remotion--3-3-82--mem512mi--cpu1-0--t-800 --props='{\"hi\": \"there\"}'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declaration File for GLSL Module Imports\nDESCRIPTION: Provides a module declaration for importing .glsl files as strings in TypeScript, ensuring type safety and proper handling during imports. Intended for projects using the GLSL Webpack override and TypeScript. No dependencies other than a TypeScript environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.glsl' {\n  const value: string;\n  export default value;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Chromium OpenGL Renderer for Remotion - TypeScript\nDESCRIPTION: This configuration snippet sets the OpenGL renderer for Chromium to 'angle' using Remotion's CLI config API in a TypeScript environment. The Config.setChromiumOpenGlRenderer('angle') method ensures proper rendering for Three.js when using Remotion's local rendering workflows. Requires importing the Config module from '@remotion/cli/config'. Should be placed in the config file of a Remotion project. Input: none. Output: configures Chromium's GL mode to 'angle'. Limitation: does not affect server-side rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/three.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\nConfig.setChromiumOpenGlRenderer('angle');\n```\n\n----------------------------------------\n\nTITLE: Applying Interpolated Spring Value to Style in React/TSX\nDESCRIPTION: Shows how to apply the result of an interpolated spring animation (`marginLeft`) to the `style` prop of an HTML element (a `div`) within a React functional component. This connects the calculated animation value to the visual presentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// @include: example-spring\nconst marginLeft = interpolate(driver, [0, 1], [0, 200]);\n// ---cut---\nconst Component: React.FC = () => <div style={{ marginLeft }}></div>;\n```\n\n----------------------------------------\n\nTITLE: Correctly Importing Assets for Remotion <Img> Component in TSX\nDESCRIPTION: Contrasts the correct and incorrect ways to provide the `src` prop to the Remotion `<Img>` component. The correct method involves importing the asset (e.g., `import hi from './hi.png'`) and passing the imported variable to `src`. Providing a direct string path (`src=\"./hi.png\"`) is discouraged and flagged by a new ESLint rule introduced in version 1.4, as Remotion relies on the import mechanism for asset bundling and management.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-26-remotion-1-4.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {Img} from 'remotion';\nimport hi from './hi.png';\n\n// ✅ Correct: Using an import statement\n<Img src={hi} />\n\n// ⚠️ Warning since 1.4: Import the asset instead\n<Img src=\"./hi.png\"/>\n```\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Passing Component Directly to Player in Remotion (TypeScript)\nDESCRIPTION: This snippet demonstrates the correct pattern for using the Remotion <Player> by passing the target component (AnotherComp) directly to the component prop of Player, instead of wrapping it in a <Composition>. Only video parameters are provided alongside the component, and no Composition component is mounted within. Dependencies: @remotion/player. Expected parameters are duration, fps, width, height, and the component. Input is the component to be played, and output is a correctly configured Remotion Player instance.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/wrong-composition-mount.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Player } from \"@remotion/player\";\n\nconst AnotherComp: React.FC = () => {\n  return null;\n};\n\n// ---cut---\n\nconst Index: React.FC = () => {\n  return (\n    <Player\n      durationInFrames={300}\n      fps={30}\n      compositionWidth={1080}\n      compositionHeight={1080}\n      component={AnotherComp}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Server-Side Bundling of Remotion Projects using bundle() - TypeScript\nDESCRIPTION: Shows how to use Remotion's bundle() function to generate a bundled version of a video composition for server-side rendering. Imports path and bundle, then asynchronously runs bundle pointing at the project's Remotion entry index file. Requires @remotion/bundler and Node.js environment. Input is a file path, output is a bundle result. Useful for SSR or Lambda deployments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport path from 'path';\nimport {bundle} from '@remotion/bundler';\n\nconst bundled = await bundle(path.join(process.cwd(), 'src', 'remotion', 'index.ts'));\n```\n\n----------------------------------------\n\nTITLE: Trimming the Start of a Video in Remotion with OffthreadVideo (TypeScript)\nDESCRIPTION: This snippet demonstrates how to skip the first N frames of a video using the startFrom prop on OffthreadVideo in Remotion, within a React functional component. It depends on remotion and React, and expects the video in the public folder. The startFrom parameter defines the frame index to begin playback. For a composition with 30 FPS, startFrom={60} skips the first two seconds.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return <OffthreadVideo src={staticFile('video.mp4')} startFrom={60} />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Using deploySite() to Deploy a Remotion Project (TypeScript)\nDESCRIPTION: This example demonstrates how to use the deploySite function from @remotion/cloudrun to bundle and upload a Remotion project. It specifies the project entry point (resolved using 'path'), the target Google Cloud Storage bucket name, and includes optional callbacks ('onBundleProgress', 'onUploadProgress') within the 'options' object to monitor bundling and upload progress respectively. The function returns an object containing the 'serveUrl', which is then logged to the console. Requires the '@remotion/cloudrun' package and 'path' module.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/deploysite.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {deploySite} from '@remotion/cloudrun';\nimport path from 'path';\n\nconst {serveUrl} = await deploySite({\n  entryPoint: path.resolve(process.cwd(), 'src/index.ts'),\n  bucketName: 'remotioncloudrun-c7fsl3d',\n  options: {\n    onBundleProgress: (progress) => {\n      // Progress is between 0 and 100\n      console.log(`Bundle progress: ${progress}%`);\n    },\n    onUploadProgress: ({totalFiles, filesUploaded, totalSize, sizeUploaded}) => {\n      console.log(`Upload progress: Total files ${totalFiles}, Files uploaded ${filesUploaded}, Total size ${totalSize}, Size uploaded ${sizeUploaded}`);\n    },\n  },\n});\nconsole.log(serveUrl);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Loop in Remotion (TSX)\nDESCRIPTION: Demonstrates the basic usage of the Remotion <Loop> component. It wraps a BlueSquare component and makes it loop twice (times={2}), with each iteration lasting 50 frames (durationInFrames={50}). This requires importing the Loop component from 'remotion' and the previously defined BlueSquare component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/loop.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComp.tsx\"\n// @include: example-BlueSquare\nimport { Loop } from \"remotion\";\n// ---cut---\nconst MyComp = () => {\n  return (\n    <Loop durationInFrames={50} times={2}>\n      <BlueSquare />\n    </Loop>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Dataset in TypeScript\nDESCRIPTION: Defines a sample dataset as a TypeScript array of objects. Each object represents the data for one video and contains properties like `name`, `repo`, and `logo`. This data will be passed as props to the Remotion component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport const data = [\n  {\n    name: 'React',\n    repo: 'facebook/react',\n    logo: 'https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg',\n  },\n  {\n    name: 'Remotion',\n    repo: 'remotion-dev/remotion',\n    logo: 'https://github.com/remotion-dev/logo/raw/main/withouttitle/element-0.png',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Transcribing Audio with Whisper.cpp in TypeScript\nDESCRIPTION: Demonstrates how to use the transcribe() function from @remotion/install-whisper-cpp to convert a local .wav audio file to text, specifying custom parameters such as the Whisper.cpp installation path, model, and options for token-level timestamps. The example expects Whisper.cpp (v1.5.5 or later) to be installed, and the model referenced to be available locally. This code requires Node.js, TypeScript, and the appropriate dependencies installed via npm. The resulting transcription array contains word-level timestamp data, which is then logged. Inputs include paths to audio and model; output is a structured transcription object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/install-whisper-cpp/transcribe.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\\nimport {transcribe} from '@remotion/install-whisper-cpp';\\n\\nconst {transcription} = await transcribe({\\n  inputPath: '/path/to/audio.wav',\\n  whisperPath: path.join(process.cwd(), 'whisper.cpp'),\\n  whisperCppVersion: '1.5.5',\\n  model: 'medium.en',\\n  tokenLevelTimestamps: true,\\n});\\n\\nfor (const token of transcription) {\\n  console.log(token.timestamps.from, token.timestamps.to, token.text);\\n}\n```\n\n----------------------------------------\n\nTITLE: Computing and Passing Composition Metadata Programmatically for Player - TypeScript/React\nDESCRIPTION: This code sample illustrates calling a reusable calculateMetadata function—compatible with Remotion's CalculateMetadataFunction signature—in a browser context to assemble the necessary metadata before passing it to the <Player> component. It uses useEffect to trigger metadata calculation and useState to store the result. Props and static metadata values are set in calculateMetadataFunction; the output is passed as a single object to Player, ensuring full synchronization between browser and server composition definitions. Dependencies include React, Remotion types/interfaces, and '@remotion/player'. Type definitions for Props and Metadata are explicitly included.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-metadata.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useEffect, useState} from 'react';\nimport {CalculateMetadataFunction} from 'remotion';\n\nconst VideoTesting: React.FC = () => null;\n\n// ---cut---\nimport {Player} from '@remotion/player';\n\ntype Props = {};\n\nconst calculateMetadataFunction: CalculateMetadataFunction<Props> = () => {\n  return {\n    props: {},\n    durationInFrames: 1,\n    width: 100,\n    height: 100,\n    fps: 30,\n  };\n};\n\ntype Metadata = {\n  durationInFrames: number;\n  compositionWidth: number;\n  compositionHeight: number;\n  fps: number;\n  props: Props;\n};\n\nexport const Index: React.FC = () => {\n  const [metadata, setMetadata] = useState<Metadata | null>(null);\n\n  useEffect(() => {\n    Promise.resolve(\n      calculateMetadataFunction({\n        defaultProps: {},\n        props: {},\n        abortSignal: new AbortController().signal,\n        compositionId: 'MyComp',\n      }),\n    )\n      .then(({durationInFrames, props, width, height, fps}) => {\n        setMetadata({\n          durationInFrames: durationInFrames as number,\n          compositionWidth: width as number,\n          compositionHeight: height as number,\n          fps: fps as number,\n          props: props as Props,\n        });\n      })\n      .catch((err) => {\n        console.log(`Error fetching metadata: ${err}`);\n      });\n  }, []);\n\n  if (!metadata) {\n    return null;\n  }\n\n  return <Player component={VideoTesting} {...metadata} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Volume Control (Ramp Up) for <Video> in Remotion (TSX)\nDESCRIPTION: This snippet demonstrates dynamic volume control for the Remotion `<Video>` component using a function passed to the `volume` prop. It utilizes the `interpolate` function from Remotion to create a volume ramp-up effect over the first 100 frames, increasing the volume linearly from 0 to 1. The `extrapolateLeft: 'clamp'` option ensures the volume stays at 0 before frame 0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, interpolate, staticFile, Video} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video volume={(f) => interpolate(f, [0, 100], [0, 1], {extrapolateLeft: 'clamp'})} src={staticFile('video.webm')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Extracting Audio Data Using getAudioData with Remotion (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use @remotion/media-utils's getAudioData function in a TypeScript/React Remotion project to obtain waveform and metadata details from various audio sources. Dependencies required are @remotion/media-utils, remotion, and valid media files or URLs supporting necessary CORS configurations if remote. The getAudioData call accepts a src (string or imported file) and returns a Promise with waveform arrays, sample rate, duration, channels, result ID, and a Boolean indicating remote status. Inputs are audio file references (local, imported, or URL). Outputs include waveform data and metadata in a structured object. Caching is performed per source and errors must be handled for sources without audio tracks. This code is cross-platform for Remotion environments and must be executed in an async context.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-audio-data.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Audio, staticFile} from 'remotion';\n// ---cut---\nimport {getAudioData} from '@remotion/media-utils';\nimport music from './music.mp3';\n\nawait getAudioData(music); /* {\n  channelWaveforms: [Float32Array(4410000), Float32Array(4410000)],\n  sampleRate: 44100,\n  durationInSeconds: 100.0000,\n  numberOfChannels: 2,\n  resultId: \"0.432878981\",\n  isRemote: false\n} */\nawait getAudioData('https://example.com/remote-audio.aac'); /* {\n  channelWaveforms: [Float32Array(4800000)],\n  sampleRate: 48000,\n  durationInSeconds: 100.0000,\n  numberOfChannels: 1,\n  resultId: \"0.432324444\",\n  isRemote: true\n} */\nawait getAudioData(staticFile('my-file.wav')); /* {\n  channelWaveforms: [Float32Array(4800000)],\n  sampleRate: 48000,\n  durationInSeconds: 100.0000,\n  numberOfChannels: 1,\n  resultId: \"0.6891332223\",\n  isRemote: false\n} */\n```\n\n----------------------------------------\n\nTITLE: Measuring Spring Animation Duration with Remotion in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the measureSpring function from Remotion to determine how many frames it takes for a spring animation to settle. The code sets a custom damping configuration and invokes measureSpring with a specified frame-per-second (fps) value and configuration object. Input parameters include a 'config' object for spring stiffness and damping, and 'fps' for timing; the output is the number of frames until the animation is considered complete according to Remotion's threshold. Remotion package (v2.0.8+) is required, and optional arguments allow for threshold adjustment and changing the start/end animation values.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/measure-spring.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { measureSpring, SpringConfig } from \\\"remotion\\\";\n\nconst config: Partial<SpringConfig> = {\n  damping: 200,\n};\n\nmeasureSpring({\n  fps: 30,\n  config: {\n    damping: 200,\n  },\n}); // => 23\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Remotion Lambda and Custom S3 Output - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to call the Remotion Lambda SDK\\'s renderMediaOnLambda() function to render a video through a Lambda execution role. It specifies a custom S3 output bucket (using the outName property) for the rendered video. Dependencies: @remotion/lambda/client must be installed, and the Lambda function must have appropriate IAM permissions for both rendering and S3 bucket access. The function expects configuration for AWS region, Lambda function name, video composition, serve URL, codec, and an outName object specifying the output bucket and key. It returns an object containing the target bucket name and render ID. Ensure the Lambda role has permissions to write to the destination bucket.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {renderMediaOnLambda} from '@remotion/lambda/client';\\n\\nconst {bucketName, renderId} = await renderMediaOnLambda({\\n  region: 'us-east-1',\\n  functionName: 'remotion-render-bds9aab',\\n  composition: 'MyVideo',\\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\\n  codec: 'h264',\\n  outName: {\\n    key: 'my-output',\\n    bucketName: 'output-bucket',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing SRT Files with Remotion in TypeScript\nDESCRIPTION: This snippet demonstrates importing the parseSrt function from the @remotion/captions package, taking as input a SubRip subtitle string, and extracting an array of caption objects with computed timing and confidence properties. The input to parseSrt is expected to be a string formatted as .srt content, and the output is an object containing a captions array with itemized caption metadata. Dependencies include the @remotion/captions package and valid SRT data as input. The expected output is an array of Caption objects with start and end times, confidence scores, and text; malformed SRT input or missing fields may result in parsing errors or empty output.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/captions/parse-srt.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseSrt} from '@remotion/captions';\\n\\nconst input = `\\n1\\n00:00:00,000 --> 00:00:02,500\\nWelcome to the Example Subtitle File!\\n\\n2\\n00:00:03,000 --> 00:00:06,000\\nThis is a demonstration of SRT subtitles.\\n\\n3\\n00:00:07,000 --> 00:00:10,500\\nYou can use SRT files to add subtitles to your videos.\\n`.trim();\\n\\nconst {captions} = parseSrt({input});\\n\\n/* captions = [\\n  {\\n    confidence: 1,\\n    endMs: 2500,\\n    startMs: 0,\\n    text: 'Welcome to the Example Subtitle File!',\\n    timestampMs: 1250,\\n  },\\n  {\\n    confidence: 1,\\n    endMs: 6000,\\n    startMs: 3000,\\n    text: 'This is a demonstration of SRT subtitles.',\\n    timestampMs: 4500,\\n  },\\n  {\\n    confidence: 1,\\n    endMs: 10500,\\n    startMs: 7000,\\n    text: 'You can use SRT files to add subtitles to your videos.',\\n    timestampMs: 8750,\\n  },\\n]\\n*/\n```\n\n----------------------------------------\n\nTITLE: Debouncing Expensive API Requests in Remotion using waitForNoInput (TypeScript)\nDESCRIPTION: This code exports a waitForNoInput helper that debounces processing: it resolves only if no abort occurs for a specified delay. Intended to wrap metadata fetches so that requests only fire after the user stops changing inputs briefly. Relies on Remotion utilities and browser AbortSignal; requires Remotion and TypeScript. Inputs: an AbortSignal and a debounce delay ms. Returns: Promise resolves (or rejects if aborted). Not for binary assets.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport { getRemotionEnvironment } from \"remotion\";\nexport const waitForNoInput = (signal: AbortSignal, ms: number) => {\n  // Don't wait during rendering\n  if (getRemotionEnvironment().isRendering) {\n    return Promise.resolve();\n  }\n\n  if (signal.aborted) {\n    return Promise.reject(new Error(\"stale\"));\n  }\n\n  return Promise.race<void>([\n    new Promise<void>((_, reject) => {\n      signal.addEventListener(\"abort\", () => {\n        reject(new Error(\"stale\"));\n      });\n    }),\n    new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    }),\n  ]);\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Remotion Cloud Run Permissions - Bash\nDESCRIPTION: This snippet uses the Remotion CLI to verify that the proper permissions have been configured in GCP for Cloud Run. Requires Remotion CLI (installed via npx or globally), a completed setup, and the relevant .env populated as per previous steps. Input is managed by the CLI; output is a validation report indicating if the permissions are set up correctly for the current configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/generate-env.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun policies validate\n```\n\n----------------------------------------\n\nTITLE: React Component: Fixing SVG Path Cutoff with extendViewBox() and Scale (TSX)\nDESCRIPTION: Shows how to resolve the path cutoff issue demonstrated in the previous example using `extendViewBox`. This updated React component `ViewBoxExample` calls `extendViewBox` with the original viewBox ('0 0 1000 1000') and a factor of 2. To counteract the visual scaling down caused by widening the viewBox, a corresponding CSS `scale: \"2\"` style is applied to the SVG element, ensuring the full path (0 500 to 1500 500) is rendered visibly within the component's bounds. Requires React and the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/extend-viewbox.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { extendViewBox } from \"@remotion/paths\";\n\nconst viewBox = \"0 0 1000 1000\";\n\nexport const ViewBoxExample: React.FC = () => {\n  return (\n    <svg style={{ scale: \"2\" }} viewBox={extendViewBox(viewBox, 2)}>\n      <path d={\"0 500 1500 500\"} stroke=\"black\" strokeWidth={4} />\n    </svg>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Restarting Remotion Studio with restartStudio() in a React Component (TypeScript)\nDESCRIPTION: This React component demonstrates how to use the `restartStudio()` function from `@remotion/studio`. An asynchronous `onClick` handler, memoized with `useCallback`, calls `restartStudio()` when the button is clicked. The function call is wrapped in a `try...catch` block to handle potential errors, which occur if the function is called outside the Remotion Studio or if the Studio is statically deployed. The function returns a promise that resolves when the restart command is successfully sent. Dependencies include `react` and `@remotion/studio`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/restart-studio.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComp.tsx\"\nimport { restartStudio } from \"@remotion/studio\";\nimport { useCallback } from \"react\";\n\nconst MyComp: React.FC = () => {\n  const onClick = useCallback(async () => {\n    try {\n      await restartStudio();\n      console.log(\"Studio will restart now\");\n    } catch (err) {\n      console.error(err);\n    }\n  }, []);\n\n  return (\n    <button type=\"button\" onClick={onClick}>\n      Hello World\n    </button>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Still on Cloud Run Using Site Name (Shell)\nDESCRIPTION: Example command showing an alternative way to render a still ('tiles') by providing the site name ('test-site') instead of the full serve URL. The `--service-name` flag is used to specify the target Cloud Run service.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/still.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun still test-site tiles --service-name=remotion--3-3-82--mem512mi--cpu1-0--t-800\n```\n\n----------------------------------------\n\nTITLE: Reading Video Track Frames with onVideoTrack Callback using Remotion Media Parser in TypeScript\nDESCRIPTION: This snippet demonstrates the advanced onVideoTrack callback mechanism of parseMedia. It sets up a callback (OnVideoTrack) that is invoked when a video track is detected during parsing. Inside the callback, each video sample is processed into an EncodedVideoChunk. Dependencies include @remotion/media-parser and a compatible environment supporting the EncodedVideoChunk API. Useful for low-level analysis or custom processing of video frames.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/parse-media.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia, OnVideoTrack} from '@remotion/media-parser';\\n\\nconst onVideoTrack: OnVideoTrack = ({track}) => {\\n  console.log(track);\\n\\n  return (sample) => {\\n    console.log(new EncodedVideoChunk(sample));\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Loading All Variants of a Google Font Using loadFont - TypeScript & React\nDESCRIPTION: Demonstrates how to load all styles, weights, and subsets of the Lobster font using the loadFont() method from @remotion/google-fonts/Lobster. This code imports the font loader and the AbsoluteFill component, and then extracts the fontFamily from the loader's return value to assign to the CSS style. Dependencies include React, Remotion, and the relevant Google Fonts package for the desired font. Inputs: none are required, as loadFont() is called without arguments. Output: A React component styled with the fetched Google font. Useful for scenarios where a developer wants the full font family available in their Remotion video.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/load-font.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {loadFont} from '@remotion/google-fonts/Lobster';\nimport {AbsoluteFill} from 'remotion';\n\nconst {fontFamily} = loadFont();\n\nexport const GoogleFontsExample: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        fontFamily: fontFamily,\n      }}\n    >\n      <h1>Google Fonts</h1>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Building a Remotion GPU-Ready Docker Image - Dockerfile\nDESCRIPTION: Defines a Dockerfile for constructing a Node.js (20-bookworm) image with CUDA-enabled dependencies for Remotion GPU rendering. Includes system updates, installs curl, gnupg, and git, clones the sample repo, installs npm dependencies, and sets the entrypoint to a shell script. Prerequisites include an accessible Remotion repository and Docker environment; outputs an image ready for GPU-powered video rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM node:20-bookworm\nRUN apt-get update\nRUN apt-get install -y curl gnupg git\nRUN rm -rf /var/lib/apt/lists/*\n\n# Clone the repo\nRUN git clone https://github.com/remotion-dev/gpu-scene.git\nWORKDIR /gpu-scene\nRUN npm install\n\n# Copy the entrypoint script into the image\nCOPY entrypoint.sh .\n\nCMD [\"sh\", \"./entrypoint.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Composing an Animated Explosion with Trail in Remotion TypeScript\nDESCRIPTION: This snippet demonstrates combining Explosion, Trail, Shrinking, and Dot components to create a complex animated composition. MyComposition arranges an animated circular trail of dots as part of the main scene, illustrating nested animation and component re-use in Remotion for modular animation design. It uses react and remotion, with the props for each nested component as above.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @filename: Move.tsx\\nexport const Move: React.FC<{\\n  children: React.ReactNode;\\n  delay: number;\\n}> = () => null;\\n// @filename: Shrinking.tsx\\nexport const Shrinking: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n// @filename: Explosion.tsx\\nexport const Explosion: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n// @filename: Background.tsx\\nexport const Background: React.FC<{}> = () => null;\\n// @filename: Dot.tsx\\nexport const Dot: React.FC<{}> = () => null;\\n// @filename: Trail.tsx\\nexport const Trail: React.FC<{\\n  children: React.ReactNode;\\n  amount: number;\\n}> = () => null;\\n\\n// @filename: MyComposition.tsx\\n// ---cut---\\nimport React from 'react';\\nimport {AbsoluteFill} from 'remotion';\\nimport {Background} from './Background';\\nimport {Dot} from './Dot';\\nimport {Explosion} from './Explosion';\\nimport {Shrinking} from './Shrinking';\\nimport {Trail} from './Trail';\\n// ---cut---\\n\\nexport const MyComposition = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Background />\\n      <Explosion>\\n        <Trail amount={4}>\\n          <Shrinking>\\n            <Dot />\\n          </Shrinking>\\n        </Trail>\\n      </Explosion>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding the SupportedAudioCodecTable Component (JSX)\nDESCRIPTION: This snippet embeds the SupportedAudioCodecTable React component as a block within Markdown content. It displays a table summarizing compatible audio codecs for different container formats and video codecs, allowing users to quickly reference which combinations are valid. Requires the component to be available in scope.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/encoding.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SupportedAudioCodecTable />\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Google Fonts in TypeScript\nDESCRIPTION: This TypeScript snippet defines an array containing objects for font configuration. Each object specifies a font `name` (e.g., 'ZillaSlab') and a `load` function. The `load` function uses dynamic `import()` to lazy-load a specific Google Font module ('@remotion/google-fonts/ZillaSlab') and asserts the result as a `Promise<GoogleFont>`. This pattern is commonly used in Remotion projects for efficient font loading.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/font-picker.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\n[\n  {\n    name: 'ZillaSlab',\n    // Reference: https://github.com/remotion-dev/remotion/blob/main/packages/google-fonts/README.md#lazy-loading-fonts\n    load: () => import('@remotion/google-fonts/ZillaSlab') as Promise<GoogleFont>,\n  },\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Interpolating CSS Color Names with Remotion interpolateColors() in TypeScript\nDESCRIPTION: Provides a basic example of using `interpolateColors` in TypeScript to interpolate between two CSS color names ('red' and 'yellow') based on the current frame number over the range [0, 20]. Imports `interpolateColors` and `useCurrentFrame` from 'remotion'. The result is an `rgba` color string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate-colors.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n```ts twoslash\nimport { useCurrentFrame, interpolateColors } from \"remotion\";\n\nconst frame = useCurrentFrame(); // 10\n\nconst color = interpolateColors(frame, [0, 20], [\"red\", \"yellow\"]); // rgba(255, 128, 0, 1)\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Google Fonts with Remotion Package in TypeScript\nDESCRIPTION: Demonstrates importing and using the type-safe @remotion/google-fonts loader to retrieve and apply a Google Font in a React component. `@remotion/google-fonts/TitanOne` is required as a dependency, and the snippet expects a React rendering context. The imported `loadFont()` function outputs a CSS font family name, which is then applied inline to a React element. This method eliminates the need for writing manual CSS or handling font loading side-effects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/fonts.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { loadFont } from \"@remotion/google-fonts/TitanOne\";\n\nconst { fontFamily } = loadFont();\n\nconst GoogleFontsComp: React.FC = () => {\n  return <div style={{ fontFamily }}>Hello, Google Fonts</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Sine Tone with AudioBuffer and Remotion Audio Component (TypeScript/React)\nDESCRIPTION: This snippet provides a full React component that generates a stereo sine wave audio buffer at C4 pitch (261.63 Hz) and renders it in a Remotion composition using the <Audio /> component. It uses @remotion/media-utils for audio buffer conversion, Remotion hooks for controlling video rendering, and the Web Audio OfflineAudioContext API for procedural audio generation. The composition handles asynchronous audio rendering with delayRender and continueRender hooks, takes care of cleanup on errors, and demonstrates dynamic audio volume interpolation. Required dependencies include React, Remotion, and @remotion/media-utils.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audiobuffertodataurl.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { audioBufferToDataUrl } from \"@remotion/media-utils\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport {\n  Audio,\n  cancelRender,\n  continueRender,\n  delayRender,\n  interpolate,\n  useVideoConfig,\n} from \"remotion\";\n\nconst C4_FREQUENCY = 261.63;\nconst sampleRate = 44100;\n\nexport const OfflineAudioBufferExample: React.FC = () => {\n  const [handle] = useState(() => delayRender());\n  const [audioBuffer, setAudioBuffer] = useState<string | null>(null);\n  const { fps, durationInFrames } = useVideoConfig();\n  const lengthInSeconds = durationInFrames / fps;\n\n  const renderAudio = useCallback(async () => {\n    const offlineContext = new OfflineAudioContext({\n      numberOfChannels: 2,\n      length: sampleRate * lengthInSeconds,\n      sampleRate,\n    });\n    const oscillatorNode = offlineContext.createOscillator();\n    const gainNode = offlineContext.createGain();\n    oscillatorNode.connect(gainNode);\n    gainNode.connect(offlineContext.destination);\n    gainNode.gain.setValueAtTime(0.5, offlineContext.currentTime);\n\n    oscillatorNode.type = \"sine\";\n    oscillatorNode.frequency.value = C4_FREQUENCY;\n\n    const { currentTime } = offlineContext;\n    oscillatorNode.start(currentTime);\n    oscillatorNode.stop(currentTime + lengthInSeconds);\n\n    const buffer = await offlineContext.startRendering();\n    setAudioBuffer(audioBufferToDataUrl(buffer));\n\n    continueRender(handle);\n  }, [handle, lengthInSeconds]);\n\n  useEffect(() => {\n    renderAudio().catch((err) => cancelRender(err));\n  }, [renderAudio]);\n\n  return audioBuffer ? (\n    <Audio\n      src={audioBuffer}\n      startFrom={0}\n      endAt={100}\n      volume={(f) =>\n        interpolate(f, [0, 50, 100], [0, 1, 0], {\n          extrapolateLeft: \"clamp\",\n          extrapolateRight: \"clamp\",\n        })\n      }\n    />\n  ) : null;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering RenderButton with Inline Styles - React JSX\nDESCRIPTION: This snippet demonstrates importing the RenderButton React component from a specified path and rendering it within a styled <div> layout. The RenderButton is used to provide users with a clickable export button in the Remotion Studio UI. Dependencies include React (JSX) environment and access to the RenderButton component; parameters such as display, flexDirection, and alignItems on the style attribute control the layout. The expected result is a horizontal alignment of explanatory text, the export button, and additional UI elements. The snippet requires proper project structure and that '../../components/recorder/RenderButton' exists. There are no explicit input parameters beyond those passed via UI interaction, and outputs are managed via the component's internal logic.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/exporting.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { RenderButton } from \"../../components/recorder/RenderButton\";\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\n  <div> The easiest way to export your video is to click </div>\n  <RenderButton /> <div>\n    in the <a href=\"/docs/studio\">Remotion Studio</a>.\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the useLoop Hook in Remotion (TSX)\nDESCRIPTION: Illustrates how a child component can use the `Loop.useLoop()` hook to access information about the enclosing loop. The hook returns null if not inside a loop, otherwise it returns an object containing `durationInFrames` (the loop's duration) and `iteration` (the current loop iteration number, starting from 0). The example shows checking for null and accessing these properties.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/loop.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport React from \"react\";\nimport { Loop, useCurrentFrame } from \"remotion\";\n\nconst LoopedVideo: React.FC = () => {\n  return (\n    <Loop durationInFrames={50} times={3} name=\"MyLoop\">\n      <Child />\n    </Loop>\n  );\n};\n\nconst Child = () => {\n  const frame = useCurrentFrame(); // 75\n  const loop = Loop.useLoop();\n\n  if (loop === null) {\n    // Not inside a loop\n  } else {\n    console.log(loop.durationInFrames); // 50\n    console.log(loop.iteration); // 1\n  }\n\n  return <div>{frame}</div>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Combining Debounce and Abort Logic in Remotion calculateMetadata (TypeScript)\nDESCRIPTION: This example employs waitForNoInput with abortSignal inside calculateMetadata, so that metadata is fetched only after no input for 750ms, and stale requests are cancelled promptly. It is best for rate-limiting expensive API calls in responsive editors. Depends on Remotion, React, and the waitForNoInput utility. Inputs: props, abortSignal; outputs: updated props with API data, debounced and abort-aware.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport { CalculateMetadataFunction, getRemotionEnvironment } from \"remotion\";\n\nconst waitForNoInput = (signal: AbortSignal, ms: number) => {\n  // Don't wait during rendering\n  if (getRemotionEnvironment().isRendering) {\n    return Promise.resolve();\n  }\n\n  if (signal.aborted) {\n    return Promise.reject(new Error(\"stale\"));\n  }\n\n  return Promise.race<void>([\n    new Promise<void>((_, reject) => {\n      signal.addEventListener(\"abort\", () => {\n        reject(new Error(\"stale\"));\n      });\n    }),\n    new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    }),\n  ]);\n};\n\ntype ApiResponse = {\n  title: string;\n  description: string;\n};\ntype MyCompProps = {\n  id: string;\n  data: ApiResponse | null;\n};\n\n// ---cut---\nexport const calculateMyCompMetadata: CalculateMetadataFunction<\n  MyCompProps\n> = async ({ props, abortSignal }) => {\n  await waitForNoInput(abortSignal, 750);\n  const data = await fetch(`https://example.com/api/${props.id}`, {\n    signal: abortSignal,\n  });\n  const json = await data.json();\n\n  return {\n    props: {\n      ...props,\n      data: json,\n    },\n  };\n};\n\nexport const MyComp: React.FC<MyCompProps> = () => null;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Static File using deleteStaticFile in Remotion Studio (React, TypeScript)\nDESCRIPTION: This snippet demonstrates a React functional component in TypeScript that provides an interactive button for deleting a file (e.g., 'video.webm') from the Remotion Studio public directory using the deleteStaticFile API. It utilizes the useCallback hook for performance optimization and logs the result indicating whether the file existed before deletion. Dependencies include React, the Remotion Studio deleteStaticFile API, and an environment running Remotion Studio (v4.0.154 or later). Parameters: the relative path to the static file. Inputs: the file path as a string. Output: a result object with an 'existed' boolean. Limitation: can only delete files within the 'public' directory, and API calls must originate from Remotion Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/delete-static-file.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback } from \"react\";\nimport { deleteStaticFile } from \"@remotion/studio\";\n\nexport const DeleteStaticFileComp: React.FC = () => {\n  const deleteFile = useCallback(async () => {\n    const { existed } = await deleteStaticFile(\"video.webm\");\n\n    console.log(`Deleted file (${existed ? \"existed\" : \"did not exist\"})`);\n  }, []);\n\n  return <button onClick={deleteFile}>Delete</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/preload using Installation Component (JSX)\nDESCRIPTION: This snippet demonstrates how to include installation instructions for the `@remotion/preload` package within the documentation using a custom `<Installation>` component. The `pkg` prop specifies the package name '@remotion/preload'. This component likely renders the necessary command line instructions (e.g., npm install).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation pkg=\"@remotion/preload\"/>\n```\n\n----------------------------------------\n\nTITLE: Querying Remotion Cloud Run Services Using getServices() in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the getServices function from the @remotion/cloudrun/client package to retrieve a list of Remotion services deployed on GCP Cloud Run for a specific region, filtering to only those compatible with the installed version. It awaits the asynchronous API call, then iterates through the returned array to log key properties for each service such as serviceName, timeouts, memory, version, and URLs. Requires installation of the @remotion/cloudrun/client package, and proper configuration of Google Cloud credentials. The primary input is an object specifying the 'region' and the 'compatibleOnly' flag; output is an array of service detail objects. The snippet relies on ES2020+ syntax with async/await, and must be run in a Node.js environment that can handle ECMAScript modules.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/getservices.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getServices} from '@remotion/cloudrun/client';\\n\\nconst info = await getServices({\\n  region: 'us-east1',\\n  compatibleOnly: true,\\n});\\n\\nfor (const service of info) {\\n  console.log(service.serviceName); // \"remotion--3-3-82--mem512mi--cpu1-0\"\\n  console.log(service.timeoutInSeconds); // 300\\n  console.log(service.memoryLimit); // 512Mi\\n  console.log(service.cpuLimit); // 1.0\\n  console.log(service.remotionVersion); // \"4.0.1\"\\n  console.log(service.uri); // \"https://remotion--3-3-82--mem512mi--cpu1-0--t-300-1a2b3c4d5e-ue.a.run.app\"\\n  console.log(service.region); // \"us-east1\"\\n  console.log(service.consoleUrl); // \"https://console.cloud.google.com/run/detail/us-east1/remotion--3-3-82--mem512mi--cpu1-0--t-300/logs\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Audio Preload with Redirect Support in React and TypeScript\nDESCRIPTION: This TypeScript/React snippet demonstrates preloading an audio file by first resolving potential URL redirects with resolveRedirect() from @remotion/preload. If the redirect can be resolved (with CORS support), the resolved URL is preloaded; otherwise, the original URL is used. The snippet integrates React by showing how to use the resulting URL in a component using the <Audio> component from remotion. Inputs include the initial audio URL and asynchronous URL resolution, and the outputs are preloaded audio and correct playback. This approach is necessary for resources that may be redirected and/or subject to CORS constraints.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload-audio.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { preloadAudio, resolveRedirect } from \"@remotion/preload\";\nimport { Audio } from \"remotion\";\n\n// This code gets executed immediately once the page loads\nlet urlToLoad = \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\";\n\nresolveRedirect(urlToLoad)\n  .then((resolved) => {\n    // Was able to resolve a redirect, setting this as the audio to load\n    urlToLoad = resolved;\n  })\n  .catch((err) => {\n    // Was unable to resolve redirect e.g. due to no CORS support\n    console.log(\"Could not resolve redirect\", err);\n  })\n  .finally(() => {\n    // In either case, we try to preload the original or resolved URL\n    preloadAudio(urlToLoad);\n  });\n\n// This code only executes once the component gets mounted\nconst MyComp: React.FC = () => {\n  // If the component did not mount immediately, this will be the resolved URL.\n\n  // If the component mounted immediately, this will be the original URL.\n  // In that case preloading is ineffective anyway.\n  return <Audio src={urlToLoad}></Audio>;\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Emitting Artifact with Non-Unique Filename on Every Frame - Remotion Artifact - TypeScript/React\nDESCRIPTION: This TypeScript/React code snippet illustrates a mistake in artifact emission: the <Artifact> component is conditionally rendered on frame zero, but the explanatory note indicates this code could accidentally generate an asset on every frame if the condition is altered. Using a non-unique filename for multiple emission attempts across frames will throw an error, as Remotion requires unique filenames for each artifact. This highlights an important limitation: artifacts with duplicated filenames cannot be emitted across multiple frames.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifact.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Artifact, useCurrentFrame} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  const frame = useCurrentFrame();\\n\\n  return frame === 0 ? <Artifact filename=\\\"my-file.txt\\\" content=\\\"Hello World!\\\" /> : null;\\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Webpack Config for SCSS Support in Remotion - TypeScript\nDESCRIPTION: This snippet demonstrates how to override Remotion's Webpack configuration to enable SCSS/SASS support using the enableScss function from the @remotion/enable-scss package. Required dependencies include @remotion/enable-scss, sass@1.77.2, sass-loader@14.2.1, and css-loader@5.2.7—other versions may not be compatible. The Config.overrideWebpackConfig callback receives the current Webpack configuration and returns a modified configuration with SCSS handling enabled; it expects the project to be configured via remotion.config.ts and integrates directly into the Remotion CLI build pipeline.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/enable-scss/overview.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport {enableScss} from '@remotion/enable-scss';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableScss(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Cloud Run Site with a Specific Site Name - Bash\nDESCRIPTION: This snippet showcases using the Remotion CLI with the --site-name argument to upload a project to a named directory within Cloud Storage, thereby producing a deterministic and overwritable site URL. The command requires the entry point file path and a valid site name, adhering to specific character requirements. This helps manage site deployments by identification, and will overwrite any existing site with the same name and region.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/create.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites create src/index.ts --site-name=another-site\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.poly Function Factory Signature (JSX)\nDESCRIPTION: Provides the static method signature for the `Easing.poly` factory function. It accepts a number `n` and returns a polynomial easing function where the output position is proportional to the Nth power of the elapsed time (`f(t) = t^n`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nstatic poly(n): (t) => number\n```\n\n----------------------------------------\n\nTITLE: Enforcing Audio Track in Remotion Config (TypeScript)\nDESCRIPTION: Forces the rendering of a silent audio track even if the composition has no audio, using the `Config` object in `remotion.config.ts`. The default value is `false`. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v3.2.1. The `--enforce-audio-track` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setEnforceAudioTrack(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic <IFrame> Usage in Remotion with TypeScript\nDESCRIPTION: This TypeScript React code snippet demonstrates the basic usage of the `<IFrame>` component imported from the 'remotion' library. It defines a functional component `MyComp` that renders an iframe element, setting its source URL to \"https://remotion.dev\" via the `src` prop. Remotion automatically wraps this component to delay rendering until the iframe content is loaded.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/iframe.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { IFrame } from \"remotion\";\n\nexport const MyComp: React.FC = () => {\n  return <IFrame src=\"https://remotion.dev\" />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming Media Parsing with Remotion Media Parser\nDESCRIPTION: This snippet demonstrates how to pause and resume a media parsing operation using `mediaParserController` from `@remotion/media-parser`. It initializes a controller, starts parsing a video file, waits for 1 second, pauses the process, waits another second, and then resumes it. The `parseMedia` function returns a promise that resolves upon completion or rejects on error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/pause-resume-abort.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {mediaParserController, parseMedia} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\n\nparseMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  controller,\n})\n  .then(() => {\n    console.log('Finished downloading');\n  })\n  .catch((err) => {\n    console.error('Error downloading', err);\n  });\n\n// Wait 1 sec, pause, wait 1 sec, resume\nawait new Promise((resolve) => setTimeout(resolve, 1000));\ncontroller.pause();\nawait new Promise((resolve) => setTimeout(resolve, 1000));\ncontroller.resume();\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Remotion Project via npx (Shell)\nDESCRIPTION: This shell command uses `npx` to execute the latest version of the `create-video` package. This is the recommended method for scaffolding a new Remotion project, setting up the basic structure and dependencies. Requires Node.js and npm (including npx) to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/success-stories/2025-04-02-a-million-dollars.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-video@latest\n```\n\n----------------------------------------\n\nTITLE: Tracking Mute State Changes with Remotion Player in TypeScript/React\nDESCRIPTION: Illustrates adding an event listener for the 'mutechange' event on a Remotion Player instance via `PlayerRef`. The callback logs the player's muted status (`e.detail.isMuted`) whenever it changes. Requires React and `@remotion/player`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {PlayerRef} from '@remotion/player';\nimport {useRef} from 'react';\nconst playerRef = useRef<PlayerRef>(null);\nif (!playerRef.current) {\n  throw new Error();\n}\n// ---cut---\nplayerRef.current.addEventListener('mutechange', (e) => {\n  console.log('is mute' + e.detail.isMuted); // is mute true\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatically Autocorrecting Caption Words in Remotion (TypeScript)\nDESCRIPTION: This TypeScript function `autocorrectWord`, located in `config/autocorrect.ts`, demonstrates how to programmatically correct specific words in AI-generated captions. It accepts a `Word` object, checks if the `word` property matches a specific string (e.g., ' github'), and returns a new `Word` object with the corrected text (e.g., ' GitHub'). This allows for consistent, automated corrections.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/captions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst autocorrectWord = (word: Word): Word => {\n  // Replace a single word with another one\n  if (word.word === \" github\") {\n    return {\n      ...word,\n      word: word.word.replace(\"github\", \" GitHub\"),\n    };\n  }\n\n  return word;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Wiring Player Ref and Display Component - Remotion Player - TypeScript React\nDESCRIPTION: Shows how to structure an application to pass a PlayerRef to a TimeDisplay component, enabling separation of concerns. The App component creates a ref to the Player, renders it, and passes the ref as a prop to TimeDisplay. This pattern ensures that only relevant components re-render when the frame changes while keeping the app performant. Requires '@remotion/player', 'react', and the custom MyVideo and TimeDisplay components; playerRef is a React ref holding the Player instance.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/current-time.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n// @filename: ./remotion/TimeDisplay.tsx\\nexport const TimeDisplay: React.FC<{\\n  playerRef: React.RefObject<PlayerRef | null>;\\n}> = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport {Player, PlayerRef} from '@remotion/player';\\nimport {useRef} from 'react';\\nimport {MyVideo} from './remotion/MyVideo';\\nimport {TimeDisplay} from './remotion/TimeDisplay';\\n\\nexport const App: React.FC = () => {\\n  const playerRef = useRef<PlayerRef>(null);\\n\\n  return (\\n    <>\\n      <Player\\n        ref={playerRef}\\n        component={MyVideo}\\n        durationInFrames={120}\\n        compositionWidth={1920}\\n        compositionHeight={1080}\\n        fps={30}\\n      />\\n      <TimeDisplay playerRef={playerRef} />\\n    </>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade-in and Fade-out using interpolate() in TypeScript\nDESCRIPTION: Shows how to create a fade-in and fade-out effect by providing multiple points in the input and output ranges to `interpolate`. It uses the current frame and the total duration of the video (obtained via `useVideoConfig`) to define the timing. Dependencies include `interpolate`, `useCurrentFrame`, and `useVideoConfig` from 'remotion'.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { interpolate, useCurrentFrame, useVideoConfig } from \"remotion\";\n\nconst frame = useCurrentFrame();\nconst { durationInFrames } = useVideoConfig();\nconst opacity = interpolate(\n  frame,\n  [0, 20, durationInFrames - 20, durationInFrames],\n  // v--v---v----------------------v\n  [0, 1, 1, 0],\n);\n```\n\n----------------------------------------\n\nTITLE: Using useCurrentFrame in Remotion Sequences (React/TypeScript)\nDESCRIPTION: Shows how children of <Sequence> components can receive a shifted frame count using Remotion's useCurrentFrame hook. Demonstrates both direct and Sequence-offset frame values as props cascade to the Intro component. Requires 'remotion' library and React; outputs div elements displaying the current logical frame.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Sequence, useCurrentFrame} from 'remotion';\n\nconst Intro = () => <div>{useCurrentFrame()}</div>;\n\nconst MyTrailer = () => {\n  return (\n    <>\n      <Intro />\n      <Sequence from={30}>\n        <Intro />\n      </Sequence>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Passing Remote URLs Directly to Img in Remotion - TypeScript\nDESCRIPTION: This snippet shows the correct pattern for using a remote image URL in the Remotion Img component: the remote URL is supplied directly to the 'src' prop, without involving the staticFile() utility. This approach ensures compatibility with Remotion’s image handling system and avoids runtime errors. Dependencies: Remotion library. Key parameter: 'src' specifies the direct remote URL string to the image resource. Outputs the Img component rendering the external image as intended, with no need for staticFile imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/static-file-remote-urls.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Img } from \\\"remotion\\\";\n\nconst MyComp = () => {\n  return <Img src={\\\"https://example.com/image.png\\\"} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Animating Audio Volume Over Time in Remotion (TypeScript/React)\nDESCRIPTION: This snippet illustrates dynamic volume control in a Remotion composition by passing a function to the Audio component's volume prop. The function uses the Remotion interpolate helper to map the current audio frame number to a progressive volume value between 0 and 1, clamping values below zero. Dependencies are remotion, including useVideoConfig and interpolate. Key parameters: fps for timing, frame function argument f for animation. Input is the audio frame index; output is a smooth fade-in over one second.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/volume.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, interpolate, staticFile, useVideoConfig} from 'remotion';\\n\\nexport const MyComposition = () => {\\n  const {fps} = useVideoConfig();\\n\\n  return (\\n    <AbsoluteFill>\\n      <Audio src={staticFile('audio.mp3')} volume={(f) => interpolate(f, [0, 1 * fps], [0, 1], {extrapolateLeft: 'clamp'})} />\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Freezing and Resuming a Remotion Sequence in React/TypeScript\nDESCRIPTION: This React component, `FreezePortion`, demonstrates how to use Remotion's `<Freeze>` component to pause a `<Sequence>` containing a `Counter` component at specified intervals. It defines freeze points and durations in the `FREEZES` array, calculates the effective start and end frames for each freeze using `getFreezes`, and utilizes `useCurrentFrame` and `useMemo` to determine when to activate the `<Freeze>` component and adjust the `from` prop of the nested `<Sequence>` accordingly. This effectively pauses the inner animation during the freeze intervals and resumes it from the correct point afterwards.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/freeze-portions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useMemo} from 'react';\nimport {Freeze, Sequence, useCurrentFrame} from 'remotion';\n\nexport const Counter: React.FC = () => {\n  return (\n    <div className=\"flex h-full justify-center items-center text-6xl\">\n      {useCurrentFrame()}\n    </div>\n  );\n};\n\nconst FREEZES = [\n  {\n    frame: 0,\n    durationInFrames: 25,\n  },\n  {\n    frame: 30,\n    durationInFrames: 50,\n  },\n];\n\nconst getFreezes = () => {\n  let summedUpFreezes = 0;\n  const freezeFrames = [];\n  for (const freeze of FREEZES) {\n    freezeFrames.push({\n      start: summedUpFreezes + freeze.frame,\n      durationInFrames: freeze.durationInFrames,\n      from: summedUpFreezes,\n      frame: freeze.frame,\n    });\n    summedUpFreezes += freeze.durationInFrames;\n  }\n  return freezeFrames;\n};\n\nexport const FreezePortion: React.FC = () => {\n  const freezes = useMemo(() => {\n    return getFreezes();\n  }, []);\n  const frame = useCurrentFrame();\n\n  const nextFreeze = freezes.find(\n    (freeze) => frame < freeze.start + freeze.durationInFrames,\n  );\n  const activeFreeze = freezes.find(\n    (freeze) =>\n      frame >= freeze.start && frame < freeze.start + freeze.durationInFrames,\n  );\n\n  const from = useMemo(() => {\n    if (activeFreeze) {\n      return 0;\n    }\n\n    if (nextFreeze) {\n      return nextFreeze.from;\n    }\n\n    return (\n      freezes[freezes.length - 1].from +\n      freezes[freezes.length - 1].durationInFrames\n    );\n  }, [activeFreeze, freezes, nextFreeze]);\n\n  return (\n    <Freeze\n      frame={activeFreeze ? activeFreeze.frame : 0}\n      active={Boolean(activeFreeze)}\n    >\n      <Sequence layout=\"none\" from={from}>\n        <Counter />\n      </Sequence>\n    </Freeze>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Fixed Count Loop in Remotion (TSX)\nDESCRIPTION: Illustrates creating a loop that repeats a fixed number of times. The <Loop> component is configured with durationInFrames={50} and times={2}, causing the enclosed BlueSquare component to render for two iterations, each lasting 50 frames.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/loop.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\n// @include: example-BlueSquare\nimport { Loop } from \"remotion\";\n// ---cut---\nconst MyComp = () => {\n  return (\n    <Loop durationInFrames={50} times={2}>\n      <BlueSquare />\n    </Loop>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Bundling Remotion Studio using CLI (Bash)\nDESCRIPTION: Executes the `remotion bundle` command using `npx` to package the Remotion Studio into a static site. The output is placed in the `build` folder. Requires Node.js and Remotion (v4.0.97+) installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion bundle\n```\n\n----------------------------------------\n\nTITLE: Asynchronously Setting Composition Metadata in Remotion TSX\nDESCRIPTION: Illustrates how to asynchronously fetch data (like video duration) and use it to set composition props (like `durationInFrames`). It uses `useState`, `useEffect`, `delayRender`, and `continueRender` to manage the asynchronous operation and prevent Remotion from rendering until the necessary data is available. This allows dynamic determination of composition properties based on external data sources, which became possible due to changes in how `delayRender` works in version 1.4.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-26-remotion-1-4.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nexport const RemotionVideo: React.FC = () => {\n  const [videoLength, setVideoLength] = useState(null)\n\n  useEffect(() => {\n    const handle = delayRender();\n\n    determineVideoLength()\n    .then((duration) => {\n      setVideoLength(duration)\n      continueRender(handle)\n    })\n    .catch(err => /**/)\n  }, [])\n\n  if (videoLength === null) {\n    return null;\n  }\n\n  return (\n    <>\n      <Composition\n        id=\"HelloWorld\"\n        component={HelloWorld}\n        durationInFrames={videoLength}\n        fps={30}\n        width={1920}\n        height={1080}\n      />\n    </>\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using the prefetch() API in Remotion (TypeScript)\nDESCRIPTION: Demonstrates the use of the `prefetch` function from the `remotion` library to preload assets like videos before they are needed in the player. The example shows initiating the prefetch, waiting for it to complete using `waitUntilDone()`, logging a confirmation, and then freeing up memory using the `free()` function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Prefetching API\"\nimport { prefetch } from \"remotion\";\n\nconst { free, waitUntilDone } = prefetch(\"https://example.com/video.mp4\");\n\nwaitUntilDone().then(() => {\n  console.log(\"Video has finished loading\");\n  free(); // Free up memory\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Creating/Getting S3 Bucket with Node.js API (typescript)\nDESCRIPTION: Shows how to use the `getOrCreateBucket` function from the `@remotion/lambda` package in Node.js to ensure an S3 bucket exists in the specified AWS region, creating one if necessary. It returns the bucket name, which is required for programmatically deploying a Remotion site using `deploySite`. Requires the `@remotion/lambda` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport {deploySite, getOrCreateBucket} from '@remotion/lambda';\n\nconst {bucketName} = await getOrCreateBucket({\n  region: 'us-east-1',\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Muting Remotion <Audio> Component in TypeScript\nDESCRIPTION: This React component utilizes Remotion's `useCurrentFrame` and `useVideoConfig` hooks to retrieve the current frame number and frames per second (FPS). It renders an `<Audio>` component, dynamically setting its `muted` prop to true when the current frame falls between the 2-second and 4-second marks (inclusive), calculated using `frame` and `fps`. This effectively silences the audio during that specific time interval. Requires the `remotion` library and an audio file (e.g., 'audio.mp3') accessible via `staticFile`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/muting.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {9}\nimport {AbsoluteFill, Audio, staticFile, useCurrentFrame, useVideoConfig} from 'remotion';\n\nexport const MyComposition = () => {\n  const frame = useCurrentFrame();\n  const {fps} = useVideoConfig();\n\n  return (\n    <AbsoluteFill>\n      <Audio src={staticFile('audio.mp3')} muted={frame >= 2 * fps && frame <= 4 * fps} />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Launching Remotion Studio directly via CLI\nDESCRIPTION: Directly invokes the Remotion CLI's `studio` command using `npx` to start the Remotion Studio. This command bypasses package.json scripts and allows passing specific options to the Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/studio.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion studio\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Studio via CLI\nDESCRIPTION: This command uses `npx` to run the Remotion CLI (`remotion studio`) and points it to the project's entry point file (`remotion/index.ts`). This launches the Remotion Studio, a development environment for previewing and editing compositions. Requires the `@remotion/cli` package to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpx remotion studio remotion/index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Duplicating and Animating a Trail of Dots with Remotion Sequence in TypeScript\nDESCRIPTION: This TSX snippet implements a Trail React component, which duplicates its children a given number of times (amount) and applies scaling and sequential delays so each dot animates in a staggered fashion. The Trail component nests the previously defined Move component and uses Remotion's Sequence to offset start times. Each duplicate is scaled down further. Dependencies include remotion, react, and Move; the key parameters are amount (number of duplicates) and children (dot element).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @filename: Move.tsx\\nexport const Move: React.FC<{\\n  children: React.ReactNode;\\n  delay: number;\\n}> = () => null;\\n\\n// @filename: Trail.tsx\\n// ---cut---\\nimport React from 'react';\\nimport {AbsoluteFill, Sequence} from 'remotion';\\nimport {Move} from './Move';\\n\\nexport const Trail: React.FC<{\\n  amount: number;\\n  children: React.ReactNode;\\n}> = ({amount, children}) => {\\n  return (\\n    <AbsoluteFill>\\n      {new Array(amount).fill(true).map((a, i) => {\\n        return (\\n          <Sequence from={i * 3}>\\n            <AbsoluteFill>\\n              <Move delay={0}>\\n                <AbsoluteFill\\n                  style={{\\n                    scale: String(1 - i / amount),\\n                  }}\\n                >\\n                  {children}\\n                </AbsoluteFill>\\n              </Move>\\n            </AbsoluteFill>\\n          </Sequence>\\n        );\\n      })}\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Default Command in Dockerfile\nDESCRIPTION: Copies the render script (`render.mjs`) into the image and sets the default command (`CMD`) to execute this script using Node.js when the container starts. This initiates the Remotion rendering process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_8\n\nLANGUAGE: docker\nCODE:\n```\nCOPY render.mjs render.mjs\nCMD [\"node\", \"render.mjs\"]\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/lottie with npm (Bash)\nDESCRIPTION: Installs the `@remotion/lottie` package and its peer dependency `lottie-web` using the npm package manager. This command should be run in the terminal within a Node.js project directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/lottie lottie-web\n```\n\n----------------------------------------\n\nTITLE: Identifying a Remotion Composition Prop (Text)\nDESCRIPTION: Represents the unique identifier prop required for a Remotion Composition. This `id` is used to reference the specific composition, notably when initiating renders via the command line.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/composition.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nid\n```\n\n----------------------------------------\n\nTITLE: Generating Deterministic Random Numbers in Remotion (TypeScript/React)\nDESCRIPTION: Explains the use of Remotion's `random()` function for generating deterministic pseudo-random numbers between 0 and 1. It requires a static seed (a string) as an argument to ensure the same sequence of numbers is produced on every render, which is crucial for Remotion's deterministic rendering requirement. `Math.random()` is forbidden.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {random} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\treturn <div>Random number: {random('my-seed')}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using the `component` Prop for Remotion Composition (TSX)\nDESCRIPTION: This example illustrates how to use the `component` prop of the `<Composition>` component. It defines a simple root component `MyVideo` which renders a composition identified by `\"my-comp\"`. The visual content of the composition is provided by the `MyComp` component, which is directly imported and passed to the `component` prop. Essential metadata like dimensions, FPS, and duration are also specified.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/composition.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\n// @allowUmdGlobalAccess\n// @filename: ./MyComp.tsx\nexport const MyComp = () => <></>;\n\n// @filename: index.tsx\n// ---cut---\nimport { Composition } from \"remotion\";\nimport { MyComp } from \"./MyComp\";\n\nexport const MyVideo = () => {\n  return (\n    <>\n      <Composition\n        id=\"my-comp\"\n        component={MyComp}\n        width={1080}\n        height={1080}\n        fps={30}\n        durationInFrames={3 * 30}\n      />\n    </>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering and Animating 3D Content in Remotion with ThreeCanvas - TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use the <ThreeCanvas> component from @remotion/three to embed and animate a Three.js scene in a Remotion video using TypeScript and React. The example features a responsive, animated cube whose rotation, scale, and color are controlled declaratively via Remotion's useCurrentFrame and interpolations. Dependencies include @remotion/three, react, remotion (for useCurrentFrame and useVideoConfig), and @react-three/fiber (as a peer dependency). Required props such as width and height are taken from useVideoConfig to handle scaling issues in browsers. Inputs are the Remotion context frame and video configuration, and outputs are the rendered frame-specific canvas. The snippet expects an environment with Remotion and React Three Fiber configured; it should be placed inside a Remotion composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/three-canvas.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ThreeCanvas } from \"@remotion/three\";\nimport { interpolate, useCurrentFrame, useVideoConfig } from \"remotion\";\n\nconst ThreeBasic: React.FC = () => {\n  const frame = useCurrentFrame();\n  const { width, height } = useVideoConfig();\n\n  return (\n    <ThreeCanvas\n      orthographic={false}\n      width={width}\n      height={height}\n      style={{\n        backgroundColor: \"white\",\n      }}\n      camera={{ fov: 75, position: [0, 0, 470] }}\n    >\n      <ambientLight intensity={0.15} />\n      <pointLight args={[undefined, 0.4]} position={[200, 200, 0]} />\n      <mesh\n        position={[0, 0, 0]}\n        rotation={[frame * 0.06 * 0.5, frame * 0.07 * 0.5, frame * 0.08 * 0.5]}\n        scale={interpolate(Math.sin(frame / 10), [-1, 1], [0.8, 1.2])}\n      >\n        <boxGeometry args={[100, 100, 100]} />\n        <meshStandardMaterial\n          color={[\n            Math.sin(frame * 0.12) * 0.5 + 0.5,\n            Math.cos(frame * 0.11) * 0.5 + 0.5,\n            Math.sin(frame * 0.08) * 0.5 + 0.5,\n          ]}\n        />\n      </mesh>\n    </ThreeCanvas>\n  );\n};\n\nexport default ThreeBasic;\n```\n\n----------------------------------------\n\nTITLE: Rendering with Input Props using Remotion CLI - Bash\nDESCRIPTION: This code snippet demonstrates how to pass a JSON object as input props to a Remotion project using the --props flag with the npx remotion render command. It allows users to specify dynamic input values which the Remotion project can consume at runtime. The --props flag expects a valid JSON string, and the render command performs video rendering using these provided properties. No additional dependencies are required beyond having Remotion installed and accessible via npx.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-input-props.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render --props='{\"hello\": \"world\"}'\n```\n\n----------------------------------------\n\nTITLE: Loading and Rendering After Effects JSON Animation in Remotion with TypeScript\nDESCRIPTION: This React functional component demonstrates how to load and render an After Effects animation exported as JSON using the Bodymovin plugin. It utilizes React hooks (`useState`, `useEffect`) to manage the animation data state and fetch the JSON file (expected as `animation.json` within the `public/` directory) via Remotion's `staticFile` helper and the `fetch` API. Remotion's `delayRender`, `continueRender`, and `cancelRender` functions are used to handle the asynchronous loading process and potential errors. The fetched animation data is then passed to the `<Lottie>` component from `@remotion/lottie` for rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/after-effects.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lottie, LottieAnimationData } from \"@remotion/lottie\";\nimport { useEffect, useState } from \"react\";\nimport {\n  cancelRender,\n  continueRender,\n  delayRender,\n  staticFile,\n} from \"remotion\";\n\nconst Balloons = () => {\n  const [handle] = useState(() => delayRender(\"Loading Lottie animation\"));\n\n  const [animationData, setAnimationData] =\n    useState<LottieAnimationData | null>(null);\n\n  useEffect(() => {\n    fetch(staticFile(\"animation.json\"))\n      .then((data) => data.json())\n      .then((json) => {\n        setAnimationData(json);\n        continueRender(handle);\n      })\n      .catch((err) => {\n        cancelRender(err);\n        console.log(\"Animation failed to load\", err);\n      });\n  }, [handle]);\n\n  if (!animationData) {\n    return null;\n  }\n\n  return <Lottie animationData={animationData} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Opacity using Style Prop in TSX\nDESCRIPTION: Shows how to set the `opacity` style property on a `div` element in a TSX component to make it semi-transparent. Opacity values range from 0 (invisible) to 1 (fully visible), controlling the element's visibility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transforms.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {6} title=\"MyComponent.tsx\"\n<div\n  style={{\n    height: 100,\n    width: 100,\n    backgroundColor: \"red\",\n    opacity: 0.5,\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Triggering Playback with User Interaction in Remotion Player using TypeScript/React\nDESCRIPTION: Demonstrates how to trigger Remotion Player's playback only in response to a user gesture, passing a browser event to the PlayerRef.play() method from a React button's onClickCapture handler. This is crucial for passing browser autoplay policies, especially on Safari. Dependencies include React and @remotion/player. Key parameters are the PlayerRef reference and the user event, and it must be called inside a user-initiated event handler. Input: Mouse event; Output: Playback started if browser policy allows.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/autoplay.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyComp.tsx\\nexport const MyComp = () => <></>;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: index.tsx\\n// ---cut---\\nimport {PlayerRef} from '@remotion/player';\\nimport {useRef} from 'react';\\n\\nexport const App: React.FC = () => {\\n  const ref = useRef<PlayerRef>(null);\\n\\n  return (\\n    <button\\n      onClickCapture={(e) => {\\n        const {current} = ref;\\n        // Pass the event to .play() or .toggle()\\n        current?.play(e);\\n      }}\\n    >\\n      Play\\n    </button>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Captions for External Recordings using Bun\nDESCRIPTION: Shows the command to execute for generating captions for the externally recorded videos. This command uses `bun` to run a script named `sub.ts`. It is assumed that this script processes the video files located in the designated `public/<composition-id>` directory and generates corresponding caption files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/external-recordings.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nbun sub.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Formatting a Package with Prettier using pnpm (Bash)\nDESCRIPTION: This command navigates into a specific package directory (e.g., 'packages/renderer') and then uses pnpm to execute Prettier, automatically formatting all files within the 'src' directory according to the project's Prettier configuration. The '--write' flag ensures changes are saved directly to the files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/formatting.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/renderer\npnpm exec prettier src --write\n```\n\n----------------------------------------\n\nTITLE: Configuring a Remotion Lambda Webhook Handler in Next.js Pages Router (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates setting up a Remotion Lambda webhook endpoint at `/api/webhook` within a Next.js Pages Router application. It imports `pagesRouterWebhook` from `@remotion/lambda/client` and configures it with a secret, enables testing mode, adds custom headers, and defines simple console logging callbacks for `onSuccess`, `onError`, and `onTimeout` events. The resulting handler is exported for Next.js to use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/pagesrouterwebhooks.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {pagesRouterWebhook} from '@remotion/lambda/client';\n\nconst handler = pagesRouterWebhook({\n  secret: 'mysecret',\n  testing: true,\n  extraHeaders: {\n    region: 'south-asia',\n  },\n  onSuccess: () => console.log('Rendering Completed Successfully'),\n  onError: () => console.log('Something went wrong while rendering'),\n  onTimeout: () => console.log('Timeout occured while rendering'),\n});\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Throwing Error on Exceeding Path Length with getInstructionIndexAtLength (TypeScript)\nDESCRIPTION: This snippet demonstrates the behavior when the sample length argument exceeds the total length of the SVG path. The getInstructionIndexAtLength function throws an error in this case. Requires the @remotion/paths package. Inputs are a valid SVG path and a length greater than the path's total length; the output is an exception indicating the error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-instruction-index-at-length.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getInstructionIndexAtLength } from \"@remotion/paths\";\n// ---cut---\ngetInstructionIndexAtLength(\"M 0 0 L 100 0\", 105); // Error: A length of 105 was passed to getInstructionIndexAtLength() but the total length of the path is only 100;\n```\n\n----------------------------------------\n\nTITLE: Querying Remotion Sites and Buckets via getSites() API with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the getSites() function from the @remotion/cloudrun package to fetch all Remotion projects (\"sites\") and buckets from a specified GCP region (e.g., 'europe-west4'). The snippet logs the unique project ID, bucket information, and deployment URLs for each site, as well as bucket names and creation timestamps. Dependencies include the @remotion/cloudrun package and a valid GCP environment. The main parameter is the target region. The output is an object containing arrays of site and bucket metadata. This usage is restricted to environments where you have access to the relevant GCP project and permissions to list storage buckets.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/getsites.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getSites} from '@remotion/cloudrun';\n\nconst {sites, buckets} = await getSites('europe-west4');\n\nfor (const site of sites) {\n  console.log(site.id); // A unique ID for referring to that project\n  console.log(site.bucketName); // In which bucket the site resides in.\n  console.log(site.bucketRegion); // In which region the bucket resides in.\n  console.log(site.serveUrl); // URL of the deployed site that you can pass to `renderMediaOnCloudRun()`\n}\n\nfor (const bucket of buckets) {\n  console.log(bucket.name); // The name of the Cloud Storage bucket.\n  console.log(bucket.creationDate); // A unix timestamp of when the site was created.\n  console.log(bucket.region); // 'europe-west4'\n}\n```\n\n----------------------------------------\n\nTITLE: Converting AudioBuffer to Base64 Data URL using Remotion Utils (TypeScript)\nDESCRIPTION: This snippet demonstrates creating an empty AudioBuffer and converting it to a Base64 Data URL using the audioBufferToDataUrl function from the @remotion/media-utils package. It requires the Web Audio API for AudioBuffer creation and the @remotion/media-utils dependency. The input is an AudioBuffer instance, and the output is a string containing the Base64-encoded Data URL, suitable for use in the Remotion <Audio /> component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audiobuffertodataurl.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst audioBuffer = new AudioBuffer({ length: 0, sampleRate: 44100 });\n// ---cut---\nimport { audioBufferToDataUrl } from \"@remotion/media-utils\";\n\nconst str = audioBufferToDataUrl(audioBuffer);\n```\n\n----------------------------------------\n\nTITLE: Enabling Skia in Remotion Webpack Config (TypeScript)\nDESCRIPTION: Demonstrates the basic usage of the `enableSkia` helper function to modify the default Webpack configuration for Skia support in a Remotion project. This is done within the `remotion.config.ts` file by calling `Config.overrideWebpackConfig` and returning the result of `enableSkia` applied to the current configuration. Dependencies include `@remotion/cli` and `@remotion/skia`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/enable-skia.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\nimport { enableSkia } from \"@remotion/skia/enable\";\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableSkia(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Trimming Audio Playback with startFrom and endAt in Remotion (TSX)\nDESCRIPTION: Explains how to play only a specific segment of an audio file using the `startFrom` and `endAt` props, which define the start and end points in frames. This example trims the first 60 frames (2 seconds at 30fps) and stops playback after frame 120 (4 seconds at 30fps), effectively playing the audio from the 2-second mark to the 4-second mark.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, staticFile} from 'remotion';\n\nexport const MyVideo = () => {\n  return (\n    <AbsoluteFill>\n      <Audio src={staticFile('audio.mp3')} startFrom={60} endAt={120} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Listening for Frame Updates with Remotion Player in TypeScript/React\nDESCRIPTION: Demonstrates how to add an event listener for the 'frameupdate' event on a Remotion Player instance using a `PlayerRef`. The listener logs the current frame number (`e.detail.frame`) whenever the playback time or seek position changes. This event fires frequently during playback and seeking.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {PlayerRef} from '@remotion/player';\nimport {useRef} from 'react';\nconst playerRef = useRef<PlayerRef>(null);\nif (!playerRef.current) {\n  throw new Error();\n}\n// ---cut---\nplayerRef.current.addEventListener('frameupdate', (e) => {\n  console.log('current frame is ' + e.detail.frame); // current frame is 120\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Project CSS into Remotion Root Component (Tailwind v4)\nDESCRIPTION: JavaScript code snippet demonstrating how to import the main project stylesheet (`index.css`) into the `src/Root.tsx` file. This ensures the Tailwind styles are loaded and applied to the Remotion components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport './index.css';\n```\n\n----------------------------------------\n\nTITLE: Getting Instruction Index at Specific Length with @remotion/paths (TypeScript)\nDESCRIPTION: This snippet demonstrates importing and using the getInstructionIndexAtLength function from the @remotion/paths package to find which SVG path instruction is at a given path length. It requires @remotion/paths version 4.0.84 or higher. The function takes an SVG path string and a length (between 0 and the output of getLength()), and returns an object containing the instruction index and the remaining length into the instruction. The expected output is the index of the matched instruction and the offset into that instruction.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-instruction-index-at-length.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getInstructionIndexAtLength } from \"@remotion/paths\";\n\nconst { index, lengthIntoInstruction } = getInstructionIndexAtLength(\n  \"M 0 0 L 100 0 L 200 0\",\n  105,\n);\nconsole.log(index); // 1\nconsole.log(lengthIntoInstruction); // 5\n```\n\n----------------------------------------\n\nTITLE: Using `convertMedia` with `fields` and `onSize` Callback in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to convert a video using the `convertMedia` function from `@remotion/webcodecs`. It specifies the source URL, desired output container and codecs (`webm`, `vp8`, `opus`), and uses the `fields` option to request the video size. An `onSize` callback is provided to log the retrieved size information ({ width: number, height: number }) to the console during the conversion process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-media.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  videoCodec: 'vp8',\n  audioCodec: 'opus',\n  fields: {\n    size: true,\n  },\n  onSize: (size) => {\n    console.log(size);\n    //           ^?\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Converting a File Object to WebM using @remotion/webcodecs in TSX\nDESCRIPTION: This snippet shows how to convert a video represented as a JavaScript `File` object (e.g., obtained from an `<input type=\"file\">` element) to the WebM format using `convertMedia`. It depends on `@remotion/webcodecs`. The `src` parameter takes the `File` object, and `container` specifies the output format as 'webm'.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-a-video.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\n// Get an actual file from an <input type=\"file\"> element\nconst file = new File([], 'video.mp4');\n\nawait convertMedia({\n  src: file,\n  container: 'webm',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Rotation and Spring Animations in Remotion (TypeScript)\nDESCRIPTION: This snippet calculates animation values using Remotion's utility functions. `interpolate` maps the current `frame` to a rotation angle (`constantRotation`), creating continuous rotation over the `durationInFrames`. `spring` creates a physics-based transition (`entranceAnimation`) from 0 to 1, driven by the `frame` and `fps`, useful for smooth entrances or effects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spline.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {interpolate, spring} from 'remotion';\nconst durationInFrames = 300;\nconst frame = 0;\nconst fps = 30;\n// ---cut---\n\nconst constantRotation = interpolate(\n  frame,\n  [0, durationInFrames],\n  [0, Math.PI * 6],\n);\n\nconst entranceAnimation = spring({\n  frame,\n  fps,\n  config: {\n    damping: 200,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies using pnpm - Bash\nDESCRIPTION: This shell command installs Remotion core, CLI, and Player modules using pnpm. It's intended for projects configured to use pnpm as the package manager. You must have pnpm and Node.js already installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i remotion @remotion/cli @remotion/player\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Media via Remotion Cloud Run CLI with Service Name (Bash)\nDESCRIPTION: This command renders a video (media) using Remotion Cloud Run with a service name and region instead of a direct Cloud Run URL. The service name and region must be determined from prior deployment steps. It prints progress and saves rendered video to the configured cloud storage.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun render <serve-url | site-name> <composition-id> --service-name=<service-name> --region=<region>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS v3 with Timeline Preset (JavaScript)\nDESCRIPTION: Provides a configuration example for `tailwind.config.js` specifically for users of Tailwind CSS v3. It imports the timeline's theme preset (`timeline-preset.mjs`) and includes it in the `presets` array. This ensures that the timeline component's styles are correctly processed and applied by Tailwind CSS v3. The configuration also defines content paths and allows for further theme extensions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/timeline/setup.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport timelinePreset from './timeline/theme/timeline-preset.mjs';\n\n/** @type {import('tailwindcss').Config} */\nexport default {\n  presets: [timelinePreset],\n  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],\n  theme: {\n    extend: {\n      // Add your custom theme extensions here\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Relative Frame using useCurrentFrame in Remotion (TSX)\nDESCRIPTION: This snippet demonstrates the basic usage of the `useCurrentFrame` hook from Remotion. It shows how the hook returns the current frame number. Inside a `<Sequence>` component (like `Subtitle`), the returned frame is relative to the `from` prop of the Sequence (25 - 10 = 15). Outside a Sequence (like `Title` or `MyVideo`), it returns the absolute frame on the timeline (25).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-current-frame.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { Sequence, useCurrentFrame } from \"remotion\";\n\nconst Title = () => {\n  const frame = useCurrentFrame(); // 25\n  return <div>{frame}</div>;\n};\n\nconst Subtitle = () => {\n  const frame = useCurrentFrame(); // 15\n  return <div>{frame}</div>;\n};\n\nconst MyVideo = () => {\n  const frame = useCurrentFrame(); // 25\n\n  return (\n    <div>\n      <Title />\n      <Sequence from={10}>\n        <Subtitle />\n      </Sequence>\n    </div>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Importing and Calling getInfo() for a Font in TSX\nDESCRIPTION: Demonstrates how to import the `getInfo` function for a specific Google Font (Montserrat) from the `@remotion/google-fonts` package and call it to retrieve font metadata. The retrieved information object is then logged to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/get-info.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getInfo} from '@remotion/google-fonts/Montserrat';\nconsole.log(getInfo());\n```\n\n----------------------------------------\n\nTITLE: Handling useCurrentScale Outside Remotion Context (TSX)\nDESCRIPTION: This snippet shows how to safely use the `useCurrentScale` hook even when the component might not be rendered within a Remotion context (e.g., in a regular React component). By passing the option `{ dontThrowIfOutsideOfRemotion: true }`, the hook is instructed not to throw an error if called outside Remotion. Instead, it will return a default scale value of `1`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-current-scale.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCurrentScale } from \"remotion\";\n\nconst MyRegularReactComponent = () => {\n  const scale = useCurrentScale({ dontThrowIfOutsideOfRemotion: true });\n\n  return <div>The current scale is {scale}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Local Fonts Manually Using FontFace API (TypeScript)\nDESCRIPTION: Demonstrates advanced manual loading of a local font using the web-native FontFace API in a TypeScript/Remotion context. Integrates Remotion's `delayRender`/`continueRender` functions to control React render timing until the font is loaded. Requires `remotion` package and font asset availability, and handles asynchronous Promise-based font installation, logging any loading errors. Useful for fine-grained font control or non-standard font loading scenarios.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/fonts.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { continueRender, delayRender, staticFile } from \"remotion\";\n\nconst waitForFont = delayRender();\nconst font = new FontFace(\n  `Bangers`,\n  `url('${staticFile(\"bangers.woff2\")}') format('woff2')`,\n);\n\nfont\n  .load()\n  .then(() => {\n    document.fonts.add(font);\n    continueRender(waitForFont);\n  })\n  .catch((err) => console.log(\"Error loading font\", err));\n```\n\n----------------------------------------\n\nTITLE: Rendering Still Image via Remotion Cloud Run CLI (Bash)\nDESCRIPTION: This command uses the Remotion CLI to render a single still frame from a Remotion composition, using either a serve URL or site name and a still ID, passing a Cloud Run URL as an execution target. The result is saved as an image file in the designated cloud storage bucket.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun still <serve-url | site-name> <still-id> --cloud-run-url=<cloud-run-url>\n```\n\n----------------------------------------\n\nTITLE: Managing Buffer State and Playback in Remotion Player with React Context (TypeScript/TSX)\nDESCRIPTION: This code creates a BufferManager using React Context to track buffering states for multiple player instances, pausing playback when buffering and resuming only when appropriate. It demonstrates how to encapsulate buffering logic using hooks and refs to prevent race conditions and ensure reliable UI control. Dependencies include React, Remotion Player, and TypeScript; the key inputs are callbacks for buffering/continuing, and outputs are controlled playback and buffer state propagation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/buffer-state.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: BufferManager.tsx\\nimport { createContext } from \\\"react\\\";\\n\\ntype BufferState = { [key: string]: boolean };\\n\\ntype BufferContextType = {\\n  canPlay: (id: string) => void;\\n  needsToBuffer: (id: string) => void;\\n};\\n\\nexport const BufferContext = createContext<BufferContextType>({\\n  // By default, do nothing if the context is not set, for example in rendering\\n  canPlay: () => {},\\n  needsToBuffer: () => {},\\n});\\n\\n// ---cut---\\nimport React, { useCallback, useMemo, useRef } from \\\"react\\\";\\n\\nexport const BufferManager: React.FC<{\\n  children: React.ReactNode;\\n  onBuffer: () => void;\\n  onContinue: () => void;\\n}> = ({ children, onBuffer, onContinue }) => {\\n  const bufferState = useRef<BufferState>({});\\n  const currentState = useRef(false);\\n\\n  const sendEvents = useCallback(() => {\\n    let previousState = currentState.current;\\n    currentState.current = Object.values(bufferState.current).some(Boolean);\\n\\n    if (currentState.current && !previousState) {\\n      onBuffer();\\n    } else if (!currentState.current && previousState) {\\n      onContinue();\\n    }\\n  }, [onBuffer, onContinue]);\\n\\n  const canPlay = useCallback(\\n    (id: string) => {\\n      bufferState.current[id] = false;\\n      sendEvents();\\n    },\\n    [sendEvents],\\n  );\\n\\n  const needsToBuffer = useCallback(\\n    (id: string) => {\\n      bufferState.current[id] = true;\\n      sendEvents();\\n    },\\n    [sendEvents],\\n  );\\n\\n  const bufferEvents = useMemo(() => {\\n    return {\\n      canPlay,\\n      needsToBuffer,\\n    };\\n  }, [canPlay, needsToBuffer]);\\n\\n  return (\\n    <BufferContext.Provider value={bufferEvents}>\\n      {children}\\n    </BufferContext.Provider>\\n  );\\n};\\n\\n// @filename: App.tsx\\nconst MyComp: React.FC = () => null;\\n\\n// organize-imports-ignore\\n// ---cut---\\nimport { Player, PlayerRef } from \\\"@remotion/player\\\";\\nimport React, { useState, useRef, useCallback } from \\\"react\\\";\\nimport { BufferManager } from \\\"./BufferManager\\\";\\n\\nfunction App() {\\n  const playerRef = useRef<PlayerRef>(null);\\n  const [buffering, setBuffering] = useState(false);\\n  const pausedBecauseOfBuffering = useRef(false);\\n\\n  const onBuffer = useCallback(() => {\\n    setBuffering(true);\\n\\n    playerRef.current?.pause();\\n    pausedBecauseOfBuffering.current = true;\\n  }, []);\\n\\n  const onContinue = useCallback(() => {\\n    setBuffering(false);\\n\\n    // Play only if we paused because of buffering\\n    if (pausedBecauseOfBuffering.current) {\\n      pausedBecauseOfBuffering.current = false;\\n      playerRef.current?.play();\\n    }\\n  }, []);\\n\\n  return (\\n    <BufferManager onBuffer={onBuffer} onContinue={onContinue}>\\n      <Player\\n        ref={playerRef}\\n        component={MyComp}\\n        compositionHeight={720}\\n        compositionWidth={1280}\\n        durationInFrames={200}\\n        fps={30}\\n        controls\\n      />\\n    </BufferManager>\\n  );\\n}\\n\\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using the loaded fontFamily in a Remotion composition - TypeScript\nDESCRIPTION: Shows how to use the fontFamily property returned by loadFont to style React components in a Remotion video composition. After loading the font, fontFamily is injected into the style prop of AbsoluteFill to apply the font globally inside the composition. This snippet closes the typical workflow from font setup to usage. Assumes remotion and @remotion/google-fonts/TitanOne are installed and AbsoluteFill is imported.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {loadFont} from '@remotion/google-fonts/TitanOne';\nimport {AbsoluteFill} from 'remotion';\n\nconst {fontFamily} = loadFont();\n\nexport const GoogleFontsDemoComposition = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        fontFamily,\n      }}\n    >\n      <div>Hallo Google Fonts</div>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Speculating Remotion Lambda Function Name Using speculateFunctionName() - TypeScript\nDESCRIPTION: Demonstrates how to use speculateFunctionName from '@remotion/lambda/client' to predict the AWS Lambda function name before deployment. This snippet requires the @remotion/lambda package and works in a TypeScript environment; it constructs the name from the memorySizeInMb, diskSizeInMb, and timeoutInSeconds properties. Inputs are numbers representing allocation parameters and it outputs the predicted string function name, following the standard Remotion Lambda naming convention.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/speculateFunctionName.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {speculateFunctionName} from '@remotion/lambda/client';\n\nconst speculatedFunctionName = speculateFunctionName({\n  memorySizeInMb: 2048,\n  diskSizeInMb: 2048,\n  timeoutInSeconds: 120,\n});\n\nconsole.log(speculatedFunctionName); // remotion-render-3-3-63-mem2048mb-disk2048mb-120sec\n```\n\n----------------------------------------\n\nTITLE: Re-Using Seeking Hints in parseMedia (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates how to use previously extracted seeking hints to optimize a new media parse with Remotion. The snippet shows initialization of a mediaParserController, fetching seeking hints (likely from an earlier parse), and then providing them as the seekingHints parameter in a fresh parseMedia call. Dependencies include '@remotion/media-parser' and support for async/await. The re-use of seeking hints can significantly reduce seek times during parsing, but the seeking hints API is experimental, and the exact structure of hints is not guaranteed to remain stable.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/seeking-hints.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {parseMedia, mediaParserController} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\nconst seekingHints = await controller.getSeekingHints();\n\n// ---cut---\n\nawait parseMedia({\n  controller,\n  src: 'https://stream.mux.com/QkFQYWZ0ZS53ZWJ3aWQvc3RhdGlvbl9pbnRlcm5hbC5tM3U4Lm1wNA.m3u8',\n  // Seeking hints were obtained from the previous parse\n  seekingHints,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/paths via yarn (Node.js Bash)\nDESCRIPTION: This bash snippet details how to use yarn to add the @remotion/paths package in a Node.js or React project. It provides the same SVG path manipulation tools, functional APIs, and TypeScript types, with yarn handling dependency management. Specify the package as the input; the package will be added to yarn.lock and your project's dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/paths\n```\n\n----------------------------------------\n\nTITLE: Checking for Aborted Media Download with hasBeenAborted() (TSX)\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `hasBeenAborted` function from `@remotion/media-parser` within a try-catch block. It calls `parseMedia` to potentially download and parse a media file. If an error (`e`) is caught during this process, `hasBeenAborted(e)` is used to check if the error object signifies that the operation was intentionally aborted (e.g., by the user or developer). This allows for specific handling of abort errors, distinguishing them from other potential download or parsing failures.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/has-been-aborted.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia, hasBeenAborted} from '@remotion/media-parser';\n\ntry {\n  await parseMedia({\n    src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  });\n} catch (e) {\n  if (hasBeenAborted(e)) {\n    console.log('Has been aborted by user / developer');\n  } else {\n    console.error('Download failed', e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerizing Remotion Studio with Chrome Dependencies (Dockerfile, Docker)\nDESCRIPTION: This Dockerfile configures a Node.js 22 environment, installs required system dependencies for Chrome, and copies the Remotion project contents. It installs Node modules, ensures the required Chrome browser is present via Remotion CLI, and launches Remotion Studio. Dependencies include Node.js, Chrome libraries, and a valid Remotion project structure (src, package.json, etc.). It expects the Remotion CLI and supported package managers to be used, and requires adjustment if the public directory or alternate package managers are in place.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-server.mdx#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM node:22-bookworm-slim\\n\\n# Install Chrome dependencies\\nRUN apt-get update\\nRUN apt install -y \\\\\\n  libnss3 \\\\\\n  libdbus-1-3 \\\\\\n  libatk1.0-0 \\\\\\n  libgbm-dev \\\\\\n  libasound2 \\\\\\n  libxrandr2 \\\\\\n  libxkbcommon-dev \\\\\\n  libxfixes3 \\\\\\n  libxcomposite1 \\\\\\n  libxdamage1 \\\\\\n  libatk-bridge2.0-0 \\\\\\n  libpango-1.0-0 \\\\\\n  libcairo2 \\\\\\n  libcups2\\n\\n# Copy everything from your project to the Docker image. Adjust if needed.\\nCOPY package.json package*.json yarn.lock* pnpm-lock.yaml* bun.lockb* bun.lock* tsconfig.json* remotion.config.* ./\\nCOPY src ./src\\n\\n# If you have a public folder:\\nCOPY public ./public\\n\\n# Install the right package manager and dependencies - see below for Yarn/PNPM\\nRUN npm i\\n\\n# Install Chrome\\nRUN npx remotion browser ensure\\n\\nCMD [\\\"npx\\\", \\\"remotion\\\", \\\"studio\\\"]\n```\n\n----------------------------------------\n\nTITLE: Using parsePath with @remotion/paths to Get Instruction by Index (TypeScript)\nDESCRIPTION: This snippet showcases how to use both getInstructionIndexAtLength and parsePath from @remotion/paths to retrieve a specific instruction from an SVG path. After determining the index using getInstructionIndexAtLength, parsePath is called to get a parsed representation of the path, and the instruction at the computed index is accessed. Requires the @remotion/paths package. Inputs include the SVG path string and the sample length; outputs are the instruction index and the parsed instruction object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-instruction-index-at-length.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getInstructionIndexAtLength, parsePath } from \"@remotion/paths\";\n\nconst path = \"M 0 0 L 100 0 L 200 0\";\nconst { index } = getInstructionIndexAtLength(path, 105);\n\nconst parsed = parsePath(path);\nconst instruction = parsed[index]; // {type: 'L', x: 100, y: 0}\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Media with Remotion Cloud Run API (Node.js TypeScript)\nDESCRIPTION: This TypeScript snippet initiates a video render via the programmatic Remotion API. It calls renderMediaOnCloudrun with parameters including service name, region, serve URL, composition, input props, output codec, and a render progress update callback. Upon completion, it checks for a 'success' result and logs bucket and render IDs. Requires '@remotion/cloudrun/client' package and network access to the Remotion Cloud Run service.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {renderMediaOnCloudrun} from '@remotion/cloudrun/client';\nconst url = 'string';\nconst serviceName = 'string';\nconst updateRenderProgress = (progress: number) => {};\n// ---cut---\n\nconst result = await renderMediaOnCloudrun({\n  serviceName,\n  region: 'us-east1',\n  serveUrl: url,\n  composition: 'HelloWorld',\n  inputProps: {},\n  codec: 'h264',\n  updateRenderProgress,\n});\n\nif (result.type === 'success') {\n  console.log(result.bucketName);\n  console.log(result.renderId);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Centered Red Heart Component in Remotion (TSX)\nDESCRIPTION: This snippet defines a React functional component `RedHeart` using TypeScript (TSX). It utilizes Remotion's `AbsoluteFill` component to render a red heart emoji ('❤️') centered both horizontally and vertically within its parent container.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/RedHeart.tsx\"\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nexport const RedHeart: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      ❤️\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing Hosted Video Metadata using Remotion Media Parser in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the parseMedia function from the @remotion/media-parser package to extract video metadata (duration and dimensions) from a hosted MP4 file. It requires the @remotion/media-parser package version 4.0.190 or later. The main parameter is src (file URL), with fields indicating the desired metadata. The output is an object containing properties such as durationInSeconds and dimensions. The snippet uses await for asynchronous operation and expects to be run in an environment supporting ES modules and async/await.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/parse-media.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\nconst result = await parseMedia({\\n  src: 'https://example.com/my-video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n});\\n\\nconsole.log(result.durationInSeconds); // 10\\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\n```\n\n----------------------------------------\n\nTITLE: Querying Remotion Cloud Run Services by Region Using getServices() in TypeScript\nDESCRIPTION: This code sample shows how to call getServices from the @remotion/cloudrun package to list Remotion services in a specified GCP region, filtering to only version-compatible services. It showcases the API usage and iterates over each service returned to log detailed information such as name, resource limits, version, endpoints, and GCP console links. This example requires the @remotion/cloudrun package, Google Cloud credentials, and expects an argument object containing 'region' and 'compatibleOnly'. The result is an array of service info objects, and the code assumes an async context in a Node.js or modern JavaScript runtime.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/getservices.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getServices} from '@remotion/cloudrun';\\n\\nconst info = await getServices({\\n  region: 'us-west1',\\n  compatibleOnly: true,\\n});\\n\\nfor (const service of info) {\\n  console.log(service.serviceName); // \"remotion--3-3-82--mem2gi--cpu2--t-1100\"\\n  console.log(service.timeoutInSeconds); // 1100\\n  console.log(service.memoryLimit); // 2Gi\\n  console.log(service.cpuLimit); // 2\\n  console.log(service.remotionVersion); // \"3.3.82\"\\n  console.log(service.uri); // \"https://remotion--3-3-82--mem2gi--cpu2--t-1100-1a2b3c4d5e-uw.a.run.app\"\\n  console.log(service.region); // \"us-west1\"\\n  console.log(service.consoleUrl); // \"https://console.cloud.google.com/run/detail/us-west1/remotion--3-3-82--mem2gi--cpu2--t-1100/logs\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useBufferState in Remotion (TypeScript/React)\nDESCRIPTION: Demonstrates the fundamental use of the `useBufferState` hook within a React functional component. It uses `useEffect` to call `buffer.delayPlayback()` when the component mounts, simulating a data loading scenario. After a 5-second delay, `delayHandle.unblock()` is called to signal that loading is complete and playback can resume. A cleanup function is included in `useEffect` to call `unblock()` if the component unmounts before the timeout, preventing the video from buffering indefinitely.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-buffer-state.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComp.tsx\"\nimport React from \"react\";\nimport { useBufferState } from \"remotion\";\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n\n  React.useEffect(() => {\n    const delayHandle = buffer.delayPlayback();\n\n    setTimeout(() => {\n      delayHandle.unblock();\n    }, 5000);\n\n    return () => {\n      delayHandle.unblock();\n    };\n  }, []);\n\n  return <></>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Composing Animated Visual Layers with Slowed Effect - Remotion/React/TypeScript Stubs\nDESCRIPTION: Presents stub (placeholder) React components for individual visual and animation elements used in a main Remotion composition, including Dots, RedHearts, YellowHearts, Stars, Background, Shrinking, Move, Animoji, and Slowed. The <MyComposition> aggregates these, stacking background, a grouped 'slowed' effect layer, and the animoji overlay using AbsoluteFill layout. All components (except MyComposition) are stubbed with empty return, serving as scaffolding for further implementation and clear interface signatures. Intended as compositional structure for advanced Remotion animation workflows.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_27\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: Move.tsx\\nexport const Move: React.FC<{\\n  children: React.ReactNode;\\n  delay: number;\\n}> = () => null;\\n// @filename: Shrinking.tsx\\nexport const Shrinking: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n// @filename: Stars.tsx\\nexport const Stars: React.FC<{}> = () => null;\\n// @filename: Background.tsx\\nexport const Background: React.FC<{}> = () => null;\\n// @filename: Dots.tsx\\nexport const Dots: React.FC<{}> = () => null;\\n// @filename: RedHearts.tsx\\nexport const RedHearts: React.FC<{}> = () => null;\\n// @filename: YellowHearts.tsx\\nexport const YellowHearts: React.FC<{}> = () => null;\\n// @filename: SlowedTrail.tsx\\nexport const Slowed: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n\\n// @filename: MyComposition.tsx\\n// ---cut---\\nimport React from 'react';\\nimport {AbsoluteFill} from 'remotion';\\nimport {Background} from './Background';\\nimport {Dots} from './Dots';\\nimport {RedHearts} from './RedHearts';\\nimport {Slowed} from './SlowedTrail';\\nimport {Stars} from './Stars';\\nimport {YellowHearts} from './YellowHearts';\\n\\nexport const MyComposition = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Background />\\n      <Slowed>\\n        <Dots />\\n        <RedHearts />\\n        <YellowHearts />\\n        <Stars />\\n      </Slowed>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Downloading a Rendered Media File using downloadMedia() in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `downloadMedia` function from `@remotion/lambda` to download a rendered file (e.g., video) from an AWS S3 bucket. It specifies the necessary AWS region, bucket name, the unique render ID, and the desired local output path (`out.mp4`). An optional `onProgress` callback is included to log the download progress. The function returns a promise resolving to an object containing the final absolute `outputPath` and the `sizeInBytes` of the downloaded file, which are then logged to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/downloadmedia.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {downloadMedia} from '@remotion/lambda';\n\nconst {outputPath, sizeInBytes} = await downloadMedia({\n  bucketName: 'remotionlambda-r42fs9fk',\n  region: 'us-east-1',\n  renderId: '8hfxlw',\n  outPath: 'out.mp4',\n  onProgress: ({totalSize, downloaded, percent}) => {\n    console.log(`Download progress: ${totalSize}/${downloaded} bytes (${(percent * 100).toFixed(0)}%)`);\n  },\n});\n\nconsole.log(outputPath); // \"/Users/yourname/remotion-project/out.mp4\"\nconsole.log(sizeInBytes); // 21249541\n```\n\n----------------------------------------\n\nTITLE: Rendering Star Shape with @remotion/shapes in TypeScript/TSX\nDESCRIPTION: This snippet showcases how to use the Star component from the @remotion/shapes package within a Remotion AbsoluteFill layout in TypeScript/TSX. It renders a centered red star with customizable properties such as points, innerRadius, and outerRadius. Dependencies include '@remotion/shapes', 'remotion', and React; parameters like points, innerRadius, outerRadius, and fill determine the star's appearance. The output is an SVG star centered on a white background suitable for use in Remotion video compositions. Ensure proper installation of all dependencies before use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/star.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Star} from '@remotion/shapes';\nimport {AbsoluteFill} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: 'white',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Star points={5} innerRadius={100} outerRadius={200} fill=\"red\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Site with Folder Expiry via Node.JS (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to deploy a Remotion site programmatically using the `@remotion/lambda` package. It first calls `getOrCreateBucket` with `enableFolderExpiry: true` to ensure the S3 bucket has lifecycle rules applied, then uses the obtained `bucketName` in the `deploySite` function. Requires the `@remotion/lambda` package (v4.0.32+), Node.js environment, configured AWS credentials, and the `s3:PutLifecycleConfiguration` permission.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/autodelete.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {deploySite, getOrCreateBucket} from '@remotion/lambda';\nimport path from 'path';\n\nconst {bucketName} = await getOrCreateBucket({\n  region: 'us-east-1',\n  enableFolderExpiry: true,\n});\n\nconst {serveUrl} = await deploySite({\n  entryPoint: path.resolve(process.cwd(), 'src/index.ts'),\n  bucketName, // use the bucket with lifecyle rules\n  region: 'us-east-1',\n});\nconsole.log(serveUrl);\n```\n\n----------------------------------------\n\nTITLE: Setting Buffering Spinner Delay via Prop in Remotion Player (TSX)\nDESCRIPTION: This snippet demonstrates how to customize the delay before the buffering spinner is shown in the Remotion Player UI. The `bufferStateDelayInMilliseconds` prop is passed to the `<Player>` component to set the timeout (in milliseconds). Setting it to 0 shows the spinner immediately.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\n// @filename: ./remotion/MyVideo.tsx\nexport const MyVideo = () => <></>;\n\n// @filename: index.tsx\n// ---cut---\nimport {Player, PlayerRef} from '@remotion/player';\nimport {useEffect, useRef, useState} from 'react';\nimport {MyVideo} from './remotion/MyVideo';\n\nexport const App: React.FC = () => {\n  return (\n    <Player\n      component={MyVideo}\n      durationInFrames={120}\n      compositionWidth={1920}\n      compositionHeight={1080}\n      fps={30}\n      bufferStateDelayInMilliseconds={1000} // Or set to `0` to immediately show the spinner\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Remotion License Usage with getUsage() in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the getUsage() function from the @remotion/licensing package to asynchronously fetch and log license usage statistics for Remotion, using a secret API key and a UNIX timestamp cutoff (e.g., 30 days prior). The code must be run in a secure backend environment to prevent exposing the sensitive API key. Required dependencies include the @remotion/licensing package and a valid API key. The input object requires apiKey (string) and since (number, timestamp in milliseconds). The output is an object containing webcodecConversions and cloudRenders, each reporting billable, development, and failed usage counts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/licensing/get-usage.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getUsage} from '@remotion/licensing';\\n\\nconst usage = await getUsage({\\n  apiKey: 'rm_sec_xxxxx',\\n  since: Date.now() - 1000 * 60 * 60 * 24 * 30, // 30 days ago\\n});\\n\\nconsole.log(usage);\\n/*\\n{\\n  \"webcodecConversions\": {\\n    \"billable\": 10,\\n    \"development\": 5,\\n    \"failed\": 2\\n  },\\n  \"cloudRenders\": {\\n    \"billable\": 10,\\n    \"development\": 5,\\n    \"failed\": 2\\n  },\\n}\\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket CORS using getAwsClient in TSX\nDESCRIPTION: Illustrates using `getAwsClient` to get an S3 client and SDK. It then sends a `PutBucketCorsCommand` to configure the Cross-Origin Resource Sharing (CORS) rules for a specified S3 bucket, allowing GET and HEAD requests from any origin with any header. Replace '[bucket-name]' with the actual bucket name.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getawsclient.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// Import from \"@remotion/lambda\" instead before Remotion v4.0.60\nimport {getAwsClient} from '@remotion/lambda/client';\n\nconst {client, sdk} = getAwsClient({region: 'us-east-1', service: 's3'});\n\nclient.send(\n  new sdk.PutBucketCorsCommand({\n    Bucket: '[bucket-name]',\n    CORSConfiguration: {\n      CORSRules: [\n        {\n          AllowedMethods: ['GET', 'HEAD'],\n          AllowedHeaders: ['*'],\n          AllowedOrigins: ['*'],\n        },\n      ],\n    },\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Generating CSS scaleX() Transform in Remotion (TSX)\nDESCRIPTION: Illustrates using the `scaleX` function from `@remotion/animation-utils` to create a CSS `scaleX()` transform string. It accepts a single numerical argument representing the scaling factor along the X-axis.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { scaleX } from \"@remotion/animation-utils\";\n\nconst transform = scaleX(2);\n// => \"scaleX(2)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Slow Motion to a Composition using Remotion - TypeScript/React\nDESCRIPTION: Implements a <Slowed> React component that slows down the playback of its children using Remotion hooks and a speed remapping algorithm. The helper function remapSpeed() accumulates time passage at a framewise variable rate, enabling effects like gradual slow motion transitions. Dependencies: React, Remotion (Freeze, interpolate, useCurrentFrame). Expects children elements to be animated, with the effect lasting until frame 20 at speed 1.5 and then slowing to 0.5. Outputs the child contents frozen at the computed remapped frame, allowing composable application of timing effects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_26\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\\nimport {Freeze, interpolate, useCurrentFrame} from 'remotion';\\n\\n// remapSpeed() is a helper function for the component <Slowed> that takes a frame number and a speed\\nconst remapSpeed = ({\\n  frame,\\n  speed,\\n}: {\\n  frame: number;\\n  speed: (fr: number) => number;\\n}) => {\\n  let framesPassed = 0;\\n  for (let i = 0; i <= frame; i++) {\\n    framesPassed += speed(i);\\n  }\\n\\n  return framesPassed;\\n};\\n\\nexport const Slowed: React.FC<{\\n  children: React.ReactNode;\\n}> = ({children}) => {\\n  const frame = useCurrentFrame();\\n  const remappedFrame = remapSpeed({\\n    frame,\\n    speed: (f) =>\\n      interpolate(f, [0, 20, 21], [1.5, 1.5, 0.5], {\\n        extrapolateRight: 'clamp',\\n      }),\\n  });\\n\\n  return <Freeze frame={remappedFrame}>{children}</Freeze>;\\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Input Props in Remotion Root Component - TypeScript/React\nDESCRIPTION: This TypeScript/React snippet demonstrates how to retrieve input props within the root component of a Remotion project using the getInputProps() function. It defines a composition and uses getInputProps to extract dynamic values (e.g., {hello}) at the top level, which can then be passed to compositions as props. The snippet assumes remotion is installed and that getInputProps and Composition are imported from 'remotion'. The function returns a non-typesafe object, so for stricter typing it is recommended to use type annotations or alternative APIs. Inputs are expected to be provided via the Remotion CLI or programmatic API. The Root component renders a composition with specified configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-input-props.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Composition} from 'remotion';\nconst getInputProps = () => ({hello: 'world'}) as const;\nconst MyComp: React.FC = () => null;\nconst config = {\n  component: MyComp,\n  durationInFrames: 100,\n  fps: 30,\n  width: 1000,\n  height: 1000,\n  id: 'MyComp',\n} as const;\n// ---cut---\n\nexport const Root: React.FC = () => {\n  const {hello} = getInputProps(); // \"world\"\n\n  return <Composition {...config} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Media Programmatically via Remotion Cloud Run (TypeScript/TSX)\nDESCRIPTION: Provides a Node.js/Bun script using TypeScript/TSX to initiate a render on Google Cloud Run. It imports `renderMediaOnCloudrun` from `@remotion/cloudrun/client` and calls it with configuration such as Cloud Run region, service name, composition ID, serve URL, codec, and input props. It also shows how to handle the successful result. Requires the `@remotion/cloudrun/client` package and a configured Cloud Run service.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// ---cut---\nimport {renderMediaOnCloudrun} from '@remotion/cloudrun/client';\n\nconst result = await renderMediaOnCloudrun({\n  region: 'us-east1',\n  serviceName: 'remotion-render-bds9aab',\n  composition: 'HelloWorld',\n  serveUrl: 'https://remotion-helloworld.vercel.app',\n  codec: 'h264',\n  inputProps: {\n    titleText: 'Hello World!',\n  },\n});\n\nif (result.type === 'success') {\n  console.log(result.bucketName);\n  console.log(result.renderId);\n}\n```\n\n----------------------------------------\n\nTITLE: Presigning S3 URLs Using Remotion Lambda Client in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the presignUrl() function from @remotion/lambda/client to create a signed URL for a private S3 object. The code shows two cases: generating a presigned URL with existence checking enabled (returns string or null), and with checking disabled (throws exception if not found). Dependencies include the @remotion/lambda/client package and valid AWS credentials. Key parameters such as region, bucketName, objectKey, expiresInSeconds, and checkIfObjectExists must be provided; expiresInSeconds must be between 1 and 604800. Inputs include the config object, and outputs are a string URL or null/exception depending on options and S3 object existence. Intended for use within serverless or Node.js environments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/presignurl.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {presignUrl} from '@remotion/lambda/client';\\n\\nconst url = await presignUrl({\\n  region: 'us-east-1',\\n  bucketName: 'remotionlambda-c7fsl3d',\\n  objectKey: 'assets/sample.png',\\n  expiresInSeconds: 900,\\n  checkIfObjectExists: true,\\n});\\n\\nconsole.log(url); // `string` - or `null` if object doesn't exist\\n\\nconst url2 = await presignUrl({\\n  region: 'us-east-1',\\n  bucketName: 'remotionlambda-c7fsl3d',\\n  objectKey: 'assets/sample.png',\\n  expiresInSeconds: 900,\\n  checkIfObjectExists: false,\\n});\\n\\nconsole.log(url); // always a string, or exception if object doesn't exist\n```\n\n----------------------------------------\n\nTITLE: Custom Premounted Sequence Component in Remotion (TypeScript/React)\nDESCRIPTION: This advanced implementation defines a custom PremountedSequence React component that allows fine control over premounting behavior using Remotion's APIs. The component receives premountFor as a prop along with all standard Sequence props and manages style, opacity, and pointer-events for invisible preloading. It prevents usage with layout='none'. The component leverages useCurrentFrame, getRemotionEnvironment, and useMemo, as well as a nested <Freeze> to control playback, demonstrating careful handling of mounting logic, buffer state, and forwarding refs. The code should be used in Remotion environments with all relevant APIs, and considerations around native buffer states must be handled by the developer.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/premounting.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, {forwardRef, useMemo} from 'react';\nimport {\n  Freeze,\n  getRemotionEnvironment,\n  Sequence,\n  SequenceProps,\n  useCurrentFrame,\n} from 'remotion';\n\nexport type PremountedSequenceProps = SequenceProps & {\n  premountFor: number;\n};\n\nconst PremountedSequenceRefForwardingFunction: React.ForwardRefRenderFunction<\n  HTMLDivElement,\n  {\n    premountFor: number;\n  } & SequenceProps\n> = ({premountFor, ...props}, ref) => {\n  const frame = useCurrentFrame();\n\n  if (props.layout === 'none') {\n    throw new Error('`<Premount>` does not support layout=\"none\"');\n  }\n\n  const {style: passedStyle, from = 0, ...otherProps} = props;\n  const active =\n    frame < from &&\n    frame >= from - premountFor &&\n    !getRemotionEnvironment().isRendering;\n\n  const style: React.CSSProperties = useMemo(() => {\n    return {\n      ...passedStyle,\n      opacity: active ? 0 : 1,\n      // @ts-expect-error Only in the docs - it will not give a type error in a Remotion project\n      pointerEvents: active ? 'none' : (passedStyle?.pointerEvents ?? 'auto'),\n    };\n  }, [active, passedStyle]);\n\n  return (\n    <Freeze frame={from} active={active}>\n      <Sequence\n        ref={ref}\n        name={`<PremountedSequence premountFor={${premountFor}}>`}\n        from={from}\n        style={style}\n        {...otherProps}\n      />\n    </Freeze>\n  );\n};\n\nexport const PremountedSequence = forwardRef(\n  PremountedSequenceRefForwardingFunction,\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Blank Remotion Project (yarn)\nDESCRIPTION: Uses yarn to initialize a new, blank Remotion video project in the current directory. This command sets up the basic file structure and dependencies required for a Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn create video --blank\n```\n\n----------------------------------------\n\nTITLE: Querying GCP Regions with Remotion Cloud Run Client - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the getRegions() function from the @remotion/cloudrun/client package to obtain the list of supported GCP regions for Remotion Cloud Run. The snippet requires the @remotion/cloudrun/client dependency and does not require the full renderer package, keeping bundle size minimal. The getRegions function takes no parameters and returns a string array containing region codes (e.g., [\\\"asia-east1\\\", \\\"us-east1\\\"]).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/getregions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getRegions} from '@remotion/cloudrun/client';\n\n// ---cut---\n\nconst regions = getRegions();\n// [\"asia-east1\", \"us-east1\"]\n```\n\n----------------------------------------\n\nTITLE: Reading Audio Track Frames with onAudioTrack Callback using Remotion Media Parser in TypeScript\nDESCRIPTION: This example highlights the onAudioTrack callback feature of parseMedia, allowing for custom handling of audio track samples. The callback receives both the track information and individual audio samples, which are processed as EncodedAudioChunk instances. The snippet requires @remotion/media-parser and browser or runtime support for EncodedAudioChunk. Useful for applications needing direct manipulation of underlying audio frames.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/parse-media.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @noErrors\\nimport {parseMedia, OnAudioTrack} from '@remotion/media-parser';\\n\\nconst onAudioTrack: OnAudioTrack = ({track}) => {\\n  console.log(track);\\n\\n  return (sample) => {\\n    console.log(new EncodedAudioChunk(sample));\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Ensuring Chrome Installation via Remotion CLI (Best Practice)\nDESCRIPTION: Recommends using the `npx remotion browser ensure` command as a best practice to proactively download and manage the correct Chrome Headless Shell version pinned by Remotion. This ensures rendering readiness and avoids potential issues with external or incompatible browser installations, especially important in CI/CD or server environments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion browser ensure\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Remotion CLI - Bash\nDESCRIPTION: This snippet demonstrates how to render a video using the Remotion CLI by specifying the composition name (e.g., 'HelloWorld'). It requires Remotion to be installed (locally or globally via npm), and the command will execute the rendering process for the given composition. Replace 'HelloWorld' with the desired composition ID as needed. Input: composition name; Output: video render in output directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render HelloWorld\n```\n\n----------------------------------------\n\nTITLE: Rendering a Circle with @remotion/shapes in TSX\nDESCRIPTION: This TSX snippet demonstrates how to import and use the `Circle` component from the `@remotion/shapes` library within a Remotion project. It defines a simple composition `MyComposition` that uses `AbsoluteFill` to center content and renders a `Circle` component with specified `radius`, `fill` color, `stroke` color, and `strokeWidth`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/circle.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Circle } from \"@remotion/shapes\";\nimport { AbsoluteFill } from \"remotion\";\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Circle radius={100} fill=\"green\" stroke=\"red\" strokeWidth={1} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing FFmpeg Command with ffmpegOverride in stitchFramesToVideo - Remotion Renderer - TypeScript\nDESCRIPTION: Shows how to define a ffmpegOverride function to modify the arguments Remotion passes to the FFmpeg process during video encoding. The ffmpegOverride function receives an object with type ('stitcher' or 'pre-stitcher') and args (array of command strings), and returns a new array of arguments with additional FFmpeg filters applied. This function is intended for advanced users, to be passed as the ffmpegOverride parameter to stitchFramesToVideo; it requires knowledge of FFmpeg command-line syntax and should ensure returned arrays are valid for FFmpeg execution.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/stitch-frames-to-video.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {FfmpegOverrideFn} from '@remotion/renderer';\n\nconst ffmpegOverride: FfmpegOverrideFn = ({type, args}) => {\n  console.log(type); // \"stitcher\" |\\u00A0\"pre-stitcher\n  return [...args, '-vf', 'eq=brightness=0:saturation=1'];\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Foreign File Types with Remotion Media Parser in TypeScript\nDESCRIPTION: This snippet illustrates using the @remotion/media-parser's parseMedia() function to analyze a remote file and extract its type information in a unified codepath. It demonstrates robust error handling by catching specific exceptions such as IsAnImageError, IsAGifError, IsAPdfError, and IsAnUnsupportedFileTypeError. This approach enables applications to gracefully process arbitrary user-uploaded files, logging relevant metadata depending on the detected type. Dependencies: @remotion/media-parser. The main parameters are src (file URL) and fields (additional request data); outputs are handled via exceptions with detailed properties. Inputs must be valid file URLs; outputs include parsed file information or an explicit error type.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/foreign-file-types.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia, IsAnImageError, IsAGifError, IsAPdfError, IsAnUnsupportedFileTypeError} from '@remotion/media-parser';\\n\\ntry {\\n  await parseMedia({\\n    src: 'https://example.com/my-video.png',\\n    fields: {},\\n  });\\n} catch (e) {\\n  if (e instanceof IsAnImageError) {\\n    console.log('The file is an image of format:', e.imageType, 'dimensions:', e.dimensions);\\n  } else if (e instanceof IsAGifError) {\\n    console.log('The file is a GIF');\\n  } else if (e instanceof IsAPdfError) {\\n    console.log('The file is a PDF');\\n  } else if (e instanceof IsAnUnsupportedFileTypeError) {\\n    console.log('The file is of an unsupported type');\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Launching Remotion Studio on Fly.io with Custom Resources (Bash, CLI)\nDESCRIPTION: This bash snippet is a Fly.io CLI command to deploy Remotion Studio with specified VM resources, using the Dockerfile built earlier. It configures the service with 2 CPU cores, 4GB memory, disables HA replication, sets the internal port to 3000, and uses Docker for deployment. This approach requires Fly.io CLI, an existing Dockerfile, and Remotion project files. It is intended for deploying containerized Remotion Studio projects to Fly.io's infrastructure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-server.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nfly launch \\\\\\n  # Get 2 CPU cores and 4GB of memory\\n  --vm-size=performance-2x \\\\\\n  # Disable 2x replication\\n  --ha=false \\\\\\n  # Use Remotion's port\\n  --internal-port=3000 \\\\\\n  # Use Docker, not Node\\n  --dockerfile Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Defining ADBE Vector Shape Groups - JSON\nDESCRIPTION: This JSON snippet defines multiple After Effects vector groups, each containing paths, strokes, fills, and transformation parameters such as position, scale, and rotation. Dependencies include a JSON parser and an environment capable of interpreting Adobe After Effects-style vector object data (such as Remotion or a similar graphics renderer). Each group encapsulates graphical elements (paths and styling), enabling advanced vector compositions for animation or export. Inputs are JSON objects; outputs depend on the consumer but typically render vector graphics; direct rendering logic is not present in these snippets.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/lottie-comp.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[0,0],[0.526,16.058]],\"o\":[[-3.854,-15.354],[0,0]],\"v\":[[3.306,23.664],[-3.306,-23.663]],\"c\":false},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"st\",\"c\":{\"a\":0,\"k\":[0.075,0.035000000748,0.071000005685,1],\"ix\":3},\"o\":{\"a\":0,\"k\":100,\"ix\":4},\"w\":{\"a\":0,\"k\":0.5,\"ix\":5},\"lc\":2,\"lj\":1,\"ml\":10,\"bm\":0,\"nm\":\"Stroke 1\",\"mn\":\"ADBE Vector Graphic - Stroke\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[600.913,847.655],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false}, ...]\n```\n\n----------------------------------------\n\nTITLE: Using getAvailableFonts() in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and call the `getAvailableFonts()` function from the `@remotion/google-fonts` package. It retrieves an array containing information about all available Google Fonts and logs it to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/get-available-fonts.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { getAvailableFonts } from \"@remotion/google-fonts\";\n\nconsole.log(getAvailableFonts());\n```\n\n----------------------------------------\n\nTITLE: Applying Animated Transform Styles to SVG Elements in Remotion (TypeScript)\nDESCRIPTION: This snippet demonstrates how to apply animated transform values—derived from spring and interpolate calculations—to an SVG <g> element in a React component. The 'transform' style string combines scaling and translation to achieve a smooth animation, while 'transformOrigin' and 'transformBox' ensure transformations originate from the element's center. Dependencies: animated values from preceding calculations. Inputs: 'scale' and 'launch' variables. Outputs: Animated SVG group element ready for rendering in a Remotion composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/figma.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n<g\n  id=\\\"vehicle\\\"\n  style={{\n    transform: `scale(${scale}) ${launch}`,\n    transformOrigin: \\\"center center\\\",\n    transformBox: \\\"fill-box\\\",\n  }}\n>\n  {/* ... */}\n</g>\n```\n\n----------------------------------------\n\nTITLE: Loading a Font in the Background and Handling Completion - TypeScript\nDESCRIPTION: Shows how to asynchronously load a specific font style ('normal') with user-specified weights and subsets using loadFont(), then handle the completion event via the waitUntilDone() promise. This pattern is useful for cases where the font needs to be loaded in the background before applying it or triggering dependent logic. Requires @remotion/google-fonts/Lobster, JavaScript/TypeScript runtime, and network access for font URLs. Inputs: style, weights, subsets as arguments. Outputs: Logs a message to the console when the font finishes loading.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/load-font.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {loadFont} from '@remotion/google-fonts/Lobster';\n\nloadFont('normal', {\n  weights: ['400'],\n  subsets: ['latin'],\n})\n  .waitUntilDone()\n  .then(() => {\n    console.log('Done loading');\n  });\n```\n\n----------------------------------------\n\nTITLE: Creating a Centered Star Component in Remotion (TSX)\nDESCRIPTION: This snippet defines a React functional component `Star` using TypeScript (TSX). It uses Remotion's `AbsoluteFill` to render a star emoji ('⭐') centered within its parent container, setting a specific `fontSize` of 14.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/Star.tsx\"\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nexport const Star: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 14,\n      }}\n    >\n      ⭐\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Tracking Prefetch Progress for Remote Video Assets with Remotion (TypeScript/TSX)\nDESCRIPTION: Illustrates advanced use of the prefetch() function by monitoring download progress through the onProgress callback. The snippet defines an onProgress handler (with typings), manages cases where the total file size is unknown, and logs percentage-based or raw progress. It requires both 'remotion' and its type definitions. This is useful for displaying loading indicators or adapting UI feedback as media downloads. The 'prefetch' invocation includes the progress handler in its options, and the parameter exposes 'loadedBytes' and, if available, 'totalBytes'.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/prefetch.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {prefetch} from 'remotion';\nimport type {PrefetchOnProgress} from 'remotion';\n\nconst onProgress: PrefetchOnProgress = (progress) => {\n  if (progress.totalBytes === null) {\n    // HTTP response has no \"Content-Length\" header,\n    // therefore no relative progress can be calculated.\n    console.log('Loaded bytes:', progress.loadedBytes);\n    return;\n  }\n\n  console.log('Loading progress:', Math.round(progress.loadedBytes / progress.totalBytes / 100) + '%');\n};\n\nprefetch('https://example.com/video.mp4', {\n  onProgress,\n});\n```\n\n----------------------------------------\n\nTITLE: Resorting to default stream selection with Remotion Media Parser (TypeScript)\nDESCRIPTION: Provides an example of how to delegate stream selection back to the defaultSelectM3uStreamFn function from @remotion/media-parser within a custom selectM3uStream callback. This enables custom pre-processing or logic before applying the default highest resolution strategy. Dependencies are @remotion/media-parser and an m3u8 source, with expected input parameters matching those required by parseMedia. The returned media object uses the default stream selection behavior.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/selecting-streams.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {parseMedia, defaultSelectM3uStreamFn} from '@remotion/media-parser';\\n\\nconst media = await parseMedia({\\n  src: 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8',\\n  selectM3uStream: (params) => {\\n    // Add custom logic\\n\\n    // ...\\n\\n    // Resort to default behavior\\n    return defaultSelectM3uStreamFn(params);\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Combining SCSS Enablement with Other Webpack Changes in Remotion (TypeScript)\nDESCRIPTION: This snippet demonstrates how to extend the webpack configuration with both SCSS support and additional custom modifications in a reducer style. It requires the same dependencies (@remotion/cli/config, @remotion/enable-scss) and shows spreading the existing configuration before applying enableScss. This approach allows developers to add extra webpack rules or plugins while ensuring SCSS compatibility. Inputs involve the current configuration object, possibly with modifications, and output is the combined configuration. Users must ensure any further changes are compatible with SCSS integration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/enable-scss/enable-scss.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\nimport { enableScss } from \"@remotion/enable-scss\";\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableScss({\n    ...currentConfiguration,\n    // Make other changes\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Get available audio codecs for a container using @remotion/webcodecs\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `getAvailableAudioCodecs` function from the `@remotion/webcodecs` library. It imports the function and calls it with an object specifying the container type ('webm'). The function returns an array of strings listing the audio codecs supported by that container, in this case, likely `['opus']`. This helps determine potential audio encoding options for a specific container format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/get-available-audio-codecs.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getAvailableAudioCodecs} from '@remotion/webcodecs';\n\ngetAvailableAudioCodecs({container: 'webm'}); // ['opus']\n```\n\n----------------------------------------\n\nTITLE: Delaying Mount with Remotion Sequence (React/TypeScript)\nDESCRIPTION: Wraps BlueSquare in a Remotion <Sequence> component with 'from' set to 30, causing the component to mount only after 30 frames. This pattern allows timed entry effects in animations. Depends on 'remotion' and React, and expects a BlueSquare component as a child.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// @include: example-BlueSquare\nimport {Sequence} from 'remotion';\n// ---cut---\nconst MyVideo = () => {\n  return (\n    <Sequence from={30}>\n      <BlueSquare />\n    </Sequence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Looping Audio with the loop Prop in Remotion (TSX)\nDESCRIPTION: Illustrates how to make an audio track repeat continuously throughout the composition duration by adding the boolean `loop` prop to the `<Audio>` component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, staticFile, useCurrentFrame} from 'remotion';\n\nexport const MyVideo = () => {\n  const frame = useCurrentFrame();\n  return (\n    <AbsoluteFill>\n      <Audio loop src={staticFile('audio.mp3')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Timeline State and Rendering Remotion Player in React/TypeScript\nDESCRIPTION: Provides a React component for keeping track of tracks and their items using useState, and integrates Remotion's Player with inputProps derived from the current editor state. Demonstrates the pattern of passing real-time data into playback and editing environments, critical for an interactive editor experience. Dependencies: React, Remotion Player; Input: None (initializes with default tracks), Output: Player rendered with timeline data, state usable for timeline manipulation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/building-a-timeline.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: types.ts\ntype BaseItem = {\n  from: number;\n  durationInFrames: number;\n};\n\nexport type SolidItem = BaseItem & {\n  type: 'shape';\n  color: string;\n};\n\nexport type TextItem = BaseItem & {\n  type: 'text';\n  text: string;\n  color: string;\n};\n\nexport type VideoItem = BaseItem & {\n  type: 'video';\n  src: string;\n};\n\nexport type Item = SolidItem | TextItem | VideoItem;\n\nexport type Track = {\n  name: string;\n  items: Item[];\n};\n\n// @filename: remotion/Main.tsx\nimport React from 'react';\nimport type {Track} from '../types';\nexport const Main: React.FC<{\n  tracks: Track[];\n}> = ({tracks}) => {\n  return null;\n};\n\n// @filename: Editor.tsx\n// ---cut---\nimport React, {useMemo, useState} from 'react';\nimport {Player} from '@remotion/player';\nimport type {Item} from './types';\nimport {Main} from './remotion/Main';\n\ntype Track = {\n  name: string;\n  items: Item[];\n};\n\nexport const Editor = () => {\n  const [tracks, setTracks] = useState<Track[]>([\n    {name: 'Track 1', items: []},\n    {name: 'Track 2', items: []},\n  ]);\n\n  const inputProps = useMemo(() => {\n    return {\n      tracks,\n    };\n  }, [tracks]);\n\n  return (\n    <>\n      <Player component={Main} fps={30} inputProps={inputProps} durationInFrames={600} compositionWidth={1280} compositionHeight={720} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Audio Output in Remotion Config (TypeScript)\nDESCRIPTION: Disables audio output for the render by setting the muted state to `true` using the `Config` object in `remotion.config.ts`. The default value is `false`. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v3.2.1. The `--muted` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setMuted(true);\n```\n\n----------------------------------------\n\nTITLE: Using noise3D from Remotion Noise in TypeScript\nDESCRIPTION: Demonstrates how to import and use the noise3D function from the @remotion/noise package in TypeScript to generate a deterministic 3D noise value. This example requires both @remotion/noise and its internal dependency, simplex-noise, to be installed. The function accepts a seed (string or number) and three numbers representing the x, y, and z dimensions, and returns a float between -1 and 1. Outputs depend on the seed and coordinate inputs; changing the seed or any coordinate yields different noise values. Limitations include the requirement for proper TypeScript setup and available dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/noise/noise-3d.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { noise3D } from \"@remotion/noise\";\n\nconst x = 32;\nconst y = 40;\nconst z = 50;\nconsole.log(noise3D(\"my-seed\", x, y, z));\n```\n\n----------------------------------------\n\nTITLE: Using extractAudio() to Extract Audio from a Video in Node.js (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to use the `extractAudio()` function from `@remotion/renderer` in a Node.js environment. It first resolves the absolute path to the input video file using `node:path`. Then, it retrieves video metadata, including the appropriate audio file extension, using `getVideoMetadata()`. Finally, it calls `extractAudio()` with the resolved video source path and the determined output audio path to perform the extraction. It requires the `@remotion/renderer` package and the built-in `node:path` module.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/extract-audio.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {resolve} from 'node:path';\nimport {extractAudio, getVideoMetadata} from '@remotion/renderer';\n\nconst videoSource = resolve(process.cwd(), '/Users/john/path-to-video.mp4');\n\nconst videoMetadata = await getVideoMetadata(videoSource);\nconst audioOutput = resolve(process.cwd(), `./output-audio-path.${videoMetadata.audioFileExtension}`);\n\nawait extractAudio({\n  videoSource,\n  audioOutput,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Whisper.cpp Submodule with Bun\nDESCRIPTION: Executes a Bun script (`sub.ts`) to initialize the Whisper.cpp submodule, which is used for captioning features within the Remotion Recorder. This is an optional step that involves installing Whisper.cpp and downloading its model (default size 1.5GB).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/setup.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun sub.ts\n```\n\n----------------------------------------\n\nTITLE: Updating React Type Definitions for TypeScript\nDESCRIPTION: Details the required update for the `@types/react` package in `package.json` for TypeScript projects upgrading to React 18. This ensures type safety with the new React 18 types.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/react-18.mdx#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- \"@types/react\": \"17.0.3\"\n+ \"@types/react\": \"18.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Component for Loop Examples (TSX)\nDESCRIPTION: Defines a simple React component `MyComp` that renders the `BlueSquare` component. This serves as the base animation upon which the subsequent Loop examples are built. It includes the BlueSquare component definition via the `@include` directive.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/loop.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\n// @include: example-BlueSquare\n// ---cut---\nconst MyComp = () => {\n  return <BlueSquare />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Generating CSS rotate() Transform in Remotion (TSX)\nDESCRIPTION: Demonstrates using the `rotate` function from `@remotion/animation-utils` to generate a CSS `rotate()` transform string. It accepts a numerical value representing the angle in degrees.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { rotate } from \"@remotion/animation-utils\";\n\nconst transform = rotate(45);\n// => \"rotate(45deg)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compatible Lambda Function Names in Node.JS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to programmatically fetch the names of deployed Remotion Lambda functions that are compatible with the currently installed client library version. It uses the `getFunctions` method from `@remotion/lambda/client`, filtering by AWS region and setting `compatibleOnly` to true. The name of the first compatible function is extracted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getFunctions, renderMediaOnLambda, getRenderProgress} from '@remotion/lambda/client';\n\nconst functions = await getFunctions({\n  region: 'us-east-1',\n  compatibleOnly: true,\n});\n\nconst functionName = functions[0].functionName;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Still Image with Remotion Renderer in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to render a single frame from a Remotion composition to an image file using the renderStill() function from @remotion/renderer. It covers composition selection, error handling if the desired composition is not found, and the actual rendering call with essential parameters like output path and inputProps. Dependencies include the @remotion/bundler and @remotion/renderer packages, and the snippet assumes that project bundling and composition fetching are done beforehand. The function expects a composition configuration object, a serve URL (bundle path), and output details; it produces an image at the specified location.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-still.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {bundle} from '@remotion/bundler';\\nimport {getCompositions, renderStill} from '@remotion/renderer';\\n\\n// The composition you want to render\\nconst compositionId = 'HelloWorld';\\n\\nconst bundleLocation = await bundle({\\n  entryPoint: require.resolve('./src/index.ts'),\\n});\\n\\nconst comps = await getCompositions(bundleLocation, {\\n  inputProps: {\\n    custom: 'data',\\n  },\\n});\\nconst composition = comps.find((c) => c.id === compositionId);\\n\\nif (!composition) {\\n  throw new Error(`No composition with the ID ${compositionId} found`);\\n}\\n\\n// ---cut---\\n\\nawait renderStill({\\n  composition,\\n  serveUrl: bundleLocation,\\n  output: '/tmp/still.png',\\n  inputProps: {\\n    custom: 'data',\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Item Data Structure – TypeScript\nDESCRIPTION: This snippet defines a TypeScript type named Item, which represents an object used elsewhere in the codebase. Item contains properties for positioning (top, left), size (width, height), appearance (color), animation/frame context (durationInFrames, from), and interaction state (isDragging). This is a foundational type that other components accept as props or use to manage state. Prerequisites are knowledge of TypeScript type syntax and its support for inline documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Item = {\n\tid: number;\n\tdurationInFrames: number;\n\tfrom: number;\n\theight: number;\n\tleft: number;\n\ttop: number;\n\twidth: number;\n\tcolor: string;\n\tisDragging: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Expected API Response for Render Request - Bash\nDESCRIPTION: This example shows the JSON response returned by the Remotion server when a render request is successful, including the status message, render ID, and the bucket name where the video output is stored. The response is produced by the Remotion server after processing and assumes valid authentication and proper server configuration. In case of misconfiguration or failure, different responses may be received.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n{\"message\":\"Video rendered.\",\"renderId\":\"px60ct13fy\",\"bucketName\":\"remotionlambda-apsoutheast2-qv16gcf02l\"}\n```\n\n----------------------------------------\n\nTITLE: Updating Remotion Package Versions for React 18\nDESCRIPTION: Illustrates the required version bumps for core Remotion packages in `package.json` to ensure compatibility with React 18. Upgrading to at least version `3.0.0` is necessary to use React 18 features.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/react-18.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- \"remotion\": \"2.6.15\"\n- \"@remotion/bundler\": \"2.6.15\"\n- \"@remotion/cli\": \"2.6.15\"\n- \"@remotion/renderer\": \"2.6.15\"\n+ \"remotion\": \"3.0.0\"\n+ \"@remotion/bundler\": \"3.0.0\"\n+ \"@remotion/cli\": \"3.0.0\"\n+ \"@remotion/renderer\": \"3.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Using React Ref with Remotion Sequence (TypeScript)\nDESCRIPTION: Illustrates attaching a typed React ref to a Remotion <Sequence> component for direct DOM manipulation or integration with other React APIs. Shows correct typing (HTMLDivElement) when using TypeScript. Requires 'remotion' and React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useRef} from 'react';\nimport {Sequence} from 'remotion';\n\nconst content = <div>Hello, World</div>;\n// ---cut---\nconst MyComp = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  return (\n    <Sequence from={10} ref={ref}>\n      {content}\n    </Sequence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Frame and Video Config in Remotion Component (TypeScript)\nDESCRIPTION: This snippet demonstrates using the `useCurrentFrame` and `useVideoConfig` hooks from Remotion within the `Torus` component. `useCurrentFrame` provides the current frame number of the animation timeline, while `useVideoConfig` supplies essential video properties like frames per second (fps) and the total duration in frames. These values are fundamental for calculating animation progress.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spline.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCurrentFrame, useVideoConfig} from 'remotion';\n\n// ---cut---\nconst frame = useCurrentFrame();\nconst {fps, durationInFrames} = useVideoConfig();\n```\n\n----------------------------------------\n\nTITLE: Downloading a Media File using downloadAndParseMedia in TypeScript\nDESCRIPTION: Demonstrates the basic usage of `downloadAndParseMedia` to download a media file from a specified URL to a local file (`output.mp4`). It imports the function and the `nodeWriter` helper for writing the file to disk in a Node.js environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/download-and-parse-media.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {downloadAndParseMedia} from '@remotion/media-parser';\nimport {nodeWriter} from '@remotion/media-parser/node-writer';\n\nawait downloadAndParseMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  writer: nodeWriter('output.mp4'),\n});\n```\n\n----------------------------------------\n\nTITLE: Using getSilentParts to Find Silence in a Video (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates how to use the `getSilentParts` function from `@remotion/renderer` in a Node.js environment. It imports the function and calls it with an absolute path to a local video file (`bunny.mp4`), a noise threshold (`-20` dB), and a minimum silence duration (1 second). The resulting `silentParts` array, containing start and end times of silent segments, is then logged to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/get-silent-parts.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {getSilentParts} from '@remotion/renderer';\n\nconst {silentParts, durationInSeconds} = await getSilentParts({\n  src: '/Users/john/Documents/bunny.mp4',\n  noiseThresholdInDecibels: -20,\n  minDurationInSeconds: 1,\n});\n\nconsole.log(silentParts); // [{startInSeconds: 0, endInSeconds: 1.5}]\n```\n\n----------------------------------------\n\nTITLE: Composing a Camera Motion Blur Video Scene with Remotion - TSX\nDESCRIPTION: This snippet defines a complete React composition using Remotion's <CameraMotionBlur> and <AbsoluteFill> components to render a scene with adjustable camera-style motion blur. It wraps animated content (RainbowSquare) in <CameraMotionBlur> and demonstrates customization via the shutterAngle and samples props, as well as using <AbsoluteFill> for absolute positioning and central alignment. Required dependencies include '@remotion/motion-blur', 'remotion', and RainbowSquare. Inputs involve functional React children, and expected output is a visually blurred, centered animation. Limitations include potential color degradation and performance constraints at higher sample counts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/camera-motion-blur.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @include: example-RainbowSquare\n// ---cut---\nimport {CameraMotionBlur} from '@remotion/motion-blur';\nimport {AbsoluteFill} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <CameraMotionBlur shutterAngle={180} samples={10}>\n      <AbsoluteFill\n        style={{\n          backgroundColor: 'white',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <RainbowSquare />\n      </AbsoluteFill>\n    </CameraMotionBlur>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Media Metadata with Remotion UniversalReader in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to asynchronously parse a media file's metadata with the parseMedia function from the @remotion/media-parser package, using universalReader as the source reader. The code passes a file path (could also be a File object or URL) and specifies which metadata fields to extract (durationInSeconds and dimensions). The universalReader dependency allows seamless reading from multiple source types, but requires Node.js due to a dependency on the fs module. The resulting object contains the requested media metadata.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/universal-reader.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\nimport {universalReader} from '@remotion/media-parser/universal';\\n\\nconst result = await parseMedia({\\n  // Or a File, or a URL\\n  src: '/Users/jonnyburger/Downloads/my-video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n  reader: universalReader,\\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of RemotionRiveCanvas in TSX\nDESCRIPTION: This snippet demonstrates the fundamental usage of the `<RemotionRiveCanvas>` component to render a Rive animation. It imports the component from `@remotion/rive` and uses the `src` prop to specify the URL of the .riv animation file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/rive/remotionrivecanvas.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport {RemotionRiveCanvas} from '@remotion/rive';\n\nfunction App() {\n  return <RemotionRiveCanvas src=\"https://example.com/myAnimation.riv\" />;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Using bun - Bash\nDESCRIPTION: Installs the Remotion core package using bun, a modern JavaScript runtime and package manager. The environment must have bun pre-installed. The command adds the 'remotion' package to the project's dependency list by running it from a shell.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/remotion.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun i remotion\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook Endpoint using expressWebhook() - Remotion Lambda - JavaScript\nDESCRIPTION: Demonstrates setting up an Express server to handle Remotion webhooks using the expressWebhook() utility. Dependencies include express, body-parser, and @remotion/lambda/client. Configures handlers for POST and OPTIONS, accepts a secret for signature validation, and supports success, error, and timeout callbacks. Key parameters: 'secret', 'testing', and handler callbacks. Listens on port 3000.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst ENABLE_TESTING = false;\\n\\n// ---cut---\\nimport express from 'express';\\nimport bodyParser from 'body-parser';\\nimport {expressWebhook} from '@remotion/lambda/client';\\n\\nconst router = express();\\nconst jsonParser = bodyParser.json();\\n\\nconst handler = expressWebhook({\\n  secret: 'mysecret',\\n  testing: ENABLE_TESTING,\\n  onSuccess: ({renderId}) => console.log('Finished render', renderId),\\n  onTimeout: ({renderId}) => console.log('Time out', renderId),\\n  onError: ({renderId}) => console.log('Error', renderId),\\n});\\n\\nrouter.post('/webhook', jsonParser, handler);\\n\\nrouter.options('/webhook', jsonParser, handler);\\n\\nrouter.listen(3000, () => {\\n  console.log('Server is running on port 3000');\\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Stills on Lambda with Expiration via Node.JS (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates using the `renderStillOnLambda` function from `@remotion/lambda/client` to generate a single frame (still). Similar to video rendering, the `deleteAfter: '1-day'` parameter tags the output file in S3 via a prefix for automatic deletion after 1 day according to the bucket's lifecycle configuration. Requires the `@remotion/lambda/client` package, a deployed site with folder expiry enabled, and necessary configuration parameters (region, functionName, serveUrl, composition, etc.).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/autodelete.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ---cut---\nimport {renderStillOnLambda} from '@remotion/lambda/client';\n\nconst {bucketName, renderId} = await renderStillOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  composition: 'MyVideo',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  inputProps: {},\n  privacy: 'public',\n  imageFormat: 'png',\n  deleteAfter: '1-day',\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Coordinates at a Specific Length on an SVG Path using TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of the `getPointAtLength` function from `@remotion/paths`. It takes an SVG path string ('M 0 0 L 100 0') and a length (50) as arguments and returns an object containing the x and y coordinates of the point at that specific length along the path.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-point-at-length.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getPointAtLength } from \"@remotion/paths\";\n\nconst point = getPointAtLength(\"M 0 0 L 100 0\", 50);\nconsole.log(point); // { x: 50, y: 0 }\n```\n\n----------------------------------------\n\nTITLE: Accessing Video Properties with useVideoConfig Hook (TypeScript)\nDESCRIPTION: Demonstrates a React component that shows video metadata (width, height, duration, fps) using the useVideoConfig hook from Remotion. Requires the 'remotion' package to be installed and to operate within a Remotion context. Video properties are retrieved from the hook and rendered in the component. The AbsoluteFill component is used for centralized layout. Inputs come from Remotion's runtime, and the output displays video size and duration in seconds.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/the-fundamentals.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AbsoluteFill, useVideoConfig} from 'remotion';\n\nexport const MyComposition = () => {\n  const {fps, durationInFrames, width, height} = useVideoConfig();\n\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 60,\n        backgroundColor: 'white',\n      }}\n    >\n      This {width}x{height}px video is {durationInFrames / fps} seconds long.\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Spring Animation with Duration Using Remotion - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates configuring a physics-based spring animation in Remotion with a defined duration. It imports the 'spring' utility from 'remotion', then calculates an animation value based on frames per second (fps), current frame, and a physics config. Specifying 'durationInFrames' forces the spring curve to stretch across an exact duration, simplifying timeline planning. Inputs include the current frame, frame rate, and spring config (e.g., damping parameter). The output is a value representing the animated state at a given frame. Requires Remotion and its 'spring' utility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-07-14-remotion-3-1.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { spring } from \"remotion\";\nconst frame = 10;\n// ---cut---\nconst fps = 30;\n\nconst value = spring({\n  fps,\n  frame,\n  config: {\n    damping: 200,\n  },\n  durationInFrames: 300,\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Video Sequence Metadata with parseMedia and Remotion - TypeScript\nDESCRIPTION: Implements an asynchronous function to calculate frame-precise durations for a sequence of videos using Remotion's parseMedia utility. Receives props with video sources, parses each for duration, converts duration to frames at 30fps, and returns updated props and total duration for the composition. Depends on '@remotion/media-parser' and Remotion API; requires TypeScript types Props and VideoToEmbed. Inputs: an array of video sources with null durations. Outputs: updated props with durations filled, composition fps, and total frame duration. Should be used to dynamically set lengths when registering Remotion compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/sequence.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {OffthreadVideo, staticFile, Series, CalculateMetadataFunction} from 'remotion';\nimport {parseMedia} from '@remotion/media-parser';\n\ntype VideoToEmbed = {\n  src: string;\n  durationInFrames: number | null;\n};\n\ntype Props = {\n  videos: VideoToEmbed[];\n};\n\n// ---cut---\nexport const calculateMetadata: CalculateMetadataFunction<Props> = async ({props}) => {\n  const fps = 30;\n  const videos = await Promise.all([\n    ...props.videos.map(async (video): Promise<VideoToEmbed> => {\n      const {slowDurationInSeconds} = await parseMedia({\n        src: video.src,\n        fields: {\n          slowDurationInSeconds: true,\n        },\n      });\n\n      return {\n        durationInFrames: Math.floor(slowDurationInSeconds * fps),\n        src: video.src,\n      };\n    }),\n  ]);\n\n  const totalDurationInFrames = videos.reduce((acc, video) => acc + (video.durationInFrames ?? 0), 0);\n\n  return {\n    props: {\n      ...props,\n      videos,\n    },\n    fps,\n    durationInFrames: totalDurationInFrames,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Bundling the Remotion Project (TypeScript)\nDESCRIPTION: Demonstrates how to programmatically bundle a Remotion project using the `bundle` function from `@remotion/bundler`. It specifies the entry point and optionally includes a Webpack override configuration. The function returns the location of the generated bundle, which is needed for rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// @filename: webpack-override.ts\nimport type {WebpackOverrideFn} from '@remotion/bundler';\nexport const webpackOverride: WebpackOverrideFn = (f) => f;\n// @filename: script.ts\n// ---cut---\nimport {bundle} from '@remotion/bundler';\nimport {webpackOverride} from './webpack-override';\n\nconst bundleLocation = await bundle({\n  entryPoint: './src/index.ts',\n  // If you have a webpack override, don't forget to add it\n  webpackOverride: webpackOverride,\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Main Timeline Editor Component in React (TypeScript)\nDESCRIPTION: This code provides the Main component, responsible for integrating all previous elements: layers, outlines, and handles user pointer events for deselection and interactivity. It ensures layers are drawn before outlines (for z-index) and applies container-specific CSS for overflow. The event system treats unhandled pointerdowns as deselection. It requires the item type, all component dependencies, and is intended for embedding within Remotion's Player.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: item.ts\\n// @include: item\\n// @filename: ResizeHandle.tsx\\n// @include: ResizeHandle\\n// @filename: SelectionOutline.tsx\\n// @include: SelectionOutline\\n// @filename: SortedOutlines.tsx\\n// @include: SortedOutlines\\n// @filename: Layer.tsx\\n// @include: Layer\\n// @filename: Main.tsx\\n// ---cut---\\n// @include: Main\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Nested Composition Usage in Remotion Studio (TypeScript)\nDESCRIPTION: This snippet shows a common misuse of the Remotion <Composition> component where a composition is nested inside another composition through its component property, causing a mounting error. The example imports the Composition component from Remotion and defines two React components. MyComp returns a Composition whose component is AnotherComp, and then Index returns a Composition whose component is MyComp, creating a nesting. This pattern will trigger an error and should be avoided. Dependencies: remotion. Parameters include composition identifiers, video dimensions, and the component to render. Inputs are React components, and output is a faulty composition tree.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/wrong-composition-mount.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Composition } from \"remotion\";\nconst AnotherComp: React.FC = () => {\n  return null;\n};\n\n// ---cut---\n\nconst MyComp: React.FC = () => {\n  return (\n    <Composition\n      id=\"another-comp\"\n      width={1080}\n      height={1080}\n      durationInFrames={30}\n      fps={30}\n      component={AnotherComp}\n    />\n  );\n};\n\nconst Index: React.FC = () => {\n  return (\n    <Composition\n      id=\"my-comp\"\n      width={1080}\n      height={1080}\n      durationInFrames={30}\n      fps={30}\n      component={MyComp}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Videos for Multiple Platforms using Lambda CLI\nDESCRIPTION: This shell script shows how to initiate multiple Remotion Lambda render jobs, each targeting a different platform (YouTube, X, LinkedIn) by overriding the composition's default props using the `--props` flag. It specifies different layouts and platform identifiers for each render. Requires Remotion CLI and Bun installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/lambda-rendering.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbunx remotion lambda render --props='{\"platform\": \"youtube\", \"layout\": \"landscape\"}' remotion-recorder <composition-id>\nbunx remotion lambda render --props='{\"platform\": \"x\", \"layout\": \"square\"}' remotion-recorder <composition-id>\nbunx remotion lambda render --props='{\"platform\": \"linkedin\", \"layout\": \"square\"}' remotion-recorder <composition-id>\n```\n\n----------------------------------------\n\nTITLE: Applying Remotion Animations to R3F Mesh Properties (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to apply the previously calculated animation variables (`entranceAnimation` and `constantRotation`) to the `scale` and `rotation` properties of a React Three Fiber `<mesh>` element (representing the Torus). The mesh's scale animates based on the spring value, and its rotation updates based on the interpolated constant rotation, bringing the 3D model to life.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spline.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nscale={entranceAnimation + 3}\nrotation={[constantRotation / 2, constantRotation, 0]}\n```\n\n----------------------------------------\n\nTITLE: Registering a Remotion Video Composition List - React (TSX)\nDESCRIPTION: Shows how to define a Remotion video compositions list component. It imports Composition and MyComp, then registers 'MyVideo' with parameters such as duration, width, height, fps, ID, and default props. Ensures the composition is available in Remotion Studio and rendering pipelines. Requires remotion package and valid MyComp component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\n// @filename: ./MyComp.tsx\nexport const MyComp = () => <><\\/>;\n\n// @filename: index.tsx\n// ---cut---\nimport {Composition} from 'remotion';\nimport {MyComp} from './MyComp';\n\nexport const MyVideo = () => {\n  return (\n    <>\n      <Composition component={MyComp} durationInFrames={120} width={1920} height={1080} fps={30} id=\"my-comp\" defaultProps={{text: 'World'}} <\\/>)\n    <\\/>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Controlling Remotion Player Imperatively with PlayerRef (TypeScript/React)\nDESCRIPTION: Demonstrates initializing a React ref to the PlayerRef, accessing imperative methods like getCurrentFrame(), and rendering the Player component with props such as durationInFrames, compositionWidth, and component. Requires '@remotion/player', React, and a defined composition. The ref enables calls to player API functions from component contexts, with inputs/outputs as typed PlayerRef methods. Limitations: Assumes the Remotion Player runtime is available and the ref is properly set.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nexport const MyComposition: React.FC = () => null;\n\nimport {Player, PlayerRef} from '@remotion/player';\nimport {useEffect, useRef} from 'react';\nimport {MyComposition} from './MyComposition';\n\nconst MyComp: React.FC = () => {\n  const playerRef = useRef<PlayerRef>(null);\n\n  useEffect(() => {\n    if (playerRef.current) {\n      console.log(playerRef.current.getCurrentFrame());\n    }\n  }, []);\n\n  return (\n    <Player\n      ref={playerRef}\n      durationInFrames={30}\n      compositionWidth={1080}\n      compositionHeight={1080}\n      fps={30}\n      component={MyComposition}\n      // Many other optional props are available.\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Checking for Aborted Media Parse Error in Remotion\nDESCRIPTION: This snippet illustrates how to handle errors from `parseMedia` and specifically check if an error occurred because the parsing process was aborted using `controller.abort()`. It uses the `hasBeenAborted` helper function from `@remotion/media-parser` within the `catch` block to differentiate between cancellation errors and other potential parsing errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/pause-resume-abort.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {mediaParserController, parseMedia, hasBeenAborted} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\n\nconst promise = parseMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  controller,\n})\n  .then(() => {\n    console.log('Finished downloading');\n  })\n  .catch((err) => {\n    if (hasBeenAborted(err)) {\n      console.log('Download was cancelled');\n    } else {\n      console.error('Error downloading', err);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Adjusting package.json Side Effects for CSS (Tailwind v3)\nDESCRIPTION: Diff snippet showing the required modification in `package.json`. If `\"sideEffects\": false` is present, it must be changed to `\"sideEffects\": [\"*.css\"]` to prevent bundlers from tree-shaking CSS imports when using Tailwind v3.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n{\n// Only if `\"sideEffects\": false` exists in your package.json.\n-  \"sideEffects\": false\n+  \"sideEffects\": [\"*.css\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Static Volume for <Audio> Component in Remotion (TSX)\nDESCRIPTION: Shows how to set a fixed volume level for the audio playback using the `volume` prop on the `<Audio>` component. In this example, the volume is set to 50% (0.5) of the original audio level.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, staticFile} from 'remotion';\n\nexport const MyVideo = () => {\n  return (\n    <AbsoluteFill>\n      <Audio volume={0.5} src={staticFile('background.mp3')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Studio Server using NPX\nDESCRIPTION: This command uses NPX (Node Package Execute) to run the `remotion studio` command, which initiates the Remotion development server and opens the Studio interface. Fast Refresh relies on this server process remaining active; quitting it (e.g., via Ctrl+C) will cause Fast Refresh to stop working. Requires Node.js and npm/npx to be installed, along with a Remotion project setup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/broken-fast-refresh.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion studio\n```\n\n----------------------------------------\n\nTITLE: Uploading and Displaying User Videos Using Remotion Player (TypeScript/React)\nDESCRIPTION: Implements a user interface allowing file uploads, then renders the video in a Remotion Player component. On file selection, uploads asynchronously with a custom 'upload' function, sets the returned URL in state, and passes it to the composition as inputProps. This snippet demonstrates asynchronous state management, input handling, and Remotion player integration. Requires React, useState, useCallback, and Remotion's Player.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video-uploads.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCallback} from 'react';\nconst MyComposition: React.FC<{videoUrl: string | null}> = (URL) => {\n  return null;\n};\nconst upload = async (file: File) => {\n  return 'https://exampleName.s3.examplesRegion.amazonaws.com';\n};\n\n// ---cut---\nimport {Player} from '@remotion/player';\nimport {useState} from 'react';\n\nexport const RemotionPlayer: React.FC = () => {\n  const [videoUrl, setVideoUrl] = useState<string | null>(null);\n\n  const handleChange = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files === null) {\n      return;\n    }\n\n    const file = event.target.files[0];\n    //upload is an example function  & returns a URL when a file is uploaded on the cloud.\n    const cloudURL = await upload(file);\n    // E.g., cloudURL = https://exampleBucketName.s3.ExampleAwsRegion.amazonaws.com\n    setVideoUrl(cloudURL);\n  }, []);\n\n  return (\n    <div>\n      {videoUrl === null ? null : <Player component={MyComposition} durationInFrames={120} compositionWidth={1920} compositionHeight={1080} fps={30} inputProps={{videoUrl}} />}\n\n      <input type=\"file\" onChange={handleChange} />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding Remote Video with OffthreadVideo in Remotion (TypeScript)\nDESCRIPTION: This React functional component demonstrates how to embed a video from a remote URL in a Remotion project using the OffthreadVideo component. The code requires the remotion package and React. It accepts no parameters and outputs the video player rendering the specified remote video; no special configuration is needed. Limitations include the requirement for video URLs to be accessible and supported by the browser.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <OffthreadVideo src=\\\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\\\" />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing CSS Stylesheet into Remotion Component (TypeScript)\nDESCRIPTION: Demonstrates importing a CSS stylesheet into a TypeScript project for Remotion. The import statement brings style.css, located in src/, into the current module for style application. Works with supported CSS preprocessors and build tooling configured properly.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport \\\"./style.css\\\";\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mute Toggle Button for Remotion Player in React (tsx)\nDESCRIPTION: Defines a `MuteButton` React component (tsx) designed to control the mute state of a Remotion player referenced by `playerRef`. It uses `useState` to track the `muted` status, initialized from the player. An `onClick` handler, memoized with `useCallback`, toggles the player's mute state by calling `playerRef.current.mute()` or `playerRef.current.unmute()`. A `useEffect` hook listens for the 'mutechange' event on the player to keep the component's `muted` state synchronized, updating the button's text ('Mute' or 'Unmute') accordingly. No special handling is needed for zero volume, as Remotion treats it as muted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/custom-controls.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PlayerRef} from '@remotion/player';\nimport React, {useEffect, useState} from 'react';\n\nexport const MuteButton: React.FC<{ // tsx(React)\n  playerRef: React.RefObject<PlayerRef | null>;\n}> = ({playerRef}) => {\n  const [muted, setMuted] = useState(playerRef.current?.isMuted() ?? false);\n\n  const onClick = React.useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (playerRef.current.isMuted()) {\n      playerRef.current.unmute();\n    } else {\n      playerRef.current.mute();\n    }\n  }, [playerRef]);\n\n  useEffect(() => {\n    const {current} = playerRef;\n    if (!current) {\n      return;\n    }\n\n    const onMuteChange = () => {\n      setMuted(current.isMuted());\n    };\n\n    current.addEventListener('mutechange', onMuteChange);\n    return () => {\n      current.removeEventListener('mutechange', onMuteChange);\n    };\n  }, [playerRef]);\n\n  return (\n    <button type=\"button\" onClick={onClick}>\n      {muted ? 'Unmute' : 'Mute'}\n    </button>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Scenes and Slide Transitions with <TransitionSeries> (TypeScript/React)\nDESCRIPTION: This extended example demonstrates composing three scenes using <TransitionSeries>, alternating colored letter sequences and slide transitions with custom durations. It builds on Remotion's React-based video composition with dependencies including @remotion/transitions and @remotion/transitions/slide. Each sequence and transition receive specific durationInFrames values to control the exact timeline of the composite. Constraints include ensuring transitions do not exceed the duration of adjacent sequences and are not adjacent to other transitions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/transitionseries.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill } from \\\"remotion\\\";\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \\\"center\\\",\n        alignItems: \\\"center\\\",\n        fontSize: 200,\n        color: \\\"white\\\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { linearTiming, TransitionSeries } from \\\"@remotion/transitions\\\";\nimport { slide } from \\\"@remotion/transitions/slide\\\";\n\nconst BasicTransition = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\\\"#0b84f3\\\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={slide()}\n        timing={linearTiming({ durationInFrames: 30 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Letter color=\\\"pink\\\">B</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={slide()}\n        timing={linearTiming({ durationInFrames: 45 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={90}>\n        <Letter color=\\\"green\\\">C</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Coordinating Asynchronous Data Fetch with Remotion Render Lifecycle in React (TypeScript)\nDESCRIPTION: This TypeScript/TSX snippet demonstrates how to use Remotion's delayRender, continueRender, and cancelRender functions inside a React functional component to pause video rendering while asynchronously fetching data. The code uses useState and useCallback to coordinate the lifecycle and useEffect to trigger the fetch. Dependencies include the 'remotion' package and typical React hooks. Inputs: None (the fetch URL is hardcoded). Outputs: The rendered component with fetched data, or no content if data hasn't loaded. If data fetching fails, the render is cancelled to avoid timeouts. Ensure handles from delayRender are cleared within the Remotion time limit.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_9\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useCallback, useEffect, useState } from \"react\";\nimport { cancelRender, continueRender, delayRender } from \"remotion\";\n\nexport const MyComp = () => {\n  const [data, setData] = useState(null);\n  const [handle] = useState(() => delayRender());\n\n  const fetchData = useCallback(async () => {\n    try {\n      const response = await fetch(\"http://example.com/api\");\n      const json = await response.json();\n      setData(json);\n\n      continueRender(handle);\n    } catch (err) {\n      cancelRender(err);\n    }\n  }, [handle]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div>\n      {data ? (\n        <div>This video has data from an API! {JSON.stringify(data)}</div>\n      ) : null}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Combined Spring Animation in a Remotion Component (TypeScript)\nDESCRIPTION: This code shows a full React functional component (`AnimationMath`) utilizing Remotion hooks and the `spring` function to create an animated element. It calculates `enter` and `exit` spring values based on the current frame and video duration, subtracts them to achieve a combined `scale` animation, and applies this scale transform to a styled `div`. Requires `react` and `remotion`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-math.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Full snippet\"\nimport React from \"react\";\nimport {\n  AbsoluteFill,\n  spring,\n  useCurrentFrame,\n  useVideoConfig,\n} from \"remotion\";\n\nexport const AnimationMath: React.FC = () => {\n  const frame = useCurrentFrame();\n  const { fps, durationInFrames } = useVideoConfig();\n\n  const enter = spring({\n    fps,\n    frame,\n    config: {\n      damping: 200,\n    },\n  });\n\n  const exit = spring({\n    fps,\n    config: {\n      damping: 200,\n    },\n    durationInFrames: 20,\n    delay: durationInFrames - 20,\n    frame,\n  });\n\n  const scale = enter - exit;\n\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"white\",\n      }}\n    >\n      <div\n        style={{\n          height: 100,\n          width: 100,\n          backgroundColor: \"#4290f5\",\n          borderRadius: 20,\n          transform: `scale(${scale})`,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          display: \"flex\",\n          fontSize: 50,\n          color: \"white\",\n        }}\n      >\n        {frame}\n      </div>\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive Resize Handle – Remotion/React – TypeScript\nDESCRIPTION: Implements a React functional component, ResizeHandle, for Remotion in TypeScript, providing draggable handles on layer corners for resizing items. The handle responds to pointer events, calculates new dimensions, and invokes the provided setItem callback to update the Item. Dependencies include React, remotion (useCurrentScale), and the previously defined Item type. It requires handles for all four corners and correct scaling logic for accurate resizing. Inputs are props for the handle type, setItem method, and affected item. Output is an interactive div styled and positioned based on type and scaling; limitations include only supporting four diagonal resize types.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useCallback, useMemo} from 'react';\nimport {useCurrentScale} from 'remotion';\nimport type {Item} from './item';\n\nconst HANDLE_SIZE = 8;\n\nexport const ResizeHandle: React.FC<{\n  type: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  setItem: (itemId: number, updater: (item: Item) => Item) => void;\n  item: Item;\n}> = ({type, setItem, item}) => {\n  const scale = useCurrentScale();\n  const size = Math.round(HANDLE_SIZE / scale);\n  const borderSize = 1 / scale;\n\n  const sizeStyle: React.CSSProperties = useMemo(() => {\n    return {\n      position: 'absolute',\n      height: size,\n      width: size,\n      backgroundColor: 'white',\n      border: `${borderSize}px solid #0B84F3`,\n    };\n  }, [borderSize, size]);\n\n  const margin = -size / 2 - borderSize;\n\n  const style: React.CSSProperties = useMemo(() => {\n    if (type === 'top-left') {\n      return {\n        ...sizeStyle,\n        marginLeft: margin,\n        marginTop: margin,\n        cursor: 'nwse-resize',\n      };\n    }\n\n    if (type === 'top-right') {\n      return {\n        ...sizeStyle,\n        marginTop: margin,\n        marginRight: margin,\n        right: 0,\n        cursor: 'nesw-resize',\n      };\n    }\n\n    if (type === 'bottom-left') {\n      return {\n        ...sizeStyle,\n        marginBottom: margin,\n        marginLeft: margin,\n        bottom: 0,\n        cursor: 'nesw-resize',\n      };\n    }\n\n    if (type === 'bottom-right') {\n      return {\n        ...sizeStyle,\n        marginBottom: margin,\n        marginRight: margin,\n        right: 0,\n        bottom: 0,\n        cursor: 'nwse-resize',\n      };\n    }\n\n    throw new Error('Unknown type: ' + JSON.stringify(type));\n  }, [margin, sizeStyle, type]);\n\n  const onPointerDown = useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation();\n      if (e.button !== 0) {\n        return;\n      }\n\n      const initialX = e.clientX;\n      const initialY = e.clientY;\n\n      const onPointerMove = (pointerMoveEvent: PointerEvent) => {\n        const offsetX = (pointerMoveEvent.clientX - initialX) / scale;\n        const offsetY = (pointerMoveEvent.clientY - initialY) / scale;\n\n        const isLeft = type === 'top-left' || type === 'bottom-left';\n        const isTop = type === 'top-left' || type === 'top-right';\n\n        setItem(item.id, (i) => {\n          const newWidth = item.width + (isLeft ? -offsetX : offsetX);\n          const newHeight = item.height + (isTop ? -offsetY : offsetY);\n          const newLeft = item.left + (isLeft ? offsetX : 0);\n          const newTop = item.top + (isTop ? offsetY : 0);\n\n          return {\n            ...i,\n            width: Math.max(1, Math.round(newWidth)),\n            height: Math.max(1, Math.round(newHeight)),\n            left: Math.min(item.left + item.width - 1, Math.round(newLeft)),\n            top: Math.min(item.top + item.height - 1, Math.round(newTop)),\n            isDragging: true,\n          };\n        });\n      };\n\n      const onPointerUp = () => {\n        setItem(item.id, (i) => {\n          return {\n            ...i,\n            isDragging: false,\n          };\n        });\n        window.removeEventListener('pointermove', onPointerMove);\n      };\n\n      window.addEventListener('pointermove', onPointerMove, {passive: true});\n      window.addEventListener('pointerup', onPointerUp, {\n        once: true,\n      });\n    },\n    [item, scale, setItem, type],\n  );\n\n  return <div onPointerDown={onPointerDown} style={style} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Inferring TypeScript Type from Zod Schema for React Component Props\nDESCRIPTION: This snippet shows how to infer a TypeScript type from a previously defined Zod schema (`myCompSchema`) using `z.infer<typeof myCompSchema>`. This inferred type is then used to type the props of a React functional component (`MyComp`), ensuring type safety based on the schema.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/schemas.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from \"zod\";\n\nexport const myCompSchema = z.object({\n  propOne: z.string(),\n  propTwo: z.string(),\n});\n// ---cut---\nexport const MyComp: React.FC<z.infer<typeof myCompSchema>> = ({\n  propOne,\n  propTwo,\n}) => {\n  return (\n    <div>\n      props: {propOne}, {propTwo}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Slide Transition in Remotion (TSX)\nDESCRIPTION: This TSX code snippet shows how to implement a basic slide transition effect between two scenes ('A' and 'B') using Remotion's `TransitionSeries` component. It defines a reusable `Letter` component for the scenes and configures the transition using the `slide()` presentation factory and `linearTiming` from `@remotion/transitions`. The `slide()` presentation causes the incoming scene to push the outgoing scene off-screen.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/slide.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill } from \"remotion\";\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 200,\n        color: \"white\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { linearTiming, TransitionSeries } from \"@remotion/transitions\";\nimport { slide } from \"@remotion/transitions/slide\";\n\nconst BasicTransition = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\"#0b84f3\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={slide()}\n        timing={linearTiming({ durationInFrames: 30 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Letter color=\"pink\">B</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Lottie Animation in a Remotion Component (TSX)\nDESCRIPTION: This TSX snippet demonstrates the basic usage of the `<Lottie>` component from `@remotion/lottie`. It defines a React functional component `MyAnimation` that imports Lottie animation data from a local JSON file (`animation.json`) and passes it to the `animationData` prop of the `<Lottie>` component to render the animation within a Remotion video.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/lottie-comp.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Lottie } from \"@remotion/lottie\";\nimport animationData from \"./animation.json\";\n\nexport const MyAnimation: React.FC = () => {\n  return <Lottie animationData={animationData} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding Local Video Using staticFile in Remotion (TypeScript)\nDESCRIPTION: This example illustrates loading a local video file by referencing it through Remotion's staticFile utility. The video must be placed inside the public directory for staticFile to resolve it. Dependencies include remotion and React. The src parameter is set to a file relative to the public folder, and the output is an OffthreadVideo player rendering that file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return <OffthreadVideo src={staticFile('video.mp4')} />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Adjusting Audio Pitch with toneFrequency in Remotion TSX\nDESCRIPTION: This TSX snippet demonstrates using the `<Audio>` component from Remotion to play an audio file (`audio.mp3`). The `toneFrequency` prop is set to `0.8`, which lowers the pitch of the audio by 20% during rendering. This requires the Remotion library (`Audio`, `staticFile`, `AbsoluteFill`) and an audio file accessible via `staticFile`. The value must be between 0.01 and 2, where 1 is the original pitch.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/pitch.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {7} title=\"MyComp.tsx\"\nimport {Audio, staticFile, AbsoluteFill} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <div>Hello World!</div>\n      <Audio src={staticFile('audio.mp3')} toneFrequency={0.8} />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Cloud Run Service Information using getServiceInfo (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `getServiceInfo` function from `@remotion/cloudrun/client` to retrieve details about a specific Google Cloud Run service. It passes the region and service name as arguments and logs various properties of the returned service information object, such as name, timeout, memory/CPU limits, Remotion version, URI, region, and console URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/getServiceinfo.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {getServiceInfo} from '@remotion/cloudrun/client';\n\nconst info = await getServiceInfo({\n  region: 'us-east1',\n  serviceName: 'remotion--3-3-82--mem512mi--cpu1-0--t-500',\n});\nconsole.log(info.serviceName); // remotion--3-3-82--mem512mi--cpu1-0--t-500\nconsole.log(info.timeoutInSeconds); // 500\nconsole.log(info.memoryLimit); // \"2Gi\"\nconsole.log(info.cpuLimit); // \"1.0\"\nconsole.log(info.remotionVersion); // '4.0.1'\nconsole.log(info.uri); // \"https://remotion--3-3-82--mem512mi--cpu1-0--t-500-1a2b3c4d5e-ue.a.run.app\"\nconsole.log(info.region); // \"us-east1\"\nconsole.log(info.consoleUrl); // \"https://console.cloud.google.com/run/detail/us-east1/remotion--3-3-82--mem512mi--cpu1-0--t-500/logs\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Buffering Spinner in Play Button Area (TSX)\nDESCRIPTION: This example illustrates how to replace the default buffering spinner within the play/pause button area of the Remotion Player. It uses the `renderPlayPauseButton` prop, which accepts a function that receives `playing` and `isBuffering` states. The function returns a custom spinner component (`MySpinner`) when the player is playing and buffering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyPlayButton: React.FC = () => null;\nconst MyPauseButton: React.FC = () => null;\nconst MySpinner: React.FC = () => null;\nconst MyVideo: React.FC = () => null;\n// ---cut---\nimport {Player, RenderPlayPauseButton} from '@remotion/player';\nimport {useCallback} from 'react';\n\nexport const App: React.FC = () => {\n  const renderPlayPauseButton: RenderPlayPauseButton = useCallback(\n    ({playing, isBuffering}) => {\n      if (playing && isBuffering) {\n        return <MySpinner />;\n      }\n\n      return null;\n    },\n    [],\n  );\n\n  return (\n    <Player\n      component={MyVideo}\n      durationInFrames={120}\n      compositionWidth={1920}\n      compositionHeight={1080}\n      fps={30}\n      renderPlayPauseButton={renderPlayPauseButton}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Example Usage of serializeSrt() in TypeScript\nDESCRIPTION: Demonstrates how to import `serializeSrt` and `Caption` from `@remotion/captions`, define an array of `Caption` objects, structure them into a two-dimensional array for lines (where each inner array represents one subtitle line), and call `serializeSrt` to generate an SRT formatted string. The expected output string is shown in comments. The `lines` parameter expects a 2D array; the example uses `.map` to wrap each caption object in its own array, representing single-word lines for simplicity.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/captions/serialize-srt.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {serializeSrt, Caption} from '@remotion/captions';\n\nconst captions: Caption[] = [\n  {\n    text: 'Welcome to the Example Subtitle File!',\n    startMs: 0,\n    endMs: 2500,\n    timestampMs: 1250,\n    confidence: 1,\n  },\n  {\n    text: 'This is a demonstration of SRT subtitles.',\n    startMs: 3000,\n    endMs: 6000,\n    timestampMs: 4500,\n    confidence: 1,\n  },\n  {\n    text: 'You can use SRT files to add subtitles to your videos.',\n    startMs: 7000,\n    endMs: 10500,\n    timestampMs: 8750,\n    confidence: 1,\n  },\n];\n\nconst lines = captions.map((caption) => [caption]);\n\nconst serialized = serializeSrt({lines});\n\n/* serialized = `1\n00:00:00,000 --> 00:00:02,500\nWelcome to the Example Subtitle File!\n\n2\n00:00:03,000 --> 00:00:06,000\nThis is a demonstration of SRT subtitles.\n\n3\n00:00:07,000 --> 00:00:10,500\nYou can use SRT files to add subtitles to your videos.\n`\n*/\n```\n\n----------------------------------------\n\nTITLE: Override Render ID in Remotion Cloud Run Render - Bash\nDESCRIPTION: Presents the usage of the '--render-id-override' flag, allowing users to set a custom render ID for identification and tracking. The user is responsible for ensuring uniqueness of the render ID to avoid overwriting previous renders in the same bucket. The command must be appended to the main render command.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/render.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--render-id-override=my-custom-render-id\n```\n\n----------------------------------------\n\nTITLE: Querying Remotion Cloud Run Services (Node.js TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to query available Remotion services deployed in Cloud Run in a given region, filtering only compatible services using the 'compatibleOnly' flag. The result includes an array of service metadata, and extracts the service name for future render operations. Requires '@remotion/cloudrun/client' package and an async context.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getServices, renderMediaOnCloudrun} from '@remotion/cloudrun/client';\n\nconst services = await getServices({\n  region: 'us-east1',\n  compatibleOnly: true,\n});\n\nconst serviceName = services[0].serviceName;\n```\n\n----------------------------------------\n\nTITLE: Defining a Single-Frame Remotion Composition (JSX)\nDESCRIPTION: Refers to the `<Still>` React component, which is a specialized type of Remotion Composition designed specifically for rendering a single frame (duration of 1 frame).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/composition.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Still>\n```\n\n----------------------------------------\n\nTITLE: Parsing Media Files with webReader using @remotion/media-parser (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to use parseMedia from @remotion/media-parser with the webReader to analyze media from either a URL or a File object in a browser environment. Required dependencies include the @remotion/media-parser package and a compatible runtime that supports ES modules and async/await. The parseMedia function accepts an object with src, fields to extract (durationInSeconds and dimensions), and a reader parameter. It returns a promise resolved with parsed metadata. Key inputs are the src (URL or File) and fields; the output is an object with the requested metadata. The webReader is the default, so specifying it is optional unless switching readers or for clarity.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/web-reader.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\nimport {webReader} from '@remotion/media-parser/web';\n\nconst result = await parseMedia({\n  // Or a `File`\n  src: 'https://example.com/my-video.mp4',\n  fields: {\n    durationInSeconds: true,\n    dimensions: true,\n  },\n  reader: webReader,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Easing.bezier with Custom Control Points (JSX)\nDESCRIPTION: This snippet demonstrates using the `Easing.bezier` factory function within an `interpolate` call. It specifies custom control points (0.5, 0.01, 0.5, 1) to define the easing curve for the interpolation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\ninterpolate(0.5, [0, 1], [0, 1], {\n  easing: Easing.bezier(0.5, 0.01, 0.5, 1),\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving HTTP Redirects with @remotion/preload in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the resolveRedirect function from @remotion/preload to follow and resolve any HTTP redirects for a remote video URL before consuming it. The function returns a Promise and requires handling for both success (resolved final URL) and error cases (such as URLs not supporting CORS). Dependencies include @remotion/preload and usage of JavaScript Promises. The core parameter is the remote media URL and the output is the fully resolved, direct media URL. Note that if the resource blocks CORS, the resolution will fail.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/resolve-redirect.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { resolveRedirect } from \"@remotion/preload\";\n\nresolveRedirect(\n  \"https://player.vimeo.com/external/291648067.hd.mp4?s=94998971682c6a3267e4cbd19d16a7b6c720f345&profile_id=175&oauth2_token_id=57447761\"\n)\n  .then((src) => {\n    console.log(src); // \"https://vod-progressive.akamaized.net/...\"\n  })\n  .catch((err) => {\n    console.log(\"Could not resolve redirect\", err);\n  });\n```\n\n----------------------------------------\n\nTITLE: Re-muxing MediaRecorder Blob to WebM using @remotion/webcodecs (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to re-mux a video Blob (from MediaRecorder) into a new WebM file in the browser using `@remotion/webcodecs`. It utilizes the `convertMedia` function, providing the source Blob and specifying the target container as 'webm'. This process quickly restructures the WebM file, moving metadata and seek information to the beginning to fix duration display and seeking issues without re-encoding the media streams.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/fix-a-mediarecorder-video.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\n// The video get from the MediaRecorder as a Blob\nconst blob = new Blob([], {type: 'video/webm'});\n\nawait convertMedia({\n  src: blob,\n  container: 'webm',\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Logging Remotion Lambda Function Details with TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates importing and calling the `getFunctions` function from `@remotion/lambda/client` to retrieve compatible Remotion Lambda functions deployed in the 'eu-central-1' AWS region. It then iterates over the returned array of function information objects, logging key details such as the function name, memory size, timeout, disk size, and version for each function found. The `compatibleOnly: true` flag ensures only functions matching the installed `@remotion/lambda` version are returned.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getfunctions.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {getFunctions} from '@remotion/lambda/client';\n\nconst info = await getFunctions({\n  region: 'eu-central-1',\n  compatibleOnly: true,\n});\n\nfor (const fn of info) {\n  console.log(fn.functionName); // \"remotion-render-d8a03x\"\n  console.log(fn.memorySizeInMb); // 1536\n  console.log(fn.timeoutInSeconds); // 120\n  console.log(fn.diskSizeInMb); // 2048\n  console.log(fn.version); // \"2021-07-25\"\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Background in Main Composition - TypeScript/TSX\nDESCRIPTION: Shows how to include the Background component in the main composition for full coverage. Illustrates component import and composition. Expects Background to be defined elsewhere. Output is a video frame with applied background.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: Background.tsx\nexport const Background: React.FC = () => null;\n\n// @filename: Composition.tsx\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\nimport {Background} from './Background';\n// ---cut---\n\nexport const MyComposition: React.FC = () => {\n  return (\n    <AbsoluteFill>\n      <Background />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Invoking Remotion Lambda Render via API (JavaScript/TypeScript)\nDESCRIPTION: Initiates the Remotion Lambda rendering process. This function, `renderMediaOnLambda()`, is the primary entry point, invoked either directly through its API or indirectly via the Remotion CLI. It triggers the main Lambda function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/how-lambda-works.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrenderMediaOnLambda()\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Site Removal Command (Bash)\nDESCRIPTION: Runs the Remotion CLI command to remove all Lambda sites in the configured AWS region. It will prompt the user for confirmation before deleting each site and its associated files from the S3 bucket.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/sites/rmall.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites rmall\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Inside Remotion Composition Components - TypeScript/React\nDESCRIPTION: This snippet shows the recommended approach of passing only a URL string as defaultProps to a Remotion `<Composition>`, and fetching the actual audio data inside the consuming component. It uses `getAudioData` alongside React hooks and Remotion functions (`delayRender`, `continueRender`, `cancelRender`, `staticFile`). The main input is the audio asset URL provided via defaultProps, and the output is performing fetch within the component to remain within serialization limits. This prevents the serialization error by ensuring large objects are not passed via defaultProps.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/defaultprops-too-big.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getAudioData } from \"@remotion/media-utils\";\nimport { useEffect, useState } from \"react\";\nimport {\n  cancelRender,\n  Composition,\n  continueRender,\n  delayRender,\n  staticFile,\n} from \"remotion\";\n\n// MyComp.tsx\nconst MyComp: React.FC<{ src: string }> = ({ src }) => {\n  const [audioData, setAudioData] = useState<any>(undefined);\n  const [handle] = useState(() => delayRender());\n\n  useEffect(() => {\n    getAudioData(src)\n      .then((data) => {\n        setAudioData(data);\n        continueRender(handle);\n      })\n      .catch((e) => {\n        cancelRender(e);\n      });\n  }, [handle]);\n\n  return null;\n};\n\n// src/Root.tsx\nconst RemotionRoot = () => {\n  return (\n    <Composition\n      id=\"my-comp\"\n      durationInFrames={90}\n      width={1080}\n      height={1080}\n      fps={1080}\n      component={MyComp}\n      defaultProps={{\n        src: staticFile(\"audio.mp3\"),\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Using useState for delayPlayback Handle (Strict Mode Issue)\nDESCRIPTION: This TypeScript React component illustrates an incorrect pattern where `buffer.delayPlayback()` is called within the `useState` initializer. While it might appear functional in production, this approach causes issues in React Strict Mode because `useState` can be called twice, potentially leaving the first buffer handle unblocked. The component attempts to pause playback for 5 seconds but may fail to clean up properly under Strict Mode.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {useBufferState} from 'remotion';\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n  const [delayHandle] = useState(() => buffer.delayPlayback()); // 💥\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      delayHandle.unblock();\n    }, 5000);\n  }, []);\n\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Still Image with Remotion Cloud Run API (Node.js TypeScript)\nDESCRIPTION: This snippet renders a single still frame using the programmatic API renderStillOnCloudrun. It supplies service name, region, serve URL, composition, input props, and image format as parameters. If rendering is successful, the bucket and render IDs are logged. Requires '@remotion/cloudrun/client' and network access to a compatible deployed service.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {renderStillOnCloudrun} from '@remotion/cloudrun/client';\n\nconst url = 'string';\nconst serviceName = 'string';\n// ---cut---\n\nconst result = await renderStillOnCloudrun({\n  serviceName,\n  region: 'us-east1',\n  serveUrl: url,\n  composition: 'HelloWorld',\n  inputProps: {},\n  imageFormat: 'jpeg',\n});\n\nif (result.type === 'success') {\n  console.log(result.bucketName);\n  console.log(result.renderId);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Chrome Dependencies in Dockerfile (Debian)\nDESCRIPTION: Updates the package list and installs necessary shared libraries required for running Chrome Headless Shell within the Debian-based Docker container. These dependencies are crucial for Remotion's rendering capabilities.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_2\n\nLANGUAGE: docker\nCODE:\n```\nRUN apt-get update\nRUN apt install -y \\\n  libnss3 \\\n  libdbus-1-3 \\\n  libatk1.0-0 \\\n  libgbm-dev \\\n  libasound2 \\\n  libxrandr2 \\\n  libxkbcommon-dev \\\n  libxfixes3 \\\n  libxcomposite1 \\\n  libxdamage1 \\\n  libatk-bridge2.0-0 \\\n  libpango-1.0-0 \\\n  libcairo2 \\\n  libcups2\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM in Dockerfile\nDESCRIPTION: Installs the Node.js project dependencies using the `npm install` command (aliased as `npm i`). This step should be included if NPM is the package manager for the project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_4\n\nLANGUAGE: docker\nCODE:\n```\nRUN npm i\n```\n\n----------------------------------------\n\nTITLE: Registering Remotion Composition for Video Sequence - TypeScript\nDESCRIPTION: Shows registration of a Remotion <Composition> in the root file using a VideosInSequence component and calculateMetadata for dynamic duration calculation. Sets up the composition with width, height, and default video props and links to the metadata calculation. Requires Remotion and the previously defined VideosInSequence and calculateMetadata. Inputs: array of videos (some with local staticFile sources). Output: the registered composition available to the Remotion renderer/player. Requires that VideosInSequence.tsx and calculateMetadata exist and fulfill the required types.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/sequence.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: VideosInSequence.tsx\nimport React from 'react';\nimport {OffthreadVideo, staticFile, Series, CalculateMetadataFunction} from 'remotion';\nimport {parseMedia} from '@remotion/media-parser';\n\ntype VideoToEmbed = {\n  src: string;\n  durationInFrames: number | null;\n};\n\ntype Props = {\n  videos: VideoToEmbed[];\n};\n\nexport const calculateMetadata: CalculateMetadataFunction<Props> = async ({props}) => {\n  const fps = 30;\n  const videos = await Promise.all([\n    ...props.videos.map(async (video): Promise<VideoToEmbed> => {\n      const {slowDurationInSeconds} = await parseMedia({\n        src: video.src,\n        fields: {\n          slowDurationInSeconds: true,\n        },\n      });\n\n      return {\n        durationInFrames: Math.floor(slowDurationInSeconds * fps),\n        src: video.src,\n      };\n    }),\n  ]);\n\n  const totalDurationInFrames = videos.reduce((acc, video) => acc + video.durationInFrames!, 0);\n\n  return {\n    props: {\n      ...props,\n      videos,\n    },\n    fps,\n    durationInFrames: totalDurationInFrames,\n  };\n};\n\nexport const VideosInSequence: React.FC<Props> = ({videos}) => {\n  return (\n    <Series>\n      {videos.map((vid) => {\n        if (vid.durationInFrames === null) {\n          throw new Error('Could not get video duration');\n        }\n\n        return (\n          <Series.Sequence key={vid.src} durationInFrames={vid.durationInFrames}>\n            <OffthreadVideo src={staticFile('video.mp4')} />\n          </Series.Sequence>\n        );\n      })}\n    </Series>\n  );\n};\n\n// @filename: Root.tsx\n// ---cut---\n\nimport React from 'react';\nimport {Composition, staticFile} from 'remotion';\nimport {VideosInSequence, calculateMetadata} from './VideosInSequence';\n\nexport const Root: React.FC = () => {\n  return (\n    <Composition\n      id=\"VideosInSequence\"\n      component={VideosInSequence}\n      width={1920}\n      height={1080}\n      defaultProps={{\n        videos: [\n          {\n            durationInFrames: null,\n            src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n          },\n          {\n            durationInFrames: null,\n            src: staticFile('localvideo.mp4'),\n          },\n        ],\n      }}\n      calculateMetadata={calculateMetadata}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering an Animated Emoji Component in Remotion - TSX\nDESCRIPTION: Demonstrates how to use the <AnimatedEmoji> component within a custom React component in a Remotion project. This example requires @remotion/animated-emoji to be installed and assumes that appropriate animated emoji videos are present within the public directory. The 'emoji' prop determines which animated emoji to render. Outputs a rendered animated emoji element within the React component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animated-emoji/animated-emoji.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {AnimatedEmoji} from \"@remotion/animated-emoji\";\n\nexport const MyAnimation: React.FC = () => {\n  return <AnimatedEmoji emoji=\"blush\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Ensuring Browser Installation with Remotion Renderer - TypeScript\nDESCRIPTION: This snippet demonstrates the simplest usage of the ensureBrowser function from the @remotion/renderer package. By importing ensureBrowser and awaiting its execution, the script verifies that a supported browser is either installed or downloads it automatically for Remotion rendering. No parameters or options are specified, and no value is returned from the promise. The only dependency required is @remotion/renderer version 4.0.137 or newer.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/ensure-browser.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ensureBrowser} from '@remotion/renderer';\\n\\nawait ensureBrowser();\n```\n\n----------------------------------------\n\nTITLE: Rendering Numbered Steps Using Step in Markdown\nDESCRIPTION: Shows how to use the custom <Step> tag within Markdown to enumerate procedural steps in Remotion documentation. This approach improves clarity by visually numbering steps in lists. These tags are rendered by the docs system and do not require additional dependencies. Each <Step> tag takes a number as a child, indicating the step order. This method yields well-structured, easy-to-follow instructional lists for readers.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/docs.mdx#_snippet_1\n\nLANGUAGE: md\nCODE:\n```\n- <Step>1</Step> Step 1\\n- <Step>2</Step> Step 2\n```\n\n----------------------------------------\n\nTITLE: Rendering Media Programmatically via Remotion Lambda (TypeScript/TSX)\nDESCRIPTION: Shows a Node.js/Bun script using TypeScript/TSX to trigger a render on AWS Lambda. It imports `renderMediaOnLambda` from `@remotion/lambda/client` and calls it with configuration details like AWS region, Lambda function name, composition ID, serve URL, codec, and input props. Requires the `@remotion/lambda/client` package and a configured Lambda function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// ---cut---\nimport {renderMediaOnLambda} from '@remotion/lambda/client';\n\nconst {bucketName, renderId} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  composition: 'HelloWorld',\n  serveUrl: 'https://remotion-helloworld.vercel.app',\n  codec: 'h264',\n  inputProps: {\n    titleText: 'Hello World',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Path for Older Remotion Versions in Dockerfile\nDESCRIPTION: Sets the `PUPPETEER_EXECUTABLE_PATH` environment variable to point to the system-installed Chromium binary. This was necessary for Remotion v3.3.80 and lower to locate the browser.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_15\n\nLANGUAGE: docker\nCODE:\n```\nENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium\n```\n\n----------------------------------------\n\nTITLE: Creating a React Hook for Current Player Frame - Remotion Player - TypeScript\nDESCRIPTION: Defines a custom React hook ('useCurrentPlayerFrame') that subscribes to frame update events from a Remotion Player using a ref and leverages React's useSyncExternalStore for efficient state synchronization. This hook keeps a component in sync with the current frame of the player without re-rendering the entire app. Dependencies include '@remotion/player', 'react', and an external PlayerRef; the 'ref' parameter expects a React mutable ref pointing to a Remotion Player instance. Returns the current frame as a number. Requires the Player component to support 'frameupdate' events.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/current-time.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CallbackListener, PlayerRef} from '@remotion/player';\\nimport {useCallback, useSyncExternalStore} from 'react';\\n\\nexport const useCurrentPlayerFrame = (\\n  ref: React.RefObject<PlayerRef | null>,\\n) => {\\n  const subscribe = useCallback(\\n    (onStoreChange: () => void) => {\\n      const {current} = ref;\\n      if (!current) {\\n        return () => undefined;\\n      }\\n      const updater: CallbackListener<'frameupdate'> = ({detail}) => {\\n        onStoreChange();\\n      };\\n      current.addEventListener('frameupdate', updater);\\n      return () => {\\n        current.removeEventListener('frameupdate', updater);\\n      };\\n    },\\n    [ref],\\n  );\\n\\n  const data = useSyncExternalStore<number>(\\n    subscribe,\\n    () => ref.current?.getCurrentFrame() ?? 0,\\n    () => 0,\\n  );\\n\\n  return data;\\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Usage Event using registerUsageEvent in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and invoke the `registerUsageEvent` function from the `@remotion/licensing` package. It shows an example call to report a successful 'webcodec-conversion' event, providing the necessary public API key, host domain, and success status. The function is asynchronous and returns a promise that resolves with billing classification information.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/licensing/register-usage-point.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {registerUsageEvent} from '@remotion/licensing';\n\nawait registerUsageEvent({\n  apiKey: 'rm_pub_xxxxx',\n  event: 'webcodec-conversion',\n  host: 'https://myapp.com',\n  succeeded: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Scale Animation using interpolate() in TSX\nDESCRIPTION: Illustrates a simple scale animation where the frame number (input range `[0, 20]`) is mapped to a scale factor (output range `[0, 1]`). This snippet highlights that without additional options, the interpolated value can exceed the specified output range if the input goes beyond its range.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { interpolate, useCurrentFrame } from \"remotion\";\nconst frame = useCurrentFrame();\n// ---cut---\nconst scale = interpolate(frame, [0, 20], [0, 1]);\n```\n\n----------------------------------------\n\nTITLE: Correct CLI Usage for Rendering Artifacts - Remotion - shell\nDESCRIPTION: This shell snippet shows the CLI command to render a Remotion composition named 'MyComp', which results in an MP4 video and a secondary artifact file 'my-file.txt' (of 12 bytes) being emitted. This demonstrates how successfully using the <Artifact> component in a composition results in additional files alongside the main output. Requires Remotion CLI installed and a valid composition set up.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifact.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npx remotion render MyComp\\n+ out/MyComp.mp4\\n+ my-file.txt (12B)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Asset Loader for RemotionRiveCanvas in TSX\nDESCRIPTION: This snippet shows how to implement a custom `assetLoader` function for the `<RemotionRiveCanvas>` component. It uses `useCallback` to memoize the loader function, which intercepts asset loading requests, checks asset properties, and demonstrates fetching and decoding an image asset dynamically using `fetch` and `@rive-app/react-canvas`'s `decodeImage`. It depends on `@remotion/rive`, `@rive-app/canvas-advanced`, and `@rive-app/react-canvas`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/rive/remotionrivecanvas.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nimport {useCallback} from 'react';\nimport {RemotionRiveCanvas} from '@remotion/rive';\nimport {FileAsset, ImageAsset} from '@rive-app/canvas-advanced';\nimport {decodeImage} from '@rive-app/react-canvas';\n\nexport const MyComp: React.FC = () => {\n  const assetLoader = useCallback((asset: FileAsset, bytes: Uint8Array) => {\n    console.log('Asset properties to query', {\n      name: asset.name,\n      fileExtension: asset.fileExtension,\n      cdnUuid: asset.cdnUuid,\n      isFont: asset.isFont,\n      isImage: asset.isImage,\n      isAudio: asset.isAudio,\n      bytes,\n    });\n\n    // If the asset has a `cdnUuid`, return false to let the runtime handle\n    // loading it in from a CDN. Or if there are bytes found for the asset\n    // (aka, it was embedded), return false as there's no work needed here\n    if (asset.cdnUuid.length > 0 || bytes.length > 0) {\n      return false;\n    }\n\n    if (asset.isImage) {\n      fetch('https://picsum.photos/300/500').then(async (res) => {\n        console.log('doing this');\n        const image = await decodeImage(\n          new Uint8Array(await res.arrayBuffer()),\n        );\n\n        (asset as ImageAsset).setRenderImage(image);\n\n        // You could maintain a reference and update the image dynamically at any time.\n        // But be sure to call unref to release any references when no longer needed.\n        // This allows the engine to clean it up when it is not used by any more animations.\n        image.unref();\n      });\n\n      return true;\n    }\n\n    return false;\n  }, []);\n\n  return (\n    <RemotionRiveCanvas\n      src=\"https://example.com/myAnimation.riv\"\n      assetLoader={assetLoader}\n    />\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Adjusting Playback Speed of <Video> in Remotion (TSX)\nDESCRIPTION: This example demonstrates how to change the playback speed of a video using the `playbackRate` prop in the Remotion `<Video>` component. Setting `playbackRate={2}` makes the video play twice as fast as its original speed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, staticFile, Video} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video playbackRate={2} src={staticFile('video.webm')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sharing Composition Metadata Constants in Remotion App (TypeScript)\nDESCRIPTION: This snippet sets up the use of shared composition metadata constants like DURATION_IN_FRAMES and FPS in a separate file. These can be imported both in the Studio and the app’s Player code, preventing duplication. Requires creating a new constants.ts file and ensuring all references are updated for consistency; limited to static values unless dynamically generated in setup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio-app.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// In remotion/constants.ts\nexport const DURATION_IN_FRAMES = 300;\nexport const FPS = 30;\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Remotion Composition (TSX)\nDESCRIPTION: This snippet demonstrates the fundamental usage of the `<Composition>` component within a Remotion root component (`RemotionRoot`). It shows how to register a video by providing essential properties like the component to render (`component`), duration (`durationInFrames`), dimensions (`width`, `height`), frame rate (`fps`), and a unique identifier (`id`). `defaultProps` is shown as an empty object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/composition.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/Root.tsx\"\nconst Component: React.FC = () => null;\n// ---cut---\n\nimport { Composition } from \"remotion\";\n\nexport const RemotionRoot: React.FC = () => {\n  return (\n    <>\n      <Composition\n        component={Component}\n        durationInFrames={300}\n        width={1080}\n        height={1080}\n        fps={30}\n        id=\"test-render\"\n        defaultProps={{}}\n      />\n      {/* Additional compositions can be rendered */}\n    </>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Overwriting in Remotion Config (TypeScript)\nDESCRIPTION: Prevents Remotion from overwriting existing output files by setting `setOverwriteOutput` to `false` using the `Config` object in `remotion.config.ts`. By default (since v2.x), Remotion overwrites existing files. Depends on the `Config` object from `@remotion/cli/config`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setOverwriteOutput(false);\n```\n\n----------------------------------------\n\nTITLE: Inspecting All Track Dimensions Using Media Parser in TypeScript\nDESCRIPTION: This snippet defines an asynchronous OnVideoTrack callback that logs the entire track object, showing several key video dimension fields (codedWidth, codedHeight, displayAspectWidth, displayAspectHeight, width, height). It is used to inspect various metadata properties returned from the media parser and to understand how coded, aspect, and actual presentation dimensions relate, especially in stretched or rotated videos. The snippet requires @remotion/media-parser and expects as input a video track object. Useful for debugging or understanding how different dimension fields affect rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {OnVideoTrack} from '@remotion/media-parser';\\n\\nconst onVideoTrack: OnVideoTrack = async ({track}) => {\\n  console.log(track);\\n  // {\\n  //   codedWidth: 1440,\\n  //   codedHeight: 1080,\\n  //   displayAspectWidth: 1920,\\n  //   displayAspectHeight: 1080,\\n  //   width: 1080,\\n  //   height: 1900,\\n  //   ...\\n  // }\\n\\n  return null;\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Noise-Based Animated Dot Grid with Remotion and React (TSX)\nDESCRIPTION: This React functional component generates and animates a grid of circles using the noise3D function from @remotion/noise to offset each dot's x/y position and opacity based on procedural noise, simulating a fluid, organic movement. It depends on @remotion/noise and remotion's interpolate, useCurrentFrame, and useVideoConfig utilities. The component takes speed, circleRadius, and maxOffset as props; speed controls animation rate, circleRadius sets each circle's visual size, and maxOffset is the noise-induced displacement. Inputs required are video dimensions (from useVideoConfig) and the current frame (via useCurrentFrame); the output is an SVG element with an animated dot grid whose movement varies per frame. Performance may vary for higher grid sizes, and the approach assumes the Remotion environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/noise-visualization.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { noise3D } from \"@remotion/noise\";\nimport React from \"react\";\nimport { interpolate, useCurrentFrame, useVideoConfig } from \"remotion\";\n\nconst OVERSCAN_MARGIN = 100;\nconst ROWS = 10;\nconst COLS = 15;\n\nconst NoiseComp: React.FC<{\n  speed: number;\n  circleRadius: number;\n  maxOffset: number;\n}> = ({ speed, circleRadius, maxOffset }) => {\n  const frame = useCurrentFrame();\n  const { height, width } = useVideoConfig();\n\n  return (\n    <svg width={width} height={height}>\n      {new Array(COLS).fill(0).map((_, i) =>\n        new Array(ROWS).fill(0).map((__, j) => {\n          const x = i * ((width + OVERSCAN_MARGIN) / COLS);\n          const y = j * ((height + OVERSCAN_MARGIN) / ROWS);\n          const px = i / COLS;\n          const py = j / ROWS;\n          const dx = noise3D(\"x\", px, py, frame * speed) * maxOffset;\n          const dy = noise3D(\"y\", px, py, frame * speed) * maxOffset;\n          const opacity = interpolate(\n            noise3D(\"opacity\", i, j, frame * speed),\n            [-1, 1],\n            [0, 1]\n          );\n\n          const key = `${i}-${j}`;\n\n          return (\n            <circle\n              key={key}\n              cx={x + dx}\n              cy={y + dy}\n              r={circleRadius}\n              fill=\"gray\"\n              opacity={opacity}\n            />\n          );\n        })\n      )}\n    </svg>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Video Track Copy Feasibility using Remotion WebCodecs - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to check if a video track extracted from media can be copied to a target container without re-encoding, using canCopyVideoTrack from @remotion/webcodecs. It uses parseMedia to extract video tracks and container information, then iterates through available tracks to evaluate copy capability. Requires the @remotion/media-parser and @remotion/webcodecs packages; input parameters include the source URL, required metadata fields, and relevant track/container options. Returns a boolean indicating copy viability for each video track.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/can-copy-video-track.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\nimport {canCopyVideoTrack} from '@remotion/webcodecs';\\n\\nconst {tracks, container} = await parseMedia({\\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.webm',\\n  fields: {\\n    tracks: true,\\n    container: true,\\n  },\\n});\\n\\nfor (const track of tracks.videoTracks) {\\n  canCopyVideoTrack({\\n    outputContainer: 'webm',\\n    inputTrack: track,\\n    inputContainer: container,\\n    rotationToApply: 0,\\n    resizeOperation: null,\\n  }); // boolean\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook Payload Types - Remotion Lambda - TypeScript\nDESCRIPTION: Describes type definitions for possible webhook payloads sent by Remotion Lambda: base payload, error, success, timeout, and union type. This structure ensures that endpoints properly handle differing payloads (success, error, timeout), with key parameters such as 'renderId', 'bucketName', and customData. Dependencies: TypeScript; some referenced types ('EnhancedErrorInfo', 'AfterRenderCost') must be imported if used in implementation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype StaticWebhookPayload = {\\n  renderId: string;\\n  expectedBucketOwner: string;\\n  bucketName: string;\\n  customData: Record<string, unknown> | null;\\n};\\n\\nexport type WebhookErrorPayload = StaticWebhookPayload & {\\n  type: 'error';\\n  errors: {\\n    message: string;\\n    name: string;\\n    stack: string;\\n  }[];\\n};\\n\\nexport type WebhookSuccessPayload = StaticWebhookPayload & {\\n  type: 'success';\\n  lambdaErrors: EnhancedErrorInfo[];\\n  outputUrl: string | undefined;\\n  outputFile: string | undefined;\\n  timeToFinish: number | undefined;\\n  costs: AfterRenderCost;\\n};\\n\\nexport type WebhookTimeoutPayload = StaticWebhookPayload & {\\n  type: 'timeout';\\n};\\n\\nexport type WebhookPayload = WebhookErrorPayload | WebhookSuccessPayload | WebhookTimeoutPayload;\n```\n\n----------------------------------------\n\nTITLE: Applying Animation Effects to Stars using Trail in Remotion (TSX)\nDESCRIPTION: This snippet defines the `Stars` component. It applies a rotation (`0.3rad`) to the container, then uses the `Explosion` component to wrap a `Trail` component. The `Trail` component is configured with an `extraOffset` of 100 and an `amount` of 4, and it renders the `Star` component wrapped in a `Shrinking` effect. This creates multiple shrinking stars exploding outwards along a trail.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/Stars.tsx\"\n// @filename: Move.tsx\nexport const Move: React.FC<{\n  children: React.ReactNode;\n  delay: number;\n}> = () => null;\n// @filename: Shrinking.tsx\nexport const Shrinking: React.FC<{\n  children: React.ReactNode;\n}> = () => null;\n// @filename: Explosion.tsx\nexport const Explosion: React.FC<{\n  children: React.ReactNode;\n}> = () => null;\n// @filename: Background.tsx\nexport const Background: React.FC<{}> = () => null;\n// @filename: Dot.tsx\nexport const Dot: React.FC<{}> = () => null;\n// @filename: Star.tsx\nexport const Star: React.FC<{}> = () => null;\n// @filename: Trail.tsx\nexport const Trail: React.FC<{\n  children: React.ReactNode;\n  extraOffset: number;\n  amount: number;\n}> = () => null;\n\n// @filename: MyComposition.tsx\n// ---cut---\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\nimport {Explosion} from './Explosion';\nimport {Shrinking} from './Shrinking';\nimport {Star} from './Star';\nimport {Trail} from './Trail';\n\nexport const Stars: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        rotate: '0.3rad',\n      }}\n    >\n      <Explosion>\n        <Trail extraOffset={100} amount={4}>\n          <Shrinking>\n            <Star />\n          </Shrinking>\n        </Trail>\n      </Explosion>\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Seek Bar Component in React with TypeScript\nDESCRIPTION: This React component (`SeekBar.tsx`) provides a visual seek bar for a Remotion player. It uses the `useElementSize` hook to dynamically track its dimensions and the `useHoverState` hook to manage hover effects. The component listens to player events like `frameupdate`, `play`, and `pause` via the provided `playerRef`. It handles pointer interactions (`pointerdown`, `pointermove`, `pointerup`) allowing users to click or drag to seek to different frames in the video. Key props include `durationInFrames` and `playerRef`. Optional `inFrame` and `outFrame` props can specify an active playback range. Dependencies include React, `@remotion/player`, and `remotion`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/custom-controls.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {PlayerRef} from '@remotion/player';\nimport React, {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {interpolate} from 'remotion';\n\ntype Size = {\n  width: number;\n  height: number;\n  left: number;\n  top: number;\n};\n\n// If a pane has been moved, it will cause a layout shift without\n// the window having been resized. Those UI elements can call this API to\n// force an update\n\nexport const useElementSize = (\n  ref: React.RefObject<HTMLElement | null>,\n): Size | null => {\n  const [size, setSize] = useState<Size | null>(() => {\n    if (!ref.current) {\n      return null;\n    }\n\n    const rect = ref.current.getClientRects();\n    if (!rect[0]) {\n      return null;\n    }\n\n    return {\n      width: rect[0].width as number,\n      height: rect[0].height as number,\n      left: rect[0].x as number,\n      top: rect[0].y as number,\n    };\n  });\n\n  const observer = useMemo(() => {\n    if (typeof ResizeObserver === 'undefined') {\n      return null;\n    }\n\n    return new ResizeObserver((entries) => {\n      const {target} = entries[0];\n      const newSize = target.getClientRects();\n\n      if (!newSize?.[0]) {\n        setSize(null);\n        return;\n      }\n\n      const {width} = newSize[0];\n\n      const {height} = newSize[0];\n\n      setSize({\n        width,\n        height,\n        left: newSize[0].x,\n        top: newSize[0].y,\n      });\n    });\n  }, []);\n\n  const updateSize = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const rect = ref.current.getClientRects();\n    if (!rect[0]) {\n      setSize(null);\n      return;\n    }\n\n    setSize((prevState) => {\n      const isSame =\n        prevState &&\n        prevState.width === rect[0].width &&\n        prevState.height === rect[0].height &&\n        prevState.left === rect[0].x &&\n        prevState.top === rect[0].y;\n      if (isSame) {\n        return prevState;\n      }\n\n      return {\n        width: rect[0].width as number,\n        height: rect[0].height as number,\n        left: rect[0].x as number,\n        top: rect[0].y as number,\n        windowSize: {\n          height: window.innerHeight,\n          width: window.innerWidth,\n        },\n      };\n    });\n  }, [ref]);\n\n  useEffect(() => {\n    if (!observer) {\n      return;\n    }\n\n    const {current} = ref;\n    if (current) {\n      observer.observe(current);\n    }\n\n    return (): void => {\n      if (current) {\n        observer.unobserve(current);\n      }\n    };\n  }, [observer, ref, updateSize]);\n\n  useEffect(() => {\n    window.addEventListener('resize', updateSize);\n\n    return () => {\n      window.removeEventListener('resize', updateSize);\n    };\n  }, [updateSize]);\n\n  return useMemo(() => {\n    if (!size) {\n      return null;\n    }\n\n    return {...size, refresh: updateSize};\n  }, [size, updateSize]);\n};\n\nconst getFrameFromX = (\n  clientX: number,\n  durationInFrames: number,\n  width: number,\n) => {\n  const pos = clientX;\n  const frame = Math.round(\n    interpolate(pos, [0, width], [0, Math.max(durationInFrames - 1, 0)], {\n      extrapolateLeft: 'clamp',\n      extrapolateRight: 'clamp',\n    }),\n  );\n  return frame;\n};\n\nconst BAR_HEIGHT = 5;\nconst KNOB_SIZE = 12;\nconst VERTICAL_PADDING = 4;\n\nconst containerStyle: React.CSSProperties = {\n  userSelect: 'none',\n  WebkitUserSelect: 'none',\n  paddingTop: VERTICAL_PADDING,\n  paddingBottom: VERTICAL_PADDING,\n  boxSizing: 'border-box',\n  cursor: 'pointer',\n  position: 'relative',\n  touchAction: 'none',\n  flex: 1,\n};\n\nconst barBackground: React.CSSProperties = {\n  height: BAR_HEIGHT,\n  backgroundColor: 'rgba(0, 0, 0, 0.25)',\n  width: '100%',\n  borderRadius: BAR_HEIGHT / 2,\n};\n\nconst findBodyInWhichDivIsLocated = (div: HTMLElement) => {\n  let current = div;\n\n  while (current.parentElement) {\n    current = current.parentElement;\n  }\n\n  return current;\n};\n\nexport const useHoverState = (ref: React.RefObject<HTMLDivElement | null>) => {\n  const [hovered, setHovered] = useState(false);\n\n  useEffect(() => {\n    const {current} = ref;\n    if (!current) {\n      return;\n    }\n\n    const onHover = () => {\n      setHovered(true);\n    };\n\n    const onLeave = () => {\n      setHovered(false);\n    };\n\n    const onMove = () => {\n      setHovered(true);\n    };\n\n    current.addEventListener('mouseenter', onHover);\n    current.addEventListener('mouseleave', onLeave);\n    current.addEventListener('mousemove', onMove);\n\n    return () => {\n      current.removeEventListener('mouseenter', onHover);\n      current.removeEventListener('mouseleave', onLeave);\n      current.removeEventListener('mousemove', onMove);\n    };\n  }, [ref]);\n  return hovered;\n};\n\nexport const SeekBar: React.FC<{\n  durationInFrames: number;\n  inFrame?: number | null;\n  outFrame?: number | null;\n  playerRef: React.RefObject<PlayerRef | null>;\n}> = ({durationInFrames, inFrame, outFrame, playerRef}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const barHovered = useHoverState(containerRef);\n  const size = useElementSize(containerRef);\n  const [playing, setPlaying] = useState(false);\n  const [frame, setFrame] = useState(0);\n\n  useEffect(() => {\n    const {current} = playerRef;\n    if (!current) {\n      return;\n    }\n\n    const onFrameUpdate = () => {\n      setFrame(current.getCurrentFrame());\n    };\n\n    current.addEventListener('frameupdate', onFrameUpdate);\n\n    return () => {\n      current.removeEventListener('frameupdate', onFrameUpdate);\n    };\n  }, [playerRef]);\n\n  useEffect(() => {\n    const {current} = playerRef;\n    if (!current) {\n      return;\n    }\n\n    const onPlay = () => {\n      setPlaying(true);\n    };\n\n    const onPause = () => {\n      setPlaying(false);\n    };\n\n    current.addEventListener('play', onPlay);\n    current.addEventListener('pause', onPause);\n\n    return () => {\n      current.removeEventListener('play', onPlay);\n      current.removeEventListener('pause', onPause);\n    };\n  }, [playerRef]);\n\n  const [dragging, setDragging] = useState<\n    |\n      {\n        dragging: false;\n      }\n    | {\n        dragging: true;\n        wasPlaying: boolean;\n      }\n  >({\n    dragging: false,\n  });\n\n  const width = size?.width ?? 0;\n\n  const onPointerDown = useCallback(\n    (e: React.PointerEvent<HTMLDivElement>) => {\n      if (e.button !== 0) {\n        return;\n      }\n\n      if (!playerRef.current) {\n        return;\n      }\n\n      const posLeft = containerRef.current?.getBoundingClientRect()\n        .left as number;\n\n      const _frame = getFrameFromX(\n        e.clientX - posLeft,\n        durationInFrames,\n        width,\n      );\n      playerRef.current.pause();\n      playerRef.current.seekTo(_frame);\n      setDragging({\n        dragging: true,\n        wasPlaying: playing,\n      });\n    },\n    [durationInFrames, width, playerRef, playing],\n  );\n\n  const onPointerMove = useCallback(\n    (e: PointerEvent) => {\n      if (!size) {\n        throw new Error('Player has no size');\n      }\n\n      if (!dragging.dragging) {\n        return;\n      }\n\n      if (!playerRef.current) {\n        return;\n      }\n\n      const posLeft = containerRef.current?.getBoundingClientRect()\n        .left as number;\n\n      const _frame = getFrameFromX(\n        e.clientX - posLeft,\n        durationInFrames,\n        size.width,\n      );\n      playerRef.current.seekTo(_frame);\n    },\n    [dragging.dragging, durationInFrames, playerRef, size],\n  );\n\n  const onPointerUp = useCallback(() => {\n    setDragging({\n      dragging: false,\n    });\n    if (!dragging.dragging) {\n      return;\n    }\n\n    if (!playerRef.current) {\n      return;\n    }\n\n    if (dragging.wasPlaying) {\n      playerRef.current.play();\n    } else {\n      playerRef.current.pause();\n    }\n  }, [dragging, playerRef]);\n\n  useEffect(() => {\n    if (!dragging.dragging) {\n      return;\n    }\n\n    const body = findBodyInWhichDivIsLocated(\n      containerRef.current as HTMLElement,\n    );\n\n    body.addEventListener('pointermove', onPointerMove);\n    body.addEventListener('pointerup', onPointerUp);\n    return () => {\n      body.removeEventListener('pointermove', onPointerMove);\n      body.removeEventListener('pointerup', onPointerUp);\n    };\n  }, [dragging.dragging, onPointerMove, onPointerUp]);\n\n  const knobStyle: React.CSSProperties = useMemo(() => {\n    return {\n      height: KNOB_SIZE,\n      width: KNOB_SIZE,\n      borderRadius: KNOB_SIZE / 2,\n      position: 'absolute',\n      top: VERTICAL_PADDING - KNOB_SIZE / 2 + 5 / 2,\n      backgroundColor: '#000',\n      left: Math.max(\n        0,\n        (frame / Math.max(1, durationInFrames - 1)) * width - KNOB_SIZE / 2,\n      ),\n      boxShadow: '0 0 2px black',\n      opacity: Number(barHovered),\n      transition: 'opacity 0.1s ease',\n    };\n  }, [barHovered, durationInFrames, frame, width]);\n\n  const fillStyle: React.CSSProperties = useMemo(() => {\n    return {\n      height: BAR_HEIGHT,\n      backgroundColor: '#000',\n      width: ((frame - (inFrame ?? 0)) / (durationInFrames - 1)) * 100 + '%',\n      marginLeft: ((inFrame ?? 0) / (durationInFrames - 1)) * 100 + '%',\n      borderRadius: BAR_HEIGHT / 2,\n    };\n  }, [durationInFrames, frame, inFrame]);\n\n  const active: React.CSSProperties = useMemo(() => {\n    return {\n      height: BAR_HEIGHT,\n      backgroundColor: '#000',\n      opacity: 0.6,\n      width:\n        (((outFrame ?? durationInFrames - 1) - (inFrame ?? 0)) /\n          (durationInFrames - 1)) *\n          100 +\n        '%',\n      marginLeft: ((inFrame ?? 0) / (durationInFrames - 1)) * 100 + '%',\n      borderRadius: BAR_HEIGHT / 2,\n      position: 'absolute',\n    };\n  }, [durationInFrames, inFrame, outFrame]);\n\n  return (\n    <div\n      ref={containerRef}\n      onPointerDown={onPointerDown}\n      style={containerStyle}\n    >\n      <div style={barBackground}>\n        <div style={active} />\n        <div style={fillStyle} />\n      </div>\n      <div style={knobStyle} />\n    </div>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video using Remotion Cloud Run CLI - Bash\nDESCRIPTION: Demonstrates usage of the 'npx remotion cloudrun render' CLI command to render a video on GCP using a full serve URL, composition ID, and custom service name. This command requires Remotion to be installed and deployed on Google Cloud. Parameters include the URL to the deployed site, the composition to render, and the specific Cloud Run service to use for rendering. Output location is not specified, so the rendered video is stored in Cloud Storage by default.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/render.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun render https://storage.googleapis.com/remotioncloudrun-123asd321/sites/abcdefgh/index.html tiles --service-name=remotion--3-3-82--mem512mi--cpu1-0--t-800\n```\n\n----------------------------------------\n\nTITLE: Triggering Remotion Lambda Video Render from Python\nDESCRIPTION: This snippet initializes the RemotionClient using environment variables, sets up a video rendering request with specific parameters (composition, privacy, image format, and input properties), and polls for render status until completion. It demonstrates using the render_media_on_lambda API, handling credentials, and checking real-time progress. Requires the remotion-lambda package (same version as remotion) and dotenv for env loading; expects REMOTION_APP_REGION, REMOTION_APP_FUNCTION_NAME, and REMOTION_APP_SERVE_URL environment variables. Input parameters include composition name, privacy level, image format, and input_props payload; outputs include the render ID, bucket name, and URL to the final video file. There's a limitation with large input_props (>200KB not supported).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/python.mdx#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom remotion_lambda import RenderMediaParams, Privacy, ValidStillImageFormats\nfrom remotion_lambda import RemotionClient\nimport os\nfrom dotenv import load_dotenv\n\n\nload_dotenv()\n\n# Load env variables\nREMOTION_APP_REGION = os.getenv('REMOTION_APP_REGION')\nif not REMOTION_APP_REGION:\n    raise Exception(\"REMOTION_APP_REGION is not set\")\n\nREMOTION_APP_FUNCTION_NAME = os.getenv('REMOTION_APP_FUNCTION_NAME')\nif not REMOTION_APP_FUNCTION_NAME:\n    raise Exception(\"REMOTION_APP_FUNCTION_NAME is not set\")\n\nREMOTION_APP_SERVE_URL = os.getenv('REMOTION_APP_SERVE_URL')\nif not REMOTION_APP_SERVE_URL:\n    raise Exception(\"REMOTION_APP_SERVE_URL is not set\")\n\n# Construct client\nclient = RemotionClient(region=REMOTION_APP_REGION,\n                        serve_url=REMOTION_APP_SERVE_URL,\n                        function_name=REMOTION_APP_FUNCTION_NAME)\n\n# Set render request\nrender_params = RenderMediaParams(\n    composition=\"react-svg\",\n    privacy=Privacy.PUBLIC,\n    image_format=ValidStillImageFormats.JPEG,\n    input_props={\n        'hi': 'there'\n    },\n)\n\nrender_response = client.render_media_on_lambda(render_params)\nif render_response:\n    # Execute render request\n\n    print(\"Render ID:\", render_response.render_id)\n    print(\"Bucket name:\", render_response.bucket_name)\n\n    # Execute progress request\n    progress_response = client.get_render_progress(\n        render_id=render_response.render_id, bucket_name=render_response.bucket_name)\n\n    while progress_response and not progress_response.done:\n        print(\"Overall progress\")\n        print(str(progress_response.overallProgress * 100) + \"%\")\n        progress_response = client.get_render_progress(\n            render_id=render_response.render_id, bucket_name=render_response.bucket_name)\n    print(\"Render done!\", progress_response.outputFile)\n```\n\n----------------------------------------\n\nTITLE: Adding a Debugging Label with delayRender (Remotion, TypeScript)\nDESCRIPTION: Demonstrates how to call delayRender() in a Remotion project with a label string indicating the reason for the delay. This label will be referenced in timeout error messages, making it easier to identify the problematic call site. Requires 'remotion' as a dependency. 'delayRender' is invoked with a message parameter such as 'Fetching data from API...'. Outputs a handle which must be cleared by continueRender(). Inputs: optional descriptive string for context. Output: unique handle for this render delay. This enhances error traceability when multiple delays exist.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/timeout.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { delayRender } from \"remotion\";\n\n// ---cut---\n\ndelayRender(\"Fetching data from API...\");\n```\n\n----------------------------------------\n\nTITLE: Generating CSS skewX() Transform in Remotion (TSX)\nDESCRIPTION: Shows how to use the `skewX` function from `@remotion/animation-utils` to create a CSS `skewX()` transform string. It accepts the angle as a number (degrees), a string with unit, or a number and an optional unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { skewX } from \"@remotion/animation-utils\";\n\nconst transform = skewX(45);\n// => \"skewX(45deg)\"\n\nconst transform2 = skewX(\"45deg\");\n// => \"skewX(45deg)\"\n\nconst transform3 = skewX(1, \"rad\");\n// => \"skewX(1rad)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Generating CSS scaleY() Transform in Remotion (TSX)\nDESCRIPTION: Shows how to use the `scaleY` function from `@remotion/animation-utils` to generate a CSS `scaleY()` transform string. It takes a single numerical argument representing the scaling factor along the Y-axis.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { scaleY } from \"@remotion/animation-utils\";\n\nconst transform = scaleY(2);\n// => \"scaleY(2)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Blank Remotion Project (bun)\nDESCRIPTION: Uses bun to initialize a new, blank Remotion video project in the current directory. This command sets up the basic file structure and dependencies required for a Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun create video --blank\n```\n\n----------------------------------------\n\nTITLE: Deleting Remotion Lambda Function with PNPM - Bash\nDESCRIPTION: This command deletes the Remotion Lambda function by running the 'delete-fn' script using pnpm. pnpm and other prerequisites should be installed. Ensures resource cleanup in AWS.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run delete-fn\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables in a .env File for Remotion\nDESCRIPTION: Provides an example `.env` file located in the project root. Variables defined here (like `MY_VAR` and `ANOTHER_VAR`) are automatically loaded into `process.env` by the Remotion CLI or need to be loaded manually using the `dotenv` package when using Node.JS APIs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/env-variables.mdx#_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nMY_VAR=hello\nANOTHER_VAR=world\n```\n\n----------------------------------------\n\nTITLE: Updating Default Props Based on Saved Props with updateDefaultProps in TypeScript\nDESCRIPTION: This snippet demonstrates using `updateDefaultProps` to access the *saved* default props through the `savedDefaultProps` argument within the callback function. It allows creating new temporary default props by merging the saved state with overrides (like setting `color` to `'green'`). This is useful for updating based on the last persistently saved configuration. Requires `@remotion/studio`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/update-default-props.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @target: esnext\nimport { updateDefaultProps } from \"@remotion/studio\";\n\nupdateDefaultProps({\n  compositionId: \"my-composition\",\n  defaultProps: ({ savedDefaultProps }) => {\n    return {\n      ...savedDefaultProps,\n      color: \"green\",\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Remotion Renderer Logs in CloudWatch - Plaintext\nDESCRIPTION: This log query string is used in AWS CloudWatch to filter log streams associated with a specific render request. By specifying the 'method' as 'renderer' and providing the 'renderId', you can isolate logs for an individual Remotion render. No dependencies are required beyond access to CloudWatch logs with the appropriate permissions. Replace [render-id] with the actual render identifier. The result enables focused debugging by presenting only the relevant logs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/debug.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"method=renderer,renderId=[render-id]\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Remotion Webpack Config for TailwindCSS Integration (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to override the Webpack configuration in remotion.config.ts to properly support TailwindCSS v2. It updates the module rules to remove existing CSS handling, then adds a rule for .css files that chains style-loader, css-loader, and postcss-loader with required plugins. Dependencies include @remotion/cli/config and all Tailwind/PostCSS dependencies; the code is placed inside remotion.config.ts. The input is the current Webpack config, and the output is an enhanced config supporting TailwindCSS.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-2.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\n// ---cut---\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return {\n    ...currentConfiguration,\n    module: {\n      ...currentConfiguration.module,\n      rules: [\n        ...(currentConfiguration.module?.rules\n          ? currentConfiguration.module.rules\n          : []\n        ).filter((rule) => {\n          if (!rule) {\n            return false;\n          }\n          if (rule === \"...\") {\n            return false;\n          }\n          if (rule.test?.toString().includes(\".css\")) {\n            return false;\n          }\n          return true;\n        }),\n        {\n          test: /\\.css$/i,\n          use: [\n            \"style-loader\",\n            \"css-loader\",\n            {\n              loader: \"postcss-loader\",\n              options: {\n                postcssOptions: {\n                  plugins: [\n                    \"postcss-preset-env\",\n                    \"tailwindcss\",\n                    \"autoprefixer\",\n                  ],\n                },\n              },\n            },\n          ],\n        },\n      ],\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Render Output Buffer from S3 using getAwsClient in TSX\nDESCRIPTION: Demonstrates how to use `getAwsClient` from `@remotion/lambda/client` to obtain an S3 client and the corresponding SDK module. It then uses the client to send a `GetObjectCommand` to retrieve the body of a rendered file (identified by `progress.outKey`) from a specified S3 bucket as a Readable stream. This requires prior knowledge of the render's progress (`getRenderProgress`) to get the output key.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getawsclient.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Import from \"@remotion/lambda\" instead before Remotion v4.0.60\nimport {getAwsClient, getRenderProgress} from '@remotion/lambda/client';\nimport {Readable} from 'stream';\n\nconst bucketName = 'remotionlambda-d9mafgx';\n\nconst getFileAsBuffer = async () => {\n  const progress = await getRenderProgress({\n    renderId: 'd7nlc2y',\n    bucketName: 'remotionlambda-d9mafgx',\n    functionName: 'remotion-render-la8ffw',\n    region: 'us-east-1',\n  });\n\n  if (!progress.outKey) {\n    // Video not yet rendered\n    return;\n  }\n\n  const {client, sdk} = getAwsClient({region: 'us-east-1', service: 's3'});\n\n  const data = client.send(\n    new sdk.GetObjectCommand({\n      Bucket: bucketName,\n      Key: progress.outKey,\n    }),\n  );\n\n  return data.Body as Readable;\n};\n```\n\n----------------------------------------\n\nTITLE: Changing Video Playback Speed in Remotion with OffthreadVideo (TypeScript)\nDESCRIPTION: This example sets the playbackRate prop to 2, doubling the speed at which the video is played. Dependencies are React and remotion, and the source video is accessed with staticFile. The playbackRate parameter must be a positive number; this technique only supports constant speeds.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return <OffthreadVideo src={staticFile('video.mp4')} playbackRate={2} />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserLog Interface and getCompositions Callback Usage - TypeScript\nDESCRIPTION: Illustrates advanced TypeScript usage for structured browser log capture during Remotion project evaluation. Defines interface ConsoleMessageLocation, the aggregated BrowserLog type for event logging, and demonstrates optional use of the onBrowserLog callback in getCompositions. Dependencies include TypeScript, Remotion APIs, and standard console operations. The sample highlights how to capture and format structured log output with stack-trace information, showing how to utilize this callback for debugging or instrumentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/get-compositions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConsoleMessageLocation {\n  /**\n   * URL of the resource if known or `undefined` otherwise.\n   */\n  url?: string;\n  /**\n   * 0-based line number in the resource if known or `undefined` otherwise.\n   */\n  lineNumber?: number;\n  /**\n   * 0-based column number in the resource if known or `undefined` otherwise.\n   */\n  columnNumber?: number;\n}\n\ntype BrowserLog = {\n  text: string;\n  stackTrace: ConsoleMessageLocation[];\n  type: 'log' | 'debug' | 'info' | 'error' | 'warning' | 'dir' | 'dirxml' | 'table' | 'trace' | 'clear' | 'startGroup' | 'startGroupCollapsed' | 'endGroup' | 'assert' | 'profile' | 'profileEnd' | 'count' | 'timeEnd' | 'verbose';\n};\n\nconst getCompositions = (options: {onBrowserLog?: (log: BrowserLog) => void}) => {};\n// ---cut---\ngetCompositions({\n  // ...\n  onBrowserLog: (info) => {\n    console.log(`${info.type}: ${info.text}`);\n    console.log(\n      info.stackTrace\n        .map((stack) => {\n          return `  ${stack.url}:${stack.lineNumber}:${stack.columnNumber}`;\n        })\n        .join('\\n'),\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling SCSS in Remotion Webpack Configuration with TypeScript\nDESCRIPTION: This snippet imports the enableScss utility and applies it to the current webpack configuration by overriding it via Remotion's Config.overrideWebpackConfig. It requires the @remotion/cli/config and @remotion/enable-scss packages. The callback receives the existing webpack configuration and returns a modified configuration supporting SCSS/SASS. The input is the current configuration object, with the output being an enhanced configuration that handles .scss files. The code is limited to simply adding SCSS support and doesn't combine other settings.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/enable-scss/enable-scss.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\nimport { enableScss } from \"@remotion/enable-scss\";\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableScss(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Audio Tracks for Opus Re-encodability using TypeScript\nDESCRIPTION: This snippet shows how to use `parseMedia` from `@remotion/media-parser` to extract audio tracks from a video file and then loop through them, calling `canReencodeAudioTrack` from `@remotion/webcodecs` for each track. It checks if each audio track can be re-encoded to the 'opus' codec with a specific bitrate (128000) while keeping the original sample rate (`null`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/can-reencode-audio-track.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\nimport {canReencodeAudioTrack} from '@remotion/webcodecs';\n\nconst {tracks} = await parseMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  fields: {\n    tracks: true,\n  },\n});\n\nfor (const track of tracks.audioTracks) {\n  await canReencodeAudioTrack({\n    track,\n    audioCodec: 'opus',\n    bitrate: 128000,\n    sampleRate: null,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Whisper.cpp via @remotion/install-whisper-cpp in TypeScript\nDESCRIPTION: This TypeScript code demonstrates the complete workflow to set up Whisper.cpp for local audio transcription using the @remotion/install-whisper-cpp package. It installs the Whisper.cpp binary to a specified directory, downloads the required \"medium.en\" model, and runs transcription to process 16KHz wav audio files, returning token-level timestamps. The snippet also shows an optional post-processing step to convert raw transcriptions into grouped captions, and includes commented instructions for audio preprocessing with ffmpeg. The key inputs are the installation path, Whisper.cpp version, model name, and audio file path. Main dependencies are the @remotion/install-whisper-cpp package (with Whisper.cpp >= 1.5.5 binary and compatible model) and node APIs (path, child_process for optional conversion). The primary output consists of structured transcription tokens and formatted captions, ready to use for subtitle generation or display. Limitations: audio must be pre-converted to 16KHz wav format; the example assumes an environment supporting ES Modules and top-level await.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/install-whisper-cpp/index.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport path from 'path';\nimport {downloadWhisperModel, installWhisperCpp, transcribe, convertToCaptions} from '@remotion/install-whisper-cpp';\n\nconst to = path.join(process.cwd(), 'whisper.cpp');\n\nawait installWhisperCpp({\n  to,\n  version: '1.5.5',\n});\n\nawait downloadWhisperModel({\n  model: 'medium.en',\n  folder: to,\n});\n\n// Convert the audio to a 16KHz wav file first if needed:\n// import {execSync} from 'child_process';\n// execSync('ffmpeg -i /path/to/audio.mp4 -ar 16000 /path/to/audio.wav -y');\n\nconst {transcription} = await transcribe({\n  model: 'medium.en',\n  whisperPath: to,\n  whisperCppVersion: '1.5.5',\n  inputPath: '/path/to/audio.wav',\n  tokenLevelTimestamps: true,\n});\n\nfor (const token of transcription) {\n  console.log(token.timestamps.from, token.timestamps.to, token.text);\n}\n\n// Optional: Apply our recommended postprocessing\nconst {captions} = convertToCaptions({\n  transcription,\n  combineTokensWithinMilliseconds: 200,\n});\n\nfor (const line of captions) {\n  console.log(line.text, line.startInSeconds);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying AWS Lambda Quotas via Remotion CLI - Shell\nDESCRIPTION: This snippet demonstrates how to use the Remotion CLI to print the current AWS Lambda concurrency and burst limits for your AWS account and specified region. Requires the Remotion CLI to be installed and AWS account credentials configured. The command accepts an optional --region flag to specify the AWS region. The output includes current concurrency limit, burst limits, and links to any ongoing support requests. The command is executed using npx to ensure the correct Remotion CLI version is used.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/quotas.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda quotas\n```\n\n----------------------------------------\n\nTITLE: Default Download Location for Chrome for Testing\nDESCRIPTION: Specifies the default directory structure within `node_modules` where Remotion downloads and installs Chrome for Testing when that mode is selected. The exact file structure within this directory varies depending on the operating system (`[platform]`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nnode_modules/.remotion/chrome-for-testing/[platform]\n```\n\n----------------------------------------\n\nTITLE: Applying the Easing.in Helper (JSX)\nDESCRIPTION: This snippet shows how to use the `Easing.in` helper within an options object, wrapping another easing function (`Easing.ease`). It explicitly specifies that `Easing.ease` should run forwards.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  easing: Easing.in(Easing.ease);\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Overriding Remotion Webpack Config for TypeScript Aliases\nDESCRIPTION: This TypeScript snippet demonstrates how to use `Config.overrideWebpackConfig` from `@remotion/cli/config` to manually add a path alias (`lib`) to the Webpack configuration. It maps the 'lib' alias to the absolute path `src/lib` within the project directory, resolving it using Node.js `path.join` and `process.cwd()`. This manual approach requires updating the Webpack config for each alias defined in `tsconfig.json`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/ts-aliases.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport path from 'path';\nimport {Config} from '@remotion/cli/config';\n\nConfig.overrideWebpackConfig((config) => {\n  return {\n    ...config,\n    resolve: {\n      ...config.resolve,\n      alias: {\n        ...(config.resolve?.alias ?? {}),\n        lib: path.join(process.cwd(), 'src', 'lib'),\n      },\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Executing the Deno-compatible Remotion CLI using npx\nDESCRIPTION: This command demonstrates how to run the experimental Deno-compatible version of the Remotion CLI, named `remotiond`. It uses `npx` to execute the command, which handles fetching and running the package. This command should be used instead of the standard `remotion` command when attempting to use Remotion with Deno.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/deno.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotiond\n```\n\n----------------------------------------\n\nTITLE: Emitting an Artifact on the First Frame - Remotion Artifact Component - TypeScript/React\nDESCRIPTION: This code defines a React component using Remotion's <Artifact> to emit a text file named 'my-file.txt' with the content 'Hello World!' only on the first animation frame. It imports the 'Artifact' component and 'useCurrentFrame' hook from Remotion. When the rendered frame index is zero, the Artifact is returned; otherwise, null is rendered. Dependencies include Remotion, React, and a Remotion rendering context. The 'filename' and 'content' props are required, and filenames must be unique across frames.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifact.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Artifact, useCurrentFrame} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  const frame = useCurrentFrame();\\n\\n  return frame === 0 ? <Artifact filename=\\\"my-file.txt\\\" content=\\\"Hello World!\\\" /> : null;\\n};\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Skia Template with Yarn (Bash)\nDESCRIPTION: This command uses `yarn create` to execute the `create-video` script provided by Remotion, initializing a new project based on the Skia template specified by the `--skia` argument.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/skia.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nyarn create video --skia\n```\n```\n\n----------------------------------------\n\nTITLE: Using speculateServiceName to Predict Cloud Run Service Name (TypeScript)\nDESCRIPTION: Demonstrates importing and calling the `speculateServiceName` function from `@remotion/cloudrun`. It takes an object with `memoryLimit`, `cpuLimit`, and `timeoutSeconds` to predict the corresponding Cloud Run service name based on the current Remotion version and the provided parameters. The predicted name is then printed to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/speculateservicename.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {speculateServiceName} from '@remotion/cloudrun';\n\nconst speculatedServiceName = speculateServiceName({\n  memoryLimit: '2Gi',\n  cpuLimit: '2',\n  timeoutSeconds: 300,\n});\n\nconsole.log(speculatedServiceName); // remotion--3-3-96--mem2gi--cpu2-0--t-300\n```\n\n----------------------------------------\n\nTITLE: Creating Spring Animation Primitives with Remotion (TypeScript)\nDESCRIPTION: This snippet creates spring-based animation values using Remotion's spring and interpolate functions for use as animation drivers in React components. It defines the variables 'up', 'scale', and 'launch', where 'up' uses a delayed spring, 'scale' handles scaling, and 'launch' uses interpolation to animate translation on the Y axis. Dependencies: remotion (spring, interpolate). Inputs: frame (current animation frame), fps (frames per second). Outputs: Calculated transform values for animated SVG elements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/figma.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { interpolate, spring } from \\\"remotion\\\";\nconst fps = 30;\nconst frame = 0;\n// ---cut---\nconst up = spring({\n  fps,\n  frame: frame - 20,\n  config: {\n    damping: 20,\n    mass: 15,\n  },\n});\n\nconst scale = spring({\n  fps,\n  frame,\n  config: {\n    stiffness: 200,\n  },\n});\n\nconst launch = `translateY(${interpolate(up, [0, 1], [0, -3000])}px)`;\n```\n\n----------------------------------------\n\nTITLE: Fetching Remotion Lambda Sites with getSites() in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to use the `getSites` function from `@remotion/lambda/client` to retrieve information about deployed Remotion projects and S3 buckets in a specified AWS region ('eu-central-1' in this case). It asynchronously calls the function, then iterates through the returned `sites` and `buckets` arrays, logging details like site ID, bucket name, last modified timestamp, size, serve URL, bucket region, name, and creation date. Requires the `@remotion/lambda/client` package and appropriate AWS credentials/configuration for the specified region.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getsites.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {getSites} from '@remotion/lambda/client';\n\nconst {sites, buckets} = await getSites({\n  region: 'eu-central-1',\n});\n\nfor (const site of sites) {\n  console.log(site.id); // A unique ID for referring to that project\n  console.log(site.bucketName); // In which bucket the site resides in.\n  console.log(site.lastModified); // A unix timestamp, but may also be null\n  console.log(site.sizeInBytes); // Size of all contents in the folder\n  console.log(site.serveUrl); // URL of the deployed site that you can pass to `renderMediaOnLambda()`\n}\n\nfor (const bucket of buckets) {\n  console.log(bucket.region); // 'eu-central-1'\n  console.log(bucket.name); // The name of the S3 bucket.\n  console.log(bucket.creationDate); // A unix timestamp of when the site was created.\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exported Types for interpolate() Options in TSX\nDESCRIPTION: Illustrates how to leverage the exported TypeScript types `ExtrapolateType` and `InterpolateOptions` from the 'remotion' library. This enhances type safety when defining and using the options object for the `interpolate` function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExtrapolateType, InterpolateOptions } from \"remotion\";\n\nconst extrapolate: ExtrapolateType = \"clamp\";\nconst option: InterpolateOptions = { extrapolateLeft: extrapolate };\n```\n\n----------------------------------------\n\nTITLE: Clearing Webpack Cache (Bash)\nDESCRIPTION: Removes the Webpack cache directory (`node_modules/.cache`) using the `rm -rf` command in Bash. This step is often necessary after modifying Webpack configurations, such as enabling WebAssembly, to ensure the changes are picked up by the build process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf node_modules/.cache\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Zod Schema for Component Props in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a basic schema for Remotion component props using the Zod library. It utilizes `z.object()` to structure the schema and `z.string()` to specify the type for each prop (`propOne` and `propTwo`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/schemas.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from \"zod\";\n\nexport const myCompSchema = z.object({\n  propOne: z.string(),\n  propTwo: z.string(),\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Duration with getAudioDurationInSeconds in React/TSX\nDESCRIPTION: This TypeScript snippet demonstrates using the `getAudioDurationInSeconds()` function within a React functional component. It uses `useCallback` to define an asynchronous function `getDuration` that fetches the duration for a local static file (`staticFile`), an imported audio module (`music`), and a remote audio URL. The `useEffect` hook calls this function when the component mounts. The function requires the `src` of the audio file as input and returns a Promise resolving to the duration in seconds.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-audio-duration-in-seconds.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport {useCallback, useEffect} from 'react';\nimport {staticFile} from 'remotion';\n// ---cut---\nimport {getAudioDurationInSeconds} from '@remotion/media-utils';\nimport music from './music.mp3';\n\nconst MyComp: React.FC = () => {\n  const getDuration = useCallback(async () => {\n    const publicFile = await getAudioDurationInSeconds(staticFile('voiceover.wav')); // 33.221\n    const imported = await getAudioDurationInSeconds(music); // 127.452\n    const remote = await getAudioDurationInSeconds('https://example.com/remote-audio.aac'); // 50.24\n  }, []);\n\n  useEffect(() => {\n    getDuration();\n  }, []);\n\n  return null;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Frame Range for Rendering in Remotion Config (TypeScript)\nDESCRIPTION: Specifies the frame or range of frames to render using the `Config` object in `remotion.config.ts`. Pass a single number for a still frame (zero-indexed) or a two-element array `[start, end]` for a video subset (inclusive). Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v2.0.0. The `--frames` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setFrameRange(90); // To render only the 91st frame\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setFrameRange([0, 20]); // Render a video only containing the first 21 frames\n```\n\n----------------------------------------\n\nTITLE: Distinguishing Compositions from Sequences (JSX)\nDESCRIPTION: Mentions the `<Sequence>` component to clarify that it represents a different concept within Remotion compared to a `<Composition>`. Compositions are top-level render targets, while Sequences manage timing within a composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/composition.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Sequence>\n```\n\n----------------------------------------\n\nTITLE: Defining Transcription Return Types for Whisper.cpp in TypeScript\nDESCRIPTION: Provides exhaustive TypeScript type definitions for the objects produced by transcribe(), such as Timestamps, Offsets, WordLevelToken, TranscriptionItem, TranscriptionItemWithTimestamp, Model, Params, Result, and the generic TranscriptionJson. These types ensure type-safe usage and parsing of the transcribe() output, facilitating integration with strongly-typed workflows in VSCode or other TypeScript editors. The types cover model metadata, parameters, and word-level transcription structure, clarifying expected shapes of inputs and outputs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/install-whisper-cpp/transcribe.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Timestamps = {\\n  from: string;\\n  to: string;\\n};\\n\\ntype Offsets = {\\n  from: number;\\n  to: number;\\n};\\n\\ntype WordLevelToken = {\\n  t_dtw: number;\\n  text: string;\\n  timestamps: Timestamps;\\n  offsets: Offsets;\\n  id: number;\\n  p: number;\\n};\\n\\ntype TranscriptionItem = {\\n  timestamps: Timestamps;\\n  offsets: Offsets;\\n  text: string;\\n};\\n\\ntype TranscriptionItemWithTimestamp = TranscriptionItem & {\\n  tokens: WordLevelToken[];\\n};\\n\\ntype Model = {\\n  type: string;\\n  multilingual: boolean;\\n  vocab: number;\\n  audio: {\\n    ctx: number;\\n    state: number;\\n    head: number;\\n    layer: number;\\n  };\\n  text: {\\n    ctx: number;\\n    state: number;\\n    head: number;\\n    layer: number;\\n  };\\n  mels: number;\\n  ftype: number;\\n};\\n\\ntype Params = {\\n  model: string;\\n  language: string;\\n  translate: boolean;\\n};\\n\\ntype Result = {\\n  language: string;\\n};\\n\\nexport type TranscriptionJson<WithTokenLevelTimestamp extends boolean> = {\\n  systeminfo: string;\\n  model: Model;\\n  params: Params;\\n  result: Result;\\n  transcription: true extends WithTokenLevelTimestamp ? TranscriptionItemWithTimestamp[] : TranscriptionItem[];\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Chunk Rendering Parameters (JavaScript/TypeScript)\nDESCRIPTION: Specifies parameters for rendering individual video chunks, potentially for custom distributed rendering setups. The `frameRange` option defines the specific frame segment to render, while `audioCodec: \"pcm-16\"` sets the audio format to PCM 16-bit, facilitating concatenation with tools like FFmpeg. These are likely options for a rendering function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/how-lambda-works.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nframeRange\n```\n\nLANGUAGE: javascript\nCODE:\n```\naudioCodec: \"pcm-16\"\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Remotion Project using pnpm\nDESCRIPTION: This command uses pnpm's `create` command to scaffold a new Remotion project, specifically requesting the 'video' template (equivalent to Remotion's scaffolder). It prompts the user for further configuration. This is the command to use with the pnpm package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/getting-started.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Use pnpm as the package manager\"\npnpm create video\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Assets and Lambda Function\nDESCRIPTION: Runs the `deploy.mjs` Node.js script to deploy the Remotion video rendering logic as an AWS Lambda function and upload associated site assets to S3. Requires AWS credentials configured in the `.env` file and Node.js installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode deploy.mjs\n```\n\n----------------------------------------\n\nTITLE: Emitting a Frame Thumbnail as an Artifact in Remotion (TSX)\nDESCRIPTION: Illustrates using the `<Artifact>` component to save the current frame as an image artifact (`thumbnail.jpeg`). This is achieved by setting the `content` prop to the special value `Artifact.Thumbnail`. The artifact is generated only on the first frame, determined by `useCurrentFrame`. The actual image format (e.g., JPEG, PNG) is determined by the render settings, not the filename extension. Requires the `remotion` library.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifacts.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Artifact, useCurrentFrame} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n  const frame = useCurrentFrame();\n  return <>{frame === 0 ? <Artifact content={Artifact.Thumbnail} filename=\"thumbnail.jpeg\" /> : null}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Emitting a Text Artifact in a Remotion Component (TSX)\nDESCRIPTION: Shows how to use the `<Artifact>` component within a React functional component (`MyComp`) to generate a file (`captions.srt`) during a Remotion render. The artifact is conditionally rendered only on the first frame (frame 0) using the `useCurrentFrame` hook. It depends on the `remotion` library (`Artifact`, `useCurrentFrame`) and assumes a `generateSubtitles` function provides the artifact content.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifacts.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: subtitles.tsx\n\nexport const generateSubtitles = () => {\n  return ``;\n};\n// @filename: MyComp.tsx\n// ---cut---\nimport React from 'react';\nimport {Artifact, useCurrentFrame} from 'remotion';\nimport {generateSubtitles} from './subtitles';\n\nexport const MyComp: React.FC = () => {\n  const frame = useCurrentFrame();\n  return <>{frame === 0 ? <Artifact filename=\"captions.srt\" content={generateSubtitles()} /> : null}</>;\n};\n```\n\n----------------------------------------\n\nTITLE: Combining CSS Transforms with makeTransform() in Remotion (TSX)\nDESCRIPTION: Demonstrates using the `makeTransform` function from `@remotion/animation-utils` to combine multiple transformation functions (`rotate` and `translate`) into a single CSS `transform` string. The resulting string is then applied to the `style` prop of a `div` element.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { makeTransform, rotate, translate } from \"@remotion/animation-utils\";\n\nconst transform = makeTransform([rotate(45), translate(50, 50)]);\n// => \"rotate(45deg) translate(50px, 50px)\"\n\nconst markup = <div style={{ transform }} />;\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Timeline Editor in Remotion Player (TypeScript)\nDESCRIPTION: This snippet renders the Main timeline editor component within the Remotion Player, using the inputProps pattern and providing critical visual configuration (compositionHeight, compositionWidth, durationInFrames, fps, overflowVisible). No built-in controls are shown; custom controls can be added externally. It ties together the previous infrastructure to create a user-facing, interactive composition for preview or authoring.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: item.ts\\n// @include: item\\n// @filename: ResizeHandle.tsx\\n// @include: ResizeHandle\\n// @filename: SelectionOutline.tsx\\n// @include: SelectionOutline\\n// @filename: SortedOutlines.tsx\\n// @include: SortedOutlines\\n// @filename: Layer.tsx\\n// @include: Layer\\n// @filename: Main.tsx\\n// @include: Main\\n// @filename: Demo.tsx\\n// ---cut---\\n// @include: Demo\n```\n\n----------------------------------------\n\nTITLE: Rendering Current Frame Using Remotion and React (TypeScript)\nDESCRIPTION: Defines a functional React component that displays the current frame using the useCurrentFrame hook from Remotion. Requires 'remotion' package installed. The AbsoluteFill component is used for centering the text and filling the background. Expects Remotion runtime to provide the current frame context. Inputs are determined by Remotion's internal timing, and the output is a styled component showing the frame number. Should be included in a registered composition for video rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/the-fundamentals.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbsoluteFill, useCurrentFrame } from \\\"remotion\\\";\n\nexport const MyComposition = () => {\n  const frame = useCurrentFrame();\n\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: \\\"center\\\",\n        alignItems: \\\"center\\\",\n        fontSize: 100,\n        backgroundColor: \\\"white\\\",\n      }}\n    >\n      The current frame is {frame}.\n    </AbsoluteFill>\n  );\n};\n// - MyComposition\n```\n\n----------------------------------------\n\nTITLE: Importing the Caption Type in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to import the `Caption` interface from the `@remotion/captions` package. This type defines the standard data structure for a single caption segment, including its text content and timing information, used throughout Remotion's captioning features. The `// ^?` comment is a twoslash directive used for interactive type checking in documentation environments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/captions/caption.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport type {Caption} from '@remotion/captions';\n//            ^?\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Audio Transition Wrapper Function in TypeScript (tsx)\nDESCRIPTION: Defines a TypeScript function `addSound` that acts as a higher-order component for Remotion transitions. It accepts a `TransitionPresentation` object and an audio source URL (`src`), returning a new `TransitionPresentation`. The enhanced component conditionally renders a Remotion `<Audio>` component, playing the specified `src` only when the `presentationDirection` prop is 'entering'. This function requires `@remotion/transitions` and the `Audio` component from `remotion`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/audio-transitions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  TransitionPresentation,\n  TransitionPresentationComponentProps,\n} from \"@remotion/transitions\";\nimport { Audio } from \"remotion\";\n\nexport function addSound<T extends Record<string, unknown>>(\n  transition: TransitionPresentation<T>,\n  src: string,\n): TransitionPresentation<T> {\n  const { component: Component, ...other } = transition;\n\n  const C = Component as React.FC<TransitionPresentationComponentProps<T>>;\n\n  const NewComponent: React.FC<TransitionPresentationComponentProps<T>> = (\n    p,\n  ) => {\n    return (\n      <>\n        {p.presentationDirection === \"entering\" ? <Audio src={src} /> : null}\n        <C {...p} />\n      </>\n    );\n  };\n\n  return {\n    component: NewComponent,\n    ...other,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video and Saving Locally using Remotion Lambda CLI - Bash\nDESCRIPTION: Shows how to render a video composition using Remotion Lambda CLI and save the rendered output directly to a local file. The command takes a Serve URL, a Composition ID, and specifies a local path for the output video file. Remotion must be installed, and AWS Lambda access configured. The output file (e.g., 'out/video.mp4') will be saved to the local filesystem after rendering is completed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/render.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render https://remotionlambda-abcdef.s3.eu-central-1.amazonaws.com/sites/testbed/index.html my-comp out/video.mp4\n```\n\n----------------------------------------\n\nTITLE: Trimming Both Start and End of Video in Remotion (TypeScript)\nDESCRIPTION: This example expands upon trimming by applying both startFrom and endAt props to OffthreadVideo, allowing selective playback of a subsection of the video. The code depends on remotion and React, expects the video in the public folder, and receives startFrom and endAt as frame indices. The resulting component only plays frames from 60 to 119 (inclusive or exclusive based on OffthreadVideo's behavior).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <OffthreadVideo src={staticFile('video.mp4')} startFrom={60} endAt={120} />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Consolidating Dots Logic into a Dots Component with Remotion in TypeScript\nDESCRIPTION: The Dots component wraps Explosion, Trail, Shrinking, and Dot components together for reuse, with sequencing to delay the dot appearance. This consolidated component can be imported as a single visual unit into MyComposition or other parents. Key prop usage includes Sequence's from (for delay), and Dots accepts no children or special props as it creates the entire effect composition internally.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @filename: Move.tsx\\nexport const Move: React.FC<{\\n  children: React.ReactNode;\\n  delay: number;\\n}> = () => null;\\n// @filename: Shrinking.tsx\\nexport const Shrinking: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n// @filename: Explosion.tsx\\nexport const Explosion: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n// @filename: Background.tsx\\nexport const Background: React.FC<{}> = () => null;\\n// @filename: Dot.tsx\\nexport const Dot: React.FC<{}> = () => null;\\n// @filename: Trail.tsx\\nexport const Trail: React.FC<{\\n  children: React.ReactNode;\\n  amount: number;\\n}> = () => null;\\n\\n// @filename: MyComposition.tsx\\n// ---cut---\\nimport React from 'react';\\nimport {Sequence} from 'remotion';\\nimport {Dot} from './Dot';\\nimport {Explosion} from './Explosion';\\nimport {Shrinking} from './Shrinking';\\nimport {Trail} from './Trail';\\n\\nexport const Dots: React.FC = () => {\\n  return (\\n    <Explosion>\\n      <Trail amount={4}>\\n        <Shrinking>\\n          <Sequence from={5}>\\n            <Dot />\\n          </Sequence>\\n        </Shrinking>\\n      </Trail>\\n    </Explosion>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Time Display for Remotion Player in TSX\nDESCRIPTION: This React functional component displays the current playback time and total duration for a Remotion Player. It requires `durationInFrames`, `fps`, and a `playerRef` as props. The component uses a `formatTime` helper function to convert frame numbers into a 'hh:mm:ss.ff' string format. It listens to the player's 'frameupdate' event via the `playerRef` to update the displayed current time.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/custom-controls.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"TimeDisplay.tsx\"\nimport type {PlayerRef} from '@remotion/player';\nimport React, {useEffect} from 'react';\n\nexport const formatTime = (frame: number, fps: number): string => {\n  const hours = Math.floor(frame / fps / 3600);\n\n  const remainingMinutes = frame - hours * fps * 3600;\n  const minutes = Math.floor(remainingMinutes / 60 / fps);\n\n  const remainingSec = frame - hours * fps * 3600 - minutes * fps * 60;\n  const seconds = Math.floor(remainingSec / fps);\n\n  const frameAfterSec = Math.round(frame % fps);\n\n  const hoursStr = String(hours);\n  const minutesStr = String(minutes).padStart(2, '0');\n  const secondsStr = String(seconds).padStart(2, '0');\n  const frameStr = String(frameAfterSec).padStart(2, '0');\n\n  if (hours > 0) {\n    return `${hoursStr}:${minutesStr}:${secondsStr}.${frameStr}`;\n  }\n\n  return `${minutesStr}:${secondsStr}.${frameStr}`;\n};\n\nexport const TimeDisplay: React.FC<{\n  durationInFrames: number;\n  fps: number;\n  playerRef: React.RefObject<PlayerRef | null>;\n}> = ({durationInFrames, fps, playerRef}) => {\n  const [time, setTime] = React.useState(0);\n\n  useEffect(() => {\n    const {current} = playerRef;\n    if (!current) {\n      return;\n    }\n\n    const onTimeUpdate = () => {\n      setTime(current.getCurrentFrame());\n    };\n\n    current.addEventListener('frameupdate', onTimeUpdate);\n\n    return () => {\n      current.removeEventListener('frameupdate', onTimeUpdate);\n    };\n  }, [playerRef]);\n\n  return (\n    <div\n      style={{\n        fontFamily: 'monospace',\n      }}\n    >\n      <span>\n        {formatTime(time, fps)}/{formatTime(durationInFrames, fps)}\n      </span>\n    </div>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying the AWS Lambda Runtime ARN for Remotion\nDESCRIPTION: This ARN identifies the specific NodeJS 20.x runtime layer used by Remotion on AWS Lambda from v4.0.245 onwards. If the user policy includes 'lambda:PutRuntimeManagementConfig', this ARN locks the runtime version, preventing unexpected breakage from future AWS runtime updates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/runtime.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\narn:aws:lambda:${region}::runtime:da57c20c4b965d5b75540f6865a35fc8030358e33ec44ecfed33e90901a27a72\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Video URL with <OffthreadVideo> in Remotion (tsx)\nDESCRIPTION: Shows how to use the `<OffthreadVideo>` component to display a video directly from a remote HTTP URL. It imports `AbsoluteFill` and `OffthreadVideo` from Remotion and sets the `src` prop to the URL of the 'Big Buck Bunny' sample video.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, OffthreadVideo} from 'remotion';\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo src=\"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Audio with <Audio> and staticFile in Remotion (TSX)\nDESCRIPTION: Demonstrates the fundamental usage of the `<Audio>` component to include an audio file in a Remotion composition. The `src` prop takes the path to the audio file, typically obtained using the `staticFile()` helper function which references files placed in the `public/` directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, staticFile} from 'remotion';\n\nexport const MyVideo = () => {\n  return (\n    <AbsoluteFill>\n      <Audio src={staticFile('audio.mp3')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Still Image with Remotion Node API (TypeScript)\nDESCRIPTION: This TypeScript code shows how to bundle a React component, locate a composition, and render it as a still image using Remotion's Node.js APIs. It uses '@remotion/bundler' to create a bundle, '@remotion/renderer' for composition queries and still image rendering. Key parameters: entryPoint for the project's entry file, compositionId to select a specific composition, bundleLocation as the output directory, inputProps for customization, and output for the resulting file path. Inputs are source file paths and composition IDs, output is an image file. Dependencies: '@remotion/bundler', '@remotion/renderer'. The snippet is suitable for scripting still image generation in server-side or automation setups.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-08-11-remotion-2-3.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {bundle} from '@remotion/bundler';\nimport {getCompositions, renderStill} from '@remotion/renderer';\n\n// The composition you want to render\nconst compositionId = 'HelloWorld';\n\nconst bundleLocation = await bundle({\n  entryPoint: require.resolve('./src/index.ts'),\n});\n\nconst comps = await getCompositions(bundleLocation, {\n  inputProps: {\n    custom: 'data',\n  },\n});\nconst composition = comps.find((c) => c.id === compositionId);\n\nif (!composition) {\n  throw new Error(`No composition with the ID ${compositionId} found`);\n}\n\n// ---cut---\n\nawait renderStill({\n  composition,\n  serveUrl: bundleLocation,\n  output: '/tmp/still.png',\n  inputProps: {\n    custom: 'data',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Render Errors with Remotion Player Event Listener in TypeScript/React\nDESCRIPTION: Demonstrates attaching an event listener for the 'error' event on a Remotion Player using `PlayerRef`. This allows capturing and logging uncaught exceptions (`e.detail.error`) that occur during the rendering of the Remotion composition. Depends on React and `@remotion/player`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {PlayerRef} from '@remotion/player';\nimport {useRef} from 'react';\nconst ref = useRef<PlayerRef>(null);\n// ---cut---\nref.current?.addEventListener('error', (e) => {\n  console.log('error ', e.detail.error); // error [Error: undefined is not a function]\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Scenes with Series in Remotion (TypeScript)\nDESCRIPTION: Demonstrates sequencing multiple React components in a Remotion video using the Series component. Both 'MyComponent' and 'AnotherComponent' are rendered one after another by wrapping them in Series.Sequence elements. Dependencies: React, Remotion. Limitations: Each child must specify durationInFrames, and the props structure of child components must be respected.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/passing-props.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @include: example-MyComponent\nconst AnotherComponent: React.FC = () => {\n  return null;\n};\n// ---cut---\nimport {Series} from 'remotion';\n\nconst ChainedScenes = () => {\n  return (\n    <Series>\n      <Series.Sequence durationInFrames={90}>\n        <MyComponent propOne=\"hi\" propTwo={10} />\n      </Series.Sequence>\n      <Series.Sequence durationInFrames={90}>\n        <AnotherComponent />\n      </Series.Sequence>\n    </Series>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Interpolating Spring Animation Output using interpolate() in TypeScript\nDESCRIPTION: Demonstrates using the `interpolate` function to map the output of a spring animation (`driver`, which typically animates from 0 to 1) to a different range, such as pixels (`[0, 200]`). This allows controlling properties like position based on the spring's eased movement.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// @include: example-spring\n// ---cut---\nconst marginLeft = interpolate(driver, [0, 1], [0, 200]);\n```\n\n----------------------------------------\n\nTITLE: Simulating Input Props in Remotion Studio - Bash\nDESCRIPTION: This Bash command allows users to launch Remotion Studio with a simulated JSON props object supplied via the --props flag. This is useful for testing or previewing components with custom input props, replicating the behavior of Remotion render but within the interactive studio environment. The JSON string should be properly formatted, and Remotion must be installed in the environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-input-props.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion studio --props='{\"hello\": \"world\"}'\n```\n\n----------------------------------------\n\nTITLE: Memoizing inputProps for Remotion Player - TypeScript\nDESCRIPTION: This snippet demonstrates how to use useMemo to memoize the inputProps object passed to the Player, which prevents unnecessary re-renders when unrelated state changes. It uses React hooks and the Remotion Player, with a sample text input state. Dependencies are React, @remotion/player, and a MyVideo component. The inputProps object is recalculated only when its dependencies change, ensuring efficient prop handling. Essential for cases where inputProps could be a performance bottleneck due to frequent updates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/best-practices.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx twoslash title=\\\"Player.tsx\\\"\\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;// @filename: index.tsx\\n// ---cut---\\nimport {Player} from '@remotion/player';\\nimport {useState, useMemo} from 'react';\\nimport {MyVideo} from './remotion/MyVideo';\\n\\nexport const App: React.FC = () => {\\n  const [text, setText] = useState('world');\\n  const inputProps = useMemo(() => {\\n    return {\\n      text,\\n    };\\n  }, [text]);\\n\\n  return (\\n    <Player\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n      inputProps={inputProps}\\n    />\\n  );\\n};\\n```\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Remotion Render on Fetch Error in React\nDESCRIPTION: This React functional component demonstrates how to handle asynchronous data fetching during Remotion rendering. It initially delays the render using `delayRender`, then attempts to fetch data. If the fetch succeeds, `continueRender` is called; if it fails, `cancelRender` is called with the error object, stopping the render process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cancel-render.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from \"react\";\nimport { cancelRender, continueRender, delayRender } from \"remotion\";\n\nexport const MyComp: React.FC = () => {\n  const [handle] = useState(() => delayRender(\"Fetching data...\"));\n\n  useEffect(() => {\n    fetch(\"https://example.com\")\n      .then(() => {\n        continueRender(handle);\n      })\n      .catch((err) => cancelRender(err));\n  }, []);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple CSS Transforms in TSX\nDESCRIPTION: Shows how to combine multiple CSS transformations like `translateX` and `scale` within a single `transform` style property in TSX. Transformations are space-separated and applied sequentially; the order matters.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transforms.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {6} title=\"MyComponent.tsx\"\n<div\n  style={{\n    height: 100,\n    width: 100,\n    backgroundColor: \"red\",\n    transform: `translateX(100px) scale(2)`,\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning the Remotion Repository Shallowly (Shell)\nDESCRIPTION: Clones the Remotion repository from GitHub using Git. The `--depth=1` flag creates a shallow clone, downloading only the most recent commit history to save time and disk space. After cloning, it changes the current directory to the newly created `remotion` folder. Dependency: Git.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --depth=1 https://github.com/remotion-dev/remotion.git && cd remotion\n```\n\n----------------------------------------\n\nTITLE: Parsing Media Tracks Upfront with @remotion/media-parser in TSX\nDESCRIPTION: Demonstrates how to use the `parseMedia` function from `@remotion/media-parser` to retrieve information about audio and video tracks before starting the conversion process. This allows for analyzing track properties (like codecs) upfront, potentially for displaying UI options to the user.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/track-transformation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\n\nconst {tracks} = await parseMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  fields: {\n    tracks: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Google Font Metadata on the Server using getInfo() (TypeScript)\nDESCRIPTION: This snippet demonstrates how to retrieve metadata for a specific Google Font (e.g., InterTight) on the server using the `getInfo()` function from `@remotion/google-fonts`. This metadata, returned as a JSON object, can then be sent to the client for font loading.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/load-font-from-info.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getInfo} from '@remotion/google-fonts/InterTight';\n\n// Return `info` to the client using an endpoint\nconst info = getInfo();\n```\n\n----------------------------------------\n\nTITLE: Triggering Remotion Lambda Renders and Checking Progress in Go\nDESCRIPTION: This Go example demonstrates how to trigger a Remotion render on AWS Lambda and subsequently check its progress. It utilizes the `godotenv` library to load environment variables (Serve URL, Lambda function name, AWS region), sets up render options including input props and composition ID using `lambda_go_sdk.RemotionOptions`, calls `lambda_go_sdk.RenderMediaOnLambda` to start the render, handles potential validation errors using the `validator` library, prints the resulting render ID and bucket name, and then uses `lambda_go_sdk.GetRenderProgress` with the necessary configuration (`lambda_go_sdk.RenderConfig`) to fetch and display the render's progress. Key dependencies include `github.com/joho/godotenv`, `github.com/go-playground/validator/v10`, and `github.com/remotion-dev/lambda_go_sdk`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/go.mdx#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/go-playground/validator/v10\"\n\t\"github.com/joho/godotenv\"\n\t\"github.com/remotion-dev/lambda_go_sdk\"\n)\n\ntype ValidationError struct {\n\tField   string\n\tMessage string\n}\n\nfunc msgForTag(fe validator.FieldError) string {\n\tswitch fe.Tag() {\n\tcase \"required\":\n\t\treturn \"This field is required\"\n\n\t}\n\treturn fe.Error() // default error\n}\n\nfunc main() {\n\n\t// Load the environment variables from the .env file\n\terr := godotenv.Load()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Specify the URL to your Webpack bundle\n\tserveUrl := os.Getenv(\"REMOTION_APP_SERVE_URL\")\n\t// Specify the function you would like to call\n\tfunctionName := os.Getenv(\"REMOTION_APP_FUNCTION_NAME\")\n\t// Specify the region you deployed to, for example \"us-east-1\"\n\tregion := os.Getenv(\"REMOTION_APP_REGION\")\n\n\t// Set parameters for render\n\trenderInputRequest := lambda_go_sdk.RemotionOptions{\n\t\tServeUrl:     serveUrl,\n\t\tFunctionName: functionName,\n\t\tRegion:       region,\n\t\t// The data that composition will use\n\t\tInputProps: map[string]interface{}{\n\t\t\t\"data\": \"Let's play\",\n\t\t},\n\t\tComposition: \"main\", // The composition to use\n\n\t}\n\n\t// Execute the render process\n\trenderResponse, renderError := lambda_go_sdk.RenderMediaOnLambda(renderInputRequest)\n\n\t// Check if there are validation errors\n\tif renderError != nil {\n\n\t\tvalidationOut := make([]ValidationError, len(renderError.(validator.ValidationErrors)))\n\n\t\tfor i, fieldError := range renderError.(validator.ValidationErrors) {\n\n\t\t\tvalidationOut[i] = ValidationError{fieldError.Field(), msgForTag(fieldError)}\n\t\t}\n\n\t\tfor _, apiError := range validationOut {\n\t\t\tfmt.Printf(\"%s: %s\\n\", apiError.Field, apiError.Message)\n\t\t}\n\t\treturn\n\n\t}\n\n\tfmt.Print(renderResponse.RenderId)\n\t/// Get bucket information\n\tfmt.Printf(\"bucketName: %s\\nRenderId: %s\\n\", renderResponse.RenderId, renderResponse.RenderId)\n\n\t// Render Progress request\n\trenderProgressInputRequest := lambda_go_sdk.RenderConfig{\n\t\tFunctionName: functionName,\n\t\tRegion:       region,\n\t\tRenderId:     renderResponse.RenderId,\n\t\tBucketName:   renderResponse.BucketName,\n\t\tLogLevel:     \"info\",\n\t}\n\t// Execute getting the render progress\n\trenderProgressResponse, renderProgressError := lambda_go_sdk.GetRenderProgress(renderProgressInputRequest)\n\n\t// Check if we have error\n\tif renderProgressError != nil {\n\t\tlog.Fatalf(\"%s %s\", \"Invalid render progress response\", renderProgressError)\n\t}\n\n\t// Get the overall render progress\n\tfmt.Printf(\"overallprogress: %f \", renderProgressResponse.OverallProgress)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Project CSS into Remotion Root Component (Tailwind v3)\nDESCRIPTION: JavaScript code snippet demonstrating how to import the main project stylesheet (`style.css`) into the `src/Root.tsx` file. This ensures the Tailwind styles defined via directives are loaded.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport './style.css';\n```\n\n----------------------------------------\n\nTITLE: Setting Folder Deletion Duration using Remotion Config in TypeScript\nDESCRIPTION: Configures the time period after which render folders are deleted when folder expiry is enabled, using `Config.setDeleteAfter()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the duration to '3-days'. Requires `setEnableFolderExpiry(true)` to be active.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_28\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setDeleteAfter('3-days');\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role with Custom Policies for Render Lambda (JavaScript)\nDESCRIPTION: Configures a custom IAM Role named 'remotionSQSLambdaRole' using AWS CDK, granting permissions for CloudWatch logging and custom Remotion execution policies. Dependencies include core, IAM, and the presence of a custom managed policy. Key parameters are 'roleName' and attached managed policies. Used by the render Lambda function to execute and interact with required AWS services. Outputs a role resource ready for use by Lambda functions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// \\\\uD83D\\\\uDC47 create a role with custom name\\nconst renderFunctionLambdaRole = new Role(this, 'remotionSQSLambdaRole', {\\n  roleName: 'remotionSQSLambdaRole',\\n  assumedBy: new ServicePrincipal('lambda.amazonaws.com'),\\n  managedPolicies: [\\n    ManagedPolicy.fromAwsManagedPolicyName(\\n      'service-role/AWSLambdaBasicExecutionRole',\\n    ),\\n    ManagedPolicy.fromManagedPolicyName(\\n      this,\\n      'remotion-executionrole-policy',\\n      'remotion-executionrole-policy',\\n    ),\\n  ],\\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Component Props Using `type` Alias in Remotion v4 (TSX)\nDESCRIPTION: This snippet provides the solution to the props type error introduced in Remotion v4 where `interface` cannot be used. It shows defining component props using a `type` alias instead, ensuring the props satisfy the required `Record<string, unknown>` shape compatible with Remotion's component system.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\ntype MyProps = {\n  title: string;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of renderMedia in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the `renderMedia` function from `@remotion/renderer` to render a video composition. It shows setting up input properties, selecting a composition using `selectComposition`, and then initiating the rendering process with specified options like codec and output location.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-media.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst serveUrl = '/path/to/bundle';\nconst outputLocation = '/path/to/frames';\n\nimport {renderMedia, selectComposition} from '@remotion/renderer';\n\nconst inputProps = {\n  titleText: 'Hello World',\n};\n\nconst composition = await selectComposition({\n  serveUrl,\n  id: 'my-video',\n  inputProps,\n});\n\n// ---cut---\n\nawait renderMedia({\n  composition,\n  serveUrl,\n  codec: 'h264',\n  outputLocation,\n  inputProps,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Video Composition in Remotion - TypeScript/TSX\nDESCRIPTION: Configures the Remotion video root, declaring a composition with defined width, height, duration, and frames-per-second settings. Requires the Remotion library and React. The Composition component references MyComposition, which should implement the video logic. Inputs: explicit frame count, dimensions, and component. Outputs a composition registration for Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Composition} from 'remotion';\nexport const MyComposition: React.FC = () => null;\n// ---cut---\nexport const RemotionRoot: React.FC = () => {\n  return (\n    <>\n      <Composition\n        id=\"MyComp\"\n        component={MyComposition}\n        durationInFrames={150}\n        fps={30}\n        width={1920}\n        height={1080}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering GLSL Webpack Override (TypeScript)\nDESCRIPTION: Explains how to import and apply enableGlsl with Config.overrideWebpackConfig, enabling use of GLSL file imports in Remotion projects. Designed for inclusion in remotion.config.ts and TypeScript entry points, with proper module declarations. Requires enableGlsl and supporting loader dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ./src/enable-glsl.ts\nimport {WebpackOverrideFn}from '@remotion/bundler';\nexport const enableGlsl: WebpackOverrideFn = (c) => c;\n\n// @filename: remotion.config.ts\n// ---cut---\nimport {Config} from '@remotion/cli/config';\nimport {enableGlsl}from './src/enable-glsl';\n\nConfig.overrideWebpackConfig(enableGlsl);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for TailwindCSS v3 in Remotion\nDESCRIPTION: TypeScript code for the `remotion.config.ts` file. It imports `Config` from `@remotion/cli/config` and `enableTailwind` from `@remotion/tailwind`, then uses `Config.overrideWebpackConfig` to apply the Tailwind v3 Webpack configuration modifications. A note indicates that older versions used `Config.Bundling.overrideWebpackConfig()`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport {enableTailwind} from '@remotion/tailwind';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableTailwind(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.ease Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.ease`. This function defines a basic inertial easing, starting slow, accelerating, and then slowing down, similar to a standard ease-in-out curve.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nstatic ease(t): number\n```\n\n----------------------------------------\n\nTITLE: Granting SQS Queue Permissions to IAM Roles (JavaScript)\nDESCRIPTION: Shows how to use AWS CDK to grant send and consume permissions on the SQS queue to two IAM roles: one for API integration (send) and one for the render Lambda (consume). Assumes both remotionQueue and the two roles are already defined. This enables separation of message producer and consumer permissions for security. Inputs are the queue and IAM Role objects, output is permission grants in the generated stack.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// \\\\uD83D\\\\uDC47 Grant permission to publish to the queue\\nremotionQueue.grantSendMessages(apiIntegrationRole);\\n// \\\\uD83D\\\\uDC47 grant permission to consume messages from the queue\\nremotionQueue.grantConsumeMessages(renderFunctionLambdaRole);\n```\n\n----------------------------------------\n\nTITLE: Estimating AWS Lambda Costs using estimatePrice in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `estimatePrice` function from the `@remotion/lambda` package to calculate the estimated AWS Lambda cost. It requires the `@remotion/lambda` package and takes an object containing `region`, `durationInMilliseconds`, `memorySizeInMb`, `diskSizeInMb`, and `lambdasInvoked` as input. The function returns the estimated cost in USD as a number.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/estimateprice.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash\nimport { estimatePrice } from \"@remotion/lambda\";\n\nconsole.log(\n  estimatePrice({\n    region: \"us-east-1\",\n    durationInMilliseconds: 20000,\n    memorySizeInMb: 2048,\n    diskSizeInMb: 2048,\n    lambdasInvoked: 1,\n  })\n); // 0.00067\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Centered Yellow Heart Component in Remotion (TSX)\nDESCRIPTION: This snippet defines a React functional component `YellowHeart` using TypeScript (TSX). Similar to `RedHeart`, it uses Remotion's `AbsoluteFill` component to render a yellow heart emoji ('💛') centered within its parent.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/YellowHeart.tsx\"\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nexport const YellowHeart: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      💛\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Role for Lambda using AWS CDK in TypeScript\nDESCRIPTION: This TypeScript code snippet uses the AWS CDK library to define an IAM Role named `remotionSQSLambdaRole`. The role is assumed by the Lambda service principal and attaches two managed policies: the basic Lambda execution role (`AWSLambdaBasicExecutionRole`) for CloudWatch logging and a custom policy (`remotion-executionrole-policy`) required for Remotion Lambda operations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 👇 Create a role with custom name\nconst renderFunctionLambdaRole = new Role(this, 'remotionSQSLambdaRole', {\n  roleName: 'remotionSQSLambdaRole',\n  assumedBy: new ServicePrincipal('lambda.amazonaws.com'),\n  managedPolicies: [\n    ManagedPolicy.fromAwsManagedPolicyName(\n      'service-role/AWSLambdaBasicExecutionRole',\n    ),\n    ManagedPolicy.fromManagedPolicyName(\n      this,\n      'remotion-executionrole-policy',\n      'remotion-executionrole-policy',\n    ),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Remotion Project (Shell)\nDESCRIPTION: These commands are used to create a new Remotion video project. `npm init video` uses npm, while `yarn create video` uses yarn. They set up the basic file structure and dependencies for a new project. The context explains that a new 'empty' template is now available via these commands, offering a minimal starting point for users familiar with Remotion. Requires Node.js and either npm or yarn to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-10-26-remotion-2-5.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm init video\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn create video\n```\n\n----------------------------------------\n\nTITLE: Creating Svelte Wrapper for Remotion Player\nDESCRIPTION: Defines a Svelte component (`PlayerViewWrapper.svelte`) that acts as a wrapper to mount and manage a React-based Remotion player component (`PlayerView`). It uses Svelte's `onMount` and `onDestroy` lifecycle functions along with React's `createRoot` to handle the React component lifecycle. An `$effect` hook is used to rerender the player when input data changes, and it utilizes `$bindable` props to expose the player reference.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\">\n    import {onDestroy, onMount} from \"svelte\";\n    import React from \"react\";\n    import {createRoot, type Root} from \"react-dom/client\";\n    import {type PlayerSchema, PlayerView} from \"./PlayerView\";\n    import {type PlayerRef} from \"@remotion/player\";\n\n    let {data, player = $bindable<PlayerRef>(), onPaused} = $props<{ data: PlayerSchema, player: PlayerRef, onPaused: void }>()\n    let containerRef;\n    let root: Root;\n\n    // used to rerender the player when changes made\n    $effect(() => {\n        // we need to access the property in the $effect, because Svelte doesn't automatically detect deep changes. Use flat structure or Svelte Store instead.\n        console.log(data.titleText)\n        render()\n    });\n\n    function render() {\n        if (!containerRef || !root) return;\n        root.render(\n            React.createElement(PlayerView, {\n                ref: (ref) => {\n                    player = ref?.playerRef\n                }, data, onPaused,\n            }),\n        );\n    }\n\n    onMount(() => {\n        root = createRoot(containerRef);\n        render();\n    });\n\n    onDestroy(() => {\n        root?.unmount();\n    });\n</script>\n\n<div bind:this={containerRef}></div>\n```\n\n----------------------------------------\n\nTITLE: Finding the Midpoint of an SVG Path using getLength() and getPointAtLength() in TypeScript\nDESCRIPTION: This example demonstrates how to find the coordinates of the midpoint of an SVG path. It first uses the `getLength` function to determine the total length of the path and then calls `getPointAtLength` with half of the total length (`length * 0.5`) to get the coordinates at the center of the path. Requires both `getLength` and `getPointAtLength` from `@remotion/paths`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-point-at-length.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLength, getPointAtLength } from \"@remotion/paths\";\n\nconst path = \"M 0 0 L 100 0\";\nconst length = getLength(path);\nconst point = getPointAtLength(path, length * 0.5);\n\nconsole.log(point); // { x: 50, y: 0 }\n```\n\n----------------------------------------\n\nTITLE: Importing TableOfContents Component in React (TypeScript)\nDESCRIPTION: This snippet imports the TableOfContents React component from a relative path within the Remotion documentation structure. It is required for rendering the dynamic table of contents for the GIF API section. The component must be available at '../../components/TableOfContents/gif' and assumes a TypeScript/React file context. It does not accept any parameters directly in this import statement.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/gif/index.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {TableOfContents} from '../../components/TableOfContents/gif';\n```\n\n----------------------------------------\n\nTITLE: Importing MuxVideo Component with JavaScript (React/TypeScript, MDX)\nDESCRIPTION: This snippet imports the custom NewMuxVideo React component, which is used to embed Mux-hosted videos into the MDX article. Dependencies include React, MDX, and the file system path '../src/components/MuxVideo'. The import is necessary for later embedding the video player in the documentation page, allowing seamless integration of video content with customizable controls and poster images.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/success-stories/2021-09-16-makestories.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {NewMuxVideo} from '../src/components/MuxVideo';\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Region in Remotion Lambda CLI via Parameter (Bash)\nDESCRIPTION: Demonstrates how to pass the --region parameter to specify the AWS region for the CLI command. No dependencies are required beyond proper configuration of the Remotion Lambda CLI and valid AWS credentials. The main parameter, --region, expects a valid AWS region string (e.g. 'eu-central-1'). The CLI defaults to 'us-east-1' if not provided, but users can override this here or via environment variables. No output is produced directly by this argument alone; its effect is determined by the subsequent CLI command.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--region=eu-central-1\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Composition to MP4 via CLI\nDESCRIPTION: This command uses `npx` to execute the Remotion CLI render command (`remotion render`). It specifies the entry point (`remotion/index.ts`), the ID of the composition to render (`MyComp`), and the output file name (`out.mp4`). This command initiates the video rendering process based on the composition's definition and settings. Requires `@remotion/cli` and potentially `@remotion/renderer`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpx remotion render remotion/index.ts MyComp out.mp4\n```\n```\n\n----------------------------------------\n\nTITLE: Activating Remotion Player Buffer State with useBufferState\nDESCRIPTION: This TypeScript React component demonstrates how to use the `useBufferState` hook from Remotion to manually trigger the player's buffer state. It calls `buffer.delayPlayback()` inside a `useEffect` hook to pause playback and schedules `delayHandle.unblock()` after 5 seconds using `setTimeout` to resume playback. A cleanup function ensures `unblock()` is called if the component unmounts before the timeout completes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {useBufferState} from 'remotion';\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n\n  React.useEffect(() => {\n    const delayHandle = buffer.delayPlayback();\n\n    setTimeout(() => {\n      delayHandle.unblock();\n    }, 5000);\n\n    return () => {\n      delayHandle.unblock();\n    };\n  }, []);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Math.random() for State Initialization in Remotion Components (TypeScript/React)\nDESCRIPTION: This code shows initializing a local randomValues state array in a Remotion React component using Math.random(). While functional during preview, this creates non-deterministic output when rendering because Math.random() produces distinct values on each parallel render. This approach should be avoided for deterministic video generation. Dependencies: React (useState), Remotion (project context). Inputs: none, Outputs: JSX fragment. Limitation: Not deterministic across multiple rendering threads.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/using-randomness.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \\\"react\\\";\n// ---cut---\nconst MyComp: React.FC = () => {\n  const [randomValues] = useState(() =>\n    new Array(10).fill(true).map((a, i) => {\n      return {\n        x: Math.random(),\n        y: Math.random(),\n      };\n    }),\n  );\n  // Do something with coordinates\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/rive using pnpm (Bash)\nDESCRIPTION: This command employs the pnpm package manager to install the `@remotion/rive` package. pnpm is known for its efficient disk space usage and fast installation times. This command adds the package as a dependency, updating `package.json` and `pnpm-lock.yaml`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/rive/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/rive\n```\n\n----------------------------------------\n\nTITLE: Updating Remotion Lambda Function Layers using Node.js and AWS SDK\nDESCRIPTION: This TypeScript snippet demonstrates how to programmatically update the layers of a deployed Remotion Lambda function using the `@remotion/lambda` utility and the AWS SDK v3. It fetches the function's current configuration, removes layers matching a specified regex (`LAYER_TO_REMOVE`), adds a new custom layer specified by its ARN (`LAYER_TO_ADD`), and applies the changes. Requires AWS credentials and appropriate IAM permissions (specified in the accompanying JSON policy).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/custom-layers.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AwsRegion, getAwsClient } from \"@remotion/lambda\";\n\n// Customize these parameters\nconst REGION: AwsRegion = \"us-east-1\";\nconst FUNCTION_NAME = \"remotion-render-2022-06-02-mem3000mb-disk2048mb-120sec\";\nconst LAYER_TO_REMOVE = /fonts/;\nconst LAYER_TO_ADD = \"arn:aws:lambda:us-east-1:1234567891:layer:apple-emoji:1\";\n\nconst { client, sdk } = getAwsClient({\n  region: REGION,\n  service: \"lambda\",\n});\n\nconst fnConfig = await client.send(\n  new sdk.GetFunctionConfigurationCommand({\n    FunctionName: FUNCTION_NAME,\n  }),\n);\n\nif (!fnConfig) {\n  throw new Error(`Function ${FUNCTION_NAME} not deployed`);\n}\n\nawait client.send(\n  new sdk.UpdateFunctionConfigurationCommand({\n    FunctionName: FUNCTION_NAME,\n    Layers: [\n      ...(fnConfig.Layers ?? [])\n        .filter((l) => !l.Arn?.match(LAYER_TO_REMOVE))\n        .map((l) => l.Arn as string),\n      LAYER_TO_ADD,\n    ],\n  }),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using fillTextBox() to Manage Text Layout in TypeScript (TSX)\nDESCRIPTION: This TypeScript example demonstrates how to use the `fillTextBox` function from `@remotion/layout-utils`. It initializes a text box with constraints (`maxLines`, `maxBoxWidth`) and then sequentially adds words using the `add()` method. The `add()` method returns an object indicating whether the added text exceeds the box (`exceedsBox`) or starts a new line (`newLine`). This utility is useful for dynamically fitting text within specified boundaries in a browser environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/fill-text-box.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { fillTextBox } from \"@remotion/layout-utils\";\n\nconst fontFamily = \"Arial\";\nconst fontSize = 12;\n\nconst box = fillTextBox({ maxLines: 4, maxBoxWidth: 100 });\nbox.add({ text: \"Hello\", fontFamily, fontSize }); // {exceedsBox: false, newLine: false}\nbox.add({ text: \"World!\", fontFamily, fontSize }); // {exceedsBox: false, newLine: false}\n// Doesn't fit on the previous line anymore\nbox.add({ text: \"How\", fontFamily, fontSize }); // {exceedsBox: false, newLine: true}\n// ...\n// Doesn't fix in the box anymore\nbox.add({ text: \"the end\", fontFamily, fontSize }); // {exceedsBox: true, newLine: false}\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Remotion Cloud Run Permissions via CLI\nDESCRIPTION: This Bash command uses the Remotion CLI (`npx remotion`) to validate if the permissions for the associated service account have been correctly configured for Remotion Cloud Run. It likely checks against a predefined list of required permissions for the installed Remotion version.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/permissions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun permissions\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda Function via CLI (Shell)\nDESCRIPTION: This command deploys a new AWS Lambda function configured for Remotion rendering. If a function with identical settings (region, Remotion version, memory, disk, timeout) already exists in the specified AWS account and region, the command returns the name of the existing function instead of creating a new one. By default, it sets up a CloudWatch Log Group for debugging with a 14-day retention period. Various flags allow customization of region, memory, disk size, timeout, CloudWatch settings, IAM roles, VPC configuration, and runtime preferences for character sets (CJK/Emojis).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/functions/deploy.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda functions deploy\n```\n\nLANGUAGE: text\nCODE:\n```\nRegion = eu-central-1,\nMemory = 2048MB,\nDisk = 2048MB,\nTimeout = 120sec,\nVersion = 2021-12-17,\nCloudWatch Enabled = true,\nCloudWatch Retention Period = 14 days\nVPC Subnet IDs = subnet-0f6a0f6a0f6a0f6a0, subnet-0f6a0f6a0f6a0f6a1\nVPC Security Group IDs = sg-0f6a0f6a0f6a0f6a0, sg-0f6a0f6a0f6a0f6a1\n<br/>\nDeployed as remotion-render-2021-12-17-2048mb-120sec\n<br/>\n```\n\n----------------------------------------\n\nTITLE: Measuring Text after Font Load with useEffect in React TypeScript\nDESCRIPTION: This React functional component demonstrates how to use the useEffect hook to ensure a font is loaded (using @remotion/google-fonts/Inter) before performing a text measurement with measureText from @remotion/layout-utils. It leverages the waitUntilDone promise to block measurement until the font is ready, and manages state with useState for storing resulting dimensions. This approach prevents inaccurate measurements due to font fallback and avoids the need for additional delayRender calls because @remotion/google-fonts handles it internally.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/best-practices.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {useState, useEffect} from 'react';\\nimport {Dimensions, measureText} from '@remotion/layout-utils';\\nimport {loadFont, fontFamily} from '@remotion/google-fonts/Inter';\\n\\nconst {waitUntilDone} = loadFont('normal');\\n\\nconst MyComp: React.FC = () => {\\n  const [dimensions, setDimensions] = useState<Dimensions | null>(null);\\n\\n  useEffect(() => {\\n    // Wait until the font is loaded before measuring text\\n    waitUntilDone().then(() => {\\n      const measurement = measureText({\\n        fontFamily: fontFamily,\\n        fontSize: 14,\\n        fontWeight: '400',\\n        text: 'Hello world',\\n      });\\n\\n      // We don't need to use delayRender() here, because\\n      // font loading from @remotion/google-fonts is already wrapped in it\\n      setDimensions(measurement);\\n    });\\n  }, []);\\n\\n  return null;\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Still on Cloud Run Specifying Service Name (Shell)\nDESCRIPTION: Example command demonstrating how to render a specific still ('tiles') using the full serve URL and specifying the Cloud Run service name via the `--service-name` flag. This directs the render job to a particular service instance.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/still.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun still https://storage.googleapis.com/remotioncloudrun-123asd321/sites/abcdefgh/index.html tiles --service-name=remotion--3-3-82--mem512mi--cpu1-0--t-800\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable React Component (TSX)\nDESCRIPTION: Defines a simple React functional component named BlueSquare. This component is intended to be reused in subsequent examples demonstrating the <Loop> component. The `twoslash include example` directive suggests this snippet is meant to be included elsewhere in the documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/loop.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```twoslash include example\nconst BlueSquare: React.FC = () => <div></div>\n// - BlueSquare\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Canvas Scale with useCurrentScale in Remotion (TSX)\nDESCRIPTION: This snippet demonstrates the basic usage of the `useCurrentScale` hook within a Remotion component (`MyVideo`). It imports the hook from the 'remotion' package and calls it to retrieve the current scale factor of the rendering canvas, which is then displayed within a div element. This scale reflects the zoom level in the Studio or the fit-scale in the Player.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-current-scale.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Sequence, useCurrentScale } from \"remotion\";\n\nconst MyVideo = () => {\n  const scale = useCurrentScale();\n\n  return <div>The current scale is {scale}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Buffer Writer Interface with Remotion WebCodecs (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates the import and use of the bufferWriter interface from @remotion/webcodecs/buffer, enabling media output to an in-memory resizable ArrayBuffer during media conversion processes. It is employed as the writer option in convertMedia(), supporting high-performance render pipelines that require wire-format streams or buffering prior to further processing. Requires @remotion/webcodecs as a dependency.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-media.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {bufferWriter} from '@remotion/webcodecs/buffer';\\n//               ^?\n```\n\n----------------------------------------\n\nTITLE: Running the Docker Container (Shell)\nDESCRIPTION: Command to run the previously built Docker container named `remotion-app`. This will execute the default `CMD` specified in the Dockerfile (e.g., `node render.mjs`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndocker run remotion-app\n```\n\n----------------------------------------\n\nTITLE: Reading Video Frames using parseMedia and VideoDecoder in TSX\nDESCRIPTION: This snippet demonstrates the basic usage of `parseMedia` from `@remotion/media-parser` to read a video file. It defines an `onVideoTrack` callback that initializes a `VideoDecoder`. This callback returns another function that receives video samples (as `EncodedVideoChunk` compatible objects) and passes them to the `videoDecoder.decode()` method. Decoded frames are logged to the console via the `output` callback in the `VideoDecoder` configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia, OnAudioTrack, OnVideoTrack} from '@remotion/media-parser';\n\nconst onVideoTrack: OnVideoTrack = ({track}) => {\n  const videoDecoder = new VideoDecoder({\n    output: console.log,\n    error: console.error,\n  });\n  videoDecoder.configure(track);\n\n  return (sample) => {\n    videoDecoder.decode(new EncodedVideoChunk(sample));\n  };\n};\n\nconst result = await parseMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  onVideoTrack,\n});\n```\n\n----------------------------------------\n\nTITLE: Using getOrCreateBucket to Manage Remotion Cloud Run Buckets in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use the `getOrCreateBucket` function imported from the `@remotion/cloudrun` package. It calls the asynchronous function, passing an object with the desired GCP `region` ('us-east1'), to either create a new Google Cloud Storage bucket or retrieve an existing one suitable for Remotion Cloud Run. The function returns a promise resolving to an object containing the `bucketName` and a boolean `alreadyExisted` flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/getorcreatebucket.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getOrCreateBucket} from '@remotion/cloudrun';\n\nconst {bucketName, alreadyExisted} = await getOrCreateBucket({\n  region: 'us-east1',\n});\n\nconsole.log(bucketName); // \"remotioncloudrun-32df3p\"\n```\n\n----------------------------------------\n\nTITLE: Setting ProRes Profile in Remotion Config (TypeScript)\nDESCRIPTION: Sets the specific ProRes profile when the codec is set to `prores`, using the `Config` object in `remotion.config.ts`. Possible values include `4444-xq`, `4444`, `hq` (default), `standard`, `light`, `proxy`. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v2.1.6. The `--prores-profile` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setProResProfile('4444');\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation with Remotion Hooks in TSX\nDESCRIPTION: This snippet demonstrates creating an animation in Remotion using React functional components and hooks. It shows a circle changing color and moving horizontally. The animation logic relies on `useCurrentFrame` to get the current time, `interpolate` and `interpolateColors` for smooth transitions between values based on the frame, and `spring` for physics-based animation. The component renders a `div` styled dynamically based on these calculated values.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/compare/motion-canvas.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AbsoluteFill,\n  interpolate,\n  interpolateColors,\n  spring,\n  useCurrentFrame,\n  useVideoConfig,\n} from \"remotion\";\n\nexport const MyComp: React.FC = () => {\n  const frame = useCurrentFrame();\n  const { fps } = useVideoConfig();\n\n  const colorChange = interpolate(frame, [0, 60], [0, 1], {\n    extrapolateRight: \"clamp\",\n  });\n\n  const spr = spring({\n    fps,\n    frame: frame - 60,\n  });\n  const translateX = interpolate(spr, [0, 1], [0, 300]);\n\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        style={{\n          width: 200,\n          height: 200,\n          borderRadius: 100,\n          backgroundColor: interpolateColors(\n            colorChange,\n            [0, 1],\n            [\"#e6a700\", \"#e13238\"],\n          ),\n          transform: `translateX(${translateX}px)`,\n        }}\n      />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Reviewing AWS CDK Deploy Output in Bash\nDESCRIPTION: Displays the typical console output of the 'cdk deploy' command as it orchestrates CloudFormation resource generation, asset bundling, IAM statement and policy changes, and prompts for confirmation before proceeding. This output is informative for monitoring deployment progress and understanding security changes. No action is needed as it's a passive output, but it provides full context for what happens when deploying.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n Bundling asset apigw-sqs-app-stack/enqueue-function/Code/Stage...\n\n  cdk.out/bundling-temp-a813aece2454684086de775f918faac45b1b77c67fff24ec6aad4bff8c978ebe/index.js  881.5kb\n\n⚡ Done in 72ms\nBundling asset apigw-sqs-app-stack/render-function/Code/Stage...\n\n  cdk.out/bundling-temp-e7d973ee34691a8e6a2ceda969fbf59380866bb486be333238b7e554907f7b95/index.js  2.6kb\n\n⚡ Done in 2ms\n\nadded 279 packages, and audited 280 packages in 2s\n\n21 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n\n✨  Synthesis time: 7.97s\n\napigw-sqs-app-stack: building assets...\n\n[0%] start: Building 8efaff13bbe794558db1f1cb8f506bc13b87d7ab3e568ebc324bac680da3a75d:XXXXXXXXXX-ap-southeast-2\n[0%] start: Building 3b7a9f596977e2db94a676c6c89c99dd7eb87a5985f97a11ff23b9f338027764:XXXXXXXXXX-ap-southeast-2\n[0%] start: Building cf7f13fe5c0ff3b22e7352152a554dd8a4767f6a5e2285e6bf353fc42070e697:XXXXXXXXXX-ap-southeast-2\n[33%] success: Built 8efaff13bbe794558db1f1cb8f506bc13b87d7ab3e568ebc324bac680da3a75d:XXXXXXXXXX-ap-southeast-2\n[66%] success: Built 3b7a9f596977e2db94a676c6c89c99dd7eb87a5985f97a11ff23b9f338027764:XXXXXXXXXX-ap-southeast-2\n[100%] success: Built cf7f13fe5c0ff3b22e7352152a554dd8a4767f6a5e2285e6bf353fc42070e697:XXXXXXXXXX-ap-southeast-2\n\napigw-sqs-app-stack: assets built\n\nThis deployment will make potentially sensitive changes according to your current security approval level (--require-approval broadening).\nPlease confirm you intend to make the following modifications:\n\nIAM Statement Changes\n┌──┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n│   │ Resource                    │ Effect │ Action                      │ Principal                   │ Condition                      │\n├──┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────\n│ + │ ${api-integration-role.Arn} │ Allow  │ sts:AssumeRole              │ Service:lambda.amazonaws.co │                                │\n│   │                             │        │                             │ m                           │                                │\n├──┼───────────────────────────────────────────────────────────────────────────────────────────────────────\n│ + │ ${enqueue-function.Arn}     │ Allow  │ lambda:InvokeFunction       │ Service:apigateway.amazonaw │ \"ArnLike\": {                   │\n│   │                             │        │                             │ s.com                       │   \"AWS:SourceArn\": \"arn:${AWS: │\n│   │                             │        │                             │                             │ :Partition}:execute-api:ap-sou │\n│   │                             │        │                             │                             │ theast-2:XXXXXXXXXX:${apiC85 │\n│   │                             │        │                             │                             │ 50315}/*/*/enqueue\"            │\n│   │                             │        │                             │                             │ }                              │\n│ + │ ${enqueue-function.Arn}     │ Allow  │ lambda:InvokeFunction       │ Service:apigateway.amazonaw │ \"ArnLike\": {                   │\n│   │                             │        │                             │ s.com                       │   \"AWS:SourceArn\": \"arn:${AWS: │\n│   │                             │        │                             │                             │ :Partition}:execute-api:ap-sou │\n│   │                             │        │                             │                             │ theast-2:XXXXXXXXXX:${apiC85 │\n│   │                             │        │                             │                             │ 50315}/*/*/enqueue\"            │\n│   │                             │        │                             │                             │ }                              │\n├──┼───────────────────────────────────────────────────────────────────────────────────────────────────────\n│ + │ ${queue.Arn}                │ Allow  │ sqs:ChangeMessageVisibility │ AWS:${remotionSQSLambdaRole │                                │\n│   │                             │        │ sqs:DeleteMessage           │ }                           │                                │\n│   │                             │        │ sqs:GetQueueAttributes      │                             │                                │\n│   │                             │        │ sqs:GetQueueUrl             │                             │                                │\n│   │                             │        │ sqs:ReceiveMessage          │                             │                                │\n│ + │ ${queue.Arn}                │ Allow  │ sqs:GetQueueAttributes      │ AWS:${api-integration-role} │                                │\n│   │                             │        │ sqs:GetQueueUrl             │                             │                                │\n│   │                             │        │ sqs:SendMessage             │                             │                                │\n├──┼───────────────────────────────────────────────────────────────────────────────────────────────────────\n│ + │ ${remotionSQSLambdaRole.Arn │ Allow  │ sts:AssumeRole              │ Service:lambda.amazonaws.co │                                │\n│   │ }                           │        │                             │ m                           │                                │\n└──┘───────────────────────────────────────────────────────────────────────────────────────────\\nIAM Policy Changes\\n┌──┌────────────────────────────────────────────────────────────────────────────\\n│   │ Resource                 │ Managed Policy ARN                                                             │\\n├──┼────────────────────────────────────────────────────────────────────────────────\\n│ + │ ${api-integration-role}  │ arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole │\\n├──┼────────────────────────────────────────────────────────────────────────────────\\n│ + │ ${remotionSQSLambdaRole} │ arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole │\\n│ + │ ${remotionSQSLambdaRole} │ arn:${AWS::Partition}:iam::XXXXXXXXXX:policy/remotion-executionrole-policy   │\\n└──┘────────────────────────────────────────────────────────────────────────────────\\n(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)\\n\\nDo you wish to deploy these changes (y/n)? y\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/rive using yarn (Bash)\nDESCRIPTION: This command utilizes the Yarn package manager to add the `@remotion/rive` package to the current project. It fetches the package, installs it into the `node_modules` directory, and updates the project's `package.json` and `yarn.lock` files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/rive/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/rive\n```\n\n----------------------------------------\n\nTITLE: Implementing a Continuous Loop in Remotion (TSX)\nDESCRIPTION: Shows how to create a continuous (infinite) loop using the Remotion <Loop> component. By providing only the durationInFrames prop (set to 50), the loop defaults to repeating indefinitely. The BlueSquare component is rendered within the loop.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/loop.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\n// @include: example-BlueSquare\nimport { Loop } from \"remotion\";\n// ---cut---\nconst MyComp = () => {\n  return (\n    <Loop durationInFrames={50}>\n      <BlueSquare />\n    </Loop>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Interpolating HSL and HSLA Colors with Remotion interpolateColors() in TypeScript\nDESCRIPTION: Shows how to use `interpolateColors` in TypeScript to map the current frame number over the range [0, 20] to a color between specified `hsl` and `hsla` values. Imports necessary functions (`interpolateColors`, `useCurrentFrame`) from 'remotion'. The output color is always returned in `rgba` format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate-colors.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts twoslash\nimport { useCurrentFrame, interpolateColors } from \"remotion\";\n\nconst frame = useCurrentFrame(); // 10\n//hsl example\nconst color = interpolateColors(\n  frame,\n  [0, 20],\n  [\"hsl(0, 100%, 50%)\", \"hsl(60, 100%, 50%)\"]\n); // rgba(255, 128, 0, 1)\n\n//hsla example\nconst color2 = interpolateColors(\n  frame,\n  [0, 20],\n  [\"hsla(0, 100%, 50%, 1)\", \"hsla(60, 100%, 50%, 1)\"]\n); // rgba(255, 128, 0, 1)\n```\n```\n\n----------------------------------------\n\nTITLE: Generating CSS scale() Transform in Remotion (TSX)\nDESCRIPTION: Shows how to use the `scale` function from `@remotion/animation-utils` to create a CSS `scale()` transform string. It accepts one argument for uniform scaling or two arguments for separate X and Y scaling.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { scale } from \"@remotion/animation-utils\";\n\nconst transform = scale(2);\n// => \"scale(2, 2)\"\n\nconst transform2 = scale(2, 3);\n// => \"scale(2, 3)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Batch Rendering Compositions Using Remotion CLI - Bash Shell Script\nDESCRIPTION: This Bash script automates the process of rendering all available compositions from a Remotion project. It leverages the 'npx remotion compositions' command to retrieve all composition IDs and then uses a for loop to render each one into a distinct MP4 file. Requires a UNIX-based environment (Linux, macOS, or WSL on Windows) with Remotion installed and the script located at 'render-all.sh'. Input is the output of the 'compositions' command; outputs are MP4 videos for each composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-all.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncompositions=($(npx remotion compositions src/index.ts -q))\n\nfor composition in \"${compositions[@]}\"\ndo\n  npx remotion render src/index.ts $composition $composition.mp4\ndone\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Remotion Cloud Run Installer - Bash\nDESCRIPTION: This snippet downloads a tar file containing the Remotion Cloud Run installer from the official GitHub repository and extracts it to the current directory, then runs the installer script using Node.js. Requires internet access, curl, tar, and Node.js. The script guides setup (initialization, key management, or upgrade). Input is not specified in the snippet, but several options are presented interactively within the script. Output includes generation or management of service account keys and .env files. Ensure you have ownership permissions in the target GCP project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/generate-env.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/remotion-dev/remotion/raw/main/packages/cloudrun/src/gcpInstaller/gcpInstaller.tar | tar -x -C . && node install.mjs\n```\n\n----------------------------------------\n\nTITLE: Using the Remotion `<Freeze>` Component in TSX\nDESCRIPTION: Demonstrates how to use the `<Freeze>` component in Remotion to pause rendering of its children at a specific frame. This example shows freezing a `<Video>` component at frame 30 to display a still image from the video source.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-07-09-remotion-2-2.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyVideo.tsx\"\nimport {Freeze, Video} from 'remotion';\nimport myVid from './vid.mp4';\n\nexport const MyVideo = () => {\n  return (\n    <Freeze frame={30}>\n      <Video src={myVid} />\n    </Freeze>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Play/Pause Button for Remotion Player in TSX\nDESCRIPTION: This React functional component implements a custom Play/Pause button for the Remotion Player. It takes a `playerRef` (React RefObject for PlayerRef) as a prop. The component maintains its own `playing` state, synchronizing it with the player's state using `useEffect` and event listeners ('play', 'pause'). Clicking the button toggles the player's playback state via the `playerRef.current.toggle()` method. Note: This basic implementation does not include a buffering indicator.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/custom-controls.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"PlayPauseButton.tsx\"\nimport type {PlayerRef} from '@remotion/player';\nimport {useCallback, useEffect, useState} from 'react';\n\nexport const PlayPauseButton: React.FC<{\n  playerRef: React.RefObject<PlayerRef | null>;\n}> = ({playerRef}) => {\n  const [playing, setPlaying] = useState(false);\n\n  useEffect(() => {\n    const {current} = playerRef;\n    setPlaying(current?.isPlaying() ?? false);\n    if (!current) return;\n\n    const onPlay = () => {\n      setPlaying(true);\n    };\n\n    const onPause = () => {\n      setPlaying(false);\n    };\n\n    current.addEventListener('play', onPlay);\n    current.addEventListener('pause', onPause);\n\n    return () => {\n      current.removeEventListener('play', onPlay);\n      current.removeEventListener('pause', onPause);\n    };\n  }, [playerRef]);\n\n  const onToggle = useCallback(() => {\n    playerRef.current?.toggle();\n  }, [playerRef]);\n\n  return (\n    <button onClick={onToggle} type=\"button\">\n      {playing ? 'Pause' : 'Play'}\n    </button>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Loading Audio from URL with Remotion Audio Component (TypeScript)\nDESCRIPTION: Loads and plays an audio file from an external URL using Remotion's Audio component. The src prop receives a direct URL to an MP3 file, enabling remote audio playback in sync with Remotion's timeline. Remotion is required as a dependency.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Audio } from \\\"remotion\\\";\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <Audio src=\\\"https://file-examples.com/storage/fe48a63c5264cbd519788b3/2017/11/file_example_MP3_700KB.mp3\\\" />\\n  );\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Static Volume for <OffthreadVideo> in Remotion (tsx)\nDESCRIPTION: Example demonstrating how to set a fixed volume level for an `<OffthreadVideo>` component using the `volume` prop. The volume is set to 0.5 (50% of the original). Requires `AbsoluteFill`, `OffthreadVideo`, and `staticFile` imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, OffthreadVideo, staticFile} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo volume={0.5} src={staticFile('video.webm')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Getting available streams with Remotion Media Parser (TypeScript)\nDESCRIPTION: Illustrates how to retrieve all available m3u8 streams using the parseMedia function from @remotion/media-parser, suitable for displaying choices in a UI. By specifying the fields option with m3uStreams set to true, the snippet fetches all stream variants for inspection or user selection. Dependencies include @remotion/media-parser, and the function expects a media source URL. The return value exposes m3uStreams containing the array of streams available.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/selecting-streams.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\nconst {m3uStreams} = await parseMedia({\\n  src: 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8',\\n  fields: {\\n    m3uStreams: true,\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Cancelling Render on Async Error in Remotion (TypeScript/React)\nDESCRIPTION: Showcases how to abort rendering by calling cancelRender with an error message if an async operation fails. This automatically cancels all outstanding delayRender handles to prevent continued blocking. Requires React, remotion, and a fetch-compatible runtime. Inputs: async operation; Outputs: Normal render if success or cancellation with error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/delay-render.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from \"react\";\nimport { cancelRender, continueRender, delayRender } from \"remotion\";\n\nexport const MyComp: React.FC = () => {\n  const [handle] = useState(() => delayRender(\"Fetching data...\"));\n\n  useEffect(() => {\n    fetch(\"https://example.com\")\n      .then(() => {\n        continueRender(handle);\n      })\n      .catch((err) => cancelRender(err));\n  }, []);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing the ReducedInstruction Type in TypeScript\nDESCRIPTION: Shows how to import the `ReducedInstruction` type directly from the `@remotion/paths` package. This type represents the simplified set of instructions ('M', 'L', 'C', 'Z') returned by the `reduceInstructions()` function, useful for type safety when working with simplified paths. Requires the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/reduce-instructions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash\nimport { ReducedInstruction } from \"@remotion/paths\";\n```\n```\n\n----------------------------------------\n\nTITLE: Layering Audio and Video Components with Delayed Start in Remotion using TypeScript/React\nDESCRIPTION: Illustrates how to compose a React component using Remotion primitives such as AbsoluteFill, Audio, Sequence, and OffthreadVideo to control when audio and video start playing within a composition. Each Sequence component starts a new audio or video after 120 frames, exposing them to autoplay restrictions if not handled as explained elsewhere. Dependencies: remotion package. Inputs are static audio and video file paths, as well as frame indices for sequencing; outputs are layered audio/video. Be aware of browser autoplay policies for media that starts after initial user interaction.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/autoplay.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n  AbsoluteFill,\\n  Audio,\\n  OffthreadVideo,\\n  Sequence,\\n  staticFile,\\n} from 'remotion';\\n\\n// ---cut---\\nexport const MyComp = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Audio src={staticFile('audio.mp3')} />\\n      <Sequence from={120}>\\n        <Audio src={staticFile('audio2.mp3')} />\\n      </Sequence>\\n      <Sequence from={120}>\\n        <OffthreadVideo src={staticFile('video.mp4')} />\\n      </Sequence>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Slide Direction Type in TypeScript (TSX)\nDESCRIPTION: This TypeScript snippet demonstrates the usage of the `SlideDirection` type exported from `@remotion/transitions/slide`. It shows how to declare a variable of this type, assigning one of the valid direction strings ('from-left', 'from-right', 'from-top', 'from-bottom'), which controls the direction from which the new slide enters.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/slide.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SlideDirection } from \"@remotion/transitions/slide\";\n\nconst slideDirection: SlideDirection = \"from-left\";\n```\n\n----------------------------------------\n\nTITLE: Incorrect Playback Rate Interpolation with Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates an attempted approach to vary the playback speed of a video over time by directly interpolating the playbackRate of an OffthreadVideo in Remotion. It illustrates why this method does not produce expected results: Remotion evaluates each frame independently, leading to a frame jump rather than an accumulated speed effect. No external dependencies aside from 'remotion' and React are required. The primary parameter, frame, drives playbackRate through interpolation, but correct temporal sequencing is not achieved.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/accelerated-video.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {interpolate, OffthreadVideo} from 'remotion';\\nlet frame = 0;\\n// ---cut---\\n<OffthreadVideo\\n  playbackRate={interpolate(frame, [0, 100], [1, 5])}\\n  src=\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4#disable\"\\n/>;\n```\n\n----------------------------------------\n\nTITLE: Installing Babel Dependencies using Package Managers (Bash)\nDESCRIPTION: Installs the required Babel dependencies (`babel-loader`, `@babel/preset-env`, `@babel/preset-react`) using different package managers (npm, pnpm, yarn). These packages are necessary to enable the legacy Babel transpilation pipeline in a Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/legacy-babel-loader.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i babel-loader @babel/preset-env @babel/preset-react\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i babel-loader @babel/preset-env @babel/preset-react\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add babel-loader @babel/preset-env @babel/preset-react\n```\n\n----------------------------------------\n\nTITLE: Using Webhooks with Remotion Cloud Run Render - Bash\nDESCRIPTION: Illustrates how to provide a webhook URL to receive progress notifications for the rendering job. The '--webhook' flag expects a valid HTTPS endpoint that will accept POST requests. This is essential for integrations where automated notification of render job progress or completion is required.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/render.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--webhook=https://example.com/webhook\n```\n\n----------------------------------------\n\nTITLE: Initializing a Remotion Project via NPM - Bash\nDESCRIPTION: Initializes a new Remotion video project using npm with the blank template. Requires Node.js and npm to be installed. The command scaffolds the project structure in the current directory. No input parameters other than the command itself. Output is a new Remotion-compatible workspace ready for code.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init video --blank\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Video Composition - Console\nDESCRIPTION: The command triggers Remotion's CLI to render video compositions to output files, typically MP4 or webm, as defined by the project's Remotion configuration. Use this after setting up all project dependencies and configurations. The render process can be customized with additional flags and options as documented in the Remotion CLI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-azure/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Using loadFontFromInfo() with Specific Weights and Subsets (TypeScript)\nDESCRIPTION: This snippet showcases the API of `loadFontFromInfo()`. It takes the font metadata obtained from `getInfo()` as the first argument, followed by the desired style ('normal' in this case), and an options object specifying desired `weights` (['400']) and `subsets` (['latin']). It returns an object containing `waitUntilDone` to ensure the font is loaded.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/load-font-from-info.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getInfo} from '@remotion/google-fonts/InterTight';\nimport {loadFontFromInfo} from '@remotion/google-fonts/from-info';\n\nconst {waitUntilDone} = loadFontFromInfo(getInfo(), 'normal', {\n  weights: ['400'],\n  subsets: ['latin'],\n});\n```\n\n----------------------------------------\n\nTITLE: Providing a Custom Volume Slider Implementation in Remotion Player with TypeScript\nDESCRIPTION: This snippet shows how to provide a completely custom volume slider implementation for the Remotion Player using the `renderVolumeSlider` prop (available from v4.0.188). Inside the `App` component, `useCallback` memoizes the slider rendering function. This function receives properties like `isVertical`, `volume`, `onBlur`, `inputRef`, and the `setVolume` callback, which should be used to build the custom slider logic and UI. The example returns `null`, indicating where the custom implementation should be placed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"App.tsx\"\nconst VolumeOnIcon: React.FC = () => null;\nconst VolumeOffIcon: React.FC = () => null;\nconst MyVideo: React.FC = () => null;\n// ---cut---\nimport {useCallback} from 'react';\nimport {Player, type RenderVolumeSlider} from '@remotion/player';\n\nexport const App: React.FC = () => {\n  const renderVolumeSlider: RenderVolumeSlider = useCallback(({isVertical, volume, onBlur, inputRef, setVolume}) => {\n    return null; // Your volume slider implementation\n  }, []);\n\n  return <Player fps={30} component={MyVideo} durationInFrames={120} compositionWidth={1920} compositionHeight={1080} renderVolumeSlider={renderVolumeSlider} />;\n}; \n```\n```\n\n----------------------------------------\n\nTITLE: Identifying Remotion Root Component Timeout Error\nDESCRIPTION: This error message indicates that Remotion's `delayRender()` function, specifically for \"Loading root component\", timed out after 28000ms. This typically occurs when the specified entry point file does not execute the `registerRoot()` function, preventing Remotion from initializing properly.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/loading-root-component.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nA delayRender() \"Loading root component\" was called but not cleared after 28000ms\n```\n\n----------------------------------------\n\nTITLE: Updating ESLint Dependency in package.json (diff)\nDESCRIPTION: Illustrates the optional upgrade of the `eslint` dependency from v7 to v8 when migrating to Remotion v3.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- \"eslint\": \"^7.15.0\"\n+ \"eslint\": \"^8.13.0\"\n```\n\n----------------------------------------\n\nTITLE: Loading and Using a Local Font with `loadFont()` in a Remotion Component (TypeScript)\nDESCRIPTION: This snippet demonstrates how to load a local font file (`bangers.ttf`) using the `loadFont()` function from `@remotion/fonts`. It uses `staticFile()` from `remotion` to get the correct path to the font file. The font is assigned the family name 'Bangers'. Once loaded, it logs a message to the console. A simple React functional component `GoogleFontsExample` then uses this loaded font by setting the `fontFamily` style property.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/fonts-api/load-font.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComp.tsx\"\nimport { loadFont } from \"@remotion/fonts\";\nimport { AbsoluteFill, staticFile } from \"remotion\";\n\nloadFont({\n  family: \"Bangers\",\n  url: staticFile(\"bangers.ttf\"),\n}).then(() => console.log(\"Font loaded!\"));\n\nexport const GoogleFontsExample: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        fontFamily: \"Bangers\",\n      }}\n    >\n      <h1>Local Font</h1>\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using the `AnyComposition` Type for Generic Compositions in Remotion (TypeScript)\nDESCRIPTION: This code illustrates how to use the newly introduced `AnyComposition` type from the `remotion` package. It's useful when a generic composition type is needed, bypassing the specific schema and props generics required by the updated `TComposition` type in scenarios where those specifics aren't relevant.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {AnyComposition} from 'remotion';\n\nconst composition: AnyComposition = {\n  width: 1920,\n  height: 1080,\n  // ...\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Identifying the Remotion Player NPM Package\nDESCRIPTION: This snippet identifies the official NPM package name required to use the Remotion Player component. It needs to be installed using a package manager like npm or yarn (e.g., `npm install @remotion/player` or `yarn add @remotion/player`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/player.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n@remotion/player\n```\n\n----------------------------------------\n\nTITLE: Registering a Combined Remotion Composition in TSX\nDESCRIPTION: This snippet updates the `Root` component to include the newly created `Main` component as a Remotion composition. It is registered alongside the original `One` and `Two` compositions using the `<Composition>` tag. The `durationInFrames` for the `Main` composition reflects the combined duration of its sequenced components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/combine-compositions.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: One.tsx\nimport React from \"react\";\nexport const One: React.FC = () => {\n  return <div>One</div>;\n};\n\n// @filename: Two.tsx\nimport React from \"react\";\nexport const Two: React.FC = () => {\n  return <div>Two</div>;\n};\n\n// @filename: Main.tsx\nimport React from \"react\";\nexport const Main: React.FC = () => {\n  return <div>Main</div>;\n};\n\n// @filename: Root.tsx\n// ---cut---\nimport React from \"react\";\nimport { Composition } from \"remotion\";\nimport { One } from \"./One\";\nimport { Two } from \"./Two\";\nimport { Main } from \"./Main\";\n\nexport const Root: React.FC = () => {\n  return (\n    <>\n      <Composition\n        id=\"One\"\n        component={One}\n        width={1080}\n        height={1080}\n        fps={30}\n        durationInFrames={120}\n      />\n      <Composition\n        id=\"Two\"\n        component={Two}\n        width={1080}\n        height={1080}\n        fps={30}\n        durationInFrames={120}\n      />\n      <Composition\n        id=\"Main\"\n        component={Main}\n        width={1080}\n        height={1080}\n        fps={30}\n        durationInFrames={240} // Sum of One and Two durations\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Configuring FPS per Composition in Remotion (TSX/React)\nDESCRIPTION: Presents a React-based approach for switching the fps of a Remotion <Composition> dynamically based on an input property. Uses useVideoConfig, and calculateMetadata to determine fps at render time depending on props.frameRate ('30fps' or '60fps'). Inputs: frameRate prop ('30fps' | '60fps'), outputs: fps value (30 or 60) for the composition and display. Requires Remotion and a React context; not directly compatible with media elements using fixed frame rates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/multiple-fps.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport {Composition, useCurrentFrame, useVideoConfig} from 'remotion';\\n\\nconst VariableFps: React.FC<{\\n  frameRate: '30fps' | '60fps';\\n}> = () => {\\n  const {fps} = useVideoConfig();\\n  return <div>{fps} FPS</div>;\\n};\\n\\nexport const Root: React.FC = () => {\\n  return (\\n    <Composition\\n      id=\\\"VariableFps\\\"\\n      component={VariableFps}\\n      width={1080}\\n      height={1080}\\n      durationInFrames={100}\\n      calculateMetadata={({props}) => {\\n        return {\\n          fps: props.frameRate === '60fps' ? 60 : 30,\\n        };\\n      }}\\n      defaultProps={{\\n        frameRate: '30fps',\\n      }}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Falling back to Default onVideoTrack Handler Remotion WebCodecs TypeScript\nDESCRIPTION: This example demonstrates how to use convertMedia from @remotion/webcodecs, adding custom logic for video tracks and deferring to defaultOnVideoTrackHandler when necessary. The snippet imports convertMedia and defaultOnVideoTrackHandler, uses a sample video URL as source, and specifies the output container. The onVideoTrack callback allows for custom handling of the video track while falling back to the default behavior to ensure compatibility and maintainability. No explicit dependencies are required other than the @remotion/webcodecs package. The input includes a video URL, and the function expects customized handling of video tracks while ultimately returning processed media.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/default-on-audio-track-handler.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {convertMedia, defaultOnVideoTrackHandler} from '@remotion/webcodecs';\\n\\nawait convertMedia({\\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\\n  container: 'webm',\\n  onVideoTrack: (params) => {\\n    // Custom logic for handling video tracks\\n    // ...\\n\\n    // Fall back to the default behavior\\n    return defaultOnVideoTrackHandler(params);\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Project Structure Changes for Remotion Integration - Diff\nDESCRIPTION: This diff snippet illustrates how to create a project folder structure that includes a dedicated Remotion directory within your source tree. This ensures separation of Remotion compositions and registration logic from your main application files. File additions (index.ts, MyComp.tsx, Root.tsx) are shown as new content under src/remotion/.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n └── src/\n+  ├── remotion/\n+  │   ├── index.ts\n+  │   ├── MyComp.tsx\n+  │   └── Root.tsx\n   └── app/\n       └── App.tsx\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies with Yarn (Bash)\nDESCRIPTION: Installs Remotion core, player, CLI, Zod types, React, React DOM, and Zod as project dependencies. It also installs React type definitions as development dependencies using the Yarn package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add remotion @remotion/player @remotion/cli @remotion/zod-types react react-dom zod\nyarn add --dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Running the Video Splitting Script with Bun (Shell)\nDESCRIPTION: This shell command invokes the TypeScript splitting script using Bun, passing arguments for composition ID, video timestamp, and cut point in seconds. It must be run in a shell environment with Bun installed and the TypeScript script and dependencies available. The command triggers the split and modifies video files as specified. Ensure to use the correct file and backup data before running.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/cutting-clips.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbun cut.ts my-video 123456789012345 2.0\n#          ^ comp   ^timestamp      ^ cut point in seconds\n```\n\n----------------------------------------\n\nTITLE: Defining a Reusable Title Component in Remotion (TypeScript)\nDESCRIPTION: This snippet defines a basic React functional component named `Title` for use in Remotion. It accepts a `title` string as a prop. Inside the component, it uses the `useCurrentFrame` hook to get the current frame number and `interpolate` to create a fade-in effect over the first 20 frames by animating the opacity style. The component renders a `div` element displaying the title text.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequences.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {interpolate, useCurrentFrame, AbsoluteFill} from 'remotion'\n\nconst Title: React.FC<{title: string}> = ({title}) => {\n    const frame = useCurrentFrame()\n    const opacity = interpolate(frame, [0, 20], [0, 1], {extrapolateRight: 'clamp'})\n\n    return (\n      <div style={{opacity, textAlign: \"center\", fontSize: \"7em\"}}>{title}</div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion for WebM Transparent Video Export (TypeScript)\nDESCRIPTION: This snippet demonstrates setting Remotion's configuration programmatically to enable transparent video export for WebM (VP8/VP9) with an alpha channel. Sets the image format to PNG, the pixel format to 'yuva420p', and the codec to VP8. It requires '@remotion/cli/config' and should be placed in 'remotion.config.ts'. No other dependencies are needed, and after saving this file, all renders will use these format options unless overridden.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transparent-videos.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\n\nConfig.setVideoImageFormat(\"png\");\nConfig.setPixelFormat(\"yuva420p\");\nConfig.setCodec(\"vp8\");\n```\n\n----------------------------------------\n\nTITLE: Example Return Value Structure for getCompositionsOnLambda() in TypeScript\nDESCRIPTION: This snippet shows an example structure of the array returned by the `getCompositionsOnLambda()` function. Each object in the array represents a composition found in the Remotion project, detailing its `id`, `width`, `height`, `fps`, `durationInFrames`, and any `defaultProps` defined for it.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getcompositionsonlambda.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n[\n  {\n    id: 'HelloWorld',\n    width: 1920,\n    height: 1080,\n    fps: 30,\n    durationInFrames: 120,\n    defaultProps: {\n      title: 'Hello World',\n    },\n  },\n  {\n    id: 'Title',\n    width: 1080,\n    height: 1080,\n    fps: 30,\n    durationInFrames: 90,\n    defaultProps: undefined,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Buffering Spinner Overlay on Remotion Player (TSX)\nDESCRIPTION: This snippet demonstrates how to display a custom loading UI, such as a spinner, as an overlay on top of the Remotion Player while it's buffering. This is achieved by setting the `showPosterWhenBuffering` prop to `true` and providing a custom rendering function to the `renderPoster` prop. The function checks the `isBuffering` state and returns the custom spinner component, positioned using `AbsoluteFill`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCallback} from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nconst Component: React.FC = () => null;\nconst Spinner: React.FC = () => null;\n\n// ---cut---\n\nimport type {RenderPoster} from '@remotion/player';\nimport {Player} from '@remotion/player';\n\nconst MyApp: React.FC = () => {\n  const renderPoster: RenderPoster = useCallback(({isBuffering}) => {\n    if (isBuffering) {\n      return (\n        <AbsoluteFill style={{justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner />\n        </AbsoluteFill>\n      );\n    }\n\n    return null;\n  }, []);\n\n  return (\n    <Player\n      fps={30}\n      component={Component}\n      durationInFrames={100}\n      compositionWidth={1080}\n      compositionHeight={1080}\n      renderPoster={renderPoster}\n      showPosterWhenBuffering\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying Slow Frame Extraction Warning in Remotion Console (Pre-v4.0)\nDESCRIPTION: This warning message appears in the console when using the `<OffthreadVideo>` component in Remotion versions prior to 4.0. It indicates that Remotion had to use an inefficient method to extract a specific frame (at the indicated timestamp) from the video file. This typically happens due to corrupted timestamps in H.264/MP4 files or when using VP8/WebM videos with the PNG image format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/slow-method-to-extract-frame.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsing a slow method to extract the frame at 1000ms of [video].\n```\n\n----------------------------------------\n\nTITLE: Example Value: Font Variant URL Mapping - JavaScript Object\nDESCRIPTION: An example JavaScript object showing the structure returned for the 'fonts' property when invoking loadFont(). Organizes available font URLs by style, weight, and subset. There are no external dependencies, and no functions are executed in this snippet—it simply illustrates expected output. Inputs: none. Output: mapping of style, weights, and subsets with their respective CDN URLs, useful for inspection or debugging.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/load-font.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  normal: {\n    '400': {\n      'latin-ext': 'https://fonts.gstatic.com/s/titanone/v13/mFTzWbsGxbbS_J5cQcjCmjgm6Es.woff2',\n      'latin': 'https://fonts.gstatic.com/s/titanone/v13/mFTzWbsGxbbS_J5cQcjClDgm.woff2',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding a Mux Video with Custom Styling in React - JSX\nDESCRIPTION: This snippet demonstrates embedding a Mux-hosted video using the NewMuxVideo React component, passing a muxId and a style prop to limit the maximum width of the player. It relies on the presence of the imported NewMuxVideo component and assumes that it accepts muxId and style as props for configuration. The muxId specifies the video to display, while the style prop applies inline styles, with maxWidth set to 400 pixels.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/demo.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NewMuxVideo\n\tmuxId=\"pHlwqDZFUH00Aubo9M001ty3gZ6YW8z689XTd9R479ayE\"\n\tstyle={{maxWidth: 400}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Message for Multiple Buckets in Remotion Cloud Run - plaintext\nDESCRIPTION: Shows the specific error message that occurs when multiple storage buckets with the naming convention \"remotioncloudrun-\" are detected in the same region for Remotion Cloud Run. This message helps users identify and resolve duplicate bucket issues by directing them to the GCP console for cleanup. No dependencies are required, as this is a literal message for end-user troubleshooting. Input is user misconfiguration; output is the error message displayed to guide corrective action.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/multiple-buckets.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou have multiple buckets [remotioncloudrun-1a2b3c4d, remotioncloudrun-howDidThisHappen] in your Cloud Storage region [us-east1] starting with \"remotioncloudrun-\".\n```\n\n----------------------------------------\n\nTITLE: Conditionally Re-encoding Audio Tracks during Media Conversion using TypeScript\nDESCRIPTION: This example demonstrates integrating `canReencodeAudioTrack` within the `onAudioTrack` callback of the `convertMedia` function from `@remotion/webcodecs`. It first checks if the incoming audio track can be re-encoded to 'opus' with a specified bitrate. If possible, it returns instructions to re-encode; otherwise, it returns instructions to drop the track during the conversion process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/can-reencode-audio-track.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia, canReencodeAudioTrack} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  videoCodec: 'vp8',\n  audioCodec: 'opus',\n  onAudioTrack: async ({track}) => {\n    const canReencode = await canReencodeAudioTrack({\n      track,\n      audioCodec: 'opus',\n      bitrate: 128000,\n      sampleRate: null,\n    });\n\n    if (canReencode) {\n      return {type: 'reencode', audioCodec: 'opus', bitrate: 128000, sampleRate: null};\n    }\n\n    return {type: 'drop'};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Remotion Versions Check using npx (Shell)\nDESCRIPTION: This command utilizes `npx` to run the `remotion versions` command-line tool. Its purpose is to scan the project's dependencies and report the installed versions of all recognized Remotion packages. Requires Node.js and npm/npx.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/versions.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion versions\n```\n\n----------------------------------------\n\nTITLE: Defining the Updated `TComposition` Generic Type in Remotion (TypeScript)\nDESCRIPTION: This snippet displays the updated type definition for `TComposition` in Remotion v4. It now accepts two generic arguments: `Schema` (constrained to `AnyZodObject` from Zod) and `Props`, reflecting changes related to Zod schema integration for input validation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport type TComposition<Schema extends AnyZodObject, Props> = {};\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Demonstration Video using JSX\nDESCRIPTION: This JSX snippet embeds a video element within a centered div container. The video demonstrates adding a new scene in the Remotion Recorder and is configured to autoplay, loop, be muted, and display controls using standard HTML5 video attributes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/scenes.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{\n  display: \"flex\",\n  justifyContent: \"center\"\n}}>\n  <video src=\"/recorder/add-new-scene.mov\" width=\"700\" height=\"400\" autoPlay muted controls loop playsInline />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining React Functional Component with Implicit Children (Pre-React 18)\nDESCRIPTION: Shows the previous TypeScript syntax for defining a React Functional Component (`React.FC`) where the `children` prop was implicitly included in the type. This syntax causes type errors in React 18.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/react-18.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComp: React.FC = ({ children }) => <div>{children}</div>;\n```\n\n----------------------------------------\n\nTITLE: New Chrome Headless Mode Flag\nDESCRIPTION: Command-line flag for newer Chrome desktop versions that activates the modern headless mode (`--headless=new`), primarily designed for browser testing automation and WebDriver BiDi. This mode is distinct from the one used by Chrome Headless Shell (`--headless=old`) for rendering purposes in Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n--headless=new\n```\n\n----------------------------------------\n\nTITLE: Verifying CDK Output Values - Bash\nDESCRIPTION: Shows the output of a successful CDK deployment, listing the API Gateway URL, AWS region, Cognito User Pool IDs, and Stack ARN. These outputs are needed for authentication and request configuration in later steps. The values correspond to deployed AWS resources and are referenced in subsequent scripts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nOutputs:\\ncdk-stack.apiUrl = https://du7jfr.execute-api.us-east-1.amazonaws.com/\\ncdk-stack.region = us-east-1\\ncdk-stack.userPoolClientId = 4l5tsda2iu8lqugl73m8hgeb83\\ncdk-stack.userPoolId = us-east-1_bVwFsBUGO\\nStack ARN:\\narn:aws:cloudformation:us-east-1:XXXXXXXXXX:stack/cdk-stack/faf43800-9878-11ed-a070-0aacc64c8662\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing a Skia-enabled Remotion Project via npm - Bash\nDESCRIPTION: This snippet initializes a new Remotion project pre-configured with React Native Skia support using npm. The --skia flag ensures the setup includes the necessary dependencies and scaffolding for Skia features. Requires npm, and creates a project with support for React Native Skia and Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-08-10-remotion-3-2.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-video --skia\n```\n\n----------------------------------------\n\nTITLE: Implementing Consistent Randomness with remotion.random() in TSX\nDESCRIPTION: Shows the correct way to generate pseudo-random, deterministic values in Remotion using the `random()` API. By providing a unique seed (e.g., based on the element index), `random()` ensures the same output value is generated for the same seed across different rendering threads, preventing inconsistencies. This guarantees stable random values during rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-26-remotion-1-4.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {7-8}\nimport {useState} from 'react';\nimport {random} from 'remotion';\n\nexport const MyComp = () => {\n  // ✅ Pseudo-random values that will be same across threads\n  const [particles] = useState(() => {\n    return new Array(100).fill(true).map((_, idx) => ({\n      x: random(`x-${idx}`),\n      y: random(`y-${idx}`),\n    }));\n  });\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Video Preview Server - Console\nDESCRIPTION: This command starts the development preview server for the Remotion project using npm scripts. Prerequisite: All dependencies should be installed. Executes the 'dev' script defined in package.json, typically launching a local server (usually at http://localhost:3000) to preview video compositions live. No input parameters are required, and the output is an interactive browser-based preview environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-skia/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Measuring and Correcting DOM Node Dimensions with useCurrentScale Hook in React (TypeScript)\nDESCRIPTION: This snippet demonstrates measuring a DOM node's dimensions in a Remotion project while accounting for the scale transform applied to the rendering container. It uses the `useCurrentScale()` hook to obtain the current scale factor, dividing the measured width and height values to get corrected dimensions. The snippet relies on React hooks (`useRef`, `useEffect`, and `useState`) and the `remotion` package for the scale hook. Dependencies include React 17+ and Remotion v4.0.111 or later. The `ref` prop is used to get the target DOM node, and the main output is an object containing `correctedHeight` and `correctedWidth`. The approach assumes that the measured node is visible and mounted when the effect runs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/measuring.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useCallback, useEffect, useState, useRef } from \"react\";\nimport { useCurrentScale } from \"remotion\";\n\nexport const MyComponent = () => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [dimensions, setDimensions] = useState<{\n    correctedHeight: number;\n    correctedWidth: number;\n  } | null>(null);\n\n  const scale = useCurrentScale();\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const rect = ref.current.getBoundingClientRect();\n\n    setDimensions({\n      correctedHeight: rect.height / scale,\n      correctedWidth: rect.width / scale,\n    });\n  }, [scale]);\n\n  return (\n    <div>\n      <div ref={ref}>Hello World!</div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Extrapolation Options in interpolate() using TSX\nDESCRIPTION: Provides concrete examples of how different `extrapolateRight` options (`extend`, `clamp`, `identity`, `wrap`) affect the output of `interpolate` when the input value (1.5) falls outside the defined input range (`[0, 1]`). This helps understand how to control behavior at the boundaries of the interpolation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { interpolate } from \"remotion\";\n// ---cut---\ninterpolate(1.5, [0, 1], [0, 2], { extrapolateRight: \"extend\" }); // 3\ninterpolate(1.5, [0, 1], [0, 2], { extrapolateRight: \"clamp\" }); // 2\ninterpolate(1.5, [0, 1], [0, 2], { extrapolateRight: \"identity\" }); // 1.5\ninterpolate(1.5, [0, 1], [0, 2], { extrapolateRight: \"wrap\" }); // 1\n```\n\n----------------------------------------\n\nTITLE: Using `lazyComponent` for Lazy Loading in Remotion Composition (TSX)\nDESCRIPTION: This snippet demonstrates using the `lazyComponent` prop for a Remotion `<Composition>`. Instead of directly importing the component, it provides a function that returns a dynamic `import()`. This allows Remotion and Webpack to load the component (`LazyComponent`) only when needed, potentially reducing initial load times, especially for projects with many compositions. Note that the lazy-loaded component must be a default export.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/composition.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nexport const MyVideo = () => {\n  return (\n    <>\n      <Composition\n        id=\"my-comp\"\n        lazyComponent={() => import(\"./LazyComponent\")}\n        width={1080}\n        height={1080}\n        fps={30}\n        durationInFrames={3 * 30}\n      />\n    </>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Framework using NPX\nDESCRIPTION: This command uses NPX to execute the Remotion CLI's 'upgrade' command. This utility checks for newer versions of the Remotion framework and its associated packages, and guides the user through the process of updating the project's dependencies to the latest compatible versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-helloworld/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Premounting a Sequence in Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to premount a video sequence in Remotion by adding the premountFor prop to the <Sequence> component. Dependencies include 'remotion' with access to Sequence, staticFile, and Video. The key parameter premountFor determines how many frames before appearance the component is mounted; its value (e.g., 100) controls the length of the preloading window. This approach helps assets load in advance and prevents flickering, but should be used sparingly to avoid performance issues from having too many elements mounted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/premounting.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Sequence, staticFile, Video} from 'remotion';\n\n// ---cut---\nconst MyComp: React.FC = () => {\n  return (\n    <Sequence premountFor={100}>\n      <Video src={staticFile('bigbuckbunny.mp4')}></Video>\n    </Sequence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Pausing and Resuming WebCodecs Media Conversion in TypeScript\nDESCRIPTION: This example demonstrates how to pause and resume an active media conversion using @remotion/webcodecs's controller in a TypeScript environment. The code imports required functions, initializes a controller, and starts a conversion job. After 1 second, it programmatically pauses the process, then resumes it following another second. Required dependencies include @remotion/webcodecs; 'src' is the source media URL, and 'container' specifies the output format. Output appears in the console, reporting success or errors during the process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/pause-resume-abort.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {webcodecsController, convertMedia} from '@remotion/webcodecs';\n\nconst controller = webcodecsController();\n\nconvertMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  container: 'webm',\n  controller,\n})\n  .then(() => {\n    console.log('Finished downloading');\n  })\n  .catch((err) => {\n    console.error('Error downloading', err);\n  });\n\n// Wait 1 sec, pause, wait 1 sec, resume\nawait new Promise((resolve) => setTimeout(resolve, 1000));\ncontroller.pause();\nawait new Promise((resolve) => setTimeout(resolve, 1000));\ncontroller.resume();\n```\n\n----------------------------------------\n\nTITLE: Defining a Still Image Composition with Remotion <Still /> (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to define a still image composition using Remotion's <Still /> component in a React/TypeScript project. The Still component is similar to Composition but is streamlined for single-frame (still) renders, eliminating the need for fps and durationInFrames properties. Required dependency: 'remotion' npm package; key parameters include id (unique string), component (React.FC reference), width, height, and defaultProps for runtime customization. This component is used to specify the metadata for images rendered by Remotion's still pipeline, with all property types inferred from standard Remotion components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-08-11-remotion-2-3.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Still} from 'remotion';\nconst Thumbnail: React.FC = () => null;\n// ---cut---\n<Still\n  id=\"Thumbnail\"\n  component={Thumbnail}\n  width={1200}\n  height={627}\n  defaultProps={{\n    title: 'Welcome to Remotion',\n    description: 'Edit Video.tsx to change template',\n    slogan: 'Write videos\\nin React',\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Rectangle Using Remotion Shapes and React in TypeScript\nDESCRIPTION: This example demonstrates how to display a centered red rectangle using the <Rect /> component from @remotion/shapes within a Remotion composition. It imports AbsoluteFill from remotion for layout and applies custom style properties to center the rectangle. Required dependencies include @remotion/shapes and remotion, and input props such as width, height, and fill determine the rectangle's appearance. Output is a visually centered SVG rectangle with specified dimensions and color.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/rect.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Rect } from \"@remotion/shapes\";\nimport { AbsoluteFill } from \"remotion\";\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Rect width={200} height={200} fill=\"red\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Remotion Renderer Integration - JavaScript\nDESCRIPTION: This code snippet demonstrates how to customize the Next.js configuration file (next.config.js) to support the @remotion/renderer package when self-hosting. It sets reactStrictMode to true and adds @remotion/renderer to serverExternalPackages, which enables access to its dependencies at runtime. The configuration should be used only in self-hosted environments where function size is not limited. No additional parameters are required, but @remotion/renderer must be installed in your project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/nextjs.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @type {import('next').NextConfig} */\\nconst nextConfig = {\\n  reactStrictMode: true,\\n  serverExternalPackages: ['@remotion/renderer'],\\n};\\n\\nmodule.exports = nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Simulating AWS Lambda Permissions with OnSimulation Callback in Remotion (TypeScript)\nDESCRIPTION: This TypeScript example shows the use of the onSimulation callback option when invoking simulatePermissions() from @remotion/lambda. The onSimulation callback fires for each simulation result as it becomes available, allowing for responsive handling. Requires @remotion/lambda installed and an AWS region specified. Parameters include region and an optional onSimulation function, which receives each result containing a decision and a name. The return value remains a results array, but the callback enables more granular processing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/simulatepermissions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {simulatePermissions} from '@remotion/lambda';\n\nconst {results} = await simulatePermissions({\n  region: 'us-east-1',\n  onSimulation: (result) => {\n    console.log(result.decision); // \"allowed\"\n    console.log(result.name); // \"iam:SimulatePrincipalPolicy\"\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Loading a Local Animated Image using <AnimatedImage> in Remotion (TSX)\nDESCRIPTION: Shows how to load a local animated GIF file using the `<AnimatedImage>` component in Remotion. The `staticFile` function is used to reference the local file path correctly within the Remotion project structure, which is then passed to the `src` prop. This also relies on the ImageDecoder API.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animatedimage.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Loading a local animated image\"\nimport {AnimatedImage, staticFile} from 'remotion';\n\nexport const GifAnimatedImage = () => {\n  return <AnimatedImage src={staticFile('giphy.gif')} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Parsing SVG Path Strings with parsePath from Remotion Paths (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to import and use the parsePath function from the @remotion/paths package to convert an SVG path string into an array of Instruction objects. It shows an example where the string 'M 10 10 L 20 20' is parsed into its respective instructions. Dependencies include the @remotion/paths package (v3.3.40 or later). The function throws an error if the SVG path is invalid, and the output is an array whose structure is determined by the Instruction type.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/parse-path.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { parsePath } from \"@remotion/paths\";\n\nconst newPath = parsePath(\"M 10 10 L 20 20\");\n\n/*\n  [\n    { type: \"M\", x: 10, y: 10 },\n    { type: \"L\", x: 20, y: 20 },\n  ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Resolving Redirects and Preloading Fonts with resolveRedirect() - TypeScript/React\nDESCRIPTION: This snippet combines resolveRedirect() with preloadFont() to handle scenarios where a font URL may redirect, which would prevent direct preloading from working reliably. It utilizes async resolution of redirects and manages URL assignment, including error handling if CORS limitations block access. Finally, it attempts to preload the (possibly resolved) URL. The code also defines a simple React Functional Component that references the font family, demonstrating expected usage post-preload. The dependencies are @remotion/preload and React, inputs are font URLs that may redirect, and outputs are robust font preloading in environments with potential URL redirects and fallback strategies. Limitations include CORS restrictions and the best-effort nature if redirects cannot be resolved.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload-font.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { preloadFont, resolveRedirect } from \"@remotion/preload\";\n\n// This code gets executed immediately once the page loads\nlet urlToLoad =\n  \"https://fonts.gstatic.com/s/roboto/v30/KFOlCnqEu92Fr1MmYUtfBxc4AMP6lbBP.woff2\";\n\nresolveRedirect(urlToLoad)\n  .then((resolved) => {\n    // Was able to resolve a redirect, setting this as the font to load\n    urlToLoad = resolved;\n  })\n  .catch((err) => {\n    // Was unable to resolve redirect e.g. due to no CORS support\n    console.log(\"Could not resolve redirect\", err);\n  })\n  .finally(() => {\n    // In either case, we try to preload the original or resolved URL\n    preloadFont(urlToLoad);\n  });\n\n// This code only executes once the component gets mounted\nconst MyComp: React.FC = () => {\n  // If the component did not mount immediately, this will be the resolved URL.\n\n  // If the component mounted immediately, this will be the original URL.\n  // In that case preloading is ineffective anyway.\n  return <div style={{ fontFamily: \"Roboto\" }}></div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using the onInit Callback with renderStillOnLambda in TypeScript\nDESCRIPTION: This snippet illustrates how to use the `onInit` callback with `renderStillOnLambda`. The callback function is executed when the render process begins, providing early access to the `renderId`, `cloudWatchLogs` URL (if enabled), and `lambdaInsightsUrl` (if enabled). This is useful for logging or tracking purposes even before the render completes or if it fails.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/renderstillonlambda.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @module: esnext\n// @target: es2022\n\nimport {renderStillOnLambda, RenderStillOnLambdaInput} from '@remotion/lambda/client';\n\nconst otherParameters: RenderStillOnLambdaInput = {\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  composition: 'MyVideo',\n  inputProps: {},\n  imageFormat: 'png',\n  maxRetries: 1,\n  privacy: 'public',\n  envVariables: {},\n  frame: 10,\n};\nawait renderStillOnLambda({\n  ...otherParameters,\n  onInit: ({cloudWatchLogs, renderId, lambdaInsightsUrl}) => {\n    console.log(console.log(`Render invoked with ID = ${renderId}`));\n    console.log(`CloudWatch logs (if enabled): ${cloudWatchLogs}`);\n    console.log(`Lambda Insights (if enabled): ${lambdaInsightsUrl}`);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Environment File from Cloud Shell VM (Bash)\nDESCRIPTION: Removes the temporary `.env` file from the Cloud Shell virtual machine after its contents have been copied to the local development environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm .env\n```\n\n----------------------------------------\n\nTITLE: Invoking Remotion Cloud Run Media Render in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to initiate a media rendering process on Remotion Cloud Run using the renderMediaOnCloudrun function from the @remotion/cloudrun/client package. It shows how to configure and pass mandatory arguments—such as region, service name, composition ID, serve URL, and codec—into the API call, handle the returned promise, and interpret success results including bucket and render IDs. Dependencies include the @remotion/cloudrun/client Node package; the snippet requires an already deployed Remotion Cloud Run service and valid project configuration. Inputs must specify rendering details, while the output is an object indicating render status and metadata; ensure the correct API version and credentials are set. Limitations include the need for at least one of cloudRunUrl or serviceName, and possible API changes in alpha versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/rendermediaoncloudrun.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ---cut---\nimport {renderMediaOnCloudrun} from '@remotion/cloudrun/client';\n\nconst result = await renderMediaOnCloudrun({\n  region: 'us-east1',\n  serviceName: 'remotion-render-bds9aab',\n  composition: 'MyVideo',\n  serveUrl: 'https://storage.googleapis.com/remotioncloudrun-123asd321/sites/abcdefgh',\n  codec: 'h264',\n});\n\nif (result.type === 'success') {\n  console.log(result.bucketName);\n  console.log(result.renderId);\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading a Remotion Component for the Player in React TypeScript\nDESCRIPTION: Demonstrates dynamically importing a composition using useCallback and the lazyComponent prop. @remotion/player is required, and the Player will request the module asynchronously when playback is needed. Inputs: lazyComponent (callback returning import promise), playback props. Outputs: player loads and uses the lazy-loaded component. Limitation: must ensure MyVideo is default exported and the import path is correct.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport default () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player } from \"@remotion/player\";\\nimport { useCallback } from \"react\";\\n\\nexport const App: React.FC = () => {\\n  const lazyComponent = useCallback(() => {\\n    return import(\"./remotion/MyVideo\");\\n  }, []);\\n\\n  return (\\n    <Player\\n      lazyComponent={lazyComponent}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n      loop\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Remote Images with <Img> in Remotion (TSX)\nDESCRIPTION: Shows how to use the Remotion `<Img>` component to display an image hosted on a remote server. Simply pass the image URL directly to the `src` prop. Remotion will handle fetching and preloading the image before rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/img.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { AbsoluteFill, Img } from \"remotion\";\n\nexport const MyComp: React.FC = () => {\n  return (\n    <AbsoluteFill>\n      <Img src={\"https://picsum.photos/200/300\"} />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Chunking Video with Series and OffthreadVideo Components (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to split a large video into multiple parts and render them sequentially using Remotion\\'s <Series> and <OffthreadVideo> components in a TypeScript React component. It imports necessary hooks and components from Remotion, iterates over an array of video parts, and mounts each one in a sequence with a defined duration. This technique helps avoid delayRender timeouts by loading only part of the video at a time. Required dependencies include Remotion, React, TypeScript, and the relevant video files accessible through staticFile(). The input is an array of part filenames and the output is a series of video sequences rendered one after another.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/delay-render-proxy.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Series, useVideoConfig, OffthreadVideo, staticFile } from \\\"remotion\\\";\n\nconst parts = [\\\"part1.mp4\\\", \\\"part2.mp4\\\", \\\"part3.mp4\\\"];\n\nconst SeriesTesting: React.FC = () => {\n  const { fps } = useVideoConfig();\n\n  return (\n    <Series>\n      {parts.map((part) => {\n        return (\n          <Series.Sequence durationInFrames={30 * 60}>\n            <OffthreadVideo src={staticFile(part)} />\n          </Series.Sequence>\n        );\n      })}\n    </Series>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating CSS rotateZ() Transform in Remotion (TSX)\nDESCRIPTION: Illustrates using the `rotateZ` function from `@remotion/animation-utils` to generate a CSS `rotateZ()` transform string. It accepts the angle as a number (degrees), a string with unit, or a number and an optional unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { rotateZ } from \"@remotion/animation-utils\";\n\nconst transform = rotateZ(45);\n// => \"rotateZ(45deg)\"\n\nconst transform2 = rotateZ(\"45deg\");\n// => \"rotateZ(45deg)\"\n\nconst transform3 = rotateZ(1, \"rad\");\n// => \"rotateZ(1rad)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Animating Scene Entry Using <TransitionSeries> and Slide Presentation (TypeScript/React)\nDESCRIPTION: This example showcases using <TransitionSeries> for animating the entrance of a scene with a slide transition. The Letter component renders a colored and centered letter. The slide transition, with linearTiming for 30 frames, is applied after a 40-frame scene. Dependencies are @remotion/transitions and @remotion/transitions/slide. Scene and transition durations are configurable. No output is returned; rather, this is intended to define a composable scene in a Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/transitionseries.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill } from \\\"remotion\\\";\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \\\"center\\\",\n        alignItems: \\\"center\\\",\n        fontSize: 200,\n        color: \\\"white\\\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { linearTiming, TransitionSeries } from \\\"@remotion/transitions\\\";\nimport { slide } from \\\"@remotion/transitions/slide\\\";\n\nconst BasicTransition = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\\\"#0b84f3\\\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={slide()}\n        timing={linearTiming({ durationInFrames: 30 })}\n      />\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Automating Multi-Platform Remotion Lambda Renders with Bun and TypeScript\nDESCRIPTION: This TypeScript script, intended to be run with Bun (`bun lambda.ts`), automates the process of rendering a Remotion video for multiple platform configurations on AWS Lambda. It first ensures the site is created/updated on S3 and then iterates through a predefined array of configurations, dynamically generating and executing `remotion lambda render` commands with appropriate props for each platform. Dependencies include Bun, Remotion CLI, and the `bun` shell utility (`$`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/lambda-rendering.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {$} from 'bun';\n\nconst siteName = 'our-recorder';\nconst compositionId = 'installwhispercpp';\n\nconst configs = [\n  {\n    canvasLayout: 'square',\n    platform: 'linkedin',\n  },\n  {\n    canvasLayout: 'square',\n    platform: 'x',\n  },\n  {\n    canvasLayout: 'landscape',\n    platform: 'youtube',\n  },\n];\n\nawait $`bunx remotion lambda sites create --site-name=${siteName}`;\n\nfor (const config of configs) {\n  await $`bunx remotion lambda render ${siteName} ${compositionId} --props='${JSON.stringify(config)}'`;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inefficient Data Propagation in Remotion Composition - TypeScript/React\nDESCRIPTION: This snippet illustrates an anti-pattern where a large object (`audioData`) is fetched using `getAudioData` and passed into a Remotion `<Composition>` via `defaultProps`. This approach can cause serialization errors due to data size limits. It depends on `@remotion/media-utils`, hooks (`useEffect`, `useState`), and several Remotion functions such as `cancelRender`, `continueRender`, `delayRender`, and `staticFile`. The expected input includes an audio asset, and the outputs are the passing of `audioData` as a prop. The main limitation is the risk of exceeding Chrome's serialization limits, making this method unsuitable for large data payloads.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/defaultprops-too-big.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AudioData, getAudioData } from \"@remotion/media-utils\";\nimport { useEffect, useState } from \"react\";\nimport {\n  cancelRender,\n  Composition,\n  continueRender,\n  delayRender,\n  staticFile,\n} from \"remotion\";\n\n// MyComp.tsx\nconst MyComp: React.FC<{\n  audioData: AudioData | null;\n}> = ({ audioData }) => {\n  return null;\n};\n\n// src/Root.tsx\nconst RemotionRoot = () => {\n  const [audioData, setAudioData] = useState<AudioData | null>(null);\n  const [handle] = useState(() => delayRender());\n\n  useEffect(() => {\n    getAudioData(staticFile(\"audio.mp3\"))\n      .then((data) => {\n        setAudioData(data);\n        continueRender(handle);\n      })\n      .catch((e) => {\n        cancelRender(e);\n      });\n  }, [handle]);\n\n  return (\n    <Composition\n      id=\"my-comp\"\n      durationInFrames={90}\n      width={1080}\n      height={1080}\n      fps={1080}\n      component={MyComp}\n      defaultProps={{\n        audioData,\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Composition Omitting Composition Name (Bash)\nDESCRIPTION: Illustrates a Remotion CLI command where both the output filename and the composition name are omitted. Remotion will process the entry point 'src/index.tsx' and prompt the user to select which composition defined within that entry point should be rendered.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render src/index.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Image Format in Remotion v4.0 (TypeScript)\nDESCRIPTION: This snippet demonstrates the required method `Config.setVideoImageFormat(\"jpeg\")` for use in Remotion v4.0 configuration files. This replaces the previous `Config.setImageFormat` method specifically for controlling the image format during video rendering, representing a breaking change from earlier versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-alpha.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nConfig.setVideoImageFormat(\"jpeg\");\n```\n```\n\n----------------------------------------\n\nTITLE: Creating TailwindCSS v3 Configuration File\nDESCRIPTION: JavaScript code for a basic `tailwind.config.js` file at the project root. It configures Tailwind to scan `.ts` and `.tsx` files within the `src` directory for class names and includes placeholders for theme extensions and plugins.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-env node */\nmodule.exports = {\n  content: ['./src/**/*.{ts,tsx}'],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.step1 Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.step1`. This is a stepping function that returns 1 if the input `n` is greater than or equal to 1, otherwise 0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nstatic step1(n): number\n```\n\n----------------------------------------\n\nTITLE: Accessing Lambda Still Artifacts with renderStillOnLambda (TypeScript)\nDESCRIPTION: Demonstrates how to access artifact details directly from the response object returned by the `renderStillOnLambda` function from `@remotion/lambda/client`. The response object contains an `artifacts` array, which includes information such as filename, size, S3 URL, and S3 key for any artifacts generated during the single-frame (still) render on Lambda. Requires `@remotion/lambda/client` and appropriate configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifacts.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst serveUrl = 'http://localhost:8080';\nconst inputProps = {};\nconst functionName = 'hi';\nconst composition = 'hi';\nconst privacy = 'public' as const;\nconst imageFormat = 'png' as const;\nconst region = 'eu-central-1' as const;\n\n// ---cut---\nimport {renderStillOnLambda} from '@remotion/lambda/client';\n\nconst stillResponse = await renderStillOnLambda({\n  functionName,\n  region,\n  serveUrl,\n  composition,\n  inputProps,\n  imageFormat,\n  privacy,\n});\n\nfor (const artifact of stillResponse.artifacts) {\n  console.log(artifact.filename); // \"hello-world.txt\"\n  console.log(artifact.sizeInBytes); // 12\n  console.log(artifact.s3Url); // \"https://s3.eu-central-1.amazonaws.com/remotion-lambda-abcdef/renders/abcdef/artifacts/hello-world.txt\"\n  console.log(artifact.s3Key); // \"renders/abcdef/artifacts/hello-world.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Git LFS - bash\nDESCRIPTION: This snippet details the command for initializing Git Large File Storage (LFS) in the project. This setup is required before tracking large media files with LFS. Prerequisites are the installation of Git LFS binary. The 'git lfs install' command prepares the repository to support LFS tracking. Input is the bash command, and it configures the repo for LFS usage.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/source-control.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ngit lfs install\n```\n```\n\n----------------------------------------\n\nTITLE: Example value of info object returned by getInfo - JSON\nDESCRIPTION: Displays a sample structure of the object returned by the getInfo API, containing font family metadata including its name, import label, version, available styles, weights, subsets, downloadable font URLs, and unicode ranges. All fields are read-only and used for reference. No external dependencies are required beyond having called getInfo() in code.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fontFamily\": \"Titan One\",\n  \"importName\": \"TitanOne\",\n  \"version\": \"v13\",\n  \"url\": \"https://fonts.googleapis.com/css2?family=Titan+One:ital,wght@0,400\",\n  \"unicodeRanges\": {\n    \"latin-ext\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF\",\n    \"latin\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD\"\n  },\n  \"fonts\": {\n    \"normal\": {\n      \"400\": {\n        \"latin-ext\": \"https://fonts.gstatic.com/s/titanone/v13/mFTzWbsGxbbS_J5cQcjCmjgm6Es.woff2\",\n        \"latin\": \"https://fonts.gstatic.com/s/titanone/v13/mFTzWbsGxbbS_J5cQcjClDgm.woff2\"\n      }\n    }\n  },\n  \"subsets\": [\"latin\", \"latin-ext\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Lambda Render Progress with getRenderProgress in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and call the `getRenderProgress` function from the `@remotion/lambda/client` library. It asynchronously retrieves the progress status of a specific Remotion render job identified by `renderId`, `bucketName`, `functionName`, and `region`. The function requires these parameters, which are typically obtained from the initial `renderMediaOnLambda` call.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getrenderprogress.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getRenderProgress} from '@remotion/lambda/client';\n\nconst progress = await getRenderProgress({\n  renderId: 'd7nlc2y',\n  bucketName: 'remotionlambda-d9mafgx',\n  functionName: 'remotion-render-la8ffw',\n  region: 'us-east-1',\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Remotion Lambda Webhooks with Next.js App Router - TypeScript/TSX\nDESCRIPTION: Provides an example setup for a Remotion webhook endpoint using Next.js App Router and the appRouterWebhook() handler. Requires @remotion/lambda/client. Declares POST and OPTIONS routes, supplies secret and hooks for success, timeout, and error. 'ENABLE_TESTING' is configurable to enable test mode. Typically exported as 'app/api/webhook.ts' in Next.js v13+.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst ENABLE_TESTING = false;\\n\\n// ---cut---\\nimport {appRouterWebhook} from '@remotion/lambda/client';\\n\\nexport const POST = appRouterWebhook({\\n  secret: 'mysecret',\\n  // Enable testing through the tool below\\n  testing: ENABLE_TESTING,\\n  onSuccess: ({renderId}) => console.log('Finished render', renderId),\\n  onTimeout: ({renderId}) => console.log('Time out', renderId),\\n  onError: ({renderId}) => console.log('Error', renderId),\\n});\\n\\nexport const OPTIONS = POST;\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Captions File (Shell)\nDESCRIPTION: After video files are split and the captions file is deleted, this shell command runs a script to regenerate the captions. It assumes that 'sub.ts' is present and configured in the project. Requires Bun, and will create or update the captions file for processed recordings. Run this if you need fresh captions after modifying segments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/cutting-clips.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbun sub.ts\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video Locally with Remotion CLI (Shell)\nDESCRIPTION: Uses the Remotion CLI via `npx` to render the defined video composition(s) locally. This command generates the actual video file(s) based on the project's code.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Writing a String to a Static File with Remotion Studio - TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use the writeStaticFile() function from @remotion/studio within a React component to save a static text file ('file.txt') containing 'Hello world' to the public directory. It uses React's useCallback for defining the async save handler, and triggers the write operation on button click. Dependencies are React and @remotion/studio. The filePath parameter specifies the location relative to the public directory, and the contents parameter accepts a string or ArrayBuffer. The output is a new or overwritten file in the public directory, and successful execution logs 'Saved!' in the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/write-static-file.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback } from \"react\";\nimport { writeStaticFile } from \"@remotion/studio\";\n\nexport const WriteStaticFileComp: React.FC = () => {\n  const saveFile = useCallback(async () => {\n    await writeStaticFile({\n      filePath: \"file.txt\",\n      contents: \"Hello world\",\n    });\n\n    console.log(\"Saved!\");\n  }, []);\n\n  return <button onClick={saveFile}>Save</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a React Wrapper for Remotion Player (TSX)\nDESCRIPTION: Defines a React functional component (`PlayerView.tsx`) that wraps the Remotion `<Player>`. It accepts data (`PlayerSchema`), a Vue ref (`playerRefInstance`), and an optional pause callback (`onPaused`) as props. It uses `React.createRef` to get a reference to the Remotion Player and assigns it to the Vue ref via `useEffect`. It also sets up an event listener for the player's 'pause' event.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useEffect} from 'react';\nimport {Player, type PlayerRef} from '@remotion/player';\nimport {HelloWorld} from '@/remotion/HelloWorld';\nimport type {Ref} from 'vue';\n\nexport interface PlayerSchema {\n  titleText: string;\n  titleColor: string;\n  logoColor1: string;\n  logoColor2: string;\n}\n\nexport const PlayerView = ({\n  data,\n  playerRefInstance,\n  onPaused,\n}: {\n  data: PlayerSchema;\n  playerRefInstance: Ref<PlayerRef>;\n  onPaused?: () => void;\n}): React.ReactElement => {\n  const playerRef: React.RefObject<PlayerRef> = React.createRef();\n\n  useEffect(() => {\n    if (playerRef.current) {\n      playerRefInstance.value = playerRef.current;\n\n      // add callback when player pauses\n      playerRef.current.addEventListener('pause', () => {\n        onPaused?.();\n      });\n    }\n  }, []);\n\n  return (\n    <Player\n      ref={playerRef}\n      component={HelloWorld}\n      durationInFrames={150}\n      fps={30}\n      compositionHeight={1080}\n      compositionWidth={1920}\n      inputProps={data}\n      controls\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Increasing AWS Lambda Quotas using Remotion CLI (Shell)\nDESCRIPTION: This shell command utilizes the Remotion CLI to request an increase in the AWS Lambda concurrency limit for the configured AWS account. Introduced alongside the `quotas` command in the '2022-03-17' prerelease version, it also necessitates the re-setup of AWS policies as per the setup guide.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/changelog.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambdas quotas increase\n```\n\n----------------------------------------\n\nTITLE: Initializing a Blank Remotion Project (pnpm)\nDESCRIPTION: Uses pnpm to initialize a new, blank Remotion video project in the current directory. This command sets up the basic file structure and dependencies required for a Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create video --blank\n```\n\n----------------------------------------\n\nTITLE: Uploading File Data to S3 Using fetch() and Presigned URL - TypeScript\nDESCRIPTION: Shows how to upload a file directly to S3 via HTTP PUT using the provided presigned URL. Utilizes the Fetch API with appropriate Content-Type header, sending the file contents as an ArrayBuffer. Input: presignedUrl (string), file (File object); output: HTTP response from S3 (usually 200 on success). Assumes CORS is configured on the bucket.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/presigned-urls.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {interpolate} from 'remotion';\nconst presignedUrl = 'hi';\nconst file: File = {} as unknown as File;\n\nconst contentType = file.type || 'application/octet-stream';\nconst arrayBuffer = await file.arrayBuffer();\n// ---cut---\n\nawait fetch(presignedUrl, {\n  method: 'PUT',\n  body: arrayBuffer,\n  headers: {\n    'content-type': contentType,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda Function with PNPM - Bash\nDESCRIPTION: This Bash command deploys the Remotion Lambda function using pnpm and the preconfigured 'deploy-fn' script. Requires pnpm, package.json configuration, and AWS credentials. On success, AWS Lambda deployment is triggered.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run deploy-fn\n```\n\n----------------------------------------\n\nTITLE: Conditionally Re-encoding Video Tracks with convertMedia and canReencodeVideoTrack in TypeScript\nDESCRIPTION: This snippet shows how to use `canReencodeVideoTrack` within the `onVideoTrack` callback provided by the `convertMedia` function from `@remotion/webcodecs`. It checks if the current video track can be re-encoded to 'vp8' along with any specified resize or rotate operations. If possible, it returns an object instructing `convertMedia` to re-encode the track; otherwise, it returns an object to drop the track. This allows for conditional processing based on re-encoding feasibility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/can-reencode-video-track.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia, canReencodeVideoTrack} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  videoCodec: 'vp8',\n  audioCodec: 'opus',\n  onVideoTrack: async ({track, resizeOperation, rotate}) => {\n    const canReencode = await canReencodeVideoTrack({\n      track,\n      videoCodec: 'vp8',\n      resizeOperation,\n      rotate,\n    });\n\n    if (canReencode) {\n      return {type: 'reencode', videoCodec: 'vp8'};\n    }\n\n    return {type: 'drop'};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Video via Remotion Cloud Run using CLI (Bash)\nDESCRIPTION: Demonstrates rendering a video using a deployed Studio URL through Remotion Cloud Run via the CLI. It uses `npx remotion cloudrun render`, providing the serve URL, composition ID (`HelloWorld`), and input props. Requires prior setup of Remotion Cloud Run.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun render https://remotion-helloworld.vercel.app HelloWorld --props '{\"titleText\":\"Hello World\"}'\n```\n\n----------------------------------------\n\nTITLE: Incorrect Top-Level delayRender Usage in Remotion (TypeScript/React)\nDESCRIPTION: Displays a non-recommended pattern: invoking delayRender outside of a component body, which may block renders for unused compositions or global rendering. Encapsulation inside React components is recommended to avoid inadvertently blocking renders. The code uses React and remotion libraries.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/delay-render.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect } from \"react\";\nimport { continueRender, delayRender } from \"remotion\";\n\n// Don't call a delayRender() call outside a component -\n// it will block the render if a different composition is rendered\n// as well as block the fetching of the list of compositions.\nconst handle = delayRender();\n\nconst MyComp: React.FC = () => {\n  useEffect(() => {\n    continueRender(handle);\n  }, []);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Constants for Remotion Compositions in TSX\nDESCRIPTION: This snippet shows how to define duration constants (e.g., `ONE_DURATION`, `TWO_DURATION`) to avoid hardcoding duration values within the `<Composition>` and `<Series.Sequence>` components. This makes the code more maintainable and allows for easier calculation of combined durations like `MAIN_DURATION`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/combine-compositions.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ONE_DURATION = 120;\nexport const TWO_DURATION = 120;\nexport const MAIN_DURATION = ONE_DURATION + TWO_DURATION;\n```\n\n----------------------------------------\n\nTITLE: Conditionally Copying Video Tracks Based on Compatibility in TSX\nDESCRIPTION: Demonstrates using the `canCopyTrack` property provided within the `onVideoTrack` callback to determine if a video track can be directly copied to the output container without re-encoding. If `canCopyTrack` is true, the track is copied; otherwise, it's re-encoded to 'vp8'. This approach ensures compatibility between the input track codec and the output container.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/track-transformation.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  audioCodec: 'opus',\n  onVideoTrack: ({track, inputContainer, outputContainer, canCopyTrack}) => {\n    if (canCopyTrack) {\n      return {type: 'copy'};\n    }\n\n    return {type: 'reencode', videoCodec: 'vp8'};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Validating Remotion Lambda User Permissions via CLI\nDESCRIPTION: Executes the Remotion CLI command using npx to validate whether the AWS user permissions have been correctly configured according to Remotion Lambda's requirements. This command helps ensure the user has the necessary rights before attempting Lambda operations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/permissions.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda policies validate\n```\n\n----------------------------------------\n\nTITLE: Creating React Wrapper for Remotion Player Component\nDESCRIPTION: Defines a React functional component (`PlayerView.tsx`) using TypeScript that wraps the Remotion `Player`. It accepts data props (`PlayerSchema`), an optional `onPaused` callback, and uses `forwardRef` along with `useImperativeHandle` to expose the underlying Remotion Player's API reference (`playerRef`). An effect is used to add an event listener for the 'pause' event.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {forwardRef, useEffect, useImperativeHandle} from \"react\";\nimport {Player, type PlayerRef} from \"@remotion/player\";\nimport {HelloWorld} from \"./HelloWorld\";\n\nexport interface PlayerSchema {\n    titleText: string\n    titleColor: string\n    logoColor1: string\n    logoColor2: string\n}\n\nexport const PlayerView = forwardRef((props: { data: PlayerSchema, onPaused?: () => void }, ref) => {\n\n    const playerRef: React.RefObject<PlayerRef> = React.createRef()\n\n    useEffect(() => {\n        if (playerRef.current) {\n\n            // add callback when player pauses\n            playerRef.current.addEventListener('pause', () => {\n                props.onPaused?.()\n            })\n        }\n    }, [])\n\n    useImperativeHandle(ref, () => ({\n        get playerRef() {\n            return playerRef.current;\n        },\n    }));\n\n    return <Player\n        ref={playerRef}\n        component={HelloWorld}\n        durationInFrames={150}\n        fps={30}\n        compositionHeight={1080}\n        compositionWidth={1920}\n        inputProps={props.data}\n        style={{width: '100%'}}\n        controls\n    />\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/motion-blur using npm (Bash)\nDESCRIPTION: This command uses npm (Node Package Manager) to install the `@remotion/motion-blur` package. The `--save-exact` flag ensures that the exact version specified is added to the `package.json` dependencies, which is recommended for Remotion projects to maintain version consistency across all related packages (`remotion` and `@remotion/*`). This package provides motion blur effects for Remotion videos.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/motion-blur/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/motion-blur --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/google-fonts with yarn - Bash\nDESCRIPTION: Installs the @remotion/google-fonts package using Yarn as the package manager. Requires that Yarn is installed in your development environment. This command adds the package as a dependency in your project directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/google-fonts\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering meshBasicMaterial with VideoTexture - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates conditional rendering of a Three.js mesh material in React, only when a valid video texture has been created. By checking if videoTexture is not null, it ensures that meshBasicMaterial does not receive an uninitialized texture map, avoiding rendering bugs. Dependencies include React, @remotion/three, meshBasicMaterial from Three.js, and the useVideoTexture-generated texture; the input is the videoTexture and the output is a meshBasicMaterial component with a map prop.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-video-texture.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useVideoTexture } from \"@remotion/three\";\nconst videoRef: React.MutableRefObject<HTMLVideoElement | null> =\n  React.useRef(null);\nconst videoTexture = useVideoTexture(videoRef);\n// ---cut---\n{\n  videoTexture ? <meshBasicMaterial map={videoTexture} /> : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Prefetching Video Assets with Remotion prefetch() API (TypeScript/TSX)\nDESCRIPTION: Demonstrates how to use the prefetch() function from the Remotion library to asynchronously load a remote video asset, ensuring it is fully cached before playback in a <Player> component. The snippet outlines the import, basic usage with the 'blob-url' method, waiting for the asset to finish loading, and how to free loaded resources. Dependencies include the 'remotion' library and requires network access to the asset URL. The function returns an object with 'free' and 'waitUntilDone' methods; 'waitUntilDone' resolves to a downloadable URL, while 'free' releases held memory. This approach is suitable for scenarios where media must be available immediately after player initialization.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/prefetch.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {prefetch} from 'remotion';\n\nconst {free, waitUntilDone} = prefetch('https://example.com/video.mp4', {\n  method: 'blob-url',\n});\n\nwaitUntilDone().then(() => {\n  console.log('Video has finished loading');\n});\n\n// Call free() if you want to un-prefetch and free up the memory:\nfree();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM - Bash\nDESCRIPTION: This snippet installs project dependencies using pnpm, a fast Node.js package manager alternative to npm/yarn. pnpm must be installed globally. The command will read the package.json file and install the required dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Implementing onAudioData Callback in Remotion WebCodecs (TypeScript)\nDESCRIPTION: This TypeScript snippet shows implementation of the onAudioData callback used by convertMedia() from @remotion/webcodecs. It handles AudioData objects by logging the data, applying any desired processing (like pitch or volume changes), and then returning either the original or a new AudioData object for encoding. The callback function supports asynchronous execution and must return properly configured AudioData with matching key properties as the input, ensuring audio transformations are safe and predictable.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-media.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ConvertMediaOnAudioData} from '@remotion/webcodecs';\\n\\nexport const onAudioData: ConvertMediaOnAudioData = ({audioData}) => {\\n  console.log(audioData);\\n  //           ^?\\n\\n  // Do something with the audiodata, for example:\\n  // - Change the pitch\\n  // - Lower the volume\\n\\n  // Then return the frame to be used for encoding.\\n  return audioData;\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal React Functional Component - TypeScript\nDESCRIPTION: This snippet defines a minimal functional React component named RainbowSquare, which currently renders an empty <div> element and is intended as a placeholder or visual building block for animated scenes. It requires React as a dependency and illustrates standard functional component syntax in TypeScript. No props are expected and the rendered output is a single empty div with no additional behavior or styling.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/camera-motion-blur.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst RainbowSquare: React.FC = () => <div></div>\n// - RainbowSquare\n```\n\n----------------------------------------\n\nTITLE: Defining an Empty Remotion Composition (TSX)\nDESCRIPTION: Shows an example of an initial `<Composition>` component within the `remotion/Root.tsx` file. This component, with the ID 'empty', serves as a template or starting point before creating custom video compositions. It utilizes the `Main` component, specifies a schema (`videoConf`), sets default props, and includes a metadata calculation function (`calcMetadata`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/create.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Composition\n  component={Main}\n  id=\"empty\"\n  schema={videoConf}\n  defaultProps={{\n    theme: \"light\" as const,\n    canvasLayout: \"square\" as const,\n    scenes: [],\n    scenesAndMetadata: [],\n    platform: \"x\" as const,\n  }}\n  calculateMetadata={calcMetadata}\n/>\n```\n\n----------------------------------------\n\nTITLE: Converting AudioData Sample Rate using convertAudioData in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `convertAudioData` function from `@remotion/webcodecs` to change the sample rate of an existing `AudioData` object. It first creates an `AudioData` object with specific properties and then calls `convertAudioData`, passing the original `audioData` and the desired `newSampleRate`. The expected structure of the resulting `AudioData` object after downsampling is shown in the comment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-audiodata.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Converting an audio data\"\nimport {convertAudioData} from '@remotion/webcodecs';\n\nconst audioData = new AudioData({\n  data: new Int32Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),\n  format: 's32',\n  numberOfChannels: 1,\n  numberOfFrames: 10,\n  sampleRate: 44100,\n  timestamp: 0,\n});\n\nconst newAudioData = convertAudioData({audioData, newSampleRate: 22050});\n\n/*\n{\n  data: [0, 2, 4, 6, 8],\n  format: 's32',\n  numberOfChannels: 1,\n  numberOfFrames: 5,\n  sampleRate: 22050,\n  timestamp: 0,\n}\n*/\n```\n```\n\n----------------------------------------\n\nTITLE: Using `onTest` Callback with `testPermissions` in TypeScript\nDESCRIPTION: This snippet shows how to use the optional `onTest` callback with the `testPermissions` function. An object containing the `onTest` property is passed as an argument. The provided callback function is executed each time a single permission check completes, allowing for real-time feedback on the status of each permission check (logging decision and name) before the entire `testPermissions` function resolves.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/testpermissions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash\nimport {testPermissions} from '@remotion/cloudrun';\n\nconst {results} = await testPermissions({\n  onTest: (result) => {\n    console.log(result.decision); // \"allowed\"\n    console.log(result.permissionName); // \"iam.serviceAccounts.actAs\"\n  },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Example Remotion \"Timed out evaluating page function\" Error Message\nDESCRIPTION: This snippet displays the typical error message encountered in Remotion when the browser fails to execute the `window.remotion_setFrame(f, c)` JavaScript function within the allocated timeout (default 30s from v4.0.73, previously 5s). This usually indicates the browser is overloaded due to high CPU or memory usage during the render process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/timed-out-page-function.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError: Timed out evaluating page function (f, c) => {\\n  window.remotion_setFrame(f, c);\\n}\n```\n\n----------------------------------------\n\nTITLE: Finding and Rendering <Player> Component in Remotion App (TypeScript/JSX)\nDESCRIPTION: This code identifies the appropriate entry point for rendering the <Player> component based on the template used (Next.js App Dir, Next.js Pages Dir, or React Router), then configures it to use the target composition and associated metadata. The relevant component and metadata are imported, typically from the remotion folder, to maintain consistency between Studio and the deployed app. Required dependencies include React, the @remotion/player package, and proper imports/exports. Modify component, duration, and FPS constants as needed; update the entry point file as specified.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio-app.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// In pages/index.tsx, app/page.tsx, or app/home.tsx:\nimport { Player } from \"@remotion/player\";\nimport { MyComposition } from \"../remotion/MyComposition\";\nimport { DURATION_IN_FRAMES, FPS } from \"../remotion/constants\";\n\nexport default function Home() {\n  return (\n    <Player\n      component={MyComposition}\n      durationInFrames={DURATION_IN_FRAMES}\n      fps={FPS}\n      // ...other Player props\n    />\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining TailwindCSS v3 Directives\nDESCRIPTION: CSS code for the `src/style.css` file. This file uses the `@tailwind` directives to include Tailwind's base styles, component classes, and utility classes into the project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies with npm\nDESCRIPTION: Installs Remotion core, the Remotion Player, the Remotion CLI, React, and ReactDOM as production dependencies, along with their TypeScript types as development dependencies, using the npm package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i remotion @remotion/player @remotion/cli react react-dom\nnpm i --save-dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Development Preview using npm\nDESCRIPTION: Executes the 'dev' script defined in the `package.json` file, usually starting the Remotion development server. This allows for live previewing and debugging of the video composition during development.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tiktok/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Timing in a TransitionSeries Component (Remotion/React/TypeScript)\nDESCRIPTION: This snippet demonstrates integrating a custom timing function into a Remotion <TransitionSeries> in a React component. It shows how to define a presentation, custom timing, and include them in transition steps within a sequence of letter components. All dependencies—@remotion/transitions, remotion, and React—are required. The customTiming function is parameterized with pauseDuration, and the snippet illustrates usage with the slide transition as well. Inputs include transition presentation props and component props; the core output is a visually customized video sequence.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/timings/custom.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TransitionPresentation } from \"@remotion/transitions\";\n\nconst SlidePresentation: React.FC = () => null;\ntype CustomPresentationProps = { direction: \"from-left\" | \"from-right\" };\nconst customTransition = (\n  props: CustomPresentationProps,\n): TransitionPresentation<CustomPresentationProps> => {\n  return { component: SlidePresentation, props };\n};\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = () => null;\n\nimport type { TransitionTiming } from \"@remotion/transitions\";\n\nconst customTiming = (options: { pauseDuration: number }): TransitionTiming => {\n  return {\n    getDurationInFrames: ({ fps }) => fps, // 1 second\n    getProgress: ({ frame, fps }) => Math.min(1, frame / fps),\n  };\n};\n\n// ---cut---\n\nimport { TransitionSeries } from \"@remotion/transitions\";\nimport { slide } from \"@remotion/transitions/slide\";\nimport { useVideoConfig } from \"remotion\";\n\nexport const CustomTransition: React.FC = () => {\n  const { width, height } = useVideoConfig();\n\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={80}>\n        <Letter color=\"orange\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={slide({ direction: \"from-left\" })}\n        timing={customTiming({ pauseDuration: 10 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={200}>\n        <Letter color=\"pink\">B</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Specific Remotion Composition via CLI (Shell)\nDESCRIPTION: Demonstrates the command-line interface (CLI) command used to render a Remotion project. It requires specifying the entry point (`src/index`) and the unique `id` of the composition to be rendered.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/composition.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion render src/index <composition-id>\n```\n\n----------------------------------------\n\nTITLE: Converting a Video with Remotion WebCodecs in TypeScript\nDESCRIPTION: This code demonstrates how to use the \"convertMedia\" function from the @remotion/webcodecs package to re-encode a video file from a remote URL into the WebM format. It requires the @remotion/webcodecs dependency and optionally accepts various encoding and transformation parameters. The key parameter here is the 'src' for the video source and the 'container' to indicate the output file format; the method returns a promise, suitable for use in asynchronous workflows. Inputs are the media file source and configuration options, while output will be the converted media in the specified container format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-media.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\\n\\nawait convertMedia({\\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\\n  container: 'webm',\\n});\n```\n\n----------------------------------------\n\nTITLE: Using the Thumbnail Component in Remotion Player (TSX)\nDESCRIPTION: Demonstrates how to use the new `<Thumbnail>` component from `@remotion/player`. It renders a static preview image of a specific frame (`frameToDisplay`) from a Remotion composition (`MyComp`) without needing to render the full video or use the interactive Player.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nconst MyComp: React.FC = () => null;\n\n// ---cut---\nimport { Thumbnail } from \"@remotion/player\";\n\nconst MyApp: React.FC = () => {\n  return (\n    <Thumbnail\n      component={MyComp}\n      compositionWidth={1920}\n      compositionHeight={1080}\n      frameToDisplay={30}\n      durationInFrames={120}\n      fps={30}\n      style={{\n        width: 200,\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Caching Enabled Using Flat Config API - Remotion Config - TypeScript\nDESCRIPTION: Highlights the new, flat config method introduced in Remotion v3.3.39, where configuration options are direct methods on the Config object (e.g., Config.setCachingEnabled). Facilitates better discoverability and autocompletion in TypeScript. Requires '@remotion/cli/config' and should be placed in 'remotion.config.ts'.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\\n// ---cut---\\nConfig.setCachingEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Getting Default Audio Codec for WebM Container in TypeScript\nDESCRIPTION: Demonstrates importing and using the `getDefaultAudioCodec` function from `@remotion/webcodecs` to retrieve the default audio codec for the 'webm' container. The function requires an object argument with a `container` property specifying the container format (e.g., 'webm') and returns the corresponding default codec string ('opus' for 'webm'). This function is part of an experimental API.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/get-default-audio-codec.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getDefaultAudioCodec} from '@remotion/webcodecs';\n\ngetDefaultAudioCodec({container: 'webm'}); // 'opus'\n```\n\n----------------------------------------\n\nTITLE: Getting or Creating a GCS Bucket via Node.JS API (TypeScript)\nDESCRIPTION: Uses the `@remotion/cloudrun` Node.JS library to either retrieve an existing Google Cloud Storage bucket suitable for Remotion sites or create a new one in the specified region. Returns the name of the bucket.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport {deploySite, getOrCreateBucket} from '@remotion/cloudrun';\n\nconst {bucketName} = await getOrCreateBucket({\n  region: 'us-east1',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Video via Remotion Lambda using CLI (Bash)\nDESCRIPTION: Illustrates rendering a video using a deployed Studio URL through Remotion Lambda via the CLI. It uses `npx remotion lambda render`, providing the serve URL, composition ID (`HelloWorld`), and input props. Requires prior setup of Remotion Lambda.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render https://remotion-helloworld.vercel.app HelloWorld --props '{\"titleText\":\"Hello World\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring an Express.js Webhook Handler for Remotion Lambda\nDESCRIPTION: This snippet demonstrates how to set up a webhook handler in an Express.js server using `expressWebhook` from `@remotion/lambda/client`. It configures the handler with a secret, enables testing mode, adds custom headers, and defines callback functions for success, error, and timeout events. The handler is then attached to POST and OPTIONS requests on the `/webhook` route, using a JSON parser middleware.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/expresswebhook.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx twoslash title=\"server.js\"\nimport {expressWebhook} from '@remotion/lambda/client';\n\nconst handler = expressWebhook({\n  secret: 'mysecret',\n  testing: true,\n  extraHeaders: {\n    region: \"south-asia\"\n  },\n  onSuccess: () => console.log('Rendering Completed Successfully'),\n  onError: () => console.log('Something went wrong while rendering'),\n  onTimeout: () => console.log('Timeout occured while rendering'),\n})\n\nrouter.post(\"/webhook\", jsonParser, handler);\n\nrouter.options(\"/webhook\", jsonParser, handler);\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Loopable OffthreadVideo Component in Remotion (TypeScript)\nDESCRIPTION: This React functional component (`LoopableOffthreadVideo`) provides a wrapper around Remotion's `<OffthreadVideo>` to enable looping functionality. It uses `@remotion/media-parser` to determine the video duration asynchronously. During rendering, it wraps `<OffthreadVideo>` with `<Loop>` if the `loop` prop is true. During preview, it falls back to the standard `<Video>` component which supports looping natively. This addresses the limitation that `<OffthreadVideo>` does not have a built-in `loop` prop.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/LoopableOffthreadVideo.tsx\"\nimport {mediaParserController, parseMedia} from '@remotion/media-parser';\nimport React, {useEffect, useState} from 'react';\nimport {cancelRender, continueRender, delayRender, getRemotionEnvironment, Loop, OffthreadVideo, RemotionOffthreadVideoProps, useVideoConfig, Video} from 'remotion';\n\nconst LoopedOffthreadVideo: React.FC<RemotionOffthreadVideoProps> = (props) => {\n  const [duration, setDuration] = useState<number | null>(null);\n  const [handle] = useState(() => delayRender());\n  const {fps} = useVideoConfig();\n\n  useEffect(() => {\n    const controller = mediaParserController();\n\n    parseMedia({\n      src: props.src,\n      acknowledgeRemotionLicense: true,\n      controller,\n      fields: {\n        slowDurationInSeconds: true,\n      },\n    })\n      .then(({slowDurationInSeconds}) => {\n        setDuration(slowDurationInSeconds);\n        continueRender(handle);\n      })\n      .catch((err) => {\n        cancelRender(err);\n      });\n\n    return () => {\n      continueRender(handle);\n      controller.abort();\n    };\n  }, [handle, props.src]);\n\n  if (duration === null) {\n    return null;\n  }\n\n  return (\n    <Loop durationInFrames={Math.floor(duration * fps)}>\n      <OffthreadVideo {...props} />;\n    </Loop>\n  );\n};\n\nexport const LoopableOffthreadVideo: React.FC<\n  RemotionOffthreadVideoProps & {\n    loop?: boolean;\n  }\n> = ({loop, ...props}) => {\n  if (getRemotionEnvironment().isRendering) {\n    if (loop) {\n      return <LoopedOffthreadVideo {...props} />;\n    }\n\n    return <OffthreadVideo {...props} />;\n  }\n\n  return <Video loop={loop} {...props}></Video>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for JSX Support (JSON)\nDESCRIPTION: Updates the `tsconfig.json` file to enable JSX compilation for React components within an Angular project. It sets the `jsx` compiler option to `\"react\"` and recommends setting `\"skipLibCheck\": true` to avoid potential type-checking issues with external libraries.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"skipLibCheck\": true // Recommended to avoid errors with certain libraries\n    // other options\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequencing Multiple Title Components in Remotion (TypeScript)\nDESCRIPTION: This snippet illustrates how to use the Remotion `<Sequence>` component to control the timing of multiple instances of the `Title` component. It renders two titles sequentially: the first (`\"Hello\"`) appears for the first 40 frames (`durationInFrames={40}`), and the second (`\"World\"`) appears starting from frame 40 (`from={40}`). The `useCurrentFrame` hook within the second `Title` instance will return values relative to its sequence's start time (frame 40). This requires the `Title` component (implicitly included via `// @include: example-Title`) and the `remotion` library.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequences.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @include: example-Title\n// ---cut---\nimport {Sequence, AbsoluteFill} from 'remotion'; // Added AbsoluteFill based on context\n\nexport const MyVideo = () => {\n  return (\n    <AbsoluteFill>\n      <Sequence durationInFrames={40}>\n        <Title title=\"Hello\" />\n      </Sequence>\n      <Sequence from={40}>\n        <Title title=\"World\" />\n      </Sequence>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Skia Video Component in Remotion (TSX)\nDESCRIPTION: This TypeScript React component (`MySkiaVideo`) demonstrates using the `<SkiaCanvas />` component from `@remotion/skia`. It fetches the video dimensions (`width`, `height`) using the `useVideoConfig` hook from `remotion` and uses them to set the canvas size. Inside the canvas, a `<Fill>` element from `@shopify/react-native-skia` is rendered to create a black background. This illustrates the basic setup for incorporating Skia graphics into a Remotion video.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/skia-canvas.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SkiaCanvas } from \"@remotion/skia\";\nimport { Fill } from \"@shopify/react-native-skia\";\nimport React from \"react\";\nimport { useVideoConfig } from \"remotion\";\n\nconst MySkiaVideo: React.FC = () => {\n  const { width, height } = useVideoConfig();\n  return (\n    <SkiaCanvas width={width} height={height}>\n      <Fill color=\"black\" />\n    </SkiaCanvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Translate Transform using Style Prop in TSX\nDESCRIPTION: Demonstrates how to move a `div` element along the X-axis using the `transform: translateX()` CSS property within the `style` prop in TSX. Translation moves an element (here 100px to the right) without affecting the layout of surrounding elements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transforms.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {6} title=\"MyComponent.tsx\"\n<div\n  style={{\n    height: 100,\n    width: 100,\n    backgroundColor: \"red\",\n    transform: `translateX(100px)`,\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Remix Project with npm (Bash)\nDESCRIPTION: Provides the command using `npx` (Node Package Runner) to initialize a new Remotion project using the specific Remix template. This template is designed for building SaaS applications that generate custom videos.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpx create-video --remix\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Remotion Version from Subpath in TypeScript\nDESCRIPTION: This snippet illustrates importing the `VERSION` constant specifically from the `remotion/version` path in TypeScript. This approach avoids importing React and ReactDOM dependencies, making it suitable for environments where these are not needed or desired. It logs the version string (e.g., \"4.0.57\").\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/version.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { VERSION } from \"remotion/version\";\n\nconsole.log(VERSION); // \"4.0.57\";\n```\n\n----------------------------------------\n\nTITLE: Detecting Fullscreen Changes with Remotion Player in TypeScript/React\nDESCRIPTION: Shows how to listen for the 'fullscreenchange' event on a Remotion Player using a `PlayerRef`. The event handler accesses `e.detail.isFullscreen` to log the current fullscreen state when the player enters or exits fullscreen mode. Depends on React and `@remotion/player`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {PlayerRef} from '@remotion/player';\nimport {useRef} from 'react';\nconst playerRef = useRef<PlayerRef>(null);\nif (!playerRef.current) {\n  throw new Error();\n}\n// ---cut---\nplayerRef.current.addEventListener('fullscreenchange', (e) => {\n  console.log('is fullscreen' + e.detail.isFullscreen); // is fullscreen true\n});\n```\n\n----------------------------------------\n\nTITLE: Printing Supported Regions with Remotion Cloud Run CLI (Shell)\nDESCRIPTION: Invokes the Remotion Cloud Run CLI tool using npx to list all supported GCP regions in the current version. Requires Node.js and npx in the environment but no additional dependencies or authentication for usage. The command outputs the available regions as a space-separated list on stdout, facilitating programmatic use in bash scripts or manual inspection. Output reflects the regions available at the time of command execution and may change as APIs evolve.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/regions.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun regions\n```\n\n----------------------------------------\n\nTITLE: Installing CJK Fonts in Dockerfile (Debian)\nDESCRIPTION: Installs the `fonts-noto-cjk` package using `apt-get` within the Debian-based Docker container. This adds support for rendering Japanese, Chinese, and Korean characters in Remotion videos.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_13\n\nLANGUAGE: docker\nCODE:\n```\nRUN apt-get install fonts-noto-cjk\n```\n\n----------------------------------------\n\nTITLE: Setting Hardware Acceleration in Remotion Config File (TypeScript)\nDESCRIPTION: Illustrates how to globally configure the default hardware acceleration behavior using the Remotion configuration file (`remotion.config.ts` or similar). The `Config.setHardwareAcceleration('if-possible')` method sets the preference for all renders initiated within the project context where this configuration applies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/hardware-acceleration.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\nConfig.setHardwareAcceleration('if-possible');\n```\n\n----------------------------------------\n\nTITLE: Using getGifDurationInSeconds with Remotion in a React Component - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to use the getGifDurationInSeconds function from the @remotion/gif package inside a React functional component to asynchronously determine the duration of different GIF sources. Dependencies include React, @remotion/gif, and remotion's staticFile helper. The getGifDurationInSeconds function accepts a string (path or URL) to a GIF and returns a Promise that resolves to the duration in seconds. The example calls this function with three types of paths: a directly imported asset, a static asset, and a remote URL, illustrating possible use cases and the need for CORS support on remote GIFs. The output is not displayed in the UI; for production, you would typically use the resulting values for further logic or rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/gif/get-gif-duration-in-seconds.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCallback, useEffect} from 'react';\nimport {staticFile} from 'remotion';\n// ---cut---\nimport {getGifDurationInSeconds} from '@remotion/gif';\nimport gif from './cat.gif';\n\nconst MyComp: React.FC = () => {\n  const getDuration = useCallback(async () => {\n    const imported = await getGifDurationInSeconds(gif); // 127.452\n    const publicFile = await getGifDurationInSeconds(staticFile('giphy.gif')); // 2.10\n    const remote = await getGifDurationInSeconds('https://media.giphy.com/media/xT0GqH01ZyKwd3aT3G/giphy.gif'); // 3.23\n  }, []);\n\n  useEffect(() => {\n    getDuration();\n  }, []);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Docker Repository and Updating Apt Sources - Bash\nDESCRIPTION: Configures the Docker apt repository and updates sources, ensuring Docker packages can be securely downloaded and installed. Uses dpkg, os-release environment variables, and sudo. Inputs include a functional shell, outputs are updated apt sources for Docker.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho \"deb [arch=\\\"$(dpkg --print-architecture)\\\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\"$(. /etc/os-release && echo \\\"$VERSION_CODENAME\\\")\\\" stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Generating CSS translateZ() Transform in Remotion (TSX)\nDESCRIPTION: Shows how to use the `translateZ` function from `@remotion/animation-utils` to generate a CSS `translateZ()` transform string. It accepts the translation value as a number (defaulting to px), a string with a unit, or a number and an optional unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { translateZ } from \"@remotion/animation-utils\";\n\nconst transform = translateZ(10);\n// => \"translateZ(10px)\"\n\nconst transform2 = translateZ(\"12rem\");\n// => \"translateZ(12rem)\"\n\nconst transform3 = translateZ(10, \"px\");\n// => \"translateZ(10px)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Importing TableOfContents Component in JavaScript/JSX\nDESCRIPTION: This snippet demonstrates importing the TableOfContents component from a relative path within a Remotion documentation context. The import provides structured navigation for the bundler documentation page. It requires that the '../components/TableOfContents/bundler' file exists and exports a valid React component. Input is not required for the import itself.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/bundler.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {TableOfContents} from '../components/TableOfContents/bundler';\n```\n\n----------------------------------------\n\nTITLE: Implementing fitText() in a React Component (TSX)\nDESCRIPTION: Shows a practical implementation of `fitText` within a React functional component (`FitText`). It calculates the font size, applies a maximum size constraint using `Math.min`, and uses the result to style a `div` element containing the text, ensuring it fits within a defined `boxWidth`. It depends on `React`, `AbsoluteFill` from `remotion`, and `fitText` from `@remotion/layout-utils`. The example also highlights considerations like font loading and using `outline` instead of `border` due to Remotion's default `box-sizing`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/fit-text.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { fitText } from \"@remotion/layout-utils\";\nimport React from \"react\";\nimport { AbsoluteFill } from \"remotion\";\n\nconst boxWidth = 600;\n// Must be loaded before calling fitText()\nconst fontFamily = \"Helvetica\";\nconst fontWeight = \"bold\";\n\nexport const FitText: React.FC<{ text: string }> = ({ text }) => {\n  const fontSize = Math.min(\n    80,\n    fitText({\n      fontFamily,\n      text,\n      withinWidth: boxWidth,\n      fontWeight,\n    }).fontSize,\n  );\n\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"white\",\n      }}\n    >\n      <div\n        style={{\n          width: boxWidth,\n          outline: \"1px dashed rgba(0, 0, 0, 0.5)\",\n          height: 100,\n          fontSize,\n          fontWeight,\n          fontFamily,\n          display: \"flex\",\n          alignItems: \"center\",\n        }}\n      >\n        {text}\n      </div>\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the Remotion Player Width in React (TypeScript/TSX)\nDESCRIPTION: This code snippet demonstrates setting the width of the Remotion Player component to 100% using a React style prop. The approach ensures the video fills the parent container's width while its height maintains the aspect ratio defined by the Player's other parameters. No external dependencies are required aside from React and Remotion. Key parameter: the style prop with a width of '100%'. The input is a React component; the output is a player component that dynamically fits its container's width.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/scaling.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nstyle={{ width: \"100%\" }}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Composition Omitting Output Filename (Bash)\nDESCRIPTION: Demonstrates a shortened Remotion CLI command where the output filename is omitted. When executed, Remotion renders the specified composition ('my-comp') from 'src/index.tsx' and saves the output to a default location, typically 'out/my-comp.mp4'.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render src/index.tsx my-comp\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Square Component in TypeScript/React\nDESCRIPTION: Defines a stateless functional component named `Square` that accepts a single prop `color` of type string. This snippet is intended as a building block for use inside Remotion's `<Series.Sequence>` components, with output as an empty `div`. No external dependencies are needed apart from React. Key input parameter: `color` (string), but not yet utilized in the rendered output; outputs a React element.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/series.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst Square: React.FC<{color: string}> = () => <div></div>\n// - Square\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Exports and TypesVersions in package.json for JSON\nDESCRIPTION: This JSON snippet demonstrates how to update the `package.json` file located at `packages/transition/package.json` to properly export the newly added presentation. It requires adding entries to both the `exports` section (defining module, import, require, and types paths) and the `typesVersions` section (specifying the TypeScript definition file path) for the custom presentation (e.g., 'yourPresentation'). After modification, `pnpm build` needs to be run in the `remotion/packages/transitions` directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/presentation.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"exports\": {\n  \"./yourPresentation\": {\n    \"types\": \"./dist/presentations/yourPresentation.d.ts\",\n    \"module\": \"./dist/presentations/yourPresentation.js\",\n    \"import\": \"./dist/presentations/yourPresentation.js\",\n    \"require\": \"./dist/cjs/presentations/yourPresentation.js\"\n    },\n  },\n\"typesVersions\": {\n  \">=1.0\": {\n    \"yourPresentation\": [\n      \"dist/presentations/yourPresentation.d.ts\"\n      ],\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Getting Available Video Codecs for a Container using @remotion/webcodecs in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `getAvailableVideoCodecs` function from the `@remotion/webcodecs` library. It takes an object with a `container` property (e.g., 'webm') and returns an array of strings representing video codecs potentially supported by that container. Note that this function only lists possibilities; use `canReencodeVideoTrack()` or `canCopyVideoTrack()` for definitive compatibility checks. The example shows retrieving codecs for the 'webm' container, which typically returns `['vp8', 'vp9']`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/get-available-video-codecs.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getAvailableVideoCodecs} from '@remotion/webcodecs';\n\ngetAvailableVideoCodecs({container: 'webm'}); // ['vp8', 'vp9']\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Video with GPU Acceleration (Shell)\nDESCRIPTION: This shell command demonstrates how to render a Remotion composition named 'Main' into an MP4 file using the Remotion CLI. It includes the `--gl=angle` flag to enable GPU rendering via the ANGLE backend, which can significantly improve performance for Skia-based effects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/skia.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nremotion render Main out/video.mp4 --gl=angle\n```\n```\n\n----------------------------------------\n\nTITLE: Migrating Root Component in Remotion App (TypeScript)\nDESCRIPTION: This snippet instructs replacing the sample code in the new project's remotion/Root.tsx file with code from src/Root.tsx of the original project. Ensure all component dependencies are recursively included until the build passes with no TypeScript errors (npx tsc -w outputs no errors). Key parameters involve the exported root component and the structure of nested imports. Prior TypeScript setup and proper component paths are required.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio-app.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// In remotion/Root.tsx of the new project, replace sample code:\n// --- Original sample code ---\n// export const Root: React.FC = () => {\n//   return <h1>Hello World</h1>;\n// };\n\n// --- Replace with ---\n// (Paste the code from src/Root.tsx in your existing project)\n\n```\n\n----------------------------------------\n\nTITLE: Importing ES Modules in Remotion Config via Async Override (TypeScript)\nDESCRIPTION: Demonstrates importing an ES module (`./src/enable-sass`) within the CommonJS `remotion.config.ts` file by providing an asynchronous function to `Config.overrideWebpackConfig`. It uses dynamic `await import()` to load the ES module, retrieves the `enableSass` function (assumed to be a `WebpackOverrideFn`), and then applies it to the current Webpack configuration. Requires `Config` from `@remotion/cli/config` and potentially types like `WebpackOverrideFn` from `@remotion/bundler`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n// @filename: src/enable-sass.ts\nimport {WebpackOverrideFn} from '@remotion/bundler';\nexport const enableSass: WebpackOverrideFn = (c) => c;\n\n// @filename: remotion.config.ts\n// ---cut---\nimport {Config} from '@remotion/cli/config';\n\nConfig.overrideWebpackConfig(async (currentConfiguration) => {\n  const {enableSass} = await import('./src/enable-sass');\n  return enableSass(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Handling PlayerRef Timeupdate Event (TypeScript/React)\nDESCRIPTION: Demonstrates attaching a 'timeupdate' event listener on PlayerRef to obtain periodic frame updates during playback. Accesses the current frame via e.detail.frame and logs it. Requires a PlayerRef instance, with ref and existence checks. Outputs frequent frame index logs during playback with throttling constraints (~250ms).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_11\n\nLANGUAGE: TSX\nCODE:\n```\nimport {PlayerRef} from '@remotion/player';\nimport {useRef} from 'react';\nconst playerRef = useRef<PlayerRef>(null);\nif (!playerRef.current) {\n  throw new Error();\n}\n// ---cut---\nplayerRef.current.addEventListener('timeupdate', (e) => {\n  console.log('current frame is ' + e.detail.frame); // current frame is 120\n});\n```\n\n----------------------------------------\n\nTITLE: Force Removing a Cloud Run Site Without Confirmation - Bash\nDESCRIPTION: This example shows how to use the -y flag with the Remotion CLI to remove a site without waiting for confirmation, allowing for scripted or automated deletions. The command accepts one or more site IDs, and skips interactive prompts due to the --yes or -y flag. Prerequisites are the same as other CLI operations: installed Remotion CLI, authenticated and configured access to Cloud Run, and correct site IDs. The command is non-interactive and particularly useful in CI/CD pipelines or automation scripts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/rm.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites rm central-site -y\n```\n\n----------------------------------------\n\nTITLE: Failing Dynamic Import from Runtime Input Props (TSX)\nDESCRIPTION: Illustrates a scenario where the asset path is determined entirely at runtime via Remotion's `getInputProps`. This approach fails because Webpack has no static information about the possible asset paths and cannot bundle the required files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-import.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { getInputProps, Img } from \"remotion\";\n\nconst DynamicAsset: React.FC = () => {\n  const inputProps = getInputProps(); // {\"imageSrc\": \"./assets/img0.png\"}\n  return <Img src={require(inputProps.imageSrc as string)} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Specific Compositions with Codec in Bash\nDESCRIPTION: This command demonstrates benchmarking specific Remotion compositions (`Main`, `Canvas`, `CSS`) defined in the entry point file `src/index.ts`. It uses the `--codec` flag to specify the output video codec as `h264`. Multiple composition IDs are provided as a comma-separated list.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/benchmark.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion benchmark src/index.ts --codec=h264 Main,Canvas,CSS\n```\n\n----------------------------------------\n\nTITLE: Basic <OffthreadVideo> Usage with Local File in Remotion (tsx)\nDESCRIPTION: Demonstrates the fundamental usage of the `<OffthreadVideo>` component within an `<AbsoluteFill>` layout. It imports `AbsoluteFill`, `OffthreadVideo`, and `staticFile` from Remotion to display a video loaded from a local file ('video.webm') referenced using `staticFile`. This component renders video frames as images using FFmpeg.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, OffthreadVideo, staticFile} from 'remotion';\n\nexport const MyVideo = () => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo src={staticFile('video.webm')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging in Remotion CLI Render (bash)\nDESCRIPTION: Use the `--log=verbose` flag with the Remotion CLI render command (available from v2.6.7) to increase log output detail. This is useful for debugging rendering issues, such as identifying the specific browser executable being utilized.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/target-closed.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--log=verbose\n```\n\n----------------------------------------\n\nTITLE: Setting Output File Location in Remotion Config (TypeScript)\nDESCRIPTION: Defines the output path and filename for the rendered video or still, relative to the current working directory, using the `Config` object in `remotion.config.ts`. The default is `out/{composition}.{container}`. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v3.1.6. Passing an output path as a command-line argument to `remotion render` overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setOutputLocation('out/video.mp4');\n```\n\n----------------------------------------\n\nTITLE: Defining and Registering a Remotion Composition in TSX using React - TypeScript\nDESCRIPTION: This snippet demonstrates how to define a simple Remotion composition in React using TypeScript (TSX) and register it using the Composition component from the remotion library. The example splits the composition component (MyComposition) and the Remotion root wrapper (RemotionRoot) into two files. The RemotionRoot registers the composition with specified properties like durationInFrames, fps, width, and height. No external dependencies are required apart from react and remotion, and component properties should mirror those previously passed to the <Player> component. Input is handled via component props and outputs as registered compositions. Limitations include that the MyComposition here is a placeholder and must be populated for actual rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player-into-remotion-project.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: Composition.tsx\\nexport const MyComposition: React.FC = () => {\\n  return null;\\n};\\n// @filename: Root.tsx\\n// ---cut---\\nimport React from 'react';\\nimport {Composition} from 'remotion';\\nimport {MyComposition} from './Composition';\\n\\nexport const RemotionRoot: React.FC = () => {\\n  return (\\n    <>\\n      <Composition\\n        id=\"Empty\"\\n        // Import the component and add the properties you had in the `<Player>` before\\n        component={MyComposition}\\n        durationInFrames={60}\\n        fps={30}\\n        width={1280}\\n        height={720}\\n      />\\n    </>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Marking Content as Experimental Using ExperimentalBadge in MDX\nDESCRIPTION: Demonstrates marking a documentation section as experimental by wrapping content in an <ExperimentalBadge> component in MDX. This signals to readers that the enclosed feature or section is subject to change. The snippet requires the Remotion docs system supporting the <ExperimentalBadge> component. The badge includes arbitrary child content, typically a paragraph explaining the experimental nature. This pattern should be used for early or unstable features.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/docs.mdx#_snippet_2\n\nLANGUAGE: md\nCODE:\n```\n<ExperimentalBadge>\\n<p>This feature is still experimental.</p>\\n</ExperimentalBadge>\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Playback Speed in Remotion (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates using the `<Audio>` component from Remotion to play an audio file (`audio.mp3`) at double the normal speed. It utilizes the `playbackRate` prop set to `2`. The component requires the `remotion` library and an audio file accessible via `staticFile`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/speed.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, staticFile} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Audio src={staticFile('audio.mp3')} playbackRate={2} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onProgress Callback for Media Conversion in Remotion WebCodecs (TypeScript)\nDESCRIPTION: This code snippet defines a TypeScript implementation of the 'onProgress' callback function for convertMedia() from @remotion/webcodecs. The function receives detailed progress information such as decoded/encoded video and audio frame counts, bytes written, milliseconds written, expected output duration, and overall progress, all wrapped in a ConvertMediaProgress object. Intended for monitoring and logging encoding progress, this function can be registered with the convertMedia() process to receive periodic updates, and does not return a value.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-media.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ConvertMediaOnProgress, ConvertMediaProgress} from '@remotion/webcodecs';\\n\\nexport const onProgress: ConvertMediaOnProgress = ({decodedVideoFrames, decodedAudioFrames, encodedVideoFrames, encodedAudioFrames, bytesWritten, millisecondsWritten, expectedOutputDurationInMs, overallProgress}: ConvertMediaProgress) => {\\n  console.log(decodedVideoFrames);\\n  //                   ^?\\n  console.log(decodedAudioFrames);\\n  //                   ^?\\n  console.log(encodedVideoFrames);\\n  //                   ^?\\n  console.log(encodedAudioFrames);\\n  //                   ^?\\n  console.log(bytesWritten);\\n  //                   ^?\\n  console.log(millisecondsWritten);\\n  //                   ^?\\n  console.log(expectedOutputDurationInMs);\\n  //                   ^?\\n  console.log(overallProgress);\\n  //                   ^?\\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Recorder (Bash)\nDESCRIPTION: This command starts the Remotion development server, often referred to as the Remotion Recorder or Studio. It's a prerequisite step for both visual and manual composition creation methods.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/create.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun start\n```\n\n----------------------------------------\n\nTITLE: Storing Remotion Lambda Renders in Supabase Storage via Custom S3 Provider - TypeScript\nDESCRIPTION: Shows how to invoke Remotion Lambda and direct the output to Supabase Storage by providing a custom s3OutputProvider configuration. The renderMediaOnLambda function receives storage configuration parameters such as bucketName, key, endpoint, credentials, and region (via environment variables), with forcePathStyle enabled for S3 compatibility. This integration allows rendered videos to be saved directly into a Supabase Storage bucket. Prerequisites: create Supabase Storage bucket and set SUPABASE_ACCESS_KEY_ID/SUPABASE_SECRET_ACCESS_KEY environment variables.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/supabase.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {renderMediaOnLambda, speculateFunctionName} from '@remotion/lambda-client';\n\n// ---cut---\nconst {bucketName, renderId, cloudWatchMainLogs} = await renderMediaOnLambda({\n  serveUrl: 'https://remotion-helloworld.vercel.app',\n  // FIXME: Add your function specs here\n  functionName: speculateFunctionName({\n    diskSizeInMb: 2048,\n    memorySizeInMb: 2048,\n    timeoutInSeconds: 120,\n  }),\n  composition: 'HelloWorld',\n  // FIXME: Replace with your AWS region\n  region: 'eu-central-1',\n  codec: 'h264',\n  outName: {\n    // FIXME: Use the bucket name from your Supabase Storage settings\n    bucketName: 'remotion-test-bucket',\n    key: 'out.mp4',\n    s3OutputProvider: {\n      // FIXME: Use the endpoint from your Supabase Storage settings\n      endpoint: 'https://kudbuxgvpedqabsivqjz.supabase.co/storage/v1/s3',\n      // FIXME: Use the Access Key from your Supabase Storage settings\n      accessKeyId: process.env.SUPABASE_ACCESS_KEY_ID ?? '',\n      // FIXME: Use the Secret Access Key from your Supabase Storage settings\n      secretAccessKey: process.env.SUPABASE_SECRET_ACCESS_KEY ?? '',\n      // FIXME: Use the region from your Supabase Storage settings\n      region: 'eu-central-1',\n      forcePathStyle: true,\n    },\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Executing Recording Integration Scripts - Bun - Bash\nDESCRIPTION: Executes the scripts copy.ts and sub.ts using Bun to automate copying the most recent recordings and generating captions, respectively. Requires Bun installed and both script files (copy.ts, sub.ts) present in the current directory. These commands facilitate batch processing of recorded files from the hosted recoding interface into the Remotion project and automatic caption generation by Whisper.cpp. Outputs include moved/captioned media files within the correct Remotion folders.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/record/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbun copy.ts\nbun sub.ts\n```\n\n----------------------------------------\n\nTITLE: Required Deno Permission Flags for Remotion\nDESCRIPTION: This snippet lists the necessary permission flags that must be provided to the Deno runtime when executing Remotion. These flags grant the Remotion process permissions to access environment variables (`--allow-env`), read files (`--allow-read`), write files (`--allow-write`), access the network (`--allow-net`), run subprocesses (`--allow-run`), and access system information (`--allow-sys`). Without these permissions, Remotion will not function correctly under Deno.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/deno.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--allow-env --allow-read --allow-write --allow-net --allow-run --allow-sys\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Recorder with Bun\nDESCRIPTION: Runs the start script defined in the project's `package.json` using the Bun runtime. This command launches the Remotion Recorder application after all setup and dependency installation steps are completed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/setup.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun start\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Next.js Remotion Video App (Node.js, Bash)\nDESCRIPTION: Bootstraps a new Remotion-powered video app using the Next.js Pages directory through the interactive npx create-video command. This command downloads and runs the latest create-video npm package, initializing the specified template structure. It can be run in any directory and guides the user through setup prompts. Requires Node.js and internet access. Resulting files include the example app structure and dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-pages/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-video@latest --next-pages-dir\n```\n\n----------------------------------------\n\nTITLE: Downloading and Parsing Media with Metadata Extraction - @remotion/media-parser - TypeScript\nDESCRIPTION: Demonstrates downloading a remote media file using downloadAndParseMedia while simultaneously extracting key metadata fields such as the durationInSeconds and available tracks. Requires the @remotion/media-parser and @remotion/media-parser/node-writer modules. The src parameter specifies the remote media URL, writer handles the file output location, and fields determines which metadata to extract. Returns an object with the selected metadata upon successful completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/download-and-parse.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {downloadAndParseMedia} from '@remotion/media-parser';\nimport {nodeWriter} from '@remotion/media-parser/node-writer';\n\nconst {durationInSeconds, tracks} = await downloadAndParseMedia({\n  src: 'https://s3.amazonaws.com/bucket/uploaded-asset.mp4',\n  writer: nodeWriter('output.mp4'),\n  fields: {\n    durationInSeconds: true,\n    tracks: true,\n  },\n});\n// If here was reached, file is downloaded!\nconsole.log(durationInSeconds);\nconsole.log(tracks);\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Remotion Environment in React (TypeScript)\nDESCRIPTION: This TypeScript/TSX snippet demonstrates how to utilize Remotion's getRemotionEnvironment function inside a React functional component to detect the current runtime (Studio, Player, Rendering) and render different UI accordingly. This usage requires the remotion package as a dependency and assumes a Remotion-enabled project context. The code destructures the environment flags returned by getRemotionEnvironment() and conditionally returns a corresponding <div> for each environment; by default it renders 'Hello World!'. Expected inputs: Called within a React render tree. Output: A React element that reflects the current Remotion environment. There are no external input parameters, but the rendered result depends on Remotion runtime variables. This design is well-suited to customizing component behaviors contextually and is typically used within Remotion projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-remotion-environment.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\\nimport {getRemotionEnvironment} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  const {isStudio, isPlayer, isRendering} = getRemotionEnvironment();\\n\\n  if (isStudio) {\\n    return <div>I\\'m in the Studio!</div>;\\n  }\\n\\n  if (isPlayer) {\\n    return <div>I\\'m in the Player!</div>;\\n  }\\n\\n  if (isRendering) {\\n    return <div>I\\'m Rendering</div>;\\n  }\\n\\n  return <div>Hello World!</div>;\\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing and Displaying Current Frame in a Component - Remotion Player - TypeScript\nDESCRIPTION: Illustrates how to use the custom hook ('useCurrentPlayerFrame') within a TimeDisplay component to access and display the current frame from a PlayerRef. Includes both the hook implementation and a sample UI component for output. Dependencies are '@remotion/player', 'react', and the custom hook; expects playerRef prop for the Player reference. Outputs a div with the current frame. Use this within the 'App' structure for dynamic time display.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/current-time.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ./use-current-player-frame.ts\\nimport {CallbackListener, PlayerRef} from '@remotion/player';\\nimport {useCallback, useSyncExternalStore} from 'react';\\n\\nexport const useCurrentPlayerFrame = (\\n  ref: React.RefObject<PlayerRef | null>,\\n) => {\\n  const subscribe = useCallback(\\n    (onStoreChange: (newVal: number) => void) => {\\n      const {current} = ref;\\n      if (!current) {\\n        return () => undefined;\\n      }\\n      const updater: CallbackListener<'frameupdate'> = ({detail}) => {\\n        onStoreChange(detail.frame);\\n      };\\n      current.addEventListener('frameupdate', updater);\\n      return () => {\\n        current.removeEventListener('frameupdate', updater);\\n      };\\n    },\\n    [ref],\\n  );\\n\\n  const data = useSyncExternalStore<number>(\\n    subscribe,\\n    () => ref.current?.getCurrentFrame() ?? 0,\\n    () => 0,\\n  );\\n\\n  return data;\\n};\\n\\n// @filename: TimeDisplay.tsx\\n// ---cut---\\nimport React from 'react';\\nimport {PlayerRef} from '@remotion/player';\\nimport {useCurrentPlayerFrame} from './use-current-player-frame';\\n\\nexport const TimeDisplay: React.FC<{\\n  playerRef: React.RefObject<PlayerRef | null>;\\n}> = ({playerRef}) => {\\n  const frame = useCurrentPlayerFrame(playerRef);\\n\\n  return <div>current frame: {frame}</div>;\\n};\n```\n\n----------------------------------------\n\nTITLE: Launching Remotion Studio in Next.js/React Router Templates\nDESCRIPTION: Starts the Remotion Studio development server using the `npm run remotion` script, commonly used in Next.js and React Router 7 based Remotion templates. This command is configured in the project's `package.json`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/studio.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run remotion\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Buffering UI Overlay in Remotion Player (TypeScript/TSX)\nDESCRIPTION: This snippet showcases the use of Remotion Player's renderPoster prop to display a custom overlay (such as an emoji spinner) while the video is buffering. It uses React hooks for managing the buffering state and provides a functional implementation for overlaying a UI during loading. Dependencies include Remotion Player, Remotion AbsoluteFill component, and React; expected inputs are player state and the renderPoster function, and output is a React node UI overlay during buffering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/buffer-state.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nconst MyComp = () => null;\\n// ---cut---\\nimport { Player, RenderPoster } from \\\"@remotion/player\\\";\\nimport { useCallback, useState } from \\\"react\\\";\\nimport { AbsoluteFill } from \\\"remotion\\\";\\n\\nfunction App() {\\n  const [buffering, setBuffering] = useState();\\n\\n  // Add this to your component rendering the <Player>\\n  const renderPoster: RenderPoster = useCallback(() => {\\n    if (buffering) {\\n      return (\\n        <AbsoluteFill\\n          style={{\\n            justifyContent: \\\"center\\\",\\n            alignItems: \\\"center\\\",\\n            fontSize: 100,\\n          }}\\n        >\\n          ⏳\\n        </AbsoluteFill>\\n      );\\n    }\\n\\n    return null;\\n  }, [buffering]);\\n\\n  return (\\n    <Player\\n      fps={30}\\n      component={MyComp}\\n      compositionHeight={720}\\n      compositionWidth={1280}\\n      durationInFrames={200}\\n      // Add these two props to the Player\\n      showPosterWhenPaused\\n      renderPoster={renderPoster}\\n    />\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Metadata using Remotion Media Parser in TypeScript\nDESCRIPTION: This snippet demonstrates how to extract metadata (such as ID3 tags and EXIF data) from a video file by calling the parseMedia function from the @remotion/media-parser package in TypeScript. The src parameter specifies the video file URL, and the fields object requests metadata extraction. The function returns an array of metadata entries, each containing keys like key, trackId, and value. Console logging the result shows the structure of parsed metadata; typical prerequisite is installing @remotion/media-parser, and the operation requires the video to be accessible at the given URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/tags.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\nconst {metadata} = await parseMedia({\\n  src: 'https://example.com/my-video.mp4',\\n  fields: {\\n    metadata: true,\\n  },\\n});\\n\\nconsole.log(metadata);\\n\\n/*\\n[\\n  {\\n    key: 'com.apple.quicktime.model',\\n    trackId: null,\\n    value: 'iPhone 15 Pro',\\n  },\\n  {\\n    key: 'encoder',\\n    trackId: null,\\n    value: 'Lavf57.19.100',\\n  }\\n]\\n*/\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Project to AWS Lambda using deploySite() in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to asynchronously deploy a Remotion video project by importing deploySite from @remotion/lambda and configuring it with project entry point, S3 bucket, and region. Callback functions onBundleProgress and onUploadProgress enable real-time updates during the bundling and upload phases, logging progress details to the console. The serveUrl returned can be used for further Lambda-based or local video renderings. Dependencies include @remotion/lambda and path, with entryPoint, bucketName, and region as required parameters. The snippet expects to run inside a Node.js environment supporting top-level await.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/deploysite.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {deploySite} from '@remotion/lambda';\nimport path from 'path';\n\nconst {serveUrl} = await deploySite({\n  entryPoint: path.resolve(process.cwd(), 'src/index.ts'),\n  bucketName: 'remotionlambda-c7fsl3d',\n  region: 'us-east-1',\n  options: {\n    onBundleProgress: (progress) => {\n      // Progress is between 0 and 100\n      console.log(`Bundle progress: ${progress}%`);\n    },\n    onUploadProgress: ({totalFiles, filesUploaded, totalSize, sizeUploaded}) => {\n      console.log(`Upload progress: Total files ${totalFiles}, Files uploaded ${filesUploaded}, Total size ${totalSize}, Size uploaded ${sizeUploaded}`);\n    },\n  },\n});\nconsole.log(serveUrl);\n```\n\n----------------------------------------\n\nTITLE: Deferring Root Registration with Promises in Remotion (TypeScript)\nDESCRIPTION: Illustrates how to asynchronously defer registering the Remotion root component until after a promise (e.g., loading WebAssembly) resolves. The code defines a function loadWebAssembly, then imports continueRender, delayRender, and registerRoot from 'remotion', and finally calls registerRoot when the async operation completes. Main dependency is 'remotion'; expected input is a promise. Output is a registered root after dependencies load. Limitation: registration occurs only after successful async completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/register-root.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: ./Root.tsx\\nexport const RemotionRoot = () => <></>;\n```\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: index.ts\\nconst loadWebAssembly = () => Promise.resolve();\\n// ---cut---\\n\\nimport { continueRender, delayRender, registerRoot } from \\\"remotion\\\";\\nimport { RemotionRoot } from \\\"./Root\\\";\\n\\nloadWebAssembly().then(() => {\\n  registerRoot(RemotionRoot);\\n});\n```\n\n----------------------------------------\n\nTITLE: Applying the Easing.out Helper (JSX)\nDESCRIPTION: This snippet demonstrates using the `Easing.out` helper within an options object. It wraps `Easing.ease`, causing the ease function to be applied in reverse (ease-out).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  easing: Easing.out(Easing.ease);\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Audio with @remotion/preload in TypeScript/React\nDESCRIPTION: This TypeScript/React snippet demonstrates how to preload an audio resource using the preloadAudio() function from the @remotion/preload package. It shows how to call preloadAudio() with an audio URL, and how to un-preload the audio by invoking the returned function. Required dependencies include @remotion/preload, and the key parameter is the audio file URL. The expected input is a string URL for the audio, and the output is a function to remove the preload effect. This pattern ensures that the audio plays immediately when mounted while allowing cleanup when no longer needed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload-audio.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { preloadAudio } from \"@remotion/preload\";\n\nconst unpreload = preloadAudio(\n  \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\"\n);\n\n// If you want to un-preload the audio later\nunpreload();\n```\n\n----------------------------------------\n\nTITLE: Displaying Images via External URL Using Remotion Img (TypeScript)\nDESCRIPTION: Loads and displays an image from an external URL using Remotion's Img component. No local files or staticFile() are needed; the URL is passed directly to the src prop. Useful for remote images; requires a valid URL and the remotion package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Img } from \\\"remotion\\\";\\n\\nexport const MyComp: React.FC = () => {\\n  return <Img src=\\\"https://picsum.photos/id/237/200/300\\\" />;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Animating Text with Perspective and Will-Change for Subpixel Rendering in Remotion (TypeScript/React)\nDESCRIPTION: This enhanced snippet applies both perspective and willChange CSS properties to a vertically-animated text element in Remotion, improving subpixel rendering smoothness. It uses interpolate for motion but adds a 'perspective(100px)' and 'willChange: transform' to the style, which prompts Chrome to use more precise GPU-accelerated rendering. Dependencies include Remotion, React, and knowledge of when to toggle willChange for performance; inputs are frame number and transform properties, output is a smoother subpixel-rendered motion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/subpixel-rendering.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx title=\\\"Right side of the video\\\"\n<div\n  style={{\n    transform: 'perspective(100px) translateY(' + interpolate(frame, [0, 200], [0, 50]) + 'px)',\n    willChange: 'transform',\n  }}\n>\n  hi there\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Webhook Notification Payload for Remotion Cloud Run Render - JSON\nDESCRIPTION: Defines the JSON structure sent in POST requests to the provided webhook URL. Key fields include 'progress', 'renderedFrames', 'encodedFrames', 'renderId', and 'projectId', providing insight into the current state and tracking of a render task. Consumers of the webhook should ensure their endpoint can process this structure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/render.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"progress\": 0.1,\n  \"renderedFrames\": 100,\n  \"encodedFrames\": 100,\n  \"renderId\": \"1234567890\",\n  \"projectId\": \"1234567890\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing True Randomness via random(null) in Remotion (TypeScript)\nDESCRIPTION: Illustrates a technique to obtain non-deterministic random numbers, similar to `Math.random()`, within a Remotion context where `Math.random()` might trigger ESLint warnings. By calling `random(null)` (using a locally defined `random` function for demonstration, though the principle applies to bypassing Remotion's deterministic behavior when `null` is used), a truly random number is generated each time, bypassing the need for ESLint ignore comments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/random.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst random = (seed: number | string | null) => Math.random();\n// ---cut---\n// Passing null will result in a different value every time.\nrandom(null) === random(null); // false\n```\n\n----------------------------------------\n\nTITLE: Defining Endcard Channel Configurations in TypeScript\nDESCRIPTION: This TypeScript snippet showcases an example configuration for the endcard feature. It exports a `channels` object where each key is a channel identifier (e.g., 'jonny', 'remotion'). The associated value is an object containing social media handles/usernames for platforms like Instagram, LinkedIn, X (Twitter), YouTube, and Discord, along with a boolean flag `isLinkedInBusinessPage` to specify the type of LinkedIn profile. Missing platforms can be set to `null`. This object is used to populate the links displayed on the recorder's endcard.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/endcard.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```tsx filename=\"Example configuration.tsx\"\nexport const channels: {\n  [key in Channel]: ChannelConfig & {\n    isLinkedInBusinessPage: boolean;\n  };\n} = {\n  jonny: {\n    instagram: null,\n    linkedin: \"Jonny Burger\",\n    x: \"@JNYBGR\",\n    youtube: \"/JonnyBurger\",\n    discord: null,\n    isLinkedInBusinessPage: false,\n  },\n  remotion: {\n    instagram: \"@remotion\",\n    linkedin: \"Remotion\",\n    x: \"@remotion\",\n    youtube: \"@remotion_dev\",\n    discord: null,\n    isLinkedInBusinessPage: true,\n  },\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Weights and Subsets for loadFont in @remotion/google-fonts (TypeScript)\nDESCRIPTION: Provides an example of how to use the `loadFont` function from `@remotion/google-fonts/Roboto` in Remotion v5.0. It highlights the mandatory inclusion of the `weights` (e.g., `['400', '700']`) and `subsets` (e.g., `['latin']`) options, as loading all variants by default is no longer supported.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/5-0-migration.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {loadFont} from '@remotion/google-fonts/Roboto';\n\nloadFont('normal', {\n  weights: ['400', '700'],\n  subsets: ['latin'],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering and Downloading a Still Frame with Remotion Lambda CLI in Shell\nDESCRIPTION: Shows how to render the default frame of 'my-comp' using the 'testbed' shorthand serve URL and simultaneously download the resulting image to the local filesystem as `out.png` by specifying the output location.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/still.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda still testbed my-comp out.png\n```\n\n----------------------------------------\n\nTITLE: Dynamically Activating Freeze Based on Frame - Remotion/TypeScript/React\nDESCRIPTION: This example extends the <Freeze> component usage by providing an 'active' prop as a callback. The callback receives the current frame number and returns true or false, determining whether freezing is active. In this case, the children are frozen before frame 30 and unfrozen from frame 30 onward, enabling frame-based dynamic logic. Remotion is required, and BlueSquare must be available in scope.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/freeze.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Freeze } from \"remotion\";\n\nconst MyVideo = () => {\n  return (\n    <Freeze frame={30} active={(f) => f < 30}>\n      <BlueSquare />\n    </Freeze>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.elastic Function Factory Signature (JSX)\nDESCRIPTION: Provides the static method signature for the `Easing.elastic` factory function. It accepts a `bounciness` parameter (defaulting to 1) and returns an elastic easing function that simulates a spring oscillating. Higher bounciness results in more oscillations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nstatic elastic(bounciness): (t) =>  number\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Video Assets with OffthreadVideo (TypeScript)\nDESCRIPTION: Demonstrates importing a video from the public/ directory using Remotion's OffthreadVideo component and staticFile(). The src is resolved for vid.webm, kept in sync with Remotion's timeline. Requires remotion and vid.webm in public/.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OffthreadVideo, staticFile } from \\\"remotion\\\";\\n\\nexport const MyComp: React.FC = () => {\\n  return <OffthreadVideo src={staticFile(\\\"vid.webm\\\")} />;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Video Volume Using OffthreadVideo in Remotion (TypeScript)\nDESCRIPTION: This example demonstrates how to adjust the volume of a video by setting the volume prop on the OffthreadVideo component. Dependencies include remotion and React. The volume parameter accepts a number between 0 and 1 (here, 0.5 for 50% volume). The effect is a video with attenuated sound during playback.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return <OffthreadVideo src={staticFile('video.mp4')} volume={0.5} />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Problematic State Coupling with Remotion Player - TypeScript\nDESCRIPTION: This snippet illustrates an anti-pattern where component state (current frame) is tightly coupled with the Player component, resulting in unnecessary re-renders each time playback updates. It demonstrates the use of React hooks (useRef, useState, useEffect) to track Player progress, but attaches UI directly as a child of the Player, which is discouraged for frequently updated states. Requires React, @remotion/player, and a custom MyVideo component. Inputs include properties such as duration, dimensions, and fps; outputs are the fully rendered Player and corresponding time display. Limitation: Prone to performance bottlenecks under frequent updates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/best-practices.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\n```tsx twoslash title=\\\"\\u274C Problematic\\\"\\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;// @filename: index.tsx\\nconst otherProps = {\\n  durationInFrames: 120,\\n  compositionWidth: 1920,\\n  compositionHeight: 1080,\\n  fps: 30,\\n} as const;\\nimport {Player, PlayerRef} from '@remotion/player';\\nimport {useEffect, useRef, useState} from 'react';\\nimport {MyVideo} from './remotion/MyVideo';\\n// ---cut---\\nexport const App: React.FC = () => {\\n  const playerRef = useRef<PlayerRef>(null);\\n  const [currentTime, setCurrentTime] = useState(0);\\n\\n  useEffect(() => {\\n    playerRef.current?.addEventListener('timeupdate', (e) => {\\n      setCurrentTime(e.detail.frame);\\n    });\\n  }, []);\\n\\n  return (\\n    <div>\\n      <Player ref={playerRef} component={MyVideo} {...otherProps} />\\n      <div>Current time: {currentTime}</div>\\n    </div>\\n  );\\n};\\n```\n```\n\n----------------------------------------\n\nTITLE: Using the Loop Button with Remotion Player in React (tsx)\nDESCRIPTION: Demonstrates the usage of the previously defined `LoopButton` component within a parent React component (`MyComponent`). It utilizes the `useState` hook to manage the `loop` state. This state and its setter function (`setLoop`) are passed as props to both the Remotion `<Player>` component (controlling its `loop` behavior) and the custom `LoopButton` component, linking the button's action to the player's state.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/custom-controls.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: LoopButton.tsx\nimport React from 'react';\n\nexport const LoopButton: React.FC<{ // tsx(React)\n  loop: boolean;\n  setLoop: React.Dispatch<React.SetStateAction<boolean>>;\n}> = ({loop, setLoop}) => {\n  const onClick = React.useCallback(() => {\n    setLoop((prev) => !prev);\n  }, [setLoop]);\n\n  return (\n    <button type=\"button\" onClick={onClick}>\n      {loop ? 'Loop enabled' : 'Loop disabled'}\n    </button>\n  );\n};\n// @filename: index.tsx\n\nconst MyComp: React.FC = () => {\n  return null;\n};\n// ---cut---\nimport React, {useState} from 'react';\nimport {LoopButton} from './LoopButton';\nimport {Player} from '@remotion/player';\n\nexport const MyComponent: React.FC = () => {\n  const [loop, setLoop] = useState(false);\n\n  return (\n    <>\n      <Player\n        component={MyComp}\n        loop={loop}\n        durationInFrames={100}\n        fps={30}\n        compositionWidth={1920}\n        compositionHeight={1080}\n        inputProps={{}}\n      />\n      <LoopButton loop={loop} setLoop={setLoop} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of renderStillOnLambda in TypeScript\nDESCRIPTION: This example demonstrates how to import and call the `renderStillOnLambda` function from `@remotion/lambda/client`. It shows invoking the function with necessary parameters like AWS region, Lambda function name, deployment serve URL, composition ID, image format, and target frame to render a still image on AWS Lambda. The returned promise resolves to an object containing the output URL, estimated cost, and image size.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/renderstillonlambda.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @module: esnext\n// @target: es2017\nimport {renderStillOnLambda} from '@remotion/lambda/client';\n\nconst {estimatedPrice, url, sizeInBytes} = await renderStillOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  composition: 'MyVideo',\n  inputProps: {},\n  imageFormat: 'png',\n  maxRetries: 1,\n  privacy: 'public',\n  envVariables: {},\n  frame: 10,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Loading Overlay for Remotion Player - React TSX\nDESCRIPTION: Shows how to supply a custom UI while the Remotion Player loads by providing a renderLoading callback. Utilizes useCallback to memoize the overlay UI, accesses the player's height and width, and returns a styled full-size AbsoluteFill with loading text. Requires @remotion/player, remotion, and React hooks. The renderLoading prop expects a function, and this setup is used when components are suspended or dynamically loaded (e.g., with lazy loading).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player, RenderLoading} from '@remotion/player';\\nimport {useCallback} from 'react';\\nimport {AbsoluteFill} from 'remotion';\\n\\nconst Component: React.FC = () => null;\\n\\n// ---cut---\\n\\nconst MyApp: React.FC = () => {\\n  // `RenderLoading` type can be imported from \"@remotion/player\"\\n  const renderLoading: RenderLoading = useCallback(({height, width}) => {\\n    return (\\n      <AbsoluteFill style={{backgroundColor: 'gray'}}>\\n        Loading player ({height}x{width})\\n      </AbsoluteFill>\\n    );\\n  }, []);\\n\\n  return <Player fps={30} component={Component} durationInFrames={100} compositionWidth={1080} compositionHeight={1080} renderLoading={renderLoading} />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Remotion Project (Console)\nDESCRIPTION: This command utilizes 'npx' (Node Package Execute) to download and run the latest version of the 'create-video' package. This package scaffolds a new Remotion project directory, providing a starting point for development. Requires Node.js and npm (which includes npx) to be installed on the system.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpx create-video@latest\n```\n\n----------------------------------------\n\nTITLE: Removing All Remotion Lambda Functions - Remotion CLI - Bash\nDESCRIPTION: This Bash snippet uses the Remotion CLI tool to remove all deployed Lambda functions. The '-y' flag automatically confirms the removal prompt, making the command suitable for automation or scripted upgrades. This operation is only recommended when the functions are no longer needed in production, as it is irreversible and will revoke access to the existing Lambda functions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/upgrading.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda functions rmall -y\n```\n\n----------------------------------------\n\nTITLE: Triggering Composition Re-evaluation with reevaluateComposition() in React (TypeScript)\nDESCRIPTION: This React component demonstrates how to use the `reevaluateComposition()` function from `@remotion/studio`. A button is rendered, and clicking it triggers the `reevaluate` function (memoized with `useCallback`). This function calls `reevaluateComposition()` to force a recalculation of the currently selected composition's metadata via `calculateMetadata()`. This is particularly useful when the metadata calculation relies on dynamic factors like time, network resources, or files in the `public/` folder. Requires `react` and `@remotion/studio` dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/reevaluate-composition.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback } from \"react\";\nimport { reevaluateComposition } from \"@remotion/studio\";\n\nexport const ReevaluateCompositionComp: React.FC = () => {\n  const reevaluate = useCallback(async () => {\n    reevaluateComposition();\n\n    console.log(\"Re-evaluated!\");\n  }, []);\n\n  return <button onClick={reevaluate}>Re-evaluate</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Remotion Versions Check (Text)\nDESCRIPTION: Displays an example of the ideal output from the `remotion versions` command. This output indicates that all detected Remotion packages (`@remotion/bundler`, `@remotion/cli`, etc.) are installed with the same version (3.0.19), confirming version alignment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/versions.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nOn version: 3.0.19\n- @remotion/bundler\n- @remotion/cli\n- @remotion/eslint-config\n- @remotion/renderer\n- @remotion/media-utils\n- @remotion/babel-loader\n- @remotion/lambda\n- @remotion/three\n- @remotion/gif\n- remotion\n\n✅ Great! All packages have the same version.\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Frame in Remotion Component (TypeScript/React)\nDESCRIPTION: This snippet illustrates a basic React functional component (`MyComp`) within a Remotion project. It uses the `useCurrentFrame` hook imported from 'remotion' to get the current frame number (starting from 0) being rendered and displays it within a div element.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useCurrentFrame} from 'remotion'; // Added import based on description\n\nexport const MyComp: React.FC = () => {\n\tconst frame = useCurrentFrame();\n\treturn <div>Frame {frame}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/eslint-config via npm (Bash)\nDESCRIPTION: This command installs the `@remotion/eslint-config` package as a development dependency using npm. The `--save-exact` flag ensures that the exact version specified is installed, which is recommended for Remotion packages to maintain version alignment and avoid potential compatibility issues. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/eslint-config/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/eslint-config --save-exact\n```\n\n----------------------------------------\n\nTITLE: Adding Render Scripts for Transparent and Opaque Outputs (JSON)\nDESCRIPTION: Sets up npm/yarn scripts in package.json to automate Remotion renders for both opaque and transparent versions of a video. No programming language or dependencies are required; include these in the 'scripts' section of your package.json. The 'render' script produces a normal video, while 'render-transparent' applies flags to enable transparency, outputting a WebM with alpha channel. Customize video IDs or flags as needed for your project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transparent-videos.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"render\": \"remotion render my-video video.mp4\",\n    \"render-transparent\": \"remotion render --image-format=png --pixel-format=yuva420p --codec=vp8 my-video video-transparent.webm\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying SIGKILL Error for FFmpeg Process (txt)\nDESCRIPTION: This snippet displays an example error message signifying that the FFmpeg process, utilized by Remotion for video encoding/decoding tasks, was terminated with a `SIGKILL` signal (indicated by `code null`). This error usually points towards severe memory pressure on the system, leading the OS to kill the process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/sigkill.mdx#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nFFmpeg quit with code null (SIGKILL)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Older Ubuntu Versions using Bash\nDESCRIPTION: Uses the `apt install` command to install required shared libraries for Remotion's Chrome Headless Shell on older Ubuntu versions. Note the use of `libasound2` compared to `libasound2t64` in newer versions. These libraries support networking, accessibility, audio, display, printing, and graphics.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-dependencies.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt install -y \\\n  libnss3 \\\n  libdbus-1-3 \\\n  libatk1.0-0 \\\n  libasound2 \\\n  libxrandr2 \\\n  libxkbcommon-dev \\\n  libxfixes3 \\\n  libxcomposite1 \\\n  libxdamage1 \\\n  libgbm-dev \\\n  libcups2 \\\n  libcairo2 \\\n  libpango-1.0-0 \\\n  libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Layering Elements with AbsoluteFill in Remotion (TypeScript/React)\nDESCRIPTION: This snippet illustrates how to stack elements visually using the `AbsoluteFill` component from 'remotion'. `AbsoluteFill` makes its children occupy the full dimensions of their parent, positioned absolutely. Nesting `AbsoluteFill` components allows creating layers, where later elements in the code appear on top.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\treturn (\n\t\t<AbsoluteFill>\n\t\t\t<AbsoluteFill style={{background: 'blue'}}> // Added missing style prop based on context\n\t\t\t\t<div>This is in the back</div>\n\t\t\t</AbsoluteFill>\n\t\t\t<AbsoluteFill style={{background: 'red'}}> // Changed background for clarity, added missing style prop\n\t\t\t\t<div>This is in front</div>\n\t\t\t</AbsoluteFill>\n\t\t</AbsoluteFill>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Entry Point for Remotion Render CLI Command\nDESCRIPTION: This command demonstrates how to specify the entry point file when rendering a Remotion video using the `npx remotion render` command. The `[entry-point]` placeholder should be replaced with the path to the file that calls `registerRoot()`, typically `src/index.ts` in most templates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/loading-root-component.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render [entry-point]\n```\n\n----------------------------------------\n\nTITLE: Checking Browser Codec Support using WebCodecs API in TSX\nDESCRIPTION: This snippet illustrates how to use the asynchronous `VideoDecoder.isConfigSupported()` and `AudioDecoder.isConfigSupported()` methods within the `onVideoTrack` and `onAudioTrack` callbacks. It checks if the browser supports the specific codec configuration provided by `@remotion/media-parser` for the track. If the configuration is not supported, the callback returns `null` to prevent processing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @noErrors\nimport type {OnAudioTrack, OnVideoTrack} from '@remotion/media-parser';\n\nconst onVideoTrack: OnVideoTrack = async ({track}) => {\n  const videoDecoder = new VideoDecoder({\n    output: console.log,\n    error: console.error,\n  });\n\n  const {supported} = await VideoDecoder.isConfigSupported(track);\n  if (!supported) {\n    return null;\n  }\n\n  // ...\n};\n\nconst onAudioTrack: OnAudioTrack = async ({track}) => {\n  const audioDecoder = new AudioDecoder({\n    output: console.log,\n    error: console.error,\n  });\n\n  const {supported} = await AudioDecoder.isConfigSupported(track);\n  if (!supported) {\n    return null;\n  }\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Yarn (Bash)\nDESCRIPTION: Installs or updates project dependencies using the Yarn package manager according to the `package.json` and `yarn.lock` files. This command is used in the manual upgrade workflow after updating Remotion package versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/upgrading.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Displaying Remotion CLI Help\nDESCRIPTION: This command executes the Remotion Command Line Interface (CLI) using `npx` and invokes the `help` command. It outputs a list of all available Remotion commands and global flags, along with their descriptions, directly to the console. This is useful for understanding the available options and how to use the CLI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/help.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion help\n```\n\n----------------------------------------\n\nTITLE: Requesting AWS Lambda Quota Increase via Remotion CLI - Shell\nDESCRIPTION: This snippet creates an AWS support request to increase your account's Lambda concurrency and applicable limits using the Remotion CLI. Only root AWS accounts are eligible for automatic requests; child accounts must request increases via the AWS console. Flags include --region to specify the region, --yes to auto-confirm, and --force to override certain checks. The Remotion CLI and AWS credentials are required prerequisites. The command should be run in a terminal environment using npx.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/quotas.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda quotas increase\n```\n\n----------------------------------------\n\nTITLE: Applying Skew Transform using Style Prop in TSX\nDESCRIPTION: Shows how to apply a skew transformation to a `div` element using the `transform: skew()` CSS property within the `style` prop in TSX. Skewing distorts the element by a specified angle (e.g., '20deg').\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transforms.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {6} title=\"MyComponent.tsx\"\n<div\n  style={{\n    height: 100,\n    width: 100,\n    backgroundColor: \"red\",\n    transform: `skew(20deg)`,\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Video using NPX\nDESCRIPTION: This command utilizes NPX (Node Package Execute) to run the Remotion Command Line Interface (CLI) 'render' command without needing a global installation. It initiates the process of rendering the defined Remotion composition into a video file according to the project's configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-helloworld/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Listening to Transcription Progress Updates in TypeScript\nDESCRIPTION: Shows implementation of an onProgress callback for the transcribe() API, using the TranscribeOnProgress type from @remotion/install-whisper-cpp. This callback logs the current progress percentage to the console, enabling real-time feedback during long audio transcriptions. Useful when the transcribe() call is given an onProgress option to monitor or visualize progress. Depends on the types exported by the package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/install-whisper-cpp/transcribe.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {TranscribeOnProgress} from '@remotion/install-whisper-cpp';\\n\\nconst onProgress: TranscribeOnProgress = (progress) => {\\n  console.log(`Transcription progress: ${progress * 100}%`);\\n};\n```\n\n----------------------------------------\n\nTITLE: Muting Audio in <OffthreadVideo> in Remotion (tsx)\nDESCRIPTION: Demonstrates how to mute the audio track of an `<OffthreadVideo>` component by adding the boolean `muted` prop. Requires `AbsoluteFill` and `OffthreadVideo` imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, OffthreadVideo} from 'remotion';\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo muted src=\"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Downloading and Writing Media to File with nodeWriter in TypeScript\nDESCRIPTION: This example demonstrates how to use `downloadAndParseMedia` from `@remotion/media-parser` along with `nodeWriter` from `@remotion/media-parser/node-writer`. It downloads an MP4 video from a URL and saves it to a local file named 'output.mp4' using Node.js file system capabilities. The `nodeWriter` function takes the output file path as an argument and provides a writer interface compatible with `downloadAndParseMedia`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/node-writer.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {downloadAndParseMedia} from '@remotion/media-parser';\nimport {nodeWriter} from '@remotion/media-parser/node-writer';\n\nawait downloadAndParseMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  writer: nodeWriter('output.mp4'),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video Locally using Remotion (Node.js, Bash)\nDESCRIPTION: Uses the Remotion CLI to programmatically render a video composition locally based on project code. This command is executed in the root of a Remotion-integrated project. Requires all dependencies to be installed and the composition to be properly configured. Outputs media files to a target directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-pages/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Using useVideoTexture Hook to Create Three.js VideoTexture - TypeScript/TSX\nDESCRIPTION: This snippet shows how to use the useVideoTexture hook from @remotion/three to convert an existing HTMLVideoElement ref into a THREE.VideoTexture, suitable for use in Three.js materials. The key dependency is the useVideoTexture hook, and the input is a React ref to the video element. The expected output is a THREE.VideoTexture or null if the video is not ready. Ensure that the hook is called in the same component where the ref was created.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-video-texture.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst videoRef: React.MutableRefObject<HTMLVideoElement | null> =\n  React.useRef(null);\n// ---cut---\nimport { useVideoTexture } from \"@remotion/three\";\n\n// ...\n\nconst texture = useVideoTexture(videoRef);\n```\n\n----------------------------------------\n\nTITLE: Accessing Video Configuration with useVideoConfig (TypeScript/React)\nDESCRIPTION: Shows how to retrieve the current composition's configuration properties (like `fps`, `durationInFrames`, `height`, `width`) within a React component using the `useVideoConfig` hook imported from 'remotion'. This allows components to adapt to the video's settings.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useVideoConfig} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\tconst {fps, durationInFrames, height, width} = useVideoConfig();\n\treturn (\n\t\t<div>\n\t\t\tfps: {fps}\n\t\t\tdurationInFrames: {durationInFrames}\n\t\t\theight: {height}\n\t\t\twidth: {width}\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Managing Decoder Queue Size for Performance in TSX\nDESCRIPTION: This snippet demonstrates a technique to prevent overwhelming the decoder and improve page performance by managing the decoder's input queue. Inside the async sample processing function, it checks `videoDecoder.decodeQueueSize`. If the queue size exceeds a threshold (10 in this case), it pauses processing by awaiting a Promise. The Promise is resolved when the decoder signals it's ready for more input via the 'dequeue' event. This pauses the `parseMedia` process, preventing excessive memory usage from buffered samples.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {OnVideoTrack} from '@remotion/media-parser';\n\nconst onVideoTrack: OnVideoTrack = async ({track}) => {\n  const videoDecoder = new VideoDecoder({\n    output: console.log,\n    error: console.error,\n  });\n\n  return async (sample) => {\n    if (videoDecoder.decodeQueueSize > 10) {\n      let resolve = () => {};\n\n      const cb = () => {\n        resolve();\n      };\n\n      await new Promise<void>((r) => {\n        resolve = r;\n        videoDecoder.addEventListener('dequeue', cb);\n      });\n      videoDecoder.removeEventListener('dequeue', cb);\n    }\n\n    videoDecoder.decode(new EncodedVideoChunk(sample));\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling TailwindCSS with Remotion Webpack Config (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the enableTailwind function from @remotion/tailwind together with Remotion's Config.overrideWebpackConfig to add TailwindCSS support to a Remotion project. It requires the @remotion/cli/config and @remotion/tailwind dependencies. The current Webpack configuration is passed to enableTailwind, returning an updated configuration that includes the necessary loaders and settings for TailwindCSS to work. The main parameter is the current Webpack configuration, and the output is the enhanced configuration object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind/enable-tailwind.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\\nimport {enableTailwind} from '@remotion/tailwind';\\n\\nConfig.overrideWebpackConfig((currentConfiguration) => {\\n  return enableTailwind(currentConfiguration);\\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion using Yarn (Bash)\nDESCRIPTION: Runs the Remotion upgrade command using Yarn. This automates the update process for Remotion packages within the project. Requires the `@remotion/cli` package to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/upgrading.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Project Dependencies using NPM\nDESCRIPTION: Executes the Node Package Manager (NPM) install command. This command downloads and installs all the project dependencies listed in the `package.json` file, which are necessary for the Remotion project to run.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-blank/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Executing Remotion Cloud Run Service Bulk Removal (Shell)\nDESCRIPTION: This shell command uses `npx` to run the Remotion CLI tool for managing Cloud Run services. The `cloudrun services rmall` subcommand specifically targets all existing Remotion services within a specified Google Cloud Platform (GCP) region for deletion. It typically requires the `--region` flag to be set or inferred from the environment. By default, it interactively prompts the user for confirmation before deleting each service; this can be bypassed using the `--yes` or `-y` flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/services/rmall.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun services rmall\n```\n\n----------------------------------------\n\nTITLE: Accessing Zod Schema while Updating Default Props with updateDefaultProps in TypeScript\nDESCRIPTION: This example illustrates how to access the associated Zod schema (`schema`) along with the `unsavedDefaultProps` within the `defaultProps` callback when using `updateDefaultProps`. This enables schema-aware logic or validation before returning the updated temporary default props object. Requires `@remotion/studio` and the `zod` library to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/update-default-props.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @target: esnext\nimport { updateDefaultProps } from \"@remotion/studio\";\n\nupdateDefaultProps({\n  compositionId: \"my-composition\",\n  defaultProps: ({ schema, unsavedDefaultProps }) => {\n    // Do something with the Zod schema\n\n    return {\n      ...unsavedDefaultProps,\n      color: \"red\",\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs for the Main Lambda Function in Remotion - Plaintext\nDESCRIPTION: This log query is utilized in AWS CloudWatch to isolate logs emitted by the main Lambda function responsible for orchestrating the Remotion render. Setting 'method' to 'launch' and supplying the appropriate 'renderId' allows users to inspect the high-level execution flow and diagnose strategic failures. Requires CloudWatch access and the correct render ID. Intended for troubleshooting orchestration rather than per-chunk failures.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/debug.mdx#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmethod=launch,renderId=[render-id]\n```\n\n----------------------------------------\n\nTITLE: Applying Webpack Override with deploySite API (TypeScript)\nDESCRIPTION: Shows how to use a reusable webpackOverride function with Remotion's deploySite() Node.js API for Lambda deployments, allowing full control over Webpack config during deployment. The override is passed via the options property. Requires @remotion/lambda and TypeScript ESNext environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ./src/webpack-override.ts\nimport {WebpackOverrideFn} from '@remotion/bundler';\nexport const webpackOverride: WebpackOverrideFn = (c) => c;\n// @filename: remotion.config.ts\n// @target: esnext\n// ---cut---\nimport {deploySite} from '@remotion/lambda';\nimport {webpackOverride} from './src/webpack-override';\n\nawait deploySite({\n  entryPoint: require.resolve('./src/index.ts'),\n  region: 'us-east-1',\n  bucketName: 'remotionlambda-c7fsl3d',\n  options: {\n    webpackOverride,\n  },\n  // ...other parameters\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding MuxVideo Player in Documentation (JSX/MDX, TypeScript)\nDESCRIPTION: This snippet renders the NewMuxVideo React component within MDX, embedding a Mux-hosted video into the article. It passes the muxId prop to identify the video, applies inline style to set the width to 100%, enables playback controls, and sets a poster image. Required dependencies are the NewMuxVideo component, React, proper muxId strings, and media assets for previews. This pattern allows responsive, customizable video presentation alongside text content in documentation or blog articles.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/success-stories/2021-09-16-makestories.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<NewMuxVideo muxId=\"eB9pPF17zyOrmEas4kwsa3OvTeQV3cDlLQ5U01CHrfcg\" style={{\n  width: '100%'\n}} controls poster=\"/img/makestories.png\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing clockWipe Transition with TransitionSeries in Remotion (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to implement the `clockWipe` transition between two scenes (`Letter` components) using Remotion's `TransitionSeries`. It imports necessary components and functions from `remotion` and `@remotion/transitions`, retrieves video dimensions using `useVideoConfig`, and configures the `clockWipe` presentation with these dimensions and `linearTiming` for the transition duration. The example defines a simple `Letter` component to display content within each sequence.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/clock-wipe.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill } from \"remotion\";\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 200,\n        color: \"white\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { linearTiming, TransitionSeries } from \"@remotion/transitions\";\nimport { clockWipe } from \"@remotion/transitions/clock-wipe\";\nimport { useVideoConfig } from \"remotion\";\n\nconst BasicTransition = () => {\n  const { width, height } = useVideoConfig();\n\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\"#0b84f3\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={clockWipe({ width, height })}\n        timing={linearTiming({ durationInFrames: 30 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Letter color=\"pink\">B</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Avoiding Custom Browser Path via Remotion Config (Best Practice)\nDESCRIPTION: Advises against using the `setBrowserExecutable()` configuration option as a best practice, unless strictly necessary. Relying on Remotion's managed Chrome Headless Shell ensures compatibility with the Remotion version used and avoids potential disruptions from automatic Chrome updates or API changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nsetBrowserExecutable()\n```\n\n----------------------------------------\n\nTITLE: Customizing Video Size and Position with CSS in Remotion (TypeScript)\nDESCRIPTION: This code shows how to apply inline CSS styles to an OffthreadVideo, adjusting properties such as width, height, position, and coordinates. It depends on remotion and React with the video file available locally. Key style parameters set fixed dimensions and absolute position, enabling custom layouts within the rendered video frame.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <OffthreadVideo\\n      src={staticFile('video.mp4')}\\n      style={{\\n        width: 640,\\n        height: 360,\\n        position: 'absolute',\\n        top: 100,\\n        left: 100,\\n      }}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Using useWindowedAudioData with Remotion Hooks in TypeScript React\nDESCRIPTION: Demonstrates how to use the useWindowedAudioData hook from @remotion/media-utils within a functional React component to efficiently fetch and visualize a segment of .wav audio data around the current frame. This example imports supporting hooks (staticFile, useCurrentFrame, useVideoConfig) and visualizeAudio, constructs an audio data window of 10 seconds, and generates audio visualizations by calling visualizeAudio with relevant metadata. The dependencies for this snippet include the @remotion/media-utils package (v4.0.240 or newer), remotion, and a .wav audio asset. The key input parameters are src (path to .wav), frame (current video frame), fps (frames per second configuration), and windowInSeconds (audio fetch window size), with outputs including audioData (fetched audio data segment) and dataOffsetInSeconds (the offset of loaded data). This snippet should only be used in contexts where the audio file supports HTTP Range and CORS, with visualization tailored to loaded segments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-windowed-audio-data.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// ---cut---\nimport {useWindowedAudioData, visualizeAudio} from '@remotion/media-utils';\nimport {staticFile, useCurrentFrame, useVideoConfig} from 'remotion';\n\nexport const MyComponent: React.FC = () => {\n  const {fps} = useVideoConfig();\n  const frame = useCurrentFrame();\n  const {audioData, dataOffsetInSeconds} = useWindowedAudioData({\n    src: staticFile('podcast.wav'),\n    frame,\n    fps,\n    windowInSeconds: 10,\n  });\n\n  if (!audioData) {\n    return null;\n  }\n\n  const visualization = visualizeAudio({\n    fps,\n    frame,\n    audioData,\n    numberOfSamples: 16,\n    dataOffsetInSeconds,\n  });\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Preloading Video Assets with @remotion/preload in TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use the preloadVideo function from the @remotion/preload package to preload a video resource before it is mounted in a React component. Calling preloadVideo returns a function for un-preloading if necessary. The snippet requires the @remotion/preload package, and expects a video URL to be provided. It ensures videos play instantly when they appear in the DOM, optimizing performance in the Remotion Player or Studio context. No component mount required for preloading, and can be cancelled by invoking the returned function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preload/preload-video.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { preloadVideo } from \"@remotion/preload\";\n\nconst unpreload = preloadVideo(\n  \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n);\n\n// If you want to un-preload the video later\nunpreload();\n```\n\n----------------------------------------\n\nTITLE: Rendering a Sample Video with Remotion CLI - Shell\nDESCRIPTION: Utilizes the Remotion CLI to render an example video composition locally. Requires the remotion package and expects the user to have defined at least one composition. Outputs a video file upon successful completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-render-server/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials using a Profile File\nDESCRIPTION: Example format for the `~/.aws/credentials` file commonly used on macOS and Linux for storing AWS credentials. This snippet shows how to define a named profile (e.g., `remotion`) containing the `aws_access_key_id` and `aws_secret_access_key`. By setting the `REMOTION_AWS_PROFILE=remotion` environment variable, Remotion Lambda will use the credentials associated with this profile, eliminating the need to set individual key/secret environment variables.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/authentication.mdx#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\n\n# ...\n\n[remotion]\naws_access_key_id = YOUR_ACCESS_KEY_ID\naws_secret_access_key = YOUR_SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Removing All Sites Across All Regions Using Remotion Cloud Run CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to use the Remotion Cloud Run CLI to remove all sites across all regions of a GCP project by adding the --all-regions flag. This operation requires that the Remotion CLI is available via npx, and may require additional permissions to list and delete sites in all regions. Like the base command, the user is prompted for confirmation before each site is deleted, with output indicating region and other site details. The main input is the optional --all-regions flag, and the output enumerates sites for each found region.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/rmall.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites rmall --all-regions\n```\n\n----------------------------------------\n\nTITLE: Executing Remotion GPU Check with ANGLE Renderer (Bash)\nDESCRIPTION: This Bash command uses `npx` to run the `remotion gpu` command-line tool. It includes the `--gl=angle` flag to specify the ANGLE (Almost Native Graphics Layer Engine) backend for Chrome's OpenGL rendering, allowing users to check how Chrome utilizes the GPU with this specific configuration. Requires Node.js, npm, and Remotion CLI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/gpu.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion gpu --gl=angle\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Version\nDESCRIPTION: Utilizes `npx` to run the Remotion CLI's upgrade command. This command updates the Remotion packages in the project to the latest compatible versions, ensuring access to new features and bug fixes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tiktok/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Version using NPX\nDESCRIPTION: Uses NPX to execute the Remotion CLI's upgrade command. This command checks for newer versions of Remotion and its associated packages, automatically updating dependencies and guiding the user through any necessary code modifications.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-blank/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Passing Input Props During Server-Side Rendering in Remotion (TypeScript)\nDESCRIPTION: Demonstrates passing inputProps while invoking server-side rendering in Remotion using '@remotion/renderer'. Props are supplied both to 'selectComposition' and 'renderMedia', ensuring the correct initial props during the render. Requires Node.js and Remotion's renderer; inputProps must be serializable. Key parameters include 'serveUrl', 'outputLocation', and the props object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/passing-props.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst serveUrl = '/path/to/bundle';\nconst outputLocation = '/path/to/frames';\n// ---cut---\nimport {renderMedia, selectComposition} from '@remotion/renderer';\n\nconst inputProps = {\n  titleText: 'Hello World',\n};\n\nconst composition = await selectComposition({\n  serveUrl,\n  id: 'my-video',\n  inputProps,\n});\n\nawait renderMedia({\n  composition,\n  serveUrl,\n  codec: 'h264',\n  outputLocation,\n  inputProps,\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Video via Remote URL Using OffthreadVideo (TypeScript)\nDESCRIPTION: Loads a remote video URL using Remotion's OffthreadVideo component. <OffthreadVideo /> wraps the external MP4 source, allowing video playback physics to stay synchronized with Remotion's timeline. No static asset required; only the remotion package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OffthreadVideo } from \\\"remotion\\\";\\n\\nexport const MyComp: React.FC = () => {\\n  return (\\n    <OffthreadVideo src=\\\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\\\" />\\n  );\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Preloading Video and Audio using @remotion/preload in TypeScript\nDESCRIPTION: This snippet demonstrates using `preloadVideo` and `preloadAudio` from the '@remotion/preload' package to signal the browser to start loading the specified video and audio files. These functions insert `<link type='preload'>` tags into the document head. The functions return cleanup functions (`unpreloadVideo`, `unpreloadAudio`) which can be called later to remove the preload hints.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/preloading.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {preloadAudio, preloadVideo} from '@remotion/preload';\n\nconst unpreloadVideo = preloadVideo('https://example.com/video.mp4');\nconst unpreloadAudio = preloadAudio(\n  'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3',\n);\n\n// Later, you can optionally clean up the preload\nunpreloadVideo();\nunpreloadAudio();\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/player with npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@remotion/player` package. The `--save-exact` flag is crucial as it ensures that the exact version specified is installed and recorded in the `package.json` file, preventing potential issues caused by minor version mismatches between different Remotion packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/player/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/player --save-exact\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remotion Lambda Role Policy via CLI\nDESCRIPTION: Executes the Remotion CLI command using npx to retrieve the appropriate AWS IAM role policy JSON required for the currently installed Remotion Lambda version. This policy should be applied to the `remotion-lambda-role` IAM role.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/permissions.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda policies role\n```\n\n----------------------------------------\n\nTITLE: Removing All AWS Lambda Functions via Remotion CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to remove all Remotion Lambda functions deployed in your AWS account using the Remotion CLI. The command 'rmall' will delete every function, which is useful when cleaning up old versions or starting from scratch. Ensure you have the required AWS credentials configured and the Remotion CLI installed ('npx remotion'), and note that this operation is irreversible and will remove all functions regardless of configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/faq.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda functions rmall\n```\n\n----------------------------------------\n\nTITLE: Initializing a Remotion Project with NPM (Shell)\nDESCRIPTION: This shell command uses `npm init` with the `video` initializer (Remotion's shorthand) to create a new Remotion project structure, automatically setting it up to use NPM for dependency management. It simplifies the project setup process for users preferring NPM.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-05-06-remotion-2-1.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init video\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Process Linux Rendering via Remotion API Options (TypeScript/JavaScript)\nDESCRIPTION: Use the `chromiumOptions.enableMultiProcessOnLinux` boolean property within the options object passed to Remotion rendering functions like `renderMedia()`, `openBrowser()`, or `renderFrames()`. Setting this to `true` explicitly enables Chromium's multi-process behavior on Linux, overriding the default if necessary.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-single-process.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchromiumOptions.enableMultiProcessOnLinux\n```\n\n----------------------------------------\n\nTITLE: Rotating AWS Credentials Programmatically in TypeScript\nDESCRIPTION: TypeScript functions demonstrating how to programmatically rotate AWS credentials for `@remotion/lambda` operations. It reads credentials for multiple accounts (prefixed like `AWS_KEY_1`, `AWS_SECRET_1`) from environment variables, determines the number of available accounts, selects one randomly, and sets the `REMOTION_AWS_ACCESS_KEY_ID` and `REMOTION_AWS_SECRET_ACCESS_KEY` environment variables accordingly. This requires the environment variables defined in the `.env` example to be loaded beforehand, potentially using a package like `dotenv`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/authentication.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst getAccountCount = () => {\n  let count = 0;\n  while (\n    process.env[\"AWS_KEY_\" + (count + 1)] &&\n    process.env[\"AWS_SECRET_\" + (count + 1)]\n  ) {\n    count++;\n  }\n\n  return count;\n};\n\nconst getRandomAwsAccount = () => {\n  return Math.ceil(Math.random() * getAccountCount());\n};\n\nconst setEnvForKey = (key: number) => {\n  process.env.REMOTION_AWS_ACCESS_KEY_ID = process.env[`AWS_KEY_${key}`];\n  process.env.REMOTION_AWS_SECRET_ACCESS_KEY = process.env[`AWS_SECRET_${key}`];\n};\n\n// Set random account credentials\nsetEnvForKey(getRandomAwsAccount());\n```\n\n----------------------------------------\n\nTITLE: Detecting Media Parser Runtime Support in TypeScript/JavaScript\nDESCRIPTION: This TypeScript/JavaScript snippet checks if the current runtime environment supports the features necessary for `@remotion/media-parser`'s `parseMedia()` function. It verifies the presence of the global `fetch` function and the `resize` method on `ArrayBuffer` instances.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/runtime-support.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst canUseMediaParser = typeof fetch === 'function' && typeof new ArrayBuffer().resize === 'function';\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an Infinite Duration Remotion Component (TypeScript)\nDESCRIPTION: This snippet shows a React functional component (`InfiniteComposition`) using the `useCurrentFrame` hook from Remotion. It renders the current frame number continuously, creating a composition with no defined end. This illustrates why automatic duration calculation is problematic, as not all compositions have a finite length.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/automatic-duration.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"InfiniteComposition.tsx\"\nimport React from 'react';\nimport {useCurrentFrame} from 'remotion';\n\nconst InfiniteComposition: React.FC = () => {\n  const frame = useCurrentFrame();\n  return <div>{frame}</div>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Validating GCP Permissions with Remotion CLI (Bash)\nDESCRIPTION: Uses the Remotion CLI to validate if the permissions in the configured GCP project are correctly set up for Remotion Cloud Run operations. Requires `@remotion/cloudrun` to be installed and the local environment configured with GCP credentials (e.g., via the `.env` file).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun permissions\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Remotion Project using Bun\nDESCRIPTION: This command employs Bun's `create` command to set up a new Remotion project using the 'video' template. It leverages Bun as both the package manager and runtime. Note that full Bun runtime support is still evolving.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/getting-started.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Use Bun as the package manager and runtime\"\nbun create video\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Video\nDESCRIPTION: Uses `npx` to execute the Remotion CLI command for rendering the video project into an output file. This command initiates the final video generation process based on the defined composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tiktok/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Importing SystemPrompt component in React - JavaScript\nDESCRIPTION: This snippet imports the SystemPrompt React component from a relative path in a JavaScript/JSX environment. The import statement allows the current Markdown/MDX file to leverage a reusable UI component that likely displays the Remotion system prompt for LLMs. No external dependencies are necessary apart from React and the availability of the SystemPrompt component at the specified location. No parameters are involved; the import is static.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ai/system-prompt.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {SystemPrompt} from '../../components/SystemPrompt';\n```\n\n----------------------------------------\n\nTITLE: Trimming Audio with Remotion <Audio /> Component in TypeScript\nDESCRIPTION: This snippet demonstrates how to use Remotion's <Audio /> component in a React functional component written in TypeScript. It imports AbsoluteFill, Audio, staticFile, and useVideoConfig from Remotion, then defines a component that sets the startFrom and endAt properties based on the current fps (frames per second). This trims the audio to play from the specified start frame to the end frame, enabling playback of only a segment of 'audio.mp3'. Dependencies include the remotion library and a static 'audio.mp3' file in the project's public directory. Inputs are handled via component properties, and the segment duration is controlled in frames (not seconds). Output is a trimmed audio playback in a Remotion composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/trimming.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AbsoluteFill, Audio, staticFile, useVideoConfig} from 'remotion';\n\nexport const MyComposition = () => {\n  const {fps} = useVideoConfig();\n\n  return (\n    <AbsoluteFill>\n      <Audio src={staticFile('audio.mp3')} startFrom={2 * fps} endAt={4 * fps} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/animation-utils via pnpm (Bash)\nDESCRIPTION: This code snippet demonstrates how to install the @remotion/animation-utils package using pnpm, an efficient Node.js package manager. Running this command will add the library to the project's dependencies. Prior to execution, ensure pnpm is installed; the result is that @remotion/animation-utils will be available in node_modules for imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/animation-utils\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Remotion Render with makeCancelSignal (TypeScript)\nDESCRIPTION: Demonstrates using `makeCancelSignal()` from `@remotion/renderer` to obtain a `cancelSignal` and a `cancel` function. The `cancelSignal` is passed to `renderMedia()`, and the `cancel()` function is called via `setTimeout` after 10 seconds to potentially abort the rendering process. The example highlights that `renderMedia()` returns a promise that resolves upon successful completion or rejects with an error if cancelled before completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/make-cancel-signal.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {VideoConfig} from 'remotion';\nconst composition: VideoConfig = {\n  durationInFrames: 1000000,\n  fps: 30,\n  height: 720,\n  id: 'react-svg',\n  width: 1280,\n  defaultProps: {},\n  props: {},\n  defaultCodec: null,\n  defaultOutName: null,\n};\n// ---cut---\nimport {makeCancelSignal, renderMedia} from '@remotion/renderer';\n\nconst {cancelSignal, cancel} = makeCancelSignal();\n\n// Note that no `await` is used yet\nconst render = renderMedia({\n  composition,\n  codec: 'h264',\n  serveUrl: 'https://silly-crostata-c4c336.netlify.app/',\n  outputLocation: 'out/render.mp4',\n  cancelSignal,\n});\n\n// Cancel render after 10 seconds\nsetTimeout(() => {\n  cancel();\n}, 10000);\n\n// If the render completed within 10 seconds, renderMedia() will resolve\nawait render;\n\n// If the render did not complete, renderMedia() will reject\n// ==> \"[Error: renderMedia() got cancelled]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion Settings via remotion.config.ts (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use the new `remotion.config.ts` file to configure Remotion settings programmatically. It imports the `Config` object from 'remotion' and the `os` module from Node.js. It then sets the rendering concurrency to the number of available CPU cores and configures the output to always overwrite existing files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-15-remotion-1-3.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport os from \"os\";\nimport { Config } from \"remotion\";\n\nConfig.Rendering.setConcurrency(os.cpus().length);\nConfig.Output.setOverwriteOutput(true);\n```\n\n----------------------------------------\n\nTITLE: Rendering TableOfContents Component in Audio Documentation - JSX\nDESCRIPTION: Invokes the TableOfContents React component within the MDX content to display a navigation section for audio topics. This usage assumes React and MDX environments, and is intended to dynamically generate a table of contents. No props or parameters are supplied; output is determined by the TableOfContents component’s implementation. Requires the component to be available and compatible with the document structure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/using-audio.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<TableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies with pnpm (Bash)\nDESCRIPTION: Installs Remotion core, player, CLI, Zod types, React, React DOM, and Zod as project dependencies. It also installs React type definitions as development dependencies using the pnpm package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i remotion @remotion/player @remotion/cli @remotion/zod-types react react-dom zod\npnpm i --dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Interpolating SVG Paths with Remotion Paths in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the interpolatePath function from the @remotion/paths package to interpolate between two SVG path strings. It imports the function, supplies a midpoint interpolation value of 0.5, and outputs the resulting path. Required dependency: @remotion/paths must be installed. The inputs are the interpolation value (number between 0 and 1, though values outside are also allowed) and two valid SVG path strings; the output is a new SVG path string representing the intermediate shape. Useful for morphing shapes or SVG animations; both paths must be valid and compatible for interpolation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/interpolate-path.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { interpolatePath } from \"@remotion/paths\";\n\nconst interpolated = interpolatePath(0.5, \"M 0 0 L 100 0\", \"M 100 0 L 0 0\");\nconsole.log(interpolated); // \"M 50 0 L 50 0\"\n```\n\n----------------------------------------\n\nTITLE: Localhost Server URL for Frame Rendering\nDESCRIPTION: The default URL (`http://localhost:3000`) where Remotion 1.5 serves frames during the rendering process. This mirrors the preview behavior, simplifies CORS configurations for external APIs, and replaces the previous `file://` method. If port 3000 is unavailable, Remotion will try subsequent ports (3001, 3002, etc.).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-03-03-remotion-1-5.mdx#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Creating SQS Queue with Encryption using AWS CDK (JavaScript)\nDESCRIPTION: Creates an AWS SQS queue named 'remotion_queue' with KMS-managed encryption using AWS CDK in JavaScript. This snippet requires the AWS CDK, the SQS package, and appropriate stack setup. The key parameter is 'queueName', and the output is a reference to the configured queue resource for further integration. Intended for use within an AWS CDK stack, this queue is the central processing point for render requests.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// \\\\uD83D\\\\uDC47 create the queue\\nconst remotionQueue = new sqs.Queue(this, 'queue', {\\n  encryption: sqs.QueueEncryption.KMS_MANAGED,\\n  queueName: 'remotion_queue',\\n});\n```\n\n----------------------------------------\n\nTITLE: Controlling GIF Loops via Remotion CLI\nDESCRIPTION: Sets the number of times the generated GIF should loop using the Remotion CLI. `0` disables looping (plays once), omitting the flag (or `null` in the API) loops indefinitely, `1` loops once (plays twice), and so on.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-as-gif.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n--number-of-gif-loops=0\n```\n\n----------------------------------------\n\nTITLE: Deploying Updated Remotion Lambda Function - Remotion CLI - Bash\nDESCRIPTION: This command deploys the latest version of the Remotion Lambda function using the Remotion CLI. It ensures that the Lambda environment is up to date with the most recent code and dependencies. Running this is necessary after upgrading the Remotion packages to propagate new changes to the Lambda deployment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/upgrading.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda functions deploy\n```\n\n----------------------------------------\n\nTITLE: Defining Download Callback for stitchFramesToVideo - Remotion Renderer - TypeScript\nDESCRIPTION: Defines an onDownload callback function triggered when a remote asset must be downloaded to extract audio during video stitching. The function receives a string src parameter representing the asset location and logs the download occurrence. Intended for use as the onDownload parameter to stitchFramesToVideo in the @remotion/renderer package; expects a string input and outputs a log line when a download occurs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/stitch-frames-to-video.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst onDownload = (src: string) => {\n  console.log(`Downloading ${src}...`);\n};\n```\n\n----------------------------------------\n\nTITLE: Defining CustomCredentials Type for getAwsClient in TypeScript\nDESCRIPTION: Specifies the TypeScript type definition for the optional `customCredentials` argument of the `getAwsClient` function. This allows connecting to alternative S3-compatible cloud providers by providing an endpoint, access keys, and optional region and path style settings. Available from Remotion v3.2.23.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getawsclient.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\ntype CustomCredentials = {\n  endpoint: string;\n  accessKeyId: string | null;\n  secretAccessKey: string | null;\n  region?: string;\n  forcePathStyle?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Development Preview - Console\nDESCRIPTION: Launches the Remotion development server in preview mode, enabling real-time editing and hot-reloading for rapid development. The command builds and serves previews locally through npm scripts, typically on http://localhost:3000. Assumes dependencies are installed and a script named 'dev' exists in package.json.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-code-hike/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid SVG Path Input with getInstructionIndexAtLength (TypeScript)\nDESCRIPTION: This snippet illustrates the error handling behavior when an invalid or malformed SVG path string is passed to getInstructionIndexAtLength. The function will throw an error if the path cannot be parsed. It requires the @remotion/paths package. No outputs are returned since an exception is raised for malformed input.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-instruction-index-at-length.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getInstructionIndexAtLength } from \"@remotion/paths\";\n// ---cut---\ngetInstructionIndexAtLength(\"remotion\", 50); // Error: Malformed path data: ...\n```\n\n----------------------------------------\n\nTITLE: Specifying GCP Region via CLI Option (Shell)\nDESCRIPTION: Demonstrates how to use the `--region` global flag with the Remotion Cloud Run CLI to specify the target Google Cloud Platform region (`us-central1` in this example). This option overrides the default region (`us-east1`) and the `REMOTION_GCP_REGION` environment variable.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--region=us-central1\n```\n\n----------------------------------------\n\nTITLE: Running Remotion Render Command via CLI (Bash)\nDESCRIPTION: This shell command snippet demonstrates how to invoke a Remotion render operation directly from the terminal using npx. It executes the CLI with specified options: '--codec=vp8', input composition 'HelloWorld', and output file path 'out/video.webm'. Prerequisites: Remotion CLI installed, project context. Input: command-line options; Output: a rendered video file at the given location.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/cli.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render --codec=vp8 HelloWorld out/video.webm\n```\n\n----------------------------------------\n\nTITLE: Example Timeout Error Message Output (Plain Text)\nDESCRIPTION: This snippet shows the appearance of the error message in the browser or console when a labeled delayRender() call times out. The error message references the user-supplied label for easier debugging. No code execution required; this is a representation of what the developer will observe if the timeout occurs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/timeout.mdx#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nUncaught Error: A delayRender() \"Fetching data from API...\" was called but not cleared after 28000ms. See https://remotion.dev/docs/timeout for help. The delayRender was called\n```\n\n----------------------------------------\n\nTITLE: Setting Frame Skipping for GIFs in Remotion Config (TypeScript)\nDESCRIPTION: Configures frame skipping for GIF output using the `Config` object in `remotion.config.ts`. Only every Nth frame is rendered, effectively lowering the GIF's FPS (e.g., `everyNthFrame: 2` with 30 FPS input results in a 15 FPS GIF). This option is only applicable when rendering GIFs. Depends on the `Config` object from `@remotion/cli/config`. The `--every-nth-frame` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setEveryNthFrame(2);\n```\n\n----------------------------------------\n\nTITLE: Selecting Chrome for Testing via Remotion API Option\nDESCRIPTION: Option passed to Remotion rendering and utility API functions (`renderFrames`, `renderMedia`, `renderStill`, `selectComposition`, `getComposition`, `ensureBrowser`) to specify the use of \"Chrome for Testing\". Use this mode for potentially faster GPU-bound rendering, keeping in mind increased resource and dependency requirements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nchromeMode: 'chrome-for-testing'\n```\n\n----------------------------------------\n\nTITLE: Illustrating Incorrect FontFace src Syntax (No Quotes)\nDESCRIPTION: Demonstrates the incorrect syntax for the CSS 'src' property within a @font-face rule, lacking quotes around the URL and format values. This syntax causes the 'Source could not be parsed as a value list' error in older Chrome versions, including Chrome 104 used in Remotion Lambda.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/could-not-be-parsed-as-a-value-list.mdx#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nsrc: url(font.woff2) format(woff2);\n```\n\n----------------------------------------\n\nTITLE: Using Offthread Video Texture in React Three Fiber - TypeScript/TSX\nDESCRIPTION: This snippet shows a simple usage of Remotion's useOffthreadVideoTexture hook within a React component to map a synchronized video texture onto a mesh in a ThreeCanvas. External dependencies required are @remotion/three and remotion. Key parameters include the video source (as a static file) and the React video config providing canvas width and height. The component only renders the mesh material if a videoTexture is available, returning null otherwise. This example only works during Remotion's dedicated rendering environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-offthread-video-texture.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {ThreeCanvas, useOffthreadVideoTexture} from '@remotion/three';\nimport {staticFile, useVideoConfig} from 'remotion';\n\nconst videoSrc = staticFile('/vid.mp4');\n\nconst My3DVideo = () => {\n  const {width, height} = useVideoConfig();\n\n  const videoTexture = useOffthreadVideoTexture({src: videoSrc});\n\n  return (\n    <ThreeCanvas width={width} height={height}>\n      <mesh>{videoTexture ? <meshBasicMaterial map={videoTexture} /> : null}</mesh>\n    </ThreeCanvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Styling the <Video> Component in Remotion (TSX)\nDESCRIPTION: This snippet illustrates how to apply CSS styles to the Remotion `<Video>` component using the `style` prop. Any valid CSS properties that can be applied to a native `<video>` element can be passed here. The example sets the `height` and `width` of the video.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, staticFile, Video} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video src={staticFile('video.webm')} style={{height: 720, width: 1280}} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Local Audio File in Remotion (TSX)\nDESCRIPTION: This snippet demonstrates how to import and play a local audio file within a Remotion composition. It uses the `staticFile()` function to reference an audio file located in the project's `public/` directory and embeds it using the `<Audio/>` component inside an `<AbsoluteFill/>` container. The audio will play from the start by default.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/importing.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComp.tsx\"\nimport {AbsoluteFill, Audio, staticFile} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Audio src={staticFile('audio.mp3')} />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing a Wipe Transition in Remotion (TypeScript/TSX)\nDESCRIPTION: This example demonstrates how to use the `wipe()` presentation transition within a `TransitionSeries` component in Remotion. It defines a simple `Letter` component and transitions between two instances ('A' and 'B') using the `wipe` effect with linear timing. The `Letter` component uses `AbsoluteFill` for layout.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/wipe.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill } from \"remotion\";\n\nconst Letter: React.FC<{ \n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 200,\n        color: \"white\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { linearTiming, TransitionSeries } from \"@remotion/transitions\";\nimport { wipe } from \"@remotion/transitions/wipe\";\n\nconst BasicTransition = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\"#0b84f3\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={wipe()}\n        timing={linearTiming({ durationInFrames: 30 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Letter color=\"pink\">B</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Video using NPX\nDESCRIPTION: Uses NPX (Node Package Execute) to run the Remotion CLI's render command. This command initiates the video rendering process according to the project's composition and configuration, producing the final video output file(s).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-blank/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Loading Local Fonts with Remotion Fonts Package in TypeScript\nDESCRIPTION: Utilizes the @remotion/fonts package to programmatically load a local font from the public folder. Uses `staticFile()` utility to generate the URL and configures the font with family and weight parameters. Supports asynchronous loading and provides a Promise upon completion. Requires both @remotion/fonts and remotion packages as dependencies, and is designed for environments that load fonts prior to usage in the React tree.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/fonts.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { loadFont } from \"@remotion/fonts\";\nimport { staticFile } from \"remotion\";\n\nconst fontFamily = \"Inter\";\n\nloadFont({\n  family: fontFamily,\n  url: staticFile(\"Inter-Regular.woff2\"),\n  weight: \"500\",\n}).then(() => {\n  console.log(\"Font loaded!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Still Images via Remotion CLI - Bash\nDESCRIPTION: This Bash command renders a still image from a specified Remotion composition to a PNG file. It uses the 'remotion still' CLI tool and demonstrates passing custom props as a JSON string to the composition. Required dependencies include an initialized Remotion project and availability of the appropriate composition (e.g., 'my-comp'). The key parameters are '--props' for custom data, the composition name, and the output filename. The command supports changing output format via the optional '--image-format' flag. Output is a still image file, by default in PNG format, but JPEG, WEBP, and PDF are also available. No duration or FPS needs to be specified for stills.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/stills.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion still --props='{\"custom\": \"data\"}' my-comp out.png\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Studio (Next.js + React Router 7 Template)\nDESCRIPTION: In a Remotion project integrated with 'Next.js + React Router 7', this separate command starts the Remotion Studio specifically. This is needed in addition to `npm run dev` for this template type.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/getting-started.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm run remotion\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading a File and Retrieving Metadata with downloadAndParseMedia in TypeScript\nDESCRIPTION: Shows how to download a media file while simultaneously extracting specific metadata fields. The `fields` object is used to request `durationInSeconds` and `tracks`. The function returns these values upon successful download and parsing, which are then logged.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/download-and-parse-media.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {downloadAndParseMedia} from '@remotion/media-parser';\nimport {nodeWriter} from '@remotion/media-parser/node-writer';\n\nconst {durationInSeconds, tracks} = await downloadAndParseMedia({\n  src: 'https://s3.amazonaws.com/bucket/uploaded-asset.mp4',\n  writer: nodeWriter('output.mp4'),\n  fields: {\n    durationInSeconds: true,\n    tracks: true,\n  },\n});\n// If here was reached, file is downloaded!\nconsole.log(durationInSeconds);\nconsole.log(tracks);\n```\n\n----------------------------------------\n\nTITLE: Ensuring Browser Availability with Remotion CLI (Shell)\nDESCRIPTION: This shell command invokes the Remotion CLI to check for an available Chrome browser for rendering; if none is found, it attempts to download one automatically. It requires Node.js and the Remotion CLI installed via npm or run through npx. Optional parameters such as --browser-executable, --chrome-mode, and --log can modify behavior by specifying a custom browser path, adjusting Chrome's operational mode, or setting log verbosity. The command produces CLI output indicating success or actions taken, and errors if prerequisites are not met.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/browser/ensure.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion browser ensure\n```\n\n----------------------------------------\n\nTITLE: Installing Whisper.cpp with Remotion Using npm (Bash)\nDESCRIPTION: This snippet demonstrates how to install the @remotion/install-whisper-cpp package using npm with the --save-exact flag. The installation ensures that the exact version is used, avoiding the ^ character for compatibility across Remotion and related packages. It requires npm to be installed and should be executed in the root directory of your Remotion project; no input parameters are required, and upon completion, the package will be added to your package.json with the specified version.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/install-whisper-cpp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/install-whisper-cpp --save-exact\n```\n\n----------------------------------------\n\nTITLE: Enabling TailwindCSS v4 in Remotion using enableTailwind\nDESCRIPTION: This TypeScript snippet demonstrates the standard method for enabling TailwindCSS v4 support in a Remotion project. It utilizes the `enableTailwind` function from `@remotion/tailwind-v4` within the `Config.overrideWebpackConfig` method in `remotion.config.ts`. The function takes the current Webpack configuration and returns the modified configuration required for Tailwind.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-v4/enable-tailwind.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport {enableTailwind} from '@remotion/tailwind-v4';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableTailwind(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Render Output to S3-Compatible Cloud Storage (TypeScript)\nDESCRIPTION: Shows how to direct Remotion Lambda output to an alternative S3-compatible cloud provider by extending outName with an s3OutputProvider object. This option enables integration with providers such as Supabase, Cloudflare R2, and DigitalOcean Spaces, requiring their endpoint and credentials. Privacy may need to be set to 'no-acl' to accommodate providers that do not support ACLs. The snippet demonstrates the additional parameters: endpoint, accessKeyId, and secretAccessKey within s3OutputProvider. Appropriate usage also mandates inclusion of these credentials for related API calls and does not support this feature via the CLI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/custom-destination.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {renderMediaOnLambda} from '@remotion/lambda';\n// ---cut---\n\nconst {bucketName, renderId} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  composition: 'MyVideo',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  inputProps: {},\n  codec: 'h264',\n  imageFormat: 'jpeg',\n  maxRetries: 1,\n  privacy: 'no-acl',\n  outName: {\n    key: 'my-output',\n    bucketName: 'output-bucket',\n    s3OutputProvider: {\n      endpoint: 'https://fra1.digitaloceanspaces.com',\n      accessKeyId: '<DIGITAL_OCEAN_ACCESS_KEY_ID>',\n      secretAccessKey: '<DIGITAL_OCEAN_SECRET_ACCESS_KEY>',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/rive with npm\nDESCRIPTION: This command installs the `@remotion/rive` npm package as a project dependency using npm. The `--save-exact` flag ensures that the exact version specified is recorded in `package.json`, which is recommended for Remotion projects to maintain version consistency across related packages. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/rive/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/rive --save-exact\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Audio Volume in Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to statically control audio playback volume in a Remotion composition by passing a numeric value between 0 and 1 to the volume prop of the Audio component. It requires the remotion package and assumes a local or static file asset is available through staticFile. The key parameter is volume, where values less than 0 or more than 1 are not accepted for standard range; the example uses 0.5 for 50% volume, with expected input/output being local composition renders with reduced audio loudness.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/volume.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Audio, staticFile, AbsoluteFill} from 'remotion';\\n\\nexport const MyComposition = () => {\\n  return (\\n    <AbsoluteFill>\\n      <div>Hello World!</div>\\n      <Audio src={staticFile('audio.mp3')} volume={0.5} />\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Executing the `remotion still` Command (Bash)\nDESCRIPTION: Shows the basic command structure for rendering a still frame using the Remotion CLI. It accepts an optional serve URL or entry point, an optional composition ID, and an optional output location. If arguments are omitted, defaults are used (e.g., output to 'out' folder) or interactive prompts may appear. Various flags (like `--props`, `--frame`, `--image-format`) can be appended to customize the rendering process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/still.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion still <serve-url|entry-point>? [<composition-id>] [<output-location>]\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.back Function Factory Signature (JSX)\nDESCRIPTION: Provides the static method signature for the `Easing.back` factory function. It accepts a parameter `s` and returns an easing function that moves slightly backward before moving forward, creating an overshoot effect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nstatic back(s): (t) => number\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Acceleration using Remotion Config in TypeScript\nDESCRIPTION: Sets the hardware acceleration preference for FFmpeg operations using `Config.setHardwareAcceleration()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the mode to 'if-possible', instructing Remotion to attempt using hardware acceleration if available.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setHardwareAcceleration('if-possible');\n```\n\n----------------------------------------\n\nTITLE: Defining Remotion Dependencies with Fixed Versions in package.json - JSON\nDESCRIPTION: This JSON manifest explicitly pins Remotion and related packages to exact version numbers in a package.json. Pinning each package to the same version ensures consistency across dependencies, preventing subtle bugs or breakages resulting from mismatched package versions. Only the 'dependencies' object is shown, which should be part of the root package.json structure; no additional context or dependencies are needed for interpretation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/version-mismatch.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dependencies\\\": {\\n    \\\"remotion\\\": \\\"2.6.12\\\",\\n    \\\"@remotion/player\\\": \\\"2.6.12\\\",\\n    \\\"@remotion/gif\\\": \\\"2.6.12\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Easing.inOut Helper (JSX)\nDESCRIPTION: This snippet shows how to use the `Easing.inOut` helper within an options object, wrapping `Easing.ease`. This modifies the `Easing.ease` function to be symmetrical, providing both ease-in and ease-out characteristics.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  easing: Easing.inOut(Easing.ease);\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Remotion OffthreadVideo Frame Extraction Error - Shell Console Output\nDESCRIPTION: This shell output demonstrates a typical error trace encountered when Remotion's OffthreadVideo cache fails to retrieve a requested video frame. The message includes instructions for reporting the issue, references to the error source within the Remotion codebase, and Rust/Node.js stack traces. The message assumes dependencies such as Remotion, Node.js, Rust (for native code), and a sufficient system memory allocation. There are no parameters, but users are advised to check the `offthreadVideoCacheSizeInBytes` prop and to provide diagnostic information for troubleshooting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/no-frame-found-at-position.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nCompositor error: No frame found at position 64512 for source /tmp/remotion-assetsynpc3sc0cn/remotion-assets-dir/9569510174915195.mp4 (original source = https://remotion.dev). If you think this should work, file an issue at https://remotion.dev/report or post it in https://remotion.dev/discord. Post the problematic video and the output of `npx remotion versions`.\\n   0: <remotion::errors::ErrorWithBacktrace as core::convert::From<std::io::error::Error>>::from\\n   1: remotion::ffmpeg::extract_frame\\n   2: remotion::thread::WorkerThread::run_on_thread\\n   3: std::sys::backtrace::__rust_begin_short_backtrace\\n   4: core::ops::function::FnOnce::call_once{{vtable.shim}}\\n   5: std::sys::pal::unix::thread::Thread::new::thread_start\\n   6: start_thread\\n   7: thread_start\\n\\n    at onMessage (/var/task/index.js:106757:41)\\n    at processInput (/var/task/index.js:63575:9)\\n    at Socket.onData (/var/task/index.js:63597:9)\\n    at Socket.emit (node:events:518:28)\\n    at addChunk (node:internal/streams/readable:559:12)\\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\\n    at Readable.push (node:internal/streams/readable:390:5)\\n    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)\\n    at onMessage (/var/task/index.js:106757:41)\\n    at processInput (/var/task/index.js:63575:9)\\n    at Socket.onData (/var/task/index.js:63597:9)\\n    at Socket.emit (node:events:518:28)\\n    at addChunk (node:internal/streams/readable:559:12)\\n    at readableAddChunkPushByteMode (node:internal/streams/readable:510:3)\\n    at Readable.push (node:internal/streams/readable:390:5)\\n    at Pipe.onStreamRead (node:internal/stream_base_commons:190:23)\n```\n\n----------------------------------------\n\nTITLE: Running the Render Script with Node.js\nDESCRIPTION: Command to execute the rendering script (`render.mjs`) using the Node.js runtime. It also mentions that if the script is written in TypeScript (`render.ts`), `ts-node` should be installed and used for execution.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnode render.mjs\n```\n\n----------------------------------------\n\nTITLE: Using the Vue Wrapper Component (HTML/Vue)\nDESCRIPTION: Demonstrates how to use the custom `PlayerWrapper` Vue component within another Vue template. It binds data to the `:data` prop and listens for the `@paused` event, allowing interaction with the underlying Remotion Player from the parent Vue component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<PlayerWrapper @paused=\"onPaused\" :data=\"data\" />\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.inOut Helper Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for the `Easing.inOut` helper function. It takes an existing easing function and returns a new function that applies the original easing forwards for the first half of the duration and backwards for the second half, creating a symmetrical ease-in-out effect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nstatic inOut(easing: (t: number) => number): (t: number) => number;\n```\n\n----------------------------------------\n\nTITLE: Defining Offthread Remote Video Compositions with Remotion in TypeScript/TSX\nDESCRIPTION: These snippets show how to create Remotion video compositions that embed remote video files using the OffthreadVideo component, alongside a metadata calculation function. Each snippet demonstrates declaring composition metadata (including duration, FPS, width, and height), and rendering with a specific remote video URL. Dependencies include 'remotion' and its OffthreadVideo component, and in one case, usage of the staticFile helper to reference project assets. Inputs include video URLs or asset filenames, while outputs are React components ready for use in Remotion projects. These patterns are suitable for high-performance server-side or cloud Lambda rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cost-example.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {CalculateMetadataFunction, OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const calculateMetadataFn: CalculateMetadataFunction<{}> = async () => {\\n  return {\\n    durationInFrames: 60 * 30,\\n    fps: 30,\\n    width: 1280,\\n    height: 720,\\n  };\\n};\\n\\nexport const OffthreadRemoteVideo: React.FC = () => {\\n  return <OffthreadVideo src={staticFile('bigbuckbunny.mp4')} />;\\n};\n```\n\nLANGUAGE: TSX\nCODE:\n```\nimport {CalculateMetadataFunction, OffthreadVideo} from 'remotion';\\n\\nexport const calculateMetadataFn: CalculateMetadataFunction<{}> = async () => {\\n  return {\\n    durationInFrames: 10 * 60 * 30,\\n    fps: 30,\\n    width: 1280,\\n    height: 720,\\n  };\\n};\\n\\nexport const OffthreadRemoteVideo: React.FC = () => {\\n  return (\\n    <OffthreadVideo src=\\\"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\\\" />\\n  );\\n};\n```\n\nLANGUAGE: TSX\nCODE:\n```\nimport {CalculateMetadataFunction, OffthreadVideo} from 'remotion';\\n\\nexport const calculateMetadataFn: CalculateMetadataFunction<{}> = async () => {\\n  return {\\n    durationInFrames: 10 * 30,\\n    fps: 30,\\n    width: 3840,\\n    height: 2160,\\n  };\\n};\\n\\nexport const OffthreadRemoteVideo: React.FC = () => {\\n  return (\\n    <OffthreadVideo src=\\\"https://videos.pexels.com/video-files/5530402/5530402-uhd_3840_2160_25fps.mp4\\\" />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Autoplay Failure in OffthreadVideo with Remotion in TypeScript/React\nDESCRIPTION: Provides a pattern for handling browser autoplay failures by utilizing the onAutoPlayError prop on the OffthreadVideo component. If autoplay with sound is prevented, the component executes a custom handler—in this example, pausing the PlayerRef. Required dependencies are remotion and @remotion/player. Input: user interaction and a PlayerRef; Output: video is paused on error, informing or prompting the user for further action.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/autoplay.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {OffthreadVideo, staticFile} from 'remotion';\\nimport type {PlayerRef} from '@remotion/player';\\n\\nexport const MyComp: React.FC<{\\n  playerRef: React.RefObject<PlayerRef>;\\n}> = ({playerRef}) => {\\n  return (\\n    <OffthreadVideo\\n      src={staticFile('video.mp4')}\\n      onAutoPlayError={() => {\\n        playerRef.current?.pause();\\n      }}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Studio via CLI - Bash\nDESCRIPTION: Initializes Remotion Studio using the CLI command 'npx remotion studio' with an optional entry point argument. No external dependencies beyond Node.js and Remotion are required. The entry point specifies which video composition file to load, or it can be omitted to auto-detect. Outputs a running Remotion Studio instance in the browser. Arguments passed after 'studio' will be interpreted as the entry point for the application.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/studio.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion studio <entry-point>?\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for public/ Asset Usage (Text)\nDESCRIPTION: This snippet shows the recommended directory layout for a Remotion project utilizing public assets. The public/ folder should exist at the project root level alongside package.json. This structure is a prerequisite for staticFile() to correctly resolve asset URLs, and ensures assets are properly referenced regardless of the project hierarchy.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/staticfile.mdx#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nmy-video/\n├─ node_modules/\n├─ public/\n│  ├─ my-image.png\n│  ├─ font.woff2\n├─ src/\n│  ├─ Root.tsx\n│  ├─ index.ts\n├─ package.json\n```\n\n----------------------------------------\n\nTITLE: Querying Available Containers Using Remotion WebCodecs (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and call the getAvailableContainers function from the @remotion/webcodecs package to retrieve an array of supported output media container formats. The result is logged to the console. This requires the @remotion/webcodecs package to be installed and is designed for a TypeScript or TSX environment. No function parameters are required and the output is an array of container format strings; new containers may be added in future updates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/get-available-containers.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getAvailableContainers} from '@remotion/webcodecs';\n\nconst containers = getAvailableContainers();\nconsole.log(containers);\n```\n\n----------------------------------------\n\nTITLE: Extracting File Type and Contents from a File Input - TypeScript\nDESCRIPTION: Illustrates how to read a file's content type and size using the File API in the browser, which is essential for setting the correct headers during the S3 upload process. Requires modern browsers supporting the File interface. Outputs contentType and contentLength for use in presigned upload requests.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/presigned-urls.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {interpolate} from 'remotion';\nconst file: File = {} as unknown as File;\n// ---cut---\nconst contentType = file.type || 'application/octet-stream';\nconst arrayBuffer = await file.arrayBuffer();\nconst contentLength = arrayBuffer.byteLength;\n```\n\n----------------------------------------\n\nTITLE: Deploying a Remotion Site via CLI (Bash)\nDESCRIPTION: Deploys the user's Remotion project code (site) to Google Cloud Storage using the Remotion CLI. It bundles the project based on the specified entry point (e.g., `src/index.ts`) and uploads it. A `--site-name` can be provided for easier updates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites create src/index.ts --site-name=my-video\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Using useState for delayPlayback Handle (Cleanup Issue)\nDESCRIPTION: This TypeScript React component shows another incorrect usage of `useState` to store the handle returned by `buffer.delayPlayback()`. This pattern fails to properly clear the buffer handle if the user seeks to a different part of the video, potentially leaving the player indefinitely paused. It attempts to pause for 5 seconds but includes a cleanup function in `useEffect` that might not cover all scenarios due to the `useState` initialization.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useState} from 'react';\nimport {useBufferState} from 'remotion';\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n  const [delayHandle] = useState(() => buffer.delayPlayback()); // 💥\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      delayHandle.unblock();\n    }, 5000);\n\n    return () => {\n      delayHandle.unblock();\n    };\n  }, []);\n\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Remotion via GitHub Actions - YAML\nDESCRIPTION: This YAML snippet configures a GitHub Actions workflow to render a video using the Remotion CLI within a CI/CD environment. The job checks out the repository, sets up Node.js, installs dependencies, renders the composition named \"MyComp\" to an MP4 file, and uploads the resulting artifact. Dependencies include a Remotion project with a defined composition ID. Inputs are static in this variant. Outputs are an MP4 file stored in GitHub Actions artifacts. The workflow supports Ubuntu runners and requires access to the repository and Remotion CLI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ssr.mdx#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Render video\\non:\\n  workflow_dispatch:\\njobs:\\n  render:\\n    name: Render video\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@main\\n      - uses: actions/setup-node@main\\n      - run: npm i\\n      - run: npx remotion render MyComp out/video.mp4\\n      - uses: actions/upload-artifact@v4\\n        with:\\n          name: out.mp4\\n          path: out/video.mp4\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Fullscreen Button for Remotion Player in TSX\nDESCRIPTION: This React component implements a custom fullscreen toggle button for the Remotion Player. It accepts a `playerRef` prop. The component checks for browser fullscreen support using `useEffect` to avoid SSR hydration mismatches. It also listens to the player's 'fullscreenchange' event to update its internal `isFullscreen` state. Clicking the button calls `requestFullscreen()` or `exitFullscreen()` on the player via the `playerRef`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/custom-controls.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"FullscreenButton.tsx\"\nimport type {PlayerRef} from '@remotion/player';\nimport React, {useCallback, useEffect, useState} from 'react';\n\nexport const FullscreenButton: React.FC<{\n  playerRef: React.RefObject<PlayerRef | null>;\n}> = ({playerRef}) => {\n  const [supportsFullscreen, setSupportsFullscreen] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const {current} = playerRef;\n\n    if (!current) {\n      return;\n    }\n\n    const onFullscreenChange = () => {\n      setIsFullscreen(document.fullscreenElement !== null);\n    };\n\n    current.addEventListener('fullscreenchange', onFullscreenChange);\n\n    return () => {\n      current.removeEventListener('fullscreenchange', onFullscreenChange);\n    };\n  }, [playerRef]);\n\n  useEffect(() => {\n    // Must be handled client-side to avoid SSR hydration mismatch\n    setSupportsFullscreen(\n      (typeof document !== 'undefined' &&\n        (document.fullscreenEnabled ||\n          // @ts-expect-error Types not defined\n          document.webkitFullscreenEnabled)) ??\n        false,\n    );\n  }, []);\n\n  const onClick = useCallback(() => {\n    const {current} = playerRef;\n    if (!current) {\n      return;\n    }\n\n    if (isFullscreen) {\n      current.exitFullscreen();\n    } else {\n      current.requestFullscreen();\n    }\n  }, [isFullscreen, playerRef]);\n\n  if (!supportsFullscreen) {\n    return null;\n  }\n\n  return (\n    <button type=\"button\" onClick={onClick}>\n      {isFullscreen ? 'Exit Fullscreen' : 'Enter Fullscreen'}\n    </button>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Encoding Rate using Remotion Config in TypeScript\nDESCRIPTION: Defines the maximum allowed encoding bitrate using `Config.setEncodingMaxRate()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the maximum rate to '5000k' (5000 kilobits per second), useful for controlling peak bitrate. This setting can be overridden by the `--max-rate` command-line flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setEncodingMaxRate('5000k');\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using Package Managers\nDESCRIPTION: These commands install the necessary Node.js dependencies for the `apigw-sqs-app` project using different package managers (npm, pnpm, yarn). Choose the command corresponding to your preferred package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Muting Video Playback in Remotion with OffthreadVideo (TypeScript)\nDESCRIPTION: This snippet shows how to mute a video by setting the muted prop on OffthreadVideo. It requires remotion and React, and the video source should be local. The muted prop disables all audio output for the video. No additional parameters are necessary beyond muted flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/index.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\\nimport {OffthreadVideo, staticFile} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  return <OffthreadVideo src={staticFile('video.mp4')} muted />;\\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Using pnpm - Bash\nDESCRIPTION: Adds the Remotion core package to a project using pnpm, an efficient package manager for JavaScript. It expects pnpm to be installed on the system. The command registers 'remotion' as a dependency in the project configuration without further customization.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/remotion.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i remotion\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Remotion Project Using Bun - Shell\nDESCRIPTION: This shell command utilizes Bun's official project scaffolding tool to create a new Remotion video project. Requires Bun to be installed globally (v1.0.3 or higher recommended). The 'bun create video' command initializes a new project directory and configures all scripts to use the Bun-based runtime by default. Inputs: none required; Outputs: a new Remotion video project in the current directory. Ensure your Bun version meets the requirements for template compatibility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/bun.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbun create video\n```\n\n----------------------------------------\n\nTITLE: Running Remotion Studio for Project Editing - Bash\nDESCRIPTION: Opens the Remotion Studio UI for editing video compositions with a graphical interface. This command uses npx to run the remotion studio tool from the local project's dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app-tailwind/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion studio\n\n```\n\n----------------------------------------\n\nTITLE: Defining After Effects Animation Structure in JSON\nDESCRIPTION: This JSON object defines an Adobe After Effects animation structure, exported for use with rendering libraries like Lottie. It specifies animation properties such as version (`v`), frame rate (`fr`), dimensions (`w`, `h`), layers, assets, shapes (paths, fills), transformations (position `p`, anchor `a`, scale `s`, rotation `r`), and keyframed opacity (`o`). This specific example defines a \"Halloween4\" animation with multiple layers for eyes, mouth, and a bag, animating their opacity and position over time.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/lottie-comp.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"v\":\"5.7.13\",\"fr\":60,\"ip\":0,\"op\":190,\"w\":1400,\"h\":1400,\"nm\":\"Halloween4\",\"ddd\":0,\"assets\":[],\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"syes2 Outlines\",\"sr\":1,\"ks\":{\"o\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.667],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":81,\"s\":[0]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":126,\"s\":[100]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":180,\"s\":[100]},{\"t\":189,\"s\":[0]}]},\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[700,700,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[700,700,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[81,81,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[23.598,4.338],[-16.144,12.513],[-14.406,-3.486],[-5.783,-9.989],[5.551,-10.333],[13.41,0.622]],\"o\":[[13.06,-15.846],[12.84,-9.954],[11.369,2.748],[5.304,9.168],[-6.815,12.675],[-27.865,-1.285]],\"v\":[[-60.747,25.943],[-16.719,-16.816],[26.301,-32.49],[50.867,-9.75],[55.196,21.422],[18.174,35.354]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.075,0.035000000748,0.071000005685,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[1016.351,648.256],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[8.588,-5.228],[-0.529,-9.563],[-2.631,-4.201],[-26.415,-19.799],[-0.591,17.05],[11.075,13.562]],\"o\":[[-8.602,5.235],[0.295,5.194],[17.663,28.208],[8.121,-15.849],[0.646,-18.677],[-11.088,-13.558]],\"v\":[[-28.393,-48.557],[-43.638,-24.21],[-38.246,-10.278],[32.714,58.061],[43.521,7.485],[31.676,-44.504]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.075,0.035000000748,0.071000005685,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[868.17,595.655],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 2\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":190,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":2,\"ty\":4,\"nm\":\"mouth Outlines\",\"sr\":1,\"ks\":{\"o\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.667],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":126,\"s\":[0]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":165,\"s\":[100]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":180,\"s\":[100]},{\"t\":189,\"s\":[0]}]},\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[700,700,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[700,700,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[81,81,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[7.317,2.572],[-55.276,18.748],[-3.219,58.553],[13.379,-15.2],[1.988,11.645],[11.29,-14.437],[2.065,14.99],[13.311,-16.182],[4.956,16.23],[8.899,-17.054],[6.334,14.712],[1.491,-17.313],[7.875,10.834],[-1.962,-12.524]],\"o\":[[22.414,49.865],[55.282,-18.752],[-13.38,15.196],[-1.989,-11.659],[-11.301,14.427],[-6.001,-13.214],[-11.037,17.796],[-9.974,-12.898],[-4.967,18.206],[-8.578,-13.169],[-4.002,17.253],[-7.88,-10.845],[1.974,12.524],[-6.802,-0.536]],\"v\":[[-120.666,3.985],[16.998,59.13],[120.665,-77.878],[80.514,-32.268],[74.554,-67.213],[40.654,-23.918],[28.508,-66.494],[-8.082,-15.423],[-30.68,-59.515],[-51.564,-6.359],[-73.981,-48.265],[-82.225,3.686],[-105.874,-28.833],[-99.963,8.752]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.075,0.035000000748,0.071000005685,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[546.778,620.971],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":190,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":3,\"ty\":4,\"nm\":\"eyes Outlines\",\"sr\":1,\"ks\":{\"o\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.667],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":45,\"s\":[0]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":90,\"s\":[100]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":180,\"s\":[100]},{\"t\":189,\"s\":[0]}]},\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[700,700,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[700,700,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[81,81,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-7.396,4.729],[-19.62,-29.593],[4.757,-6.698],[3.418,0.553],[3.092,1.532],[20.959,-9.584],[5.658,5.583],[-3.349,8.47]],\"o\":[[31.578,-20.161],[3.851,5.791],[-2.607,3.689],[-3.404,-0.546],[-18.538,-9.155],[-7.691,3.517],[-5.026,-4.942],[3.335,-8.474]],\"v\":[[-38.476,-16.268],[50.238,0.056],[52.279,22.001],[42.187,26.309],[32.713,22.262],[-29.641,29.118],[-52.01,30.845],[-53.511,6.705]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.075,0.035000000748,0.071000005685,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[593.479,470.1],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[7.389,-0.306],[10.089,-32.457],[-5.582,-2.562],[-2.79,2.184],[-2.306,2.765],[-20.077,3.744],[-3.576,7.127],[4.767,4.621]],\"o\":[[-31.53,1.33],[-1.975,6.351],[3.057,1.398],[2.789,-2.191],[13.781,-16.557],[7.361,-1.367],[3.173,-6.334],[-4.775,-4.616]],\"v\":[[24.553,-38.597],[-47.578,19.949],[-44.355,37.505],[-34.765,35.475],[-27.572,27.482],[27.256,0.095],[46.764,-10.272],[42.601,-29.199]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.075,0.035000000748,0.071000005685,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[440.244,517.803],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 2\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":2,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":190,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":4,\"ty\":4,\"nm\":\"mouth2 Outlines\",\"sr\":1,\"ks\":{\"o\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.667],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":126,\"s\":[0]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":165,\"s\":[100]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":180,\"s\":[100]},{\"t\":189,\"s\":[0]}]},\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[700,700,0],\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[700,700,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[81,81,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[11.047,0.956],[0.35,-0.144],[0.901,-1.041],[0.453,-0.618],[6.272,-1.931],[2.02,4.882],[0.962,4.226],[1.458,0.346],[11.15,-8.673],[-0.171,2.531],[1.951,12.662],[3.18,1.45],[13.157,-7.11],[0.926,1.658],[-0.976,17.147],[1.614,1.247],[12.07,-2.924],[0.343,1.504],[-0.344,14.485],[7.543,12.506],[-22.114,-32.028],[-40.746,1.47],[-15.773,3.874],[-20.658,19.937]],\"o\":[[-0.372,0.196],[-1.807,0.783],[-0.48,0.584],[-3.758,5.235],[-6.691,2.037],[-1.635,-3.985],[-1.457,-0.333],[-12.07,7.424],[-2.192,1.704],[0.879,-13.049],[-3.256,-1.326],[-12.922,7.606],[-1.69,0.913],[-8.038,-14.387],[-1.649,-1.216],[-11.946,3.538],[-1.422,0.347],[-3.057,-14.063],[-9.542,-10.892],[-13.918,42.095],[22.116,32.017],[15.849,-0.563],[26.731,-6.576],[-11.239,0.395]],\"v\":[[92.391,39.28],[91.312,39.895],[89.958,40.758],[88.632,42.688],[73.251,56.833],[59.978,46.164],[56.337,33.77],[51.953,32.747],[19.356,61.315],[14.203,58.736],[12.404,19.979],[2.697,15.895],[-36.016,38.817],[-40.639,37.952],[-45.022,-12.052],[-49.907,-15.751],[-85.63,-4.227],[-88.88,-5.848],[-86.097,-49.696],[-111.915,-84.732],[-98.622,33.936],[2.875,83.262],[50.47,75.383],[125.833,40.211]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.075,0.035000000748,0.071000005685,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[902.385,716.475],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 1\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":1,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":190,\"st\":0,\"bm\":0},{\"ddd\":0,\"ind\":5,\"ty\":4,\"nm\":\"bag Outlines\",\"sr\":1,\"ks\":{\"o\":{\"a\":1,\"k\":[{\"i\":{\"x\":[0.667],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":0,\"s\":[0]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.333],\"y\":[0]},\"t\":45,\"s\":[100]},{\"i\":{\"x\":[0.833],\"y\":[1]},\"o\":{\"x\":[0.167],\"y\":[0]},\"t\":180,\"s\":[100]},{\"t\":189,\"s\":[0]}]},\"ix\":11},\"r\":{\"a\":0,\"k\":0,\"ix\":10},\"p\":{\"a\":1,\"k\":[{\"i\":{\"x\":0.667,\"y\":1},\"o\":{\"x\":0.333,\"y\":0},\"t\":0,\"s\":[700,856,0],\"to\":[0,-26,0],\"ti\":[0,26,0]},{\"t\":45,\"s\":[700,700,0]}]},\"ix\":2,\"l\":2},\"a\":{\"a\":0,\"k\":[700,700,0],\"ix\":1,\"l\":2},\"s\":{\"a\":0,\"k\":[81,81,100],\"ix\":6,\"l\":2}},\"ao\":0,\"shapes\":[{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[0,0],[8.615,2.583]],\"o\":[[-8.625,-2.576],[0,0]],\"v\":[[12.924,3.867],[-12.924,-3.867]],\"c\":false},\"ix\":2},\"nm\":\"Path \n```\n\n----------------------------------------\n\nTITLE: Successful Dynamic Import with Inline Expression in Remotion (TSX)\nDESCRIPTION: This React component shows the correct way to handle dynamic imports with Webpack in Remotion. By placing the path concatenation directly inside the `require()` call, Webpack can analyze the expression and bundle all potentially matching files (e.g., all `.png` files starting with `image` in the `./assets/` directory).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-import.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { Img, useCurrentFrame } from \"remotion\";\n\nexport const DynamicImports: React.FC = () => {\n  const frame = useCurrentFrame();\n  return <Img src={require(\"./assets/image\" + frame + \".png\")} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.linear Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.linear`. This represents a linear transition where the output (`f(t)`) is equal to the input (`t`), resulting in constant speed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nstatic linear(t): number\n```\n\n----------------------------------------\n\nTITLE: Rendering a Still Frame with Remotion Lambda CLI using Full Serve URL in Shell\nDESCRIPTION: Provides an example command to render the default frame (frame 0) of the 'my-comp' composition using a full S3 serve URL. The resulting still image will be stored in the associated S3 bucket specified by the URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/still.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda still https://remotionlambda-abcdef.s3.eu-central-1.amazonaws.com/sites/testbed/index.html my-comp\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM - Bash\nDESCRIPTION: This Bash snippet runs npm i to install project dependencies, typically from a package.json file. Node.js and npm must be installed. This command downloads and installs all required packages for the project in the current directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Defining scale ResizeOperation in TypeScript\nDESCRIPTION: Shows how to define a `ResizeOperation` object for use with `convertMedia`. This configuration scales a video dimensions by the specified `scale` factor (0.5 in this case, making it 50% of its original size). The factor must be greater than 0. It requires the `ResizeOperation` type from `@remotion/webcodecs`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resizing.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ResizeOperation} from '@remotion/webcodecs';\n\nconst resize: ResizeOperation = {\n  mode: 'scale',\n  scale: 0.5,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu 22.04 using Bash\nDESCRIPTION: Uses the `apt install` command to install required shared libraries for Remotion's Chrome Headless Shell on Ubuntu 22.04. These libraries are necessary for core functionalities like networking, accessibility, audio, display, printing, and graphics rendering needed by Chrome.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-dependencies.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt install -y \\\n  libnss3 \\\n  libdbus-1-3 \\\n  libatk1.0-0 \\\n  libasound2t64 \\\n  libxrandr2 \\\n  libxkbcommon-dev \\\n  libxfixes3 \\\n  libxcomposite1 \\\n  libxdamage1 \\\n  libgbm-dev \\\n  libcups2 \\\n  libcairo2 \\\n  libpango-1.0-0 \\\n  libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Importing TableOfContents in Remotion Documentation Using JavaScript\nDESCRIPTION: This snippet demonstrates how to import the TableOfContents component from a local file within a React-based documentation site for Remotion. It assumes a standard project structure set up for documentation generation and React component usage. The import supports inclusion of dynamic navigation elements within Markdown/MDX content, and expects that './TableOfContents' path exists and exports a valid React component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/captions/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {TableOfContents} from './TableOfContents';\n```\n\n----------------------------------------\n\nTITLE: Illustrating `staticFile()` URI Encoding in Remotion v4 (TSX)\nDESCRIPTION: This snippet demonstrates the updated behavior of the `staticFile()` function in Remotion v4.0.0 and later. It now correctly encodes URI-unsafe characters (like '#') using `encodeURIComponent`, ensuring safe file paths for web contexts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"Since v4.0.0\"\nstaticFile('my-image#portrait.png'); // \"my-image%23portrait.png\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using Easing.bounce with interpolate (JSX)\nDESCRIPTION: This snippet shows an example of using `Easing.bounce` within the options object passed to the `interpolate` function. It applies the bounce easing to an interpolation from 0 to 1.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\ninterpolate(0.5, [0, 1], [0, 1], {\n  easing: Easing.bounce,\n});\n```\n\n----------------------------------------\n\nTITLE: Pausing Playback Programmatically - Remotion Studio (TypeScript/React)\nDESCRIPTION: Demonstrates invoking the pause() function directly to pause playback in Remotion Studio without UI interaction. Designed for programmatic control scenarios within TypeScript React projects. Requires @remotion/studio as a dependency. No parameters needed; calling pause() stops the playback immediately.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/pause.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {pause} from '@remotion/studio';\\n\\n// Pause playback\\npause();\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Remix Project with pnpm (Bash)\nDESCRIPTION: Provides the command using the `pnpm` package manager to initialize a new Remotion project using the specific Remix template. This is another alternative for scaffolding the project, suitable for users preferring pnpm.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npnpm create video --remix\n```\n```\n\n----------------------------------------\n\nTITLE: Using Web File System Writer Interface in Remotion WebCodecs (TypeScript)\nDESCRIPTION: This TypeScript code sample imports the webFsWriter and canUseWebFsWriter interfaces from @remotion/webcodecs/web-fs, enabling media conversion output on the Web File System API. It shows how to check support with canUseWebFsWriter(), which returns a boolean, and how to utilize webFsWriter as a storage backend in convertMedia(). This approach is suitable for writable filesystems in web browsers and requires support for the File System Access API.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-media.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {canUseWebFsWriter, webFsWriter} from '@remotion/webcodecs/web-fs';\\n//                          ^?\\n\\nawait canUseWebFsWriter(); // boolean\n```\n\n----------------------------------------\n\nTITLE: Installing Spline R3F Package using npm\nDESCRIPTION: This command installs the `@splinetool/r3f-spline` package using npm. This package is necessary to load and utilize Spline scenes within a React Three Fiber environment, which Remotion uses for 3D rendering via `@remotion/three`. Requires Node.js and npm to be installed in the development environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spline.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @splinetool/r3f-spline\n```\n\n----------------------------------------\n\nTITLE: Arranging Duplicated Markup in a Circle with Remotion in TypeScript\nDESCRIPTION: Defines an Explosion React component that arranges its children in a circle by creating multiple rotated AbsoluteFill wrappers. The number of duplicates is set by the AMOUNT constant, and each is rotated in radians by 2π divided equally. It's used to visually explode effects in a circular pattern. Dependencies are remotion and react; the main prop is children.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from 'react';\\nimport {AbsoluteFill} from 'remotion';\\n\\nconst AMOUNT = 10;\\n\\nexport const Explosion: React.FC<{\\n  children: React.ReactNode;\\n}> = ({children}) => {\\n  return (\\n    <AbsoluteFill>\\n      {new Array(AMOUNT).fill(true).map((_, i) => {\\n        return (\\n          <AbsoluteFill\\n            style={{\\n              rotate: (i / AMOUNT) * (2 * Math.PI) + 'rad',\\n            }}\\n          >\\n            {children}\\n          </AbsoluteFill>\\n        );\\n      })}\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Removing All Cloud Run Services Using Remotion CLI - Bash\nDESCRIPTION: Executes a command to remove all previously deployed Remotion Cloud Run services by invoking the Remotion CLI with the 'services rmall' subcommand and auto-confirming the operation with '-y'. Requires the Remotion CLI to be installed and accessible. This action is recommended only if the services are no longer needed, as it will irreversibly delete them. No input parameters are necessary since '-y' bypasses prompts. The command executes in a bash-compatible shell.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/upgrading.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun services rmall -y\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn - Bash\nDESCRIPTION: This Bash command uses yarn to install all dependencies listed in package.json. Requires yarn to be installed globally. After execution, the node_modules directory will be populated with necessary packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies with Bun\nDESCRIPTION: Installs Remotion core, the Remotion Player, the Remotion CLI, React, and ReactDOM as production dependencies, along with their TypeScript types as development dependencies, using the Bun package manager and runtime.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun i remotion @remotion/player @remotion/cli react react-dom\nbun --dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Defining a Subset of Popular Google Fonts for Remotion in TypeScript\nDESCRIPTION: This TypeScript snippet defines a constant array named `top250` which contains objects representing a selection of the most popular Google Fonts. Each object specifies the font `family` name and a `load` function that dynamically imports the corresponding font module from the `@remotion/google-fonts` package. This method allows developers to limit the included fonts, reducing the overall bundle size of their Remotion application compared to loading all available fonts via `getAvailableFonts()`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/font-picker.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash\nimport type {GoogleFont} from '@remotion/google-fonts';\n\nexport const top250 = [\n  {\n    family: 'ABeeZee',\n    load: () => import('@remotion/google-fonts/ABeeZee') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Abel',\n    load: () => import('@remotion/google-fonts/Abel') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Abril Fatface',\n    load: () => import('@remotion/google-fonts/AbrilFatface') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Acme',\n    load: () => import('@remotion/google-fonts/Acme') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Alata',\n    load: () => import('@remotion/google-fonts/Alata') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Albert Sans',\n    load: () => import('@remotion/google-fonts/AlbertSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Alegreya',\n    load: () => import('@remotion/google-fonts/Alegreya') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Alegreya Sans',\n    load: () => import('@remotion/google-fonts/AlegreyaSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Alegreya Sans SC',\n    load: () => import('@remotion/google-fonts/AlegreyaSansSC') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Alfa Slab One',\n    load: () => import('@remotion/google-fonts/AlfaSlabOne') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Alice',\n    load: () => import('@remotion/google-fonts/Alice') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Almarai',\n    load: () => import('@remotion/google-fonts/Almarai') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Amatic SC',\n    load: () => import('@remotion/google-fonts/AmaticSC') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Amiri',\n    load: () => import('@remotion/google-fonts/Amiri') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Antic Slab',\n    load: () => import('@remotion/google-fonts/AnticSlab') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Anton',\n    load: () => import('@remotion/google-fonts/Anton') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Architects Daughter',\n    load: () => import('@remotion/google-fonts/ArchitectsDaughter') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Archivo',\n    load: () => import('@remotion/google-fonts/Archivo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Archivo Black',\n    load: () => import('@remotion/google-fonts/ArchivoBlack') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Archivo Narrow',\n    load: () => import('@remotion/google-fonts/ArchivoNarrow') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Arimo',\n    load: () => import('@remotion/google-fonts/Arimo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Arsenal',\n    load: () => import('@remotion/google-fonts/Arsenal') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Arvo',\n    load: () => import('@remotion/google-fonts/Arvo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Asap',\n    load: () => import('@remotion/google-fonts/Asap') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Asap Condensed',\n    load: () => import('@remotion/google-fonts/AsapCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Assistant',\n    load: () => import('@remotion/google-fonts/Assistant') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Barlow',\n    load: () => import('@remotion/google-fonts/Barlow') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Barlow Condensed',\n    load: () => import('@remotion/google-fonts/BarlowCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Barlow Semi Condensed',\n    load: () => import('@remotion/google-fonts/BarlowSemiCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Be Vietnam Pro',\n    load: () => import('@remotion/google-fonts/BeVietnamPro') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Bebas Neue',\n    load: () => import('@remotion/google-fonts/BebasNeue') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Bitter',\n    load: () => import('@remotion/google-fonts/Bitter') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Black Ops One',\n    load: () => import('@remotion/google-fonts/BlackOpsOne') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Bodoni Moda',\n    load: () => import('@remotion/google-fonts/BodoniModa') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Bree Serif',\n    load: () => import('@remotion/google-fonts/BreeSerif') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Bungee',\n    load: () => import('@remotion/google-fonts/Bungee') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cabin',\n    load: () => import('@remotion/google-fonts/Cabin') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cairo',\n    load: () => import('@remotion/google-fonts/Cairo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cantarell',\n    load: () => import('@remotion/google-fonts/Cantarell') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cardo',\n    load: () => import('@remotion/google-fonts/Cardo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Catamaran',\n    load: () => import('@remotion/google-fonts/Catamaran') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Caveat',\n    load: () => import('@remotion/google-fonts/Caveat') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Chakra Petch',\n    load: () => import('@remotion/google-fonts/ChakraPetch') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Changa',\n    load: () => import('@remotion/google-fonts/Changa') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Chivo',\n    load: () => import('@remotion/google-fonts/Chivo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cinzel',\n    load: () => import('@remotion/google-fonts/Cinzel') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Comfortaa',\n    load: () => import('@remotion/google-fonts/Comfortaa') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Commissioner',\n    load: () => import('@remotion/google-fonts/Commissioner') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Concert One',\n    load: () => import('@remotion/google-fonts/ConcertOne') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cookie',\n    load: () => import('@remotion/google-fonts/Cookie') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cormorant',\n    load: () => import('@remotion/google-fonts/Cormorant') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cormorant Garamond',\n    load: () => import('@remotion/google-fonts/CormorantGaramond') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Courgette',\n    load: () => import('@remotion/google-fonts/Courgette') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Crete Round',\n    load: () => import('@remotion/google-fonts/CreteRound') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Crimson Pro',\n    load: () => import('@remotion/google-fonts/CrimsonPro') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Crimson Text',\n    load: () => import('@remotion/google-fonts/CrimsonText') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Cuprum',\n    load: () => import('@remotion/google-fonts/Cuprum') as Promise<GoogleFont>,\n  },\n  {\n    family: 'DM Sans',\n    load: () => import('@remotion/google-fonts/DMSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'DM Serif Display',\n    load: () => import('@remotion/google-fonts/DMSerifDisplay') as Promise<GoogleFont>,\n  },\n  {\n    family: 'DM Serif Text',\n    load: () => import('@remotion/google-fonts/DMSerifText') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Dancing Script',\n    load: () => import('@remotion/google-fonts/DancingScript') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Didact Gothic',\n    load: () => import('@remotion/google-fonts/DidactGothic') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Domine',\n    load: () => import('@remotion/google-fonts/Domine') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Dosis',\n    load: () => import('@remotion/google-fonts/Dosis') as Promise<GoogleFont>,\n  },\n  {\n    family: 'EB Garamond',\n    load: () => import('@remotion/google-fonts/EBGaramond') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Eczar',\n    load: () => import('@remotion/google-fonts/Eczar') as Promise<GoogleFont>,\n  },\n  {\n    family: 'El Messiri',\n    load: () => import('@remotion/google-fonts/ElMessiri') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Electrolize',\n    load: () => import('@remotion/google-fonts/Electrolize') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Encode Sans',\n    load: () => import('@remotion/google-fonts/EncodeSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Encode Sans Condensed',\n    load: () => import('@remotion/google-fonts/EncodeSansCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Exo',\n    load: () => import('@remotion/google-fonts/Exo') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Exo 2',\n    load: () => import('@remotion/google-fonts/Exo2') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Figtree',\n    load: () => import('@remotion/google-fonts/Figtree') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Fira Sans',\n    load: () => import('@remotion/google-fonts/FiraSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Fira Sans Condensed',\n    load: () => import('@remotion/google-fonts/FiraSansCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Fjalla One',\n    load: () => import('@remotion/google-fonts/FjallaOne') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Francois One',\n    load: () => import('@remotion/google-fonts/FrancoisOne') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Frank Ruhl Libre',\n    load: () => import('@remotion/google-fonts/FrankRuhlLibre') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Fraunces',\n    load: () => import('@remotion/google-fonts/Fraunces') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Gelasio',\n    load: () => import('@remotion/google-fonts/Gelasio') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Gloria Hallelujah',\n    load: () => import('@remotion/google-fonts/GloriaHallelujah') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Gothic A1',\n    load: () => import('@remotion/google-fonts/GothicA1') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Great Vibes',\n  // ... (rest of the font definitions omitted for brevity)\n];\n```\n```\n\n----------------------------------------\n\nTITLE: Running Remotion Render Server Docker Container - Console\nDESCRIPTION: Runs the previously built Docker image in detached mode, mapping host port 3000 to container port 3000. This deploys the render server for remote access and use with the API endpoints specified. Requires Docker image to already exist.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-render-server/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndocker run -d -p 3000:3000 remotion-render-server\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Remotion CLI - Console\nDESCRIPTION: Triggers Remotion's CLI command to compile and render the video compositions according to project configuration. It outputs the final video files after processing all assets and scripts. Ensure project files and compositions are correct before running; dependent on Remotion being installed and set up.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-code-hike/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/animation-utils via yarn (Bash)\nDESCRIPTION: This snippet provides the command to add @remotion/animation-utils to your project using yarn, a popular package manager for JavaScript. It will register the package as a dependency so it can be imported and used. Yarn should be installed beforehand; this step ensures the package is present in your project workspace.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/animation-utils\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Project to Image in Node.js (Console)\nDESCRIPTION: Uses Remotion CLI to render the current React composition into a static image. Requires \"remotion\" package installed (locally or globally), Node.js, and prior project initialization. \"npx remotion render\" executes the rendering process based on defined compositions. Input: none. Output: generates an image file in the project's output directory. Limitations: compositions must be properly configured beforehand.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-still/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.bezier Function Factory Signature (JSX)\nDESCRIPTION: Provides the static method signature for the `Easing.bezier` factory function. It accepts four numbers representing the control points (x1, y1, x2, y2) of a cubic Bezier curve and returns the corresponding easing function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nstatic bezier(x1, y1, x2, y2) => (t): number\n```\n\n----------------------------------------\n\nTITLE: Triggering FFmpeg Auto-Install via Remotion CLI\nDESCRIPTION: This command uses the Remotion CLI (`npx remotion`) to manually trigger the download and installation of the FFmpeg binary if it's not already found according to Remotion's priority rules. This is useful for pre-installing FFmpeg on servers before the first render. Requires the `@remotion/cli` package to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ffmpeg.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion install ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Initiating a Remotion Lambda Render in TypeScript\nDESCRIPTION: Example demonstrating how to import `renderMediaOnLambda` from `@remotion/lambda/client` and call it with necessary parameters like AWS region, Lambda function name, Remotion composition ID, Serve URL, and desired codec to start a rendering job. The function returns a promise resolving to an object containing the S3 bucket name (`bucketName`) and the unique render ID (`renderId`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/rendermediaonlambda.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ---cut---\nimport {renderMediaOnLambda} from '@remotion/lambda/client';\n\nconst {bucketName, renderId} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  composition: 'MyVideo',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  codec: 'h264',\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying a GCP Cloud Run Service using Remotion Cloud Run API in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use the `deployService` function from the `@remotion/cloudrun` package to create a new Google Cloud Run service configured for Remotion rendering. It specifies memory, CPU limits, timeout, GCP project ID, and region. The function is asynchronous and returns details about the created or existing service, including its `shortName`, which is logged to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/deployservice.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {deployService} from '@remotion/cloudrun';\n\nconst {shortName} = await deployService({\n  memoryLimit: '2Gi',\n  cpuLimit: '2.0',\n  timeoutSeconds: 500,\n  projectID: 'my-remotion-project',\n  region: 'us-east1',\n});\nconsole.log(shortName);\n```\n\n----------------------------------------\n\nTITLE: Video Render Initiation API Response in JSON\nDESCRIPTION: Example JSON response received after successfully initiating a video render via the API. It includes a confirmation message, a unique 'renderId' for tracking, and the 'bucketName' where the output will be stored.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Video sent for rendering.\",\n    \"renderId\": \"i9xnfrgXXXX\",\n    \"bucketName\": \"remotionlambda-apsoutheast2-xxxxxxxx\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Dockerfile Cmd for IPv4 Support on Fly.io (Diff, Docker)\nDESCRIPTION: This diff snippet shows the command change for running Remotion Studio with IPv4 support on Fly.io. The startup command in the Dockerfile is updated to include the --ipv4 flag, addressing deployment requirements from Remotion Studio v4.0.125 and later. This change ensures network compatibility on Fly.io deployments and requires the Remotion CLI to be at least v4.0.125.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-server.mdx#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- CMD [\\\"npx\\\", \\\"remotion\\\", \\\"studio\\\"]\\n+ CMD [\\\"npx\\\", \\\"remotion\\\", \\\"studio\\\", \\\"--ipv4\\\"]\n```\n\n----------------------------------------\n\nTITLE: Deploying Serverless Project in Bash\nDESCRIPTION: Executes the Serverless Framework command to deploy the application stack to AWS. This command should be run from the 'serverless-app' directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n serverless deploy\n```\n\n----------------------------------------\n\nTITLE: Listing Cloud Run Services with Remotion CLI (Bash)\nDESCRIPTION: Executes the Remotion CLI command to list Cloud Run services deployed in the selected GCP region. No external dependencies are required beyond the presence of 'npx' and the Remotion CLI. The command takes optional flags such as '--region' to specify the GCP region and '--quiet' or '-q' to modify output. The main input is the user's configured GCP credentials and optionally, the desired region; output is either a detailed or concise list of running Remotion Cloud Run services. This command is suitable for both scripting and interactive terminal use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/services/ls.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun services ls\n```\n\n----------------------------------------\n\nTITLE: Sequencing Elements with Series in Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates the `Series` component for displaying multiple elements sequentially. Each child element is wrapped in a `Series.Sequence` which takes a `durationInFrames` prop. Sequences play one after another. An optional `offset` prop on `Series.Sequence` can shift its start time relative to the end of the previous sequence (positive offset delays, negative overlaps).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Series} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\treturn (\n\t\t<Series>\n\t\t\t<Series.Sequence durationInFrames={20}>\n\t\t\t\t<div>This only appears immediately</div>\n\t\t\t</Series.Sequence>\n\t\t\t<Series.Sequence durationInFrames={30}>\n\t\t\t\t<div>This only appears after 20 frames</div>\n\t\t\t</Series.Sequence>\n\t\t\t<Series.Sequence durationInFrames={30} offset={-8}>\n\t\t\t\t<div>This only appears after 42 frames</div> \n\t\t\t</Series.Sequence>\n\t\t</Series>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server (Node.js, Bash)\nDESCRIPTION: Launches the Next.js development server for local testing and development of Remotion video apps. This provides features like hot reloading and displays the project at localhost. It must be run in the root folder after dependencies are installed and assumes a valid next.config.js is present. Exposes a local server usually on http://localhost:3000.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-pages/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Scoping loadFont import to avoid variable collisions - TypeScript\nDESCRIPTION: Shows how to import an entire font module as a namespace to prevent naming conflicts when using multiple Google Fonts within the same file. By using import * as ..., all exports from the Montserrat font package are accessible via the Montserrat namespace. This pattern is helpful in larger projects or when multiple fonts are loaded in the same scope.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Montserrat from '@remotion/google-fonts/Montserrat';\nMontserrat.loadFont();\n```\n\n----------------------------------------\n\nTITLE: Measuring Render Duration Using JavaScript console.time - JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the native JavaScript console.time and console.timeEnd methods to instrument and measure how long an operation takes in your render code. No external dependencies are required. Set a label to start timing before an operation and end timing after to log the elapsed milliseconds. The label string should be unique within the scope for accurate measurement. This is useful to pinpoint bottlenecks in render logic.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/performance.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.time(\"my-operation\");\n// ... code you want to measure ...\nconsole.timeEnd(\"my-operation\");\n```\n\n----------------------------------------\n\nTITLE: Using openAiWhisperApiToCaptions to Convert OpenAI Transcriptions (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `openAiWhisperApiToCaptions` function. First, it initializes the OpenAI client and calls the `openai.audio.transcriptions.create` method to transcribe an audio file ('audio.mp3') using the 'whisper-1' model, requesting a 'verbose_json' response format with word-level timestamps. The resulting transcription object is then passed to `openAiWhisperApiToCaptions` to generate an array of Remotion `Caption` objects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/openai-whisper/openai-whisper-api-to-captions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport fs from 'fs';\nimport {OpenAI} from 'openai';\nimport {openAiWhisperApiToCaptions} from '@remotion/openai-whisper';\n\nconst openai = new OpenAI();\n\nconst transcription = await openai.audio.transcriptions.create({\n  file: fs.createReadStream('audio.mp3'),\n  model: 'whisper-1',\n  response_format: 'verbose_json',\n  prompt: 'Hello, welcome to my lecture.',\n  timestamp_granularities: ['word'],\n});\n\nconst {captions} = openAiWhisperApiToCaptions({transcription});\n```\n\n----------------------------------------\n\nTITLE: Observing Added Properties in `useVideoConfig` Hook Return (diff)\nDESCRIPTION: Highlights the addition of `id` and `defaultProps` properties to the object returned by the `useVideoConfig` hook in Remotion v3. Existing code consuming this hook should be checked to ensure it doesn't rely on the absence of these new properties.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"width\": 1920,\n  \"height\": 1080,\n  \"fps\": 30,\n  \"durationInFrames\": 30\n+ \"id\": \"my-comp\",\n+ \"defaultProps\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the `npx remotion lambda still` Command Structure in Shell\nDESCRIPTION: Outlines the basic syntax for the `npx remotion lambda still` command. It requires a `serve-url` (obtained via `sites create` or `deploySite()`) and optionally accepts a `composition-id` (prompts if omitted with full URL) and an `output-location` (defaults to S3 if omitted, otherwise downloads locally).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/still.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda still <serve-url>? [<composition-id>] [<output-location>]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion using npx (Bash)\nDESCRIPTION: Executes the Remotion upgrade command using npx. This command automates the process of updating Remotion packages in the project. Requires the `@remotion/cli` package to be installed or accessible via npx.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/upgrading.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS S3 Bucket Creation Errors (Shell)\nDESCRIPTION: Shows potential error messages (`InvalidBucketAclWithObjectOwnership` or `AccessDenied`) returned by the AWS SDK when attempting to create a new S3 site or bucket using Remotion versions v3.3.86 or older. These errors occur because AWS now blocks public ACLs by default without specific ownership settings.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/s3-public-access.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nInvalidBucketAclWithObjectOwnership: Bucket cannot have ACLs set with ObjectOwnership's BucketOwnerEnforced setting.\n```\n\nLANGUAGE: shell\nCODE:\n```\nAccessDenied: Access Denied\n```\n\n----------------------------------------\n\nTITLE: Animating Scale with a Shrinking Effect - TypeScript/TSX\nDESCRIPTION: Implements a reusable Shrinking component in React/Remotion that animates its children via a scale-out effect based on frame interpolation. Depends on Remotion's interpolate and useCurrentFrame hooks. Inputs are the children elements to be scaled. Outputs the children, shrinking from scale 1 to 0 over frames 60-90. Designed for use as a wrapper around animated elements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {AbsoluteFill, interpolate, useCurrentFrame} from 'remotion';\n\nexport const Shrinking: React.FC<{\n  children: React.ReactNode;\n}> = ({children}) => {\n  const frame = useCurrentFrame();\n\n  return (\n    <AbsoluteFill\n      style={{\n        scale: String(\n          interpolate(frame, [60, 90], [1, 0], {\n            extrapolateLeft: 'clamp',\n            extrapolateRight: 'clamp',\n          }),\n        ),\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/layout-utils using pnpm (Bash)\nDESCRIPTION: This command installs the `@remotion/layout-utils` package using the pnpm package manager. Execute this command in a terminal within your Node.js project. Requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/layout-utils\n```\n\n----------------------------------------\n\nTITLE: Example API Success Response - Bash\nDESCRIPTION: Displays an example JSON-formatted API response upon successful invocation of the rendering endpoint, showing success message, bucket name, and renderId. Used to verify that authentication, endpoint, and Lambda rendering are all functioning as intended.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n{\"message\":\"SUCCESS\",\"bucketName\":\"remotionlambda-apsoutheast2-5essis84y1\",\"renderId\":\"1pwhfhh11z\"}\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Google Fonts with Dynamic Import - TypeScript\nDESCRIPTION: This snippet defines an array of Google Font families, each with a load function that lazily imports its font module using dynamic import statements. The pattern ensures each font is loaded only when necessary, optimizing performance and bundle size. It relies on the '@remotion/google-fonts' package and TypeScript generic typing, with the key parameters including the font 'family' name and its associated 'load' promise function. The output is an array suitable for font-loading utilities within Remotion. Each font configures its own loading mechanism, and all entries depend on Remotion's font modules and dynamic ES module imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/font-picker.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nload: () => import('@remotion/google-fonts/RedHatDisplay') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Roboto',\n    load: () => import('@remotion/google-fonts/Roboto') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Roboto Condensed',\n    load: () => import('@remotion/google-fonts/RobotoCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Roboto Mono',\n    load: () => import('@remotion/google-fonts/RobotoMono') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Roboto Slab',\n    load: () => import('@remotion/google-fonts/RobotoSlab') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Rubik',\n    load: () => import('@remotion/google-fonts/Rubik') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Shadows Into Light',\n    load: () => import('@remotion/google-fonts/ShadowsIntoLight') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Signika Negative',\n    load: () => import('@remotion/google-fonts/SignikaNegative') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Slabo 27px',\n    load: () => import('@remotion/google-fonts/Slabo27px') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Source Code Pro',\n    load: () => import('@remotion/google-fonts/SourceCodePro') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Source Sans 3',\n    load: () => import('@remotion/google-fonts/SourceSans3') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Space Grotesk',\n    load: () => import('@remotion/google-fonts/SpaceGrotesk') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Teko',\n    load: () => import('@remotion/google-fonts/Teko') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Titillium Web',\n    load: () => import('@remotion/google-fonts/TitilliumWeb') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Ubuntu',\n    load: () => import('@remotion/google-fonts/Ubuntu') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Varela Round',\n    load: () => import('@remotion/google-fonts/VarelaRound') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Work Sans',\n    load: () => import('@remotion/google-fonts/WorkSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Zilla Slab',\n    load: () => import('@remotion/google-fonts/ZillaSlab') as Promise<GoogleFont>,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Disabling Chromium Headless Mode via Remotion Config using TypeScript\nDESCRIPTION: This snippet illustrates how to run Chromium in non-headless mode (showing the browser window) by setting the `headlessMode` option to `false` in the Remotion configuration file using `Config.setChromiumHeadlessMode()`. This option cannot be set for Lambda renders. Requires importing `Config` from `@remotion/cli/config`. Prior to v3.3.39, the method was `Config.Puppeteer.setChromiumHeadlessMode()`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/chromium-flags.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\n// ---cut---\n\nConfig.setChromiumHeadlessMode(false);\n```\n\n----------------------------------------\n\nTITLE: Converting Video to Audio with Remotion FFmpeg (Bash)\nDESCRIPTION: Demonstrates how to use Remotion's built-in FFmpeg binary, invoked via npx, to convert a video file (input.mp4) into an audio file (output.mp3). This command wraps the FFmpeg functionality inside the Remotion CLI, removing the need for a separate FFmpeg installation. The operation supports a limited set of codecs (H.264, H.265, VP8, VP9, ProRes), and the input/output formats must conform to these. Inputs include the video filename, specified with -i, and the desired output audio file. Outputs a standalone MP3 audio file derived from the provided video.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/ffmpeg.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion ffmpeg -i input.mp4 output.mp3\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Video using npx\nDESCRIPTION: Uses npx to execute the Remotion Command Line Interface (CLI) `render` command without needing a global installation. This command processes the defined Remotion composition and generates the final video output file according to the project's configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-javascript/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Setting Remotion Environment Variable via CLI using Bash\nDESCRIPTION: Demonstrates how to pass an environment variable to a Remotion process (e.g., the development server) using the command line. The variable must be prefixed with `REMOTION_` for security and can be accessed within the Remotion project using `process.env.REMOTION_MY_VAR`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/env-variables.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nREMOTION_MY_VAR=hello_world npm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion as Peer and Dev Dependencies in a Library package.json - JSON\nDESCRIPTION: This snippet provides an example package.json configuration for a Remotion-based library, recommending the use of both 'peerDependencies' and 'devDependencies' for Remotion. Listing Remotion as a peerDependency avoids duplicate Remotion installs when this library is included elsewhere, while devDependency allows for local development and building. The entry includes necessary fields: 'name', 'peerDependencies', and 'devDependencies' with suggested version specifiers.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/version-mismatch.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"name\\\": \\\"my-remotion-library\\\",\\n  \\\"peerDependencies\\\": {\\n    \\\"remotion\\\": \\\"*\\\"\\n  },\\n  \\\"devDependencies\\\": {\\n    \\\"remotion\\\": \\\"^2.6.11\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Path Aliases in tsconfig.json\nDESCRIPTION: This JSON snippet shows how to configure the `paths` option within `compilerOptions` in a `tsconfig.json` file to define aliases for module paths. Specifically, it maps `lib/*` to the relative path `./src/lib/*`, allowing imports like `import x from 'lib/one';`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/ts-aliases.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"paths\": {\n      \"lib/*\": [\"./src/lib/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/animation-utils via npm (Bash)\nDESCRIPTION: This snippet shows how to install the @remotion/animation-utils package using npm, the default Node.js package manager. The command downloads and adds the library as a dependency in the project's package.json file. Ensure that Node.js and npm are installed before running this command; the output will include the installed package ready for use in your project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/animation-utils\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Remotion Composition - React (TSX)\nDESCRIPTION: Defines a React functional component 'MyComp' that renders a 'Hello {text}!' message, used as a Remotion composition. Requires React and proper typing for props. Input is an object with a 'text' string; output is a rendered div element. Useful as a minimal template for new video compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const MyComp: React.FC<{text: string}> = ({text}) => {\n  return <div>Hello {text}!<\\/div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Lottie Animation Load Events in TSX\nDESCRIPTION: This TSX code demonstrates how to use the `onAnimationLoaded` prop of the `<Lottie>` component. It defines a React component `Comp` that passes a memoized callback function to `onAnimationLoaded`. This callback receives the Lottie `AnimationItem` instance once the animation is initialized, allowing access to the underlying Lottie API, such as logging the renderer type. It also shows how to type the `animationData` object using `LottieAnimationData` from `@remotion/lottie`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/lottie-comp.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { LottieAnimationData } from \"@remotion/lottie\";\n\nconst animationData: LottieAnimationData = {\n  fr: 0,\n  w: 0,\n  h: 0,\n  op: 0,\n};\n\n// ---cut---\n\nimport { Lottie } from \"@remotion/lottie\";\nimport { AnimationItem } from \"lottie-web\";\nimport { useCallback } from \"react\";\n\nconst Comp: React.FC = () => {\n  const onAnimationLoaded = useCallback((item: AnimationItem) => {\n    console.log(item.renderer);\n  }, []);\n\n  return (\n    <Lottie\n      animationData={animationData}\n      onAnimationLoaded={onAnimationLoaded}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Refactoring Remotion Component to Accept Video Source as Prop in TypeScript\nDESCRIPTION: Modifies the `MyComp` component to accept the video source (`src`) as a React prop defined in `MyCompProps`. This change makes the video source configurable and is a prerequisite for calculating metadata based on the specific video.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/align-duration.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {OffthreadVideo, staticFile} from 'remotion';\n\ntype MyCompProps = {\n  src: string;\n};\n\nexport const MyComp: React.FC<MyCompProps> = ({src}) => {\n  return <OffthreadVideo src={src} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering and Dynamically Loading Google Fonts with Dynamic Import - TypeScript\nDESCRIPTION: Each snippet defines an entry associating a Google Font 'family' name with a 'load' function. The 'load' function uses the dynamic import() syntax in TypeScript to asynchronously load the corresponding '@remotion/google-fonts/<FontName>' package. The function returns a Promise resolving to a GoogleFont object. This approach requires the Remotion Google Fonts packages as dependencies and supports on-demand font loading in a Remotion project. The expected input is a font definition object, and output is a Promise of the GoogleFont module for the specified family.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/font-picker.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Overpass',\n  load: () => import('@remotion/google-fonts/Overpass') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Oxygen',\n  load: () => import('@remotion/google-fonts/Oxygen') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'PT Sans',\n  load: () => import('@remotion/google-fonts/PTSans') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'PT Sans Caption',\n  load: () => import('@remotion/google-fonts/PTSansCaption') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'PT Sans Narrow',\n  load: () => import('@remotion/google-fonts/PTSansNarrow') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'PT Serif',\n  load: () => import('@remotion/google-fonts/PTSerif') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Pacifico',\n  load: () => import('@remotion/google-fonts/Pacifico') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Passion One',\n  load: () => import('@remotion/google-fonts/PassionOne') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Pathway Gothic One',\n  load: () => import('@remotion/google-fonts/PathwayGothicOne') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Patua One',\n  load: () => import('@remotion/google-fonts/PatuaOne') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Paytone One',\n  load: () => import('@remotion/google-fonts/PaytoneOne') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Permanent Marker',\n  load: () => import('@remotion/google-fonts/PermanentMarker') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Philosopher',\n  load: () => import('@remotion/google-fonts/Philosopher') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Play',\n  load: () => import('@remotion/google-fonts/Play') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Playfair Display',\n  load: () => import('@remotion/google-fonts/PlayfairDisplay') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Plus Jakarta Sans',\n  load: () => import('@remotion/google-fonts/PlusJakartaSans') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Poppins',\n  load: () => import('@remotion/google-fonts/Poppins') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Prata',\n  load: () => import('@remotion/google-fonts/Prata') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Prompt',\n  load: () => import('@remotion/google-fonts/Prompt') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Public Sans',\n  load: () => import('@remotion/google-fonts/PublicSans') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Quattrocento',\n  load: () => import('@remotion/google-fonts/Quattrocento') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Quattrocento Sans',\n  load: () => import('@remotion/google-fonts/QuattrocentoSans') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Questrial',\n  load: () => import('@remotion/google-fonts/Questrial') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Quicksand',\n  load: () => import('@remotion/google-fonts/Quicksand') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Rajdhani',\n  load: () => import('@remotion/google-fonts/Rajdhani') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Raleway',\n  load: () => import('@remotion/google-fonts/Raleway') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Readex Pro',\n  load: () => import('@remotion/google-fonts/ReadexPro') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Red Hat Display',\n  load: () => import('@remotion/google-fonts/RedHatDisplay') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Righteous',\n  load: () => import('@remotion/google-fonts/Righteous') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Roboto',\n  load: () => import('@remotion/google-fonts/Roboto') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Roboto Condensed',\n  load: () => import('@remotion/google-fonts/RobotoCondensed') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Roboto Flex',\n  load: () => import('@remotion/google-fonts/RobotoFlex') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Roboto Mono',\n  load: () => import('@remotion/google-fonts/RobotoMono') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Roboto Serif',\n  load: () => import('@remotion/google-fonts/RobotoSerif') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Roboto Slab',\n  load: () => import('@remotion/google-fonts/RobotoSlab') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Rokkitt',\n  load: () => import('@remotion/google-fonts/Rokkitt') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Rowdies',\n  load: () => import('@remotion/google-fonts/Rowdies') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Rubik',\n  load: () => import('@remotion/google-fonts/Rubik') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Rubik Bubbles',\n  load: () => import('@remotion/google-fonts/RubikBubbles') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Rubik Mono One',\n  load: () => import('@remotion/google-fonts/RubikMonoOne') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Russo One',\n  load: () => import('@remotion/google-fonts/RussoOne') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Sacramento',\n  load: () => import('@remotion/google-fonts/Sacramento') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Saira',\n  load: () => import('@remotion/google-fonts/Saira') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Saira Condensed',\n  load: () => import('@remotion/google-fonts/SairaCondensed') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Sarabun',\n  load: () => import('@remotion/google-fonts/Sarabun') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Satisfy',\n  load: () => import('@remotion/google-fonts/Satisfy') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Sawarabi Gothic',\n  load: () => import('@remotion/google-fonts/SawarabiGothic') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Sawarabi Mincho',\n  load: () => import('@remotion/google-fonts/SawarabiMincho') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Sen',\n  load: () => import('@remotion/google-fonts/Sen') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Shadows Into Light',\n  load: () => import('@remotion/google-fonts/ShadowsIntoLight') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Signika',\n  load: () => import('@remotion/google-fonts/Signika') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Signika Negative',\n  load: () => import('@remotion/google-fonts/SignikaNegative') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Silkscreen',\n  load: () => import('@remotion/google-fonts/Silkscreen') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Six Caps',\n  load: () => import('@remotion/google-fonts/SixCaps') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Slabo 27px',\n  load: () => import('@remotion/google-fonts/Slabo27px') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Sora',\n  load: () => import('@remotion/google-fonts/Sora') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Source Code Pro',\n  load: () => import('@remotion/google-fonts/SourceCodePro') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Source Sans 3',\n  load: () => import('@remotion/google-fonts/SourceSans3') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Source Serif 4',\n  load: () => import('@remotion/google-fonts/SourceSerif4') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Space Grotesk',\n  load: () => import('@remotion/google-fonts/SpaceGrotesk') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Space Mono',\n  load: () => import('@remotion/google-fonts/SpaceMono') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Special Elite',\n  load: () => import('@remotion/google-fonts/SpecialElite') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Spectral',\n  load: () => import('@remotion/google-fonts/Spectral') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Tajawal',\n  load: () => import('@remotion/google-fonts/Tajawal') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Tangerine',\n  load: () => import('@remotion/google-fonts/Tangerine') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Teko',\n  load: () => import('@remotion/google-fonts/Teko') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Tinos',\n  load: () => import('@remotion/google-fonts/Tinos') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Titan One',\n  load: () => import('@remotion/google-fonts/TitanOne') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Titillium Web',\n  load: () => import('@remotion/google-fonts/TitilliumWeb') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Ubuntu',\n  load: () => import('@remotion/google-fonts/Ubuntu') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Ubuntu Condensed',\n  load: () => import('@remotion/google-fonts/UbuntuCondensed') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Ubuntu Mono',\n  load: () => import('@remotion/google-fonts/UbuntuMono') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Unbounded',\n  load: () => import('@remotion/google-fonts/Unbounded') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Unna',\n  load: () => import('@remotion/google-fonts/Unna') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Urbanist',\n  load: () => import('@remotion/google-fonts/Urbanist') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Varela Round',\n  load: () => import('@remotion/google-fonts/VarelaRound') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Vollkorn',\n  load: () => import('@remotion/google-fonts/Vollkorn') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Work Sans',\n  load: () => import('@remotion/google-fonts/WorkSans') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Yanone Kaffeesatz',\n  load: () => import('@remotion/google-fonts/YanoneKaffeesatz') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Yantramanav',\n  load: () => import('@remotion/google-fonts/Yantramanav') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Yellowtail',\n  load: () => import('@remotion/google-fonts/Yellowtail') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Yeseva One',\n  load: () => import('@remotion/google-fonts/YesevaOne') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Zen Kaku Gothic New',\n  load: () => import('@remotion/google-fonts/ZenKakuGothicNew') as Promise<GoogleFont>\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  family: 'Zeyada',\n  load: () => import('@remotion/google-fonts/Zeyada') as Promise<GoogleFont>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Output Scale in Remotion Config File - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the output scaling factor in Remotion via the config file using the TypeScript API. It imports the Config object from the '@remotion/cli/config' package and uses the setScale function to set a scaling factor (in this case, 2x). This configuration affects all subsequent renders that use this config file, adjusting the width and height of output videos or stills accordingly. Ensure that the '@remotion/cli/config' dependency is available in your project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/scaling.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\n// ---cut---\nConfig.setScale(2);\n```\n\n----------------------------------------\n\nTITLE: Starting Development Preview Server - Console\nDESCRIPTION: This command launches the preview (development) server for the Remotion and React Three Fiber project, usually running on localhost. It requires prior installation of dependencies and expects a valid npm script named \"dev\" in package.json. Successful execution allows previewing and developing the project interactively in a local browser.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-three/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Serverless Project in Bash\nDESCRIPTION: Executes the Serverless Framework command to initialize the project setup within the 'serverless-app' directory. This command prepares the project configuration for deployment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n serverless\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion using pnpm (Bash)\nDESCRIPTION: Executes the Remotion upgrade command using pnpm's `exec` subcommand. This automates updating Remotion packages. Requires the `@remotion/cli` package to be installed in the project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/upgrading.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Using Loaded Local Font in React Component (TypeScript)\nDESCRIPTION: Applies a user-loaded local font by referencing the font family within inline styles in a React component. Assumes prior successful loading of the font (via Remotion utility or manual loading) and that the font is accessible to the browser. Focuses solely on style application rather than on font asset management.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/fonts.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst fontFamily = \"Inter\";\n\n// ---cut---\n\n<div style={{ fontFamily: fontFamily }}>Some text</div>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Sliding Waveform Effect with visualizeAudioWaveform() (TSX)\nDESCRIPTION: Shows how to create a sliding or moving effect for the audio waveform by increasing the `windowInSeconds` parameter (e.g., `10 / fps`) in the `visualizeAudioWaveform` function call. This broadens the time window analyzed, making the waveform appear to shift over time. Depends on `@remotion/media-utils`, `remotion`, and `react`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-utils/visualize-audio-waveform.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createSmoothSvgPath, useAudioData, visualizeAudioWaveform, AudioData} from '@remotion/media-utils';\nimport React from 'react';\nimport {AbsoluteFill, Audio, useCurrentFrame, useVideoConfig, staticFile} from 'remotion';\n\nconst frame = useCurrentFrame();\nconst audioDataVoice = useAudioData(staticFile('podcast.wav')) as AudioData;\nconst {fps} = useVideoConfig();\n\n// ---cut---\nconst waveform = visualizeAudioWaveform({\n  fps,\n  frame,\n  audioData: audioDataVoice,\n  numberOfSamples: 32,\n  windowInSeconds: 10 / fps,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies - Bash\nDESCRIPTION: Installs Node.js project dependencies using npm, pnpm, or yarn. Required before building or deploying the AWS Lambda stack. Each command should be executed from the project root directory, depending on your preferred package manager. No additional parameters are needed; these will populate the node_modules folder for local and deployment use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Bundle and Lambda to AWS - Bash\nDESCRIPTION: Executes a Node.js script (deploy.mjs) to bundle and deploy the Remotion Lambda function and associated assets to AWS. Requires valid AWS credentials and correct .env and config.mjs settings. Used after modifying video templates or configuration, or when upgrading Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app-tailwind/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode deploy.mjs\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for TailwindCSS v4 in Remotion\nDESCRIPTION: TypeScript code for the `remotion.config.ts` file. It imports `Config` from `@remotion/cli/config` and `enableTailwind` from `@remotion/tailwind-v4`, then uses `Config.overrideWebpackConfig` to apply the Tailwind v4 Webpack configuration modifications.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport {enableTailwind} from '@remotion/tailwind-v4';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableTailwind(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Bundle and Lambda Function (Shell/Node.js)\nDESCRIPTION: Executes the `deploy.mjs` script using Node.js. This script is responsible for bundling the Remotion project and deploying the necessary resources (like the video rendering function and static assets) to AWS Lambda. It should be run after code changes, configuration updates, or Remotion upgrades.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnode deploy.mjs\n```\n\n----------------------------------------\n\nTITLE: Using the Remotion Cloud Run Still Command Syntax (Shell)\nDESCRIPTION: Defines the basic structure for invoking the `npx remotion cloudrun still` command. It requires a `<serve-url>` obtained from deploying a Remotion site and optionally accepts a `<still-id>` (composition ID) and an `<output-location>`. If the still ID is omitted, a list of compositions is fetched for selection. If the output location is omitted, the image is stored in the Cloud Storage bucket; otherwise, it's downloaded locally.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/still.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun still <serve-url> [<still-id>] [<output-location>]\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying an Image Asset with Remotion Img (TypeScript)\nDESCRIPTION: Shows how to use Remotion's Img tag to display an image asset. Uses staticFile() to construct the asset path for logo.png and passes it as the src for <Img />. Requires the remotion package and logo.png to be present in the public/ directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Img, staticFile } from \\\"remotion\\\";\\n\\nexport const MyComp: React.FC = () => {\\n  return <Img src={staticFile(\\\"logo.png\\\")} />;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of staticFile() with Filename (TypeScript)\nDESCRIPTION: Shows the correct way to use Remotion's `staticFile()` function. Pass only the name of the file (e.g., `image.png`) that resides directly within the project's `public/` folder. Remotion resolves the full path automatically.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/static-file-relative-paths.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"✅ Filename\"\nimport { staticFile } from \"remotion\";\nstaticFile(\"image.png\");\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering and Storing Video on Cloudflare R2 with Remotion Lambda (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to invoke Remotion Lambda's renderMediaOnLambda to produce a video and store its output in a Cloudflare R2 bucket using the S3-compatible interface. It requires @remotion/lambda/client as a dependency, plus Cloudflare R2 access and secret keys (recommended to be provided as environment variables). Key parameters are the remote serveUrl, Lambda function specs, composition name, output bucket/key, and s3OutputProvider fields (endpoint, accessKeyId, secretAccessKey). Inputs must be customized for project-specific Cloudflare credentials; secret keys should not be hardcoded. The output object contains useful information like bucketName, renderId, and CloudWatch logs. Replace placeholder FIXME comments with your own credentials for a functional deployment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/r2.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {renderMediaOnLambda, speculateFunctionName} from '@remotion/lambda/client';\\n\\n// ---cut---\\nconst {bucketName, renderId, cloudWatchMainLogs} = await renderMediaOnLambda({\\n  serveUrl: 'https://remotion-helloworld.vercel.app',\\n  // FIXME: Add your function specs here\\n  functionName: speculateFunctionName({\\n    diskSizeInMb: 2048,\\n    memorySizeInMb: 2048,\\n    timeoutInSeconds: 120,\\n  }),\\n  composition: 'HelloWorld',\\n  region: 'eu-central-1',\\n  codec: 'h264',\\n  outName: {\\n    // FIXME: Use the bucket name from your Cloudflare Storage settings\\n    bucketName: 'remotion-test-bucket',\\n    key: 'out.mp4',\\n    s3OutputProvider: {\\n      // FIXME: Use the endpoint from your Cloudflare Storage settings\\n      endpoint: 'https://2fe488b3b0f4deee223aef7464784c46.r2.cloudflarestorage.com',\\n      // FIXME: Use the Access Key from your Cloudflare settings\\n      accessKeyId: process.env.R2_ACCESS_KEY_ID ?? '',\\n      // FIXME: Use the Secret Access Key from your Cloudflare settings\\n      secretAccessKey: process.env.R2_SECRET_ACCESS_KEY ?? '',\\n    },\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Style, Weight, and Subset with loadFont and waitUntilDone - TypeScript & React\nDESCRIPTION: Demonstrates selective loading of a Google Font's specific style (e.g., normal), weight ('400'), and character subset ('latin'), using the loadFont() and waitUntilDone() functions from @remotion/google-fonts/Lobster. Also illustrates how to synchronize logic with font loading by using waitUntilDone()'s promise. Dependencies: Remotion, React, the targeted Google font (@remotion/google-fonts/Lobster). Inputs: style string and options object for weights, subsets, and additional config. Outputs: a React component styled in the selected font variant, and a log in the console upon font load. This pattern is ideal for performance optimization and preventing timeouts in bandwidth-constrained environments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/load-font.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AbsoluteFill} from 'remotion';\nimport {fontFamily, loadFont} from '@remotion/google-fonts/Lobster';\n\nconst {waitUntilDone} = loadFont('normal', {\n  weights: ['400'],\n  subsets: ['latin'],\n});\n\n// Optional: Act once the font has been loaded\nwaitUntilDone().then(() => {\n  console.log('Font is loaded');\n});\n\nexport const GoogleFontsExample: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: 'center',\n        alignItems: 'center',\n        // Pass the `fontFamily` you imported as a style\n        fontFamily: fontFamily,\n        fontSize: 280,\n      }}\n    >\n      <h1>Google Fonts</h1>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Transition Duration with springTiming in Remotion (TSX)\nDESCRIPTION: This TSX snippet shows how to programmatically determine the duration of a Remotion transition in frames. It uses the `springTiming` function from `@remotion/transitions` and calls its `getDurationInFrames()` method, passing the desired frames per second (`fps`) as an argument. The example assumes a framerate of 30fps and calculates the duration for a specific spring configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { springTiming } from \"@remotion/transitions\";\n\nspringTiming({ config: { damping: 200 } }).getDurationInFrames({ fps: 30 }); // 23\n\n```\n\n----------------------------------------\n\nTITLE: Playing Remote Audio URL in Remotion (TSX)\nDESCRIPTION: This snippet shows how to play an audio file hosted remotely by providing its URL directly to the `src` prop of the `<Audio/>` component. The component is placed within an `<AbsoluteFill/>` container in a Remotion composition. This allows embedding audio from external sources without needing to store the file locally.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/importing.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComp.tsx\"\nimport {AbsoluteFill, Audio} from 'remotion';\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Audio src=\"https://example.com/audio.mp3\" />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Output Scaling Factor in Remotion Config (TypeScript)\nDESCRIPTION: Sets a scaling factor for the output frames using the `Config` object in `remotion.config.ts`. For example, a factor of 1.5 scales a 1280x720 frame to 1920x1080. Vector elements are rendered with extra detail. The default scale is 1. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v2.6.7. The `--scale` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setScale(2);\n```\n\n----------------------------------------\n\nTITLE: Enabling Loop Playback in @remotion/player with React TypeScript\nDESCRIPTION: Adds the loop prop to the @remotion/player component, allowing the video to restart automatically when finished. All previous dependencies apply; must use the Player controls for manual stopping unless explicitly handled. Key difference is the loop boolean, affecting playback. Inputs: previous configuration plus loop. Outputs: continuously looping video upon playback end.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player } from \"@remotion/player\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  return (\\n    <Player\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n      controls\\n      loop\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Playing Audio Assets with Remotion Audio (TypeScript)\nDESCRIPTION: Demonstrates audio playback using Remotion's Audio component and staticFile(). The staticFile helper is used for the tune.mp3 in the public/ directory, ensuring audio is loaded and played in sync with the timeline. Requires remotion and tune.mp3 in public/.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Audio, staticFile } from \\\"remotion\\\";\\n\\nexport const MyComp: React.FC = () => {\\n  return <Audio src={staticFile(\\\"tune.mp3\\\")} />;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Hybrid Video Texture Handling for React Three Fiber - TypeScript/TSX\nDESCRIPTION: This code demonstrates conditional use of useOffthreadVideoTexture and useVideoTexture based on the rendering environment in a Remotion-Three.js integration. It defines a custom hook that chooses which texture hook to use, and renders a hidden Video element in interactive or preview environments for texture sampling. Dependencies: @remotion/three, remotion, and React. Inputs include the video file path and a React ref to a possible HTMLVideoElement. Outputs are either a THREE.Texture or null, and mesh materials are mapped accordingly. Usage handles both Remotion rendering and interactive preview use cases.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-offthread-video-texture.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport {ThreeCanvas, useOffthreadVideoTexture, useVideoTexture} from '@remotion/three';\nimport {useRef} from 'react';\nimport {getRemotionEnvironment, staticFile, useVideoConfig, Video} from 'remotion';\n\nconst videoSrc = staticFile('/vid.mp4');\n\nconst useVideoOrOffthreadVideoTexture = (videoSrc: string, videoRef: React.RefObject<HTMLVideoElement | null>) => {\n  if (getRemotionEnvironment().isRendering) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useOffthreadVideoTexture({src: videoSrc});\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useVideoTexture(videoRef);\n};\n\nconst My3DVideo = () => {\n  const {width, height} = useVideoConfig();\n\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const videoTexture = useVideoOrOffthreadVideoTexture(videoSrc, videoRef);\n\n  return (\n    <>\n      {getRemotionEnvironment().isRendering ? null : <Video ref={videoRef} src={videoSrc} style={{position: 'absolute', opacity: 0}} />}\n      <ThreeCanvas width={width} height={height}>\n        <mesh>{videoTexture ? <meshBasicMaterial map={videoTexture} /> : null}</mesh>\n      </ThreeCanvas>\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Google Font Picker Dropdown in React with Remotion - TypeScript\nDESCRIPTION: This React functional component displays all available Google Fonts in a dropdown menu, using the getAvailableFonts function from @remotion/google-fonts. When the user selects a font, it loads the font metadata and logs detailed information about available styles, weights, and scripts to the console. Dependencies include React, @remotion/google-fonts, and the component is intended for use in Remotion projects where fonts are dynamically loaded for video rendering. The main input is the user's dropdown selection, and the output is information logging and font loading; the list of fonts can be large (~1400 fonts), so performance considerations may apply.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/font-picker.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getAvailableFonts} from '@remotion/google-fonts';\\nimport React, {useCallback} from 'react';\\n\\nexport const FontPicker: React.FC = () => {\\n  const newFonts = getAvailableFonts();\\n\\n  const onChange = useCallback(\\n    async (e: React.ChangeEvent<HTMLSelectElement>) => {\\n      const fonts = newFonts[e.target.selectedIndex];\\n\\n      // Load font information\\n      const loaded = await fonts.load();\\n\\n      // Load the font itself\\n      const {fontFamily, ...otherInfo} = loaded.loadFont();\\n\\n      // Or get metadata about the font\\n      const info = loaded.getInfo();\\n      const styles = Object.keys(info.fonts);\\n      console.log('Font', info.fontFamily, ' Styles', styles);\\n      for (const style of styles) {\\n        const weightObject = info.fonts[style as keyof typeof info.fonts];\\n        const weights = Object.keys(weightObject);\\n        console.log('- Style', style, 'supports weights', weights);\\n        for (const weight of weights) {\\n          const scripts = Object.keys(weightObject[weight]);\\n          console.log('-- Weight', weight, 'supports scripts', scripts);\\n        }\\n      }\\n    },\\n    [newFonts],\\n  );\\n\\n  return (\\n    <div>\\n      <select onChange={onChange}>\\n        {newFonts.map((f) => {\\n          return (\\n            <option key={f.importName} value={f.importName}>\\n              {f.fontFamily}\\n            </option>\\n          );\\n        })}\\n      </select>\\n    </div>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda Function with Node.js API (typescript)\nDESCRIPTION: Demonstrates how to programmatically deploy a Remotion Lambda function using the `deployFunction` method from the `@remotion/lambda` package in Node.js. It allows specifying configuration like region, timeout, and memory, returning the deployed function's name upon completion. Requires the `@remotion/lambda` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {deployFunction} from '@remotion/lambda';\n\n// ---cut---\nconst {functionName} = await deployFunction({\n  region: 'us-east-1',\n  timeoutInSeconds: 120,\n  memorySizeInMb: 2048,\n  createCloudWatchLogGroup: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Development Preview - Shell\nDESCRIPTION: Runs the development preview server using Remotion by executing the npm run dev command. This allows users to view and interact with the video composition in a browser, making adjustments before rendering. Requires all dependencies to be installed beforehand. Input: None. Output: Starts a local server accessible via browser.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-stargazer/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Timing Function with Remotion (TypeScript/React)\nDESCRIPTION: This snippet defines a basic custom timing function returning a TransitionTiming object for Remotion transitions. It calculates a fixed 1-second duration based on the provided fps and implements a linear progress calculation. Requires @remotion/transitions for the TransitionTiming type. Expects an environment configured with Remotion and suitable TypeScript support.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/timings/custom.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { TransitionTiming } from \"@remotion/transitions\";\n\nconst customTiming = (): TransitionTiming => {\n  return {\n    getDurationInFrames: ({ fps }) => fps, // 1 second\n    getProgress: ({ frame, fps }) => Math.min(1, frame / fps),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Using yarn - Bash\nDESCRIPTION: Installs the Remotion core package into the project using yarn, specifying 'add' as the method. The command requires yarn to be already installed and will update the project's dependency graph to include 'remotion'. No additional setup or configuration is needed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/remotion.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn add remotion\n```\n\n----------------------------------------\n\nTITLE: Serverless Initialization Output in Bash\nDESCRIPTION: Shows the typical output after running the 'serverless' initialization command. It confirms configuration with the Serverless Dashboard and prompts the user whether to deploy immediately.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n serverless\nRunning \"serverless\" from node_modules\n\nYour service is configured with Serverless Dashboard and is ready to be deployed.\n\n? Do you want to deploy now? (Y/n)\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Remotion and Input Props in GitHub Actions - YAML\nDESCRIPTION: This YAML snippet sets up a GitHub Actions workflow that renders a Remotion video, allowing user-defined input properties for dynamic rendering. The workflow adds input fields for 'titleText' and 'titleColor', captures user input, serializes it to a JSON file, and passes it as props to the Remotion CLI during rendering. Key dependencies include the Remotion project, Node.js, and the Remotion CLI. Parameters 'titleText' and 'titleColor' control video customization. The main output is a rendered MP4 artifact, enabling flexible, parameterized video generation from a CI/CD environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ssr.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Render video\\non:\\n  workflow_dispatch:\\n    inputs:\\n      titleText:\\n        description: 'Which text should it say?'\\n        required: true\\n        default: 'Welcome to Remotion'\\n      titleColor:\\n        description: 'Which color should it be in?'\\n        required: true\\n        default: 'black'\\njobs:\\n  render:\\n    name: Render video\\n    runs-on: ubuntu-latest\\n    steps:\\n      - uses: actions/checkout@main\\n      - uses: actions/setup-node@main\\n      - run: npm i\\n      - run: echo $WORKFLOW_INPUT > input-props.json\\n        env:\\n          WORKFLOW_INPUT: ${{ toJson(github.event.inputs) }}\\n      - run: npx remotion render MyComp out/video.mp4 --props=\"./input-props.json\"\\n      - uses: actions/upload-artifact@v4\\n        with:\\n          name: out.mp4\\n          path: out/video.mp4\\n\n```\n\n----------------------------------------\n\nTITLE: Serverless Deployment Response in Bash\nDESCRIPTION: Displays the output after a successful deployment using 'serverless deploy'. It includes the stage, region, compilation status, service endpoint URLs (POST for rendering, GET for progress), deployed function names, and a link to the Serverless Dashboard.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nserverless deploy\n\nRunning \"serverless\" from node_modules\n\nDeploying api-render-video to stage dev (ap-southeast-2)\nCompiling with Typescript...\nUsing local tsconfig.json - tsconfig.json\nTypescript compiled.\n\n✔ Service deployed to stack api-render-video-dev (101s)\n\ndashboard: https://app.serverless.com/changeme/apps/aws-remotion-serverless/api-render-video/dev/ap-southeast-2\nendpoints:\n  POST - https://XXXXX.execute-api.ap-southeast-2.amazonaws.com/dev/render\n  GET - https://XXXXX.execute-api.ap-southeast-2.amazonaws.com/dev/render/{renderId}\nfunctions:\n  render: api-render-video-dev-render (44 MB)\n  render_progress: api-render-video-dev-render_progress (44 MB)\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies using npm - Bash\nDESCRIPTION: This shell command installs Remotion core, CLI, and Player modules using npm. Required to add Remotion to a React-based project for both development and player integration scenarios. No input parameters, just run in your project directory. Outputs installed dependencies in your node_modules and updates package.json. Prerequisite: Node.js and npm must be installed and initialized.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i remotion @remotion/cli @remotion/player\n```\n\n----------------------------------------\n\nTITLE: Animating with Fixed Frame Count in Remotion (TypeScript)\nDESCRIPTION: Demonstrates creating a time-based animation using a fixed frame range (30 to 60) with Remotion. The animation is bound to a static frame count so its real time duration depends on the current fps. Requires Remotion and uses useCurrentFrame and interpolate. Inputs: frame (current animation frame). Output: animationProgress number between 0 and 1, based on the frame within [30, 60]. Usage is limited by being frame-rate-dependent, causing inconsistent speed if fps changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/multiple-fps.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {interpolate, useCurrentFrame} from 'remotion';\\nconst frame = useCurrentFrame();\\n// ---cut---\\n// Animate from second 1 to second 2\\nconst animationProgress = interpolate(frame, [30, 60], [0, 1], {\\n  extrapolateLeft: 'clamp',\\n  extrapolateRight: 'clamp',\\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Audio Only with Remotion Lambda CLI - Bash\nDESCRIPTION: Shows how to render only the audio stream by specifying the '--codec=mp3' flag, resulting in an MP3 output rather than a video. This is useful for extracting or processing audio tracks from Remotion compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/render.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render --codec=mp3 testbed my-comp\n```\n\n----------------------------------------\n\nTITLE: Calculating Optimal `framesPerLambda` for Remotion Lambda in TypeScript\nDESCRIPTION: This TypeScript function, `bestFramesPerLambdaParam`, determines an optimal value for `framesPerLambda` based on the total video `frameCount`. It uses Remotion's `interpolate` function to scale concurrency between 75 and 150 for videos up to 18000 frames (10 minutes at 30fps). It enforces a minimum `framesPerLambda` of 20 and adjusts the final value to ensure frames are distributed as evenly as possible across the calculated number of Lambda functions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/concurrency.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { interpolate } from \"remotion\";\n\nconst bestFramesPerLambdaParam = (frameCount: number) => {\n  // Between 0 and 10 minutes (at 30fps), interpolate the concurrency from 75 to 150\n  const concurrency = interpolate(frameCount, [0, 18000], [75, 150], {\n    extrapolateRight: \"clamp\",\n  });\n\n  // At least have 20 as a `framesPerLambda` value\n  const framesPerLambda = Math.max(frameCount / concurrency, 20);\n\n  // Evenly distribute: For 21 frames over 2 lambda functions, distribute as 11 + 10 ==> framesPerLambda = 11\n  const lambdasNeeded = Math.ceil(frameCount / framesPerLambda);\n\n  return Math.ceil(frameCount / lambdasNeeded);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Defining an onProgress Callback Type for downloadWhisperModel() in TypeScript\nDESCRIPTION: This snippet shows the type signature for the optional `onProgress` callback function that can be passed to `downloadWhisperModel`. It imports the `OnProgress` type from `@remotion/install-whisper-cpp` and defines a function accepting `downloadedBytes` and `totalBytes` (both numbers). This allows developers to track and potentially display the download progress of the Whisper.cpp model.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/install-whisper-cpp/download-whisper-model.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {OnProgress} from '@remotion/install-whisper-cpp';\n\nconst onProgress: OnProgress = (downloadedBytes: number, totalBytes: number) => {\n  const progress = downloadedBytes / totalBytes;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Studio Directly from CLI (Remotion CLI, Bash)\nDESCRIPTION: This Bash command invokes the Remotion Studio app directly via the npx utility, bypassing project-specific npm scripts. It requires that npx is available and Remotion is installed as a dependency (locally or globally). Running this command launches the Remotion Studio server, usually on port 3000 or the next available. No input parameters are needed, and it is suitable for all Remotion setups.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preview.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion studio\n\n```\n\n----------------------------------------\n\nTITLE: Sorting and Rendering Outlines with Selection Priority – Remotion/React – TypeScript\nDESCRIPTION: Composes the SortedOutlines React component to render each Item's SelectionOutline (from the previous component), ensuring the selected item is always rendered on top in Remotion's stacking order. This uses the provided changeItem, selection, and state update callbacks to manage outlines and selection state within the editor. It depends on React, Remotion, the SelectionOutline, and the Item type definition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {Sequence} from 'remotion';\nimport {SelectionOutline} from './SelectionOutline';\nimport type {Item} from './item';\n\nconst displaySelectedItemOnTop = (\n  items: Item[],\n  selectedItem: number | null,\n): Item[] => {\n  const selectedItems = items.filter((item) => item.id === selectedItem);\n  const unselectedItems = items.filter((item) => item.id !== selectedItem);\n\n  return [...unselectedItems, ...selectedItems];\n};\n\nexport const SortedOutlines: React.FC<{\n  items: Item[];\n  selectedItem: number | null;\n  changeItem: (itemId: number, updater: (item: Item) => Item) => void;\n  setSelectedItem: React.Dispatch<React.SetStateAction<number | null>>;\n}> = ({items, selectedItem, changeItem, setSelectedItem}) => {\n  const itemsToDisplay = React.useMemo(\n    () => displaySelectedItemOnTop(items, selectedItem),\n    [items, selectedItem],\n  );\n\n  const isDragging = React.useMemo(\n    () => items.some((item) => item.isDragging),\n    [items],\n  );\n\n  return itemsToDisplay.map((item) => {\n    return (\n      <Sequence\n        key={item.id}\n        from={item.from}\n        durationInFrames={item.durationInFrames}\n        layout=\"none\"\n      >\n        <SelectionOutline\n          changeItem={changeItem}\n          item={item}\n          setSelectedItem={setSelectedItem}\n          selectedItem={selectedItem}\n          isDragging={isDragging}\n        />\n      </Sequence>\n    );\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to Directory - Bash\nDESCRIPTION: This Bash snippet navigates into the remotion-serverless directory and then further into a specified subdirectory (remotion-app or serverless-app). It relies on the standard bash cd command. The command sequence assumes the remotion-serverless directory exists after cloning and results in your shell prompt being set to the target working directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd remotion-serverless && cd remotion-app\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Remotion Files in JSON\nDESCRIPTION: Updates the ESLint configuration file (`.eslintrc` or similar). It adds `@remotion` to the `plugins` array and uses an `overrides` section to apply the `plugin:@remotion/recommended` configuration specifically to TypeScript and TSX files located within the `remotion/` directory. This ensures Remotion linting rules are active only for the relevant code files. Requires the `@remotion/eslint-plugin` package to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n```json title=\".eslintrc\"\n{\n  \"plugins\": [\"@remotion\"],\n  \"overrides\": [\n    {\n      \"files\": [\"remotion/*.{ts,tsx}\"],\n      \"extends\": [\"plugin:@remotion/recommended\"]\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Download Badges for Remotion Packages using Markdown\nDESCRIPTION: Uses Markdown image link syntax to display dynamic NPM download badges from shields.io for various Remotion packages (e.g., @remotion/animated-emoji, @remotion/cli, remotion). Each badge shows the monthly download count and links to the corresponding package's download statistics page on npmcharts.com. This provides a readily accessible visual overview of individual package popularity within the project documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/STATS.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/animated-emoji.svg?style=flat&color=black&label=@remotion/animated-emoji)](https://npmcharts.com/compare/@remotion/animated-emoji?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/animation-utils.svg?style=flat&color=black&label=@remotion/animation-utils)](https://npmcharts.com/compare/@remotion/animation-utils?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/babel-loader.svg?style=flat&color=black&label=@remotion/babel-loader)](https://npmcharts.com/compare/@remotion/babel-loader?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/bundler.svg?style=flat&color=black&label=@remotion/bundler)](https://npmcharts.com/compare/@remotion/bundler?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/captions.svg?style=flat&color=black&label=@remotion/captions)](https://npmcharts.com/compare/@remotion/captions?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/cli.svg?style=flat&color=black&label=@remotion/cli)](https://npmcharts.com/compare/@remotion/cli?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/cloudrun.svg?style=flat&color=black&label=@remotion/cloudrun)](https://npmcharts.com/compare/@remotion/cloudrun?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/compositor.svg?style=flat&color=black&label=@remotion/compositor)](https://npmcharts.com/compare/@remotion/compositor?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/compositor-darwin-arm64.svg?style=flat&color=black&label=@remotion/compositor-darwin-arm64)](https://npmcharts.com/compare/@remotion/compositor-darwin-arm64?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/compositor-darwin-x64.svg?style=flat&color=black&label=@remotion/compositor-darwin-x64)](https://npmcharts.com/compare/@remotion/compositor-darwin-x64?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/compositor-linux-arm64-gnu.svg?style=flat&color=black&label=@remotion/compositor-linux-arm64-gnu)](https://npmcharts.com/compare/@remotion/compositor-linux-arm64-gnu?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/compositor-linux-arm64-musl.svg?style=flat&color=black&label=@remotion/compositor-linux-arm64-musl)](https://npmcharts.com/compare/@remotion/compositor-linux-arm64-musl?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/compositor-linux-x64-gnu.svg?style=flat&color=black&label=@remotion/compositor-linux-x64-gnu)](https://npmcharts.com/compare/@remotion/compositor-linux-x64-gnu?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/compositor-linux-x64-musl.svg?style=flat&color=black&label=@remotion/compositor-linux-x64-musl)](https://npmcharts.com/compare/@remotion/compositor-linux-x64-musl?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/convert.svg?style=flat&color=black&label=@remotion/convert)](https://npmcharts.com/compare/@remotion/convert?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/remotion.svg?style=flat&color=black&label=remotion)](https://npmcharts.com/compare/remotion?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/create-video.svg?style=flat&color=black&label=create-video)](https://npmcharts.com/compare/create-video?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/enable-scss.svg?style=flat&color=black&label=@remotion/enable-scss)](https://npmcharts.com/compare/@remotion/enable-scss?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/eslint-config.svg?style=flat&color=black&label=@remotion/eslint-config)](https://npmcharts.com/compare/@remotion/eslint-config?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/eslint-config-flat.svg?style=flat&color=black&label=@remotion/eslint-config-flat)](https://npmcharts.com/compare/@remotion/eslint-config-flat?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/eslint-config-internal.svg?style=flat&color=black&label=@remotion/eslint-config-internal)](https://npmcharts.com/compare/@remotion/eslint-config-internal?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/eslint-plugin.svg?style=flat&color=black&label=@remotion/eslint-plugin)](https://npmcharts.com/compare/@remotion/eslint-plugin?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/fonts.svg?style=flat&color=black&label=@remotion/fonts)](https://npmcharts.com/compare/@remotion/fonts?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/gif.svg?style=flat&color=black&label=@remotion/gif)](https://npmcharts.com/compare/@remotion/gif?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/google-fonts.svg?style=flat&color=black&label=@remotion/google-fonts)](https://npmcharts.com/compare/@remotion/google-fonts?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/install-whisper-cpp.svg?style=flat&color=black&label=@remotion/install-whisper-cpp)](https://npmcharts.com/compare/@remotion/install-whisper-cpp?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/lambda.svg?style=flat&color=black&label=@remotion/lambda)](https://npmcharts.com/compare/@remotion/lambda?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/layout-utils.svg?style=flat&color=black&label=@remotion/layout-utils)](https://npmcharts.com/compare/@remotion/layout-utils?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/licensing.svg?style=flat&color=black&label=@remotion/licensing)](https://npmcharts.com/compare/@remotion/licensing?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/lottie.svg?style=flat&color=black&label=@remotion/lottie)](https://npmcharts.com/compare/@remotion/lottie?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/mcp.svg?style=flat&color=black&label=@remotion/mcp)](https://npmcharts.com/compare/@remotion/mcp?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/media-parser.svg?style=flat&color=black&label=@remotion/media-parser)](https://npmcharts.com/compare/@remotion/media-parser?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/media-utils.svg?style=flat&color=black&label=@remotion/media-utils)](https://npmcharts.com/compare/@remotion/media-utils?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/motion-blur.svg?style=flat&color=black&label=@remotion/motion-blur)](https://npmcharts.com/compare/@remotion/motion-blur?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/noise.svg?style=flat&color=black&label=@remotion/noise)](https://npmcharts.com/compare/@remotion/noise?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/openai-whisper.svg?style=flat&color=black&label=@remotion/openai-whisper)](https://npmcharts.com/compare/@remotion/openai-whisper?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/paths.svg?style=flat&color=black&label=@remotion/paths)](https://npmcharts.com/compare/@remotion/paths?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/player.svg?style=flat&color=black&label=@remotion/player)](https://npmcharts.com/compare/@remotion/player?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/preload.svg?style=flat&color=black&label=@remotion/preload)](https://npmcharts.com/compare/@remotion/preload?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/renderer.svg?style=flat&color=black&label=@remotion/renderer)](https://npmcharts.com/compare/@remotion/renderer?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/rive.svg?style=flat&color=black&label=@remotion/rive)](https://npmcharts.com/compare/@remotion/rive?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/serverless.svg?style=flat&color=black&label=@remotion/serverless)](https://npmcharts.com/compare/@remotion/serverless?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/shapes.svg?style=flat&color=black&label=@remotion/shapes)](https://npmcharts.com/compare/@remotion/shapes?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/skia.svg?style=flat&color=black&label=@remotion/skia)](https://npmcharts.com/compare/@remotion/skia?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/streaming.svg?style=flat&color=black&label=@remotion/streaming)](https://npmcharts.com/compare/@remotion/streaming?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/studio.svg?style=flat&color=black&label=@remotion/studio)](https://npmcharts.com/compare/@remotion/studio?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/studio-server.svg?style=flat&color=black&label=@remotion/studio-server)](https://npmcharts.com/compare/@remotion/studio-server?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/studio-shared.svg?style=flat&color=black&label=@remotion/studio-shared)](https://npmcharts.com/compare/@remotion/studio-shared?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/svg-3d-engine.svg?style=flat&color=black&label=@remotion/svg-3d-engine)](https://npmcharts.com/compare/@remotion/svg-3d-engine?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/tailwind.svg?style=flat&color=black&label=@remotion/tailwind)](https://npmcharts.com/compare/@remotion/tailwind?minimal=true)  \n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/tailwind-v4.svg?style=flat&color=black&label=@remotion/tailwind-v4)](https://npmcharts.com/compare/@remotion/tailwind-v4?minimal=true)  \n```\n\n----------------------------------------\n\nTITLE: Handling Remotion Lambda Multiple Bucket Error\nDESCRIPTION: This error message indicates that Remotion Lambda detected multiple S3 buckets (e.g., `a`, `b`, `c`) in a specific AWS region (`us-east-1`) that match its naming convention (`remotionlambda-*`). This occurs when automatic bucket discovery finds more than one potential bucket, which is not the default supported configuration. To resolve this, either delete the extraneous buckets or explicitly specify the intended bucket using the `forceBucketName` option in API calls or the `--force-bucket-name` flag in CLI commands.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/multiple-buckets.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYou have multiple buckets [a,b,c] in your S3 region [us-east-1] starting with \"remotionlambda-\".\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Remotion Video Component in TypeScript\nDESCRIPTION: Shows a simple React functional component (`MyComp`) using Remotion's `OffthreadVideo` to render a static video file referenced via `staticFile`. This serves as the initial state before implementing dynamic duration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/align-duration.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {OffthreadVideo, staticFile} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n  return <OffthreadVideo src={staticFile('video.mp4')} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Renaming `webpackBundle` to `serveUrl` in `renderStill` (TypeScript/TSX)\nDESCRIPTION: Shows the renaming of the `webpackBundle` parameter to `serveUrl` in `renderStill`, `renderFrames`, and `getCompositions` calls for Remotion v3. This parameter specifies the location of the bundled Remotion application and now supports both local file paths and URLs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nawait renderStill({\n  output: \"/tmp/still.png\",\n  webpackBundle: \"/tmp/react-motion-graphics8zfs9d/index.html\",\n  // ...\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nawait renderStill({\n  output: \"/tmp/still.png\",\n  serveUrl: \"/tmp/react-motion-graphics8zfs9d/index.html\",\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Remotion Webpack Configuration in TypeScript\nDESCRIPTION: Demonstrates how to modify the default Webpack configuration in a Remotion project using the `overrideWebpackConfig` function from `@remotion/bundler` within the `remotion.config.ts` file. This example uses the reducer pattern, taking the current configuration as input and returning a modified version, specifically showing where to add new loader rules to the `module.rules` array. This allows for extending Remotion's build capabilities, for example, to support MDX or React Native components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-11-remotion1-1.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport {overrideWebpackConfig} from '@remotion/bundler';\n\noverrideWebpackConfig((currentConfiguration) => {\n  return {\n    ...currentConfiguration,\n    module: {\n      ...currentConfiguration.module,\n      rules: [\n        ...currentConfiguration.module.rules,\n        // Add more loaders here\n      ],\n    },\n  };\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateRenderProgress Callback for Remotion Cloud Run in TypeScript\nDESCRIPTION: This TypeScript example defines an UpdateRenderProgress callback, as expected by Remotion Cloud Run, to handle and monitor render progress updates. It imports the UpdateRenderProgress type from @remotion/cloudrun/client and implements a progress handler accepting both progress (number) and error (boolean) parameters. The function logs render progress if successful, or emits an error message upon failure. This callback can be supplied to renderMediaOnCloudrun for real-time progress tracking. Dependencies include type support from the cloudrun client package. Inputs are progress metrics; outputs are console logs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/rendermediaoncloudrun.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {UpdateRenderProgress} from '@remotion/cloudrun/client';\n\nconst updateRenderProgress: UpdateRenderProgress = (progress: number, error: boolean) => {\n  if (error) {\n    console.error('Render failed');\n  } else {\n    console.log(`Render progress: ${progress * 100}%`);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Audio Only via Remotion CLI (Filename)\nDESCRIPTION: Demonstrates using the `npx remotion render` command to export only the audio track of a specific composition (`my-comp`) by specifying an audio file extension (`.mp3`) in the output path. This method relies on the file extension to determine the desired output format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion render src/index.ts my-comp out/audio.mp3\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Project Dependencies using npm\nDESCRIPTION: Shell command using npm scripts, typically defined in a Remotion project's `package.json`. Running this command updates the Remotion packages and related dependencies to their newest versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-03-03-remotion-1-5.mdx#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run upgrade\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video using Remotion Lambda CLI - Bash\nDESCRIPTION: Demonstrates how to invoke the 'render' command via the Remotion Lambda CLI to render a video composition using a full Serve URL and a Composition ID. It requires 'npx', Remotion installed, and network access to the specified Serve URL. Parameters include: 'serve-url', 'composition-id', and optionally 'output-location'. The output is stored in the configured S3 bucket if no output location is specified. Ensure AWS credentials and necessary permissions are set up before running.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/render.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render https://remotionlambda-abcdef.s3.eu-central-1.amazonaws.com/sites/testbed/index.html my-comp\n```\n\n----------------------------------------\n\nTITLE: Rendering a Test Video via Remotion CLI (Shell)\nDESCRIPTION: Changes to the `packages/example` directory and executes the Remotion CLI's `render` command using `pnpm exec`. This renders a predefined composition within the example project to a video file. Dependency: pnpm, Remotion CLI, ffmpeg.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/example\npnpm exec remotion render\n```\n\n----------------------------------------\n\nTITLE: Resampling Audio to 16kHz Using FFmpeg (Bash)\nDESCRIPTION: This snippet shows how to use the ffmpeg command-line utility to convert an audio file to WAVE format with a 16kHz sample rate. It reads the source audio (e.g., MP4), applies a sample rate conversion using -ar 16000, and writes the result to the output file, overwriting if necessary (-y). FFmpeg must be installed and accessible in the system PATH. Inputs are the source media file and destination path; the output is a new or overwritten file in WAVE format at 16kHz.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resample-audio-16khz.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nffmpeg -i /path/to/audio.mp4 -ar 16000 /path/to/audio.wav -y\\n\n```\n\n----------------------------------------\n\nTITLE: Rendering a Colored Layer using Remotion Sequence – TypeScript/React\nDESCRIPTION: Defines a React functional component (Layer) to render a colored rectangle at a specified place and size using Remotion's Sequence for precise timing. It relies on the Item type to retrieve color, size, and position data, and outputs a styled div matching these properties, wrapped in a Remotion Sequence to control when in the animation the layer appears. Dependencies are React, Remotion, and the shared Item type definition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useMemo} from 'react';\nimport {Sequence} from 'remotion';\nimport type {Item} from './item';\n\nexport const Layer: React.FC<{\n  item: Item;\n}> = ({item}) => {\n  const style: React.CSSProperties = useMemo(() => {\n    return {\n      backgroundColor: item.color,\n      position: 'absolute',\n      left: item.left,\n      top: item.top,\n      width: item.width,\n      height: item.height,\n    };\n  }, [item.color, item.height, item.left, item.top, item.width]);\n\n  return (\n    <Sequence\n      key={item.id}\n      from={item.from}\n      durationInFrames={item.durationInFrames}\n      layout=\"none\"\n    >\n      <div style={style} />\n    </Sequence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Site Using Node.js API - JavaScript\nDESCRIPTION: The deploySite() Node.js API uploads a Remotion project to AWS S3, making it accessible for Lambda executions. This method requires necessary AWS and Remotion credentials. The key input is the project path or configuration; the output is a site deployed to S3. Prerequisites: Node.js environment and Remotion Lambda package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\ndeploySite()\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM (Shell)\nDESCRIPTION: Installs all project dependencies defined in the `pnpm-lock.yaml` file using the pnpm package manager. This command should be run in the root directory of the cloned Remotion repository after setting up pnpm. Dependency: pnpm.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Downloads Badge for @remotion/three using Markdown\nDESCRIPTION: This Markdown snippet renders an NPM download count badge for the '@remotion/three' package using img.shields.io, styled flat and black. The badge itself links to the corresponding npmcharts.com page for detailed download statistics. Requires a Markdown rendering environment like GitHub.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/STATS.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/three.svg?style=flat&color=black&label=@remotion/three)](https://npmcharts.com/compare/@remotion/three?minimal=true)\n```\n\n----------------------------------------\n\nTITLE: Sequencing by Seconds Using FPS in Remotion (TSX/React)\nDESCRIPTION: Illustrates using useVideoConfig's fps to create a Sequence that lasts exactly three seconds, regardless of project fps. Dependencies include Remotion (interpolate, useCurrentFrame, Sequence, useVideoConfig). Shows proper usage of durationInFrames={3 * fps} to specify sequence duration in a time-independent way. Inputs: fps, outputs: a React component rendering a Sequence. Limitation: requires Remotion >= 2.5 and functional React setup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/multiple-fps.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\\nimport {interpolate, useCurrentFrame, Sequence, useVideoConfig} from 'remotion';\\nconst frame = useCurrentFrame();\\nconst {fps, durationInFrames} = useVideoConfig();\\n// ---cut---\\n// Show for 3 seconds\\n<Sequence durationInFrames={3 * fps}>\\n  <div />\\n</Sequence>;\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Lambda Node.js 14.28 Runtime ARN\nDESCRIPTION: Provides the specific Amazon Resource Name (ARN) for the Node.js v14.28 runtime. This ARN is used when manually locking the runtime version in the AWS Lambda console as an alternative resolution method. The '[region]' placeholder must be replaced with the actual AWS region code (e.g., 'us-east-1').\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/feb-2023-incident.mdx#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\narn:aws:lambda:[region]::runtime:69000d3430a08938bcab71617dffcb8ea551a2cbc36c59f38c52a1ea087e461b\n```\n\n----------------------------------------\n\nTITLE: Assigning S3 PutObject Permission to Lambda Role - JSON Policy\nDESCRIPTION: This JSON IAM policy grants the Lambda execution role permission to write (PutObject) to a specific S3 bucket and all its objects. This is required if the rendered video needs to be moved or saved in a bucket different from the default. Replace {bucketname} with the actual S3 bucket name. Attach this policy as an inline policy to the Lambda execution role via the AWS Management Console. Only actions related to s3:PutObject are permitted, maintaining a least-privilege approach.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/index.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n      \\\"Action\\\": [\\\"s3:PutObject\\\"],\\n      \\\"Resource\\\": [\\\"arn:aws:s3:::{bucketname}\\\", \\\"arn:aws:s3:::{bucketname}/*\\\"],\\n      \\\"Effect\\\": \\\"Allow\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Video Rotation with Custom onVideoTrack Handler (@remotion/webcodecs, TypeScript/React)\nDESCRIPTION: This snippet shows how to use the convertMedia() function with a custom onVideoTrack handler to prevent automatic video rotation correction. It imports convertMedia and defaultOnVideoTrackHandler from @remotion/webcodecs. The onVideoTrack handler inspects the video track's rotation metadata and explicitly re-applies it, effectively negating automatic correction. Dependencies include @remotion/webcodecs and a compatible input video. Important parameters are src (video URL), container (output format), and onVideoTrack (a callback receiving track metadata). The function returns a Promise for the conversion result, with override logic applied if re-encoding is required.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/rotation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia, defaultOnVideoTrackHandler} from '@remotion/webcodecs';\\n\\nawait convertMedia({\\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\\n  container: 'webm',\\n  onVideoTrack: async (params) => {\\n    const action = await defaultOnVideoTrackHandler(params);\\n\\n    if (action.type !== 'reencode') {\\n      return action;\\n    }\\n\\n    return {\\n      ...action,\\n      rotate: params.track.rotation,\\n    };\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Downloads Badge for @remotion/transitions using Markdown\nDESCRIPTION: This Markdown snippet renders an NPM download count badge for the '@remotion/transitions' package using img.shields.io, styled flat and black. The badge itself links to the corresponding npmcharts.com page for detailed download statistics. Requires a Markdown rendering environment like GitHub.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/STATS.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/transitions.svg?style=flat&color=black&label=@remotion/transitions)](https://npmcharts.com/compare/@remotion/transitions?minimal=true)\n```\n\n----------------------------------------\n\nTITLE: Manually Creating a New Remotion Composition (TSX)\nDESCRIPTION: Demonstrates how to manually create a new video composition by duplicating an existing `<Composition>` component in `remotion/Root.tsx`. The key change is assigning a unique `id` (e.g., \"my-video\") to the new composition while potentially keeping other properties like the `component`, `schema`, `defaultProps`, and `calculateMetadata` the same as the original.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/create.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Composition\n  component={Main}\n  id=\"empty\"\n  schema={videoConf}\n  defaultProps={{\n    theme: \"light\" as const,\n    canvasLayout: \"square\" as const,\n    scenes: [],\n    scenesAndMetadata: [],\n  }}\n  calculateMetadata={calcMetadata}\n/>\n<Composition\n  component={Main}\n  id=\"my-video\"\n  schema={videoConf}\n  defaultProps={{\n    theme: \"light\" as const,\n    canvasLayout: \"square\" as const,\n    scenes: [],\n    scenesAndMetadata: [],\n  }}\n  calculateMetadata={calcMetadata}\n/>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion to Latest Version - Console\nDESCRIPTION: This command upgrades the Remotion dependency to its latest available version in the project. It uses npx to run the Remotion upgrade script and requires a working npm environment. After execution, the project will use the newest Remotion features and bug fixes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-three/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Selecting Chrome for Testing via Remotion CLI Argument\nDESCRIPTION: Command-line argument passed to various Remotion CLI commands (`render`, `benchmark`, `compositions`, `still`, `gpu`, `browser ensure`) to specify the use of \"Chrome for Testing\" instead of the default \"Chrome Headless Shell\". This mode is generally faster for GPU-bound rendering but requires more dependencies, particularly on Linux.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--chrome-mode=\"chrome-for-testing\"\n```\n\n----------------------------------------\n\nTITLE: Enabling GLSL Shader Import Support via Webpack Override (TypeScript)\nDESCRIPTION: Exports enableGlsl as a WebpackOverrideFn to enhance Webpack configuration with support for importing GLSL, VS, FS, VERT, and FRAG files using glslify, raw-loader, and glsl-shader-loader. Augments module.rules while excluding node_modules. Requires glsl-shader-loader, glslify, glslify-import-loader, and raw-loader as dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebpackOverrideFn}from '@remotion/bundler';\n\nexport const enableGlsl: WebpackOverrideFn = (currentConfiguration) => {\n  return {\n    ...currentConfiguration,\n    module: {\n      ...currentConfiguration.module,\n      rules: [\n        ...(currentConfiguration.module?.rules ? currentConfiguration.module.rules : []),\n        {\n          test: \\/\\.(glsl|vs|fs|vert|frag)$/,\n          exclude: /node_modules/,\n          use: ['glslify-import-loader', 'raw-loader', 'glslify-loader'],\n        },\n      ],\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Index React Component for Remotion Composition\nDESCRIPTION: This React functional component (`Index`) renders a Remotion `<Composition>`. It configures the composition with an ID 'schema-test', links it to the `SchemaTest` component, sets dimensions (1200x630), frame rate (30fps), duration (150 frames), applies the `schemaTestSchema` for validation, and passes default properties including a string ('def') and a Date object ('2022-01-02'). It requires React, Remotion's `Composition`, the `SchemaTest` component, and the `schemaTestSchema` object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/studio-server/src/test/snapshots/fixed.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Index: React.FC = () => {\n\treturn (\n\t\t<>\n\t\t\t<Composition\n\t\t\t\tid=\"schema-test\"\n\t\t\t\tcomponent={SchemaTest}\n\t\t\t\twidth={1200}\n\t\t\t\theight={630}\n\t\t\t\tfps={30}\n\t\t\t\tdurationInFrames={150}\n\t\t\t\tschema={schemaTestSchema}\n\t\t\t\tdefaultProps={{abc: 'def', newDate: new Date('2022-01-02')}}\n\t\t\t/>\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Fetching Image Dimensions using getImageDimensions() in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `getImageDimensions` function from `@remotion/media-utils`. It asynchronously fetches the dimensions (width and height) of an image specified by a URL and logs the results to the console. The function takes the image source string as input and returns a promise that resolves to an object containing the width and height.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-image-dimensions.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {getImageDimensions} from '@remotion/media-utils';\n\nconst {width, height} = await getImageDimensions('https://example.com/remote-image.png');\nconsole.log(width, height);\n```\n\n----------------------------------------\n\nTITLE: Selecting Chrome for Testing via Remotion Configuration File\nDESCRIPTION: Configuration setting within the `remotion.config.ts` file to globally set the Chrome mode to \"Chrome for Testing\" for CLI and Remotion Studio operations. This overrides the default \"Chrome Headless Shell\" and affects commands like `npx remotion render` and the behavior within the Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nConfig.setChromeMode('chrome-for-testing')\n```\n\n----------------------------------------\n\nTITLE: Premounting and Buffering Videos for Smooth Remotion Playback - TypeScript\nDESCRIPTION: Enhances video sequence playback by premounting video elements and handling buffering using Remotion's Series and OffthreadVideo components. Adds the 'premountFor' prop to Series.Sequence so each video is invisibly loaded for 4 seconds before playback, and sets 'pauseWhenBuffering' on OffthreadVideo to signal player buffering and prevent stuttering. Requires Remotion and useVideoConfig for dynamically determining FPS. Input: array of video objects with src and optionally null durationInFrames. Output: seamless transition between videos, with improved player preview responsiveness. Limitations: best for players aiming for ultra-smooth preview and may be unnecessary for simple renders.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/sequence.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {OffthreadVideo, Series, useVideoConfig} from 'remotion';\n\ntype VideoToEmbed = {\n  src: string;\n  durationInFrames: number | null;\n};\n\ntype Props = {\n  videos: VideoToEmbed[];\n};\n\n// ---cut---\nexport const VideosInSequence: React.FC<Props> = ({videos}) => {\n  const {fps} = useVideoConfig();\n\n  return (\n    <Series>\n      {videos.map((vid) => {\n        if (vid.durationInFrames === null) {\n          throw new Error('Could not get video duration');\n        }\n\n        return (\n          <Series.Sequence key={vid.src} premountFor={4 * fps} durationInFrames={vid.durationInFrames}>\n            <OffthreadVideo pauseWhenBuffering src={vid.src} />\n          </Series.Sequence>\n        );\n      })}\n    </Series>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Video from a Deployed URL using Remotion CLI (Bash)\nDESCRIPTION: This Bash command demonstrates how to render a video using the Remotion CLI by specifying the URL of a deployed Remotion Studio. The only dependency is having Node.js and Remotion installed (or using npx). The single parameter is the deployment URL, which points to a static or server-rendered Studio instance. Running this command will trigger Remotion to fetch, render, and encode the video using the resources specified by the URL. This approach does not require access to the source code, as all data and configuration are fetched remotely.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2024-03-05-deployable-studio.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render https://watercolor-map.vercel.app\n```\n\n----------------------------------------\n\nTITLE: Deploying a Remotion Site via Node.JS API (TypeScript)\nDESCRIPTION: Programmatically deploys the user's Remotion project code to a specified Google Cloud Storage bucket using the `@remotion/cloudrun` Node.JS library. Requires the `bucketName` (obtained via `getOrCreateBucket` or existing), the project's `entryPoint`, and optionally a `siteName` for versioning. Returns the `serveUrl` for the deployed site.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'path';\nimport {deploySite, getOrCreateBucket} from '@remotion/cloudrun';\n\nconst {bucketName} = await getOrCreateBucket({\n  region: 'us-east1',\n});\n// ---cut---\nconst {serveUrl} = await deploySite({\n  bucketName,\n  entryPoint: path.resolve(process.cwd(), 'src/index.ts'),\n  siteName: 'my-video',\n});\n```\n\n----------------------------------------\n\nTITLE: Normalizing SVG Paths with @remotion/paths in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the normalizePath function from the @remotion/paths package to convert a mixed absolute/relative SVG path string into one that uses only absolute coordinates. It imports the normalizePath utility, applies it to an SVG path containing a relative line ('l'), and logs the normalized, fully absolute path. Dependencies include the @remotion/paths package. The function expects a valid SVG path string as input and outputs a normalized string; malformed input will throw an error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/normalize-path.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { normalizePath } from \"@remotion/paths\";\n\nconst normalizedPath = normalizePath(\"M 50 50 l 100 0\");\nconsole.log(normalizedPath); // \"M 50 50 L 150 50\"\n```\n\n----------------------------------------\n\nTITLE: Querying Static Files Metadata with getStaticFiles Remotion Studio TypeScript\nDESCRIPTION: This snippet demonstrates how to use Remotion Studio's getStaticFiles function to retrieve a list of all files in the public/ folder, including each file's name, src, sizeInBytes, and lastModified metadata. The example covers best practices for referencing static assets inside media components (such as Video), and shows how to safely find specific assets and use their src paths. No configuration is required, but the code must run in Remotion Studio or during rendering (will otherwise return an empty array). The file list is limited to 10,000 files for performance; subdirectory watch support requires Node.js >= 19.1.0 on Linux.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-static-files.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { getStaticFiles, StaticFile, Video } from \"remotion\";\n\nconst files = getStaticFiles();\n/*\n[\n  {\n    \"name\": \"video.mp4\",\n    \"src\": \"/static-7n5spa/video.mp4\",\n    \"sizeInBytes\": 432944,\n    \"lastModified\": 1670170466865\n  },\n  {\n    \"name\": \"assets/data.json\",\n    \"src\": \"/static-7n5spa/assets/data.json\",\n    \"sizeInBytes\": 1311,\n    \"lastModified\": 1670170486089\n  },\n]\n*/\n\n// ❗ Don't pass the `name` directly to the `src` of a media element\nconst videoName = files[0].name;\n\n// ✅ Wrap it in staticFile() instead or use `src`\nconst videoSrc = files[0].src;\n\n// Find a file by it's name and import it\nconst data = files.find((f) => {\n  return f.name === \"video.mp4\";\n}) as StaticFile; // Use `as StaticFile` to assert the file exists\n\n// Use the `src` property to get a src to pass to a media element\n<Video src={data.src} />;\n```\n\n----------------------------------------\n\nTITLE: Bundling and Deploying Remotion Site to S3 via CLI (Shell)\nDESCRIPTION: This command utilizes the Remotion CLI specifically for Lambda functions. It bundles the Remotion project and deploys the resulting static site (bundle) to an AWS S3 bucket, preparing it for serverless rendering via AWS Lambda.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/bundle.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion lambda sites create\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies with Bun (Bash)\nDESCRIPTION: Installs Remotion core, player, CLI, Zod types, React, React DOM, and Zod as project dependencies. It also installs React type definitions as development dependencies using the Bun package manager and runtime.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun i remotion @remotion/player @remotion/cli @remotion/zod-types react react-dom zod\nbun --dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies using Yarn (Bash)\nDESCRIPTION: Installs Remotion core, player, CLI, React, ReactDOM as main dependencies, and associated TypeScript types and the Vite React plugin as development dependencies using the Yarn package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add remotion @remotion/player @remotion/cli react react-dom\nyarn add --dev @types/react @types/react-dom @vitejs/plugin-react\n```\n\n----------------------------------------\n\nTITLE: Setting Video Image Format in Remotion Config (TypeScript)\nDESCRIPTION: Configures the image format ('jpeg', 'png', or 'none') used for rendering video frames in a Remotion project via `remotion.config.ts`. 'jpeg' is the default and fastest, 'png' supports transparency, and 'none' skips image rendering for audio-only calculation. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v4.0.0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setVideoImageFormat('png');\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion ESLint Plugin using pnpm\nDESCRIPTION: Installs the `@remotion/eslint-plugin` package as a development dependency using the pnpm package manager. This allows developers to leverage Remotion-specific linting capabilities within their projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npnpm i @remotion/eslint-plugin\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion ESLint Plugin using npm\nDESCRIPTION: Installs the `@remotion/eslint-plugin` package as a development dependency using the npm package manager. This plugin helps enforce Remotion best practices and catch potential errors related to Remotion API usage during development.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm i @remotion/eslint-plugin\n```\n```\n\n----------------------------------------\n\nTITLE: Dynamically Changing Audio Volume Over Time in Remotion (TSX)\nDESCRIPTION: Illustrates how to animate the audio volume frame by frame by passing a function to the `volume` prop. This example uses the `interpolate` function from Remotion to create a fade-in effect, increasing the volume from 0 to 1 over the first 30 frames.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, interpolate, staticFile} from 'remotion';\n\nexport const MyVideo = () => {\n  return (\n    <AbsoluteFill>\n      <Audio volume={(f) => interpolate(f, [0, 30], [0, 1], {extrapolateLeft: 'clamp'})} src={staticFile('voice.mp3')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video with Remotion Lambda CLI (Bash)\nDESCRIPTION: This command initiates a video render using the Remotion Lambda service via the CLI. It requires the 'serve URL' obtained from a previous step (likely `remotion lambda serve`) and the ID of the composition to be rendered. Progress is displayed in the terminal.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render <serve-url> <composition-id>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Video Tag with Media Fragment in JSX - TypeScript\nDESCRIPTION: This snippet showcases the resulting HTML <video> tag generated by Remotion when a media fragment is applied to the video source URL. No dependencies are required for this fragment. The tag's src includes a media fragment (e.g., #t=2.0,4.0), informing browsers to only load a specified section of the media. The input is the video source with a fragment, and the output is the rendered <video> element.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-fragments.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<video src=\\\"https://example.com/bbb.mp4#t=2.0,4.0\\\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Webhook Endpoint Using Remotion in Next.js (TypeScript)\nDESCRIPTION: This snippet sets up a Lambda webhook endpoint for a Next.js app using the App Router, utilizing the appRouterWebhook function from @remotion/lambda/client. It demonstrates how to provide configuration for secret validation, testing mode, extra response headers, and three event handlers: onSuccess, onError, and onTimeout. The POST and OPTIONS endpoints are configured to use the webhook handler. Dependencies include the @remotion/lambda/client package and a Next.js server environment supporting TypeScript. The endpoint validates incoming webhook requests, triggers relevant handlers for various event outcomes, and supports development and production scenarios.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/approuterwebhook.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {appRouterWebhook} from '@remotion/lambda/client';\\n\\nexport const POST = appRouterWebhook({\\n  secret: 'mysecret',\\n  testing: true,\\n  extraHeaders: {\\n    region: 'south-asia',\\n  },\\n  onSuccess: () => console.log('Rendering Completed Successfully'),\\n  onError: () => console.log('Something went wrong while rendering'),\\n  onTimeout: () => console.log('Timeout occured while rendering'),\\n});\\n\\nexport const OPTIONS = POST;\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Function Using Node.js API - JavaScript\nDESCRIPTION: The deployFunction() Node.js API creates or updates a Lambda function for Remotion-based video rendering. This function must be called with appropriate configuration parameters (refer to documentation). Dependencies include Node.js, the Remotion Lambda package, and valid AWS credentials. Inputs are configuration options; output is a deployed Lambda function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ndeployFunction()\n```\n\n----------------------------------------\n\nTITLE: Emitting a Thumbnail as Artifact Content - Remotion Artifact.Thumbnail - TypeScript/React\nDESCRIPTION: This code demonstrates the use of the special 'Artifact.Thumbnail' symbol as the 'content' prop of the <Artifact> component. When rendered on the first frame, it emits an artifact file named 'thumbnail.jpeg' containing the image of the current frame. Requirements include Remotion v4.0.290 or later for the Thumbnail feature, the 'Artifact' component, 'useCurrentFrame' hook, and a valid rendering context. The thumbnail can only be emitted as content, and filename rules still apply.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifact.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Artifact, useCurrentFrame} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  const frame = useCurrentFrame();\\n  return <>{frame === 0 ? <Artifact content={Artifact.Thumbnail} filename=\\\"thumbnail.jpeg\\\" /> : null}</>;\\n};\n```\n\n----------------------------------------\n\nTITLE: Event Listening on @remotion/player via React Ref (TypeScript)\nDESCRIPTION: Shows how to attach and remove event listeners using the Player's ref, specifically for pause events. Uses useEffect and useRef React hooks, with PlayerRef for typing. The example logs 'paused' when the player pauses. Inputs: playerRef, event subscription. Outputs: logs events as they are triggered. Important: remember to remove listeners to prevent memory leaks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player, PlayerRef } from \"@remotion/player\";\\nimport { useEffect, useRef } from \"react\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  const playerRef = useRef<PlayerRef>(null);\\n\\n  useEffect(() => {\\n    const { current } = playerRef;\\n    if (!current) {\\n      return;\\n    }\\n\\n    const listener = () => {\\n      console.log(\"paused\");\\n    };\\n    current.addEventListener(\"pause\", listener);\\n    return () => {\\n      current.removeEventListener(\"pause\", listener);\\n    };\\n  }, []);\\n\\n  return (\\n    <Player\\n      ref={playerRef}\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Looping a <Video> Component in Remotion (TSX)\nDESCRIPTION: This example illustrates how to make a video loop indefinitely using the `loop` prop in the Remotion `<Video>` component. Adding the `loop` prop (set implicitly to true) causes the video to restart from the beginning once it reaches the end.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Video} from 'remotion';\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video loop src=\"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Controls to @remotion/player in TypeScript React\nDESCRIPTION: Extends the basic Player example to include playback controls by specifying the controls prop. Dependencies are the same as before, now with the Player showing play/pause and scrubber controls. The controls prop enables user interaction for media playback inside the Player. Inputs: same as the basic example plus the controls option. Outputs: a player UI equipped with user controls.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player } from \"@remotion/player\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  return (\\n    <Player\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n      controls\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining onStart Callback for Remotion Renderer in TypeScript\nDESCRIPTION: Defines an onStart callback function to be passed to renderFrames(), using the OnStartData type. The callback logs the beginning of the rendering process, whether parallel encoding is enabled, and what concurrency is being used. Requires the @remotion/renderer package and expects an object containing frameCount, parallelEncoding (optional if using version >= v4.0.52), and resolvedConcurrency (optional if using version >= v4.0.180). Input parameter is of type OnStartData. No output is expected, side effects are logging information to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-frames.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {OnStartData} from '@remotion/renderer';\\n\\nconst onStart = ({\\n  frameCount,\\n  parallelEncoding, // available from v4.0.52\\n  resolvedConcurrency, // available from v4.0.180\\n}: OnStartData) => {\\n  console.log(`Beginning to render ${frameCount}.`);\\n\\n  if (parallelEncoding) {\\n    console.log('Parallel encoding is enabled.');\\n  }\\n\\n  console.log(`Using concurrency: ${resolvedConcurrency}`);\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Using Remotion CLI - Bash\nDESCRIPTION: This command renders a video in AWS Lambda using the Remotion CLI. It requires a previously deployed Lambda function and site, and takes the desired composition ID as an argument. The main dependency is the presence of deployed resources and the Remotion CLI. Input is [comp-id] (composition ID); output is the initiation of the cloud rendering job.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render [comp-id]\n```\n\n----------------------------------------\n\nTITLE: Rendering Triangle Component with Remotion Shapes in TypeScript\nDESCRIPTION: This snippet demonstrates how to render an equilateral SVG triangle using the Triangle component from @remotion/shapes within a Remotion AbsoluteFill container in a TypeScript/TSX project. Required dependencies include @remotion/shapes and remotion. The Triangle is centered with customizable length, fill color, and direction via props. Inputs include triangle length, fill color, and direction; outputs are a rendered Remotion composition displaying the styled triangle. The code is structured for use inside Remotion projects and expects supporting packages and a compatible React environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/triangle.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Triangle } from \"@remotion/shapes\";\nimport { AbsoluteFill } from \"remotion\";\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Triangle length={100} fill=\"red\" direction=\"left\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Triggering Remotion Lambda Still Image Render from Python\nDESCRIPTION: This snippet demonstrates how to configure and execute a still image render via the Remotion Lambda Python SDK, using environment variables for connection details. It sets up the RemotionClient, prepares the render parameters (including composition, privacy, image format, and input properties), and calls render_still_on_lambda. The script outputs the render ID, bucket name, and URL to the resulting image file, with no need for render progress polling. Requires remotion-lambda and dotenv, as well as proper environment variables; key inputs include the composition and prop payload. Designed for simple, synchronous workflows.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/python.mdx#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom remotion_lambda import RenderStillParams, Privacy, ValidStillImageFormats\nfrom remotion_lambda import RemotionClient\nimport os\nfrom dotenv import load_dotenv\n\n\nload_dotenv()\n\n# Load env variables\nREMOTION_APP_REGION = os.getenv('REMOTION_APP_REGION')\nif not REMOTION_APP_REGION:\n    raise Exception(\"REMOTION_APP_REGION is not set\")\n\nREMOTION_APP_FUNCTION_NAME = os.getenv('REMOTION_APP_FUNCTION_NAME')\nif not REMOTION_APP_FUNCTION_NAME:\n    raise Exception(\"REMOTION_APP_FUNCTION_NAME is not set\")\n\nREMOTION_APP_SERVE_URL = os.getenv('REMOTION_APP_SERVE_URL')\nif not REMOTION_APP_SERVE_URL:\n    raise Exception(\"REMOTION_APP_SERVE_URL is not set\")\n\n# Construct client\nclient = RemotionClient(region=REMOTION_APP_REGION,\n                        serve_url=REMOTION_APP_SERVE_URL,\n                        function_name=REMOTION_APP_FUNCTION_NAME)\n\n# Set render still request\nrender_params = RenderStillParams(\n    composition=\"still-helloworld\",\n    privacy=Privacy.PUBLIC,\n    image_format=ValidStillImageFormats.JPEG,\n    input_props={\n        'message': 'Hello from props!'\n    },\n)\n\nrender_response = client.render_still_on_lambda(render_params)\nif render_response:\n    # Execute render request\n    print(\"Render ID:\", render_response.render_id)\n    print(\"Bucket name:\", render_response.bucket_name)\n    print(\"Render done! File at \", render_response.url)\n```\n\n----------------------------------------\n\nTITLE: Using Layout Component to Display Aspect Ratios (JSX)\nDESCRIPTION: This JSX snippet renders previews for 'landscape' (16:9) and 'square' (1:1) layouts using the imported `Layout` component. The components are placed within a `div` styled with flexbox for alignment and spacing. A commented-out line shows a potential 'portrait' (9:16) layout usage.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/layout.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div\n  style={{\n    display: \"flex\",\n    justifyContent: \"space-around\",\n    gap: 10,\n    alignItems: \"center\",\n    maxWidth: \"72rem\",\n  }}\n>\n  {/* <Layout type={\"portrait\"} aspectWidth={9} aspectHeight={16} /> */}\n  <Layout type={\"landscape\"} aspectWidth={16} aspectHeight={9} />\n  <Layout type={\"square\"} aspectWidth={1} aspectHeight={1} />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Declaring Example Webhook URL for Remotion Cloud Run Render Progress (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure a webhook URL declaration for receiving render progress updates from Remotion Cloud Run. It specifies the webhook endpoint (url), custom HTTP headers for authorization, optional data payload (such as a projectId), and the interval at which the webhook should be called. This object is typically provided as a parameter to the Remotion render API to instruct it where and how to POST status updates. Required fields include url and headers; optional fields include data and webhookProgressInterval. The expected input is a JSON configuration; the effect is to control progress reporting to external systems.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/rendermediaoncloudrun.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"url\": \"https://example.com/webhook\",\n  \"headers\": {\n    \"Authorization\": \"Bearer 1234567890\"\n  },\n  \"data\": {\n    \"projectId\": \"1234567890\"\n  },\n  \"webhookProgressInterval\": 0.1\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server (Next.js + React Router 7 Template)\nDESCRIPTION: For Remotion projects scaffolded with the 'Next.js + React Router 7' template, this command starts the Next.js development server. It assumes the project uses standard npm scripts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/getting-started.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm run dev\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying boto3 Version Constraint for Python\nDESCRIPTION: This line defines a version constraint for the `boto3` Python library using pip's requirements file format. It requires a version that is greater than or equal to 1.34.23 (`>=1.34.23`) and strictly less than 1.35.0 (`<1.35.0`). This ensures compatibility by pinning the dependency within a specific range.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/lambda-python/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nboto3<1.35.0,>=1.34.23\n```\n\n----------------------------------------\n\nTITLE: Defining a Remotion Composition Component in React/TypeScript\nDESCRIPTION: This React functional component (`Index`) defines and renders a Remotion `Composition`. It configures the composition with an ID (`schema-test`), target component (`SchemaTest`), dimensions (1200x630), FPS (30), duration (150 frames), a specific schema (`schemaTestSchema`), and detailed `defaultProps` including various data types like strings, numbers, colors, arrays of objects, multi-line strings, and discriminated unions for schema validation or rendering purposes. Dependencies include React, Remotion (`Composition`), the `SchemaTest` component, and the `schemaTestSchema` object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/studio-server/src/test/snapshots/problematic.txt#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Index: React.FC = () => {\n\treturn (\n\t\t<>\n\t\t\t<Composition\n\t\t\t\tid=\"schema-test\"\n\t\t\t\tcomponent={SchemaTest}\n\t\t\t\twidth={1200}\n\t\t\t\theight={630}\n\t\t\t\tfps={30}\n\t\t\t\tdurationInFrames={150}\n\t\t\t\tschema={schemaTestSchema}\n\t\t\t\tdefaultProps={{\n\t\t\t\t\ttitle: 'sdasds',\n\t\t\t\t\tdelay: 5.2,\n\t\t\t\t\tcolor: '#df822a',\n\t\t\t\t\tlist: [{name: 'first', age: 12}],\n\t\t\t\t\tdescription: 'Sample description \\nOn multiple lines',\n\t\t\t\t\tdropdown: 'a' as const,\n\t\t\t\t\tsuperSchema: [\n\t\t\t\t\t\t{type: 'a' as const, a: {a: 'hi'}},\n\t\t\t\t\t\t{type: 'b' as const, b: {b: 'hi'}},\n\t\t\t\t\t],\n\t\t\t\t}}\n\t\t\t/>\n\t\t</>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Watching for File Changes and Rebuilding with PNPM (Shell)\nDESCRIPTION: Starts a watch process using pnpm that monitors project files for changes. When a change is detected, it automatically triggers a rebuild of the affected parts of the project. Useful during development to see changes reflected quickly. Dependency: pnpm, project build toolchain.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm watch\n```\n\n----------------------------------------\n\nTITLE: Applying Babel Loader Override in Node.js API Calls (TypeScript)\nDESCRIPTION: Demonstrates how to apply the legacy Babel loader override specifically when using Remotion's Node.js APIs like `bundle()` or `deploySite()`. Since these APIs don't read `remotion.config.ts`, the Webpack override must be provided directly as an argument. The example shows importing `bundle` and `replaceLoadersWithBabel`, then passing a function to the `webpackOverride` option of `bundle` that applies the Babel loader replacement.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/legacy-babel-loader.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ./src/webpack-override.ts\nimport { WebpackOverrideFn } from \"@remotion/bundler\";\nexport const webpackOverride: WebpackOverrideFn = (c) => c;\n// @filename: remotion.config.ts\n// @target: esnext\n// ---cut---\nimport { bundle } from \"@remotion/bundler\";\nimport { replaceLoadersWithBabel } from \"@remotion/babel-loader\";\n\nawait bundle({\n  entryPoint: require.resolve(\"./src/index.ts\"),\n  webpackOverride: (config) => replaceLoadersWithBabel(config),\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Constant Rate Factor (CRF) using Remotion Config in TypeScript\nDESCRIPTION: Configures the Constant Rate Factor (CRF) for video encoding using `Config.setCrf()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets CRF to 16, affecting the balance between video quality and file size (lower values generally mean higher quality/larger files). This setting can be overridden by the `--crf` command-line flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setCrf(16);\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/cli with npm (Exact Version)\nDESCRIPTION: This Bash command installs the `@remotion/cli` package using npm. The `--save-exact` flag ensures that the specific version installed is recorded in the `package.json` file, preventing potential issues caused by minor version mismatches between different Remotion packages. Requires Node.js and npm installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cli/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/cli --save-exact\n```\n\n----------------------------------------\n\nTITLE: Calculating Transition Timing Duration in Remotion (TSX)\nDESCRIPTION: This snippet demonstrates how to calculate the duration of a Remotion transition timing in frames. It imports `springTiming` from `@remotion/transitions`, configures it (e.g., with `damping: 200`), and then calls the `getDurationInFrames()` method on the resulting timing object, passing the desired frames per second (`fps`) as an argument. The example assumes a frame rate of 30fps and shows the expected output (23 frames).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/timings/index.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Assuming a framerate of 30fps\"\nimport { springTiming } from \"@remotion/transitions\";\n\nspringTiming({ config: { damping: 200 } }).getDurationInFrames({ fps: 30 }); // 23\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Video `playbackRate` in Remotion using TSX\nDESCRIPTION: Illustrates how to control the playback speed of a video using the `playbackRate` prop on the `<Video>` component in Remotion. This snippet sets the playback rate to 4, causing the video to play at four times its normal speed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-07-09-remotion-2-2.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"LightningSpeed.tsx\"\nimport {Video} from 'remotion';\nimport myVid from './vid.mp4';\n\nexport const MyVideo = () => {\n  return <Video src={myVid} playbackRate={4} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering the `TableOfContents` Component in JSX\nDESCRIPTION: Demonstrates rendering the imported `TableOfContents` component within a JSX structure. This inserts the generated table of contents into the documentation page layout using standard JSX self-closing tag syntax.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/motion-blur.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<TableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Removing Services using Remotion CLI - Shell\nDESCRIPTION: Executes the Remotion CLI command to remove one or more Cloud Run services from a Google Cloud project. Requires the Remotion CLI and appropriate GCP credentials or setup. The command accepts one or more space-separated service names to remove; additional options like --region or --yes can be specified to select cloud region or skip confirmation prompts. Input: service name(s) as arguments; Output: interactive prompt and deletion status for each service.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/services/rm.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun services rm remotion--3-3-82--mem512mi--cpu1-0--t-800\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with iframe\nDESCRIPTION: Embeds a YouTube video using an HTML `iframe` tag. The `style` attribute is used inline (likely within a JSX/MDX context) to set the width to 100% and maintain a 16:9 aspect ratio. Standard iframe attributes like `src`, `title`, `frameborder`, and `allow` are used to configure the embedded player.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-09-seed-funding.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe style={{\n  width: '100%',\n  aspectRatio: '16 / 9'\n}} src=\"https://www.youtube.com/embed/AZinzRlATJo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Applying Scale Transform using Style Prop in TSX\nDESCRIPTION: Illustrates how to apply a scaling transformation to a `div` element using the `transform: scale()` CSS property within the `style` prop in TSX. Scaling changes the element's size (0.5 makes it half size) without affecting the layout of other elements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transforms.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {6} title=\"MyComponent.tsx\"\n<div\n  style={{\n    height: 100,\n    width: 100,\n    backgroundColor: \"red\",\n    transform: `scale(0.5)`,\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Force IPv4 Binding in Remotion Studio - Shell\nDESCRIPTION: Shows how to bind Remotion Studio's HTTP server exclusively to an IPv4 interface using the '--ipv4' flag. Recommended for network troubleshooting or environments where IPv6 availability causes issues. Requires Remotion v4.0.125 or later. The command accepts no further parameters.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/studio.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion studio --ipv4\n```\n\n----------------------------------------\n\nTITLE: Enabling Asynchronous WebAssembly in Remotion Config (TypeScript)\nDESCRIPTION: Configures Webpack for Remotion to enable asynchronous WebAssembly support. This is achieved by overriding the default Webpack configuration via `Config.overrideWebpackConfig` from `@remotion/cli/config` and setting the `experiments.asyncWebAssembly` property to `true` within the returned configuration object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\nConfig.overrideWebpackConfig((conf) => {\n  return {\n    ...conf,\n    experiments: {\n      asyncWebAssembly: true,\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Seeking Hints with Remotion Media Parser (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use Remotion's mediaParserController and parseMedia to extract seeking hints from a video file. Required dependencies include the '@remotion/media-parser' package and an environment supporting TypeScript and async/await. The example shows setting up a controller, parsing a remote M3U8 file while registering a onVideoTrack callback, and then retrieving seeking hints via controller.getSeekingHints(). The seeking hints produced are intended for later re-use to speed up future parsing operations; the hints are only available after a successful or aborted parse and are subject to internal format changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/seeking-hints.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {mediaParserController, parseMedia} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\n\nawait parseMedia({\n  controller,\n  // Adding a callback so the full file is read\n  onVideoTrack: (track) => {\n    return (sample) => {\n      console.log(sample);\n    };\n  },\n  src: 'https://stream.mux.com/QkFQYWZ0ZS53ZWJ3aWQvc3RhdGlvbl9pbnRlcm5hbC5tM3U4Lm1wNA.m3u8',\n});\n\nconst hints = await controller.getSeekingHints();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Processing Tracks Based on Decoder Availability in TSX\nDESCRIPTION: This snippet demonstrates how to conditionally process video or audio tracks based on the availability of `VideoDecoder` and `AudioDecoder` in the browser. The `onVideoTrack` and `onAudioTrack` callbacks check if the respective decoder constructors are defined. If a decoder is not available, the callback returns `null`, signaling `@remotion/media-parser` to skip processing and providing samples for that track.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @noErrors\nimport type {OnAudioTrack, OnVideoTrack} from '@remotion/media-parser';\n\nconst onVideoTrack: OnVideoTrack = ({track}) => {\n  if (typeof VideoDecoder === 'undefined') {\n    return null;\n  }\n\n  const videoDecoder = new VideoDecoder({\n    output: console.log,\n    error: console.error,\n  });\n  // ...\n};\n\nconst onAudioTrack: OnAudioTrack = ({track}) => {\n  if (typeof AudioDecoder === 'undefined') {\n    return null;\n  }\n\n  const audioDecoder = new AudioDecoder({\n    output: console.log,\n    error: console.error,\n  });\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using Installation Component with Package Argument (Markdown + JSX)\nDESCRIPTION: This snippet utilizes a custom <Installation /> JSX component in Markdown to instruct users how to install the @remotion/gif package from NPM. The pkg property passes the package name as a string. This component is part of the documentation tooling and requires the documentation framework to recognize and render custom MDX/JSX components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/gif/index.mdx#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Installation pkg=\"@remotion/gif\"/>\n```\n\n----------------------------------------\n\nTITLE: Parsing Video Metadata from a File Object Using Remotion Media Parser in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the @remotion/media-parser library to extract video metadata from a user-uploaded File object in a browser context. The code creates a File object and passes it to parseMedia with the required fields (duration, dimensions). The result provides the extracted metadata. This approach is suitable for processing uploads from file input elements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/metadata.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\n// You would get this from a `<input type=\\\"file\\\">`\\nconst file = new File([], 'video.mp4');\\n\\nconst result = await parseMedia({\\n  src: file,\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n});\\n\\nconsole.log(result.durationInSeconds); // 10\\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\n```\n\n----------------------------------------\n\nTITLE: Rendering Specific Composition with Props via CLI (Bash)\nDESCRIPTION: Shows how to use `npx remotion render` with a deployed Studio URL, specifying the `HelloWorld` composition ID and passing input props (`{\"titleText\":\"Hello World\"}`) as a JSON string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render https://remotion-helloworld.vercel.app HelloWorld --props '{\"titleText\":\"Hello World\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Video/Audio Codec in Remotion Config (TypeScript)\nDESCRIPTION: Chooses the output codec using the `Config` object in `remotion.config.ts`. Supported video codecs include `h264` (default), `h265`, `vp8`, `vp9`, `prores` (since v2.1.6). Supported audio-only codecs include `mp3`, `wav`, `aac` (since v2.0). Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v1.4.0. The `--codec` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setCodec('h265');\n```\n\n----------------------------------------\n\nTITLE: Applying the Audio Transition Wrapper in TypeScript (tsx)\nDESCRIPTION: Demonstrates how to use the previously defined `addSound` function to augment a standard Remotion transition with audio. It imports the `slide` transition and `staticFile` helper, creates a basic `slide` presentation, and then uses `addSound` to wrap this presentation, providing a path to an audio file (`whoosh.mp3`) resolved by `staticFile`. The resulting `withSound` presentation combines the visual slide effect with audio playback upon entry.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/audio-transitions.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  TransitionPresentation,\n  TransitionPresentationComponentProps,\n} from \"@remotion/transitions\";\nimport { Audio } from \"remotion\";\n\nexport function addSound<T extends Record<string, unknown>>(\n  transition: TransitionPresentation<T>,\n  src: string,\n): TransitionPresentation<T> {\n  const { component: Component, ...other } = transition;\n\n  const C = Component as React.FC<TransitionPresentationComponentProps<T>>;\n\n  const NewComponent: React.FC<TransitionPresentationComponentProps<T>> = (\n    p,\n  ) => {\n    return (\n      <>\n        {p.presentationDirection === \"entering\" ? <Audio src={src} /> : null}\n        <C {...p} />\n      </>\n    );\n  };\n\n  return {\n    component: NewComponent,\n    ...other,\n  };\n}\n\n// ---cut---\n\nimport { slide } from \"@remotion/transitions/slide\";\nimport { staticFile } from \"remotion\";\n\nconst presentation = slide();\nconst withSound = addSound(presentation, staticFile(\"whoosh.mp3\"));\n```\n\n----------------------------------------\n\nTITLE: Passing Input Props in Remotion Lambda CLI Render - Bash\nDESCRIPTION: Demonstrates passing serialized JSON input props to the selected composition during render via the '--props' flag. The flag can accept either a direct JSON string or a path to an external file, and the props are accessible within the Remotion composition using 'getInputProps()'. Special consideration is needed on Windows where inline JSON may not work. This enhances customization of renders per invocation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/render.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render --props='{\"hi\": \"there\"}' testbed my-comp\n```\n\n----------------------------------------\n\nTITLE: Deploying a Remotion Service via Node.JS API (TypeScript)\nDESCRIPTION: Programmatically deploys a Remotion rendering service to a specified GCP project and region using the `@remotion/cloudrun` Node.JS library. Requires the `@remotion/cloudrun` package. The function returns an object containing the deployed service's name.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {deployService} from '@remotion/cloudrun';\n\n// ---cut---\nconst deployResult = await deployService({\n  projectID: 'my-remotion-project',\n  region: 'us-east1',\n});\n```\n\n----------------------------------------\n\nTITLE: Using makeCircle to Generate a Circle SVG Path in TypeScript\nDESCRIPTION: This TypeScript example demonstrates importing the `makeCircle` function from `@remotion/shapes` and using it to generate SVG path data for a circle with a specified radius of 50. The resulting path string, width, height, and transform origin are destructured from the function's return value and then logged to the console, showing the expected output. It requires the `@remotion/shapes` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/make-circle.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"circle.ts\"\nimport { makeCircle } from \"@remotion/shapes\";\n\nconst { path, width, height, transformOrigin } = makeCircle({ radius: 50 });\n\nconsole.log(path); // M 0 0 m -50, 0 a 50,50 0 1,0 100,0  50,50 0 1,0 -100,0\nconsole.log(width); // 100\nconsole.log(height); // 100\nconsole.log(transformOrigin); // '50 50'\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering the Bounties Component in TSX\nDESCRIPTION: This snippet renders the previously imported `Bounties` React component. When rendered, this component executes its logic, likely fetching data and displaying a list or interface related to the available bounty issues directly on the page. Depends on the successful import and definition of the `Bounties` component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/bounty.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Bounties />\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm - Shell\nDESCRIPTION: Installs all required dependencies for the Remotion Audiogram Template using npm. Prerequisites: Node.js and npm should be installed on your system. This step should be run in the project root directory and will create a node_modules folder with all needed packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-audiogram/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n\n```\n\n----------------------------------------\n\nTITLE: Combining enableTailwind with Other Webpack Modifications in Remotion\nDESCRIPTION: This TypeScript example shows how to integrate `enableTailwind` for TailwindCSS v4 support while applying other custom Webpack changes in `remotion.config.ts`. It uses the spread operator to merge the `currentConfiguration` with custom settings before passing the result to `enableTailwind`, demonstrating a reducer-style approach for configuration updates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-v4/enable-tailwind.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport {enableTailwind} from '@remotion/tailwind-v4';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableTailwind({\n    ...currentConfiguration,\n\n    // Make other changes\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Application Dependencies with npm - Bash Commands\nDESCRIPTION: This command installs all Node.js dependencies for the application using 'npm i' (npm install). It should be executed within the project directory on the EC2 instance after code upload. Prerequisites include Node.js and NPM being installed (recommended version: v18.15.0). The package.json file must be present in the directory for dependencies to resolve.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\\n\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Skia Template with Bun (Bash)\nDESCRIPTION: This command uses the `bun create` command to initialize a new Remotion project using the official `video` template, specifically selecting the Skia variant with the `--skia` flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/skia.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nbun create video --skia\n```\n```\n\n----------------------------------------\n\nTITLE: Combining delayRender and delayPlayback in Remotion\nDESCRIPTION: This TypeScript React component demonstrates using both `delayRender` and `delayPlayback` together. `delayRender` pauses screenshot generation during rendering, while `delayPlayback` (via `useBufferState`) pauses playback in the preview player. This is useful for components loading asynchronous data. Both delays are initiated, and after 5 seconds, `delayHandle.unblock()` resumes playback, and `continueRender(handle)` allows rendering to proceed. Cleanup for `delayPlayback` is handled in the `useEffect` return function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {useBufferState, delayRender, continueRender} from 'remotion';\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n  const [handle] = React.useState(() => delayRender());\n\n  React.useEffect(() => {\n    const delayHandle = buffer.delayPlayback();\n\n    setTimeout(() => {\n      delayHandle.unblock();\n      continueRender(handle);\n    }, 5000);\n\n    return () => {\n      delayHandle.unblock();\n    };\n  }, []);\n\n  return <></>;\n};\n```\n\n----------------------------------------\n\nTITLE: Cleaning Project Build Artifacts and Caches (Shell)\nDESCRIPTION: Executes the `clean` script defined in the root `package.json` using pnpm. This script typically removes build outputs, caches, and `node_modules` directories to resolve caching issues or prepare for a fresh build. It's recommended to stop any `pnpm watch` processes before running this. Dependency: pnpm, cleaning utility (e.g., Rimraf).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\npnpm run clean\n```\n\n----------------------------------------\n\nTITLE: Importing Config in Remotion v4.0 Configuration File (TypeScript)\nDESCRIPTION: This snippet shows the updated way to import the `Config` object within a Remotion configuration file (likely `remotion.config.ts` or similar) in version 4.0. The `Config` object must now be imported directly from `@remotion/cli/config` as part of the breaking changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-alpha.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { Config } from \"@remotion/cli/config\";\n```\n```\n\n----------------------------------------\n\nTITLE: Updating React Dependencies in package.json (diff)\nDESCRIPTION: Demonstrates the recommended optional upgrade of `react` and `react-dom` dependencies to version `18.2.0` for compatibility with Remotion v3.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- \"react\": \"17.0.1\"\n- \"react-dom\": \"17.0.1\"\n+ \"react\": \"18.2.0\"\n+ \"react-dom\": \"18.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Programmatic Video Rendering with @remotion/renderer in TypeScript (v1/v2)\nDESCRIPTION: This TypeScript snippet demonstrates the legacy (v1/v2) server-side rendering process in Remotion. It uses `@remotion/bundler` to create a Webpack bundle, `@remotion/renderer` functions (`getCompositions`, `renderFrames`, `stitchFramesToVideo`) to extract composition data, render frames as JPEGs, and stitch them into an MP4 video. It requires Node.js built-in modules (`fs`, `os`, `path`) for file system operations and depends on the `@remotion/bundler` and `@remotion/renderer` packages. The example renders a specific composition ('HelloWorld') and outputs the final video to a temporary directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ssr-legacy.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { bundle } from \"@remotion/bundler\";\nimport {\n  getCompositions,\n  renderFrames,\n  stitchFramesToVideo,\n} from \"@remotion/renderer\";\nimport fs from \"fs\";\nimport os from \"os\";\nimport path from \"path\";\n\nconst start = async () => {\n  // The composition you want to render\n  const compositionId = \"HelloWorld\";\n\n  // Create a webpack bundle of the entry file.\n  const bundleLocation = await bundle(require.resolve(\"./src/index.ts\"));\n\n  // Extract all the compositions you have defined in your project\n  // from the webpack bundle.\n  const comps = await getCompositions(bundleLocation, {\n    // You can pass custom input props that you can retrieve using getInputProps()\n    // in the composition list. Use this if you want to dynamically set the duration or\n    // dimensions of the video.\n    inputProps: {\n      custom: \"data\",\n    },\n  });\n\n  // Select the composition you want to render.\n  const composition = comps.find((c) => c.id === compositionId);\n\n  // Ensure the composition exists\n  if (!composition) {\n    throw new Error(`No composition with the ID ${compositionId} found`);\n  }\n\n  // We create a temporary directory for storing the frames\n  const framesDir = await fs.promises.mkdtemp(\n    path.join(os.tmpdir(), \"remotion-\"),\n  );\n\n  // We create JPEGs for all frames\n  const { assetsInfo } = await renderFrames({\n    config: composition,\n    // Path of the webpack bundle you have created\n    bundle: bundleLocation,\n    // Get's called after bundling is finished and the\n    // actual rendering starts.\n    onStart: () => console.log(\"Rendering frames...\"),\n    onFrameUpdate: (f) => {\n      // Log a message whenever 10 frames have rendered.\n      if (f % 10 === 0) {\n        console.log(`Rendered frame ${f}`);\n      }\n    },\n    // How many CPU threads to use. `null` will use a sane default (half of the available threads)\n    // See 'CLI options' section for concurrency options.\n    parallelism: null,\n    outputDir: framesDir,\n    // React props passed to the root component of the sequence. Will be merged with the `defaultProps` of a composition.\n    inputProps: {\n      titleText: \"Hello World\",\n    },\n    // Can be either 'jpeg' or 'png'. JPEG is faster, but has no transparency.\n    imageFormat: \"jpeg\",\n  });\n\n  // Add this step if you want to make an MP4 out of the rendered frames.\n  await stitchFramesToVideo({\n    // Input directory of the frames\n    dir: framesDir,\n    // Overwrite existing video\n    force: true,\n    // Possible overwrite of video metadata,\n    // we suggest to just fill in the data from the\n    // video variable\n    fps: composition.fps,\n    height: composition.height,\n    width: composition.width,\n    // Must match the value above for the image format\n    imageFormat: \"jpeg\",\n    // Pass in the desired output path of the video. Et voilà!\n    outputLocation: path.join(framesDir, \"out.mp4\"),\n    // FFMPEG pixel format\n    pixelFormat: \"yuv420p\",\n    // Information needed to construct audio correctly.\n    assetsInfo,\n    webpackBundle: bundleLocation,\n    // Hook into the FFMPEG progress\n    onProgress: (frame) => undefined,\n  });\n};\n\nstart();\n```\n\n----------------------------------------\n\nTITLE: Rendering a Specific Frame with Remotion Lambda CLI in Shell\nDESCRIPTION: Illustrates how to render a specific frame (frame 10) of the 'my-comp' composition by using the `--frame=10` flag. This example uses the shorthand serve URL 'testbed'. The output is stored in the S3 bucket.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/still.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda still --frame=10 testbed my-comp\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Remotion Video App with Next.js and TailwindCSS - Bash\nDESCRIPTION: Creates a new Remotion-based project scaffold with Next.js and TailwindCSS using the create-video npm package. This initializes a new directory structure and configuration for a video app, eliminating manual setup and providing an initial project template.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app-tailwind/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-video@latest --next-tailwind\n\n```\n\n----------------------------------------\n\nTITLE: Legacy Chrome Headless Mode Flag (Deprecated)\nDESCRIPTION: Command-line flag for older Chrome desktop versions that activated the original headless mode, suitable for screenshotting and previously used by Remotion. This mode (`--headless=old`) is being deprecated and removed from the main Chrome browser, necessitating the switch to Chrome Headless Shell.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n--headless=old\n```\n\n----------------------------------------\n\nTITLE: Illustrating Type Error with Interface Props in Remotion v4 (TSX)\nDESCRIPTION: This snippet demonstrates code that will now produce a type error in Remotion v4. Using a TypeScript `interface` for component props is no longer allowed because props must satisfy the `Record<string, unknown>` shape, which interfaces do not inherently guarantee. The example shows defining `MyProps` with an interface and using it in a `Still` component, highlighting the incompatibility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\ninterface MyProps {\n  title: string;\n}\n\nconst Hi = (props: MyProps) => {\n  return <div>{props.title}</div>;\n};\n\n<Still component={Hi} id=\"interface-props\" defaultProps={{title: 'hi'}} height={1080} width={1080} />;\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Available Emojis with Remotion Animated Emoji API in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the getAvailableEmojis function from the @remotion/animated-emoji package and retrieve the list of all available animated emojis. The function returns an array of emoji objects, each containing properties such as name, categories, tags, durationInSeconds, and codepoint. No parameters are required, and the output is logged to the console for inspection or further use; suitable for integrating animated emoji selection into Remotion-based workflows.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animated-emoji/get-available-emoji.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getAvailableEmojis} from \"@remotion/animated-emoji\";\n\nconst emojiList = getAvailableEmojis();\n\nconsole.log(emojiList);\n```\n\n----------------------------------------\n\nTITLE: Linting a Package with ESLint using pnpm (Bash)\nDESCRIPTION: This command sequence changes the current directory to a specific package (using 'packages/renderer' as an example) and then executes the 'lint' script defined in that package's 'package.json' via pnpm. This typically runs ESLint to check the codebase for style inconsistencies and potential errors based on the project's ESLint rules.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/formatting.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd packages/renderer\npnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Installing Noto Color Emoji Font on Amazon Linux 2023 (Docker)\nDESCRIPTION: This command utilizes the yum package manager to install the 'google-noto-emoji-color-fonts' package on Amazon Linux 2023. This ensures proper emoji rendering for Remotion applications deployed on this specific Linux distribution, commonly used in cloud environments like AWS EC2 or within Docker containers based on AL2023.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/emojis.mdx#_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nyum install google-noto-emoji-color-fonts\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion Webpack for TailwindCSS v4 Support in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to modify the `remotion.config.ts` file to integrate TailwindCSS v4. It imports `Config` from `@remotion/cli/config` and `enableTailwind` from `@remotion/tailwind-v4`, then uses `Config.overrideWebpackConfig` to apply the `enableTailwind` function to the current Webpack configuration. This step is crucial for enabling Tailwind utilities within Remotion projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-v4/overview.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts twoslash title=\"remotion.config.ts\"\nimport {Config} from '@remotion/cli/config';\nimport {enableTailwind} from '@remotion/tailwind-v4';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableTailwind(currentConfiguration);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Still Image Format in Remotion Config (TypeScript)\nDESCRIPTION: Determines the image format ('png', 'jpeg', 'pdf', 'webp') for rendering still frames using the `Config` object in `remotion.config.ts`. The default format is 'png'. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v4.0.0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setStillImageFormat('pdf');\n```\n\n----------------------------------------\n\nTITLE: Using getVideoMetadata() to Fetch Video Information in TypeScript\nDESCRIPTION: Demonstrates how to use the asynchronous `getVideoMetadata` function from `@remotion/media-utils` to retrieve metadata for both local video files (resolved using `staticFile` from 'remotion') and remote video URLs. The examples illustrate awaiting the promise returned by the function and show the structure of the resolved metadata object, including `durationInSeconds`, `width`, `height`, `aspectRatio`, and `isRemote`. It requires `@remotion/media-utils` and potentially `remotion` for `staticFile`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-video-metadata.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {staticFile} from 'remotion';\n// ---cut---\nimport {getVideoMetadata} from '@remotion/media-utils';\n\nawait getVideoMetadata(staticFile('video.mp4')); /* {\n  durationInSeconds: 100.00,\n  width: 1280,\n  height: 720,\n  aspectRatio: 1.77777778,\n  isRemote: false\n} */\nawait getVideoMetadata('https://example.com/remote-audio.webm'); /* {\n  durationInSeconds: 40.213,\n  width: 1920,\n  height: 1080,\n  aspectRatio: 1.77777778,\n  isRemote: true\n} */\n```\n\n----------------------------------------\n\nTITLE: Simple onProgress Callback for renderMedia\nDESCRIPTION: Provides a basic example of an `onProgress` callback function for `renderMedia`. This function receives an object containing the overall progress (as a number between 0 and 1) and logs the percentage completion of the rendering process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-media.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RenderMediaOnProgress} from '@remotion/renderer';\n\nconst onProgress: RenderMediaOnProgress = ({progress}) => {\n  console.log(`Rendering is ${progress * 100}% complete`);\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parse Depth with parseMedia in TypeScript\nDESCRIPTION: This TypeScript example uses the `parseMedia` function from `@remotion/media-parser` to show how selecting different fields and using track handlers affects parsing depth. It demonstrates header-only parsing (requesting `size`, `container`), metadata-only parsing (requesting `durationInSeconds`, `dimensions`, and using `onVideoTrack` returning `null`), and full-file parsing (using `onVideoTrack` with a sample processing callback). The `internalStats.finalCursorOffset` is logged to show the amount of data read in each case.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/fast-and-slow.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Reading header only\"\nimport {parseMedia} from '@remotion/media-parser';\n\n// ---cut---\n// Some fields only require the first few bytes of the file to be read:\nconst result = await parseMedia({\n  src: 'https://example.com/my-video.mp4',\n  fields: {\n    size: true,\n    container: true,\n    internalStats: true,\n  },\n});\n\nconsole.log(result.internalStats.finalCursorOffset); // 12\n\n// Reading the metadata of the video will only require the metadata section to be parsed.\n// You can also use onVideoTrack() and return null to retrieve track information but to not get the samples.\nconst result2 = await parseMedia({\n  src: 'https://example.com/my-video.mp4',\n  fields: {\n    durationInSeconds: true,\n    dimensions: true,\n    internalStats: true,\n  },\n  onVideoTrack: ({track}) => {\n    console.log(track);\n    return null;\n  },\n});\n\nconsole.log(result2.internalStats.finalCursorOffset); // 4000\nconsole.log(result2.dimensions);\n\n// Asking for all video samples requires parsing the whole file\nconst result3 = await parseMedia({\n  src: 'https://example.com/my-video.mp4',\n  fields: {\n    internalStats: true,\n  },\n  onVideoTrack: () => {\n    return (videoSample) => console.log(videoSample);\n  },\n});\n\nconsole.log(result3.internalStats.finalCursorOffset); // 1870234802\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Remotion Compositions from Lambda using getCompositionsOnLambda() in TSX\nDESCRIPTION: This snippet demonstrates how to use the `getCompositionsOnLambda` function from `@remotion/lambda/client` to retrieve composition details from a specified AWS Lambda function and Remotion site deployment. It passes required parameters like the AWS region, Lambda function name, the S3 serve URL of the Remotion project, and an empty object for input props. The result, an array of composition objects, is logged to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getcompositionsonlambda.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getCompositionsOnLambda} from '@remotion/lambda/client';\n\nconst compositions = await getCompositionsOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  inputProps: {},\n});\n\nconsole.log(compositions); // See below for an example value\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for JSX in Svelte\nDESCRIPTION: Updates the TypeScript configuration file (`tsconfig.app.json` or similar) to enable JSX support necessary for Remotion's React components within a Svelte project. This is done by setting the `jsx` compiler option to `\"react\"`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    // other options\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA Container Toolkit - Bash\nDESCRIPTION: Installs the NVIDIA container toolkit using apt on a Debian/Ubuntu system. Ensures Docker containers can leverage the system's NVIDIA GPU. Prerequisites include the availability of the NVIDIA container repository and apt update execution. Outputs a system with the NVIDIA container runtime installed; requires sudo permissions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -y nvidia-container-toolkit\n```\n\n----------------------------------------\n\nTITLE: Updating Default Props Based on Saved Values in TypeScript\nDESCRIPTION: This snippet shows how to update default props by accessing the previously saved values. The `defaultProps` function receives an object containing `savedDefaultProps`. This allows merging the existing props with new values (like `{ color: 'green' }`) using the spread syntax, implementing a reducer-style update.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/save-default-props.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @target: esnext\nimport { saveDefaultProps } from \"@remotion/studio\";\n\nawait saveDefaultProps({\n  compositionId: \"my-composition\",\n  defaultProps: ({ savedDefaultProps }) => {\n    return {\n      ...savedDefaultProps,\n      color: \"green\",\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Media via Remotion Cloud Run CLI (Bash)\nDESCRIPTION: This CLI command triggers the rendering of a video (media) using Remotion Cloud Run with a specific serve URL or site name, composition ID, and target Cloud Run URL. Requires Remotion CLI and access to the deployed cloudrun service. Expects the serve URL and composition ID as arguments; outputs progress and stores video in cloud storage when done.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun render <serve-url | site-name> <composition-id> --cloud-run-url=<cloud-run-url>\n```\n\n----------------------------------------\n\nTITLE: Generating CSS translateY() Transform in Remotion (TSX)\nDESCRIPTION: Illustrates using the `translateY` function from `@remotion/animation-utils` to create a CSS `translateY()` transform string. It accepts the translation value as a number (defaulting to px), a string with a unit, or a number and an optional unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { translateY } from \"@remotion/animation-utils\";\n\nconst transform = translateY(10);\n// => \"translateY(10px)\"\n\nconst transform2 = translateY(\"12rem\");\n// => \"translateY(12rem)\"\n\nconst transform3 = translateY(10, \"px\");\n// => \"translateY(10px)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies using pnpm (Bash)\nDESCRIPTION: Installs Remotion core, player, CLI, React, ReactDOM as main dependencies, and associated TypeScript types and the Vite React plugin as development dependencies using the pnpm package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i remotion @remotion/player @remotion/cli react react-dom\npnpm i --dev @types/react @types/react-dom @vitejs/plugin-react\n```\n\n----------------------------------------\n\nTITLE: Exporting Audio Only using renderMediaOnLambda in TypeScript\nDESCRIPTION: Illustrates using the `@remotion/lambda`'s `renderMediaOnLambda` function in TypeScript to render audio only on AWS Lambda. Key parameters include `region`, `functionName`, `composition` ID, `serveUrl` (S3 URL of the bundled project), `inputProps`, setting the `codec` to an audio format (e.g., 'mp3'), and crucially setting `imageFormat` to 'none' to prevent video frame rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderMediaOnLambda} from '@remotion/lambda';\n// ---cut---\n\nconst {bucketName, renderId} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  composition: 'MyVideo',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  inputProps: {},\n  codec: 'mp3',\n  imageFormat: 'none',\n});\n```\n\n----------------------------------------\n\nTITLE: Generating SVG Rectangle with Remotion Shapes in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the makeRect function from the @remotion/shapes package to generate the path data and properties of a 100x100 SVG rectangle. The function accepts width and height parameters and returns an object containing the SVG path string, rectangle dimensions, and transform origin. The output is logged to the console for verification. Requires the @remotion/shapes package; expects objects with numeric width and height properties as inputs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/make-rect.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { makeRect } from \"@remotion/shapes\";\n\nconst { path, width, height, transformOrigin } = makeRect({\n  width: 100,\n  height: 100,\n});\n\nconsole.log(path); // M 0 0 l 100 0 l 0 100 l -100 0 Z\nconsole.log(width); // 100\nconsole.log(height); // 100\nconsole.log(transformOrigin); // '50 50'\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiline String Props with zTextarea - Remotion Studio - TypeScript\nDESCRIPTION: This snippet describes the usage of the zTextarea() type helper to define a prop in a Remotion schema which will be rendered as a multiline string input (textarea) in the Remotion Studio's UI. It requires that you are authoring a Remotion schema, and that the prop defined here will be available to React components as a string value (with \\n for new lines if entered). Regardless of the number of lines input, the resulting value provided to your component will always be a plain string. To maintain line breaks when rendering the value in the UI, it is suggested to use the CSS property white-space: pre-line.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/zod-types/z-textarea.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nzTextarea()\n```\n\n----------------------------------------\n\nTITLE: Enabling Hardware Acceleration in Remotion SSR `renderMedia` (TSX)\nDESCRIPTION: Demonstrates how to enable hardware-accelerated encoding when using the Remotion SSR API (`@remotion/renderer`). The `hardwareAcceleration` option within the `renderMedia` function is set to `'if-possible'`, instructing Remotion to use hardware acceleration if available for the specified codec (ProRes in this example) and platform.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/hardware-acceleration.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst serveUrl = '/path/to/bundle';\nconst outputLocation = '/path/to/frames';\n\nimport {renderMedia, selectComposition} from '@remotion/renderer';\n\nconst inputProps = {\n  titleText: 'Hello World',\n};\n\nconst composition = await selectComposition({\n  serveUrl,\n  id: 'my-video',\n  inputProps,\n});\n\n// ---cut---\n\nawait renderMedia({\n  composition,\n  serveUrl,\n  codec: 'prores',\n  outputLocation,\n  inputProps,\n  hardwareAcceleration: 'if-possible',\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding Static Images with Img in Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates embedding non-animated images using the `Img` component from 'remotion'. Import `Img` and use it similarly to an HTML `<img>` tag, providing the image source via the `src` prop and applying styles using the `style` prop.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\treturn <Img src=\"https://remotion.dev/logo.png\" style={{width: '100%'}} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Download Progress in Remotion (TypeScript)\nDESCRIPTION: Provides a TypeScript example for the optional `onDownload` callback function. This function is triggered when Remotion needs to download an audio or video file. It receives the source URL (`src`) and should return another function that tracks the download progress, receiving `percent`, `downloaded`, and `totalSize` as arguments. The inner function logs the progress either as a percentage or in bytes downloaded.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-media.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport {RenderMediaOnDownload} from '@remotion/renderer';\n\nconst onDownload: RenderMediaOnDownload = (src) => {\n  console.log(`Downloading ${src}...`);\n  return ({percent, downloaded, totalSize}) => {\n    // percent and totalSize can be `null` if the downloaded resource\n    // does not have a `Content-Length` header\n    if (percent === null) {\n      console.log(`${downloaded} bytes downloaded`);\n    } else {\n      console.log(`${Math.round(percent * 100)}% done)`);\n    }\n  };\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Still Image using Remotion CLI (Shell)\nDESCRIPTION: Shows the command-line interface command to render a single frame (a still image) from a Remotion composition. Use `npx remotion still` followed by the composition ID (e.g., `MyComp`). This renders the default frame or a specified frame as an image.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\n$ npx remotion still MyComp\n```\n\n----------------------------------------\n\nTITLE: Loading a single font style with loadFont - TypeScript\nDESCRIPTION: Illustrates how to load only a specific font style (e.g., 'normal') from a Google Font package to reduce bundle size and network requests. The loadFont function here takes a style string as its parameter, allowing fine-grained control over what is loaded. The example assumes the TitanOne font sub-package is available.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {loadFont} from '@remotion/google-fonts/TitanOne';\n\nloadFont('normal');\n```\n\n----------------------------------------\n\nTITLE: Clamping Animation Output using interpolate() Options in TSX\nDESCRIPTION: Demonstrates using the `extrapolateRight: 'clamp'` option with the `interpolate` function. This option prevents the output value (`scale`) from exceeding the maximum value of the specified output range (1 in this case), even when the input (`frame`) goes beyond the input range (greater than 20).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { interpolate, useCurrentFrame } from \"remotion\";\nconst frame = useCurrentFrame();\n// ---cut---\nconst scale = interpolate(frame, [0, 20], [0, 1], {\n  extrapolateRight: \"clamp\",\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Remotion Dependencies in package.json for v4.0 Alpha\nDESCRIPTION: This diff illustrates the necessary changes in a project's `package.json` file to upgrade to Remotion v4.0 Alpha. It involves replacing older `^3.x.x` versions of `remotion` and associated `@remotion/*` packages with a specific alpha version (e.g., `4.0.0-alpha13`), ensuring the `^` prefix is removed to lock the alpha version.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-alpha.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\"package.json\"\n- \"remotion\": \"^3.3.87\"\n- \"@remotion/bundler\": \"^3.3.87\"\n- \"@remotion/eslint-config\": \"^3.3.87\"\n- \"@remotion/eslint-plugin\": \"^3.3.87\"\n- \"@remotion/cli\": \"^3.3.87\"\n- \"@remotion/renderer\": \"^3.3.87\"\n+ \"remotion\": \"4.0.0-alpha13\"\n+ \"@remotion/bundler\": \"4.0.0-alpha13\"\n+ \"@remotion/eslint-config\": \"4.0.0-alpha13\"\n+ \"@remotion/eslint-plugin\": \"4.0.0-alpha13\"\n+ \"@remotion/cli\": \"4.0.0-alpha13\"\n+ \"@remotion/renderer\": \"4.0.0-alpha13\"\n```\n```\n\n----------------------------------------\n\nTITLE: Calculating Font Size with fitText() in TSX\nDESCRIPTION: Demonstrates the basic usage of the `fitText` function to calculate the required `fontSize` for a given text string, width, font family, and font weight. The calculated `fontSize` is then intended to be used in the `style` prop of a React element. It requires the `@remotion/layout-utils` package. The example also shows optional parameters like `textTransform`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/fit-text.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"FitText.tsx\"\nimport { fitText } from \"@remotion/layout-utils\";\n\nconst text = \"Hello World\";\nconst width = 100;\nconst fontFamily = \"Arial\";\nconst fontWeight = \"bold\";\n\nconst { fontSize } = fitText({\n  text,\n  withinWidth: width,\n  fontFamily: fontFamily,\n  fontWeight: fontWeight,\n  textTransform: \"uppercase\",\n});\n\n// Example markup:\n<div\n  style={{\n    fontSize,\n    width,\n    fontFamily,\n    fontWeight,\n    textTransform: \"uppercase\",\n  }}\n>\n  {text}\n</div>;\n```\n```\n\n----------------------------------------\n\nTITLE: Installing FFmpeg for Older Remotion Versions in Dockerfile\nDESCRIPTION: Adds `ffmpeg` to the list of packages installed via `apt-get`. This is required for Remotion versions lower than v4.0.0, as FFmpeg was bundled starting from v4.0.0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_14\n\nLANGUAGE: docker\nCODE:\n```\nRUN apt-get install -y nodejs ffmpeg npm chromium\n```\n\n----------------------------------------\n\nTITLE: Normalizing Webcam Audio Levels using FFmpeg and Bun in TypeScript\nDESCRIPTION: This TypeScript script, designed to be run with Bun, automates the normalization of audio levels for webcam recordings stored in a specific directory structure (`public/{id}`). It first analyzes each recording using FFmpeg's `loudnorm` filter to determine its integrated loudness (`input_i`). Then, it calculates the average loudness across all recordings and applies this average (or -20dB, whichever is higher) back to each file using FFmpeg, overwriting the originals. Requires `bun`, `ffmpeg`, and a local `config/cameras` file exporting `WEBCAM_PREFIX`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/normalizing-audio.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"normalize.ts\"\nimport { $ } from \"bun\";\nimport { renameSync } from \"fs\";\nimport { WEBCAM_PREFIX } from \"./config/cameras\";\n\ntype FfmpegVolumeOutput = {\n  input_i: string;\n  input_tp: string;\n  input_lra: string;\n  input_thresh: string;\n  output_i: string;\n  output_tp: string;\n  output_lra: string;\n  output_thresh: string;\n  normalization_type: string;\n  target_offset: string;\n};\n\n// Set your composition ID here\nconst id = \"euro\";\n\nconst files = await $`ls public/${id}`.quiet();\nconst webcamFiles = files.stdout\n  .toString(\"utf8\")\n  .split(\"\\n\")\n  .filter((f) => f.startsWith(WEBCAM_PREFIX));\n\nconst decibelValues: number[] = [];\n\nfor (const file of webcamFiles) {\n  const path = `public/${id}/${file}`;\n  const cmd =\n    await $`ffmpeg -hide_banner -i ${path} -af loudnorm=I=-23:LRA=7:print_format=json -f null -`.quiet();\n  const output = cmd.stderr.toString(\"utf8\");\n  const lines = output.split(\"\\n\");\n  const indexOfLineBeforeStart = lines.findIndex((line) =>\n    line.includes(\"[Parsed_loudnorm_0 @\"),\n  );\n  const remaining = lines.slice(indexOfLineBeforeStart + 1);\n  const indexOfOut = remaining.findIndex((i) => i.startsWith(\"[out#0\"));\n  const actual = indexOfOut === -1 ? remaining : remaining.slice(0, indexOfOut);\n  const json = JSON.parse(actual.join(\"\\n\")) as FfmpegVolumeOutput;\n  console.log(path, `${json.input_i}dB`);\n  decibelValues.push(parseFloat(json.input_i));\n}\n\nconst average = decibelValues.reduce((a, b) => a + b, 0) / decibelValues.length;\nconsole.log(\"Average\", `${average}dB`);\nconst toApply = Math.max(average, -20);\nconsole.log(\"Applying\", `${toApply}dB`);\n\nfor (const file of webcamFiles) {\n  const path = `public/${id}/${file}`;\n  const copiedPath = `public/${id}/normalized-${file}`;\n  await $`ffmpeg -hide_banner -i ${path} -af loudnorm=I=${toApply}:LRA=7:TP=-2.0 -c:v copy ${copiedPath} -y`;\n  renameSync(copiedPath, path);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running the Google Cloud Run Test Script (Shell)\nDESCRIPTION: Changes directory to `packages/example` and runs the `runcloudrun.sh` script. This script handles rebuilding code, deploying a new service to Google Cloud Run, and rendering a video. Requires GCP credentials in a `.env` file and appropriate permissions. Note: This script deletes existing Cloud Run services in the account. Dependency: Shell environment, gcloud CLI, pnpm, configured GCP credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/example\nsh ./runcloudrun.sh\n```\n\n----------------------------------------\n\nTITLE: Batch Rendering with Remotion Node.js API - TypeScript Script\nDESCRIPTION: This TypeScript Node.js script demonstrates direct usage of the Remotion API to render all project compositions to separate MP4 files in the 'out' directory. Dependencies include '@remotion/bundler', '@remotion/renderer', and Node.js's 'module' package. It uses dynamic import resolution, optional webpack overrides, and sequentially calls 'renderMedia' for each composition. Inputs: entry point file and composition list; outputs: MP4s named after each composition ID. Requires Node.js >=14.8.0 with ES modules enabled, and all dependencies installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-all.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// ---cut---\n\nimport {bundle} from '@remotion/bundler';\nimport {getCompositions, renderMedia} from '@remotion/renderer';\nimport {createRequire} from 'module';\n\nconst require = createRequire(import.meta.url);\n\nconst bundled = await bundle({\n  entryPoint: require.resolve('./src/index.ts'),\n  // If you have a Webpack override, make sure to add it here\n  webpackOverride: (config) => config,\n});\n\nconst compositions = await getCompositions(bundled);\n\nfor (const composition of compositions) {\n  console.log(`Rendering ${composition.id}...`);\n  await renderMedia({\n    codec: 'h264',\n    composition,\n    serveUrl: bundled,\n    outputLocation: `out/${composition.id}.mp4`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CLI Config File Imports for Remotion v4 - JavaScript / diff\nDESCRIPTION: This code diff instructs users to update their import statements for the Remotion Config object. Instead of importing from the core 'remotion' package, it should now be imported from '@remotion/cli/config'. This ensures correct configuration usage with version 4.0 and prevents runtime errors caused by deprecated paths.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import {Config} from 'remotion';\n+ import {Config} from '@remotion/cli/config';\n```\n\n----------------------------------------\n\nTITLE: Aborting (Cancelling) an Ongoing WebCodecs Conversion in TypeScript\nDESCRIPTION: This snippet illustrates how to abort a running media conversion task using the webcodecsController and convertMedia from @remotion/webcodecs. It initiates a conversion and triggers the controller's abort() method after 10 seconds, effectively cancelling the operation. Success or error is logged to the console, with dependencies on @remotion/webcodecs. The 'src' parameter sets the source media URL, and 'container' specifies the desired output format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/pause-resume-abort.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {webcodecsController, convertMedia} from '@remotion/webcodecs';\n\nconst controller = webcodecsController();\n\nconvertMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  container: 'webm',\n  controller,\n})\n  .then(() => {\n    console.log('Finished parsing');\n  })\n  .catch((err) => {\n    console.error('Error parsing', err);\n  });\n\n// Cancel after 10 seconds\nawait new Promise((resolve) => setTimeout(resolve, 10_000));\ncontroller.abort();\n```\n\n----------------------------------------\n\nTITLE: Upgrading Image Format API Usage (setImageFormat \\u2192 setVideoImageFormat) - JavaScript / diff\nDESCRIPTION: This migration snippet illustrates how to switch from the deprecated Config.setImageFormat method to the new, more explicit Config.setVideoImageFormat method. This is necessary because in Remotion v4, image formats for stills and videos are now set separately. This change ensures correct image format handling for video exports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- Config.setImageFormat('jpeg');\n+ Config.setVideoImageFormat('jpeg');\n```\n\n----------------------------------------\n\nTITLE: Handling Remotion Lambda Webhooks with Next.js Pages Router - TypeScript/TSX\nDESCRIPTION: Shows endpoint implementation using Next.js Pages Router and the pagesRouterWebhook() helper. Requires @remotion/lambda/client, with configuration for webhook secret, test mode, and outcome hooks for success, timeout, and error. The handler is exported as default, to be used in 'pages/api/webhook.ts'. Available from Remotion v4.0.246.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst ENABLE_TESTING = false;\\n\\n// ---cut---\\n\\nimport {pagesRouterWebhook} from '@remotion/lambda/client';\\n\\nconst handler = pagesRouterWebhook({\\n  secret: 'mysecret',\\n  // Enable testing through the tool below\\n  testing: ENABLE_TESTING,\\n  onSuccess: ({renderId}) => console.log('Finished render', renderId),\\n  onTimeout: ({renderId}) => console.log('Time out', renderId),\\n  onError: ({renderId}) => console.log('Error', renderId),\\n});\\nexport default handler;\n```\n\n----------------------------------------\n\nTITLE: Tracking Public Folder Video Files with Git LFS - bash\nDESCRIPTION: This snippet configures Git LFS to track all .mp4 files within the public folder and its subdirectories. This command is required after initializing LFS so the git system knows to treat these videos as large files. No additional dependencies are necessary beyond LFS installation. Input is the bash command; output is a modification to the .gitattributes file adding a glob for public/**/*.mp4.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/source-control.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ngit lfs track public/**/*.mp4\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning Remotion Serverless Project - Git Bash - Bash\nDESCRIPTION: This Bash snippet demonstrates how to clone the remotion-serverless project repository from GitHub using the git CLI. Useful as an initial step for acquiring project files, it requires git to be installed on your system. The command outputs a new local copy of the repository in your workspace.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/alexfernandez803/remotion-serverless\n```\n\n----------------------------------------\n\nTITLE: Manually Installing Specific PNPM Version Globally (Shell)\nDESCRIPTION: Installs pnpm version 8.10.2 globally using npm. This is an alternative setup step if Corepack is not available or cannot be used. May require `sudo` depending on system permissions. Dependency: npm.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g pnpm@8.10.2\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS v4 Dependencies for Remotion\nDESCRIPTION: Shows commands for installing the necessary development dependencies (`@remotion/tailwind-v4` and `tailwindcss`) for integrating TailwindCSS v4 into an existing Remotion project, using various package managers.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @remotion/tailwind-v4 tailwindcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @remotion/tailwind-v4 tailwindcss\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D @remotion/tailwind-v4 tailwindcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i -D @remotion/tailwind-v4 tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Importing the BoundingBox Type Interface from @remotion/paths in TypeScript\nDESCRIPTION: This TypeScript example shows how to import the BoundingBox type from the @remotion/paths package to enable type-safe handling of bounding box data returned by getBoundingBox. Requires TypeScript and @remotion/paths package. The type describes the structure of bounding box objects, useful in application code for type checking or documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-bounding-box.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { BoundingBox } from \"@remotion/paths\";\n```\n\n----------------------------------------\n\nTITLE: Upgrading All Remotion Packages - Shell\nDESCRIPTION: Runs the Remotion CLI upgrade command to update all Remotion-related packages to their latest versions. May require elevated permissions depending on the environment. Ensures the project remains compatible with recent Remotion features.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-render-server/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Generating CSS scale3d() Transform in Remotion (TSX)\nDESCRIPTION: Demonstrates using the `scale3d` function from `@remotion/animation-utils` to generate a CSS `scale3d()` transform string. It takes three numerical arguments for scaling along the X, Y, and Z axes respectively.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { scale3d } from \"@remotion/animation-utils\";\n\nconst transform = scale3d(2, 3, 4);\n// => \"scale3d(2, 3, 4)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda Function with Yarn - Bash\nDESCRIPTION: This Bash snippet deploys the Remotion Lambda function using yarn by calling the 'deploy-fn' script from package.json. Requires yarn and proper setup. Invokes TypeScript deployment via ts-node.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn deploy-fn\n```\n\n----------------------------------------\n\nTITLE: Typing Remotion calculateMetadata Callbacks in TypeScript\nDESCRIPTION: This code shows how to type a calculateMetadata function using Remotion's CalculateMetadataFunction generic type for stricter typings. The callback modifies props by adding static data as an example. Requires Remotion and TypeScript. Inputs are the props object, outputs are the updated props. The main constraint is that input and output types must match.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\ntype ApiResponse = {\n  title: string;\n  description: string;\n};\ntype MyCompProps = {\n  id: string;\n  data: ApiResponse | null;\n};\n\n// ---cut---\nimport { CalculateMetadataFunction } from \"remotion\";\n\nexport const calculateMyCompMetadata: CalculateMetadataFunction<\n  MyCompProps\n> = ({ props }) => {\n  return {\n    props: {\n      ...props,\n      data: {\n        title: \"Hello world\",\n        description: \"This is a description\",\n      },\n    },\n  };\n};\n\nexport const MyComp: React.FC<MyCompProps> = () => null;\n```\n\n----------------------------------------\n\nTITLE: Enabling Lambda Insights using Remotion Config in TypeScript\nDESCRIPTION: Enables AWS Lambda Insights integration using `Config.setLambdaInsights()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. Setting it to `true` allows for enhanced monitoring and debugging of Lambda functions used for rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_27\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setLambdaInsights(true);\n```\n\n----------------------------------------\n\nTITLE: Composing Dot and Background in Main Composition - TypeScript/TSX\nDESCRIPTION: Demonstrates integrating Dot and Background components within the main video composition. Requires that Dot and Background are correctly exported. Yields a composition with a white dot overlaying a linear gradient background. Uses AbsoluteFill for full-frame placement.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: Dot.tsx\nexport const Dot: React.FC = () => null;\n// @filename: Background.tsx\nexport const Background: React.FC = () => null;\n\n// @filename: Composition.tsx\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\nimport {Background} from './Background';\nimport {Dot} from './Dot';\n// ---cut---\n\nexport const MyComposition: React.FC = () => {\n  return (\n    <AbsoluteFill>\n      <Background />\n      <Dot />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Excluding Audio using renderMedia in TypeScript\nDESCRIPTION: Provides a TypeScript example using `@remotion/renderer`'s `renderMedia` function to export a video without audio. Similar to the audio-only example, it bundles the project and gets composition details, but instead of setting an audio codec, it sets the `muted: true` parameter. A video codec like 'h264' is typically specified.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {bundle} from '@remotion/bundler';\nimport {getCompositions, renderMedia} from '@remotion/renderer'; // The composition you want to render\nimport path from 'path';\nconst compositionId = 'HelloWorld';\n\n// You only have to do this once, you can reuse the bundle.\nconst entry = './src/index';\nconsole.log('Creating a Webpack bundle of the video');\nconst bundleLocation = await bundle(path.resolve(entry), () => undefined, {\n  // If you have a Webpack override, make sure to add it here\n  webpackOverride: (config) => config,\n});\n\n// Parametrize the video by passing arbitrary props to your component.\nconst inputProps = {\n  foo: 'bar',\n};\n\n// Extract all the compositions you have defined in your project\n// from the webpack bundle.\nconst comps = await getCompositions(bundleLocation, {\n  // You can pass custom input props that you can retrieve using getInputProps()\n  // in the composition list. Use this if you want to dynamically set the duration or\n  // dimensions of the video.\n  inputProps,\n});\n\n// Select the composition you want to render.\nconst composition = comps.find((c) => c.id === compositionId);\n\n// Ensure the composition exists\nif (!composition) {\n  throw new Error(`No composition with the ID ${compositionId} found.\\n  Review \"${entry}\" for the correct ID.`);\n}\nconst outputLocation = `out/${compositionId}.mp4`;\n\n// ---cut---\nawait renderMedia({\n  composition,\n  serveUrl: bundleLocation,\n  codec: 'h264',\n  muted: true,\n  outputLocation,\n  inputProps,\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Video Width using Remotion Config in TypeScript\nDESCRIPTION: Sets the output video width using the `Config.overrideWidth()` method in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the width to 900 pixels. This setting can be overridden by the `--width` command-line flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.overrideWidth(900);\n```\n\n----------------------------------------\n\nTITLE: Rendering Video using Remotion CLI (Shell)\nDESCRIPTION: Shows the command-line interface command to render a Remotion composition into a video file. Use `npx remotion render` followed by the composition ID (defined in `Root.tsx`, e.g., `MyComp`). This initiates the rendering process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\n$ npx remotion render MyComp\n```\n\n----------------------------------------\n\nTITLE: Declaring getCompositions Function Signature - TypeScript\nDESCRIPTION: Defines the TypeScript type signature for the getCompositions API. This asynchronous function accepts a string (for the bundle or served Remotion project location) and an optional configuration object, returning a promise containing an array of composition objects (TComposition[]). Dependencies include TypeScript's Promise and the composition type definitions. The function is foundational for programmatically retrieving available video compositions in Remotion projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/get-compositions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst getCompositions: (serveUrlOrWebpackUrl: string, options?: GetCompositionsConfig) => Promise<TComposition[]>;\n```\n\n----------------------------------------\n\nTITLE: Installing Node Natively on Apple Silicon - Bash\nDESCRIPTION: This bash snippet demonstrates how to start a native arm64 shell and install Node.js version 16 using nvm, ensuring that Node runs natively on Apple Silicon for full performance. The commands require nvm (Node Version Manager) to be installed, and expect a zsh shell environment. The 'arch -arm64 zsh' initiates a new shell using the arm64 architecture, and 'nvm install 16' installs Node.js version 16 in that environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/rosetta.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\narch -arm64 zsh\nnvm install 16\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Remotion Three Integration - Bash\nDESCRIPTION: This snippet demonstrates installing all required packages for using Remotion with React Three Fiber and Three.js in a project using npm. It installs 'three', '@react-three/fiber' (the official React Three Fiber implementation), '@remotion/three' (for Remotion integration), and '@types/three' (TypeScript type definitions). To use advanced 3D graphics in Remotion, all these packages must be present. Run this in the terminal at your project's root. Input: none. Output: dependencies added to package.json.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/three.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i three @react-three/fiber @remotion/three @types/three\n```\n\n----------------------------------------\n\nTITLE: Displaying Recording File Structure - Markdown - plaintext\nDESCRIPTION: This snippet illustrates the nested directory and file arrangement within the Remotion project's public folder. It helps users visually identify where recording files (e.g., mp4 videos) are stored prior to deletion. No external dependencies are required as this is a plain directory structure diagram for reference only.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/record/delete.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npublic\\n└── my-video\\n    ├── webcam10.mp4\\n    ├── display10.mp4\\n    ├── webcam20.mp4\\n    └── webcam30.mp4\n```\n\n----------------------------------------\n\nTITLE: Opening the Remotion Studio (Shell)\nDESCRIPTION: Executes the `remotion` script defined in `package.json`, which starts the Remotion Studio. The Studio provides a development environment for previewing and debugging Remotion video compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run remotion\n```\n\n----------------------------------------\n\nTITLE: Embedding Audio with Audio Component in Remotion (TypeScript/React)\nDESCRIPTION: This snippet shows how to include audio using the `Audio` component from 'remotion'. Import `Audio` and provide the audio source URL via the `src` prop. Optional props like `startFrom`, `endAt` (in frames), and `volume` (0 to 1) can control audio playback.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Audio} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n\treturn <Audio src=\"https://remotion.dev/audio.mp3\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - Console\nDESCRIPTION: Installs all required Node.js packages defined in the project\\'s package.json by running \\\"npm install\\\". This prepares the development environment for using Remotion and associated tools. It should be run prior to using the Remotion CLI commands for previewing or rendering videos. The output of this command is a node_modules folder populated with necessary dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-music-visualization/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Project Dependencies using NPM\nDESCRIPTION: This command uses the Node Package Manager (NPM) to install all the necessary dependencies defined in the project's `package.json` file. Running this command is typically the first step required after cloning or creating a new Remotion project to ensure all required libraries are downloaded.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-helloworld/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies with Yarn\nDESCRIPTION: Installs Remotion core, the Remotion Player, the Remotion CLI, React, and ReactDOM as production dependencies, along with their TypeScript types as development dependencies, using the Yarn package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add remotion @remotion/player @remotion/cli react react-dom\nyarn add --dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Exporting Audio Only via Remotion Lambda CLI\nDESCRIPTION: Demonstrates using the `npx remotion lambda render` command to perform an audio-only render via AWS Lambda. It requires the S3 URL of the bundled project (`serveUrl`) and the composition ID (`my-comp`). The `--codec` flag is used to specify the desired audio format (e.g., `mp3`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion lambda render --codec=mp3 https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw my-comp\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Studio Interface\nDESCRIPTION: Executes the 'remotion:studio' script from `package.json`. This launches the Remotion Studio, providing a web-based environment to preview, edit, and debug Remotion video compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run remotion:studio\n```\n\n----------------------------------------\n\nTITLE: Full Remotion Composition with Animoji and Slow Motion Effects - TypeScript/React Stubs\nDESCRIPTION: Aggregates all animation and effect components, including <Animoji> and <Slowed> together in a single layered composition. Uses React stubs for all imported visual elements, clearly specifying props and indicating where composition logic is handled. MyComposition’s return embeds background, slow-motion grouped effects, and an overlay animoji. Intended for high-level orchestration and demonstration of effect stacking, this structure highlights composability and modularity in Remotion projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_29\n\nLANGUAGE: TSX\nCODE:\n```\n// @filename: Move.tsx\\nexport const Move: React.FC<{\\n  children: React.ReactNode;\\n  delay: number;\\n}> = () => null;\\n// @filename: Shrinking.tsx\\nexport const Shrinking: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n// @filename: Stars.tsx\\nexport const Stars: React.FC<{}> = () => null;\\n// @filename: Background.tsx\\nexport const Background: React.FC<{}> = () => null;\\n// @filename: Dots.tsx\\nexport const Dots: React.FC<{}> = () => null;\\n// @filename: RedHearts.tsx\\nexport const RedHearts: React.FC<{}> = () => null;\\n// @filename: YellowHearts.tsx\\nexport const YellowHearts: React.FC<{}> = () => null;\\n// @filename: Animoji.tsx\\nexport const Animoji: React.FC<{}> = () => null;\\n// @filename: SlowedTrail.tsx\\nexport const Slowed: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n\\n// @filename: MyComposition.tsx\\n// ---cut---\\nimport React from 'react';\\nimport {AbsoluteFill} from 'remotion';\\nimport {Animoji} from './Animoji';\\nimport {Background} from './Background';\\nimport {Dots} from './Dots';\\nimport {RedHearts} from './RedHearts';\\nimport {Slowed} from './SlowedTrail';\\nimport {Stars} from './Stars';\\nimport {YellowHearts} from './YellowHearts';\\n\\nexport const MyComposition = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Background />\\n      <Slowed>\\n        <Dots />\\n        <RedHearts />\\n        <YellowHearts />\\n        <Stars />\\n      </Slowed>\\n      <Animoji />\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/paths using npm (Bash)\nDESCRIPTION: This snippet provides the command to install the @remotion/paths package using npm with the --save-exact flag, ensuring the version is pinned. It requires npm to be installed and should be executed in the root directory of a Node.js project. The only input is the command itself, and the output is the installation of the specified package version into the project's dependencies. This approach helps avoid version mismatches among Remotion ecosystem packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/paths/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/paths --save-exact\n```\n\n----------------------------------------\n\nTITLE: Re-encoding MediaRecorder Blob to MP4 using @remotion/webcodecs (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to re-encode a video Blob (typically obtained from MediaRecorder) directly in the browser using the `@remotion/webcodecs` library. It calls the `convertMedia` function, specifying the source Blob, target container ('mp4'), H.264 video codec, and AAC audio codec. This provides a client-side alternative to server-based FFmpeg for creating more compatible MP4 files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/fix-a-mediarecorder-video.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\n// The video get from the MediaRecorder as a Blob\nconst blob = new Blob([], {type: 'video/webm'});\n\nawait convertMedia({\n  src: blob,\n  container: 'mp4',\n  videoCodec: 'h264',\n  audioCodec: 'aac',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining React Functional Component with Explicit Children (React 18)\nDESCRIPTION: Illustrates the updated TypeScript syntax required in React 18 for defining a Functional Component (`React.FC`) that accepts children. The `children` prop must now be explicitly typed (e.g., using `React.ReactNode`) within the generic parameter.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/react-18.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComp: React.FC<{\n  children: React.ReactNode;\n}> = ({ children }) => <div>{children}</div>;\n```\n\n----------------------------------------\n\nTITLE: Converting MP4 to WebM with VP9/Opus Codecs using @remotion/webcodecs in TSX\nDESCRIPTION: This example demonstrates converting an MP4 video from a URL to WebM format while explicitly specifying the output video and audio codecs using the `convertMedia` function. It relies on `@remotion/webcodecs`. The `videoCodec` is set to 'vp9' and `audioCodec` to 'opus', which are compatible with the 'webm' container.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-a-video.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  videoCodec: 'vp9',\n  audioCodec: 'opus',\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing and Handling PlayerRef Container Node (TypeScript/React)\nDESCRIPTION: Shows how to use the getContainerNode() method from PlayerRef to gain access to the HTML player container. Example attaches a DOM click event to the Remotion Player and cleans up the listener on unmount. Requires a ref to PlayerRef, correct setup in useEffect, and React hooks. Input: No parameters; Output: Attaches a native DOM listener. Constraints include ensuring the DOM node exists before attaching the listener.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_8\n\nLANGUAGE: TSX\nCODE:\n```\nimport {PlayerRef} from '@remotion/player';\nimport {useEffect, useRef} from 'react';\n// ---cut---\nconst playerRef = useRef<PlayerRef>(null);\n\nuseEffect(() => {\n  if (!playerRef.current) {\n    return;\n  }\n  const container = playerRef.current.getContainerNode();\n  if (!container) {\n    return;\n  }\n\n  const onClick = () => {\n    console.log('player got clicked');\n  };\n\n  container.addEventListener('click', onClick);\n  return () => {\n    container.removeEventListener('click', onClick);\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Rendering Audiogram Video with Remotion CLI - Console\nDESCRIPTION: Renders the video output for the current audiogram project using the Remotion CLI. This command generates a final video file with all applied templates and audio, saving it to the default output directory. Ensure all assets and parameters are set before running.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-audiogram/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n\n```\n\n----------------------------------------\n\nTITLE: Executing the Render Script in Shell - Bash Command\nDESCRIPTION: This Bash command executes the provided shell script to trigger batch rendering. It assumes the script 'render-all.sh' is present and executable. The standard input is not required; running this will generate MP4 files for each composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-all.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh ./render-all.sh\n```\n\n----------------------------------------\n\nTITLE: Using the Remotion Wrapper Component in Svelte\nDESCRIPTION: Demonstrates how to use the custom `PlayerViewWrapper` Svelte component within another Svelte template. It uses property binding (`{data}`) to pass input data to the Remotion composition and `bind:player` to get access to the Remotion Player's API reference.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<PlayerViewWrapper bind:player={player} {onPaused} {data}/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Webpack Config via Command Line in Remotion (TypeScript)\nDESCRIPTION: Overrides Remotion's default Webpack configuration reducer-style within remotion.config.ts. Utilizes the Config.overrideWebpackConfig API from @remotion/cli/config, offering type safety, auto-complete, and selective or full configuration replacement. Accepts the current configuration as an argument and requires @remotion/cli/config in a TypeScript environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return {\n    ...currentConfiguration,\n    module: {\n      ...currentConfiguration.module,\n      rules: [\n        ...(currentConfiguration.module?.rules ?? []),\n        // Add more loaders here\n      ],\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Unsaved Props from Studio Editor with saveDefaultProps() in TypeScript\nDESCRIPTION: This snippet demonstrates how to save the props currently present in the Remotion Studio's Props Editor (right sidebar), which might differ from the saved default props. The `defaultProps` function receives an object containing `unsavedDefaultProps`, which represents the state in the editor. Returning this object saves the editor's current values back to the root file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/save-default-props.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @target: esnext\nimport { saveDefaultProps } from \"@remotion/studio\";\n\nawait saveDefaultProps({\n  compositionId: \"my-composition\",\n  defaultProps: ({ unsavedDefaultProps }) => {\n    return unsavedDefaultProps;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/shapes using npm - Bash\nDESCRIPTION: Installs the @remotion/shapes package into your project using npm. Requires Node.js and npm to be installed. This command adds the SVG utilities for JavaScript projects and updates package.json by including @remotion/shapes as a dependency. It expects to be run in the root directory of a Node.js project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/shapes\n```\n\n----------------------------------------\n\nTITLE: Setting Output Format Using Remotion Config API - TypeScript\nDESCRIPTION: Demonstrates how to set the output format (either 'mp4' or 'png-sequence') for rendered videos using the Remotion Config API in a TypeScript config file. This function is deprecated as of v4.0.0, superseded by setCodec() and setImageSequence(). The example requires '@remotion/cli/config' as a dependency and should be placed in 'remotion.config.ts'. Output format may be overridden by CLI flags such as --sequence and --codec.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\\n// ---cut---\\nConfig.setOutputFormat('mp4');\n```\n\n----------------------------------------\n\nTITLE: Enabling Hardware Acceleration via Remotion CLI (Bash)\nDESCRIPTION: Shows how to enable hardware-accelerated encoding using the Remotion command-line interface. The `--hardware-acceleration` flag is added to the `npx remotion render` command with the value `if-possible`. This command renders the 'MyComp' composition using the ProRes codec and attempts to use hardware acceleration if supported.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/hardware-acceleration.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render MyComp --codec prores --hardware-acceleration if-possible\n```\n\n----------------------------------------\n\nTITLE: Failing Dynamic Import Attempt in Remotion (TSX)\nDESCRIPTION: This React component demonstrates a common but incorrect approach to dynamically importing images in Remotion. It constructs the image path string using `useCurrentFrame` and then passes the variable to `require()`. This fails because Webpack cannot statically determine which assets to bundle.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-import.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { Img, useCurrentFrame } from \"remotion\";\n\nexport const DynamicImports: React.FC = () => {\n  const frame = useCurrentFrame();\n  const img = \"./assets/image\" + frame + \".png\";\n  return <Img src={require(img)} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Video Bitrate using Remotion Config in TypeScript\nDESCRIPTION: Specifies the target video bitrate using `Config.setVideoBitrate()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the bitrate to '1M' (1 Megabit per second), influencing file size and quality. This setting can be overridden by the `--video-bitrate` command-line flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setVideoBitrate('1M');\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Policy for AWS S3 Buckets - JSON\nDESCRIPTION: This JSON array demonstrates a recommended template for setting an S3 bucket CORS policy, supporting multiple HTTP methods and dynamic origins. Replace \\\"*\\\" in \\\"AllowedOrigins\\\" with explicit origins for improved security. This configuration is required to ensure correct cross-origin access for assets used in Remotion projects. Limit methods and origins as needed for production deployments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-azure/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllowedHeaders\": [\"*\"],\n    \"AllowedMethods\": [\"HEAD\", \"GET\", \"PUT\", \"POST\", \"DELETE\"],\n    \"AllowedOrigins\": [\"*\"],\n    \"ExposeHeaders\": [\"ETag\", \"x-amz-meta-custom-header\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Loops in Remotion (TSX)\nDESCRIPTION: Demonstrates nesting <Loop> components in Remotion. An outer loop runs indefinitely with a duration of 75 frames, and an inner loop runs indefinitely with a duration of 30 frames, containing the BlueSquare component. This creates a cascading loop effect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/loop.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\n// @include: example-BlueSquare\nimport { Loop } from \"remotion\";\n// ---cut---\nconst MyComp = () => {\n  return (\n    <Loop durationInFrames={75}>\n      <Loop durationInFrames={30}>\n        <BlueSquare />\n      </Loop>\n    </Loop>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing No-Effect Transition in Remotion using TypeScript\nDESCRIPTION: This TypeScript (TSX) React code snippet demonstrates how to use the none() presentation from @remotion/transitions to define a transition with no built-in visual effect between two video segments. The Letter functional component displays a colored letter using AbsoluteFill, and the transition is controlled explicitly using TransitionSeries and timing functions. Required dependencies include React, Remotion, and @remotion/transitions. Key parameters include color for letter backgrounds, durationInFrames for sequence timing, and the none() function for custom effect control. The code expects React nodes as inputs and outputs a TSX element that can be rendered inside a Remotion video composition. No visual effect will occur during the specified transition; users should control visuals with useTransitionProgress() if needed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/none.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbsoluteFill } from \"remotion\";\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 200,\n        color: \"white\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { linearTiming, TransitionSeries } from \"@remotion/transitions\";\nimport { none } from \"@remotion/transitions/none\";\n\nconst BasicTransition = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\"#0b84f3\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={none()}\n        timing={linearTiming({ durationInFrames: 30 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Letter color=\"pink\">B</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Media on Lambda with Expiration via Node.JS (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to use the `renderMediaOnLambda` function from the `@remotion/lambda/client` package to initiate a video render. The `deleteAfter: '1-day'` parameter ensures the resulting media file and associated data in S3 will be prefixed correctly and automatically deleted after 1 day based on the bucket's lifecycle rules. Requires the `@remotion/lambda/client` package, a deployed site with folder expiry enabled, and necessary configuration parameters (region, functionName, serveUrl, etc.).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/autodelete.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ---cut---\nimport {renderMediaOnLambda} from '@remotion/lambda/client';\n\nconst {bucketName, renderId} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  composition: 'MyVideo',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  codec: 'h264',\n  deleteAfter: '1-day',\n});\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Asset Organization (Text)\nDESCRIPTION: Illustrates a recommended directory structure for organizing Remotion projects, emphasizing the placement of the public/ folder for static asset importing. No executable code included. Files like MyComp.tsx and Root.tsx are stored under src/, while assets like logo.png reside in public/.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmy-video/\\n├─ node_modules/\\n├─ public/\\n│  ├─ logo.png\\n├─ src/\\n│  ├─ MyComp.tsx\\n│  ├─ Root.tsx\\n│  ├─ index.ts\\n├─ package.json\\n\n```\n\n----------------------------------------\n\nTITLE: Applying a Posterizing Effect to Waveforms with visualizeAudioWaveform() (TSX)\nDESCRIPTION: Demonstrates creating a posterized or stepped animation effect by calculating the waveform less frequently. It modifies the `frame` input passed to `visualizeAudioWaveform` (e.g., `Math.round(frame / 3) * 3`), causing the waveform data to update only every few frames, resulting in a less fluid, \"calmer\" animation. Depends on `@remotion/media-utils`, `remotion`, and `react`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-utils/visualize-audio-waveform.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createSmoothSvgPath, useAudioData, visualizeAudioWaveform, AudioData} from '@remotion/media-utils';\nimport React from 'react';\nimport {AbsoluteFill, Audio, useCurrentFrame, useVideoConfig, staticFile} from 'remotion';\n\nconst frame = useCurrentFrame();\nconst audioDataVoice = useAudioData(staticFile('podcast.wav')) as AudioData;\nconst {fps} = useVideoConfig();\n\n// ---cut---\nconst waveform = visualizeAudioWaveform({\n  fps,\n  frame: Math.round(frame / 3) * 3,\n  audioData: audioDataVoice,\n  numberOfSamples: 32,\n  windowInSeconds: 10 / fps,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda to Listen to SQS Queue Events (JavaScript)\nDESCRIPTION: Attaches an SQS event source to the render Lambda function using AWS CDK, allowing it to process messages with defined batch size and window. Requires constructs for Lambda, SQS, and event sources. Parameters include batchSize (set to 1), maxBatchingWindow (5 minutes), and reporting batch item failures. The expected outcome is that the Lambda will automatically receive and process SQS messages. Constraints include limits of batch size and event source settings.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// \\\\uD83D\\\\uDC47 Listen to queue\\nremotionRenderFunction.addEventSource(\\n  new SqsEventSource(remotionQueue, {\\n    batchSize: 1,\\n    maxBatchingWindow: Duration.minutes(5),\\n    reportBatchItemFailures: true, // default to false\\n  }),\\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Executable Path in Remotion Configuration (Conceptual)\nDESCRIPTION: Conceptual reference to the `setBrowserExecutable()` configuration function in Remotion (likely JavaScript/TypeScript). This function allows developers to specify the file path to a local Chrome or Chromium installation, preventing Remotion from automatically downloading a binary. See `/docs/config#setbrowserexecutable` for details.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-03-03-remotion-1-5.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetBrowserExecutable()\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Amazon Linux 2023 using Bash\nDESCRIPTION: Uses the `yum install` command to install required packages for Remotion's Chrome Headless Shell on Amazon Linux 2023. Installs libraries related to graphics (mesa-libgbm, libX11, libXrandr, libdrm, libXdamage, libXfixes, libXcomposite, pango), system services (dbus-libs, nss, dbus), audio (alsa-lib), printing (cups-libs), and accessibility (at-spi2-core, atk, at-spi2-atk).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-dependencies.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyum install -y \\\n  mesa-libgbm\t\\\n  libX11 \\\n  libXrandr\\\n  libdrm \\\n  libXdamage \\\n  libXfixes \\\n  dbus -libs\\\n  libXcomposite \\\n  alsa -lib \\\n  nss \\\n  dbus \\\n  pango \\\n  cups-libs \\\n  at-spi2-core \\\n  atk \\\n  at-spi2-atk\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Alias for `react-native-web` in Remotion (TypeScript)\nDESCRIPTION: This configuration snippet shows how to restore the automatic aliasing of `react-native` to `react-native-web` in Remotion v4, as this is no longer done by default. By overriding the Webpack config in `remotion.config.ts`, users can ensure compatibility for projects relying on this alias. It imports `Config` from `@remotion/cli/config` and modifies the `resolve.alias` property.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash title=\"remotion.config.ts\"\nimport {Config} from '@remotion/cli/config';\n\nConfig.overrideWebpackConfig((config) => {\n  return {\n    ...config,\n    resolve: {\n      ...config.resolve,\n      alias: {\n        ...config.resolve?.alias,\n        'react-native$': 'react-native-web',\n      },\n    },\n  };\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Understanding Remotion Lambda Function Naming Convention\nDESCRIPTION: This example illustrates the standard naming format for Remotion Lambda functions. It shows how the name encodes the Remotion version (with dots replaced by dashes), memory size (MB), disk size (MB), and timeout (seconds). This fixed convention allows for predictability (e.g., using `speculateFunctionName()`) and avoids redundant function deployments with identical configurations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/naming-convention.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nremotion-render-4-0-140-mem2048mb-disk2048mb-240sec\n                ^^^^^^^    ^^^^       ^^^^   ^^^\n                  |         |          |      |-- Timeout in seconds\n                  |         |          |--------- Disk size in MB\n                  |         |------------------- Memory size in MB\n                  |----------------------------- Remotion version with dots replaced by dashes\n```\n\n----------------------------------------\n\nTITLE: Rendering Remotion Project to Video using CLI\nDESCRIPTION: This shell command utilizes the Remotion Command Line Interface (CLI) to render the entire video project. Executing `npx remotion render` triggers the rendering process, which synthesizes the defined compositions, scenes (including the animated Spline model), and audio into a final video file, typically in MP4 format. Requires the Remotion CLI and Node.js.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spline.mdx#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Playing a Video Portion with @remotion/player in React TypeScript\nDESCRIPTION: Shows how to limit playback to a segment using inFrame and outFrame props. The Player starts at frame 30 and ends at frame 60, looping the range if loop is set. Inputs: player props plus inFrame and outFrame specifying segment. Outputs: player only plays specified frame range. Limitation: frame ranges must be within total duration; incorrect values may cause errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player } from \"@remotion/player\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  return (\\n    <Player\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n      loop\\n      inFrame={30}\\n      outFrame={60}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Trust Relationship for Lambda Role - AWS JSON Policy\nDESCRIPTION: This snippet defines a JSON trust relationship document for the IAM role 'remotion-ec2-executionrole'. It allows both Lambda services and a specific EC2 role (identified by its ARN) to assume this role via the sts:AssumeRole action. Required dependency: IAM role management permissions in AWS Console. The 'AWS' field in the Principal uses the EC2 instance profile role created earlier. This policy must be edited in the 'Trust relationships' tab of the role for proper cross-service authentication.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"Version\\\": \\\"2012-10-17\\\",\\n  \\\"Statement\\\": [\\n    {\\n      \\\"Sid\\\": \\\"\\\",\\n      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Principal\\\": {\\n        \\\"Service\\\": \\\"lambda.amazonaws.com\\\"\\n      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    },\\n    {\\n      \\\"Sid\\\": \\\"\\\",\\n      \\\"Effect\\\": \\\"Allow\\\",\\n      \\\"Principal\\\": {\\n        \\\"AWS\\\": \\\"arn:aws:iam::XXXXXXXX:role/ec2-remotion-role\\\"\\n      },\\n      \\\"Action\\\": \\\"sts:AssumeRole\\\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Resampling Audio in the Browser using Remotion WebCodecs (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the @remotion/webcodecs library's convertMedia function to resample audio tracks to 16kHz in the browser. It evaluates whether an audio track can be reencoded with the specified sample rate and outputs a Blob in WAVE format. Dependencies include the @remotion/webcodecs package and an environment where browser APIs and async/await are supported. The convertMedia call requires the input audio/video source (src), target container, and an asynchronous configuration callback for audio tracks. The result is a converted Blob suitable for further processing or download.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resample-audio-16khz.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {convertMedia, canReencodeAudioTrack} from '@remotion/webcodecs';\\n\\nconst output = await convertMedia({\\n  src: 'https://example.com/input.mp4',\\n  container: 'wav',\\n  onAudioTrack: async ({track}) => {\\n    if (\\n      await canReencodeAudioTrack({\\n        audioCodec: 'wav',\\n        track,\\n        // Ignore this, bitrate is not used for WAV files\\n        bitrate: 128000,\\n        sampleRate: 16000,\\n      })\\n    ) {\\n      return {\\n        type: 'reencode',\\n        audioCodec: 'wav',\\n        bitrate: 128000,\\n        sampleRate: 16000,\\n      };\\n    }\\n\\n    // If this conversion is not supported, return an error\\n    return {\\n      type: 'fail',\\n    };\\n  },\\n});\\n\\nconst blob = await output.save(); // returns a `Blob`\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Remotion Lambda Package Dependencies - JSON\nDESCRIPTION: Shows an excerpt of package.json declaring Remotion and @remotion/lambda as dependencies, required for AWS Lambda media rendering tasks. These libraries must be present for runtime media rendering and orchestrating Lambda executions. Pinning or updating versions can control feature availability and compatibility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dependencies\\\": {\\n    ...\\n    \\\"remotion\\\": \\\"^3.3.33\\\",\\n    \\\"@remotion/lambda\\\": \\\"^3.3.33\\\",\\n  }\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Launching the Remotion Studio via npm Script\nDESCRIPTION: Executes the 'remotion:studio' script defined in `package.json`. This command launches the Remotion Studio development environment for previewing and editing video compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run remotion:studio\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Framework using npx\nDESCRIPTION: Executes the Remotion CLI `upgrade` command via npx. This command automatically checks for the latest compatible versions of Remotion packages (`remotion`, `@remotion/cli`, etc.) and updates the project's `package.json` file and `package-lock.json` (or `yarn.lock`) accordingly. It simplifies the process of keeping the project dependencies up-to-date with the framework.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-overlay/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Using Remotion Components with Direct Prop Passing (TypeScript)\nDESCRIPTION: Illustrates direct usage of a typed React component (MyComponent) by passing required props inline, suitable for composing or testing components before registration. Since this leverages TSX, it assumes the props' types are enforced at compile-time. Can be used for concatenating scenes or creating master compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/passing-props.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @include: example-MyComponent\n// ---cut---\n<MyComponent propOne=\"hi\" propTwo={10} />\n```\n\n----------------------------------------\n\nTITLE: Loading Google Font on the Client using loadFontFromInfo() (TypeScript)\nDESCRIPTION: This client-side example shows how to use `loadFontFromInfo()` after receiving font metadata (simulated here by `loadInfoFromServer` which resolves with `getInfo()`). It loads the 'italic' style of the font specified by the `info` object, logs the generated `fontFamily` string, and waits for the font to be fully loaded using `waitUntilDone()`. Dependencies include `@remotion/google-fonts/InterTight` (indirectly via `getInfo`) and `@remotion/google-fonts/from-info`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/load-font-from-info.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getInfo} from '@remotion/google-fonts/InterTight';\nimport {loadFontFromInfo} from '@remotion/google-fonts/from-info';\n\nconst loadInfoFromServer = () => {\n  return Promise.resolve(getInfo());\n};\n\n// ---cut---\nconst info = await loadInfoFromServer();\n\nconst {fontFamily, waitUntilDone} = loadFontFromInfo(info, 'italic');\n\nconsole.log(fontFamily);\nwaitUntilDone();\n```\n\n----------------------------------------\n\nTITLE: Defining Timeline Item and Track Types using TypeScript\nDESCRIPTION: Defines strongly typed structures for timeline items and tracks, which are essential for type safety and unified data handling in the editor. Supports multiple item types (such as solid color segments, text, and videos), each with their own required properties, and composes them into tracks as arrays. No external dependencies required besides TypeScript; designed for projects using component-based architectures such as React. Input: N/A; Output: Types for use across components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/building-a-timeline.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype BaseItem = {\n  from: number;\n  durationInFrames: number;\n  id: string;\n};\n\nexport type SolidItem = BaseItem & {\n  type: 'solid';\n  color: string;\n};\n\nexport type TextItem = BaseItem & {\n  type: 'text';\n  text: string;\n  color: string;\n};\n\nexport type VideoItem = BaseItem & {\n  type: 'video';\n  src: string;\n};\n\nexport type Item = SolidItem | TextItem | VideoItem;\n\nexport type Track = {\n  name: string;\n  items: Item[];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Remotion Lambda Site with Named Directory - Shell Command\nDESCRIPTION: Runs the Remotion Lambda CLI to upload the project located at the specified entry point to a deterministic directory within the S3 bucket by providing the --site-name option. This facilitates consistent serve URLs and makes overwriting an existing site explicit. Allowed characters for the site name are 0-9, a-z, A-Z, -, !, _, ., *, ', (, ). Requires Remotion Lambda CLI and AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/sites/create.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda sites create src/index.ts --site-name=my-project\n```\n\n----------------------------------------\n\nTITLE: Creating Remotion Folder Structure\nDESCRIPTION: Defines a recommended folder structure within the Svelte project's `src` directory to organize Remotion-specific files, promoting separation of concerns.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/remotion\n```\n\n----------------------------------------\n\nTITLE: Enabling MDX Support via Webpack Override (TypeScript)\nDESCRIPTION: Defines an enableMdx function that extends the current Webpack configuration to support .mdx file imports using @mdx-js/loader. Requires prior installation of @mdx-js/loader and @mdx-js/react. This override augments module.rules and is exported as WebpackOverrideFn for registration in Remotion's config or API calls.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebpackOverrideFn} from '@remotion/bundler';\n// ---cut---\nexport const enableMdx: WebpackOverrideFn = (currentConfiguration) => {\n  return {\n    ...currentConfiguration,\n    module: {\n      ...currentConfiguration.module,\n      rules: [\n        ...(currentConfiguration.module?.rules ? currentConfiguration.module.rules : []),\n        {\n          test: \\/\\.mdx?$/,\n          use: [\n            {\n              loader: '@mdx-js/loader',\n              options: {},\n            },\n          ],\n        },\n      ],\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Application Server - Bash\nDESCRIPTION: This command starts the Remotion application using npm, which launches an HTTP service on the port configured in the .env file, here specified as 8080. Prerequisites include Node.js, npm, and the Remotion project dependencies installed. The command must be executed from the application directory and will bind the server to the relevant port; any port conflicts or missing modules may prevent startup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion CloudRun via npm in Bash\nDESCRIPTION: Installs the @remotion/cloudrun package using npm in a Bash shell, ensuring the exact version is used (without caret for version consistency). Requires npm and correct project setup. Accepts no parameters, but users must replace the package name if targeting a different Remotion component. Outputs an updated node_modules directory and package.json entry. Assumes the current working directory is a Node.js project directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/cloudrun --save-exact\n```\n\n----------------------------------------\n\nTITLE: Providing a Custom Error Fallback for Remotion Player in TypeScript/React\nDESCRIPTION: Explains how to implement a custom UI to display when a Remotion composition encounters a render error, leveraging React's error boundary concept. This involves defining a callback function (`errorFallback`) that accepts the error details and returns a React element, then passing this function to the `errorFallback` prop of the `Player` component. Requires React, `@remotion/player`, and `remotion`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ErrorFallback, Player} from '@remotion/player';\nimport {useCallback} from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nconst Component: React.FC = () => null;\n\n// ---cut---\n\nconst MyApp: React.FC = () => {\n  // `ErrorFallback` type can be imported from \"@remotion/player\"\n  const errorFallback: ErrorFallback = useCallback(({error}) => {\n    return (\n      <AbsoluteFill\n        style={{\n          backgroundColor: 'yellow',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        Sorry about this! An error occurred: {error.message}\n      </AbsoluteFill>\n    );\n  }, []);\n\n  return <Player fps={30} component={Component} durationInFrames={100} compositionWidth={1080} compositionHeight={1080} errorFallback={errorFallback} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Shell Architecture - Bash\nDESCRIPTION: This snippet shows the terminal command for printing the current shell's architecture, typically returning 'arm64' when running natively on Apple Silicon. No dependencies are required. The output should be used to verify that the shell session is not running under Rosetta emulation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/rosetta.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\narch\n```\n\n----------------------------------------\n\nTITLE: Selecting the first stream with Remotion Media Parser (TypeScript)\nDESCRIPTION: Demonstrates the use of the selectM3uStream callback within the parseMedia function from @remotion/media-parser to select the first stream from a provided .m3u8 source. The code logs various properties of each available stream (resolution, bandwidth, src, etc.) and then selects the first one by returning streams[0].id. This approach requires the @remotion/media-parser library as a dependency, expects a media source URL, and outputs a parsed media object. No UI is shown; selection is programmatic based on stream order.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/selecting-streams.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\nconst media = await parseMedia({\\n  src: 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8',\\n  selectM3uStream: ({streams}) => {\\n    for (const stream of streams) {\\n      console.log(stream.resolution); // {width: 1920, height: 1080}\\n      console.log(stream.bandwidth); // 4400000\\n      console.log(stream.src); // \\\"https://test-streams.mux.dev/x36xhzz/193039199_mp4_h264_aac_hd_7.m3u8\\\"\\n      console.log(stream.averageBandwidth); // null\\n      console.log(stream.codecs); // [\\\"avc1.640028\\\", \\\"mp4a.40.2\\\"]\\n      console.log(stream.associatedPlaylists); // See below\\n    }\\n\\n    return streams[0].id;\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Google Fonts via CSS in Remotion Projects (CSS)\nDESCRIPTION: Shows how to import a Google Font using a CSS @import statement. The CSS is expected to be included in the build process, and the relevant font-family can then be referenced in subsequent React components. No dependencies beyond a build tool that supports CSS imports are required. This approach relies on Remotion's built-in font-waiting behavior for recent versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/fonts.mdx#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n@import url(\"https://fonts.googleapis.com/css2?family=Bangers\");\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Bun (Bash)\nDESCRIPTION: Installs or updates project dependencies using the Bun package manager, reading from `package.json`. This command is part of the manual upgrade process for Remotion when Bun is the chosen package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/upgrading.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun i\n```\n\n----------------------------------------\n\nTITLE: Setting Google Fonts API Key Environment Variable (Shell/Env)\nDESCRIPTION: Sets the environment variable `GOOGLE_FONTS_API_KEY` to the user's obtained API key in a `.env` file. This key is required by the font generation script to authenticate with the Google Fonts API. Replace 'xxx' with the actual API key.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/google-fonts/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOOGLE_FONTS_API_KEY=xxx\n```\n\n----------------------------------------\n\nTITLE: Cloning and Rendering Remotion GPU Demo (Bash)\nDESCRIPTION: Clones a Remotion GPU demo project from GitHub, navigates into the directory, installs Node.js dependencies using npm, verifies GPU acceleration using `npx remotion gpu` with specific Chrome flags (`--chrome-mode=\"chrome-for-testing\" --gl=vulkan`), and finally renders a test video using `npx remotion render` with the same flags to leverage the GPU.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/remotion-dev/gpu-scene\ncd gpu-scene\nnpm i\nnpx remotion gpu --chrome-mode=\"chrome-for-testing\" --gl=vulkan # Verify content is hardware accelerated\nnpx remotion render --chrome-mode=\"chrome-for-testing\" --gl=vulkan # Render a test video\n```\n\n----------------------------------------\n\nTITLE: Connecting to EC2 Instance using SSH - Bash Commands\nDESCRIPTION: This bash command demonstrates how to connect to an AWS EC2 instance using SSH with a private key, assuming the key file is 'remotion.pem' and the instance user is 'ubuntu'. Dependency: The 'remotion.pem' key file must match the EC2 key pair used on instance launch. 'example.com' should be replaced with the EC2 public DNS or IP address. The command grants access for subsequent deployment and setup steps.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n ssh -i \\\"remotion.pem\\\" ubuntu@example.com\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion CLI using yarn\nDESCRIPTION: Adds the Remotion Command Line Interface (`@remotion/cli`) package as a project dependency using the yarn package manager. This is a prerequisite for launching the Remotion Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/studio.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/cli\n```\n\n----------------------------------------\n\nTITLE: Handling Individual Video Tracks with onVideoTrack Callback in TSX\nDESCRIPTION: Illustrates using the `onVideoTrack` callback within `convertMedia` to decide the action for each video track individually. In this example, if a video track already uses the 'vp8' codec, it's copied directly (`{type: 'copy'}`); otherwise, it's re-encoded to 'vp8' (`{type: 'reencode', videoCodec: 'vp8'}`). The `audioCodec` is set globally for all audio tracks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/track-transformation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  audioCodec: 'opus',\n  onVideoTrack: ({track}) => {\n    if (track.codecWithoutConfig === 'vp8') {\n      return {type: 'copy'};\n    }\n\n    return {type: 'reencode', videoCodec: 'vp8'};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Framework - Console\nDESCRIPTION: This command upgrades the Remotion dependency to the latest version using the official Remotion CLI. Requires an existing Remotion-based project with npx available. No parameters required unless custom versioning is desired. The upgrade may affect compatibility, so ensure to test critical functionality after execution.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-skia/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Setting Server-Side Chromium GL Options for Remotion - JSON\nDESCRIPTION: This JSON snippet defines Chromium launch options for enabling the 'angle' OpenGL renderer during server-side rendering with Remotion. Add the 'chromiumOptions' property to the configuration object passed to server-side APIs such as renderMedia(), renderFrames(), getCompositions(), or renderMediaOnLambda(). Input: config JSON for a server-side Remotion rendering call. Output: ensures that the Three.js renderer uses the specified GL backend. Prerequisite: understand where to place the Chromium options in the API call.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/three.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"chromiumOptions\": {\n    \"gl\": \"angle\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Remotion Render Flags for Transparent ProRes Export (Bash)\nDESCRIPTION: A command-line option set for Remotion CLI to render a transparent Apple ProRes video. Specifies PNG image format, pixel format 'yuva444p10le', codec 'prores', and reference ProRes profile '4444'. Requires Remotion CLI v2.1.7 or higher. No external TypeScript/JavaScript context is needed; can be used in any shell script or manual CLI execution.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transparent-videos.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n--image-format=png --pixel-format=yuva444p10le --codec=prores --prores-profile=4444\n```\n\n----------------------------------------\n\nTITLE: Using toCaptions() to Generate Remotion Captions from Whisper.cpp Output in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `toCaptions()` function from `@remotion/install-whisper-cpp`. It first simulates obtaining transcription output from the `transcribe()` function (which requires an audio file path, Whisper.cpp path, version, model, and token-level timestamps). Then, it passes this `whisperCppOutput` to `toCaptions()` to generate an array of `Caption` objects. The resulting `captions` array, containing text, timing, and confidence information for each segment, is logged to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/install-whisper-cpp/to-captions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toCaptions, transcribe} from '@remotion/install-whisper-cpp';\nimport path from 'path';\n\nconst whisperCppOutput = await transcribe({\n  inputPath: '/path/to/audio.wav',\n  whisperPath: path.join(process.cwd(), 'whisper.cpp'),\n  whisperCppVersion: '1.5.5',\n  model: 'medium.en',\n  tokenLevelTimestamps: true,\n});\n\nconst {captions} = toCaptions({\n  whisperCppOutput,\n});\n\nconsole.log(captions); /*\n [\n    {\n      text: \"William\",\n      startMs: 40,\n      endMs: 420,\n      timestampMs: 240,\n      confidence: 0.813602,\n    }, {\n      text: \" just\",\n      startMs: 420,\n      endMs: 650,\n      timestampMs: 480,\n      confidence: 0.990905,\n    }, {\n      text: \" hit\",\n      startMs: 650,\n      endMs: 810,\n      timestampMs: 700,\n      confidence: 0.981798,\n    }\n  ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Checking Video Track Re-encodability with canReencodeVideoTrack in TypeScript\nDESCRIPTION: This snippet demonstrates how to use `parseMedia` from `@remotion/media-parser` to get video tracks from a media source and then iterates through them, using `canReencodeVideoTrack` from `@remotion/webcodecs` to check if each track can be re-encoded to the 'vp8' codec. It requires installing both the `@remotion/media-parser` and `@remotion/webcodecs` packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/can-reencode-video-track.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\nimport {canReencodeVideoTrack} from '@remotion/webcodecs';\n\nconst {tracks} = await parseMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  fields: {\n    tracks: true,\n  },\n});\n\nfor (const track of tracks.videoTracks) {\n  await canReencodeVideoTrack({\n    track,\n    videoCodec: 'vp8',\n    resizeOperation: null,\n    rotate: null,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Video Metadata from a Local File Path Using Remotion Media Parser in TypeScript\nDESCRIPTION: This example shows how to extract metadata (duration and dimensions) from a video located on a local filesystem using the @remotion/media-parser and nodeReader. The parseMedia function is called with src as the local file path, fields object specifying desired metadata, and the nodeReader to enable reading local files in Node.js or Bun environments. The result object contains the extracted metadata.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/metadata.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\nimport {nodeReader} from '@remotion/media-parser/node';\\n\\nconst result = await parseMedia({\\n  src: '/tmp/video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n  reader: nodeReader,\\n});\\n\\nconsole.log(result.durationInSeconds); // 10\\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/rive using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and install the `@remotion/rive` package as a project dependency. Running this command in the terminal within a project directory adds the package to `node_modules` and updates `package.json` and `package-lock.json`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/rive/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/rive\n```\n\n----------------------------------------\n\nTITLE: Rendering Video with Picker using Remotion CLI - Bash\nDESCRIPTION: This snippet shows how to use the Remotion CLI without providing a composition ID, causing a picker to be shown for the user to select which composition to render. Requires Remotion installed and configured. Input: none, user picks composition interactively; Output: video render based on chosen composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of visualizeAudioWaveform() in Remotion (TSX)\nDESCRIPTION: Demonstrates the fundamental usage of `visualizeAudioWaveform` within a Remotion component. It retrieves audio data using `useAudioData`, gets the current frame and FPS, and then calls `visualizeAudioWaveform` with basic parameters (`numberOfSamples: 16`, `windowInSeconds: 1 / fps`) to generate waveform data for the current frame. Requires `@remotion/media-utils`, `remotion`, and `react`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-utils/visualize-audio-waveform.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createSmoothSvgPath, useAudioData, visualizeAudioWaveform, AudioData} from '@remotion/media-utils';\nimport React from 'react';\nimport {AbsoluteFill, Audio, useCurrentFrame, useVideoConfig, staticFile} from 'remotion';\n\nconst frame = useCurrentFrame();\nconst audioData = useAudioData(staticFile('podcast.wav')) as AudioData;\nconst {fps} = useVideoConfig();\n\n// ---cut---\nconst waveform = visualizeAudioWaveform({\n  fps,\n  frame,\n  audioData,\n  numberOfSamples: 16,\n  windowInSeconds: 1 / fps,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Spring-Based Timing with Pause using Remotion (TypeScript/React)\nDESCRIPTION: This advanced example demonstrates constructing a custom timing function that combines two spring animations with a customizable pause. It shows how to use Remotion's spring and measureSpring utilities to compute animation durations and progress. The function accepts a pauseDuration parameter, and uses Partial<SpringConfig> objects to configure the spring phases. Relies on @remotion/transitions and remotion for spring utilities. Outputs a TransitionTiming object suitable for <TransitionSeries>, where getDurationInFrames deterministically adds up animation and pause times, and getProgress combines both spring animations in sequence.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/timings/custom.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { TransitionTiming } from \"@remotion/transitions\";\nimport { measureSpring, spring, SpringConfig } from \"remotion\";\n\nconst springTimingWithPause = ({\n  pauseDuration,\n}: {\n  pauseDuration: number;\n}): TransitionTiming => {\n  const firstHalf: Partial<SpringConfig> = {};\n  const secondPush: Partial<SpringConfig> = {\n    damping: 200,\n  };\n\n  return {\n    getDurationInFrames: ({ fps }) => {\n      return (\n        measureSpring({ fps, config: firstHalf }) +\n        measureSpring({ fps, config: secondPush }) +\n        pauseDuration\n      );\n    },\n    getProgress({ fps, frame }) {\n      const first = spring({ fps, frame, config: firstHalf });\n      const second = spring({\n        fps,\n        frame,\n        config: secondPush,\n        delay: pauseDuration + measureSpring({ fps, config: firstHalf }),\n      });\n\n      return first / 2 + second / 2;\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Skia in Remotion (TypeScript)\nDESCRIPTION: This snippet shows how to modify the `remotion.config.ts` file to enable Skia support. It uses the `enableSkia` function from `@remotion/skia/enable` to override the default Webpack configuration provided by Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/skia.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts twoslash title=\"remotion.config.ts\"\nimport {Config} from '@remotion/cli/config';\nimport {enableSkia} from '@remotion/skia/enable';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableSkia(currentConfiguration);\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of staticFile() with Absolute Path (TypeScript)\nDESCRIPTION: Illustrates an incorrect usage of `staticFile()` where an absolute filesystem path is provided. The function expects a filename relative to the project's `public/` folder, not an absolute path.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/static-file-relative-paths.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"❌ File should not use absolute paths\"\nimport { staticFile } from \"remotion\";\nstaticFile(\"/Users/bob/remotion-project/public/image.png\");\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring for Seamless AAC Concatenation (TypeScript)\nDESCRIPTION: Sets options for seamless AAC audio concatenation using the `Config` object in `remotion.config.ts`. See linked <Options> documentation for details. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v4.0.123. The `--for-seamless-aac-concatenation` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setForSeamlessAacConcatenation(true);\n```\n\n----------------------------------------\n\nTITLE: Applying Animation Effects to Red Hearts in Remotion (TSX)\nDESCRIPTION: This snippet defines the `RedHearts` component which orchestrates animations for the `RedHeart`. It wraps `RedHeart` with `Shrinking`, applies a vertical translation (`-100px`), delays the animation using `Move` (5 frames), and encloses everything within an `Explosion` effect. It relies on pre-defined custom animation components (`Explosion`, `Move`, `Shrinking`) and the `RedHeart` component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/RedHearts.tsx\"\n// @filename: Move.tsx\nexport const Move: React.FC<{\n  children: React.ReactNode;\n  delay: number;\n}> = () => null;\n// @filename: Shrinking.tsx\nexport const Shrinking: React.FC<{\n  children: React.ReactNode;\n}> = () => null;\n// @filename: Explosion.tsx\nexport const Explosion: React.FC<{\n  children: React.ReactNode;\n}> = () => null;\n// @filename: Background.tsx\nexport const Background: React.FC<{}> = () => null;\n// @filename: Dot.tsx\nexport const Dot: React.FC<{}> = () => null;\n// @filename: RedHeart.tsx\nexport const RedHeart: React.FC<{}> = () => null;\n// @filename: Trail.tsx\nexport const Trail: React.FC<{\n  children: React.ReactNode;\n  extraOffset: number;\n  amount: number;\n}> = () => null;\n\n// @filename: MyComposition.tsx\n// ---cut---\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\nimport {Explosion} from './Explosion';\nimport {Move} from './Move';\nimport {RedHeart} from './RedHeart';\nimport {Shrinking} from './Shrinking';\n\nexport const RedHearts: React.FC = () => {\n  return (\n    <Explosion>\n      <Move delay={5}>\n        <AbsoluteFill style={{transform: `translateY(-100px)`}}>\n          <Shrinking>\n            <RedHeart />\n          </Shrinking>\n        </AbsoluteFill>\n      </Move>\n    </Explosion>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Using evolvePath() to Animate SVG Paths in Remotion\nDESCRIPTION: This TypeScript/TSX snippet demonstrates how to use the `evolvePath` function from `@remotion/paths`. It takes a progress value (0.5) and an SVG path string as input, calculates the corresponding `strokeDasharray` and `strokeDashoffset` values needed to draw the path halfway, logs these values, and shows how to apply them to a React `<path>` element for animation. Requires the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/evolve-path.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { evolvePath } from \"@remotion/paths\";\n\nconst path = \"M 0 0 L 100 0\";\nconst evolution = evolvePath(0.5, path);\nconsole.log(evolution); // { strokeDasharray: '100 100',  strokeDashoffset: 50 }\n\nconst element = (\n  <path\n    d={path}\n    strokeDasharray={evolution.strokeDasharray}\n    strokeDashoffset={evolution.strokeDashoffset}\n  />\n);\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion ESLint Plugin using Yarn\nDESCRIPTION: Installs the `@remotion/eslint-plugin` package as a development dependency using the Yarn package manager. This plugin enhances code quality by integrating Remotion-specific linting rules into the project's development workflow.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/brownfield-installation.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nyarn add @remotion/eslint-plugin\n```\n```\n\n----------------------------------------\n\nTITLE: Organizing Remotion Compositions with Folder Component - TypeScript/React\nDESCRIPTION: This snippet demonstrates how to use the Remotion <Folder> and <Composition> components in TypeScript React to visually organize compositions within the Remotion Studio sidebar. It requires the remotion library (version >= 3.0.1) and uses a basic React functional component as the composition content. Each <Composition> defines parameters such as id, durationInFrames, fps, width, height, and component, while <Folder> groups compositions under a sidebar category with a name (limited to a-z, A-Z, 0-9, and -). Inputs include compositions and folders; output is a structured sidebar tree within Remotion Studio. Only the sidebar appearance is affected—folders do not influence the actual render pipeline.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/folder.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React from \"react\";\nconst Component: React.FC = () => null;\n// ---cut---\nimport { Composition, Folder } from \"remotion\";\n\nexport const Video = () => {\n  return (\n    <>\n      <Folder name=\"Visuals\">\n        <Composition\n          id=\"CompInFolder\"\n          durationInFrames={100}\n          fps={30}\n          width={1080}\n          height={1080}\n          component={Component}\n        />\n      </Folder>\n      <Composition\n        id=\"CompOutsideFolder\"\n        durationInFrames={100}\n        fps={30}\n        width={1080}\n        height={1080}\n        component={Component}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using React refs with Remotion Series.Sequence in TypeScript/React\nDESCRIPTION: Shows how to attach React refs to individual `<Series.Sequence>` elements for direct DOM access, as supported in Remotion from v3.3.4. Requires `React`, `remotion`, and TypeScript typing for `useRef<HTMLDivElement>`. The refs allow for imperative manipulation or reading of mounted sequence containers. Inputs: none except internal; outputs a React component; refs are attached to the first two sequences.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/series.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst Square: React.FC<{\n  color: string;\n}> = () => null;\n// ---cut---\nimport React, { useRef } from \"react\";\nimport { Series } from \"remotion\";\n\nexport const Example: React.FC = () => {\n  const first = useRef<HTMLDivElement>(null);\n  const second = useRef<HTMLDivElement>(null);\n\n  return (\n    <Series>\n      <Series.Sequence durationInFrames={40} ref={first}>\n        <Square color={\"#3498db\"} />\n      </Series.Sequence>\n      <Series.Sequence durationInFrames={20} ref={second}>\n        <Square color={\"#5ff332\"} />\n      </Series.Sequence>\n      <Series.Sequence durationInFrames={70}>\n        <Square color={\"#fdc321\"} />\n      </Series.Sequence>\n    </Series>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Enhanced Interpolate Function in Remotion (TSX)\nDESCRIPTION: This snippet showcases the updated `interpolate` function in Remotion 2.0. It maps the current `frame` number across specified input ranges (`[0, 10, durationInFrames - 10, durationInFrames]`) to corresponding output opacity values (`[0, 1, 1, 0]`), effectively creating a fade-in effect for the first 10 frames and a fade-out effect for the last 10 frames. This demonstrates the function's ability to handle more complex interpolations with input/output arrays longer than two elements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-04-15-remotion-2-0.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx\nconst opacity = interpolate(frame, [0, 10, durationInFrames - 10, durationInFrames], [0, 1, 1, 0]);\n```\n```\n\n----------------------------------------\n\nTITLE: Prefetching Media using prefetch() in Remotion with TypeScript\nDESCRIPTION: This snippet illustrates how to use the `prefetch` function from the 'remotion' package (available in v3.2.23+) to fully download a media asset (e.g., a video) and convert it into a Blob URL. It returns an object with `waitUntilDone`, a function returning a promise that resolves when the download is complete, and `free`, a function to release the created Blob URL and associated memory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/preloading.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {prefetch} from 'remotion';\n\nconst {free, waitUntilDone} = prefetch('https://example.com/video.mp4');\n\nwaitUntilDone().then(() => {\n  console.log('Video has finished loading');\n});\n\n// Call free() if you want to un-prefetch and free up the memory:\nfree();\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/babel-loader with npm (Bash)\nDESCRIPTION: This command installs the `@remotion/babel-loader` Node.js package using the npm package manager. The `--save-exact` flag ensures that the exact version of the package is recorded in the project's `package.json` file, preventing potential issues caused by minor version updates. This is recommended practice when working with Remotion packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/babel-loader/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/babel-loader --save-exact\n```\n\n----------------------------------------\n\nTITLE: Conditionally Copying or Dropping Video Tracks in ConvertMedia using Remotion WebCodecs - TypeScript\nDESCRIPTION: This TypeScript example shows integration of canCopyVideoTrack within the convertMedia pipeline from @remotion/webcodecs. It evaluates in an onVideoTrack callback whether a given video track can be copied without re-encoding based on input and output containers, rotation, and resize options. If canCopyVideoTrack returns true, the track is copied; otherwise, it is dropped (real implementations could re-encode instead). Dependencies: @remotion/webcodecs. Expects proper container, codec, and input video source configuration. Demonstrates conditional media pipeline steps based on track capabilities.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/can-copy-video-track.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {convertMedia, canCopyVideoTrack} from '@remotion/webcodecs';\\n\\nawait convertMedia({\\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.webm',\\n  container: 'webm',\\n  videoCodec: 'vp8',\\n  audioCodec: 'opus',\\n  onVideoTrack: async ({track, inputContainer, outputContainer}) => {\\n    const canCopy = canCopyVideoTrack({\\n      outputContainer,\\n      inputTrack: track,\\n      inputContainer,\\n      rotationToApply: 0,\\n      resizeOperation: null,\\n    });\\n\\n    if (canCopy) {\\n      return {type: 'copy'};\\n    }\\n\\n    // In reality, you would re-encode the track here\\n    return {type: 'drop'};\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Building Remotion Render Server Docker Image - Console\nDESCRIPTION: Invokes Docker to build a container image tagged as remotion-render-server from the current directory. The resulting image encapsulates all server dependencies and code for portable deployment. Docker must be installed and running.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-render-server/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t remotion-render-server .\n```\n\n----------------------------------------\n\nTITLE: Applying Styles to <OffthreadVideo> (via <Img>) in Remotion (tsx)\nDESCRIPTION: Illustrates how to apply CSS styles using the `style` prop. Although the example uses an `<Img>` tag, the concept applies to `<OffthreadVideo>` as it renders an `<Img>` tag during the rendering process. This snippet sets the height and width of the displayed element. Requires `AbsoluteFill`, `Img`, and `staticFile` imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Img, staticFile} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Img src={staticFile('video.webm')} style={{height: 720, width: 1280}} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/media-parser with npm - Bash\nDESCRIPTION: This Bash snippet shows how to install the @remotion/media-parser package using npm with the exact version, avoiding caret (^) ranges for strict version alignment. Required dependencies include npm and Node.js. The installation command should be run from the root of your JavaScript project, and ensures compatibility across all remotion packages by enforcing version consistency.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/media-parser/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/media-parser --save-exact\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Gradient Background - TypeScript/TSX\nDESCRIPTION: Implements a reusable React component that fills the video with a linear gradient background. Relies on Remotion and React. Takes no parameters and outputs a full-frame styled AbsoluteFill div. Intended to be imported and rendered as a background in compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nexport const Background: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        background: 'linear-gradient(to bottom, #000021, #010024)',\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in reversePath with Invalid SVG Path in TypeScript\nDESCRIPTION: This snippet illustrates how the reversePath function from the @remotion/paths package handles invalid SVG path inputs in TypeScript. When provided with a malformed path string ('remotion'), the function will throw an error with the message 'Malformed path data: ...'. The code requires the @remotion/paths package and expects an SVG path string as input. Outputs an exception on invalid input, and developers should be prepared to handle this error case.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/reverse-path.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { reversePath } from \"@remotion/paths\";\n// ---cut---\nreversePath(\"remotion\"); // Error: Malformed path data: ...\n```\n\n----------------------------------------\n\nTITLE: Creating Remotion Lambda Site with Folder Expiry via CLI (Bash)\nDESCRIPTION: This command uses the Remotion CLI (`npx remotion lambda sites create`) to initialize a new Lambda site named 'my-site-name'. The `--enable-folder-expiry` flag configures the associated S3 bucket with lifecycle rules for automatic file deletion based on prefixes and modification dates. Requires Remotion CLI (v4.0.32+), configured AWS credentials, and the `s3:PutLifecycleConfiguration` permission.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/autodelete.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites create --site-name=my-site-name --enable-folder-expiry\n```\n\n----------------------------------------\n\nTITLE: Source Default Audio Track Handler Remotion WebCodecs TypeScript\nDESCRIPTION: This snippet presents the source code for defaultOnAudioTrackHandler, the internal default implementation for onAudioTrack in convertMedia(). The function returns specific AudioOperation behaviors based on codec capabilities, such as copying audio if possible, dropping unsupported tracks, or re-encoding with a default bitrate and codec, and fails otherwise. It requires the @remotion/webcodecs package, specifically canReencodeAudioTrack, AudioOperation, ConvertMediaOnAudioTrackHandler, and getDefaultAudioCodec. Important parameters include the provided audio track, the codecs, log level, and container format. It expects a context object and returns a resolved AudioOperation promise describing how the audio track should be handled.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/default-on-audio-track-handler.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {canReencodeAudioTrack, AudioOperation, ConvertMediaOnAudioTrackHandler, getDefaultAudioCodec} from '@remotion/webcodecs';\\n\\nconst DEFAULT_BITRATE = 128_000;\\n\\nexport const defaultOnAudioTrackHandler: ConvertMediaOnAudioTrackHandler = async ({track, defaultAudioCodec, logLevel, inputContainer, outputContainer, canCopyTrack}): Promise<AudioOperation> => {\\n  const bitrate = DEFAULT_BITRATE;\\n\\n  if (canCopyTrack) {\\n    return Promise.resolve({type: 'copy'});\\n  }\\n\\n  // In the future, we might support containers that don't support audio\\n  // (like GIF, animated WebP, etc.) - in that case, we should drop the audio\\n  if (defaultAudioCodec === null) {\\n    return Promise.resolve({type: 'drop'});\\n  }\\n\\n  const canReencode = await canReencodeAudioTrack({\\n    audioCodec: defaultAudioCodec,\\n    track,\\n    bitrate,\\n    sampleRate: null,\\n  });\\n\\n  if (canReencode) {\\n    return Promise.resolve({\\n      type: 'reencode',\\n      bitrate,\\n      audioCodec: defaultAudioCodec,\\n      sampleRate: null,\\n    });\\n  }\\n\\n  return Promise.resolve({type: 'fail'});\\n};\n```\n\n----------------------------------------\n\nTITLE: Correct usage of useCurrentFrame() with Remotion Motion Blur in TypeScript\nDESCRIPTION: This TypeScript React snippet provides the correct way to use the useCurrentFrame() hook inside a child component which is rendered within the <CameraMotionBlur> provider. This approach ensures that the hook subscribes to the appropriate React context for accurate motion blur effects. It depends on remotion and @remotion/motion-blur packages. Input: None directly; Output: JSX with proper motion blur rendering. Key parameter: frame, the current animation frame.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/common-mistake.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AbsoluteFill, useCurrentFrame} from 'remotion';\\nimport {CameraMotionBlur} from '@remotion/motion-blur';\\n\\nconst A: React.FC = () => {\\n  const frame = useCurrentFrame();\\n\\n  return (\\n    <AbsoluteFill\\n      style={{\\n        backgroundColor: 'red',\\n        justifyContent: 'center',\\n        alignItems: 'center',\\n        color: 'white',\\n        fontSize: frame,\\n      }}\\n    >\\n      A\\n    </AbsoluteFill>\\n  );\\n};\\n\\nexport const MyComp = () => {\\n  return (\\n    <AbsoluteFill>\\n      <CameraMotionBlur>\\n        <A />\\n      </CameraMotionBlur>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Remotion Temporary Directory (Bash)\nDESCRIPTION: This command demonstrates how to execute a Remotion render process using `npx` while specifying a custom temporary directory (`/var/tmp`) by setting the `TMPDIR` environment variable inline. This is effective on Linux and macOS systems when the default temporary directory has limited space. Remotion uses Node.js's `os.tmpdir()` API, which checks for `TMPDIR`, `TMP`, or `TEMP` environment variables.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/changing-temp-dir.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTMPDIR=/var/tmp npx remotion render\n```\n\n----------------------------------------\n\nTITLE: Launching Remotion Studio Preview - Console\nDESCRIPTION: Starts the Remotion Studio interactive preview environment using the \\\"npx remotion studio\\\" command. This serves the video project locally with hot-reloading features so users can edit parameters and immediately preview changes. Requires project dependencies to be previously installed. Outputs a local development server URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-music-visualization/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion studio\n```\n\n----------------------------------------\n\nTITLE: Importing Functions and Types from @remotion/cloudrun/client in TypeScript\nDESCRIPTION: This snippet demonstrates how to import specific functions (like `deleteService`, `renderMediaOnCloudrun`, `getSites`) and types (`RenderMediaOnCloudrunInput`, `RenderStillOnCloudrunInput`) from the `@remotion/cloudrun/client` package. These imports provide access to the light client functionalities for managing and interacting with Remotion Cloud Run services without including heavy renderer dependencies, suitable for backend or serverless function environments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/light-client.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// organize-imports-ignore\n// ---cut---\nimport {\n  deleteService,\n  deleteSite,\n  getOrCreateBucket,\n  getRegions,\n  getServiceInfo,\n  getServices,\n  getSites,\n  renderMediaOnCloudrun,\n  renderStillOnCloudrun,\n  speculateServiceName,\n} from \"@remotion/cloudrun/client\";\n\nimport type {\n  RenderMediaOnCloudrunInput,\n  RenderStillOnCloudrunInput,\n} from \"@remotion/cloudrun/client\";\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.exp Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.exp`. This easing function uses an exponential curve, typically resulting in a strong ease-in effect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nstatic exp(t): number\n```\n\n----------------------------------------\n\nTITLE: Upgrading Linux Kernel on EC2 Instance (Bash)\nDESCRIPTION: Updates the package list, upgrades installed packages non-interactively, and reboots the EC2 instance. This is done to ensure the system has the latest updates, potentially including kernel improvements necessary for GPU drivers.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo bash -c \"apt update && export DEBIAN_FRONTEND=noninteractive && export NEEDRESTART_MODE=a && apt upgrade -y && reboot\"\n```\n\n----------------------------------------\n\nTITLE: Structure of Data Returned by getAvailableFonts() in TypeScript\nDESCRIPTION: This snippet illustrates the structure of the array returned by `getAvailableFonts()`. Each element is an object containing `fontFamily` (for CSS usage), `importName` (for direct imports like `@remotion/google-fonts/[importName]`), and a `load` function (available from v3.3.64) for dynamically importing the font when using ES Modules.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/get-available-fonts.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n[\n  {\n    fontFamily: \"ABeeZee\",\n    importName: \"ABeeZee\",\n    load: () => import(\"./ABeeZee\"), // Available from v3.3.64\n  },\n  {\n    fontFamily: \"Abel\",\n    importName: \"Abel\",\n    load: () => import(\"./Abel\"),\n  },\n  {\n    fontFamily: \"Abhaya Libre\",\n    importName: \"AbhayaLibre\",\n    load: () => import(\"./AbhayaLibre\"),\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.circle Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.circle`. This easing function is derived from a circular curve, typically resulting in an ease-in effect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nstatic circle(t): number\n```\n\n----------------------------------------\n\nTITLE: Rendering and Sorting Selection Outlines in Timeline Editor (TypeScript)\nDESCRIPTION: This snippet introduces a component that renders all selection outlines, sorting them such that the selected item is rendered last and appears above all others, ensuring correct z-index for drag handles. It consumes the full items array and selection state, utilizing React for list rendering. Inputs are the full item list with selection; outputs are outline overlays appropriately layered for user interaction.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: item.ts\\n// @include: item\\n// @filename: ResizeHandle.tsx\\n// @include: ResizeHandle\\n// @filename: SelectionOutline.tsx\\n// @include: SelectionOutline\\n// @filename: SortedOutlines.tsx\\n// ---cut---\\n// @include: SortedOutlines\n```\n\n----------------------------------------\n\nTITLE: Navigating into the Project Directory using Bash\nDESCRIPTION: These commands change the current directory first into the cloned `remotion-serverless` folder and then into the `apigw-sqs-app` sub-directory, preparing for dependency installation and deployment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd remotion-serverless && cd apigw-sqs-app\n```\n\n----------------------------------------\n\nTITLE: Embedding Animated GIFs with @remotion/gif (TypeScript/React)\nDESCRIPTION: This snippet explains how to display animated GIFs. It requires installing the `@remotion/gif` package and importing the `Gif` component. Use the `Gif` component with `src` and `style` props, similar to the `Img` component, to embed and style the GIF.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Gif} from '@remotion/gif';\n\nexport const MyComp: React.FC = () => {\n\treturn (\n\t\t<Gif\n\t\t\tsrc=\"https://media.giphy.com/media/l0MYd5y8e1t0m/giphy.gif\"\n\t\t\tstyle={{width: '100%'}}\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Remotion Documentation Server Locally (Shell)\nDESCRIPTION: Changes the current directory to `packages/docs` and executes the `start` script using pnpm. This typically launches a local Docusaurus development server, allowing contributors to preview documentation changes. Dependency: pnpm, Node.js, Docusaurus.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/docs\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Handling Thumbnail Error Event Details\nDESCRIPTION: Provides an example of how to access the specific error object when handling the 'error' event fired by the <Thumbnail> component. The error details are available in the `e.detail.error` property of the event object passed to the listener callback.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/thumbnail.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ThumbnailRef} from '@remotion/player';\nimport {useRef} from 'react';\nconst ref = useRef<ThumbnailRef>(null);\n// ---cut---\nref.current?.addEventListener('error', (e) => {\n  console.log('error ', e.detail.error); // error [Error: undefined is not a function]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Credentials for Lambda Triggering - Env\nDESCRIPTION: Shows the expected format for the .env configuration file required by Supabase Edge Functions, specifying AWS credentials (AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY). These environment variables are necessary for authenticating API requests to AWS Lambda when rendering media through Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/supabase.mdx#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nAWS_ACCESS_KEY_ID=xxx\nAWS_SECRET_ACCESS_KEY=xxx\n\n```\n\n----------------------------------------\n\nTITLE: Installing Vulkan Library (Bash)\nDESCRIPTION: Installs the Vulkan loader library (`libvulkan1`) and essential build tools (`build-essential`), which are prerequisites for enabling Vulkan-based GPU acceleration in Chrome for Remotion rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y build-essential libvulkan1\n```\n\n----------------------------------------\n\nTITLE: Rendering Stargazer Video from the CLI - Shell\nDESCRIPTION: Uses the Remotion CLI via npx to render the stargazer video composition. The command 'npx remotion render' runs the rendering process without needing a global install. Assumes all environment variables and dependencies have been configured. Input: None (contextually, may require parameters for source repo). Output: Rendered video file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-stargazer/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing NVIDIA GPU Drivers (Bash)\nDESCRIPTION: Downloads the specified NVIDIA GPU driver using `wget`, executes the installer script silently disabling the Nouveau driver, and then removes the downloaded installer file. This step installs the proprietary drivers necessary for the GPU.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nDRIVER_URL=\"https://us.download.nvidia.com/tesla/535.104.12/NVIDIA-Linux-x86_64-535.104.12.run\"\nDRIVER_NAME=\"NVIDIA-Linux-driver.run\"\nwget -O \"$DRIVER_NAME\" \"$DRIVER_URL\"\nsudo sh \"$DRIVER_NAME\" --disable-nouveau --silent\nrm \"$DRIVER_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Serving Local Files via HTTP using npx serve\nDESCRIPTION: This command uses 'npx serve' to start a local HTTP server for the specified directory ('C://Users/Joe/Documents'). The '--cors' flag enables Cross-Origin Resource Sharing, allowing requests from the Remotion development server. This is a workaround to make local assets accessible to Remotion via HTTP URLs when copying them to the 'public' folder is not feasible.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/absolute-paths.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx serve --cors C://Users/Joe/Documents\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Act As Service Account\nDESCRIPTION: Specifies the IAM permission required for the deploying entity to act as the designated service account during the deployment process. This allows the deployment to assume the necessary permissions granted to that service account.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\niam.serviceAccounts.actAs\n```\n\n----------------------------------------\n\nTITLE: Creating a Trail Animation Component in Remotion (TSX)\nDESCRIPTION: This snippet defines a reusable `Trail` component in Remotion. It accepts `amount`, `extraOffset`, and `children` as props. It renders the `children` `amount` times, each within a Remotion `Sequence` to stagger their appearance based on the index (`i * 3`). Each child instance is translated vertically by `-extraOffset`, wrapped in a `Move` component (with 0 delay initially), and scaled down based on its index (`1 - i / amount`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/Trail.tsx\"\n// @filename: Move.tsx\nexport const Move: React.FC<{\n  children: React.ReactNode;\n  delay: number;\n}> = () => null;\n\n// @filename: Trail.tsx\n// ---cut---\nimport React from 'react';\nimport {AbsoluteFill, Sequence} from 'remotion';\nimport {Move} from './Move';\n\nexport const Trail: React.FC<{\n  amount: number;\n  extraOffset: number;\n  children: React.ReactNode;\n}> = ({amount, extraOffset, children}) => {\n  return (\n    <AbsoluteFill>\n      {new Array(amount).fill(true).map((a, i) => {\n        return (\n          <Sequence from={i * 3}>\n            <AbsoluteFill\n              style={{\n                translate: `0 ${-extraOffset}px`,\n              }}\n            >\n              <Move delay={0}>\n                <AbsoluteFill\n                  style={{\n                    scale: String(1 - i / amount),\n                  }}\n                >\n                  {children}\n                </AbsoluteFill>\n              </Move>\n            </AbsoluteFill>\n          </Sequence>\n        );\n      })}\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for React Plugin (TypeScript)\nDESCRIPTION: Modifies the `vite.config.ts` file to include the `@vitejs/plugin-react` plugin. This allows Vite, the build tool often used with Vue, to process React components (specifically JSX/TSX files) required by Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {fileURLToPath, URL} from 'node:url';\nimport {defineConfig} from 'vite';\nimport vue from '@vitejs/plugin-vue';\nimport react from '@vitejs/plugin-react';\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    react({\n      include: /\\.(jsx|tsx)$/,\n    }),\n  ],\n  resolve: {\n    alias: {\n      '@': fileURLToPath(new URL('./src', import.meta.url)),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Transcribing Audio with Remotion Whisper Script - Console\nDESCRIPTION: Uses Bun or Node.js to run the Remotion Whisper transcription script for generating captions. The script prompts for an audio file and speech start time, then produces a captions.json file in the public folder. Requires either Bun or tsx for Node.js, and the '@remotion/install-whisper-cpp' dependency installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-audiogram/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nbun transcribe.ts\n# With Node.js: `npx tsx transcribe.ts`\n\n```\n\n----------------------------------------\n\nTITLE: Parsing Video Metadata Using Server Worker on Bun - Remotion Media Parser (TypeScript)\nDESCRIPTION: This snippet shows usage of parseMediaOnServerWorker from @remotion/media-parser/server-worker to extract duration and dimensions from a local video file on a Bun server environment using a Worker. The code runs asynchronously, allowing server applications to parse local files without blocking the main request thread. Dependencies are @remotion/media-parser/server-worker and Bun's Worker API. The input is an object with 'src' (local file path) and 'fields', and the return value contains requested metadata. Unlike parseMediaOnWebWorker, it also supports local file system paths.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/workers.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMediaOnServerWorker} from '@remotion/media-parser/server-worker';\\n\\nconst result = await parseMediaOnServerWorker({\\n  src: '/tmp/video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n});\\n\\nconsole.log(result.durationInSeconds); // 10\\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\\n\n```\n\n----------------------------------------\n\nTITLE: Getting Thumbnail Container Node via Ref\nDESCRIPTION: Demonstrates using the `getContainerNode()` method on a `ThumbnailRef` to obtain the underlying HTMLDivElement of the thumbnail. This allows attaching custom DOM event listeners (like 'click' in the example) directly to the thumbnail's container element within a `useEffect` hook.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/thumbnail.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ThumbnailRef} from '@remotion/player';\nimport {useEffect, useRef} from 'react';\n// ---cut---\nconst thumbnailRef = useRef<ThumbnailRef>(null);\n\nuseEffect(() => {\n  if (!thumbnailRef.current) {\n    return;\n  }\n  const container = thumbnailRef.current.getContainerNode();\n  if (!container) {\n    return;\n  }\n\n  const onClick = () => {\n    console.log('thumbnail got clicked');\n  };\n\n  container.addEventListener('click', onClick);\n  return () => {\n    container.removeEventListener('click', onClick);\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Toggling Remotion Studio Playback Programmatically (TSX)\nDESCRIPTION: This TSX snippet shows how to programmatically toggle the playback state in Remotion Studio by directly calling the imported `toggle` function from `@remotion/studio` without any arguments. This is useful for triggering play/pause based on application logic rather than direct user interaction like a button click.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/toggle.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toggle} from '@remotion/studio';\n\n// Call without event parameter\ntoggle();\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners to Remotion Thumbnail\nDESCRIPTION: Shows how to use the `addEventListener` method, accessed via a `ThumbnailRef`, to listen for specific events emitted by the <Thumbnail> component. This example sets up an 'error' event listener within a `useEffect` hook to log any errors that occur.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/thumbnail.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ThumbnailRef} from '@remotion/player';\nimport {useEffect, useRef} from 'react';\n// ---cut---\nconst thumbnailRef = useRef<ThumbnailRef>(null);\n\nuseEffect(() => {\n  if (!thumbnailRef.current) {\n    return;\n  }\n\n  thumbnailRef.current.addEventListener('error', (e) => {\n    console.log('error', e.detail.error);\n  });\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Remotion Lambda Site - Remotion CLI - Bash\nDESCRIPTION: This Bash snippet uses the Remotion CLI to create or update a Lambda site with a specified entry file and site name. If '--site-name' matches an existing site, the site is updated; otherwise, a new site is created and a new URL is generated. Required parameters include the entry point (e.g., 'src/index.ts') and optionally the '--site-name' to target a specific deployment. Users must update their 'serveUrl' parameter if the URL changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/upgrading.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites create src/index.ts --site-name=my-name\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/lottie via pnpm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @remotion/lottie package using pnpm, an alternative JavaScript package manager. Like the npm example, it brings Lottie animation support into the Remotion project. Requires pnpm to be installed in the environment, and a project set up.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-08-10-remotion-3-2.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/lottie\n```\n\n----------------------------------------\n\nTITLE: Installing Chrome Headless Shell via Remotion CLI in Dockerfile\nDESCRIPTION: Uses the Remotion CLI (`npx remotion browser ensure`) to download and install the appropriate version of Chrome Headless Shell within the Docker image. This browser is used for rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_7\n\nLANGUAGE: docker\nCODE:\n```\nRUN npx remotion browser ensure\n```\n\n----------------------------------------\n\nTITLE: Setting Chromium Disable Web Security via Remotion Config using TypeScript\nDESCRIPTION: This snippet demonstrates how to disable Chromium's web security features (like CORS) by setting the `disableWebSecurity` option to `true` in the Remotion configuration file using `Config.setChromiumDisableWebSecurity()`. Requires importing `Config` from `@remotion/cli/config`. Prior to v3.3.39, the method was `Config.Puppeteer.setChromiumDisableWebSecurity()`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/chromium-flags.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\n// ---cut---\n\nConfig.setChromiumDisableWebSecurity(true);\n```\n\n----------------------------------------\n\nTITLE: Rendering InvestorGrid React Component\nDESCRIPTION: Renders the custom `InvestorGrid` React component using JSX syntax. This component is responsible for displaying information about the investors mentioned in the surrounding text.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-09-seed-funding.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<InvestorGrid />\n```\n\n----------------------------------------\n\nTITLE: Using getStaticFiles() to List and Use Public Files in Remotion (TypeScript/TSX)\nDESCRIPTION: This example demonstrates importing `getStaticFiles` and `StaticFile` from `@remotion/studio` to retrieve an array of objects representing files in the `public/` folder. It shows the structure of the returned objects (including `name`, `src`, `sizeInBytes`, `lastModified`) via a comment block. It illustrates how to find a specific file by name and correctly use its `src` property with Remotion media components like `<Video>`, emphasizing not to use the `name` directly as a source URL. It requires `@remotion/studio` and `remotion` dependencies. Note that this function primarily works within the Remotion Studio environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/get-static-files.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getStaticFiles, StaticFile } from \"@remotion/studio\";\nimport { Video } from \"remotion\";\n\nconst files = getStaticFiles();\n/*\n[\n  {\n    \"name\": \"video.mp4\",\n    \"src\": \"/static-7n5spa/video.mp4\",\n    \"sizeInBytes\": 432944,\n    \"lastModified\": 1670170466865\n  },\n  {\n    \"name\": \"assets/data.json\",\n    \"src\": \"/static-7n5spa/assets/data.json\",\n    \"sizeInBytes\": 1311,\n    \"lastModified\": 1670170486089\n  },\n]\n*/\n\n// ❗ Don't pass the `name` directly to the `src` of a media element\nconst videoName = files[0].name;\n\n// ✅ Wrap it in staticFile() instead or use `src`\nconst videoSrc = files[0].src;\n\n// Find a file by it's name and import it\nconst data = files.find((f) => {\n  return f.name === \"video.mp4\";\n}) as StaticFile; // Use `as StaticFile` to assert the file exists\n\n// Use the `src` property to get a src to pass to a media element\n<Video src={data.src} />;\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Lambda via npm (Bash)\nDESCRIPTION: This snippet demonstrates how to install the @remotion/lambda npm package using the npm package manager with the --save-exact flag to ensure an exact version is used. Prerequisites include Node.js and npm installed on the system. The main parameter is the package name '@remotion/lambda'; the --save-exact flag prevents use of version specifiers like ^ or ~, enforcing dependency version consistency. Successful execution adds the package to package.json with the specified version, avoiding version mismatches across project dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/lambda/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/lambda --save-exact\n```\n\n----------------------------------------\n\nTITLE: Preloading GIFs with preloadGif() in Remotion - TypeScript\nDESCRIPTION: This snippet shows how to asynchronously preload a GIF image using the preloadGif() function from the @remotion/gif library in a TypeScript environment. The returned object provides waitUntilDone(), which returns a Promise that resolves when the GIF is ready for use, and free(), which should be called to clean up the preloaded resource when it is no longer needed. The snippet logs GIF readiness and ensures memory management by freeing up the resource afterward. Intended for use in animation or video projects utilizing Remotion's <Player> component. Dependencies: @remotion/gif (v3.3.38+), a valid GIF URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/gif/preload-gif.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { preloadGif } from \"@remotion/gif\";\n\nconst { waitUntilDone, free } = preloadGif(\n  \"https://media.giphy.com/media/xT0GqH01ZyKwd3aT3G/giphy.gif\"\n);\n\nwaitUntilDone().then(() => {\n  console.log(\"The GIF is now ready to play!\");\n\n  // Later, free the memory of the GIF\n  free();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Codec Explicitly in Remotion Config (TypeScript)\nDESCRIPTION: Specifies the audio encoding codec using the `Config` object in `remotion.config.ts`. The default depends on the chosen video `codec`. Use `pcm-16` for uncompressed audio. This setting takes precedence over the audio codec implied by the main `codec` setting. Not all container/codec combinations are valid. Depends on the `Config` object from `@remotion/cli/config`. The `--audio-codec` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setAudioCodec('pcm-16');\n```\n\n----------------------------------------\n\nTITLE: Specifying Base Image in Dockerfile\nDESCRIPTION: Sets the base image for the Docker container using a specific Node.js version (22) based on the Debian 'bookworm-slim' distribution. This is the first step in the Dockerfile.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nFROM node:22-bookworm-slim\n```\n\n----------------------------------------\n\nTITLE: Embedding Mux Video with NewMuxVideo Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the usage of the custom 'NewMuxVideo' React component to embed a video hosted on Mux. It utilizes the 'muxId' prop to specify the video identifier and applies inline styling using the 'style' prop to set a maximum width. This component needs to be imported (as shown by `import {NewMuxVideo} from '../../src/components/MuxVideo';` in the surrounding context) before use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/timeline/demo.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<NewMuxVideo muxId=\"kK6oU02d5muc1gbmxBS8iH6fqZ00zBAE01AFaTL6oHRiqY\" style={{maxWidth: 400}} />\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda Function (npm/pnpm/yarn) - Bash\nDESCRIPTION: This Bash snippet executes the project-specific deployment script for deploying the Remotion Lambda function to AWS. It uses npm, pnpm, or yarn to invoke the 'deploy-fn' script defined in package.json. Requires package.json configuration, Node.js, and appropriate environment setup. Expected output is a triggered deployment process with terminal logs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy-fn\n```\n\n----------------------------------------\n\nTITLE: Composing Shrinking Animation in Main Composition - TypeScript/TSX\nDESCRIPTION: Illustrates application of the Shrinking effect to the Dot and Background components in the main composition. All components must be defined elsewhere. Wrapping Dot in Shrinking creates a scale-out animated effect in the final output frame.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: Shrinking.tsx\nexport const Shrinking: React.FC<{\n  children: React.ReactNode;\n}> = () => null;\n// @filename: Background.tsx\nexport const Background: React.FC = () => null;\n// @filename: Dot.tsx\nexport const Dot: React.FC = () => null;\n\n// @filename: Composition.tsx\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\nimport {Background} from './Background';\nimport {Dot} from './Dot';\nimport {Shrinking} from './Shrinking';\n\n// ---cut---\n\nexport const MyComposition: React.FC = () => {\n  return (\n    <AbsoluteFill>\n      <Background />\n      <Shrinking>\n        <Dot />\n      </Shrinking>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Remotion Lambda Site Names Quietly (Bash)\nDESCRIPTION: Executes the `remotion lambda sites ls` command via `npx` with the `--quiet` (or `-q`) flag. This variation returns only a space-separated list of the names of the deployed Remotion Lambda sites, suppressing other details like bucket, size, and URL. Requires `npx`, the `remotion` CLI, and configured AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/sites/ls.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites ls -q\n```\n\n----------------------------------------\n\nTITLE: Rendering the Example Video on AWS Lambda via npm Script\nDESCRIPTION: Executes the 'remotion:renderlambda' script defined in `package.json`. This initiates the video rendering process using the previously deployed AWS Lambda function, leveraging cloud resources. Requires successful deployment and AWS configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnpm run remotion:renderlambda\n```\n\n----------------------------------------\n\nTITLE: Tracking Upload Progress with XMLHttpRequest - TypeScript\nDESCRIPTION: Provides a function that uploads a file to a presigned URL using XMLHttpRequest to support upload progress tracking. Calls the onProgress callback as bytes are transferred. Requires standard browser APIs, receives file, url and onProgress as arguments. Resolves on successful upload, or rejects on error or non-200 status codes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/presigned-urls.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type UploadProgress = {\n  progress: number;\n  loadedBytes: number;\n  totalBytes: number;\n};\n\nexport type OnUploadProgress = (options: UploadProgress) => void;\n\nexport const uploadWithProgress = ({file, url, onProgress}: {file: File; url: string; onProgress: OnUploadProgress}): Promise<void> => {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('PUT', url);\n\n    xhr.upload.onprogress = function (event) {\n      if (event.lengthComputable) {\n        onProgress({\n          progress: event.loaded / event.total,\n          loadedBytes: event.loaded,\n          totalBytes: event.total,\n        });\n      }\n    };\n\n    xhr.onload = function () {\n      if (xhr.status === 200) {\n        resolve();\n      } else {\n        reject(new Error(`Upload failed with status: ${xhr.status}`));\n      }\n    };\n\n    xhr.onerror = function () {\n      reject(new Error('Network error occurred during upload'));\n    };\n\n    xhr.setRequestHeader('content-type', file.type);\n    xhr.send(file);\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Google Fonts in React by Importing CSS (TypeScript)\nDESCRIPTION: Illustrates usage of a previously imported Google Font by referencing its CSS font-family within a React component. CSS is imported as a module, and a style object in JSX assigns the `fontFamily` property. Assumes prior use of a CSS import for a Google Font and a compatible React build pipeline.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/fonts.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport \"./font.css\";\n\nconst MyComp: React.FC = () => {\n  return <div style={{ fontFamily: \"Bangers\" }}>Hello</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/studio via npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@remotion/studio` package. The `--save-exact` flag ensures that the exact version specified is added to the project's dependencies in the `package.json` file, rather than a version range using `^` or `~`. This is recommended to ensure all Remotion packages used in a project share the exact same version, avoiding potential compatibility issues.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/studio/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/studio --save-exact\n```\n\n----------------------------------------\n\nTITLE: Downloading a Whisper.cpp Model using downloadWhisperModel() in TypeScript\nDESCRIPTION: This snippet demonstrates importing and calling the `downloadWhisperModel` function from `@remotion/install-whisper-cpp`. It downloads the 'medium.en' model into a specified folder (constructed using Node.js `path`) and captures the return value indicating if the model file already existed. This function is asynchronous and should be awaited. It assumes Whisper.cpp itself has already been installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/install-whisper-cpp/download-whisper-model.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport path from 'path';\nimport {downloadWhisperModel} from '@remotion/install-whisper-cpp';\n\nconst {alreadyExisted} = await downloadWhisperModel({\n  model: 'medium.en',\n  folder: path.join(process.cwd(), 'whisper.cpp'),\n});\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Get Storage Buckets\nDESCRIPTION: Specifies the IAM permission required to retrieve information about specific Cloud Storage buckets. (Note: Full explanation marked as 'ToDo' in the original text).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nstorage.buckets.get\n```\n\n----------------------------------------\n\nTITLE: Identifying AWS Lambda Security Token Invalid Error Message\nDESCRIPTION: This is the specific error message displayed when an AWS region required by Remotion is not enabled in the user's AWS account. Encountering this message indicates a region configuration issue that needs to be resolved by either enabling the region or filtering the regions used by Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/security-token.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThe security token included in the request is invalid\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm - Console\nDESCRIPTION: This command installs all required dependencies defined in the project's package.json file. It must be executed inside the project directory. No additional parameters are required. The expected output is a fully populated node_modules directory with all essential libraries for the Remotion and React Three Fiber template.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-three/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotiond for Deno Experiments in package.json (JSON)\nDESCRIPTION: This package.json script setup uses the experimental Deno-compatible CLI variant 'remotiond'. While Deno is not officially supported, this script lets advanced users test Remotion CLI with Deno via `npx remotiond`. Remotiond must be available; results may vary. Output: attempts CLI operations in Deno runtime.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/cli.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"scripts\\\": {\\n    \\\"render\\\": \\\"remotiond render\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Workaround: Using a Hidden <Img> Tag for CSS Image Properties (TSX)\nDESCRIPTION: Provides a workaround for scenarios where CSS properties like `mask-image` are necessary and the standard `<Img>` component cannot be used directly for the visual effect. It involves rendering a hidden `<Img>` tag (with `opacity: 0` and positioned off-screen) using the same `src`. This forces Remotion to wait for the image resource to download completely, allowing the CSS property (e.g., `maskImage`) to render correctly without flickering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/background-image.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst src = \"abc\";\n// ---cut---\nimport { Img } from \"remotion\";\n\nconst myMarkup = (\n  <>\n    <Img\n      src={src}\n      style={{\n        opacity: 0,\n        position: \"absolute\",\n        left: \"-100%\",\n      }}\n    />\n    <div\n      style={{\n        maskImage: `url(${src})`,\n      }}\n    >\n      <p>Hello World</p>\n    </div>\n  </>\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Events with mediaParserController in TypeScript\nDESCRIPTION: This snippet illustrates how to attach event listeners to a `mediaParserController` instance using `addEventListener`. It shows defining callback functions for the 'pause' and 'resume' events and registering them with the controller. It also highlights the importance of cleaning up listeners using `removeEventListener` when they are no longer needed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/media-parser-controller.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {mediaParserController, parseMedia} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\n\nconst onPause = () => {\n  console.log('Paused');\n};\n\nconst onResume = () => {\n  console.log('Resumed');\n};\n\ncontroller.addEventListener('pause', onPause);\ncontroller.addEventListener('resume', onResume);\n\n// Make sure to cleanup later:\ncontroller.removeEventListener('pause', onPause);\ncontroller.removeEventListener('resume', onResume);\n```\n\n----------------------------------------\n\nTITLE: Triggering Remotion Lambda Render from Supabase Edge Function - TypeScript\nDESCRIPTION: Provides a complete example of a Supabase Edge Function in TypeScript/TSX that triggers a Remotion Lambda render using renderMediaOnLambda from @remotion/lambda-client. Expects AWS credentials from the environment, and receives input props via POSTed JSON. Returns the Lambda response as JSON; errors are logged and returned with a 500 status. The functionName is dynamically constructed (speculateFunctionName), with placeholders for memory, disk, timeout, and AWS region—these should be customized. Dependencies: @remotion/lambda-client (v4.0.265), Deno runtime, AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/supabase.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'jsr:@supabase/functions-js/edge-runtime.d.ts';\n// FIXME: Replace 4.0.265 with the version of Remotion you are using.\nimport {renderMediaOnLambda} from 'npm:@remotion/lambda-client@4.0.265';\n\nDeno.serve(async (req) => {\n  const {props} = await req.json();\n\n  try {\n    const response = await renderMediaOnLambda({\n      serveUrl: 'https://remotion-helloworld.vercel.app',\n      composition: 'HelloWorld',\n      codec: 'h264',\n      // FIXME: Replace with your AWS region\n      region: 'eu-central-1',\n      // FIXME: Add your function specs here\n      functionName: speculateFunctionName({\n        memorySizeInMb: 2048,\n        diskSizeInMb: 2048,\n        timeoutInSeconds: 120,\n      }),\n      inputProps: props,\n    });\n\n    return new Response(JSON.stringify(response), {headers: {'Content-Type': 'application/json'}});\n  } catch (error) {\n    console.error(error);\n    return new Response(JSON.stringify({error: (error as Error).message}), {headers: {'Content-Type': 'application/json'}, status: 500});\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Trimming and Compressing Audio Waveform Data with getWaveformPortion - Remotion - TypeScript\nDESCRIPTION: This TypeScript/TSX snippet demonstrates fetching audio data using getAudioData() and extracting a trimmed, compressed portion of the waveform using getWaveformPortion() from @remotion/media-utils. Dependencies include the @remotion/media-utils package for audio processing and remotion's staticFile utility. The main parameters are audioData (fetched audio information), startTimeInSeconds and durationInSeconds (defining the time slice), numberOfSamples (output data point count), with optional parameters for outputRange and normalization. The output is an array of Bar objects, each containing index and amplitude representing the segment's loudness. The snippet is intended for use in Node.js or browser environments where TypeScript is supported, and expects valid audio files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/get-waveform-portion.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ---cut---\nimport {getAudioData, getWaveformPortion} from '@remotion/media-utils';\nimport {staticFile} from 'remotion';\n\nconst audioData = await getAudioData(staticFile('music.mp3')); /* {\n  channelWaveforms: [Float32Array(4410000), Float32Array(4410000)],\n  sampleRate: 44100,\n  durationInSeconds: 100.0000,\n  numberOfChannels: 2,\n  resultId: \"0.432878981\",\n  isRemote: false\n} */\n\nconst waveformPortion = await getWaveformPortion({\n  audioData,\n  // Will select time range of 20-40 seconds\n  startTimeInSeconds: 20,\n  durationInSeconds: 20,\n  numberOfSamples: 10,\n}); // [{index: 0, amplitude: 0.14}, ... {index: 9, amplitude: 0.79}]\n\nconsole.log(waveformPortion.length); // 10\n\n```\n\n----------------------------------------\n\nTITLE: Defining exact width ResizeOperation in TypeScript\nDESCRIPTION: Shows how to define a `ResizeOperation` object for use with `convertMedia`. This configuration scales a video to have the exact specified `width` (640 pixels), adjusting the height to maintain aspect ratio. It requires the `ResizeOperation` type from `@remotion/webcodecs`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resizing.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ResizeOperation} from '@remotion/webcodecs';\n\nconst resize: ResizeOperation = {\n  mode: 'width',\n  width: 640,\n};\n```\n\n----------------------------------------\n\nTITLE: Using webcodecsController() with convertMedia() in TypeScript\nDESCRIPTION: This snippet demonstrates how to import `webcodecsController` and `convertMedia` from `@remotion/webcodecs`. It shows the creation of a controller instance, passing it to the `convertMedia` function, and subsequently calling the `pause()`, `resume()`, and `abort()` methods on the controller to manage the media conversion process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/webcodecs-controller.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Use webcodecsController()\"\nimport {webcodecsController, convertMedia} from '@remotion/webcodecs';\n\nconst controller = webcodecsController();\n\nconvertMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  container: 'webm',\n  controller,\n});\n\n// Pause\ncontroller.pause();\n\n// Resume\ncontroller.resume();\n\n// Abort\ncontroller.abort();\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Noto Color Emoji Font on Debian/Ubuntu (Docker)\nDESCRIPTION: This command uses the apt-get package manager to install the 'fonts-noto-color-emoji' package. This is necessary for rendering emojis correctly within Remotion applications running on Debian or Ubuntu-based Linux systems, often used within Docker containers for cloud rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/emojis.mdx#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\napt-get install fonts-noto-color-emoji\n```\n\n----------------------------------------\n\nTITLE: Ensuring Chrome Installation via Remotion Node.js API\nDESCRIPTION: Node.js / Bun API function used to programmatically ensure that the required Chrome Headless Shell (or Chrome for Testing if specified) is downloaded and available for Remotion rendering. Useful in server-side rendering environments before processing render requests.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nensureBrowser()\n```\n\n----------------------------------------\n\nTITLE: Enabling Transparent GIFs via Remotion API (JavaScript)\nDESCRIPTION: Sets the intermediate image format to PNG within the options for Remotion rendering functions like `renderMedia()`. This is a prerequisite for rendering GIFs with transparency, as PNG frames preserve the alpha channel needed for the final transparent GIF output.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-as-gif.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimageFormat: \"png\"\n```\n\n----------------------------------------\n\nTITLE: Deleting All Remotion Sites in a Region using TypeScript\nDESCRIPTION: This TypeScript example demonstrates fetching all Remotion sites within a specified GCP region using `getSites()` and subsequently deleting each site using the `deleteSite()` function. It requires the `@remotion/cloudrun` package and iterates through the retrieved sites, passing the necessary `bucketName` and `siteName` (derived from `site.id`) to `deleteSite()`. A confirmation message is logged after each deletion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/deletesite.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {GcpRegion, deleteSite, getSites} from '@remotion/cloudrun';\n\nconst region: GcpRegion = 'australia-southeast1';\n\nconst {sites} = await getSites(region);\n\nfor (const site of sites) {\n  await deleteSite({\n    bucketName: site.bucketName,\n    siteName: site.id,\n  });\n  console.log(`Site ${site.id} deleted.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Studio via GitHub Actions (YAML)\nDESCRIPTION: Defines a GitHub Actions workflow (`.github/workflows/deploy-studio.yml`) for deploying the Remotion Studio to GitHub Pages. It triggers on push to 'main' or manually, checks out code, installs dependencies, bundles the Studio with a specific public path (`--public-path=\"./\"`) required for GitHub Pages, and deploys the `build` folder to the `gh-pages` branch. Requires Remotion version 4.0.127+ for the `--public-path` flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Remotion studio\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - 'main'\npermissions:\n  contents: write\njobs:\n  render:\n    name: Render video\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@main\n      - name: install packages\n        run: npm i\n      - name: Bundle Studio\n        run: npx remotion bundle --public-path=\"./\"\n      - name: Deploy Studio\n        uses: JamesIves/github-pages-deploy-action@v4\n        with:\n          folder: build\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/noise Using pnpm - Bash\nDESCRIPTION: This snippet shows the pnpm command to add the @remotion/noise package, which provides noise effect utilities. Users need to have pnpm set up in their project environment before running this command. The command installs @remotion/noise as a project dependency, enabling access to its noise generation features.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/noise/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/noise\n\n```\n\n----------------------------------------\n\nTITLE: Scaling Video Down with convertMedia in TypeScript\nDESCRIPTION: Demonstrates using the `convertMedia` function from `@remotion/webcodecs` to resize a video from a URL. It scales the video down to a maximum height of 480 pixels while maintaining aspect ratio, saving it as an MP4. This requires the `@remotion/webcodecs` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resizing.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'mp4',\n  resize: {\n    mode: 'max-height',\n    maxHeight: 480,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Inlining defaultProps in Remotion Composition (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to define and inline `defaultProps` directly within the `<Composition>` component in a Remotion project. This setup is required for the Remotion Studio's visual editor to be able to save modified default props back into the source code using the save (💾) button. It shows a `MyComponent` definition with its Zod schema (`myCompSchema`) and a `RemotionRoot` component where the `<Composition>` uses `MyComponent`, links the schema, and provides inline `defaultProps` matching the schema.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/visual-editing.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: MyComponent.tsx\nimport React from 'react';\nimport {z} from 'zod';\n\nexport const myCompSchema = z.object({\n  propOne: z.string(),\n  propTwo: z.string(),\n});\n\nexport const MyComponent: React.FC<z.infer<typeof myCompSchema>> = ({\n  propOne,\n  propTwo,\n}) => {\n  return (\n    <div>\n      <h1>{propOne}</h1>\n      <h2>{propTwo}</h2>\n    </div>\n  );\n};\n\n// @filename: Root.tsx\n// organize-imports-ignore\n// ---cut---\nimport React from 'react';\nimport {Composition} from 'remotion';\nimport {MyComponent, myCompSchema} from './MyComponent';\n\nexport const RemotionRoot: React.FC = () => {\n  return (\n    <Composition\n      id=\"my-video\"\n      component={MyComponent}\n      durationInFrames={100}\n      fps={30}\n      width={1920}\n      height={1080}\n      schema={myCompSchema}\n      defaultProps={{\n        propOne: 'Hello World',\n        propTwo: 'Welcome to Remotion',\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Embedding a Timeline Editor with Player Synchronization in React/TypeScript\nDESCRIPTION: Introduces a structure for integrating both the Player and a (placeholder) Timeline component, demonstrating how to tie together the editing and playback environments for live feedback. Includes state management for tracks and wiring for setTracks, laying the foundation for future timeline manipulation features. Dependencies: React, Remotion Player; Input: None, Output: Player and Timeline UI, both synced to the same track state.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/building-a-timeline.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\ntype Item = {};\ntype Track = {};\nconst inputProps = {};\nimport {Player} from '@remotion/player';\nimport {useState, useMemo} from 'react';\n\nconst Main: React.FC<{\n  tracks: Track[];\n}> = ({tracks}) => {\n  return null;\n};\n\nconst Timeline: React.FC<{\n  tracks: Track[];\n  setTracks: React.Dispatch<React.SetStateAction<Track[]>>;\n}> = () => {\n  return null;\n};\n// ---cut---\nconst Editor: React.FC = () => {\n  const [tracks, setTracks] = useState<Track[]>([\n    {name: 'Track 1', items: []},\n    {name: 'Track 2', items: []},\n  ]);\n\n  const inputProps = useMemo(() => {\n    return {\n      tracks,\n    };\n  }, [tracks]);\n\n  return (\n    <>\n      <Player component={Main} fps={30} inputProps={inputProps} durationInFrames={600} compositionWidth={1280} compositionHeight={720} />\n      <Timeline tracks={tracks} setTracks={setTracks} />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Running Remotion Development Server in Node.js (Console)\nDESCRIPTION: Runs Remotion in development mode for React-based still image design. Requires Node.js and all remotion dependencies to be installed. \"npm run dev\" starts the local development server so you can interactively design images and preview changes. Input: none. Output: launches a dev server on a default local port. Limitations: must be run inside the correct project directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-still/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Listening to Remotion Player Buffering Events\nDESCRIPTION: This TypeScript React component demonstrates how to listen for the `waiting` (buffering starts) and `resume` (buffering ends) events emitted by the Remotion `Player` component. It uses `useRef` to access the Player instance and `useEffect` to add event listeners. The component maintains a `buffering` state variable, updated within the event handlers, which could be used to display a custom loading indicator.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\n// @filename: ./remotion/MyVideo.tsx\nexport const MyVideo = () => <></>;\n\n// @filename: index.tsx\n// ---cut---\nimport {Player, PlayerRef} from '@remotion/player';\nimport {useEffect, useRef, useState} from 'react';\nimport {MyVideo} from './remotion/MyVideo';\n\nexport const App: React.FC = () => {\n  const playerRef = useRef<PlayerRef>(null);\n  const [buffering, setBuffering] = useState(false);\n\n  useEffect(() => {\n    const {current} = playerRef;\n    if (!current) {\n      return;\n    }\n\n    const onBuffering = () => {\n      setBuffering(true);\n    };\n    const onResume = () => {\n      setBuffering(false);\n    };\n\n    current.addEventListener('waiting', onBuffering);\n    current.addEventListener('resume', onResume);\n    return () => {\n      current.removeEventListener('waiting', onBuffering);\n      current.removeEventListener('resume', onResume);\n    };\n  }, [setBuffering]);\n\n  return (\n    <Player\n      ref={playerRef}\n      component={MyVideo}\n      durationInFrames={120}\n      compositionWidth={1920}\n      compositionHeight={1080}\n      fps={30}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Output Height in Remotion Config (TypeScript)\nDESCRIPTION: Overrides the height defined in the composition component for the final render using the `Config` object in `remotion.config.ts`. This allows rendering at a different resolution than specified in the component's props. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v3.2.40. The `--height` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.overrideHeight(600);\n```\n\n----------------------------------------\n\nTITLE: Launching Remotion Studio from CLI - Bash\nDESCRIPTION: Runs the Remotion Studio with a specified index file using npx. This opens an interactive preview UI for compositions defined in src/remotion/index.ts. Prerequisites: Remotion installed, index file exists, and npx available. Input is the path to the root index file; it outputs a running preview server.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion studio src/remotion/index.ts\n```\n\n----------------------------------------\n\nTITLE: Serverless Configuration Snippet in YAML\nDESCRIPTION: Shows a snippet from the 'serverless.yml' file, specifying the organization ('org') and application ('app') identifiers used for associating the service with the Serverless Dashboard.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\norg: changeme\napp: aws-remotion-serverless\nservice: api-render-video\n....\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Arrow Key Icons with JSX - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates how to render keyboard shortcut icons using SVG embedded in JSX within a <kbd> tag, displaying a visual arrow or symbol in the shortcut table. It leverages React-style syntax for attributes (such as style object) and includes an SVG 'path' with a specific 'd' signature to visually represent a keyboard arrow key. Dependencies include React and support for JSX rendering. The input is JSX code containing SVG elements, and the output is rendered HTML showing an icon inline with other keyboard shortcuts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/shortcuts.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<kbd>\n  <svg viewBox=\"0 0 448 512\" style={{ width: 10, display: \"inline\" }}>\n    <path\n      fill=\"currentColor\"\n      d=\"M48.048 304h73.798v128c0 26.51 21.49 48 48 48h108.308c26.51 0 48-21.49 48-48V304h73.789c42.638 0 64.151-51.731 33.941-81.941l-175.943-176c-18.745-18.745-49.137-18.746-67.882 0l-175.952 176C-16.042 252.208 5.325 304 48.048 304zM224 80l176 176H278.154v176H169.846V256H48L224 80z\"\n    ></path>\n  </svg>\n</kbd>\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Read Policy for AWS S3 Buckets - JSON\nDESCRIPTION: This JSON snippet provides an AWS S3 bucket policy configuration that allows public read access to all objects in the specified bucket. Replace \\\"<YOUR-BUCKET-NAME>\\\" with your actual bucket name. The document is necessary for enabling public access, which is required for hosting media files accessible by Remotion renders. Ensure the policy is not overly permissive in production environments to avoid unintended exposure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-azure/README.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2008-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"AllowPublicRead\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"*\"\n      },\n      \"Action\": \"s3:GetObject\",\n      \"Resource\": \"arn:aws:s3:::<YOUR-BUCKET-NAME>/*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Dependency - Shell\nDESCRIPTION: Upgrades Remotion and its dependencies to the latest versions using the Remotion CLI. Should be run in the project root to ensure new features and bug fixes are applied. No extra parameters required.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-audiogram/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion upgrade\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Happy DOM for Bun Tests (TypeScript)\nDESCRIPTION: This TypeScript code snippet (`happydom.ts`) is intended to be preloaded by Bun's test runner (as configured in `bunfig.toml`). It imports `GlobalRegistrator` from `@happy-dom/global-registrator` and calls `GlobalRegistrator.register()` to globally register Happy DOM, providing a browser-like environment (DOM, window, etc.) necessary for rendering and testing React components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/testing.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"happydom.ts\"\nimport {GlobalRegistrator} from '@happy-dom/global-registrator';\n\nGlobalRegistrator.register();\n```\n```\n\n----------------------------------------\n\nTITLE: Identifying Required AWS IAM Permission for Runtime Management\nDESCRIPTION: Specifies the AWS IAM permission 'lambda:PutRuntimeManagementConfig' that needs to be added to the user's policy. This permission allows the upgraded Remotion (v3.3.54+) to lock the Lambda function's runtime version.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/feb-2023-incident.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlambda:PutRuntimeManagementConfig\n```\n\n----------------------------------------\n\nTITLE: Initializing a Remotion Project with Yarn (Shell)\nDESCRIPTION: This shell command uses `yarn create` with the `video` initializer (Remotion's shorthand) to create a new Remotion project structure, automatically setting it up to use Yarn for dependency management. It offers an alternative project setup method for users who prefer Yarn.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-05-06-remotion-2-1.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn create video\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Linux Dependencies (Bash)\nDESCRIPTION: Installs various libraries required for Remotion to function correctly on a Linux system, specifically for handling graphics, audio, and system integration needed by the underlying Chrome rendering engine.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y \\\n  libnss3 \\\n  libdbus-1-3 \\\n  libatk1.0-0 \\\n  libasound2 \\\n  libxrandr2 \\\n  libxkbcommon-dev \\\n  libxfixes3 \\\n  libxcomposite1 \\\n  libxdamage1 \\\n  libcups2 \\\n  libgbm-dev \\\n  libpangocairo-1.0-0 \\\n  libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Project with Tailwind Template via pnpm - Bash\nDESCRIPTION: This command uses pnpm to generate a new Remotion video project preconfigured with TailwindCSS using the '--tailwind' argument. Requires pnpm package manager installed. When run, it scaffolds a Remotion template directory that includes all necessary setup files to use Tailwind utility classes. Project files will be ready for development on completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-07-14-remotion-3-1.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create video --tailwind\n```\n\n----------------------------------------\n\nTITLE: Registering Separate Remotion Compositions in TSX\nDESCRIPTION: This snippet demonstrates the initial setup where two separate React components, `One` and `Two`, are defined and registered as distinct Remotion compositions within the `Root` component using the `<Composition>` tag. Each composition is given a unique ID, dimensions, frame rate, and duration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/combine-compositions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: One.tsx\nimport React from \"react\";\nexport const One: React.FC = () => {\n  return <div>One</div>;\n};\n\n// @filename: Two.tsx\nimport React from \"react\";\nexport const Two: React.FC = () => {\n  return <div>Two</div>;\n};\n\n// @filename: Root.tsx\n// ---cut---\nimport React from \"react\";\nimport { Composition } from \"remotion\";\nimport { One } from \"./One\";\nimport { Two } from \"./Two\";\n\nexport const Root: React.FC = () => {\n  return (\n    <>\n      <Composition\n        id=\"One\"\n        component={One}\n        width={1080}\n        height={1080}\n        fps={30}\n        durationInFrames={120}\n      />\n      <Composition\n        id=\"Two\"\n        component={Two}\n        width={1080}\n        height={1080}\n        fps={30}\n        durationInFrames={120}\n      />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Skia-enabled Remotion Project via yarn - Bash\nDESCRIPTION: This snippet initializes a Remotion project with Skia capabilities using yarn. The command scaffolds a new video project configured to utilize React Native Skia for graphics rendering. Requires yarn to be installed and sufficient rights to create files in the current directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-08-10-remotion-3-2.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn create video --skia\n```\n\n----------------------------------------\n\nTITLE: Executing the Lambda Compositions Command (Bash)\nDESCRIPTION: This command fetches and prints the list of available composition IDs from a Remotion project hosted at the specified serve URL, executed within the context of an AWS Lambda environment. It requires a valid Serve URL obtained via `sites create` or `deploySite()` as an argument. The output typically lists composition IDs along with details like FPS, dimensions, duration, and duration in seconds.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/compositions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda compositions <serve-url>\n```\n\n----------------------------------------\n\nTITLE: Triggering Expiring Remotion Lambda Render via CLI (Bash)\nDESCRIPTION: This command uses the Remotion CLI (`npx remotion lambda render`) to start a render for the 'react-svg' composition within the 'testbed-v6' project. The `--delete-after=\"1-day\"` option instructs Lambda to prefix the render ID and configure the render output for automatic deletion after 1 day, leveraging the pre-configured S3 lifecycle rules on the bucket. Requires Remotion CLI, a deployed site with folder expiry enabled, and valid AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/autodelete.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render testbed-v6 react-svg --delete-after=\"1-day\"\n```\n\n----------------------------------------\n\nTITLE: Setting Remotion Render Flags for Transparent WebM Export (Bash)\nDESCRIPTION: A command-line snippet using Remotion's CLI flags to output a video with alpha channel by specifying image format (PNG), pixel format (yuva420p), and codec (VP8). No JavaScript or TypeScript context required; can be appended to any Remotion CLI render call for a one-time override. No dependencies except having Remotion CLI installed. These options ensure the rendered video is transparent.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transparent-videos.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--image-format=png --pixel-format=yuva420p --codec=vp8\n```\n\n----------------------------------------\n\nTITLE: Running the Render Script with Bun\nDESCRIPTION: Command to execute the rendering script (`render.mjs`) using the Bun runtime. It notes that Bun can directly execute TypeScript files (`render.ts`) without requiring an additional tool like `ts-node`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbun render.mjs\n```\n\n----------------------------------------\n\nTITLE: Polling Rendering Progress with Node.js API - JavaScript\nDESCRIPTION: The getRenderProgress() function retrieves the progress of a video rendering job running on AWS Lambda. This function is used after initiating a render operation and requires the job ID or relevant identifier. Inputs are job identifiers; output is the current progress status of the rendering task.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ngetRenderProgress()\n```\n\n----------------------------------------\n\nTITLE: Saving Static Default Props with saveDefaultProps() in TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of `saveDefaultProps` to save a hardcoded object `{ color: 'green' }` as the new default props for the composition identified by `\"my-composition\"`. The `defaultProps` option accepts a function that returns the props object to be saved.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/save-default-props.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @target: esnext\nimport { saveDefaultProps } from \"@remotion/studio\";\n\nawait saveDefaultProps({\n  compositionId: \"my-composition\",\n  defaultProps: () => {\n    return {\n      color: \"green\",\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Skia in Remotion Entry Point (TypeScript)\nDESCRIPTION: This snippet demonstrates how to modify the application's entry point (e.g., `src/index.ts`) to asynchronously load the Skia WebAssembly binary using `LoadSkia` before registering the main Remotion component (`RemotionRoot`) using `registerRoot`. This ensures Skia is ready before the application starts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/skia.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n```ts twoslash title=\"src/index.ts\"\n// @filename: ./Root.tsx\nexport const RemotionRoot = () => <></>;\n\n// @filename: index.tsx\n// ---cut---\nimport { LoadSkia } from \"@shopify/react-native-skia/src/web\";\nimport { registerRoot } from \"remotion\";\n\n(async () => {\n  await LoadSkia();\n  const { RemotionRoot } = await import(\"./Root\");\n  registerRoot(RemotionRoot);\n})();\n```\n```\n\n----------------------------------------\n\nTITLE: Making Video Elements Report Buffer State using PausableVideo (TypeScript, React)\nDESCRIPTION: Implements PausableVideo, a React component that wraps Remotion's Video and registers its buffering/loading state via BufferContext. Utilizes hooks including useRef, useEffect, useContext, and useId to track and relay video state changes using event listeners on 'canplay' and 'waiting'. Employs forwardRef to support imperative handles. Requires react, remotion, BufferContext, and BufferManager; expects RemotionVideoProps; output is a Video element that emits buffer state for centralized management. Limitations: must substitute for standard <Video> components for integration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/buffer-state.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @filename: BufferManager.tsx\n\nimport React, { createContext, useCallback, useMemo, useRef } from \\\"react\\\";\n\ntype BufferState = { [key: string]: boolean };\n\ntype BufferContextType = {\n  canPlay: (id: string) => void;\n  needsToBuffer: (id: string) => void;\n};\n\nexport const BufferContext = createContext<BufferContextType>({\n  // By default, do nothing if the context is not set, for example in rendering\n  canPlay: () => {},\n  needsToBuffer: () => {},\n});\n\nexport const BufferManager: React.FC<{\n  children: React.ReactNode;\n  onBuffer: () => void;\n  onContinue: () => void;\n}> = ({ children, onBuffer, onContinue }) => {\n  const bufferState = useRef<BufferState>({});\n  const currentState = useRef(false);\n\n  const sendEvents = useCallback(() => {\n    let previousState = currentState.current;\n    currentState.current = Object.values(bufferState.current).some(Boolean);\n\n    if (currentState.current && !previousState) {\n      onBuffer();\n    } else if (!currentState.current && previousState) {\n      onContinue();\n    }\n  }, [onBuffer, onContinue]);\n\n  const canPlay = useCallback(\n    (id: string) => {\n      bufferState.current[id] = false;\n      sendEvents();\n    },\n    [sendEvents],\n  );\n\n  const needsToBuffer = useCallback(\n    (id: string) => {\n      bufferState.current[id] = true;\n      sendEvents();\n    },\n    [sendEvents],\n  );\n\n  const bufferEvents = useMemo(() => {\n    return {\n      canPlay,\n      needsToBuffer,\n    };\n  }, [canPlay, needsToBuffer]);\n\n  return (\n    <BufferContext.Provider value={bufferEvents}>\n      {children}\n    </BufferContext.Provider>\n  );\n};\n// organize-imports-ignore\n// @filename: PausableVideo.tsx\n// ---cut---\nimport React, {\n  forwardRef,\n  useContext,\n  useEffect,\n  useId,\n  useImperativeHandle,\n  useRef,\n} from \\\"react\\\";\nimport { RemotionMainVideoProps, RemotionVideoProps, Video } from \\\"remotion\\\";\nimport { BufferContext } from \\\"./BufferManager\\\";\n\nconst PausableVideoFunction: React.ForwardRefRenderFunction<\n  HTMLVideoElement,\n  RemotionVideoProps & RemotionMainVideoProps\n> = ({ src, ...props }, ref) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const id = useId();\n\n  useImperativeHandle(ref, () => videoRef.current as HTMLVideoElement);\n\n  const { canPlay, needsToBuffer } = useContext(BufferContext);\n\n  useEffect(() => {\n    const { current } = videoRef;\n    if (!current) {\n      return;\n    }\n\n    const onPlay = () => {\n      canPlay(id);\n    };\n\n    const onBuffer = () => {\n      needsToBuffer(id);\n    };\n\n    current.addEventListener(\\\"canplay\\\", onPlay);\n    current.addEventListener(\\\"waiting\\\", onBuffer);\n\n    return () => {\n      current.removeEventListener(\\\"canplay\\\", onPlay);\n      current.removeEventListener(\\\"waiting\\\", onBuffer);\n\n      // If component is unmounted, unblock the buffer manager\n      canPlay(id);\n    };\n  }, [canPlay, id, needsToBuffer]);\n\n  return <Video {...props} ref={videoRef} src={src} />;\n};\n\nexport const PausableVideo = forwardRef(PausableVideoFunction);\n```\n\n----------------------------------------\n\nTITLE: Spring-Based Vertical Movement Animation - TypeScript/TSX\nDESCRIPTION: Defines a Move component that vertically animates its children using a spring easing function from Remotion. Requires Remotion and React. Accepts children to animate; spring parameters (damping, duration) control motion smoothness and range. Output is children translated vertically upwards by -400px over four seconds, following a spring curve.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {\n  AbsoluteFill,\n  interpolate,\n  spring,\n  useCurrentFrame,\n  useVideoConfig,\n} from 'remotion';\n\nexport const Move: React.FC<{\n  children: React.ReactNode;\n}> = ({children}) => {\n  const {fps} = useVideoConfig();\n  const frame = useCurrentFrame();\n\n  const down = spring({\n    fps,\n    frame,\n    config: {\n      damping: 200,\n    },\n    durationInFrames: 120,\n  });\n\n  const y = interpolate(down, [0, 1], [0, -400]);\n\n  return (\n    <AbsoluteFill\n      style={{\n        translate: `0 ${y}px`,\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Keeping Output Video Private in Remotion Lambda CLI Render - Bash\nDESCRIPTION: Demonstrates the use of the '--privacy=private' option to restrict access to the rendered output, making it unavailable for public access via S3. Signed links can be generated for restricted sharing if desired. This command is essential for sensitive media outputs that should not be publicly accessible.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/render.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render --privacy=private testbed my-comp\n```\n\n----------------------------------------\n\nTITLE: Deleting All Remotion Lambda Functions Using NPX - Shell\nDESCRIPTION: This shell snippet demonstrates how to use NPX to delete all Remotion Lambda functions in your AWS account. The 'yes' (-y) flag ensures that the deletion proceeds without any interactive confirmation, immediately removing all associated Lambda functions. Prerequisite: Requires Remotion Lambda CLI installed and appropriate AWS credentials with permissions to manage Lambda functions. Inputs: None (deletes all functions). Outputs: All Remotion Lambda functions are deleted; this action cannot be reverted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/uninstall.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda functions rmall -y\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud CLI for Remotion Project - sh\nDESCRIPTION: These shell snippets guide the user through initializing and configuring the Google Cloud CLI (gcloud) for use with the remotion-dev project. Prerequisites include installing the gcloud SDK. Commands shown authenticate the shell, select the correct project, and verify current settings. Key parameters include user authentication, active project configuration, and verification with gcloud config list.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/container/readme.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngcloud init\n```\n\nLANGUAGE: sh\nCODE:\n```\ngcloud config list\n```\n\nLANGUAGE: sh\nCODE:\n```\ngcloud config set project remotion-dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Project with Tailwind Template via yarn - Bash\nDESCRIPTION: This CLI command initializes a Remotion video project with TailwindCSS integration using yarn. The '--tailwind' flag ensures the project comes set up for Tailwind utility class usage. Requires yarn to be installed. Run in terminal to scaffold a project directory preconfigured for Remotion with Tailwind included.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-07-14-remotion-3-1.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create video --tailwind\n```\n\n----------------------------------------\n\nTITLE: Generating CSS matrix3d() Transform in Remotion (TSX)\nDESCRIPTION: Demonstrates using the `matrix3d` function from `@remotion/animation-utils` to generate a CSS `matrix3d()` transform string. It accepts sixteen numerical arguments defining the 3D transformation matrix.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { matrix3d } from \"@remotion/animation-utils\";\n\nconst transform = matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 50, 50, 0, 1);\n// => \"matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 50, 50, 0, 1)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Fly.io CLI Interactive Deployment Prompts (Txt, Configuration)\nDESCRIPTION: These snippets display the interactive CLI prompts a user encounters when launching on Fly.io, with the recommended answers for a Remotion Studio deployment. The settings disable database and .dockerignore setup, and confirm proceeding with the deployment. This clarifies required manual input for a smooth automated deployment workflow.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-server.mdx#_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n? Would you like to set up a Postgresql database now? No\\n? Would you like to set up an Upstash Redis database now? No\\n? Create .dockerignore from 1 .gitignore files? No\n```\n\nLANGUAGE: txt\nCODE:\n```\n? Do you want to deploy now? Yes\n```\n\n----------------------------------------\n\nTITLE: Rendering a Centered Dot Component - TypeScript/TSX\nDESCRIPTION: Defines a React component that displays a white, centered circular dot on the video. Depends on React and Remotion. No props required. Outputs a styled AbsoluteFill containing a div shaped as a circle, ready to overlay in a composition scene.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nexport const Dot: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <div\n        style={{\n          height: 14,\n          width: 14,\n          borderRadius: 14 / 2,\n          backgroundColor: '#ccc',\n        }}\n      />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion Player for 'register-media-session' Mode (TSX)\nDESCRIPTION: This TSX snippet shows how to set the `browserMediaControlsBehavior` prop to `register-media-session` mode on the Remotion `<Player>`. This mode actively uses the Web Media Session API to register handlers for Play/Pause, Previous Track, Fast Forward, and Rewind keys, allowing direct control over the Player's playback state and seeking.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/media-keys.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst otherProps = {\n  compositionHeight: 720,\n  compositionWidth: 1280,\n  inputProps: {},\n  durationInFrames: 120,\n  fps: 30,\n  component: () => null,\n};\n// ---cut---\n\nimport {Player} from '@remotion/player';\n\nexport const MyComp: React.FC = () => {\n  return (\n    <Player\n      browserMediaControlsBehavior={{\n        mode: 'register-media-session',\n      }}\n      {...otherProps}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a WarpPathFn Transformation Function in TSX\nDESCRIPTION: Shows how to define the transformation function required by `warpPath`. It imports the `WarpPathFn` type from `@remotion/paths` and defines a function `fn` that adheres to this type. The function accepts an object with `x` and `y` coordinates and must return an object with the transformed `x` and `y` coordinates. In this example, the x-coordinate is shifted horizontally based on the sine of the y-coordinate, creating a wave effect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/warp-path.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WarpPathFn } from \"@remotion/paths\";\n\nconst fn: WarpPathFn = ({ x, y }) => ({\n  x: x + Math.sin(y / 4) * 5,\n  y: y,\n});\n```\n\n----------------------------------------\n\nTITLE: Using useAudioData Hook in a React Component (TypeScript)\nDESCRIPTION: This React functional component demonstrates how to use the `useAudioData` hook to fetch audio metadata. It imports the necessary functions, calls `useAudioData` with a source path obtained via `staticFile`, checks if the data has loaded, and renders a message displaying the audio's sample rate. If the data is not yet loaded, it returns `null` to wait.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-audio-data.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ---cut---\nimport {useAudioData} from '@remotion/media-utils';\nimport {staticFile} from 'remotion';\n\nexport const MyComponent: React.FC = () => {\n  const audioData = useAudioData(staticFile('music.mp3'));\n\n  if (!audioData) {\n    return null;\n  }\n\n  return <div>This file has a {audioData.sampleRate} sampleRate.</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Combining delayRender and useBufferState in Remotion (TypeScript/React)\nDESCRIPTION: Demonstrates how to use `useBufferState` (for delaying playback during preview) together with `delayRender` (for delaying rendering/screenshotting). `delayRender` is called initially and its handle stored in state. Inside `useEffect`, `buffer.delayPlayback()` is called. After the simulated loading (5 seconds), both `delayHandle.unblock()` (for playback) and `continueRender(handle)` (for rendering) are called. The `useEffect` cleanup ensures `delayHandle.unblock()` is called if the component unmounts prematurely.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-buffer-state.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Using delayRender() and delayPlayback() together\"\nimport React from \"react\";\nimport { useBufferState, delayRender, continueRender } from \"remotion\";\n\nconst MyComp: React.FC = () => {\n  const buffer = useBufferState();\n  const [handle] = React.useState(() => delayRender());\n\n  React.useEffect(() => {\n    const delayHandle = buffer.delayPlayback();\n\n    setTimeout(() => {\n      delayHandle.unblock();\n      continueRender(handle);\n    }, 5000);\n\n    return () => {\n      delayHandle.unblock();\n    };\n  }, []);\n\n  return <></>;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Toggling Remotion Studio Playback via Button Click (TSX)\nDESCRIPTION: This TSX snippet demonstrates creating a React functional component `ToggleButton`. It imports the `toggle` function from `@remotion/studio` and attaches it to the `onClick` event of a button. The click event object `e` (React.SyntheticEvent or PointerEvent) is passed to `toggle`, which is recommended for better handling of browser audio autoplay policies. Clicking the button will toggle the playback state (play/pause) of the Remotion Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/toggle.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {toggle} from '@remotion/studio';\n\nconst ToggleButton = () => {\n  // Call with the event parameter for better browser audio autoplay\n\n  return <button onClick={(e) => toggle(e)}>Play/Pause</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Remotion Thumbnail Ref Methods\nDESCRIPTION: Illustrates attaching a React ref (`useRef`) to the <Thumbnail> component to access its instance methods. The example uses `useEffect` to log the thumbnail's scale factor using the `getScale()` method available on the `ThumbnailRef` once the component mounts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/thumbnail.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\n\n// @filename: MyComposition.tsx\nexport const MyComposition: React.FC = () => null;\n\n// @filename: index.tsx\n// ---cut---\nimport {Thumbnail, ThumbnailRef} from '@remotion/player';\nimport {useEffect, useRef} from 'react';\nimport {MyComposition} from './MyComposition';\n\nconst MyComp: React.FC = () => {\n  const thumbnailRef = useRef<ThumbnailRef>(null);\n\n  useEffect(() => {\n    if (thumbnailRef.current) {\n      console.log(thumbnailRef.current.getScale());\n    }\n  }, []);\n\n  return (\n    <Thumbnail\n      ref={thumbnailRef}\n      durationInFrames={30}\n      compositionWidth={1080}\n      compositionHeight={1080}\n      fps={30}\n      frameToDisplay={30}\n      component={MyComposition}\n      // Many other optional props are available.\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Remotion Sites and Buckets Across All Regions via getSites() API with TypeScript\nDESCRIPTION: This example demonstrates invoking the getSites() function from @remotion/cloudrun in TypeScript, passing 'all regions' as the region argument to query Remotion sites and buckets across all GCP regions. It provides a template for retrieving a complete inventory of deployed Remotion projects and buckets regardless of their region. The code requires the @remotion/cloudrun dependency and proper GCP credentials. The output is a promise resolving to arrays of site and bucket metadata for all regions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/getsites.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getSites} from '@remotion/cloudrun';\n\nconst {sites, buckets} = await getSites('all regions');\n```\n\n----------------------------------------\n\nTITLE: Renaming `config` to `composition` in `renderFrames` (TypeScript/TSX)\nDESCRIPTION: Shows the renaming of the `config` parameter to `composition` in `renderFrames` and `renderStill` calls for Remotion v3. The new `composition` object now also requires an `id` property alongside other configuration details like `width`, `height`, `fps`, and `durationInFrames`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nrenderFrames({\n  compositionId: \"my-com\",\n  config: {\n    width: 1920,\n    height: 1080,\n    fps: 30,\n    durationInFrames: 300,\n  },\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nrenderFrames({\n  composition: {\n    id: \"my-com\",\n    width: 1920,\n    height: 1080,\n    fps: 30,\n    durationInFrames: 300,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Browser Arguments to Remotion Studio - Shell\nDESCRIPTION: Demonstrates how to pass custom command line flags to the browser when launching Remotion Studio. Relies on the '--browser-args' CLI flag, which accepts additional browser parameters as a quoted string. Requires Remotion v3.3.79 or higher. The main parameter '--disable-web-security' is given as an example and more flags can be added as needed. Intended for custom browser configurations during studio startup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/studio.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion studio --browser-args=\"--disable-web-security\"\n```\n\n----------------------------------------\n\nTITLE: Passing Interactive Props to @remotion/player with React State (TypeScript)\nDESCRIPTION: Illustrates passing dynamic inputProps to the Player, driven by component state. Uses useState and useMemo for managing and memoizing input properties. This enables creating interactive players where video output is influenced by user input. Inputs: component state, inputProps to Player. Outputs: video rendering reflects changes in inputProps. Limitation: MyVideo must use the props as expected for results to propagate.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player } from \"@remotion/player\";\\nimport { useState, useMemo } from \"react\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  // Connect the state to a text field\\n  const [text, setText] = useState(\"world\");\\n  const inputProps = useMemo(() => {\\n    return {\\n      text,\\n    };\\n  }, [text]);\\n\\n  return (\\n    <Player\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n      inputProps={inputProps}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Deprecated Image Format Configuration in Remotion Pre-v4.0 (TypeScript)\nDESCRIPTION: This snippet illustrates the method used to set the image format in Remotion configuration files before version 4.0. The `Config.setImageFormat(\"jpeg\")` call is deprecated and was replaced in v4.0, as highlighted in the breaking changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-alpha.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nConfig.setImageFormat(\"jpeg\");\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion CLI using npm\nDESCRIPTION: Installs the Remotion Command Line Interface (`@remotion/cli`) package as a project dependency using the npm package manager. This is a prerequisite for launching the Remotion Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/studio.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/cli\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Recorder with Bun Script (Bash)\nDESCRIPTION: Runs a Bun script to update a local copy of Remotion Recorder by pulling the latest files from the official template, excluding the 'public', 'config', and 'remotion/Root.tsx' directories. Requires Bun to be installed and assumes an 'update.ts' script exists in the project root. Input: executes in shell, no additional arguments required. Output: local project files are updated to latest template, except for listed exclusions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/upgrading.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun update.ts\n```\n\n----------------------------------------\n\nTITLE: Querying Remotion Cloud Run Services for Still Rendering (Node.js TypeScript)\nDESCRIPTION: This TypeScript code retrieves available Remotion Cloud Run services using getServices with a compatibleOnly filter, intended as initial setup for rendering still images. It imports the needed methods and extracts the first compatible service's name for use in the still rendering API. Requires '@remotion/cloudrun' module and valid region.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getServices, renderStillOnCloudrun} from '@remotion/cloudrun';\n\nconst services = await getServices({\n  region: 'us-east1',\n  compatibleOnly: true,\n});\n\nconst serviceName = services[0].serviceName;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Audio Waveform SVG in Remotion (TSX)\nDESCRIPTION: Provides a complete React component example using `visualizeAudioWaveform` to render a basic audio waveform as an SVG path. It fetches audio data, calculates the waveform for the current frame, uses `createSmoothSvgPath` to generate SVG path data, and renders it within an `<svg>` element inside an `AbsoluteFill`. Depends on `@remotion/media-utils`, `remotion`, and `react`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-utils/visualize-audio-waveform.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createSmoothSvgPath, useAudioData, visualizeAudioWaveform} from '@remotion/media-utils';\nimport React from 'react';\nimport {AbsoluteFill, Audio, useCurrentFrame, useVideoConfig, staticFile} from 'remotion';\n\nconst height = 300;\n\nconst BaseExample: React.FC = () => {\n  const frame = useCurrentFrame();\n  const audioDataVoice = useAudioData(staticFile('podcast.wav'));\n  const {width, fps} = useVideoConfig();\n\n  if (!audioDataVoice) {\n    return null;\n  }\n\n  const waveform = visualizeAudioWaveform({\n    fps,\n    frame,\n    audioData: audioDataVoice,\n    numberOfSamples: 32,\n    windowInSeconds: 1 / fps,\n  });\n\n  const p = createSmoothSvgPath({\n    points: waveform.map((x, i) => {\n      return {\n        x: (i / (waveform.length - 1)) * width,\n        y: (x - 0.5) * height + height / 2,\n      };\n    }),\n  });\n\n  return (\n    <div style={{flex: 1}}>\n      <Audio src={staticFile('podcast.wav')} />\n      <AbsoluteFill style={{justifyContent: 'center', alignItems: 'center'}}>\n        <svg style={{backgroundColor: ' #0B84F3'}} viewBox={`0 0 ${width} ${height}`} width={width} height={height}>\n          <path stroke=\"white\" fill=\"none\" strokeWidth={10} d={p as string} />\n        </svg>\n      </AbsoluteFill>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion using bunx (Bash)\nDESCRIPTION: Executes the Remotion upgrade command using bunx, Bun's equivalent of npx. This automates updating Remotion packages. Requires the `@remotion/cli` package to be installed or accessible via bunx.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/upgrading.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Handling Artifacts with renderMedia in @remotion/renderer (TypeScript)\nDESCRIPTION: Demonstrates implementing the `onArtifact` callback function when using `renderMedia` from `@remotion/renderer`. This callback receives each emitted artifact, providing access to its filename, content (as a string or Uint8Array), and the frame number it was emitted on. The example logs artifact details and shows how to write the artifact content to a file using the Node.js `fs` module. Requires `@remotion/renderer` and Node.js environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifacts.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {VideoConfig} from 'remotion';\n\nconst composition: VideoConfig = {\n  width: 100,\n  height: 100,\n  fps: 30,\n  defaultProps: {},\n  props: {},\n  defaultCodec: null,\n  defaultOutName: null,\n  id: 'hi',\n  durationInFrames: 100,\n};\nconst serveUrl = 'http://localhost:8080';\nconst inputProps = {};\nimport fs from 'fs';\n// ---cut---\nimport {renderMedia, OnArtifact} from '@remotion/renderer';\n\nconst onArtifact: OnArtifact = (artifact) => {\n  console.log(artifact.filename); // string\n  console.log(artifact.content); // string | Uint8Array\n  console.log(artifact.frame); // number, frame in the composition which emitted this\n\n  // Example action: Write the artifact to disk\n  fs.writeFileSync(artifact.filename, artifact.content);\n};\n\nawait renderMedia({\n  composition,\n  serveUrl,\n  onArtifact,\n  codec: 'h264',\n  inputProps,\n});\n```\n\n----------------------------------------\n\nTITLE: Embedding React Visualization Components in MDX (MDX)\nDESCRIPTION: This snippet demonstrates usage of imported React components as custom tags in MDX to interleave interactive visualizations within a Markdown narrative. Components like <AacFile />, <AacPadding />, <AacConcatenationProblem />, <AacKeyframes />, <AacConcatenationSolution />, and <AacBenchmarks /> are rendered at specific points to illustrate audio-related concepts and benchmarks. The snippet assumes an MDX runtime that supports React component embedding and that the imported components are compatible. The primary input is the MDX file/environment; the output is a rendered document mixing Markdown, HTML, and React visualizations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2024-03-21-faster-lambda.mdx#_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<AacBenchmarks />\n<sub style={{ opacity: 0.5, lineHeight: 1 }}>\n  Rendering a 1920x1080px video with an <code>&lt;OffthreadVideo&gt;</code> tag\n  loading a 15MB Full HD video and looping it. The Lambda function has been\n  given 3000MB of memory.\n</sub>\n<br />\n<br />\n...\n<AacFile />\n<br />\n<br />\n...\n<AacPadding />\n<br />\n<br />\n...\n<AacConcatenationProblem />\n<br />\n<br />\n...\n<AacKeyframes />\n<br />\n<br />\n...\n<AacConcatenationSolution />\n<br />\n<br />\n...\n<AacFile />\n<br />\n<br />\n```\n\n----------------------------------------\n\nTITLE: Updating Default Props Based on Unsaved Props with saveDefaultProps in TypeScript\nDESCRIPTION: This example shows how to use `saveDefaultProps` (note: not `updateDefaultProps` as shown in the surrounding text, but the code uses `saveDefaultProps`) to access the current *unsaved* default props via the `unsavedDefaultProps` argument in the callback. It merges these existing unsaved props with new values (setting `color` to `'green'`) before saving them. This demonstrates a reducer-style update pattern. Requires `@remotion/studio`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/update-default-props.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @target: esnext\nimport { saveDefaultProps } from \"@remotion/studio\";\n\nawait saveDefaultProps({\n  compositionId: \"my-composition\",\n  defaultProps: ({ unsavedDefaultProps }) => {\n    return { ...unsavedDefaultProps, color: \"green\" };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Fade-in Opacity using interpolate() in TypeScript\nDESCRIPTION: Demonstrates calculating opacity for a simple fade-in effect. The `interpolate` function maps the current frame number (input, from 0 to 20) to an opacity value (output, from 0 to 1). It requires the `interpolate` and `useCurrentFrame` hooks from the 'remotion' library.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/interpolate.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { interpolate, useCurrentFrame } from \"remotion\";\n\nconst frame = useCurrentFrame(); // 10\nconst opacity = interpolate(frame, [0, 20], [0, 1]); // 0.5\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack Configuration Override Method (TypeScript/TSX)\nDESCRIPTION: Shows the migration path for overriding Webpack configuration in `remotion.config.ts` (or `.js`). The previously used `overrideWebpackConfig` import/export is removed. Instead, import the `Config` object from `remotion` and use the static `Config.overrideWebpackConfig()` method.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Config } from \"remotion\";\n\nConfig.overrideWebpackConfig();\n```\n\n----------------------------------------\n\nTITLE: Showing CDK Deployment Progress - Bash\nDESCRIPTION: Displays typical AWS CDK deployment progress output, showing asset bundling, resource building, publishing, and synthesis times. This log-like output provides assurance and diagnostics while infrastructure is provisioned and Lambda code is packaged and published. No dependencies; for informational and monitoring purposes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nBundling asset cdk-stack/render-function/Code/Stage...\\n\\n  cdk.out/bundling-temp-5e88d0b45626d59e8e8ddce3b05a886b0e1b381df6e5bbbea1dc2727080641a8/index.js  6.3mb ⚠️\\n\\n⚡ Done in 295ms\\n\\n✨  Synthesis time: 4.29s\\n\\ncdk-stack: building assets...\\n\\n[0%] start: Building 87d5e793cbd198c73c05023515153b142eb2f559e7150579cd2db53362c19b6e:XXXXXXXXXX-us-east-1\\n[0%] start: Building 779e5babb0ddf0d17c0faebbe5596b03bcf13785f0b20c4cd0fe0c5e616d5593:XXXXXXXXXX-us-east-1\\n[50%] success: Built 87d5e793cbd198c73c05023515153b142eb2f559e7150579cd2db53362c19b6e:XXXXXXXXXX-us-east-1\\n[100%] success: Built 779e5babb0ddf0d17c0faebbe5596b03bcf13785f0b20c4cd0fe0c5e616d5593:XXXXXXXXXX-us-east-1\\n\\ncdk-stack: assets built\\n\\ncdk-stack: deploying... [1/1]\\n[0%] start: Publishing 87d5e793cbd198c73c05023515153b142eb2f559e7150579cd2db53362c19b6e:XXXXXXXXXX-us-east-1\\n[0%] start: Publishing 779e5babb0ddf0d17c0faebbe5596b03bcf13785f0b20c4cd0fe0c5e616d5593:XXXXXXXXXX-us-east-1\\n[50%] success: Published 779e5babb0ddf0d17c0faebbe5596b03bcf13785f0b20c4cd0fe0c5e616d5593:XXXXXXXXXX-us-east-1\\n[100%] success: Published 87d5e793cbd198c73c05023515153b142eb2f559e7150579cd2db53362c19b6e:XXXXXXXXXX-us-east-1\\n\\n ✅  cdk-stack (no changes)\\n\\n✨  Deployment time: 1.39s\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Remotion 1.3 Build Performance (Bash)\nDESCRIPTION: This snippet uses the `hyperfine` command-line tool to benchmark the execution time of `npm run build` for the same project but using Remotion 1.3. Similar to the previous benchmark, it runs the command at least 5 times with overwrite and concurrency 16. The results demonstrate a significant performance improvement compared to version 1.1.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-15-remotion-1-3.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhyperfine --min-runs 5  'npm run build -- --overwrite --concurrency=16'\nBenchmark #1: npm run build -- --overwrite --concurrency=16\n  Time (mean ± σ):     17.921 s ±  0.224 s    [User: 36.492 s, System: 3.482 s]\n  Range (min … max):   17.650 s … 18.264 s    5 runs\n```\n\n----------------------------------------\n\nTITLE: Setting Server Port (Deprecated v4.0.61) using Remotion Config in TypeScript\nDESCRIPTION: *This configuration method is deprecated since v4.0.61.* It previously set a specific port for both the Remotion Studio and the background rendering server using `Config.setPort()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. Using this could break Studio functionality; use `setStudioPort()` and `setRendererPort()` instead.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_37\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setPort(3003);\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Remotion Project using Yarn\nDESCRIPTION: This command utilizes Yarn's `create` command to initialize a new Remotion project via the 'video' template (Remotion's scaffolder). It guides the user through the setup process. Use this command if Yarn is your preferred package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/getting-started.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Use Yarn as the package manager\"\nyarn create video\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of extendViewBox() in TypeScript\nDESCRIPTION: Demonstrates importing and calling the `extendViewBox` function from `@remotion/paths` with a sample viewBox string ('0 0 1000 1000') and a scale factor of 2. The resulting widened viewBox ('-500 -500 2000 2000') is logged to the console. This function requires the `@remotion/paths` package and throws an error if the input viewBox string is invalid.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/extend-viewbox.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { extendViewBox } from \"@remotion/paths\";\n\nconst extended = extendViewBox(\"0 0 1000 1000\", 2);\nconsole.log(extended); // \"-500 -500 2000 2000\"\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling During Download with downloadAndParseMedia in TypeScript\nDESCRIPTION: Demonstrates customizing error handling using the `onError` callback. This function receives the error object and allows deciding the subsequent action. Returning `{action: 'download'}` forces the download to complete despite the error, while the default behavior (`{action: 'fail'}`) would abort and delete the file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/download-and-parse-media.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {downloadAndParseMedia} from '@remotion/media-parser';\nimport {nodeWriter} from '@remotion/media-parser/node-writer';\n\nawait downloadAndParseMedia({\n  src: 'https://s3.amazonaws.com/bucket/uploaded-asset.mp4',\n  writer: nodeWriter('output.mp4'),\n  onError: (error) => {\n    // Force the file to be downloaded despite parsing error.\n    // Note: At the end, the error will be thrown nonetheless.\n    return {action: 'download'};\n\n    // Default behavior:\n    // Abort the download, delete the file and throw the error immediately.\n    // return {action: 'fail'};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced onProgress Callback for renderMedia\nDESCRIPTION: Demonstrates a more detailed `onProgress` callback for `renderMedia`. This function accesses specific metrics like `renderedFrames`, `encodedFrames`, timings (`renderedDoneIn`, `encodedDoneIn`), and the current `stitchStage` ('encoding' or 'muxing') to provide fine-grained feedback on the rendering progress.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-media.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RenderMediaOnProgress} from '@remotion/renderer';\n\nconst onProgress: RenderMediaOnProgress = ({renderedFrames, encodedFrames, encodedDoneIn, renderedDoneIn, stitchStage}) => {\n  if (stitchStage === 'encoding') {\n    // First pass, parallel rendering of frames and encoding into video\n    console.log('Encoding...');\n  } else if (stitchStage === 'muxing') {\n    // Second pass, adding audio to the video\n    console.log('Muxing audio...');\n  }\n  // Amount of frames rendered into images\n  console.log(`${renderedFrames} rendered`);\n  // Amount of frame encoded into a video\n  console.log(`${encodedFrames} encoded`);\n  // Time to create images of all frames\n  if (renderedDoneIn !== null) {\n    console.log(`Rendered in ${renderedDoneIn}ms`);\n  }\n  // Time to encode video from images\n  if (encodedDoneIn !== null) {\n    console.log(`Encoded in ${encodedDoneIn}ms`);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Running Remotion Studio - Console\nDESCRIPTION: Executes the Remotion Studio environment via an npm script, enabling users to preview, develop, and manage video projects interactively. Requires Remotion dependency and a compatible browser.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-render-server/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm run remotion:studio\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Remix Project with yarn (Bash)\nDESCRIPTION: Provides the command using the `yarn` package manager to initialize a new Remotion project using the specific Remix template. This serves as an alternative to using npm or pnpm for project setup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nyarn create video --remix\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing a Blank Remotion Project (npm)\nDESCRIPTION: Uses npm to initialize a new, blank Remotion video project in the current directory. This command sets up the basic file structure and dependencies required for a Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dataset-render.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init video --blank\n```\n\n----------------------------------------\n\nTITLE: Loading a specific style with limited weights and subsets - TypeScript\nDESCRIPTION: Loads a targeted font style along with specific weights and subsets using the loadFont API from the Montserrat package. The style ('normal'), an options object containing weights (400, 600, 800), and subsets ('latin', 'latin-ext') are passed to limit what is loaded. This approach is efficient for controlling payload size or meeting language requirements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Montserrat from '@remotion/google-fonts/Montserrat';\n\nMontserrat.loadFont('normal', {\n  weights: ['400', '600', '800'],\n  subsets: ['latin', 'latin-ext'],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Smooth SVG Paths with Remotion Media Utils in TypeScript\nDESCRIPTION: This code demonstrates how to import and use the createSmoothSvgPath function from @remotion/media-utils within a React component to generate a smooth SVG path string from an array of point objects. It requires @remotion/media-utils as a dependency. The main input is an array of points, each with numeric x and y properties, and the output is a string suitable for the 'd' attribute of an SVG path. The code assumes a React/TypeScript project setup and does not handle SVG rendering or error checking for invalid points.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-utils/create-smooth-svg-path.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createSmoothSvgPath} from '@remotion/media-utils';\nimport React from 'react';\n\nconst points = [\n  {x: 0, y: 0},\n  {x: 100, y: 100},\n  {x: 200, y: 50},\n  {x: 300, y: 150},\n];\n\nconst path = createSmoothSvgPath({points});\n```\n\n----------------------------------------\n\nTITLE: Importing Timeline Theme for Tailwind CSS v4 (CSS)\nDESCRIPTION: Demonstrates how to import the timeline's theme CSS file into a global CSS file when using Tailwind CSS v4. This `@import` rule integrates the necessary styles for the timeline component. Customization can be done by modifying values in the `@theme` block within the imported `timeline.css` file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/timeline/setup.mdx#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import './timeline/theme/timeline.css';\n```\n\n----------------------------------------\n\nTITLE: Defining Progress Callback for combineChunks (TypeScript)\nDESCRIPTION: This snippet shows how to define an onProgress callback for the combineChunks() API, which logs progress information as the combining operation advances. It relies on CombineChunksOnProgress type from @remotion/renderer and provides runtime feedback to track completion percentage and number of processed frames. This can help monitor long operations in distributed rendering setups. Only available during the combining process and does not affect the final output.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/combine-chunks.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CombineChunksOnProgress} from '@remotion/renderer';\n\nconst onProgress: CombineChunksOnProgress = ({totalProgress, frames}) => {\n  console.log(`Combining is ${totalProgress * 100}% complete`);\n  console.log(`Processed ${frames} frames`);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Image Sequence Output in Remotion Config (TypeScript)\nDESCRIPTION: Configures the output as a sequence of images instead of a video file by setting `setImageSequence` to `true` using the `Config` object in `remotion.config.ts`. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v1.4.0. The `--sequence` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setImageSequence(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing the onStart Callback in renderMedia\nDESCRIPTION: This snippet shows how to define an `onStart` callback function for `renderMedia`. This function receives data like `frameCount`, `parallelEncoding` (since v4.0.52), and `resolvedConcurrency` (since v4.0.180) when rendering begins, allowing for logging or setup tasks based on the render job's details.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-media.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {OnStartData} from '@remotion/renderer';\n\nconst onStart = ({\n  frameCount,\n  parallelEncoding, // available from v4.0.52\n  resolvedConcurrency, // available from v4.0.180\n}: OnStartData) => {\n  console.log(`Beginning to render ${frameCount}.`);\n\n  if (parallelEncoding) {\n    console.log('Parallel encoding is enabled.');\n  }\n\n  console.log(`Using concurrency: ${resolvedConcurrency}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/animation-utils package using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@remotion/animation-utils` library. The `--save-exact` flag ensures that the specific version installed is recorded in the `package.json` file without any version range specifiers (like ^ or ~), which is recommended for Remotion packages to avoid version conflicts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/animation-utils/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/animation-utils --save-exact\n```\n\n----------------------------------------\n\nTITLE: Implementing Jump Cuts with OffthreadVideo in Remotion using React/TypeScript\nDESCRIPTION: This React/TypeScript snippet demonstrates how to create jump cuts in a Remotion video by selectively displaying segments. It defines `Section` types, calculates the total duration using `calculateMetadata`, and uses the `JumpCuts` component with `useCurrentFrame` and `useMemo` to determine the appropriate `startFrom` time for the `OffthreadVideo` based on the desired sections. The component depends on React and the Remotion library (`CalculateMetadataFunction`, `OffthreadVideo`, `staticFile`, `useCurrentFrame`). It expects an array of `Section` objects defining the start and end frames of the segments to keep and renders the corresponding video part.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/jumpcuts.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport React, {useMemo} from 'react';\nimport {\n  CalculateMetadataFunction,\n  OffthreadVideo,\n  staticFile,\n  useCurrentFrame,\n} from 'remotion';\n\nconst fps = 30;\n\ntype Section = {\n  startFrom: number;\n  endAt: number;\n};\n\nexport const SAMPLE_SECTIONS: Section[] = [\n  {startFrom: 0, endAt: 5 * fps},\n  {\n    startFrom: 7 * fps,\n    endAt: 10 * fps,\n  },\n  {\n    startFrom: 13 * fps,\n    endAt: 18 * fps,\n  },\n];\n\ntype Props = {\n  sections: Section[];\n};\n\nexport const calculateMetadata: CalculateMetadataFunction<Props> = ({\n  props,\n}) => {\n  const durationInFrames = props.sections.reduce((acc, section) => {\n    return acc + section.endAt - section.startFrom;\n  }, 0);\n\n  return {\n    fps,\n    durationInFrames,\n  };\n};\n\nexport const JumpCuts: React.FC<Props> = ({sections}) => {\n  const frame = useCurrentFrame();\n\n  const startFrom = useMemo(() => {\n    let summedUpDurations = 0;\n    for (const section of sections) {\n      summedUpDurations += section.endAt - section.startFrom;\n      if (summedUpDurations > frame) {\n        return section.endAt - summedUpDurations;\n      }\n    }\n\n    return null;\n  }, [frame, sections]);\n\n  if (startFrom === null) {\n    return null;\n  }\n\n  return (\n    <OffthreadVideo\n      pauseWhenBuffering\n      startFrom={startFrom}\n      // Remotion will automatically add a time fragment to the end of the video URL\n      // based on `startFrom` and `endAt`. Opt out of this by adding one yourself.\n      // https://www.remotion.dev/docs/media-fragments\n      src={`${staticFile('time.mp4')}#t=0,`}\n    />\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Calculating SVG Path Bounding Box with @remotion/paths in TypeScript\nDESCRIPTION: Demonstrates how to use the getBoundingBox function from the @remotion/paths package to compute the bounding box of an SVG path. This TypeScript snippet takes a string representing the SVG path, returning an object with boundary coordinates and additional properties if using v3.3.97 or later. Dependencies include @remotion/paths (v3.3.40+) and TypeScript. Inputs are SVG path strings, and outputs include detailed bounding box values; function will throw on invalid input.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-bounding-box.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getBoundingBox } from \"@remotion/paths\";\n\nconst boundingBox = getBoundingBox(\n  \"M 35,50 a 25,25,0,1,1,50,0 a 25,25,0,1,1,-50,0\"\n);\n// { x1: 35, x2: 85, y1: 24.999999999999993, y2: 75 };\n```\n\n----------------------------------------\n\nTITLE: Initializing a Skia-enabled Remotion Project via pnpm - Bash\nDESCRIPTION: This snippet demonstrates how to create a new Remotion project with Skia support using pnpm. It ensures that React Native Skia capabilities are included by default. Requires pnpm and appropriate permissions to execute project creation commands.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-08-10-remotion-3-2.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm create video --skia\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Bundle via CLI (Shell)\nDESCRIPTION: This command uses the Remotion CLI to manually trigger the Webpack bundling process for a Remotion project. It generates a bundle folder containing the HTML, CSS, JavaScript, and assets required for rendering the video, similar to the automatic step during CLI rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/bundle.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering a Cube Transition in Remotion with TypeScript/React\nDESCRIPTION: This snippet demonstrates the implementation of a Remotion TransitionSeries with a custom 3D cube transition effect using @remotion-dev/cube-presentation. It defines a reusable Letter component styled with AbsoluteFill and sets up two sequences with different background colors, using the cube transition to animate between them. Dependencies include React, remotion, @remotion/transitions, and @remotion-dev/cube-presentation. Key parameters: cube direction (e.g., 'from-left'), timing duration (frames), and color input for the displayed letters; output is a visually animated scene change in a Remotion video composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/cube.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AbsoluteFill } from \\\"remotion\\\";\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \\\"center\\\",\n        alignItems: \\\"center\\\",\n        fontSize: 200,\n        color: \\\"white\\\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { linearTiming, TransitionSeries } from \\\"@remotion/transitions\\\";\nimport { cube } from \\\"@remotion-dev/cube-presentation\\\";\n\nconst BasicTransition = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\\\"#0b84f3\\\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={cube({ direction: \\\"from-left\\\" })}\n        timing={linearTiming({ durationInFrames: 30 })}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Letter color=\\\"pink\\\">B</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Update Cloud Run Services\nDESCRIPTION: Specifies the IAM permission needed to modify settings of an existing Cloud Run service, such as adjusting allocated Memory or CPU resources.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nrun.services.update\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom AWS Region in s3OutputProvider (JSON)\nDESCRIPTION: Illustrates construction of a s3OutputProvider configuration object for specifying a custom AWS region and credentials, suitable for advanced Remotion Lambda deployments. This JSON snippet should be merged within the outName object or related API calls to override region and authentication for the target bucket. Required fields are endpoint, accessKeyId, secretAccessKey, and region. This enables cross-region deployments with custom credentials, but requires IAM permissions and region compatibility. This JSON does not stand alone and should be integrated with higher-level TypeScript code as shown in prior examples.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/custom-destination.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"s3OutputProvider\": {\n    \"endpoint\": \"https://s3.us-west-1.amazonaws.com\",\n    \"accessKeyId\": \"<DIGITAL_OCEAN_ACCESS_KEY_ID>\",\n    \"secretAccessKey\": \"<DIGITAL_OCEAN_SECRET_ACCESS_KEY>\",\n    \"region\": \"us-west-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for JSX Support (JSON)\nDESCRIPTION: Updates the `tsconfig.app.json` file to enable JSX compilation within the Vue project. Setting `\"jsx\": \"react\"` in `compilerOptions` allows TypeScript to process JSX syntax used by Remotion's React components. Setting `jsxImportSource` to an empty string is recommended to avoid potential build errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"jsxImportSource\": \"\" // Recommended to avoid errors while building\n    // other options\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing Video Frames to Canvas with Grayscale Filter using Remotion and TSX\nDESCRIPTION: This React component (`VideoOnCanvas`) renders an `<OffthreadVideo>` component but hides it visually (`opacity: 0`). It uses the `onVideoFrame` callback, triggered for each new video frame, to draw the frame onto a `<canvas>` element using `context.drawImage`. A CSS grayscale filter (`grayscale(100%)`) is applied to the canvas context before drawing, effectively rendering the video in grayscale. Requires `React`, `remotion`, and a video source URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video-manipulation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport React, {useCallback, useEffect, useRef} from 'react';\nimport {AbsoluteFill, useVideoConfig, OffthreadVideo} from 'remotion';\n// ---cut---\nexport const VideoOnCanvas: React.FC = () => {\n  const video = useRef<HTMLVideoElement>(null);\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const {width, height} = useVideoConfig();\n\n  // Process a frame\n  const onVideoFrame = useCallback(\n    (frame: CanvasImageSource) => {\n      if (!canvas.current) {\n        return;\n      }\n      const context = canvas.current.getContext('2d');\n\n      if (!context) {\n        return;\n      }\n\n      context.filter = 'grayscale(100%)';\n      context.drawImage(frame, 0, 0, width, height);\n    },\n    [height, width],\n  );\n\n  return (\n    <AbsoluteFill>\n      <AbsoluteFill>\n        <OffthreadVideo\n          // Hide the original video tag\n          style={{opacity: 0}}\n          onVideoFrame={onVideoFrame}\n          src=\"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n        />\n      </AbsoluteFill>\n      <AbsoluteFill>\n        <canvas ref={canvas} width={width} height={height} />\n      </AbsoluteFill>\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Flattening Remotion Config API Calls - JavaScript / diff\nDESCRIPTION: This snippet shows the migration from the previous Remotion v3 config API, where certain options were namespaced under 'Bundling' and 'Output', to the new flattened config API in v4. Users should update all configuration calls by removing the intermediate namespace (for example, Bundling or Output) and calling the method directly on Config. This affects all configuration-related method invocations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- Config.Bundling.overrideWebpackConfig()\n+ Config.overrideWebpackConfig()\n\n- Config.Output.setOverwriteOutput(true);\n+ Config.setOverwriteOutput(true);\n```\n\n----------------------------------------\n\nTITLE: Setting Player Metadata Dynamically via useEffect - TypeScript/React\nDESCRIPTION: This example demonstrates fetching video metadata at runtime using useEffect and parseMedia, then updating a Remotion <Player> component's duration, width, height, and frame rate accordingly. React's useState manages the retrieved duration, which is passed as a prop to the Player along with static width, height, and fps. This approach is relevant for browser-side preview or playback experiences, relying on '@remotion/player' and '@remotion/media-parser' for dependencies. Error handling is integrated. Inputs include the video asset URL; output is a player synced to the fetched video duration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-metadata.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nconst VideoTesting: React.FC = () => null;\n// ---cut---\nimport {parseMedia} from '@remotion/media-parser';\nimport {useEffect, useState} from 'react';\nimport {Player} from '@remotion/player';\n\nexport const Index: React.FC = () => {\n  const [duration, setDuration] = useState(1);\n\n  useEffect(() => {\n    parseMedia({\n      src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n      fields: {\n        slowDurationInSeconds: true,\n      },\n    })\n      .then(({slowDurationInSeconds}) => {\n        setDuration(Math.round(slowDurationInSeconds * 30));\n      })\n      .catch((err) => {\n        console.log(`Error fetching metadata: ${err}`);\n      });\n  }, []);\n\n  return (\n    <Player\n      component={VideoTesting}\n      compositionWidth={1080}\n      compositionHeight={1080}\n      fps={30}\n      durationInFrames={duration}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing a Remotion Project via PNPM - Bash\nDESCRIPTION: Creates a new Remotion video project using pnpm with a blank template. Make sure pnpm is installed. This will scaffold a Remotion project directory. Expects no additional arguments and outputs the initialized project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm create video --blank\n```\n\n----------------------------------------\n\nTITLE: Listing Remotion Lambda Sites with Details (Bash)\nDESCRIPTION: Executes the `remotion lambda sites ls` command via `npx` to retrieve a detailed list of all deployed Remotion Lambda sites. The output includes the site name, associated S3 bucket, size, last update timestamp, and the site URL, which can be used for rendering videos with the `render` command. It requires `npx`, the `remotion` CLI, and configured AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/sites/ls.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites ls\n```\n\n----------------------------------------\n\nTITLE: Configuring Corepack with packageManager Property - JSON\nDESCRIPTION: This JSON snippet demonstrates how to set the package manager for a Node.js project, instructing Corepack to use a specific version of pnpm. The 'packageManager' field in package.json enables tools like Corepack to ensure consistent project tooling. The key parameter is 'packageManager', whose value should match your intended tool and version; incorrect or missing settings may cause toolchain errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/could-not-find-executable-to-run.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"packageManager\\\": \\\"pnpm@7.1.0\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling a Remotion Project with Old Signature (TypeScript)\nDESCRIPTION: This snippet shows the previous method signature for the `bundle()` function from `@remotion/bundler`. It takes the entry point path, an optional progress callback function, and an options object as separate arguments. This signature is still supported but the newer object-based signature is preferred.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { bundle } from \"@remotion/bundler\";\n\nbundle(\"./src/index.ts\", (progress) => console.log(progress), {\n  publicDir: process.cwd() + \"/public\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a React Wrapper for Remotion Player (TSX)\nDESCRIPTION: Defines a React functional component (`PlayerView`) that renders the Remotion `Player`. It accepts input properties (`data`), an Angular `WritableSignal` (`playerRefInstance`) to share the player reference, and an optional callback (`onPaused`). It uses `React.createRef` to get a reference to the `<Player>` component and updates the provided Angular signal with this reference inside a `useEffect` hook. It also attaches an event listener to the player's 'pause' event.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useEffect} from 'react';\nimport {Player, PlayerRef} from '@remotion/player';\nimport {z} from 'zod';\nimport {HelloWorld} from './HelloWorld';\nimport {zColor} from '@remotion/zod-types';\nimport {WritableSignal} from '@angular/core';\n\nexport const PlayerView: React.FC<{\n  data: z.infer<typeof myCompSchema>;\n  playerRefInstance: WritableSignal<PlayerRef | undefined>;\n  onPaused?: () => void;\n}> = ({data, playerRefInstance, onPaused}) => {\n  const playerRef: React.RefObject<PlayerRef> = React.createRef();\n\n  useEffect(() => {\n    if (playerRef.current) {\n      playerRefInstance.set(playerRef.current);\n\n      // add callback when player pauses\n      playerRef.current.addEventListener('pause', () => {\n        onPaused?.();\n      });\n    }\n  }, []);\n\n  return (\n    <Player\n      ref={playerRef}\n      component={HelloWorld}\n      durationInFrames={150}\n      fps={30}\n      compositionHeight={1080}\n      compositionWidth={1920}\n      inputProps={data}\n      controls\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using the Angular Wrapper Component in a Template (HTML)\nDESCRIPTION: Demonstrates how to use the previously created Angular wrapper component (`app-player-view`) within an Angular component's HTML template. It uses property binding (`[data]`) to pass input data to the component and event binding (`(onPaused)`) to listen for the `onPaused` event emitted by the wrapper.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<app-player-view [data]=\"data\" (onPaused)=\"playerPaused()\"></app-player-view>\n```\n\n----------------------------------------\n\nTITLE: Using useTransitionProgress Hook in Remotion Components (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `useTransitionProgress` hook within functional React components (A, B, C) rendered by a Remotion `TransitionSeries`. Component A is the exiting scene, Component B is the entering scene, and Component C is outside the series. The hook returns an object with `entering` progress (0 to 1 for entering, 1 otherwise), `exiting` progress (0 to 1 for exiting, 0 otherwise), and `isInTransitionSeries` boolean. The example logs these values to the console, illustrating how they change based on the component's role in the transition defined by `<TransitionSeries>`, `<TransitionSeries.Sequence>`, and `<TransitionSeries.Transition>`. It utilizes the `none()` presentation and `linearTiming` for the transition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/use-transition-progress.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTransitionProgress } from \"@remotion/transitions\";\nimport { linearTiming, TransitionSeries } from \"@remotion/transitions\";\nimport { none } from \"@remotion/transitions/none\";\n\nconst A: React.FC = () => {\n  const progress = useTransitionProgress();\n  console.log(progress.entering); // Always `1`\n  console.log(progress.exiting); // Going from 0 to 1\n  console.log(progress.isInTransitionSeries); //  `true`\n\n  return <div>A</div>;\n};\n\nconst B: React.FC = () => {\n  const progress = useTransitionProgress();\n  console.log(progress.entering); // Going from 0 to 1\n  console.log(progress.exiting); // Always `0`\n  console.log(progress.isInTransitionSeries); //  `true`\n\n  return <div>B</div>;\n};\n\nconst C: React.FC = () => {\n  const progress = useTransitionProgress();\n  console.log(progress.entering); // Always `1`\n  console.log(progress.exiting); // Always `0`\n  console.log(progress.isInTransitionSeries); //  `false`\n\n  return <div>C</div>;\n};\n\nconst Transition: React.FC = () => {\n  return (\n    <>\n      <TransitionSeries>\n        <TransitionSeries.Sequence durationInFrames={40}>\n          <A />\n        </TransitionSeries.Sequence>\n        <TransitionSeries.Transition\n          presentation={none()}\n          timing={linearTiming({ durationInFrames: 30 })}\n        />\n        <TransitionSeries.Sequence durationInFrames={60}>\n          <B />\n        </TransitionSeries.Sequence>\n      </TransitionSeries>\n      <C />\n    </>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Video Locally with Remotion - Bash\nDESCRIPTION: Renders video compositions directly on the local machine using Remotion CLI. Input parameters like composition name or additional configuration may be required depending on the setup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app-tailwind/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render\n\n```\n\n----------------------------------------\n\nTITLE: Setting Buffering Spinner Delay via Config in Remotion (TypeScript)\nDESCRIPTION: This snippet shows how to configure the default buffering spinner delay globally for the Remotion Studio using the `remotion.config.ts` file. The `Config.setBufferStateDelayInMilliseconds()` method sets the delay in milliseconds before the spinner is shown.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/buffer-state.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\nConfig.setBufferStateDelayInMilliseconds(0);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using mediaParserController with parseMedia in TypeScript\nDESCRIPTION: This snippet demonstrates how to import `mediaParserController` and `parseMedia` from `@remotion/media-parser`, create a controller instance, and pass it to the `parseMedia` function. It also shows how to call the controller's `pause()`, `resume()`, and `abort()` methods to control the media parsing lifecycle. Each controller can only be attached to a single `parseMedia` call.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/media-parser-controller.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {mediaParserController, parseMedia} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\n\nparseMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  controller,\n});\n\n// Pause\ncontroller.pause();\n\n// Resume\ncontroller.resume();\n\n// Abort\ncontroller.abort();\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Webpack Overrides with Function Currying (TSX)\nDESCRIPTION: Demonstrates composing multiple Webpack override functions via currying to enable multiple features (e.g., Tailwind and SASS) in a single config, ensuring order-specific application. Uses utilities like enableScss and enableTailwind, provided by related Remotion packages. Requires @remotion/cli/config, @remotion/enable-scss, and @remotion/tailwind-v4.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport {enableScss} from '@remotion/enable-scss';\nimport {enableTailwind} from '@remotion/tailwind-v4';\n\nConfig.overrideWebpackConfig((c) => enableScss(enableTailwind(c)));\n```\n\n----------------------------------------\n\nTITLE: Conditionally Copying an Audio Track during Conversion with Remotion WebCodecs in TypeScript\nDESCRIPTION: This example shows how to use `canCopyAudioTrack` within the `onAudioTrack` callback provided by the `convertMedia` function from `@remotion/webcodecs`. During the media conversion process to WebM/VP8/Opus, this callback checks if the current audio track can be copied directly. If `canCopyAudioTrack` returns true, it signals to copy the track (`{type: 'copy'}`); otherwise, it opts to drop the track (`{type: 'drop'}`). In a real scenario, the 'drop' case might involve re-encoding instead.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/can-copy-audio-track.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia, canCopyAudioTrack} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  videoCodec: 'vp8',\n  audioCodec: 'opus',\n  onAudioTrack: async ({track, outputContainer, inputContainer}) => {\n    const canCopy = canCopyAudioTrack({\n      inputCodec: track.codecWithoutConfig,\n      outputContainer,\n      inputContainer,\n    });\n\n    if (canCopy) {\n      return {type: 'copy'};\n    }\n\n    // Just to keep the example brief, in reality, you would re-encode the track here\n    return {type: 'drop'};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing Path Instructions to SVG String using @remotion/paths in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `serializeInstructions` function from the `@remotion/paths` package. It takes an array of path instruction objects, each defining a type (e.g., 'M' for MoveTo, 'L' for LineTo) and coordinates, and converts it into a standard SVG path data string. This is useful for generating SVG paths programmatically after manipulating path data.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/serialize-instructions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { serializeInstructions } from \"@remotion/paths\";\n\nconst newPath = serializeInstructions([\n  {\n    type: \"M\",\n    x: 10,\n    y: 10,\n  },\n  {\n    type: \"L\",\n    x: 20,\n    y: 20,\n  },\n]); // M 10 10 L 20 20\n```\n\n----------------------------------------\n\nTITLE: Programmatically Ensuring FFmpeg Availability (JavaScript/TypeScript)\nDESCRIPTION: This function, exposed by the `@remotion/renderer` package, programmatically checks for and triggers the auto-install of the FFmpeg binary if necessary. It's an alternative to the CLI command, suitable for use within build scripts or server-side rendering logic.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ffmpeg.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nensureFfmpeg()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Key Usage Leading to Excessive Video Tags in TSX\nDESCRIPTION: This TSX snippet demonstrates a potential cause for media playback errors: creating too many video tags due to an infinite render loop. By using `uuidv4()` as the `key` prop within a `.map()` function, the `<Video>` component is unnecessarily re-created on every frame render, which can overwhelm the browser's media player capabilities. It depends on the `Video` component from the 'remotion' library.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-playback-error.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst uuidv4 = () => \"\";\n\n// ---cut---\nimport { Video } from \"remotion\";\n\nexport default function SBSVideo() {\n  return (\n    <>\n      {[\n        \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n        \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      ].map((video, i) => {\n        return <Video key={uuidv4()} src={video} />;\n      })}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Cloud Run Service - Bash\nDESCRIPTION: Deploys the latest version of a Remotion Cloud Run service using the Remotion CLI. This command packages and uploads the service, enabling the latest features and updates from the corresponding package version. Ensure your environment has the updated Remotion and @remotion/cloudrun packages before executing. The command does not require additional arguments and can be executed in any bash terminal.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/upgrading.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun services deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm (Node.js, Bash)\nDESCRIPTION: Installs all dependencies listed in the package.json file using npm, ensuring that the Next.js and Remotion video app template is ready to use. This step is required immediately after cloning the repo or scaffolding a new project. It must be run in the root directory containing the project's package.json. No additional parameters are required, and the command will output logs to the terminal.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-pages/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Project Dependencies - Console\nDESCRIPTION: This command installs all Node.js project dependencies defined in the project's package.json using npm. Required dependency: Node.js with npm. Run this command before performing any development, build, or render actions to ensure all packages are correctly installed. This command does not accept parameters, and successful execution is necessary for further actions to work as expected.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-skia/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Querying AWS Regions using Remotion Lambda CLI - Shell\nDESCRIPTION: Executes the Remotion Lambda command to list all currently supported AWS regions. This command requires the Remotion CLI NPM package to be available, either globally or via npx, and AWS credentials configured as required by Remotion. Takes optional flags such as '--default-only' to filter output to regions enabled by default in new AWS accounts. The command outputs a space-separated list of AWS region names, useful for scripting and automation. No input other than flags is required, and the output is printed to standard output.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/regions.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda regions\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Endpoint for Lambda Rendering - Remotion - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a webhook for Remotion Lambda rendering by specifying a URL, an optional secret for validation (sourced from an environment variable), and custom payload data. The `webhook` object aligns with the `RenderMediaOnLambdaInput['webhook']` type from the '@remotion/lambda' package. The `customData` property allows attaching up to 1024 bytes of user-defined information that will be sent with the webhook POST request. Input parameters include the webhook URL, secret (string or null), and any custom data. The output is a structured webhook configuration object to be passed into Lambda rendering calls. Dependencies: '@remotion/lambda' and process environment variables for secrets.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/rendermediaonlambda.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {RenderMediaOnLambdaInput} from '@remotion/lambda';\\n\\nconst webhook: RenderMediaOnLambdaInput['webhook'] = {\\n  url: 'https://mapsnap.app/api/webhook',\\n  secret: process.env.WEBHOOK_SECRET as string,\\n  // Optionally pass up to 1024 bytes of custom data\\n  customData: {\\n    id: 42,\\n  },\\n};\n```\n\n----------------------------------------\n\nTITLE: Reversing SVG Paths with @remotion/paths in TypeScript\nDESCRIPTION: This snippet shows how to import and use the reversePath function from the @remotion/paths package to reverse the direction of an SVG path string. It demonstrates calling the function with a valid SVG path ('M 0 0 L 100 0'), storing the result, and logging the reversed path ('L 100 0 M 0 0'). Required dependency is the @remotion/paths package. The input parameter is an SVG path string, and the output is a reversed SVG path string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/reverse-path.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { reversePath } from \"@remotion/paths\";\n\nconst reversedPath = reversePath(\"M 0 0 L 100 0\");\nconsole.log(reversedPath); // \"L 100 0 M 0 0\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Webpack Configuration via webpackOverride - TypeScript\nDESCRIPTION: This example demonstrates the creation of a webpackOverride function for injecting custom modifications into the Webpack configuration used by bundle(). It imports WebpackOverrideFn from @remotion/bundler, defines the function, and shows where to override or extend configuration properties. Make sure to return the modified config for Remotion to use during bundling.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/bundle.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {WebpackOverrideFn} from '@remotion/bundler';\\n// ---cut---\\nconst webpackOverride: WebpackOverrideFn = (webpackConfig) => {\\n  return {\\n    ...webpackConfig,\\n    // Override properties\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing TailwindCSS v4 Stylesheet\nDESCRIPTION: CSS code for the `src/index.css` file. This file uses the `@import` directive to include the necessary TailwindCSS styles into the project's CSS bundle.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@import 'tailwindcss';\n```\n\n----------------------------------------\n\nTITLE: Customizing the Fullscreen Button in Remotion Player with TypeScript\nDESCRIPTION: This snippet illustrates how to customize the fullscreen button in the Remotion Player controls using the `renderFullscreenButton` prop. It defines a React functional component `App` that uses `useCallback` to create a memoized function. This function receives an object with the `isFullscreen` boolean state and returns a custom React element (`MinimiseButton` or `FullScreenButton`) depending on whether the player is currently in fullscreen mode. The button won't render if fullscreen is unavailable or disabled.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/api.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nconst FullScreenButton: React.FC = () => null;\nconst MinimiseButton: React.FC = () => null;\nconst MyVideo: React.FC = () => null;\n// ---cut---\nimport {Player, RenderFullscreenButton} from '@remotion/player';\nimport {useCallback} from 'react';\n\nexport const App: React.FC = () => {\n  const renderFullscreenButton: RenderFullscreenButton = useCallback(({isFullscreen}) => {\n    if (isFullscreen) {\n      return <MinimiseButton />;\n    }\n\n    return <FullScreenButton />;\n  }, []);\n\n  return <Player component={MyVideo} durationInFrames={120} compositionWidth={1920} compositionHeight={1080} fps={30} renderFullscreenButton={renderFullscreenButton} />;\n}; \n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Remotion Thumbnail Loading State\nDESCRIPTION: Shows how to provide a custom loading indicator for the <Thumbnail> component using the `renderLoading` prop. The callback receives the thumbnail's dimensions and returns a React element (an AbsoluteFill with a loading message) to display while the thumbnail content is loading. `useCallback` is used for optimization.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/thumbnail.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RenderLoading, Thumbnail} from '@remotion/player';\nimport {useCallback} from 'react';\nimport {AbsoluteFill} from 'remotion';\n\nconst Component: React.FC = () => null;\n\n// ---cut---\n\nconst MyApp: React.FC = () => {\n  // `RenderLoading` type can be imported from \"@remotion/player\"\n  const renderLoading: RenderLoading = useCallback(({height, width}) => {\n    return (\n      <AbsoluteFill style={{backgroundColor: 'gray'}}>\n        Loading thumbnail ({height}x{width})\n      </AbsoluteFill>\n    );\n  }, []);\n\n  return <Thumbnail fps={30} component={Component} durationInFrames={100} compositionWidth={1080} compositionHeight={1080} frameToDisplay={30} renderLoading={renderLoading} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamically Ramping Volume for <OffthreadVideo> in Remotion (tsx)\nDESCRIPTION: Demonstrates using a function with `interpolate` to dynamically adjust the volume of an `<OffthreadVideo>` component over time. The volume ramps up linearly from 0 to 1 over the first 100 frames. Requires `AbsoluteFill`, `interpolate`, `staticFile`, and `OffthreadVideo` imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/offthreadvideo.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, interpolate, staticFile, OffthreadVideo} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <OffthreadVideo volume={(f) => interpolate(f, [0, 100], [0, 1], {extrapolateLeft: 'clamp'})} src={staticFile('video.webm')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Bundler with npm - Bash\nDESCRIPTION: This bash command installs the @remotion/bundler package in a Node.js project using the --save-exact flag to ensure an exact version is saved in package.json. It is necessary for projects using Remotion to maintain version consistency across all remotion-related packages. The command requires npm to be installed, and it should be run in the root directory of your project. The key parameter is the package name and the --save-exact flag, which prevents caret version ranges. No output is expected except for npm installation logs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/bundler/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/bundler --save-exact\n```\n\n----------------------------------------\n\nTITLE: Rendering Invisible Video Reference with Remotion - TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to render a video element in a React component using Remotion's <Video> component, with a ref attached for later manipulation. The video is made invisible by applying inline styles for position and opacity, ensuring it does not affect visual layout but remains available for use as a source for a Three.js texture. Dependencies include React, remotion's Video component, and the video file source; key parameters are 'src' for the video file and 'videoRef' for referencing the DOM element.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/use-video-texture.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRef } from \"react\";\nimport { Video } from \"remotion\";\nimport src from \"./vid.mp4\";\n\nconst MyVideo = () => {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n\n  return (\n    <Video\n      ref={videoRef}\n      src={src}\n      style={{ position: \"absolute\", opacity: 0 }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Importing a Component with Mismatched Filename Case in TypeScript/JSX\nDESCRIPTION: This TypeScript/JSX code snippet demonstrates importing a component (`MyComp`) from a file. It illustrates a potential cause for Fast Refresh failure where the capitalization used in the import path (`./myComp.tsx`) does not exactly match the actual file system name (e.g., `MyComp.tsx`). This discrepancy can break Fast Refresh due to case-sensitivity issues, noted as a bug in Webpack's watching mechanism. Assumes a React/TypeScript project structure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/broken-fast-refresh.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {MyComp} from \"./myComp.tsx\"\n```\n\n----------------------------------------\n\nTITLE: Allowing File Uploads and Saving via Remotion Studio - TypeScript/React\nDESCRIPTION: This code example shows how to integrate file uploads in a React component and save the uploaded file to the public directory using writeStaticFile() from @remotion/studio. It utilizes a file input to select files and, upon change, reads the selected file as an ArrayBuffer and writes it to the public directory with its original filename. Dependencies are React and @remotion/studio. The filePath parameter is dynamically set to the uploaded file's name, and contents is the file's binary data. The handler must be called within Remotion Studio, and file paths should stay within the 'public' directory context.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/write-static-file.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useCallback } from \"react\";\nimport { writeStaticFile } from \"@remotion/studio\";\n\nexport const WriteStaticFileComp: React.FC = () => {\n  const saveFile = useCallback(\n    async (e: React.ChangeEvent<HTMLInputElement>) => {\n      const file = e.target.files![0];\n\n      await writeStaticFile({\n        filePath: file.name,\n        contents: await file.arrayBuffer(),\n      });\n\n      console.log(\"Saved!\");\n    },\n    [],\n  );\n\n  return <input type=\"file\" onChange={saveFile} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Render Progress via API (JavaScript/TypeScript)\nDESCRIPTION: Retrieves the current progress of a Remotion Lambda render. The `getRenderProgress()` function queries an S3 bucket for a `progress.json` file, which is periodically updated by the main Lambda function, and returns the status.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/how-lambda-works.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngetRenderProgress()\n```\n\n----------------------------------------\n\nTITLE: Using the Dots Component within MyComposition with Remotion in TypeScript\nDESCRIPTION: This code snippet shows how to structure the main MyComposition component to use the consolidated Dots component and Background, simplifying the animation hierarchy. The MyComposition component uses AbsoluteFill for layout and demonstrates importing and including modularized subcomponents. The Dots component is expected to provide its full visual, so no props are passed in.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @filename: Background.tsx\\nexport const Background: React.FC<{}> = () => null;\\n// @filename: Dots.tsx\\nexport const Dots: React.FC<{}> = () => null;\\n\\n// @filename: MyComposition.tsx\\nimport React from 'react';\\nimport {AbsoluteFill} from 'remotion';\\nimport {Background} from './Background';\\nimport {Dots} from './Dots';\\n// ---cut---\\n\\nexport const MyComposition = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Background />\\n      <Dots />\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Capturing Browser Logs in Remotion (TypeScript)\nDESCRIPTION: Demonstrates how to use the optional `onBrowserLog` callback function in TypeScript. This function allows capturing console messages printed by the browser instance during rendering. It receives a `BrowserLog` object containing the log `type` (e.g., 'log', 'warn', 'error'), the log `text`, and the `stackTrace`. The example shows how to log this information to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-media.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport {BrowserLog} from '@remotion/renderer';\n\nconst onBrowserLog = (log: BrowserLog) => {\n  // `type` is the console.* method: `log`, `warn`, `error`, etc.\n  console.log(`[${log.type}]`);\n  console.log(log.text);\n  console.log(`at ${log.stackTrace}`);\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Lambda Insights via Remotion CLI\nDESCRIPTION: This command uses the Remotion CLI to deploy a Lambda function with AWS Lambda Insights enabled. The `--enable-lambda-insights` flag activates the feature. It requires Remotion v4.0.61+ and updated AWS permissions. If the function already existed, it must be deleted first for the setting to apply.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/insights.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda functions deploy --enable-lambda-insights\n```\n\n----------------------------------------\n\nTITLE: Default Chromium Single-Process Flag on Linux (Historical)\nDESCRIPTION: Remotion historically launched Chromium on Linux with the `--single-process` flag by default prior to v4.0.137 due to potential sandboxing and stability issues on certain distributions. This flag forces Chromium to run entirely within a single process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-single-process.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--single-process\n```\n\n----------------------------------------\n\nTITLE: Testing a Remotion Component with Bun and Happy DOM (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates a unit test for a simple Remotion component using Bun's test runner. It defines a component `Comp` that displays the current frame number. The test renders this component at frame 10 using the `<Thumbnail>` component and `renderToString` from `react-dom/server`, then asserts that the output string contains the expected text. The `<Thumbnail>` component provides the necessary Remotion context, and the `noSuspense` prop ensures synchronous rendering for testing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/testing.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"src/test/example.test.ts\"\nimport {Thumbnail} from '@remotion/player';\nimport {expect, test} from 'bun:test';\n\nimport {renderToString} from 'react-dom/server';\nimport {useCurrentFrame} from 'remotion';\n\nconst Comp: React.FC<{}> = () => {\n  const frame = useCurrentFrame();\n  const data = `We are on frame ${frame}`;\n  return <div>{data}</div>;\n};\n\ntest('should work', () => {\n  const readStream = renderToString(<Thumbnail component={Comp} compositionHeight={1000} compositionWidth={1000} durationInFrames={1000} fps={30} frameToDisplay={10} noSuspense />);\n\n  expect(readStream).toContain('<div>We are on frame 10</div>');\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Executing the Render Script with Node.js - Bash Command\nDESCRIPTION: This Bash command runs the TypeScript script ('render-all.mjs') with Node.js to initiate the rendering process. Assumes the script is written in ECMAScript module format (*.mjs) and Node.js is available in the environment. Input is the script itself; outputs are generated in the 'out' directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-all.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode render-all.mjs\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Unfetched Data in React Remotion Component (TypeScript)\nDESCRIPTION: This snippet demonstrates error handling for cases where required data has not been fetched by throwing an error if a prop is null. It is designed for components typed with nullable fields and encourages use of runtime error reporting when expected data is missing. Requires TypeScript with React, and the prop data can be null or of type ApiResponse.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/data-fetching.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\ntype ApiResponse = {\n  title: string;\n  description: string;\n};\n// ---cut---\ntype MyCompProps = {\n  id: string;\n  data: ApiResponse | null;\n};\n\nconst MyComp: React.FC<MyCompProps> = ({ data }) => {\n  if (data === null) {\n    throw new Error(\"Data was not fetched\");\n  }\n\n  return <div>{data.title}</div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Still Image Server in Node.js (Console)\nDESCRIPTION: Launches the Remotion-based server to serve dynamically rendered images by URL. Requires Node.js and all remotion dependencies. \"npm run server\" starts the production server, which listens for requests and generates images dynamically based on URL parameters. Input: dynamic HTTP requests specifying composition and image format. Output: PNG or JPEG images generated and returned to browser or clients. Limitations: compositions and server configuration must be pre-defined, supports query param input props.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-still/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm run server\n```\n\n----------------------------------------\n\nTITLE: Calling the Presigned URL API from the Frontend - TypeScript/TSX\nDESCRIPTION: Demonstrates how a frontend component can request a presigned upload URL from the Next.js API by sending the file\\'s size and contentType in the body of a POST request. Suitable for React and Next.js projects. On success, receives a JSON object with presignedUrl and readUrl to proceed with the actual file upload.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/presigned-urls.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst file: File = {} as unknown as File;\n// ---cut---\nconst presignedResponse = await fetch('/api/upload', {\n  method: 'POST',\n  body: JSON.stringify({\n    size: file.size,\n    contentType: file.type,\n    //             ^?\n  }),\n});\n\nconst json = (await presignedResponse.json()) as {\n  presignedUrl: string;\n  readUrl: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using warpPath() to Transform SVG Paths in TSX\nDESCRIPTION: Demonstrates the basic usage of the `warpPath` function from `@remotion/paths`. It imports `warpPath` and the `WarpPathFn` type, defines a sample transformation function `fn` that modifies the x-coordinate based on the y-coordinate using `Math.sin`, and then applies this function to a simple SVG line path ('M 0 0 L 0 100') to generate a new, warped path string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/warp-path.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { warpPath, WarpPathFn } from \"@remotion/paths\";\n\nconst fn: WarpPathFn = ({ x, y }) => ({\n  x: x + Math.sin(y / 4) * 5,\n  y: y,\n});\n\nconst newPath = warpPath(\"M 0 0 L 0 100\", fn); // M 0 0 L 0.970365514464549 0.78125 L 1.9038320449619508 1.5625 L 2.7649037231526368 2.34375...;\n```\n\n----------------------------------------\n\nTITLE: Aborting Download Based on Media Duration - @remotion/media-parser - TypeScript\nDESCRIPTION: Illustrates how to use the onDurationInSeconds callback within downloadAndParseMedia to inspect the video duration and abort the download if the media exceeds a maximum allowed length. Dependencies include @remotion/media-parser and @remotion/media-parser/node-writer. Throws an error if the duration exceeds 600 seconds, causing the download to stop and the file to be discarded.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/download-and-parse.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {downloadAndParseMedia} from '@remotion/media-parser';\nimport {nodeWriter} from '@remotion/media-parser/node-writer';\n\nconst {durationInSeconds} = await downloadAndParseMedia({\n  src: 'https://s3.amazonaws.com/bucket/uploaded-asset.mp4',\n  writer: nodeWriter('output.mp4'),\n  onDurationInSeconds: (duration) => {\n    if (duration && duration > 600) {\n      throw new Error('Video is too long');\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading a Remote Animated Image using <AnimatedImage> in Remotion (TSX)\nDESCRIPTION: Demonstrates how to use the `<AnimatedImage>` component in Remotion to render an animated WebP image hosted remotely. The `src` prop is set to the URL of the image. This requires the browser to support the ImageDecoder API and the remote server to allow CORS requests.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animatedimage.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Loading a remote animated image\"\nimport {AnimatedImage} from 'remotion';\n\nexport const WebpAnimatedImage = () => {\n  return <AnimatedImage src=\"https://mathiasbynens.be/demo/animated-webp-supported.webp\" />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the Application in Development Mode\nDESCRIPTION: Executes the 'dev' script defined in `package.json`. This command starts the application with development-specific configurations, often including features like hot reloading and detailed error messages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Remotion Lambda Launch Error\nDESCRIPTION: Shows a potential error message 'Error: expected to launch' that users might encounter when Remotion Lambda fails due to the incompatible AWS Lambda Node.JS runtime update.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/feb-2023-incident.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nError: expected to launch\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/google-fonts with npm - Bash\nDESCRIPTION: Installs the @remotion/google-fonts package using npm. This is the standard method for adding the package to a JavaScript/TypeScript project using the Node.js ecosystem. Requires npm to be available in your environment. No additional parameters are needed; run this command at the root of your project folder.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/google-fonts\n```\n\n----------------------------------------\n\nTITLE: Handling Browser Logs in Remotion Renderer with onBrowserLog in TypeScript\nDESCRIPTION: Demonstrates how to define types for browser log messages and how to use the onBrowserLog option in renderFrames() to handle console output from the browser session. The ConsoleMessageLocation interface and BrowserLog type define the data structure for log messages, including text, stack trace, and log type. An example shows how to consume these logs in a callback and format them for easy debugging. Depends on TypeScript's type system and the Remotion renderFrames() API with onBrowserLog callback. Expected input is a BrowserLog object, and the snippet outputs formatted console logs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-frames.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface ConsoleMessageLocation {\\n  /**\\n   * URL of the resource if known or `undefined` otherwise.\\n   */\\n  url?: string;\\n  /**\\n   * 0-based line number in the resource if known or `undefined` otherwise.\\n   */\\n  lineNumber?: number;\\n  /**\\n   * 0-based column number in the resource if known or `undefined` otherwise.\\n   */\\n  columnNumber?: number;\\n}\\n\\ntype BrowserLog = {\\n  text: string;\\n  stackTrace: ConsoleMessageLocation[];\\n  type: 'log' | 'debug' | 'info' | 'error' | 'warning' | 'dir' | 'dirxml' | 'table' | 'trace' | 'clear' | 'startGroup' | 'startGroupCollapsed' | 'endGroup' | 'assert' | 'profile' | 'profileEnd' | 'count' | 'timeEnd' | 'verbose';\\n};\\n\\nconst renderFrames = (options: {onBrowserLog?: (log: BrowserLog) => void}) => {};\\n// ---cut---\\nrenderFrames({\\n  onBrowserLog: (info) => {\\n    console.log(`${info.type}: ${info.text}`);\\n    console.log(\\n      info.stackTrace\\n        .map((stack) => {\\n          return `  ${stack.url}:${stack.lineNumber}:${stack.columnNumber}`;\\n        })\\n        .join('\\n'),\\n    );\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Chromium OpenGL Renderer in Remotion Config File - TypeScript\nDESCRIPTION: Demonstrates how to configure Remotion to use the 'angle' OpenGL renderer backend by modifying the config file using the Config.setChromiumOpenGlRenderer method. Requires the '@remotion/cli/config' package to be available. The 'angle' renderer is set for Chromium-based rendering tasks performed by Remotion CLI. Only applies to CLI commands and not to programmatic Node.js API invocations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/open-gl.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\n\n// ---cut---\n\nConfig.setChromiumOpenGlRenderer(\"angle\");\n```\n\n----------------------------------------\n\nTITLE: Post-processing visualizeAudio() Output for Logarithmic Scaling (TypeScript)\nDESCRIPTION: Shows a post-processing technique for the output array from `visualizeAudio`. It converts the raw amplitude values (0-1) into a decibel scale and then scales them linearly between `minDb` (-100) and `maxDb` (-30) to mimic the behavior of the Web Audio API's `AnalyserNode.getByteFrequencyData()`. This logarithmic scaling often produces more visually appealing results for audio visualizations. Assumes `frequencyData` is obtained from a previous `visualizeAudio` call using the defined `params`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/visualize-audio.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {visualizeAudio} from '@remotion/media-utils';\nconst params = {\n  audioData: {\n    channelWaveforms: [],\n    sampleRate: 0,\n    durationInSeconds: 0,\n    numberOfChannels: 0,\n    resultId: '',\n    isRemote: true,\n  },\n  frame: 0,\n  fps: 0,\n  numberOfSamples: 0,\n};\n// ---cut---\n/**\n * This postprocessing step will match the values with what you'd\n * get from WebAudio's `AnalyserNode.getByteFrequencyData()`.\n *\n * MDN: https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\n * W3C Spec: https://www.w3.org/TR/webaudio/#AnalyserNode-methods\n */\n\n// get the frequency data\nconst frequencyData = visualizeAudio(params);\n\n// default scaling factors from the W3C spec for getByteFrequencyData\nconst minDb = -100;\nconst maxDb = -30;\n\nconst amplitudes = frequencyData.map((value) => {\n  // convert to decibels (will be in the range `-Infinity` to `0`)\n  const db = 20 * Math.log10(value);\n\n  // scale to fit between min and max\n  const scaled = (db - minDb) / (maxDb - minDb);\n\n  return scaled;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Static Default Props with updateDefaultProps in TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of `updateDefaultProps` to set a specific object (`{ color: 'green' }`) as the new default props for the composition named 'my-composition'. The update applies only to the current Studio session and is not saved permanently. It requires importing `updateDefaultProps` from `@remotion/studio`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/update-default-props.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @target: esnext\nimport { updateDefaultProps } from \"@remotion/studio\";\n\nupdateDefaultProps({\n  compositionId: \"my-composition\",\n  defaultProps: () => {\n    return {\n      color: \"green\",\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Supported AWS Lambda Regions with Remotion Lambda in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to import the getRegions function from the @remotion/lambda package and retrieve the list of all supported AWS regions for use with Remotion Lambda. The function takes an optional options object to filter by regions enabled by default (enabledByDefaultOnly), and returns an array of region string identifiers such as \\\"eu-central-1\\\" or \\\"us-east-1\\\". Dependencies include the @remotion/lambda package, and the snippet is intended for use in a Node.js or frontend TypeScript environment where AWS region data is required.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getregions.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getRegions} from '@remotion/lambda';\n\n// ---cut---\n\nconst regions = getRegions();\n// [\"eu-central-1\", \"us-east-1\"]\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering MDX Webpack Override (TypeScript)\nDESCRIPTION: Illustrates how to import the enableMdx override function and use it with Config.overrideWebpackConfig to enable MDX file support in remotion.config.ts. Ensures MDX imports are available project-wide, with module declaration for TypeScript support. Requires that enableMdx is created and exported as shown earlier.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ./src/enable-mdx.ts\nimport {WebpackOverrideFn} from '@remotion/bundler';\nexport const enableMdx: WebpackOverrideFn = (c) => c;\n// @filename: remotion.config.ts\n// ---cut---\nimport {Config} from '@remotion/cli/config';\nimport {enableMdx} from './src/enable-mdx';\n\nConfig.overrideWebpackConfig(enableMdx);\n```\n\n----------------------------------------\n\nTITLE: Default audio playlist selection with Remotion Media Parser (TypeScript)\nDESCRIPTION: Demonstrates use of the defaultSelectM3uAssociatedPlaylists function from @remotion/media-parser as the selectM3uAssociatedPlaylists callback to select appropriate audio tracks. This is suitable for common scenarios where the default behavior suffices (all with default: true or the single playlist). Dependencies are @remotion/media-parser and a source m3u8 stream. The output is a media object with default audio playlist selection logic applied.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/selecting-streams.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {parseMedia, defaultSelectM3uAssociatedPlaylists} from '@remotion/media-parser';\\n\\nconst media = await parseMedia({\\n  src: 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8',\\n  selectM3uAssociatedPlaylists: defaultSelectM3uAssociatedPlaylists,\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating or Retrieving Remotion Lambda S3 Bucket - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the getOrCreateBucket function from the @remotion/lambda package to ensure a compatible AWS S3 bucket exists in a given region for Remotion Lambda. It imports the function, asynchronously requests a bucket for 'us-east-1', and logs the resulting bucket name. Required dependency: '@remotion/lambda'. Input is an object with at least the 'region' property. The output is an object containing the bucket name and additional metadata. Only a single bucket per AWS region is supported, and additional advanced options are available for custom scenarios.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getorcreatebucket.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getOrCreateBucket} from '@remotion/lambda';\n\nconst {bucketName} = await getOrCreateBucket({region: 'us-east-1'});\n\nconsole.log(bucketName); // \"remotionlambda-32df3p\"\n```\n\n----------------------------------------\n\nTITLE: Checking AWS Lambda Quotas using Remotion CLI (Shell)\nDESCRIPTION: This shell command uses the Remotion CLI to display the current AWS Lambda concurrency limits associated with the configured AWS account. This functionality was introduced in the '2022-03-17' prerelease version and requires appropriate AWS policies to be set up as described in the setup documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/changelog.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda quotas\n```\n\n----------------------------------------\n\nTITLE: Calculating HMAC Webhook Signature - Remotion Lambda - JavaScript\nDESCRIPTION: Implements SHA-512 HMAC signature calculation for verifying Remotion webhook authenticity using a shared secret and raw request body. Use 'crypto' Node.js module as dependency; function returns 'sha512=...' signature string or 'NO_SECRET_PROVIDED' if no secret is available. Input 'payload' should be the raw webhook request body as a string; 'secret' is the shared verification token.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as Crypto from \"crypto\";\\n\\nfunction calculateSignature(payload: string, secret?: string) {\\n  if (!secret) {\\n    return \"NO_SECRET_PROVIDED\";\\n  }\\n  const hmac = Crypto.createHmac(\"sha512\", secret);\\n  const signature = \"sha512=\" + hmac.update(payload).digest(\"hex\");\\n  return signature;\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Autoplay for @remotion/player in TypeScript React\nDESCRIPTION: Adds the autoPlay prop to trigger automatic playback when the Player component mounts. Relies on the browser's autoplay policy (may restrict media with sound). Inputs: all previous props including autoPlay. Outputs: player attempts to play media immediately on load. Note: in most browsers, autoplay with audio may be blocked unless muted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player } from \"@remotion/player\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  return (\\n    <Player\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n      controls\\n      loop\\n      style={{\\n        width: 1280,\\n        height: 720,\\n      }}\\n      autoPlay\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Returning a Composition Within Player Component (TypeScript)\nDESCRIPTION: This snippet demonstrates another common misuse, where a <Composition> is returned by the component prop passed to the Remotion <Player>, causing a mounting error at runtime. The code imports both Player and Composition, defines a AnotherComp, and then MyComp, which returns the problematic Composition. Index then passes MyComp as the component prop to Player, resulting in incorrect behavior. Dependencies: @remotion/player and remotion. Key parameters: Player's duration, fps, width, and height, and the target component. Inputs are components, and output triggers a composition-in-component error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/wrong-composition-mount.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Player } from \"@remotion/player\";\nimport { Composition } from \"remotion\";\n\nconst AnotherComp: React.FC = () => {\n  return null;\n};\n\n// ---cut---\n\nconst MyComp: React.FC = () => {\n  return (\n    <Composition\n      durationInFrames={300}\n      fps={30}\n      width={1080}\n      height={1080}\n      id=\"another-component\"\n      component={AnotherComp}\n    />\n  );\n};\n\nconst Index: React.FC = () => {\n  return (\n    <Player\n      durationInFrames={300}\n      fps={30}\n      compositionWidth={1080}\n      compositionHeight={1080}\n      component={MyComp}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Animating Text with Basic TranslateY in Remotion (TypeScript/React)\nDESCRIPTION: This snippet animates a text element by vertically translating it using a simple CSS transform in a React component for Remotion. It leverages the interpolate function to map the current animation frame to a pixel offset for the translateY CSS property, resulting in frame-based up/down movement. Dependencies include Remotion's interpolate function and React; inputs are the current frame and the frame range [0, 200] mapped to [0, 50] pixels. Output is a styled <div> moving smoothly except for subpixel snapping artifacts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/subpixel-rendering.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n```tsx title=\\\"Left side of the video\\\"\n<div\n  style={{\n    transform: 'translateY(' + interpolate(frame, [0, 200], [0, 50]) + 'px)',\n  }}\n>\n  hi there\n</div>\n```\n```\n\n----------------------------------------\n\nTITLE: Setting up Remotion ThreeCanvas with Spline Model (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the main `Scene` component for a Remotion video using React. It utilizes `ThreeCanvas` from `@remotion/three` to establish the 3D rendering context. The `Torus` component, assumed to contain the exported Spline scene, is imported and rendered within this canvas. Video dimensions are dynamically obtained using the `useVideoConfig` hook from Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spline.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: src/Torus.tsx\nimport React from 'react';\nconst Torus: React.FC = () => null;\nexport default Torus;\n// @filename: src/Root.tsx\n// ---cut---\n// @jsx: react-jsx\nimport {ThreeCanvas} from '@remotion/three';\nimport {useVideoConfig} from 'remotion';\nimport Torus from './Torus';\n\nexport const Scene: React.FC = () => {\n  const {width, height} = useVideoConfig();\n\n  return (\n    <ThreeCanvas width={width} height={height}>\n      <Torus />\n    </ThreeCanvas>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting a Render Using `deleteRender` in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to invoke the `deleteRender` function from the `@remotion/lambda` package to remove a specific render from an S3 bucket. It requires providing the AWS region, the S3 bucket name where the render is stored, and the unique `renderId` obtained from a previous render operation (`renderMediaOnLambda` or `renderStillOnLambda`). The function returns a promise that resolves to an object containing `freedBytes`, indicating the amount of storage space reclaimed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/deleterender.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {deleteRender} from '@remotion/lambda';\n\nconst {freedBytes} = await deleteRender({\n  bucketName: 'remotionlambda-r42fs9fk',\n  region: 'us-east-1',\n  renderId: '8hfxlw',\n});\n\nconsole.log(freedBytes); // 21249541\n```\n\n----------------------------------------\n\nTITLE: Rendering a Still Frame with Remotion Lambda CLI using Serve URL Shorthand in Shell\nDESCRIPTION: Demonstrates rendering the default frame of 'my-comp' using a shorthand serve URL alias ('testbed'). Note that when using the shorthand, the composition ID must be explicitly provided as the command cannot fetch the available compositions without the full URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/still.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda still testbed my-comp\n```\n\n----------------------------------------\n\nTITLE: Successful Dynamic Import from Runtime Props with Inline Expression (TSX)\nDESCRIPTION: Demonstrates a working solution for dynamically importing assets based on runtime `getInputProps`. By constructing the path within the `require()` call, including a fixed directory prefix (`./assets/`), Webpack is hinted to bundle all files within that directory, allowing the specific file determined by `inputProps.imageSrc` to be loaded.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-import.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { getInputProps, Img } from \"remotion\";\n\nconst DynamicAsset: React.FC = () => {\n  const inputProps = getInputProps(); // {\"imageSrc\": \"img0.png\"}\n  // Works!\n  return <Img src={require((\"./assets/\" + inputProps.imageSrc) as string)} />;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This console command uses the Node Package Manager (npm) to install all the dependencies listed in the project's `package.json` file. This is a standard first step after cloning or setting up the project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-google/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n```console\nnpm i\n```\n```\n\n----------------------------------------\n\nTITLE: Importing AAC Visualization Components in React (JavaScript)\nDESCRIPTION: This snippet imports React components related to AAC audio handling (AacFile, AacPadding, AacConcatenationProblem, AacKeyframes, AacConcatenationSolution, AacBenchmarks) from specific directories. These components are used within the MDX blog post for visual explanations and interactive diagrams. Required dependencies are React and the relative component modules; no standalone execution context is provided. Inputs and outputs are not directly defined in this import statement, but the imported components are later rendered in the document.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2024-03-21-faster-lambda.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { AacFile } from \"../components/Aac/AacFile\";\nimport { AacPadding } from \"../components/Aac/AacPadding\";\nimport { AacConcatenationProblem } from \"../components/Aac/AacConcatenationProblem\";\nimport { AacKeyframes } from \"../components/Aac/AacKeyframes\";\nimport { AacConcatenationSolution } from \"../components/Aac/AacConcatenationSolution\";\nimport { AacBenchmarks } from \"../components/Aac/Benchmarks\";\n```\n\n----------------------------------------\n\nTITLE: Detecting Apple Silicon Rosetta Warning - Node.js - Plain Text\nDESCRIPTION: This snippet shows the warning message that appears when running Remotion's renderer under Rosetta on Apple Silicon, indicating suboptimal performance and recommending native arm64 execution with Node 16 or later. No specific dependencies are required as this is an informational output. Inputs and outputs are not applicable as it's a static warning for user context.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/rosetta.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nApple Silicon detected but running under Rosetta (not arm64 architecture). This will cause performance issues.\nRecommended actions:\n - Upgrade to Node 16.0.0 or later\n - Run Node using `arch -arm64` architecture\n```\n\n----------------------------------------\n\nTITLE: Rendering Video from Deployed Studio URL using CLI (Bash)\nDESCRIPTION: Demonstrates the minimal command using `npx remotion render` to render a video using a deployed Remotion Studio URL (e.g., `https://remotion-helloworld.vercel.app`). This command renders the default composition without specific input props.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/deploy-static.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render https://remotion-helloworld.vercel.app\n```\n\n----------------------------------------\n\nTITLE: Applying Rotate Transform using Style Prop in TSX\nDESCRIPTION: Illustrates applying a rotation transformation to a `div` element using the `transform: rotate()` CSS property within the `style` prop in TSX. Rotation turns the element around its center by a specified angle (e.g., '45deg'). This is equivalent to `rotateZ(45deg)`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transforms.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash {6} title=\"MyComponent.tsx\"\n<div\n  style={{\n    height: 100,\n    width: 100,\n    backgroundColor: \"red\",\n    transform: `rotate(45deg)`, // the same as rotateZ(45deg)\n  }}\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Folder Structure (Plaintext)\nDESCRIPTION: Suggests creating a dedicated folder `src/app/remotion` within the Angular project structure to hold all Remotion-related files, promoting better code organization and separation from the main Angular codebase.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/app/remotion\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic React Functional Component (TypeScript)\nDESCRIPTION: Defines a simple React functional component named BlueSquare which returns an empty div. This example is minimal and is often used as a placeholder in other, more complex sequencing examples throughout the documentation. No dependencies are required except for React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst BlueSquare: React.FC = () => <div></div>\n// - BlueSquare\n```\n\n----------------------------------------\n\nTITLE: Validating Remotion Lambda User Policies (Bash)\nDESCRIPTION: Command to verify if the IAM user policy currently applied in AWS matches the requirements of the installed Remotion Lambda version. This should be run after updating the user policy in the AWS console to confirm the changes were applied correctly and include the necessary permissions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/s3-public-access.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda policies validate\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.cubic Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.cubic`. This is a cubic easing function where the output position is proportional to the cube of the elapsed time (`f(t) = t * t * t`), resulting in a stronger ease-in effect than `quad`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nstatic cubic(t): number\n```\n\n----------------------------------------\n\nTITLE: Updating `renderFrames` Call for Composition ID (TypeScript/TSX)\nDESCRIPTION: Demonstrates the breaking change in `renderFrames` where the `compositionId` parameter is removed. The composition ID is now included within the `composition` object (previously `config`) as the `id` property. Update calls to remove `compositionId` and include `id` within the `composition` object.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nrenderFrames({\n  compositionId: \"my-com\",\n  config: {\n    width: 1920,\n    height: 1080,\n    fps: 30,\n    durationInFrames: 300,\n  },\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\nrenderFrames({\n  composition: {\n    id: \"my-com\",\n    width: 1920,\n    height: 1080,\n    fps: 30,\n    durationInFrames: 300,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking if an Audio Track Can Be Copied using Remotion WebCodecs in TypeScript\nDESCRIPTION: This snippet demonstrates how to use `parseMedia` from `@remotion/media-parser` to get audio track information from a media file (MP4 in this case) and then use `canCopyAudioTrack` from `@remotion/webcodecs` to check if each audio track can be directly copied into a different container format (WebM). It iterates through the extracted audio tracks and calls `canCopyAudioTrack` with the track's codec, the input container, and the desired output container.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/can-copy-audio-track.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\nimport {canCopyAudioTrack} from '@remotion/webcodecs';\n\nconst {tracks, container} = await parseMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  fields: {\n    tracks: true,\n    container: true,\n  },\n});\n\nfor (const track of tracks.audioTracks) {\n  canCopyAudioTrack({\n    inputCodec: track.codecWithoutConfig,\n    outputContainer: 'webm',\n    inputContainer: container,\n  }); // bool\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Animoji Frame Sequence using Remotion and staticFile - TypeScript/React\nDESCRIPTION: Defines an <Animoji> component that renders a single frame of an exported animoji sequence, aligning it at the center and maintaining vertical offset and maximum height. Uses Remotion's useCurrentFrame hook to synchronize displayed image with the animation, doubling the current frame index for slower playback. Relies on the staticFile API to resolve public folder static assets. Expects frame images like 'frame000.png', 'frame002.png', etc., with transparent background. Outputs a centered image updated per frame, constrained in size, suitable for overlay in a video composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_28\n\nLANGUAGE: TSX\nCODE:\n```\nimport React from 'react';\\nimport {AbsoluteFill, Img, staticFile, useCurrentFrame} from 'remotion';\\n\\nexport const Animoji: React.FC = () => {\\n  const frame = useCurrentFrame();\\n\\n  const src = `frame${(frame * 2).toString().padStart(3, '0')}.png`;\\n\\n  return (\\n    <AbsoluteFill\\n      style={{\\n        justifyContent: 'center',\\n        alignItems: 'center',\\n        marginTop: 80,\\n      }}\\n    >\\n      <Img\\n        style={{\\n          height: 800,\\n        }}\\n        src={staticFile(src)}\\n      />\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Images as Modules Using ES Module Imports (TypeScript)\nDESCRIPTION: Shows the alternative method for importing image assets directly into TypeScript using ES module imports. The image logo.png is imported as a module, and its reference is provided to the <Img /> component as the src. Only certain extensions are supported (.png, .svg, etc.), and dynamic imports are discouraged.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Img } from \\\"remotion\\\";\\nimport logo from \\\"./logo.png\\\";\\n\\nexport const MyComp: React.FC = () => {\\n  return <Img src={logo} />;\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Executing 'remotion compositions' Command\nDESCRIPTION: This command uses `npx` to execute the `remotion` CLI tool with the `compositions` subcommand. It lists the composition IDs found in the specified `<serve-url>` or `<entry-file>`, or determines the entry point automatically if none is provided. Requires Node.js and Remotion to be available.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/compositions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion compositions <serve-url|entry-file>?\n```\n\n----------------------------------------\n\nTITLE: Generating 4D Noise Values with @remotion/noise in TypeScript\nDESCRIPTION: This TypeScript code imports the noise4D function from the @remotion/noise package and demonstrates its usage by passing a string seed and four numeric dimension values (x, y, z, w). It logs the resulting 4D noise value between -1 and 1, which deterministically depends on the given seed and dimensions. Required dependencies: @remotion/noise (which internally depends on simplex-noise). Inputs include a seed and four numbers; output is a number in [-1,1]. The code assumes a JavaScript/TypeScript environment with ES module support.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/noise/noise-4d.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { noise4D } from \"@remotion/noise\";\n\nconst x = 32;\nconst y = 40;\nconst z = 50;\nconst w = 64;\nconsole.log(noise4D(\"my-seed\", x, y, z, w));\n```\n\n----------------------------------------\n\nTITLE: Falling Back to Default Audio Track Handling in TSX\nDESCRIPTION: Illustrates how to provide custom logic within the `onAudioTrack` callback while still allowing a fallback to the default behavior. The custom logic is executed first, and if it doesn't return a specific action, the `defaultOnAudioTrackHandler` function (imported from `@remotion/webcodecs`) is called with the callback parameters to apply the standard track handling.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/track-transformation.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia, defaultOnAudioTrackHandler} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  onAudioTrack: (params) => {\n    // Custom logic for handling video tracks\n    // ...\n\n    // Fall back to the default behavior\n    return defaultOnAudioTrackHandler(params);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Playback on Button Click with play() in Remotion Studio (TSX)\nDESCRIPTION: This TSX snippet demonstrates using the `play()` function from `@remotion/studio` as an event handler for a button's `onClick` event. Passing the event object (`e`) to `play()` is recommended to improve browser handling of audio autoplay policies. Requires `@remotion/studio` and React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/play.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {play} from '@remotion/studio';\n\nconst PlayButton = () => {\n  // Call with the event parameter for better browser audio autoplay\n  return <button onClick={(e) => play(e)}>Play</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the openBrowser Function Signature with TypeScript in Remotion Renderer\nDESCRIPTION: This TypeScript code snippet shows the type definition for the openBrowser function in the @remotion/renderer package. The function accepts a browser identifier (currently only 'chrome' is valid) and an options object for configuration, then returns a Promise resolving to a puppeteer.Browser instance. Key options include browserExecutable for specifying the browser path, chromiumOptions for Chromium/Chrome launch flags, and shouldDumpIo for logging (deprecated in favor of logLevel). The function requires Puppeteer as a dependency and expects proper configuration for advanced options such as executable paths or device scale factors. Inputs: a string browser name and an options object; Output: a Promise resolving to a launched Browser instance. Requires TypeScript and access to Puppeteer types.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/open-browser.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst openBrowser: (\n  browser: Browser,\n  options: {\n    shouldDumpIo?: boolean;\n    browserExecutable?: string | null;\n    chromiumOptions?: ChromiumOptions;\n  },\n) => Promise<puppeteer.Browser>;\n```\n\n----------------------------------------\n\nTITLE: Checking and Configuring AudioDecoder Support in WebCodecs (TypeScript)\nDESCRIPTION: This snippet tests if a specific audio decoder configuration is supported by the browser using AudioDecoder.isConfigSupported, then attempts to configure an AudioDecoder instance with it. It demonstrates a real-world Chrome quirk where isConfigSupported may incorrectly return supported: true, but actual configuration still fails. WebCodecs is required, and the snippet expects a browser environment supporting AudioDecoder. Key parameters include codec, numberOfChannels, and sampleRate. The output will log the support check and may raise an error during configuration, illustrating the need for robust error handling.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config = {codec: 'opus', numberOfChannels: 6, sampleRate: 44100};\\nconsole.log(await AudioDecoder.isConfigSupported(config)); // {supported: true}\\n\\nconst decoder = new AudioDecoder({error: console.error, output: console.log});\\n\\ndecoder.configure(config); // Unsupported configuration. Check isConfigSupported() prior to calling configure().\n```\n\n----------------------------------------\n\nTITLE: Generating CSS skew() Transform in Remotion (TSX)\nDESCRIPTION: Illustrates using the `skew` function from `@remotion/animation-utils` to generate a CSS `skew()` transform string. It accepts a single numerical argument for the skew angle in degrees.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { skew } from \"@remotion/animation-utils\";\n\nconst transform = skew(45);\n// => \"skew(45deg)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling SVGR SVG Import Support via Webpack Override (TypeScript)\nDESCRIPTION: Declares an enableSvgr function that adds loader configuration using @svgr/webpack for importing SVGs as React components. Also modifies existing rules to avoid Remotion's default SVG URL loading. Should be used when you want .svg to resolve to a React component in TypeScript. Depends on @remotion/bundler and @svgr/webpack.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebpackOverrideFn} from '@remotion/bundler';\n\nexport const enableSvgr: WebpackOverrideFn = (currentConfiguration) => {\n  return {\n    ...currentConfiguration,\n    module: {\n      ...currentConfiguration.module,\n      rules: [\n        {\n          test: \\/\\.svg$/i,\n          issuer: \\/\\.[jt]sx?$/,\n          resourceQuery: {not: [/url/]}, // Exclude react component if *.svg?url\n          use: ['@svgr/webpack'],\n        },\n        ...(currentConfiguration.module?.rules ?? []).map((r) => {\n          if (!r) {\n            return r;\n          }\n          if (r === '...') {\n            return r;\n          }\n          if (!r.test?.toString().includes('svg')) {\n            return r;\n          }\n          return {\n            ...r,\n            // Remove Remotion loading SVGs as a URL\n            test: new RegExp(r.test.toString().replace(/svg\\|/g, '').slice(1, -1)),\n          };\n        }),\n      ],\n    },\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering with Shorthand Serve URL using Remotion Lambda CLI - Bash\nDESCRIPTION: Illustrates usage of the shorthand form of the Serve URL in the Remotion Lambda CLI to render a video composition. The command accepts a composition ID and the shorthand serve name. Prerequisites include a correctly configured Remotion Lambda site and a valid composition identifier. Outputs are handled as in the default workflow.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/render.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render testbed my-comp\n```\n\n----------------------------------------\n\nTITLE: Implementing the Buffer Manager Pattern in Remotion Player (TypeScript, React)\nDESCRIPTION: Implements BufferManager, a React component that monitors and signals changes in buffering state across multiple media elements. It uses React hooks such as useRef, useCallback, and useMemo to keep track of the current buffer state and trigger onBuffer/onContinue props as necessary. Wraps children in a BufferContext.Provider for global access to context methods. Requires react and TypeScript, expects onBuffer/onContinue callback props and children elements. Inputs are children nodes and callback functions; outputs are buffer state notifications.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/buffer-state.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createContext } from \\\"react\\\";\n\ntype BufferState = { [key: string]: boolean };\n\ntype BufferContextType = {\n  canPlay: (id: string) => void;\n  needsToBuffer: (id: string) => void;\n};\n\nexport const BufferContext = createContext<BufferContextType>({\n  // By default, do nothing if the context is not set, for example in rendering\n  canPlay: () => {},\n  needsToBuffer: () => {},\n});\n\n// ---cut---\nimport { useCallback, useMemo, useRef } from \\\"react\\\";\n\nexport const BufferManager: React.FC<{\n  children: React.ReactNode;\n  onBuffer: () => void;\n  onContinue: () => void;\n}> = ({ children, onBuffer, onContinue }) => {\n  const bufferState = useRef<BufferState>({});\n  const currentState = useRef(false);\n\n  const sendEvents = useCallback(() => {\n    let previousState = currentState.current;\n    currentState.current = Object.values(bufferState.current).some(Boolean);\n\n    if (currentState.current && !previousState) {\n      onBuffer();\n    } else if (!currentState.current && previousState) {\n      onContinue();\n    }\n  }, [onBuffer, onContinue]);\n\n  const canPlay = useCallback(\n    (id: string) => {\n      bufferState.current[id] = false;\n      sendEvents();\n    },\n    [sendEvents],\n  );\n\n  const needsToBuffer = useCallback(\n    (id: string) => {\n      bufferState.current[id] = true;\n      sendEvents();\n    },\n    [sendEvents],\n  );\n\n  const bufferEvents = useMemo(() => {\n    return {\n      canPlay,\n      needsToBuffer,\n    };\n  }, [canPlay, needsToBuffer]);\n\n  return (\n    <BufferContext.Provider value={bufferEvents}>\n      {children}\n    </BufferContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing the @remotion/google-fonts Package with npm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @remotion/google-fonts package in a Remotion project using npm. The --save-exact flag ensures that the exact version specified is installed, avoiding potential compatibility issues due to version mismatches among Remotion packages. Replace any existing ^ character in the version string with the specific version number to prevent unwanted upgrades.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/google-fonts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/google-fonts --save-exact\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple delayRender Handles in Remotion (TypeScript/React)\nDESCRIPTION: Illustrates how to call delayRender multiple times and resolve them all before allowing rendering to continue. Two independent handles are created and both must be resolved via continueRender. Uses useEffect and useState hooks; each delayRender creates a blocking handle. All handles must be cleared for rendering to proceed. Requires remotion and React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/delay-render.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from \"react\";\nimport { continueRender, delayRender } from \"remotion\";\n\nconst MyComp: React.FC = () => {\n  const [handle1] = useState(() => delayRender());\n  const [handle2] = useState(() => delayRender());\n\n  useEffect(() => {\n    // You need to clear all handles before the render continues\n    continueRender(handle1);\n    continueRender(handle2);\n  }, []);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Hooks for Remotion and R3F in Spline Component (TypeScript)\nDESCRIPTION: This TypeScript code snippet lists the necessary imports for the `Torus.tsx` file, which wraps the Spline model. It includes `useEffect` from React for side effects like camera setup, `useThree` from `@react-three/fiber` to access the R3F state (including the camera), and several Remotion hooks (`interpolate`, `spring`, `useCurrentFrame`, `useVideoConfig`) crucial for creating time-based animations and accessing video properties.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spline.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport React, {useEffect} from 'react';\nimport {useThree} from '@react-three/fiber';\nimport {interpolate, spring, useCurrentFrame, useVideoConfig} from 'remotion';\n```\n\n----------------------------------------\n\nTITLE: Polling for Render Progress with Remotion Lambda API (TypeScript)\nDESCRIPTION: This snippet shows how to monitor the status of a Remotion Lambda render job initiated via the Node.JS API. It uses a `while` loop to repeatedly call `getRenderProgress` every second, passing the `renderId`, `bucketName`, `functionName`, and region. The loop exits and logs the output file path if the render is `done`, or logs errors and exits if a `fatalErrorEncountered`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getFunctions, renderMediaOnLambda, getRenderProgress} from '@remotion/lambda/client';\n\nconst url = 'string';\nconst functions = await getFunctions({\n  region: 'us-east-1',\n  compatibleOnly: true,\n});\n\nconst functionName = functions[0].functionName;\n\nconst {renderId, bucketName} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName,\n  serveUrl: url,\n  composition: 'HelloWorld',\n  inputProps: {},\n  codec: 'h264',\n  imageFormat: 'jpeg',\n  maxRetries: 1,\n  framesPerLambda: 20,\n  privacy: 'public',\n});\n// ---cut---\nwhile (true) {\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  const progress = await getRenderProgress({\n    renderId,\n    bucketName,\n    functionName,\n    region: 'us-east-1',\n  });\n  if (progress.done) {\n    console.log('Render finished!', progress.outputFile);\n    process.exit(0);\n  }\n  if (progress.fatalErrorEncountered) {\n    console.error('Error enountered', progress.errors);\n    process.exit(1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Video Rendering Entrypoint Script - Bash\nDESCRIPTION: A minimal bash script intended as the entrypoint for the Remotion GPU-enabled Docker container. Executes a Remotion render command with OpenGL angle-egl backend, producing an MP4 video as output. Assumes remotion and its dependencies are installed. Inputs are as coded; output is a video file at out/video.mp4. Limitations: Assumes presence of required assets in the cloned repository.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nnpx remotion render --gl=angle-egl Scene out/video.mp4\n```\n\n----------------------------------------\n\nTITLE: Demoing Drag-and-Drop Layers with Remotion Player in TypeScript\nDESCRIPTION: This snippet defines a React component that serves as a fully functional demo of a drag-and-drop, resizable layer system, integrating with Remotion's Player. It establishes initial item state, manages selection, and builds change mechanisms with useCallback and useMemo, then passes structured props to the Main component rendered inside the Remotion <Player>. Dependencies include React, Remotion's Player, and the previously defined Main component and types; inputProps shape is critical for correct behavior. Inputs are initial item arrays and outputs are visual, interactive demo compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Player} from '@remotion/player';\\nimport React, {useCallback, useMemo, useState} from 'react';\\nimport type {MainProps} from './Main';\\nimport {Main} from './Main';\\nimport type {Item} from './item';\\n\\nexport const DragAndDropDemo: React.FC = () => {\\n  const [items, setItems] = useState<Item[]>([\\n    {\\n      left: 395,\\n      top: 270,\\n      width: 540,\\n      durationInFrames: 100,\\n      from: 0,\\n      height: 540,\\n      id: 0,\\n      color: '#ccc',\\n      isDragging: false,\\n    },\\n    {\\n      left: 985,\\n      top: 270,\\n      width: 540,\\n      durationInFrames: 100,\\n      from: 0,\\n      height: 540,\\n      id: 1,\\n      color: '#ccc',\\n      isDragging: false,\\n    },\\n  ]);\\n  const [selectedItem, setSelectedItem] = useState<number | null>(null);\\n\\n  const changeItem = useCallback(\\n    (itemId: number, updater: (item: Item) => Item) => {\\n      setItems((oldItems) => {\\n        return oldItems.map((item) => {\\n          if (item.id === itemId) {\\n            return updater(item);\\n          }\\n\\n          return item;\\n        });\\n      });\\n    },\\n    [],\\n  );\\n\\n  const inputProps: MainProps = useMemo(() => {\\n    return {\\n      items,\\n      setSelectedItem,\\n      changeItem,\\n      selectedItem,\\n    };\\n  }, [changeItem, items, selectedItem]);\\n\\n  return (\\n    <Player\\n      style={{\\n        width: '100%',\\n      }}\\n      component={Main}\\n      compositionHeight={1080}\\n      compositionWidth={1920}\\n      durationInFrames={300}\\n      fps={30}\\n      inputProps={inputProps}\\n      overflowVisible\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Audio Only using renderMedia in TypeScript\nDESCRIPTION: Provides a TypeScript example using `@remotion/renderer`'s `renderMedia` function to export only the audio. It involves bundling the project using `@remotion/bundler`, getting composition details, and then calling `renderMedia` with the `codec` parameter set to an audio format like 'mp3'. The `serveUrl` points to the bundled project location, and `outputLocation` specifies the destination file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {bundle} from '@remotion/bundler';\nimport {getCompositions, renderMedia} from '@remotion/renderer'; // The composition you want to render\nimport path from 'path';\nconst compositionId = 'HelloWorld';\n\n// You only have to do this once, you can reuse the bundle.\nconst entry = './src/index';\nconsole.log('Creating a Webpack bundle of the video');\nconst bundleLocation = await bundle(path.resolve(entry), () => undefined, {\n  // If you have a Webpack override, make sure to add it here\n  webpackOverride: (config) => config,\n});\n\n// Parametrize the video by passing arbitrary props to your component.\nconst inputProps = {\n  foo: 'bar',\n};\n\n// Extract all the compositions you have defined in your project\n// from the webpack bundle.\nconst comps = await getCompositions(bundleLocation, {\n  // You can pass custom input props that you can retrieve using getInputProps()\n  // in the composition list. Use this if you want to dynamically set the duration or\n  // dimensions of the video.\n  inputProps,\n});\n\n// Select the composition you want to render.\nconst composition = comps.find((c) => c.id === compositionId);\n\n// Ensure the composition exists\nif (!composition) {\n  throw new Error(`No composition with the ID ${compositionId} found.\\n  Review \"${entry}\" for the correct ID.`);\n}\nconst outputLocation = `out/${compositionId}.mp4`;\n\n// ---cut---\nawait renderMedia({\n  composition,\n  serveUrl: bundleLocation,\n  codec: 'mp3',\n  outputLocation,\n  inputProps,\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling TailwindCSS in Remotion via Webpack Configuration - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the enableTailwind utility from the @remotion/tailwind package to augment Remotion's Webpack setup for TailwindCSS compatibility. It shows the recommended approach by leveraging Config.overrideWebpackConfig and passing the generated configuration from enableTailwind. Dependencies include the @remotion/cli/config and @remotion/tailwind packages, as well as TailwindCSS installed in the project. The function receives the current Webpack configuration as input and returns a modified configuration, allowing Tailwind styles to be used within Remotion components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind/overview.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport {enableTailwind} from '@remotion/tailwind';\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableTailwind(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring the Cube Transition Direction Type in TypeScript\nDESCRIPTION: This snippet shows how to import and use the CubeDirection type from @remotion-dev/cube-presentation, which restricts direction values to one of four allowed string literals (from-left, from-right, from-top, from-bottom) for the cube transition. No additional dependencies beyond the cube-presentation package are required. The main parameter is the direction, ensuring strict type safety for configuration of the animation's entry/exit side.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/cube.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CubeDirection } from \\\"@remotion-dev/cube-presentation\\\";\n\nconst flipDirection: CubeDirection = \\\"from-left\\\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging for Remotion Render Command - Shell\nDESCRIPTION: This snippet instructs users to add the '--log=verbose' flag to the 'npx remotion render' command for debugging browser launch issues. The verbose logging option increases output detail, assisting in the diagnosis of problems related to launching a browser process in Remotion workflows. The parameter should be appended directly to the shell command; no additional dependencies beyond Remotion are needed, and the output will be displayed in the terminal for further inspection.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/browser-launch.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--log=verbose\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Composition with Explicit Output (Bash)\nDESCRIPTION: This command shows the standard way to render a specific Remotion composition ('my-comp') located in 'src/index.tsx' to a defined output file 'output.mp4' using the Remotion CLI. This represents the command structure prior to the introduction of shorter command options in version 3.3.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render src/index.tsx my-comp output.mp4\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Bitrate using Remotion Config in TypeScript\nDESCRIPTION: Specifies the target audio bitrate using `Config.setAudioBitrate()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the bitrate to '128K' (128 Kilobits per second), affecting audio quality and file size. This setting can be overridden by the `--audio-bitrate` command-line flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setAudioBitrate('128K');\n```\n\n----------------------------------------\n\nTITLE: Custom Error Handling During Media Parsing - @remotion/media-parser - TypeScript\nDESCRIPTION: Shows how to implement a custom onError handler with downloadAndParseMedia to determine download behavior when errors occur. The provided function returns {action: 'download'} to ensure the file is fully downloaded even if parsing fails. Requires @remotion/media-parser and @remotion/media-parser/node-writer. The error will be thrown at the end, but the actual media file will be preserved unless the action is set to 'fail'.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/download-and-parse.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {downloadAndParseMedia} from '@remotion/media-parser';\nimport {nodeWriter} from '@remotion/media-parser/node-writer';\n\nawait downloadAndParseMedia({\n  src: 'https://s3.amazonaws.com/bucket/uploaded-asset.mp4',\n  writer: nodeWriter('output.mp4'),\n  onError: (error) => {\n    // Force the file to be downloaded despite parsing error.\n    // Note: At the end, the error will be thrown nonetheless.\n    return {action: 'download'};\n\n    // Default behavior:\n    // Abort the download, delete the file and throw the error immediately.\n    // return {action: 'fail'};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Bundling a Remotion Project with New Signature (TypeScript)\nDESCRIPTION: Illustrates the new, preferred method signature for the `bundle()` function from `@remotion/bundler`. It accepts a single configuration object containing properties like `entryPoint`, `onProgress` callback, and other bundling options like `publicDir`, simplifying the function call.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { bundle } from \"@remotion/bundler\";\n\nbundle({\n  entryPoint: \"./src/index.ts\",\n  onProgress: (progress) => console.log(progress),\n  publicDir: process.cwd() + \"/public\",\n});\n```\n\n----------------------------------------\n\nTITLE: Identifying Hardware Acceleration Usage in Logs (Text)\nDESCRIPTION: Provides an example log message indicating that hardware acceleration is successfully being used during a Remotion render. This type of message appears when verbose logging is enabled and confirms the specific encoder (e.g., `prores_videotoolbox`) and the hardware acceleration status.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/hardware-acceleration.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nEncoder: prores_videotoolbox, hardware accelerated: true\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS Lambda Rate Limit Error\nDESCRIPTION: Shows the `TooManyRequestsException` error message returned by AWS Lambda when the configured concurrency limit for the account in a specific region has been reached. This indicates that no more Lambda functions can be invoked concurrently until others complete.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/rate-limit.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nTooManyRequestsException: Rate Exceeded.\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server (Shell)\nDESCRIPTION: Executes the `dev` script defined in `package.json`, which typically starts the Next.js development server. This allows for local development and testing of the web application part of the project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Old Nested Config File Format - Remotion Config API - TypeScript\nDESCRIPTION: Illustrates how configuration was performed in Remotion prior to v3.3.39 with nested method calls (e.g., Config.Bundling.setCachingEnabled). Deprecated but still functional, this approach allows for option nesting, though the newer pattern is flat for improved TypeScript autocompletion. Requires '@remotion/cli/config' dependency.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nConfig.Bundling.setCachingEnabled(false);\n```\n\n----------------------------------------\n\nTITLE: Deleting All Remotion Lambda Sites in TypeScript\nDESCRIPTION: This TypeScript example demonstrates retrieving all deployed Remotion sites within a specific AWS region using `getSites` and then iterating through the results to delete each site using the `deleteSite` function. It requires the `@remotion/lambda` package and assumes AWS credentials are configured. The necessary `bucketName` and `siteName` (site ID) are obtained from the `getSites` response for each deletion call.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/deletesite.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {AwsRegion, deleteSite, getSites} from '@remotion/lambda';\n\nconst region: AwsRegion = 'eu-central-1';\n\nconst {sites} = await getSites({\n  region,\n});\n\nfor (const site of sites) {\n  await deleteSite({\n    bucketName: site.bucketName,\n    siteName: site.id,\n    region,\n  });\n  console.log(`Site ${site.id} deleted.`);\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Package Version - Console\nDESCRIPTION: Runs Remotion's automated upgrade helper via npx, updating the Remotion dependency to the latest version. This ensures the project uses new features and critical fixes. May require reviewing breaking changes in Remotion's documentation after upgrade completes; assumes Remotion was installed previously.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-code-hike/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Example Value: Unicode Range Mapping for Font Subsets - JavaScript Object\nDESCRIPTION: Provides a sample JavaScript object for the unicodeRanges property returned by loadFont(), mapping font subsets (like 'latin-ext', 'latin') to their respective Unicode character ranges. No dependencies or external calls needed; useful to understand how available subsets are linked to Unicode code point ranges. Input: none. Output: object mapping subsets to string ranges. Useful for font debugging/selection.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/load-font.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  'latin-ext': 'U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF',\n  'latin': 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD',\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Media Utilities with NPM - Bash\nDESCRIPTION: This snippet shows the exact npm command required to install the @remotion/media-utils package for a JavaScript or Node.js project. It is necessary to use the --save-exact flag to prevent version mismatches, ensuring full compatibility with other Remotion packages. There are no input parameters for this command; running it in the project root will add the dependency to package.json, and all related Remotion packages should match in version for stability.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/media-utils/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/media-utils --save-exact\n```\n\n----------------------------------------\n\nTITLE: Accessing Zod Schema and Unsaved Props in saveDefaultProps() in TypeScript\nDESCRIPTION: This snippet shows how to access both the Zod schema associated with the composition and the unsaved props from the Studio editor within the `defaultProps` function. The function receives an object with `schema` (the Zod schema instance) and `unsavedDefaultProps`. This allows for logic that might depend on the schema structure while potentially modifying and saving the unsaved props.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/save-default-props.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @target: esnext\nimport { saveDefaultProps } from \"@remotion/studio\";\n\nawait saveDefaultProps({\n  compositionId: \"my-composition\",\n  defaultProps: ({ schema, unsavedDefaultProps }) => {\n    // Do something with the Zod schema\n\n    return {\n      ...unsavedDefaultProps,\n      color: \"red\",\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Composing Move and Shrinking Effects in Main Composition - TypeScript/TSX\nDESCRIPTION: Demonstrates a composition that combines movement and scale-out animation by nesting components. Move animates vertical translation, Shrinking animates scale, and Dot provides a visual element, all together atop a background. Each component must be available via import. The scene features a dot moving upward and shrinking over time.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: Move.tsx\nexport const Move: React.FC<{\n  children: React.ReactNode;\n}> = ({children}) => null;\n// @filename: Shrinking.tsx\nexport const Shrinking: React.FC<{\n  children: React.ReactNode;\n}> = () => null;\n// @filename: Background.tsx\nexport const Background: React.FC = () => null;\n// @filename: Dot.tsx\nexport const Dot: React.FC = () => null;\n\n// @filename: Composition.tsx\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\nimport {Background} from './Background';\nimport {Dot} from './Dot';\nimport {Move} from './Move';\nimport {Shrinking} from './Shrinking';\n\n// ---cut---\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Background />\n      <Move>\n        <Shrinking>\n          <Dot />\n        </Shrinking>\n      </Move>\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating a Star SVG Path with @remotion/shapes in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the makeStar function from the @remotion/shapes TypeScript package to create an SVG path for a star shape. It imports makeStar, invokes it with innerRadius, outerRadius, and points parameters, and destructures its return value to extract path, width, height, transformOrigin, and instructions. The function requires @remotion/shapes as a dependency, and expects numeric values for radii and the number of star points. The returned object can be used directly to render scalable star graphics in SVG-based UIs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/make-star.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { makeStar } from \"@remotion/shapes\";\n\nconst { path, width, height, transformOrigin, instructions } = makeStar({\n  innerRadius: 200,\n  outerRadius: 150,\n  points: 5,\n});\n\nconsole.log(path); // M 200 0 L 288.167787843871 78.64745084375788 L 390.21130325903073 138.19660112501052 L 342.658477444273 246.3525491562421 L 317.55705045849464 361.8033988749895 L 200 350 L 82.4429495415054 361.8033988749895 L 57.34152255572698 246.35254915624213 L 9.788696740969272 138.19660112501055 L 111.83221215612902 78.6474508437579 L 200 0\nconsole.log(width); // 400\nconsole.log(height); // 400\nconsole.log(transformOrigin); // '200 200'\nconsole.log(instructions); // '[{type: \"M\"}, ...]'\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Remotion Three Integration - Yarn\nDESCRIPTION: This snippet installs the same set of required dependencies for Remotion and React Three Fiber using yarn. Ensures 'three', '@react-three/fiber', '@remotion/three', and '@types/three' are present in the workspace. To enable development with Remotion-Three, execute this command from the project directory. Input: none. Output: Yarn will add/touch package.json and yarn.lock accordingly.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/three.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add three @react-three/fiber @remotion/three @types/three\n```\n\n----------------------------------------\n\nTITLE: Exporting Audio Only via Remotion CLI (Codec Flag)\nDESCRIPTION: Shows how to use the `npx remotion render` command with the `--codec` flag set to an audio codec (like `mp3`) to render only the audio for a composition (`my-comp`). Remotion will automatically determine a suitable output filename based on the composition ID and codec.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion render src/index.ts my-comp --codec=mp3\n```\n\n----------------------------------------\n\nTITLE: Jumping to a Frame in Remotion Studio using seek() (TypeScript)\nDESCRIPTION: This snippet demonstrates importing the `seek` function from `@remotion/studio` and calling it with a specific frame number (100) to programmatically set the current playback position in the Remotion Studio timeline. The function takes a single argument, the target frame number. If the number is less than 0, it defaults to 0. If it's greater than or equal to the composition's duration, it defaults to `durationInFrames - 1`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/seek.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Saving {color: 'green'} to Root.tsx\"\nimport {seek} from '@remotion/studio';\n\nseek(100);\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Available Remotion Lambda Regions via CLI\nDESCRIPTION: This command uses `npx` to execute the Remotion CLI tool and lists all AWS regions currently supported by Remotion Lambda. It provides a programmatic way to retrieve the same list as the `getRegions()` Node.JS API function. This is useful for scripting or quickly checking region availability from the command line.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/region-selection.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda regions\n```\n\n----------------------------------------\n\nTITLE: Enabling Folder Expiry using Remotion Config in TypeScript\nDESCRIPTION: Controls whether old render output folders are automatically deleted using `Config.setEnableFolderExpiry()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. Setting it to `true` enables automatic cleanup based on the duration set by `setDeleteAfter`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_26\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setEnableFolderExpiry(true);\n```\n\n----------------------------------------\n\nTITLE: Importing and Applying Webpack Override in Remotion Config (TypeScript)\nDESCRIPTION: Demonstrates importing a separately declared webpackOverride function and registering it via Config.overrideWebpackConfig within remotion.config.ts. Ensures the same override logic is used for both CLI and Node.js APIs. Depends on @remotion/cli/config and the custom override file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ./src/webpack-override.ts\nimport {WebpackOverrideFn} from '@remotion/bundler';\nexport const webpackOverride: WebpackOverrideFn = (c) => c;\n// @filename: remotion.config.ts\n// ---cut---\nimport {Config} from '@remotion/cli/config';\nimport {webpackOverride} from './src/webpack-override';\n\nConfig.overrideWebpackConfig(webpackOverride);\n```\n\n----------------------------------------\n\nTITLE: Listing Remotion Cloud Run Sites (Quiet Mode) using CLI\nDESCRIPTION: Runs the `sites ls` command with the `--quiet` (or `-q`) flag. This option modifies the output to display only a space-separated list of the site names, omitting other details like bucket, region, and URL. This mode is useful for scripting or piping the list of sites to other commands.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/ls.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun sites ls -q\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/lottie with Yarn (Bash)\nDESCRIPTION: Installs the `@remotion/lottie` package and its peer dependency `lottie-web` using the Yarn package manager. This command should be run in the terminal within a Node.js project directory where Yarn is configured.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/lottie lottie-web\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Tailwind Config File Location (TypeScript)\nDESCRIPTION: This snippet illustrates how to provide a custom path for Tailwind's config file when enabling TailwindCSS in Remotion. This approach is useful when executing Remotion CLI from a directory other than the Remotion root, as Tailwind by default looks for tailwind.config.js in the current working directory. By supplying a configLocation option, users can explicitly define the config file path. Dependencies include Node's path module, @remotion/cli/config, and @remotion/tailwind. Key parameters are the current Webpack configuration and an object with configLocation set to the resolved path. The output is the customized configuration ready for Tailwind integration regardless of execution directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind/enable-tailwind.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path';\\nimport {Config} from '@remotion/cli/config';\\nimport {enableTailwind} from '@remotion/tailwind';\\n\\nConfig.overrideWebpackConfig((currentConfiguration) => {\\n  return enableTailwind(currentConfiguration, {\\n    configLocation: path.join(__dirname, 'tailwind.config.js'),\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Custom TableOfContents Component (JavaScript/JSX)\nDESCRIPTION: Imports a custom `TableOfContents` component using a relative path from within the project's component directory. This component is likely designed specifically for the Remotion documentation site to render an API table of contents tailored for the transitions module.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/index.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TableOfContents } from \"../../components/TableOfContents/transitions\";\n```\n\n----------------------------------------\n\nTITLE: Composing Animated Dots using Trail, Shrinking, and Dot Components in Remotion TypeScript\nDESCRIPTION: This composition shows how to use multiple previously defined components (Trail, Shrinking, Dot, etc.) together to assemble a final animation. MyComposition renders a background and a trail of shrinking dots in a single AbsoluteFill. The snippet serves as the animation's entry point and illustrates component composition and prop usage. Dependencies are remotion and all custom child components.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// @filename: Move.tsx\\nexport const Move: React.FC<{\\n  children: React.ReactNode;\\n  delay: number;\\n}> = () => null;\\n// @filename: Shrinking.tsx\\nexport const Shrinking: React.FC<{\\n  children: React.ReactNode;\\n}> = () => null;\\n// @filename: Background.tsx\\nexport const Background: React.FC<{}> = () => null;\\n// @filename: Dot.tsx\\nexport const Dot: React.FC<{}> = () => null;\\n// @filename: Trail.tsx\\nexport const Trail: React.FC<{\\n  children: React.ReactNode;\\n  amount: number;\\n}> = () => null;\\n\\n// @filename: Composition.tsx\\nimport React from 'react';\\nimport {AbsoluteFill} from 'remotion';\\nimport {Background} from './Background';\\nimport {Dot} from './Dot';\\nimport {Shrinking} from './Shrinking';\\nimport {Trail} from './Trail';\\n// ---cut---\\n\\nexport const MyComposition = () => {\\n  return (\\n    <AbsoluteFill>\\n      <Background />\\n      <Trail amount={4}>\\n        <Shrinking>\\n          <Dot />\\n        </Shrinking>\\n      </Trail>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lambda Artifacts with getRenderProgress (TypeScript)\nDESCRIPTION: Shows how to use the `getRenderProgress` function from `@remotion/lambda/client` to fetch information about artifacts generated during a Remotion Lambda render. It iterates through the `artifacts` array present in the progress response object, accessing properties like filename, sizeInBytes, S3 URL, and S3 key for each artifact. Requires `@remotion/lambda/client` and necessary AWS credentials/configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/artifacts.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getRenderProgress} from '@remotion/lambda/client';\n\nconst renderProgress = await getRenderProgress({\n  renderId: 'hi',\n  functionName: 'hi',\n  bucketName: 'hi',\n  region: 'eu-central-1',\n});\n\nfor (const artifact of renderProgress.artifacts) {\n  console.log(artifact.filename); // \"hello-world.txt\"\n  console.log(artifact.sizeInBytes); // 12\n  console.log(artifact.s3Url); // \"https://s3.eu-central-1.amazonaws.com/remotion-lambda-abcdef/renders/abcdef/artifacts/hello-world.txt\"\n  console.log(artifact.s3Key); // \"renders/abcdef/artifacts/hello-world.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GIF Codec via Remotion API (JavaScript)\nDESCRIPTION: Sets the output codec to GIF within the options object when using Remotion's programmatic rendering functions like `renderMedia()`, `stitchFramesToVideo()`, or `renderMediaOnLambda()`. This ensures the output file is an animated GIF.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-as-gif.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncodec: \"gif\"\n```\n\n----------------------------------------\n\nTITLE: Generating CSS scaleZ() Transform in Remotion (TSX)\nDESCRIPTION: Demonstrates using the `scaleZ` function from `@remotion/animation-utils` to create a CSS `scaleZ()` transform string. It accepts a single numerical argument representing the scaling factor along the Z-axis.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { scaleZ } from \"@remotion/animation-utils\";\n\nconst transform = scaleZ(2);\n// => \"scaleZ(2)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Site with CLI (bash)\nDESCRIPTION: Uses the Remotion Lambda CLI command to bundle and deploy the user's Remotion project (specified by the entry point, e.g., `src/index.ts`) to an S3 bucket. It outputs a serve URL required for initiating renders. The optional `--site-name` flag allows naming and overwriting previous site deployments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites create src/index.ts --site-name=my-video\n```\n\n----------------------------------------\n\nTITLE: Embedding the Webhook Test Component in JSX\nDESCRIPTION: This snippet shows the usage of the `WebhookTest` component, likely implemented in React/JSX. Embedding this component renders an interactive tool within the webpage, allowing users to send test requests to their configured Remotion webhook endpoint directly from their browser to verify its functionality. This tool requires specific CORS headers (Allow-Origin, Allow-Headers, Allow-Methods) to be set on the target endpoint as described in the surrounding text.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<WebhookTest />\n```\n\n----------------------------------------\n\nTITLE: Generating CSS rotateX() Transform in Remotion (TSX)\nDESCRIPTION: Shows how to use the `rotateX` function from `@remotion/animation-utils` to generate a CSS `rotateX()` transform string. It accepts the angle as a number (degrees), a string with unit, or a number and an optional unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { rotateX } from \"@remotion/animation-utils\";\n\nconst transform = rotateX(45);\n// => \"rotateX(45deg)\"\n\nconst transform2 = rotateX(\"45deg\");\n// => \"rotateX(45deg)\"\n\nconst transform3 = rotateX(1, \"rad\");\n// => \"rotateX(1rad)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Logging for Remotion prefetch() Function in TypeScript\nDESCRIPTION: Illustrates how to enable trace-level logging for the Remotion `prefetch()` function. By passing an options object with `logLevel: 'trace'` as the second argument, developers can observe detailed prefetching events, aiding in the diagnosis of resource loading issues. This requires the `prefetch` function imported from the `remotion` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/playback-issues.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst src = 'https://example.com';\n// ---cut---\nimport {prefetch} from 'remotion';\n\nprefetch(src, {\n  logLevel: 'trace',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Remotion Project using Yarn\nDESCRIPTION: This command uses Yarn's `create` utility to scaffold a new Remotion video project. It assumes that Yarn is already installed on the system. Running this command sets up the basic file structure and dependencies needed to start developing a video with Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-08-introducing-remotion.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn create video\n```\n\n----------------------------------------\n\nTITLE: Defining a Transparent Video Component in React with Remotion (TypeScript)\nDESCRIPTION: Defines a reusable React component (MyVideo) with a 'transparent' prop to conditionally toggle the background between transparent and opaque in rendered Remotion videos. No external dependencies other than React itself are required. The 'transparent' prop should be passed to determine the presence of an opaque background; the component is structured for flexibility with Remotion compositions and is suitable for use as a building block for transparency-enabled video projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transparent-videos.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyVideo: React.FC<{\n  transparent: boolean;\n}> = ({transparent}) => {\n  return (\n    <div style={{backgroundColor: transparent ? undefined : 'white', flex: 1}}>\n      {/* Omit opaque background based on `transparent` prop */}\n    </div>\n  )\n}\n// - MyVideo\n```\n\n----------------------------------------\n\nTITLE: Importing TableOfContents Component in JavaScript/JSX\nDESCRIPTION: This JavaScript code imports the `TableOfContents` component using ES6 module syntax. The component is imported from a relative path `../components/TableOfContents/api`, indicating it's a custom component within the same project. This component is likely used later in the file to display a table of contents.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/api.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TableOfContents } from \"../components/TableOfContents/api\";\n```\n\n----------------------------------------\n\nTITLE: Starting Playback Programmatically with play() in Remotion Studio (TSX)\nDESCRIPTION: This TSX snippet shows how to initiate playback in the Remotion Studio programmatically by calling the `play()` function directly, without an event object. This is useful for scenarios where playback needs to be triggered by application logic rather than direct user interaction. Requires `@remotion/studio`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/play.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {play} from '@remotion/studio';\n\n// Call without event parameter\nplay();\n```\n\n----------------------------------------\n\nTITLE: Running FFprobe with Remotion CLI in Bash\nDESCRIPTION: This snippet demonstrates how to invoke FFprobe using the Remotion CLI tool to inspect video file information (metadata, codecs, streams, etc.) without a separate FFprobe installation. The only dependency is Remotion (installed or via npx), and the command works in environments where Bash shell syntax is supported. The main parameter, 'your_video.mp4', should be replaced with the path to the video file you wish to inspect. The command outputs detailed metadata to the console. Only the codecs H.264, H.265, VP8, VP9, and ProRes are supported, as the CLI uses a custom FFprobe binary from the 7.1 release line.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/ffprobe.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion ffprobe your_video.mp4\n```\n\n----------------------------------------\n\nTITLE: Generating Pie SVG Path with @remotion/shapes in TypeScript\nDESCRIPTION: This TypeScript/TSX snippet demonstrates how to use the makePie function from @remotion/shapes to generate the SVG path, dimensions, and transform origin for a pie chart segment. The function requires a configuration object with properties such as radius and progress (a number between 0 and 1 indicating the fraction of the pie to draw). The snippet logs the resulting SVG path string, width, height, and transform origin for further use in SVG rendering or animation. Key dependencies: @remotion/shapes (must be installed), and TypeScript/React environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/make-pie.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makePie } from \"@remotion/shapes\";\n\nconst { path, width, height, transformOrigin } = makePie({\n  radius: 100,\n  progress: 0.5,\n});\n\nconsole.log(path); // M 100 0 A 100 100 0 0 1 100 200 L 100 100 z\nconsole.log(width); // 200\nconsole.log(height); // 200\nconsole.log(transformOrigin); // '100 100'\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies using yarn - Bash\nDESCRIPTION: This shell command installs Remotion core, CLI, and Player modules via Yarn. Use when your project is set up with Yarn as the package manager. Prerequisites are Node.js and Yarn installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add remotion @remotion/cli @remotion/player\n```\n\n----------------------------------------\n\nTITLE: Simulating AWS Lambda Permissions using Remotion in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the simulatePermissions() function from the @remotion/lambda package to check whether the current user has required AWS permissions. Requires installing @remotion/lambda and providing an AWS region. The function returns an object containing a results array, with each item describing the decision and name of the permission. Inputs include at minimum the region parameter. Outputs provide detailed simulation results for each relevant AWS permission.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/simulatepermissions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {simulatePermissions} from '@remotion/lambda';\n\nconst {results} = await simulatePermissions({\n  region: 'us-east-1',\n});\n\nfor (const result of results) {\n  console.log(result.decision); // \"allowed\"\n  console.log(result.name); // \"iam:SimulatePrincipalPolicy\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Aborted WebCodecs Conversions in TypeScript\nDESCRIPTION: This code demonstrates error handling for aborted conversions by using hasBeenAborted from @remotion/media-parser along with a webcodecsController-driven convertMedia process. Upon catching a conversion error, it checks if the error was caused by a user-triggered abort, logging cancellation or conversion errors distinctly. Dependencies include @remotion/media-parser and @remotion/webcodecs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/pause-resume-abort.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {hasBeenAborted} from '@remotion/media-parser';\nimport {webcodecsController, convertMedia} from '@remotion/webcodecs';\n\nconst controller = webcodecsController();\n\nconst promise = convertMedia({\n  src: 'https://www.w3schools.com/html/mov_bbb.mp4',\n  container: 'webm',\n  controller,\n})\n  .then(() => {\n    console.log('Finished conversion');\n  })\n  .catch((err) => {\n    if (hasBeenAborted(err)) {\n      console.log('Conversion was cancelled');\n    } else {\n      console.error('Error converting', err);\n    }\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing Key Remotion Lambda Methods and Types in TypeScript\nDESCRIPTION: This snippet demonstrates importing primary functions (such as renderMediaOnLambda, renderStillOnLambda, and getRenderProgress) and type definitions from the @remotion/lambda/client package, which re-exports them from @remotion/lambda-client. There are no required runtime dependencies aside from the package itself, and these imports facilitate interacting with AWS Lambda for media rendering. The snippet is intended for use within serverless or backend JavaScript environments, not clients, and includes functions and types relevant for orchestrating Lambda rendering jobs, progress tracking, authentication, and AWS region/configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/light-client.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// organize-imports-ignore\n// ---cut---\nimport {\n  renderMediaOnLambda,\n  renderStillOnLambda,\n  getRenderProgress,\n  getCompositionsOnLambda,\n  getFunctions,\n  AwsRegion,\n  RenderProgress,\n  validateWebhookSignature,\n  WebhookPayload,\n  presignUrl,\n  PresignUrlInput,\n  getSites,\n  speculateFunctionName,\n  CustomCredentials, // available from v4.0.60\n  getAwsClient, // available from v4.0.82\n  deleteRender, // available from v4.0.84\n  DeleteRenderInput, // available from v4.0.84\n} from '@remotion/lambda/client';\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Animated Slide Transitions in Remotion with springTiming (TypeScript/TSX)\nDESCRIPTION: This snippet presents a full React component leveraging Remotion's TransitionSeries alongside the springTiming timing function to create a smooth, customizable sliding transition between sequences. It defines a Letter component for styled content and demonstrates usage of both TransitionSeries.Sequence and TransitionSeries.Transition, configuring the latter with a slide presentation and a springTiming object that allows fine-grained control via config (damping), durationInFrames, and durationRestThreshold. Dependencies include remotion, @remotion/transitions, and React. Key props such as color, durationInFrames, and timing parameters enable tuning the look and timing of the animation. The expected input is a set of child elements and animation parameters; the output is a composed video sequence with animated transitions between content frames. Best suited for advanced Remotion users who require smooth, physical-based motion in their video editing pipelines.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/timings/springtiming.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { AbsoluteFill } from \"remotion\";\n\nconst Letter: React.FC<{\n  children: React.ReactNode;\n  color: string;\n}> = ({ children, color }) => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: color,\n        opacity: 0.9,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 200,\n        color: \"white\",\n      }}\n    >\n      {children}\n    </AbsoluteFill>\n  );\n};\n// ---cut---\nimport { springTiming, TransitionSeries } from \"@remotion/transitions\";\nimport { slide } from \"@remotion/transitions/slide\";\n\nconst BasicTransition = () => {\n  return (\n    <TransitionSeries>\n      <TransitionSeries.Sequence durationInFrames={40}>\n        <Letter color=\"#0b84f3\">A</Letter>\n      </TransitionSeries.Sequence>\n      <TransitionSeries.Transition\n        presentation={slide()}\n        timing={springTiming({\n          config: {\n            damping: 200,\n          },\n          durationInFrames: 30,\n          durationRestThreshold: 0.001,\n        })}\n      />\n      <TransitionSeries.Sequence durationInFrames={60}>\n        <Letter color=\"pink\">B</Letter>\n      </TransitionSeries.Sequence>\n    </TransitionSeries>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Speculating Remotion Lambda Function Name Pattern - TXT\nDESCRIPTION: Demonstrates the naming convention for Remotion Lambda functions, including placeholders for version, memory, disk, and timeout. This pattern shows how function names are constructed and what each component represents. It is used as a reference for utilities like speculateFunctionName() to predict or match function names.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/speculateFunctionName.mdx#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nremotion-render-3-3-63-mem2048mb-disk2048mb-240sec\n                ^^^^^^    ^^^^       ^^^    ^^^\n                  |         |         |      |-- Timeout in seconds\n                  |         |         |--------- Disk size in MB\n                  |         |------------------- Memory size in MB\n                  |----------------------------- Remotion version with dots replaced by dashes\n```\n\n----------------------------------------\n\nTITLE: Building and Running Remotion Docker Container - Bash\nDESCRIPTION: Bash commands that build the Docker image and run it with all visible GPUs, using the NVIDIA runtime and an environment override for driver capabilities. Requires an NVIDIA GPU, compatible drivers, and prior completion of preceding setup steps. Inputs are the Dockerfile and entrypoint script; outputs are video renders from within the container. Limitations: Requires root/SUDO, and only works on systems with GPU support.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker build . -t remotion-docker-gpu\nsudo docker run --gpus all --runtime=nvidia -e \"NVIDIA_DRIVER_CAPABILITIES=all\" remotion-docker-gpu\n```\n\n----------------------------------------\n\nTITLE: Pausing Playback on Button Click - Remotion Studio (TypeScript/React)\nDESCRIPTION: Implements a Pause button component in a TypeScript React app that pauses Remotion Studio playback when clicked. Utilizes the pause() function from @remotion/studio as an event handler. Requires @remotion/studio as a dependency. Input: user clicks the rendered button; Output: playback is paused.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/pause.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {pause} from '@remotion/studio';\\n\\nconst PauseButton = () => {\\n  return <button onClick={pause}>Pause</button>;\\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion Render Script in package.json (JSON)\nDESCRIPTION: This snippet demonstrates how to set up a Remotion render command in the scripts section of a package.json file. This allows running `npm run render` (or the equivalent for your package manager) to execute the CLI. No other dependencies than Remotion CLI are required, and 'render' is the custom script name invoking 'remotion render'. Input: none directly; Output: triggers CLI renders when invoked.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/cli.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"scripts\\\": {\\n    \\\"render\\\": \\\"remotion render\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Download with Progress Callback in Remotion - TypeScript\nDESCRIPTION: This snippet shows advanced usage of ensureBrowser, specifying a custom Chrome version and monitoring download progress via a callback. The onBrowserDownload function returns a version string and an onProgress function, which receives percent updates for download progress. Dependencies include @remotion/renderer, and the developer can tailor Chrome versions and handle user feedback during the browser setup. Parameters include version (specific Chrome version to use) and onProgress ({percent}), which logs download advancement for the user.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/ensure-browser.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ensureBrowser} from '@remotion/renderer';\\n\\nawait ensureBrowser({\\n  onBrowserDownload: () => {\\n    console.log('Downloading browser');\\n\\n    return {\\n      version: '133.0.6943.141',\\n      onProgress: ({percent}) => {\\n        console.log(`${Math.round(percent * 100)}% downloaded`);\\n      },\\n    };\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding FFMPEG Command in Remotion (TypeScript)\nDESCRIPTION: Illustrates the usage of the optional `ffmpegOverride` function in TypeScript. This function allows modifying the underlying FFMPEG command used by Remotion. It takes an object with `type` (`\"stitcher\"` or `\"pre-stitcher\"`) and `args` (the command arguments array) and must return a modified array of arguments. The example adds a video filter (`-vf eq=brightness=0:saturation=1`) to the FFMPEG command. Note the warnings about potential breakage with Remotion updates and limited applicability (not available on Lambda).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/render-media.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport type {FfmpegOverrideFn} from '@remotion/renderer';\n\nconst ffmpegOverride: FfmpegOverrideFn = ({type, args}) => {\n  console.log(type); // \"stitcher\" | \"pre-stitcher\n  return [...args, '-vf', 'eq=brightness=0:saturation=1'];\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Rive Text Run Value via onLoad Callback in TSX\nDESCRIPTION: This example demonstrates how to modify a text run within a Rive animation at runtime using the `onLoad` prop of `<RemotionRiveCanvas>`. The `onLoadHandler` function, memoized with `useCallback`, receives the Rive `File` object, accesses the default artboard, finds a specific text run by name ('city'), and updates its text content. It requires `@remotion/rive` and `@rive-app/canvas-advanced`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/rive/remotionrivecanvas.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport {RemotionRiveCanvas} from '@remotion/rive';\nimport {File} from '@rive-app/canvas-advanced';\nimport {useCallback} from 'react';\n\n// Make sure to wrap your onLoad handler on `useCallback` to avoid re-rendering this component every single time\nconst onLoadHandler = useCallback((file: File) => {\n  const artboard = file.defaultArtboard();\n  const textRun = artboard.textRun('city');\n  textRun.text = 'Tokyo';\n}, []);\n\nfunction App() {\n  return (\n    <RemotionRiveCanvas\n      src=\"https://example.com/myAnimation.riv\"\n      onLoad={onLoadHandler}\n    />\n  );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/noise Using yarn - Bash\nDESCRIPTION: This snippet presents the yarn command for adding the @remotion/noise package, used to create noise effects. Prerequisites include having yarn installed in the development environment. Running the command will include @remotion/noise in the project dependencies, equipping developers with utility functions for noise generation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/noise/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/noise\n\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR and Lambda Deployment with enableSkia - TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to apply a custom Webpack override using enableSkia from @remotion/skia/enable for server-side rendering (SSR) and Lambda deployment. Required dependencies are Remotion, @remotion/skia/enable, and correct Webpack configuration. The bundle() function receives a webpackOverride callback to modify the Webpack config, enabling Skia-based rendering. Similarly, deploySite can utilize the override for Lambda deployment. The entry parameter represents the Remotion entry file. This setup is necessary for SSR use-cases with custom renderers, and influences video rendering behavior both locally and in the cloud.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-skia/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbundle(entry, () => undefined, {\n  webpackOverride: (config) => enableSkia(config),\n});\n// or\ndeploySite({\n  webpackOverride: (config) => enableSkia(config),\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Music Tracks - Remotion - TypeScript\nDESCRIPTION: This code snippet defines the permissible music track labels (as a Zod enum) and implements a function that resolves the correct file path for a given music track within the Remotion Recorder project. To add custom tracks, new labels are introduced in the enum and mapped in the getAudioSource function with the staticFile utility. Dependencies include the 'z' schema validation library and a static file loader. The function expects a track label and returns a path to an audio file, or undefined if not mapped. Ensure song assets exist in the 'public/sounds' directory and that the mapping labels match between the enum and the asset references.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/music.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport const music = z.enum([\n  \"previous\",\n  \"none\",\n  \"somesong\",\n  // You can give your song any label. This is the name you will see in the editor.\n  \"<your-song-label>\",\n]);\n\nexport const getAudioSource = (track: Music) => {\n  if (track === \"somesong\") {\n    return staticFile(\"sounds/soundtrack1.mp3\");\n  }\n\n  // Add your track here. The label has to match the one you added above.\n  if (track === \"<your-song-label>\") {\n    return staticFile(\"sounds/<actual-asset-name>\");\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Simulating Transparency for Black Background Video in Remotion using TypeScript\nDESCRIPTION: This snippet shows how to embed a video file that does not have an alpha channel but uses a black background meant to be transparent. It employs the `<OffthreadVideo>` component and applies the CSS `mix-blend-mode: 'screen'` style. This blend mode effectively makes black pixels transparent, simulating transparency for videos without an explicit alpha channel.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/transparency.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {OffthreadVideo, staticFile} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n  return (\n    <OffthreadVideo\n      src={staticFile('nottransparent.mp4')}\n      style={{\n        mixBlendMode: 'screen',\n      }}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies with pnpm\nDESCRIPTION: Installs Remotion core, the Remotion Player, the Remotion CLI, React, and ReactDOM as production dependencies, along with their TypeScript types as development dependencies, using the pnpm package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/svelte.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i remotion @remotion/player @remotion/cli react react-dom\npnpm i --dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Scaling an SVG Path Vertically using scalePath() in TypeScript\nDESCRIPTION: Imports the `scalePath` function from `@remotion/paths` and demonstrates its usage. It takes an SVG path string ('M 0 0 L 100 100'), an x-scale factor (1, indicating no horizontal change), and a y-scale factor (2, doubling the vertical size) as arguments. The resulting scaled path ('M 0 0 L 100 200') is assigned to the `newPath` constant. This function requires the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/scale-path.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { scalePath } from \"@remotion/paths\";\n\nconst newPath = scalePath(\"M 0 0 L 100 100\", 1, 2); // \"M 0 0 L 100 200\";\n```\n\n----------------------------------------\n\nTITLE: Running the Remotion CLI via Bun - Shell\nDESCRIPTION: This shell command demonstrates running the Remotion CLI using the Bun-compatible 'remotionb' binary. Requires Remotion 4.0.88 or higher and Bun 1.0.3 or higher installed; dependencies must be installed via Bun. The command 'npx remotionb render' invokes the Remotion render process using Bun as the runtime environment. The command supports any runner (npx, bunx) and is equivalent to the standard CLI usage for Node.js, with limitations noted for certain features.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/bun.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotionb render\n```\n\n----------------------------------------\n\nTITLE: Defining a React Composition for Transparent and Opaque Variants (TypeScript)\nDESCRIPTION: This snippet demonstrates a Remotion Composition setup for a React video component (MyVideo) with a default prop for transparency. Requires 'remotion' as a dependency and expects that the MyVideo component is defined (as in earlier snippets). Key parameters include id, component, width, height, fps, durationInFrames, and defaultProps. This enables easy switching between transparent and opaque renders programmatically or via CLI by toggling the 'transparent' default prop.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transparent-videos.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Composition } from \"remotion\";\n// @include: example-MyVideo\n// ---cut---\n<Composition\n  id=\"my-video\"\n  component={MyVideo}\n  width={1920}\n  height={1080}\n  fps={30}\n  durationInFrames={150}\n  defaultProps={{\n    transparent: true,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Video using npx\nDESCRIPTION: Uses npx (Node Package Execute) to run the Remotion Command Line Interface (CLI) `render` command without needing a global installation. This command initiates the rendering process, taking the defined Remotion composition(s) and outputting them as video files based on the project's configuration (e.g., specified in `remotion.config.ts` or via command-line arguments).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-overlay/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Webpack Modifications with TailwindCSS (TypeScript)\nDESCRIPTION: This snippet shows how to integrate TailwindCSS into Remotion's Webpack configuration while making additional custom changes. The current Webpack config is shallow-copied with object spread, and other configuration modifications can be made alongside enableTailwind. Dependencies include @remotion/cli/config and @remotion/tailwind. The input is the current Webpack config, possibly extended with other changes, and the output is the modified configuration with both TailwindCSS and custom tweaks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind/enable-tailwind.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\\nimport {enableTailwind} from '@remotion/tailwind';\\n\\nConfig.overrideWebpackConfig((currentConfiguration) => {\\n  return enableTailwind({\\n    ...currentConfiguration,\\n\\n    // Make other changes\\n  });\\n});\n```\n\n----------------------------------------\n\nTITLE: Printing Role Permissions for AWS Lambda via Remotion CLI - Shell\nDESCRIPTION: This snippet shows how to print out the required IAM role policies for using Remotion Lambda with AWS by executing the specific command in a shell. It requires npx and Node.js installed, and fetches the permissions necessary for the Lambda execution role. No input parameters are required, and the output is the role policy in JSON form, suitable for copying into the AWS Console. The command should be run in a terminal.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/policies.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda policies role\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering SVGR Webpack Override (TypeScript)\nDESCRIPTION: Demonstrates importing and registering the enableSvgr Webpack override function in remotion.config.ts, enabling in-project SVG imports as React components. Used together with previous enableSvgr definition and appropriate module type declarations for TypeScript.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @filename: ./src/enable-svgr.ts\nimport {WebpackOverrideFn}from '@remotion/bundler';\nexport const enableSvgr: WebpackOverrideFn = (c) => c;\n// @filename: remotion.config.ts\n// ---cut---\nimport {Config} from '@remotion/cli/config';\nimport {enableSvgr} from './src/enable-svgr';\n\nConfig.overrideWebpackConfig(enableSvgr);\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/lottie via npm - Bash\nDESCRIPTION: This snippet installs the official @remotion/lottie package into a Remotion project using npm. The @remotion/lottie package enables Lottie animation file imports, allowing access to a wide variety of premade animations within Remotion. Input is the bash command; upon execution it downloads and adds @remotion/lottie as a project dependency. Requires npm and an initialized Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-08-10-remotion-3-2.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/lottie\n```\n\n----------------------------------------\n\nTITLE: Triggering Video Generation Request via API (Bash)\nDESCRIPTION: Uses curl to send a POST request to the /enqueue API endpoint, initiating a video render process. The request includes an Authorization header with a bearer token and a JSON payload specifying the message. Dependencies are a deployed API Gateway endpoint, a valid authorization token from Cognito, and network access. Input parameters are the endpoint URL, bearer token, and the JSON data. The expected output is a message confirming SQS acceptance and providing a MessageId. Limits are the required authentication and correct endpoint.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://xxxxxxxx.execute-api.ap-southeast-2.amazonaws.com/dev/enqueue' \\\\\\n--header 'Authorization: Bearer eyJraWQiOiJMVVVVZGtIQ1JXWEEyWEEXXXXXXXXXjMKR1t5S-oA' \\\\\\n--data-raw '{\\n    \"message\": \"Hello\"\\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role for API Integration Lambda with AWS CDK (JavaScript)\nDESCRIPTION: Defines an IAM Role named 'api-integration-role' for a Lambda function that sends messages to the SQS queue. Utilizes AWS CDK's IAM and ManagedPolicy constructs. Dependencies include the '@aws-cdk/aws-iam' module and its required context. This role grants basic Lambda execution rights and is used by the function that interacts with API Gateway and SQS. Outputs a role resource for further permission assignments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// \\\\uD83D\\\\uDC47 create the apiIntegrationRole role\\nconst apiIntegrationRole = new IAM.Role(this, 'api-integration-role', {\\n  assumedBy: new IAM.ServicePrincipal('lambda.amazonaws.com'),\\n  managedPolicies: [\\n    ManagedPolicy.fromAwsManagedPolicyName(\\n      'service-role/AWSLambdaBasicExecutionRole',\\n    ),\\n  ],\\n});\n```\n\n----------------------------------------\n\nTITLE: Resolving Bun Dependency Issues with Shell Commands - Shell\nDESCRIPTION: This snippet instructs users to remove the existing node_modules directory and reinstall dependencies using Bun. These commands resolve compatibility issues that arise after upgrading Remotion, specifically addressing the 'Cannot read properties of undefined (reading \\u0027decode\\u0027)' error. Prerequisites include having Bun installed on your system. The commands should be run in the project root.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/troubleshooting/cannot-read-properties-of-undefined.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf node_modules\nbun i\n```\n\n----------------------------------------\n\nTITLE: Generating IAM User Policy with Remotion CLI (bash)\nDESCRIPTION: Executes the Remotion Lambda CLI command to generate the JSON definition for an inline IAM policy required by the user interacting with Remotion Lambda services. The output should be copied and used when adding permissions (as an inline policy) to the created IAM user in AWS during Step 6.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda policies user\n```\n\n----------------------------------------\n\nTITLE: Render Progress API Response in JSON\nDESCRIPTION: Example JSON response received when checking the render progress. It includes the original 'renderId' and 'bucketName', a 'finality' object indicating success (with output URL) or failure, and a pre-signed 'mediaUrl' for downloading the video if rendering is complete and successful.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Render found.\",\n    \"renderId\": \"i9xnfrgXXXX\",\n    \"bucketName\": \"remotionlambda-apsoutheast2-xxxxxxxx\",\n    \"finality\": {\n        \"type\": \"success\",\n        \"url\": \"https://s3.ap-southeast-2.amazonaws.com/remotionlambda-apsoutheast2-xxxxxxxx/renders/i9xnfrgXXXX/out.mp4\"\n    },\n    \"mediaUrl\": \"https://remotionlambda-apsoutheast2-xxxxxxxx.s3.ap-southeast-2.amazonaws.com/renders/i9xnfrgXXXX/out.mp4?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZ3B4C6O75ZTGPMJ4%2F20230128%2Fap-southeast-2%2Fs3%2Faws4_request&X-Amz-Date=20230128T073123Z&X-Amz-Expires=900&X-Amz-Security-Token=IQXXXXXXXXV%2BWIoTQ5CvZXcljmGUIOkllDRsnmrRGNYvY8IVn8FRQmt%2Bc8%2BJQdiG0ShI0y82jB2s%2BbkaPf%2FJNDrSjO5tBo8%2FXwtaP2z9PewUIND1yMm4TkOUMXXXXXn6j&X-Amz-Signature=0881241614cd6c778b1XXXXXX42941c&X-Amz-SignedHeaders=host&x-id=GetObject\"\n}\n```\n\n----------------------------------------\n\nTITLE: Granting S3 Permissions for Presigned Upload - JSON\nDESCRIPTION: Outlines an AWS IAM policy to enable the necessary S3 permissions for presigned URL uploads, specifically allowing 'PutObject' and 'PutObjectAcl' actions. This ensures the designated AWS user or role can write and optionally make the uploads public for reading. The Resource parameter is templated to allow any object in the specified bucket.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/presigned-urls.mdx#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Sid\": \"Presign\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\"s3:PutObject\", \"s3:PutObjectAcl\"],\n  \"Resource\": [\"arn:aws:s3:::{YOUR_BUCKET_NAME}/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Input Props in GitHub Actions for Remotion (YAML)\nDESCRIPTION: Shows how to declare workflow_dispatch inputs in a GitHub Actions workflow for passing props to a Remotion render job. Each input matches a prop expected by the root component, specifying description, type, and default. This pattern allows dynamic customization via the GitHub Actions UI. Limitations: The workflow must be manually kept in sync with the accepted props schema.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/passing-props.mdx#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nworkflow_dispatch:\n  inputs:\n    titleText:\n      description: 'Which text should it say?'\n      required: true\n      default: 'Welcome to Remotion'\n    titleColor:\n      description: 'Which color should it be in?'\n      required: true\n      default: 'black'\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Renderer via npm - Bash\nDESCRIPTION: This bash snippet demonstrates the installation of the @remotion/renderer package using npm with the --save-exact flag to ensure version locking. Users should ensure all Remotion-related packages are on matching versions, removing the ^ character to prevent version range mismatches. This approach avoids dependency issues across Remotion components and ensures consistent behavior.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/renderer/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/renderer --save-exact\n```\n\n----------------------------------------\n\nTITLE: Rendering a Still Image via Remotion CLI (Shell)\nDESCRIPTION: This shell snippet demonstrates the use of the 'remotion still' command-line interface to generate a still image (PNG or JPEG) from a named composition. It passes inputProps in JSON string format, specifies the source composition (my-comp), and the output file path (out.png). Dependencies: Remotion CLI (must be installed or used via npx). Inputs include custom properties and composition name; output is a rendered still image. This command is suitable for quick, scriptable image generation without Node.js scripting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-08-11-remotion-2-3.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion still --props='{\"custom\": \"data\"}'  my-comp out.png\n```\n\n----------------------------------------\n\nTITLE: Table Element with Embedded Image and External Link (HTML/JSX)\nDESCRIPTION: This snippet displays a table including a company's logo and a hyperlink, as a special acknowledgment section in the documentation. It demonstrates combining HTML elements and inline style in MDX or JSX for gratitude provenance. Prerequisites: a valid image URL, existing style properties, and basic Markdown/JSX rendering support. No parameters; output is a rendered HTML table showing image and hyperlink, acknowledging support.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/index.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<table>\n  <tr>\n    <td>\n      <img style={{width: 100}} src=\"https://remotion-assets.s3.eu-central-1.amazonaws.com/tellahq_logo.jpeg\" />\n    </td>\n    <td>\n      <a href=\"https://tella.com\">Tella</a> for boosting the development of @remotion/media-parser with $10.000!\n    </td>\n  </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Bun Test (Shell)\nDESCRIPTION: This shell command demonstrates how to execute a specific test file using the Bun runtime. The command `bun test src/test/example.test.ts` invokes Bun's built-in test runner and directs it to run only the tests contained within the `example.test.ts` file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/testing.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nbun test src/test/example.test.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Translating SVG Path Vertically with translatePath() (TypeScript)\nDESCRIPTION: This snippet shows how to use the `translatePath` function to translate an SVG path both horizontally and vertically. It imports the function from `@remotion/paths` and applies a translation of 10 units horizontally and 10 units vertically to the path \"M10 10 L15 15\". The translated path is logged. Requires the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/translate-path.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title='translate-y.ts'\nimport { translatePath } from \"@remotion/paths\";\n\nconst translatedPath = translatePath(\"M10 10 L15 15\", 10, 10);\nconsole.log(translatedPath); // \"M 20 20 L 25 25\"\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Player Documentation Components in React/MDX\nDESCRIPTION: This JavaScript code imports the `PlayerTableOfContents` and `PlayerGuide` React components from the relative path `./TableOfContents`. These components are presumably used later in the MDX file to display specific sections of the documentation related to the Remotion Player.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/installation.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {PlayerTableOfContents, PlayerGuide} from './TableOfContents';\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Packages in package.json - JavaScript / diff\nDESCRIPTION: This snippet demonstrates the precise lines to change in your package.json to upgrade Remotion and all associated @remotion packages from v3.3.43 to v4.0.0. It is a straightforward find-and-replace operation in a JSON or JavaScript config file. The diff format shows both the removal of old version numbers (prefixed by '-') and the new ones to add (prefixed by '+'). Required after this update: run your chosen package manager install command to apply the changed dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- \"remotion\": \"^3.3.43\"\n- \"@remotion/bundler\": \"^3.3.43\"\n- \"@remotion/eslint-config\": \"^3.3.43\"\n- \"@remotion/eslint-plugin\": \"^3.3.43\"\n- \"@remotion/cli\": \"^3.3.43\"\n- \"@remotion/renderer\": \"^3.3.43\"\n+ \"remotion\": \"4.0.0\"\n+ \"@remotion/bundler\": \"4.0.0\"\n+ \"@remotion/eslint-config\": \"4.0.0\"\n+ \"@remotion/eslint-plugin\": \"4.0.0\"\n+ \"@remotion/cli\": \"4.0.0\"\n+ \"@remotion/renderer\": \"4.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Next.js and React Router Templates (Remotion, Bash)\nDESCRIPTION: This Bash command launches Remotion Studio for projects structured with Next.js or React Router 7 templates. Prerequisites include a properly set up Remotion project using these templates and npm installed. It starts the studio server on the default port or the next available, and there are no additional parameters. Intended only for projects scaffolded with Next.js or React Router template options.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/preview.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run remotion\n\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/openai-whisper Package - Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the @remotion/openai-whisper package via npm using the --save-exact flag to ensure the exact package version is used. No dependencies other than npm itself are required, but it is critical to align all Remotion package versions by using matching version numbers. Inputs: none (manual execution). Outputs: installs the package in the current project. Ensure you have npm and the appropriate permissions. Do not include the caret (^) in the version number when following this installation guidance.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/openai-whisper/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/openai-whisper --save-exact\n```\n\n----------------------------------------\n\nTITLE: Invoking Remotion Browser Management CLI (Shell)\nDESCRIPTION: Executes the main command for managing the browser used by Remotion via the Remotion CLI. This command, typically run using npx, requires subsequent subcommands (not shown) to perform specific actions like installation or checking the browser setup. It's available from Remotion version 4.0.137 onwards.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/browser/index.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion browser\n```\n\n----------------------------------------\n\nTITLE: Generating CSS skewY() Transform in Remotion (TSX)\nDESCRIPTION: Demonstrates using the `skewY` function from `@remotion/animation-utils` to create a CSS `skewY()` transform string. It accepts the angle as a number (degrees), a string with unit, or a number and an optional unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { skewY } from \"@remotion/animation-utils\";\n\nconst transform = skewY(45);\n// => \"skewY(45deg)\"\n\nconst transform2 = skewY(\"45deg\");\n// => \"skewY(45deg)\"\n\nconst transform3 = skewY(1, \"rad\");\n// => \"skewY(1rad)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring Recording File Organization for Remotion (Plaintext Directory Layout)\nDESCRIPTION: This snippet demonstrates the recommended directory and file structure for organizing manually added video recordings in a Remotion project. It requires placing video files with specific naming conventions (e.g., webcam10.mp4) in a project subdirectory so that Remotion can identify and order them correctly. The main parameters are the filename prefixes (webcam/display), numeric suffixes for ordering, and supported video file extensions (.mp4, .webm, .mkv, .mov). The expected input is a set of appropriately named files organized as shown, and the output is their correct recognition and ordering by Remotion. Limitations: The conventions must be strictly followed for files to be recognized.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/record/manually.mdx#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\npublic\n└── my-video\n    ├── webcam10.mp4\n    ├── display10.mp4\n    ├── webcam20.mp4\n    └── webcam30.mp4\n\n```\n\n----------------------------------------\n\nTITLE: Describing Lambda Error Information Payload - JSON\nDESCRIPTION: Details the structure of objects in the 'lambdaErrors' array for successful Remotion Lambda renders or error payloads. This JSON structure provides diagnostics such as S3 location, error type, message, originating module, and stack trace, as well as context about rendering frames/chunks. No external dependencies; field values shown as type annotations for documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"s3Location\": \"string\",\\n  \"explanation\": \"string\" | null,\\n  \"type\": \"renderer\" | \"browser\" | \"stitcher\",\\n  \"message\": \"string\",\\n  \"name\": \"string\",\\n  \"stack\": \"string\",\\n  \"frame\": \"number\"| null,\\n  \"chunk\": \"number\"| null,\\n  \"isFatal\": \"boolean\",\\n  \"attempt\": \"number\",\\n  \"willRetry\": \"boolean\",\\n  \"totalAttempts\": \"number\",\\n  \"tmpDir\": {\\n    \"files\": [{\\n      \"filename\": \"string\",\\n      \"size\": \"number\",\\n    }],\\n    \"total\": \"number\"\\n  } | null,\\n}\n```\n\n----------------------------------------\n\nTITLE: Probing Frame Extraction Capability with getCanExtractFramesFast (Remotion Renderer, TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to use the getCanExtractFramesFast function from the @remotion/renderer package to check if frames can be extracted efficiently from a given video file. The function requires an absolute file path as the src argument and returns a promise resolving to an object with canExtractFramesFast and shouldReencode booleans. URLs are not supported—only absolute file paths. The result aids developers in determining whether video files need re-encoding for more efficient rendering in Remotion, especially when using <OffthreadVideo> in pre-v4.0 projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/get-can-extract-frames-fast.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {getCanExtractFramesFast} from '@remotion/renderer';\n\nconst result = await getCanExtractFramesFast({\n  src: '/var/path/to/video.mp4',\n});\n\nconsole.log(result.canExtractFramesFast); // false\nconsole.log(result.shouldReencode); // true\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Remotion Timeline (Bash)\nDESCRIPTION: Executes an npm command to install required Node.js packages for using the Remotion timeline component. These dependencies include the Remotion core library, the Remotion Player, Remotion media utilities, and Tailwind CSS.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/timeline/setup.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install remotion @remotion/player @remotion/media-utils tailwindcss\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Sequence with Dynamic Start Frame (TypeScript)\nDESCRIPTION: This example defines a React component (`ChangingDuration`) that uses Remotion's `Sequence` and `useCurrentFrame` hook. The `Sequence`'s `from` prop is dynamically bound to the current frame number, causing its start time to change on every frame. This demonstrates that sequence parameters can be dynamic, preventing reliable automatic duration calculation based solely on initial props.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/automatic-duration.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"ChangingDuration.tsx\"\nimport {Sequence, useCurrentFrame} from 'remotion';\n\nconst ChangingDuration: React.FC = () => {\n  const frame = useCurrentFrame();\n\n  return (\n    // This is fine!\n    <Sequence from={frame} durationInFrames={30}>\n      <div>Hello World!</div>\n    </Sequence>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Reducing GIF Frame Rate via Remotion CLI\nDESCRIPTION: Specifies that only every Nth frame should be rendered using the Remotion CLI, effectively reducing the frame rate of the output GIF. For example, `--every-nth-frame=2` renders frames 1, 3, 5, etc., halving the frame rate of a 30FPS video to 15FPS.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-as-gif.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--every-nth-frame=2\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a Prerelease Information React Component in JavaScript\nDESCRIPTION: This code imports the PrereleaseVersion component from a local components directory and then renders it using JSX. It assumes the project uses React and supports JSX syntax; thus, dependencies include React and appropriate tooling or a framework capable of transpiling JSX. The purpose is to display information or controls related to Remotion prereleases in the documentation or application UI. No parameters are passed to the component in this usage snippet.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/prereleases.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Prerelease} from \"../components/PrereleaseVersion\"\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Prerelease />\n```\n\n----------------------------------------\n\nTITLE: Creating a Buffer State Context with React Context API (TypeScript)\nDESCRIPTION: Defines a BufferContext using React's createContext to encapsulate two main actions: registering when media can play and when it needs to buffer. Default implementations are no-ops for server-side or non-interactive render contexts. This context is a foundation for decoupling buffering state monitoring from UI components. Requires react and TypeScript. There are no external inputs or outputs beyond registration function calls.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/buffer-state.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createContext } from \\\"react\\\";\n\ntype BufferState = { [key: string]: boolean };\n\ntype BufferContextType = {\n  canPlay: (id: string) => void;\n  needsToBuffer: (id: string) => void;\n};\n\nexport const BufferContext = createContext<BufferContextType>({\n  // By default, do nothing if the context is not set, for example in rendering\n  canPlay: () => {},\n  needsToBuffer: () => {},\n});\n```\n\n----------------------------------------\n\nTITLE: Re-muxing WebM using FFmpeg (Shell)\nDESCRIPTION: This command uses FFmpeg on a server to re-mux a WebM video file (`input.webm`) into a new WebM file (`output.webm`). The `-c copy` flag instructs FFmpeg to copy the existing video and audio streams without re-encoding, making the process very fast. This fixes metadata issues like duration and seeking points by restructuring the container.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/fix-a-mediarecorder-video.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nffmpeg -i input.webm -c copy output.webm\n```\n\n----------------------------------------\n\nTITLE: Conditionally Stopping a Download Based on Metadata using downloadAndParseMedia in TypeScript\nDESCRIPTION: Illustrates using a callback function (`onDurationInSeconds`) to access metadata as soon as it's available during the download/parsing process. In this example, if the video duration exceeds 600 seconds, an error is thrown to abort the download.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/download-and-parse-media.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {downloadAndParseMedia} from '@remotion/media-parser';\nimport {nodeWriter} from '@remotion/media-parser/node-writer';\n\nconst {durationInSeconds} = await downloadAndParseMedia({\n  src: 'https://s3.amazonaws.com/bucket/uploaded-asset.mp4',\n  writer: nodeWriter('output.mp4'),\n  onDurationInSeconds: (duration) => {\n    if (duration && duration > 600) {\n      throw new Error('Video is too long');\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm (Shell)\nDESCRIPTION: Installs all the necessary project dependencies defined in the `package.json` file. This command should be run after cloning the template repository.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Handling Track Rotation Using Media Parser in TypeScript\nDESCRIPTION: This snippet defines an asynchronous callback for the OnVideoTrack event that logs the rotation property of a video track, using a type import from @remotion/media-parser. It demonstrates how to access and utilize video rotation metadata, which may be required since WebCodecs does not apply rotation automatically. Requires @remotion/media-parser as a dependency and expects a video track object with rotation information in the callback argument. The function returns null and logs rotation for diagnostic or post-processing purposes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type {OnVideoTrack} from '@remotion/media-parser';\\n\\nconst onVideoTrack: OnVideoTrack = async ({track}) => {\\n  console.log(track.rotation); // -90\\n  return null;\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Pie Shape in a Remotion Composition (TSX)\nDESCRIPTION: This example demonstrates how to import the `Pie` component from `@remotion/shapes` and the `AbsoluteFill` component from `remotion`. It renders a `Pie` shape centered on the screen within an `AbsoluteFill` container. The pie has a radius of 100 units, represents 50% progress (half circle), is filled with green color, has a red stroke, and a stroke width of 1.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/pie.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/Pie.tsx\"\nimport { Pie } from \"@remotion/shapes\";\nimport { AbsoluteFill } from \"remotion\";\n\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Pie\n        radius={100}\n        progress={0.5}\n        fill=\"green\"\n        stroke=\"red\"\n        strokeWidth={1}\n      />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Structuring External Recordings Directory in Remotion\nDESCRIPTION: Demonstrates the required directory structure for placing external video files within the `public` folder of a Remotion project. Files should be placed in a subfolder named after the composition ID (e.g., 'vlog') and follow a specific naming convention (e.g., 'camera10.mov', 'camera20.mov'). This structure allows the Remotion Recorder to locate and use these external recordings.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/external-recordings.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Assuming the composition id is 'vlog'\"\npublic\n├── vlog\n│ ├── camera10.mov\n│ ├── camera20.mov\n│ └── camera30.mov\n\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Selection Outlines With Resizing Handles in React (TypeScript)\nDESCRIPTION: These snippets define React components to render outlines and resize controls for items when selected, hovered, or being manipulated. The outline visually differentiates the selected item, and uses pointer events to handle interactions (e.g., pointerdown, disabling native selection, conditionally rendering hover/drag state). It accounts for Remotion's Player scale via useCurrentScale to translate pointer coordinates and border thickness. Handles are layered via z-index, and browser default behaviors are suppressed for seamless drag-and-drop UX.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: ResizeHandle.tsx\\n// @include: ResizeHandle\\n// @filename: item.ts\\n// @include: item\\n// @filename: SelectionOutline.tsx\\n// ---cut---\\n// @include: SelectionOutline\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: item.ts\\n// @include: item\\n// @filename: ResizeHandle.tsx\\n// ---cut---\\n// @include: ResizeHandle\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda Functions Programmatically - TypeScript\nDESCRIPTION: This TypeScript example showcases how to deploy an AWS Lambda function using Remotion's Node.js API. It imports the deployFunction method from '@remotion/lambda', sets up deployment configuration including region, timeout, memory, log group creation, and explicitly specifies the 'x86_64' architecture. The deployFunction returns an object containing the deployed function's name, which is then logged to the console. Prerequisites include having the '@remotion/lambda' package installed and AWS credentials properly configured in the environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/feb-2022-outage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {deployFunction} from '@remotion/lambda';\n\nconst {functionName} = await deployFunction({\n  region: 'us-east-1',\n  timeoutInSeconds: 120,\n  memorySizeInMb: 1024,\n  createCloudWatchLogGroup: true,\n  architecture: 'x86_64',\n});\nconsole.log(functionName);\n```\n\n----------------------------------------\n\nTITLE: Parsing Video Metadata with Callback for Duration Using Remotion Media Parser in TypeScript\nDESCRIPTION: This example illustrates the use of the onDurationInSeconds callback with parseMedia from @remotion/media-parser to receive the duration as soon as it becomes available while extracting metadata from a remote URL. The code specifies src as a video URL, fields for required metadata, and provides a callback function for early access to the duration value. This allows partial metadata consumption before the full parsing completes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/metadata.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\nconst result = await parseMedia({\\n  src: 'https://example.com/my-video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n  onDurationInSeconds: (durationInSeconds) => {\\n    console.log(durationInSeconds); // 10\\n  },\\n});\\n\\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remotion Lambda User Policy via CLI\nDESCRIPTION: Executes the Remotion CLI command using npx to retrieve the appropriate AWS IAM user policy JSON required for the currently installed Remotion Lambda version. This policy should be applied to the AWS user interacting with Remotion Lambda.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/permissions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda policies user\n```\n\n----------------------------------------\n\nTITLE: Labeling delayRender Calls in Remotion (TypeScript/React)\nDESCRIPTION: Demonstrates how to add a label to a delayRender call for easier debugging of timeouts. The label receives as a parameter will appear in timeout error messages, facilitating source identification for uncaught or slow async operations. Requires only the remotion library for use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/delay-render.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { delayRender } from \"remotion\";\n\n// ---cut---\n\ndelayRender(\"Fetching data from API...\");\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/shapes using yarn - Bash\nDESCRIPTION: Installs the @remotion/shapes package with yarn. Requires Node.js and yarn installed. This command adds SVG utility functions to your JavaScript or TypeScript project and updates yarn.lock accordingly. It should be executed in the root directory of your project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/shapes\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/layout-utils using npm (Bash)\nDESCRIPTION: This command installs the `@remotion/layout-utils` package using the npm package manager. It should be run in a terminal within a Node.js project directory. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/layout-utils\n```\n\n----------------------------------------\n\nTITLE: Setting GIF Codec via Remotion CLI\nDESCRIPTION: Specifies the output codec as GIF when rendering a Remotion video using the command-line interface. This flag instructs the rendering process to generate an animated GIF file instead of a standard video format.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/render-as-gif.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--codec=gif\n```\n\n----------------------------------------\n\nTITLE: Installing Bun Runtime via cURL and Bash\nDESCRIPTION: Downloads the Bun installation script using cURL and executes it using Bash to install the Bun JavaScript runtime, which is a prerequisite for the Remotion Recorder. The minimum required version is 1.1.11.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/setup.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://bun.sh/install | bash\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Markdown Docs in Remotion (JavaScript)\nDESCRIPTION: Imports specialized React components (Tabs, TabItem, AvailableFrom) designed to enhance user documentation in Remotion. These are typically used to create tabbed content displays, note version availability, and add interactive elements within Markdown-based documentation pages. No external parameters are required, but Remotion's documentation build environment must resolve the specified modules.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/order-of-operations.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport {AvailableFrom} from '../../src/components/AvailableFrom';\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Project Dependencies using npm\nDESCRIPTION: Executes the Node Package Manager (npm) install command (short for `npm install`). This command reads the `package.json` file in the project root and downloads all the necessary dependencies (like Remotion itself, React, etc.) into a `node_modules` folder. This is typically the first command run after cloning or setting up a new Node.js project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-overlay/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Selecting an audio track with Remotion Media Parser (TypeScript)\nDESCRIPTION: Shows how to pick associated audio playlists from a media stream by using the selectM3uAssociatedPlaylists callback during media parsing. The callback inspects properties of each associated playlist (groupId, language, name, autoselect, default, channels, and src) and filters those marked as default. Dependencies include @remotion/media-parser, and input is an m3u8 source stream. The output is a parsed media object with the selected associated audio playlists.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/selecting-streams.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\nconst media = await parseMedia({\\n  src: 'https://test-streams.mux.dev/x36xhzz/x36xhzz.m3u8',\\n  selectM3uAssociatedPlaylists: ({associatedPlaylists}) => {\\n    return associatedPlaylists.filter((playlist) => {\\n      // Information relayed from the .m3u8:\\n      console.log(playlist.groupId); // string\\n      console.log(playlist.language); // string | null\\n      console.log(playlist.name); // string | null\\n      console.log(playlist.autoselect); // boolean\\n      console.log(playlist.default); // boolean\\n      console.log(playlist.channels); // number | null\\n      console.log(playlist.src); // string\\n\\n      return playlist.default;\\n    });\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing create-video package using npm (Bash)\nDESCRIPTION: This command installs the `create-video` package using the Node Package Manager (npm). The `--save-exact` flag ensures that the exact version of the package is recorded in the `package.json` file, which is recommended for Remotion projects to maintain version consistency across all related packages. This command should be executed in a terminal within the context of a Node.js project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/create-video/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install create-video --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/lottie via NPM - Bash\nDESCRIPTION: This snippet demonstrates how to install the @remotion/lottie package exactly using npm. The command ensures that the exact package version specified is used (no caret or range), which is crucial for compatibility when working with the Remotion ecosystem. The output will add @remotion/lottie to your project's dependencies using the precise version, preventing mismatches between related Remotion packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/lottie/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/lottie --save-exact\n```\n\n----------------------------------------\n\nTITLE: Executing Remotion Cloud Run Permissions Check (Shell)\nDESCRIPTION: This command executes the Remotion CLI to display and potentially validate the required Google Cloud IAM permissions for the Service Account associated with Cloud Run deployments. It's used to ensure the necessary permissions, as specified in the setup guide, are correctly configured or known.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/permissions.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun permissions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Remotion Lambda Role Policy using TypeScript\nDESCRIPTION: This snippet demonstrates importing and calling the `getRolePolicy()` function from the `@remotion/lambda` package. It logs the returned JSON string, which defines the necessary AWS IAM permissions for the `remotion-lambda-role` used by Remotion Lambda functions. No parameters are required, and the output is the policy JSON string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getrolepolicy.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getRolePolicy} from '@remotion/lambda';\n\nconsole.log(getRolePolicy()); /* `\n{\n  \"Version\": \"2012-10-17\",\n  \"Statements\": [\n    // ...\n  ]\n}\n` */\n```\n\n----------------------------------------\n\nTITLE: Rendering Timeline Item Layers with React and TypeScript\nDESCRIPTION: This code provides a React component implementation that renders an individual item as a timeline layer. It uses Remotion's <Sequence> to determine visibility between from and from + durationInFrames, and layout='none' to attach the layer directly to the DOM. Required dependencies are React, the Item type, and Remotion Sequence. Input parameters include all the item attributes; it must be rendered within a Main or timeline context.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// @filename: item.ts\\n// @include: item\\n// @filename: Layer.tsx\\n// ---cut---\\n// @include: Layer\n```\n\n----------------------------------------\n\nTITLE: Loading all font styles with loadFont in Remotion - TypeScript\nDESCRIPTION: Demonstrates how to import and invoke the loadFont function from a Google font package (TitanOne) using TypeScript. loadFont(), when called without parameters, loads all available font variants (styles, weights, subsets) for the selected font. Requires @remotion/google-fonts to be installed and the target font sub-package. Returns an object containing the fontFamily property to be used for styling.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {loadFont} from '@remotion/google-fonts/TitanOne';\nconst {fontFamily} = loadFont(); // \"Titan One\"\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Studio in Interactive Mode (Node.js, Bash)\nDESCRIPTION: Launches the Remotion Studio interface, allowing users to preview and edit videos programmatically within their project. This command uses npx to run 'remotion studio' without a global install. Requires project dependencies to be installed and should be run in project root. It opens a development webpage with an interactive video previewer.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-pages/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion studio\n```\n\n----------------------------------------\n\nTITLE: Excluding Audio via Remotion CLI\nDESCRIPTION: Shows how to use the `npx remotion render` command with the `--muted` flag to export the video without including any audio track. This is useful when only the visual part of the render is needed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion render --muted\n```\n\n----------------------------------------\n\nTITLE: Generating CSS rotate3d() Transform in Remotion (TSX)\nDESCRIPTION: Illustrates using the `rotate3d` function from `@remotion/animation-utils` to create a CSS `rotate3d()` transform string. It takes four arguments: x, y, z vector components and the angle. The angle can be a number (degrees), a string with unit, or a number and a unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { rotate3d } from \"@remotion/animation-utils\";\n\nconst transform = rotate3d(1, 0, 0, 45);\n// => \"rotate3d(1, 0, 0, 45deg)\"\n\nconst transform2 = rotate3d(1, 0, 0, \"45deg\");\n// => \"rotate3d(1, 0, 0, 45deg)\"\n\nconst transform3 = rotate3d(1, 0, 0, 45, \"deg\");\n// => \"rotate3d(1, 0, 0, 45deg)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Re-encode Capability Asynchronously in onVideoTrack in TSX\nDESCRIPTION: Shows how to use the `canReencodeVideoTrack` function asynchronously within the `onVideoTrack` callback to check if a specific video track can be re-encoded to the desired codec ('vp8'). If re-encoding is possible, the track is marked for re-encoding; otherwise, it's dropped (`{type: 'drop'}`). This is useful when re-encoding support needs to be verified dynamically.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/track-transformation.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia, canReencodeVideoTrack} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  audioCodec: 'opus',\n  onVideoTrack: async ({track}) => {\n    const canReencode = await canReencodeVideoTrack({\n      videoCodec: 'vp8',\n      track,\n      resizeOperation: null,\n      rotate: 0,\n    });\n\n    if (canReencode) {\n      return {type: 'reencode', videoCodec: 'vp8'};\n    }\n\n    return {type: 'drop'};\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This command uses npm (Node Package Manager) to download and install all the dependencies listed in the project's `package.json` file. This step is necessary to set up the project environment before development or rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-javascript/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining max-height-width ResizeOperation in TypeScript\nDESCRIPTION: Shows how to define a `ResizeOperation` object for use with `convertMedia`. This configuration scales a video down to the largest possible size that fits within both the specified `maxHeight` (480 pixels) and `maxWidth` (640 pixels) constraints, preserving aspect ratio. It requires the `ResizeOperation` type from `@remotion/webcodecs`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resizing.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ResizeOperation} from '@remotion/webcodecs';\n\nconst resize: ResizeOperation = {\n  mode: 'max-height-width',\n  maxHeight: 480,\n  maxWidth: 640,\n};\n```\n\n----------------------------------------\n\nTITLE: Automatically Syncing TypeScript Aliases with tsconfig-paths-webpack-plugin in Remotion\nDESCRIPTION: This TypeScript snippet shows how to integrate `tsconfig-paths-webpack-plugin` into the Remotion Webpack configuration using `Config.overrideWebpackConfig`. By adding an instance of `TsconfigPathsPlugin` to the `resolve.plugins` array, Webpack automatically reads the `paths` from `tsconfig.json` and configures its module resolution accordingly. This eliminates the need for manual alias mapping in the Webpack override. Requires installing the `tsconfig-paths-webpack-plugin` dependency.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/ts-aliases.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport TsconfigPathsPlugin from 'tsconfig-paths-webpack-plugin';\n\nConfig.overrideWebpackConfig((config) => {\n  return {\n    ...config,\n    resolve: {\n      ...config.resolve,\n      plugins: [...(config.resolve?.plugins ?? []), new TsconfigPathsPlugin()],\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Triangle SVG Path using makeTriangle() in TypeScript\nDESCRIPTION: This TypeScript example demonstrates using the `makeTriangle` function from `@remotion/shapes`. It calls the function with a specified `length` and `direction` ('right') to generate the SVG `path` string, `width`, `height`, and `transformOrigin` for an equilateral triangle. The generated values are then logged to the console.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/make-triangle.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeTriangle } from \"@remotion/shapes\";\n\nconst { path, width, height, transformOrigin } = makeTriangle({\n  length: 100,\n  direction: \"right\",\n});\n\nconsole.log(path); // M 0 0 L 0 100 L 86.60254037844386 50 z\nconsole.log(width); // 86.60254037844386\nconsole.log(height); // 100\nconsole.log(transformOrigin); // '28.867513459481287 50'\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Paths for Assets in Remotion (Incorrect)\nDESCRIPTION: This React component demonstrates an attempt to use an absolute file path ('C://Users/Joe/Documents/image.png') for the 'src' prop of the Remotion 'Img' component. This approach does not work because browsers, where Remotion previews and renders, lack direct access to the local filesystem for security reasons.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/absolute-paths.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Img } from \"remotion\";\n\nconst MyComp: React.FC = () => {\n  return <Img src=\"C://Users/Joe/Documents/image.png\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Converting Media Using Default Codecs in TSX\nDESCRIPTION: Demonstrates the minimal configuration for converting media using `@remotion/webcodecs`. It specifies only the source URL (`src`) and the desired output container (`container`), relying on the default audio and video codecs determined by `getDefaultAudioCodec()` and `getDefaultVideoCodec()`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/track-transformation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Mux Video Component in JavaScript/JSX\nDESCRIPTION: Imports the `NewMuxVideo` component from a relative path within the project's source directory. This component is likely designed to render videos hosted on the Mux video platform within a React or MDX environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/success-stories/2022-09-16-YARX.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NewMuxVideo} from '../src/components/MuxVideo';\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Downloads Badge for @remotion/webcodecs using Markdown\nDESCRIPTION: This Markdown snippet renders an NPM download count badge for the '@remotion/webcodecs' package using img.shields.io, styled flat and black. The badge itself links to the corresponding npmcharts.com page for detailed download statistics. Requires a Markdown rendering environment like GitHub.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/STATS.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/webcodecs.svg?style=flat&color=black&label=@remotion/webcodecs)](https://npmcharts.com/compare/@remotion/webcodecs?minimal=true)\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Downloads Badge for @remotion/zod-types using Markdown\nDESCRIPTION: This Markdown snippet renders an NPM download count badge for the '@remotion/zod-types' package using img.shields.io, styled flat and black. The badge itself links to the corresponding npmcharts.com page for detailed download statistics. Requires a Markdown rendering environment like GitHub.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/STATS.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[![NPM Downloads](https://img.shields.io/npm/dm/@remotion/zod-types.svg?style=flat&color=black&label=@remotion/zod-types)](https://npmcharts.com/compare/@remotion/zod-types?minimal=true)\n```\n\n----------------------------------------\n\nTITLE: Importing the Bounties Component in TSX\nDESCRIPTION: This snippet imports the `Bounties` React component from the specified relative path (`../../components/Bounties.tsx`). This component is intended to fetch and display information about available bounty issues within the documentation page. Requires React and the existence of the `Bounties.tsx` component file at the given location.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/bounty.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bounties } from \"../../components/Bounties.tsx\";\n```\n\n----------------------------------------\n\nTITLE: Making an Authenticated API Request to Remotion Server - Bash\nDESCRIPTION: This snippet sends an authenticated HTTP POST request to the Remotion server's /render endpoint using curl, including a Base64-encoded 'Authorization' header for basic authentication. Dependencies include a running Remotion server (see previous steps) and valid credentials matching those in the .env file. The command initiates a rendering process; the output is the JSON response from the API, and incorrect authentication or an unreachable server will lead to errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'http://localhost:8080/render' \\\\n--header 'Authorization: Basic YWRtaW46cGFzc3dvcmQ='\n```\n\n----------------------------------------\n\nTITLE: Seeking with @remotion/media-parser in TypeScript/React\nDESCRIPTION: Demonstrates the use of the @remotion/media-parser package controller to perform experimental seek operations on a media file. It highlights how to set a seek position before and during parsing, including use of seek types (e.g., 'keyframe-before-time'), and explains controller lifecycle. Dependencies include @remotion/media-parser and an async-capable JavaScript/TypeScript runtime. The key parameter is the desired seek time in seconds; returns parsing results while applying the seek logic to the media stream. Not all seeking scenarios are currently supported, and certain field dependencies may block seeks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/seeking.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {parseMedia, mediaParserController} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\n\n// You can make a seek even before starting a parse\n// This will be considered before emitting the first sample\ncontroller._experimentalSeek({\n  type: 'keyframe-before-time',\n  timeInSeconds: 5,\n});\n\nawait parseMedia({\n  src: 'https://example.com/video.mp4',\n  controller,\n  onVideoTrack: () => {\n    return () => {\n      // You can also seek inmidst a parse.\n      controller._experimentalSeek({\n        type: 'keyframe-before-time',\n        timeInSeconds: 10,\n      });\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating `staticFile()` Behavior Before Remotion v4 (TSX)\nDESCRIPTION: This snippet shows how the `staticFile()` function in Remotion versions prior to 4.0 handled filenames with URI-unsafe characters like '#'. It directly outputted the string without encoding, potentially causing issues in web contexts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/4-0-migration.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx title=\"Before v4\"\nstaticFile('my-image#portrait.png'); //output: \"my-image#portrait.png\"\n```\n```\n\n----------------------------------------\n\nTITLE: Changing Player Size via Style Prop in @remotion/player (React TypeScript)\nDESCRIPTION: Customizes the rendered dimensions of the player using the style prop, specifying width and height. Requires the same dependencies as before; the style prop is an object that directly sets CSS properties, enabling player resizing. Inputs: previous player props plus style. Outputs: player is rendered with the specified pixel dimensions. Constraints: does not alter the video resolution, only the player UI dimensions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-examples.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\\n// @filename: ./remotion/MyVideo.tsx\\nexport const MyVideo = () => <></>;\\n\\n// @filename: index.tsx\\n// ---cut---\\nimport { Player } from \"@remotion/player\";\\nimport { MyVideo } from \"./remotion/MyVideo\";\\n\\nexport const App: React.FC = () => {\\n  return (\\n    <Player\\n      component={MyVideo}\\n      durationInFrames={120}\\n      compositionWidth={1920}\\n      compositionHeight={1080}\\n      fps={30}\\n      controls\\n      loop\\n      style={{\\n        width: 1280,\\n        height: 720,\\n      }}\\n    />\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Increasing Lambda Concurrency Limit with Remotion CLI (Shell)\nDESCRIPTION: Executes the Remotion CLI command to request an increase in the AWS Lambda concurrency quota for the configured AWS account and region. This is typically done to scale video rendering capabilities. Requires the Remotion CLI, Node.js, and properly configured AWS credentials for a Root account.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/limits.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion lambda quotas increase\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/transitions Using npm - Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the @remotion/transitions package for Remotion projects using npm. It uses the --save-exact flag to ensure the exact version is installed, aligning with best practices for Remotion dependencies. Prerequisites include having npm installed and an existing Node.js project; this command adds @remotion/transitions to the project's dependencies. The input is the shell command, and the expected output is the installation of the package into the node_modules directory. Version consistency across all Remotion packages is a key recommended practice.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/transitions/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/transitions --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Lambda Client via Deno - Bash\nDESCRIPTION: Demonstrates how to add the @remotion/lambda-client npm package to a Supabase Edge Functions project using the Deno package manager. Ensures the required client library is available for invoking Lambda renders within the Edge Function environment. Replace the version number with the Remotion version in use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/supabase.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno add @remotion/lambda-client@4.0.265\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Lambda Insights via Remotion Node.js API (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to enable AWS Lambda Insights programmatically using the `deployFunction` method from the `@remotion/lambda` package. Setting the `enableLambdaInsights` option to `true` activates the feature during deployment. It requires Remotion v4.0.61+ and updated AWS permissions. The code also includes an assertion to ensure the function didn't previously exist, as insights won't be applied to existing functions without redeployment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/insights.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport assert from 'assert';\n// ---cut---\nimport {deployFunction} from '@remotion/lambda';\n\nconst {alreadyExisted} = await deployFunction({\n  createCloudWatchLogGroup: true,\n  region: 'us-east-1',\n  timeoutInSeconds: 120,\n  memorySizeInMb: 3009,\n  enableLambdaInsights: true,\n});\n\n// Note: If the function previously already existed, Lambda insights are not applied.\n// Delete the old function and deploy again.\nassert(!alreadyExisted);\n```\n\n----------------------------------------\n\nTITLE: Removing Sites with Remotion Cloud Run CLI - Bash\nDESCRIPTION: This snippet demonstrates how to use the Remotion CLI to remove one or multiple sites from Cloud Run by specifying their IDs. The first command removes a single site, while the second command removes multiple sites by listing their IDs. Requires Remotion CLI to be installed, and assumes proper authentication with Google Cloud. Inputs are site IDs as command arguments, and output will be confirmation prompts and logged deletion results. Limitations include region targeting and no support for --all-regions flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/rm.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites rm central-site\nnpx remotion cloudrun sites rm central-site another-site # multiple at once\n```\n\n----------------------------------------\n\nTITLE: Adding a Remotion Script to package.json - Diff\nDESCRIPTION: Illustrates updating the package.json 'scripts' section to add a convenient shortcut for launching Remotion Studio. Run 'npm run remotion' to start the UI. Useful for simplifying development workflow. Only changes the scripts object in package.json.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/player-integration.mdx#_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n  \"scripts\": {\n+    \"remotion\": \"remotion studio src/remotion/index.ts\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Remotion Project with Next.js (Shell)\nDESCRIPTION: Uses `npx` to run the `create-video` package, scaffolding a new Remotion project using the latest version and specifically choosing the Next.js template. This is an alternative to cloning the template manually.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx create-video@latest --next\n```\n\n----------------------------------------\n\nTITLE: Re-encoding WebM to MP4 using FFmpeg (Shell)\nDESCRIPTION: This command uses FFmpeg on a server to re-encode a WebM video file (`input.webm`) into an MP4 file (`output.mp4`). It specifies the H.264 video codec (`libx264`) and AAC audio codec (`aac`) for broader compatibility. This process decodes and re-encodes the media streams, which is slower but allows format changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/fix-a-mediarecorder-video.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nffmpeg -i input.webm -c:v libx264 -c:a aac output.mp4\n```\n\n----------------------------------------\n\nTITLE: Specifying Video and Audio Codecs for Conversion in TSX\nDESCRIPTION: Shows how to explicitly set the video and audio codecs for media conversion using the `videoCodec` and `audioCodec` options in the `convertMedia` function from `@remotion/webcodecs`. This overrides the default codec selection.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/track-transformation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  videoCodec: 'vp8',\n  audioCodec: 'opus',\n});\n```\n\n----------------------------------------\n\nTITLE: Using Callbacks for Retrieving Media Metadata in Remotion Media Parser (TypeScript)\nDESCRIPTION: This sample demonstrates using dedicated field-specific callbacks (onDurationInSeconds and onDimensions) with parseMedia to asynchronously receive metadata values as soon as they become available, rather than waiting for the entire function to resolve. This approach may improve responsiveness for large files or when incremental processing is desired. No additional dependencies are required besides @remotion/media-parser.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/parse-media.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {parseMedia} from '@remotion/media-parser';\\n\\nconst result = await parseMedia({\\n  src: 'https://example.com/my-video.mp4',\\n  onDurationInSeconds: (durationInSeconds) => {\\n    console.log(durationInSeconds);\\n  },\\n  onDimensions: (dimensions) => {\\n    console.log(dimensions);\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting Lambda Quota Increase with Remotion CLI\nDESCRIPTION: Shows the Remotion CLI command `npx remotion lambda quotas increase` used to programmatically request an increase in the AWS Lambda concurrency quota via the Service Quotas API. This command often requires execution by an AWS Root account and may not work for child accounts within an AWS Organization.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/rate-limit.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda quotas increase\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm - Shell\nDESCRIPTION: Installs all project dependencies specified in package.json by running the npm install ('npm i') command. This step ensures that all Node.js and Remotion-related packages are available for running or building the Stargazer video project. Input: None. Output: Local node_modules directory populated with dependencies. Internet connectivity and npm must be available.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-stargazer/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Rendering by Site Name using Remotion Cloud Run CLI - Bash\nDESCRIPTION: Shows an alternative invocation of the render command using just the site name instead of the full serve URL. This method still specifies the composition ID and the target Cloud Run service. The command expects the site to have already been deployed and accessible by its designated site name in the current GCP region.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/render.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun render test-site tiles --service-name=remotion--3-3-82--mem512mi--cpu1-0--t-800\n```\n\n----------------------------------------\n\nTITLE: Watching Public Folder Changes using Remotion Studio in TypeScript/TSX\nDESCRIPTION: This snippet demonstrates how to use the watchPublicFolder function from the @remotion/studio package to observe changes in the public directory. When any file in the directory is added, removed, or modified, the callback receives an array of StaticFile objects. To stop monitoring, the cancel function (returned from the watcher) can be called. This requires the Remotion Studio environment and the package @remotion/studio; usage in the Player context will not trigger events.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/watch-public-folder.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StaticFile, watchPublicFolder } from \"@remotion/studio\";\n\n// Watch for changes in a specific static file\nconst { cancel } = watchPublicFolder((newFiles: StaticFile[]) => {\n  console.log(\"The public folder now contains:\", newFiles);\n});\n\n// To stop watching for changes, call the cancel function\ncancel();\n```\n\n----------------------------------------\n\nTITLE: Falling Back to Default Video Track Behavior with Remotion WebCodecs (TypeScript)\nDESCRIPTION: Illustrates how to use convertMedia() from @remotion/webcodecs in TypeScript, providing a custom onAudioTrack handler that incorporates custom logic for audio tracks and falls back to the default handler when needed. This example demonstrates dependency injection with @remotion/webcodecs, specifically utilizing defaultOnAudioTrackHandler for default processing, and requires a valid source media URL. Inputs include the source file path, container format, and handler functions; the outputs and processing depend on custom and default logic. Limitations: Full customization requires the developer to discern when to invoke the default behavior.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/default-on-video-track-handler.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {convertMedia, defaultOnAudioTrackHandler} from '@remotion/webcodecs';\\n\\nawait convertMedia({\\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\\n  container: 'webm',\\n  onAudioTrack: (params) => {\\n    // Custom logic for handling video tracks\\n    // ...\\n\\n    // Fall back to the default behavior\\n    return defaultOnAudioTrackHandler(params);\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Media Files Using Remotion Media Parser on a Bun Worker (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to parse media files using the parseMediaOnServerWorker function from the @remotion/media-parser/server-worker module. The function accepts a src argument (file path to the media) and a fields object specifying which metadata to extract (such as durationInSeconds and dimensions). The snippet requires Bun as the runtime for Worker support, and outputs extracted metadata in a structured object. Input must be a valid file path, and output includes properties like durationInSeconds and dimensions, with the function incompatible with browser or Node.js worker environments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/parse-media-on-server-worker.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {parseMediaOnServerWorker} from '@remotion/media-parser/server-worker';\\n\\nconst result = await parseMediaOnServerWorker({\\n  src: '/tmp/video.mp4',\\n  fields: {\\n    durationInSeconds: true,\\n    dimensions: true,\\n  },\\n});\\n\\nconsole.log(result.durationInSeconds); // 10\\nconsole.log(result.dimensions); // {width: 1920, height: 1080}\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion CLI using bun\nDESCRIPTION: Installs the Remotion Command Line Interface (`@remotion/cli`) package as a project dependency using the bun package manager. This is a prerequisite for launching the Remotion Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/studio.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun i @remotion/cli\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS v4 Support with NPM - Bash\nDESCRIPTION: This code snippet provides the npm command required to install the @remotion/tailwind-v4 package with an exact version. The '--save-exact' flag ensures that the installed version matches precisely, avoiding potential compatibility issues with Remotion and related packages. Input is the terminal command, and the output is the installation of @remotion/tailwind-v4 in the project; there are no additional dependencies other than npm and a compatible version of Remotion. Version alignment across all Remotion packages is advised.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/tailwind-v4/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/tailwind-v4 --save-exact\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda and Bundle to AWS (Node.js, Bash/Node.js)\nDESCRIPTION: Executes a deployment script 'deploy.mjs' using Node.js, which sets up and uploads the necessary Remotion Lambda function and media bundle to AWS Lambda for scalable serverless video rendering. To work, it requires AWS credentials (typically via environment variables in a .env file) and a correctly configured 'config.mjs'. Should be rerun after changes to video templates or dependency upgrades. Script logs deployment progress and may output URLs or deployment IDs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-pages/README.md#_snippet_6\n\nLANGUAGE: node\nCODE:\n```\nnode deploy.mjs\n```\n\n----------------------------------------\n\nTITLE: Logging Timeout Error Message (Bash)\nDESCRIPTION: This snippet illustrates the specific timeout error message displayed by Remotion when a delayRender() call is not cleared within the expected time frame (default is 30 seconds). It does not require dependencies and serves for recognition of the error in CLI logs. Input is the standard output or error stream of a Remotion process, and the output is the same plaintext error. This helps users correlate documentation with actual errors they see during development.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/timeout.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nA delayRender() was called but not cleared after 28000ms. See https://remotion.dev/docs/timeout for help. The delayRender was called\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker to Use NVIDIA Runtime - Bash\nDESCRIPTION: Configures Docker to use the NVIDIA runtime for containerized GPU access, then restarts the Docker service to apply changes. Assumes nvidia-ctk is installed. Outputs a Docker daemon ready to launch GPU-accelerated containers. Requires sudo permissions and will interrupt running Docker containers during restart.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo nvidia-ctk runtime configure --runtime=docker\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: File Protocol for Frame Access (Deprecated in Rendering)\nDESCRIPTION: Reference to the `file://` URI scheme. Prior to Remotion 1.5, frames were accessed using this protocol during the rendering process. This approach has been replaced by serving frames over localhost.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-03-03-remotion-1-5.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nfile://\n```\n\n----------------------------------------\n\nTITLE: Excluding Audio using renderMediaOnLambda in TypeScript\nDESCRIPTION: Illustrates using `@remotion/lambda`'s `renderMediaOnLambda` function in TypeScript to render a video without audio on AWS Lambda. Similar to the audio-only Lambda example, it requires region, function name, composition, serveUrl, and inputProps, but uses `muted: true` instead of specifying an audio codec and `imageFormat: 'none'`. A video codec like 'h264' is used.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio/exporting.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {renderMediaOnLambda} from '@remotion/lambda';\n// ---cut---\n\nconst {bucketName, renderId} = await renderMediaOnLambda({\n  region: 'us-east-1',\n  functionName: 'remotion-render-bds9aab',\n  composition: 'MyVideo',\n  serveUrl: 'https://remotionlambda-qg35eyp1s1.s3.eu-central-1.amazonaws.com/sites/bf2jrbfkw',\n  inputProps: {},\n  codec: 'h264',\n  muted: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Recorder - Bun - Bash\nDESCRIPTION: Runs the command to start the Remotion Recorder interface with Bun's development server. Requires Bun and the Remotion project installed. This command sets up a local Vite server accessible at http://localhost:4000, where users can interact with the recording UI. No parameters are required, and the main output is the running development environment serving the application.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/record/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun start\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of `testPermissions` in TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of the `testPermissions` function from the `@remotion/cloudrun` package. It imports the function, calls it asynchronously using `await`, and then iterates over the `results` array in the returned object to log the decision (`allowed`) and the name of each permission checked (e.g., `iam.serviceAccounts.actAs`). This function helps verify if the necessary GCP IAM permissions are granted.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/testpermissions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts twoslash\nimport {testPermissions} from '@remotion/cloudrun';\n\nconst {results} = await testPermissions();\n\nfor (const result of results) {\n  console.log(result.decision); // \"allowed\"\n  console.log(result.permissionName); // \"iam.serviceAccounts.actAs\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Building the Docker Image (Shell)\nDESCRIPTION: Command to build the Docker image using the Dockerfile in the current directory (`.`) and tag it with the name `remotion-app`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t remotion-app .\n```\n\n----------------------------------------\n\nTITLE: Applying Animation Effects to Yellow Hearts in Remotion (TSX)\nDESCRIPTION: This snippet defines the `YellowHearts` component. It applies a rotation (`0.3rad`) to the container, then wraps the `YellowHeart` component with `Shrinking`, applies a vertical translation (`-50px`), delays the animation using `Move` (20 frames), and encloses everything within an `Explosion` effect. It depends on custom animation components (`Explosion`, `Move`, `Shrinking`) and the `YellowHeart` component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"src/YellowHearts.tsx\"\n// @filename: Move.tsx\nexport const Move: React.FC<{\n  children: React.ReactNode;\n  delay: number;\n}> = () => null;\n// @filename: Shrinking.tsx\nexport const Shrinking: React.FC<{\n  children: React.ReactNode;\n}> = () => null;\n// @filename: Explosion.tsx\nexport const Explosion: React.FC<{\n  children: React.ReactNode;\n}> = () => null;\n// @filename: Background.tsx\nexport const Background: React.FC<{}> = () => null;\n// @filename: YellowHeart.tsx\nexport const YellowHeart: React.FC<{}> = () => null;\n// @filename: Dot.tsx\nexport const Dot: React.FC<{}> = () => null;\n// @filename: RedHeart.tsx\nexport const RedHeart: React.FC<{}> = () => null;\n// @filename: Trail.tsx\nexport const Trail: React.FC<{\n  children: React.ReactNode;\n  extraOffset: number;\n  amount: number;\n}> = () => null;\n\n// @filename: MyComposition.tsx\n// ---cut---\nimport React from 'react';\nimport {AbsoluteFill} from 'remotion';\nimport {Explosion} from './Explosion';\nimport {Move} from './Move';\nimport {Shrinking} from './Shrinking';\nimport {YellowHeart} from './YellowHeart';\n\nexport const YellowHearts: React.FC = () => {\n  return (\n    <AbsoluteFill\n      style={{\n        rotate: '0.3rad',\n      }}\n    >\n      <Explosion>\n        <Move delay={20}>\n          <AbsoluteFill\n            style={{\n              transform: `translateY(-50px)`,\n            }}\n          >\n            <Shrinking>\n              <YellowHeart />\n            </Shrinking>\n          </AbsoluteFill>\n        </Move>\n      </Explosion>\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Emoji Asset Source Calculation Logic - TypeScript\nDESCRIPTION: Defines a default function for resolving the source URL of animated emoji assets using Remotion's staticFile utility. Accepts parameters for emoji identifier, scale (resolution), and format, returning the correct asset path based on extension logic. Depends on remotion's staticFile for handling asset references, and CalculateEmojiSrc type from @remotion/animated-emoji for typings. Inputs are emoji string, numeric scale, and format string ('hevc' or other), outputs the path to the asset as a string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animated-emoji/animated-emoji.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {staticFile} from \"remotion\";\nimport type {CalculateEmojiSrc} from \"@remotion/animated-emoji\";\n\nexport const defaultCalculateEmojiSrc: CalculateEmojiSrc = ({\n  emoji,\n  scale,\n  format,\n}) => {\n  const extension = format === \"hevc\" ? \"mp4\" : \"webm\";\n\n  return staticFile(`${emoji}-${scale}x.${extension}`);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting JPEG Quality in Remotion Config (TypeScript)\nDESCRIPTION: Sets the JPEG quality (0-100) for rendered frames using the `Config` object in `remotion.config.ts`. This only applies if the video image format is set to 'jpeg'. The default quality is 80. Depends on the `Config` object from `@remotion/cli/config`. The `--jpeg-quality` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setJpegQuality(90);\n```\n\n----------------------------------------\n\nTITLE: Implementing IframePlayer Component with React and Remotion (TypeScript)\nDESCRIPTION: This React TypeScript snippet defines the IframePlayer component, which wraps the Remotion <Player> inside an iframe to isolate global styles. The component uses hooks to manage iframe content, attach a resize observer for responsive sizing, and leverages React portals to render the player in the iframe. Key dependencies include React, ReactDOM, @remotion/player, and zod. Props are passed through generically and care is taken to synchronize player container size with the iframe. Inputs are standard PlayerProps, and outputs are a fully functional Remotion player sandwiched in its own window context. The snippet expects a valid DOM, forwardRef usage, and React 17+ compatibility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/player-in-iframe.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Player, PlayerProps, PlayerRef } from \"@remotion/player\";\\nimport React, { forwardRef, useEffect, useRef, useState } from \"react\";\\nimport ReactDOM from \"react-dom\";\\nimport { AnyZodObject } from \"zod\";\\n\\nconst className = \"__player\";\\nconst borderNone: React.CSSProperties = {\\n  border: \"none\",\\n};\\n\\nconst IframePlayerWithoutRef = <T extends Record<string, unknown>>(\\n  props: PlayerProps<AnyZodObject, T>,\\n  ref: React.Ref<PlayerRef>\\n) => {\\n  const [contentRef, setContentRef] = useState<HTMLIFrameElement | null>(null);\\n  const resizeObserverRef = useRef<ResizeObserver | null>(null);\\n  const mountNode = contentRef?.contentDocument?.body;\\n  useEffect(() => {\\n    if (!contentRef || !contentRef.contentDocument) return;\\n    // Remove margin and padding so player fits snugly\\n    contentRef.contentDocument.body.style.margin = \"0\";\\n    contentRef.contentDocument.body.style.padding = \"0\";\\n    // When player div is resized also resize iframe\\n    resizeObserverRef.current = new ResizeObserver(([playerEntry]) => {\\n      const playerRect = playerEntry.contentRect;\\n      contentRef.width = String(playerRect.width);\\n      contentRef.height = String(playerRect.height);\\n    });\\n    // The remotion player element\\n    const playerElement = contentRef.contentDocument.querySelector(\\n      \".\" + className\\n    );\\n    if (!playerElement) {\\n      throw new Error(\\n        'Player element not found. Add a \"' +\\n          className +\\n          '\" class to the <Player>.'\\n      );\\n    }\\n    // Watch the player element for size changes\\n    resizeObserverRef.current.observe(playerElement as Element);\\n    return () => {\\n      // ContentRef changed: unobserve!\\n      (resizeObserverRef.current as ResizeObserver).unobserve(\\n        playerElement as Element\\n      );\\n    };\\n  }, [contentRef]);\\n  const combinedClassName = `${className} ${props.className ?? \"\"}`.trim();\\n  return (\\n    // eslint-disable-next-line @remotion/warn-native-media-tag\\n    <iframe ref={setContentRef} style={borderNone}>\\n      {mountNode &&\\n        ReactDOM.createPortal(\\n          // @ts-expect-error PlayerProps are incorrectly typed\\n          <Player<AnyZodObject, T>\\n            {...props}\\n            ref={ref}\\n            className={combinedClassName}\\n          />,\\n          mountNode\\n        )}\\n    </iframe>\\n  );\\n};\\nexport const IframePlayer = forwardRef(IframePlayerWithoutRef);\n```\n\n----------------------------------------\n\nTITLE: Example Return Value of getCompositions() - TypeScript\nDESCRIPTION: Provides a realistic sample of the array of composition metadata objects returned by getCompositions(), including essential fields such as id, width, height, fps, durationInFrames, and optional defaultProps. This structure is critical for consuming tooling or automation code that analyzes or presents Remotion composition options. The objects are fully typed and reflect expected usage patterns in Remotion workflows.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/get-compositions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    id: 'HelloWorld',\n    width: 1920,\n    height: 1080,\n    fps: 30,\n    durationInFrames: 120,\n    defaultProps: {\n      title: 'Hello World',\n    },\n  },\n  {\n    id: 'Title',\n    width: 1080,\n    height: 1080,\n    fps: 30,\n    durationInFrames: 90,\n    defaultProps: undefined,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Trimming Start Using Negative from Value (Remotion Sequence, React/TypeScript)\nDESCRIPTION: Uses a negative 'from' value in the Remotion <Sequence> to trim the initial frames of content. The BlueSquare appears as if it has already progressed by 15 frames when it mounts. No additional dependencies except React and Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst TrimStartExample: React.FC = () => {\n  return (\n    <Sequence from={-15}>\n      <BlueSquare />\n    </Sequence>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies - Console\nDESCRIPTION: Installs all required dependencies defined in package.json using npm. Must be run before starting the development or production server to ensure all needed modules are available. Expected output is a node_modules directory with installed packages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-render-server/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for AWS S3 Buckets - JSON\nDESCRIPTION: Defines a CORS policy that allows PUT requests from any origin to enable direct uploads to S3 buckets from browsers. Required for enabling client-side uploads using presigned URLs. Key parameters: AllowedHeaders, AllowedMethods, AllowedOrigins, ExposeHeaders, MaxAgeSeconds. The configuration may need extension to support GET requests after uploading.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/presigned-urls.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"AllowedHeaders\": [\"*\"],\n    \"AllowedMethods\": [\"PUT\"],\n    \"AllowedOrigins\": [\"*\"],\n    \"ExposeHeaders\": [],\n    \"MaxAgeSeconds\": 3000\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using getLottieMetadata to Extract Lottie Animation Info (TSX)\nDESCRIPTION: This TSX snippet demonstrates how to use the `getLottieMetadata` function from `@remotion/lottie` to parse Lottie animation data. It defines sample animation data (a complex JavaScript object adhering to the Lottie schema) in one file and imports it along with the function in another. Calling `getLottieMetadata` with the data returns an object containing the animation's width, height, duration (in frames and seconds), and frames per second (fps). The expected output structure is shown in a comment. The function requires a JavaScript object representing the Lottie animation data as input.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/getlottiemetadata.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// @allowUmdGlobalAccess\n// @filename: animation.ts\nexport const animationData = {\n  v: \"5.9.6\",\n  fr: 29.9700012207031,\n  ip: 0,\n  op: 90.0000036657751,\n  w: 1920,\n  h: 1080,\n  nm: \"Comp 1\",\n  ddd: 0,\n  assets: [],\n  layers: [\n    {\n      ddd: 0,\n      ind: 1,\n      ty: 4,\n      nm: \"Shape Layer 1\",\n      sr: 1,\n      ks: {\n        o: { a: 0, k: 100, ix: 11 },\n        r: {\n          a: 1,\n          k: [\n            {\n              i: { x: [0.833], y: [0.833] },\n              o: { x: [0.167], y: [0.167] },\n              t: 0,\n              s: [360],\n            },\n            { t: 58.0000023623884, s: [0] },\n          ],\n          ix: 10,\n        },\n        p: {\n          a: 1,\n          k: [\n            {\n              i: { x: 0.833, y: 0.833 },\n              o: { x: 0.167, y: 0.167 },\n              t: 0,\n              s: [979.401, 1368, 0],\n              to: [0, -138, 0],\n              ti: [0, 138, 0],\n            },\n            { t: 58.0000023623884, s: [979.401, 540, 0] },\n          ],\n          ix: 2,\n          l: 2,\n        },\n        a: { a: 0, k: [517.365, 112.096, 0], ix: 1, l: 2 },\n        s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 },\n      },\n      ao: 0,\n      shapes: [\n        {\n          ty: \"gr\",\n          it: [\n            {\n              ty: \"rc\",\n              d: 1,\n              s: { a: 0, k: [425.883, 425.883], ix: 2 },\n              p: { a: 0, k: [0, 0], ix: 3 },\n              r: { a: 0, k: 98, ix: 4 },\n              nm: \"Rectangle Path 1\",\n              mn: \"ADBE Vector Shape - Rect\",\n              hd: false,\n            },\n            {\n              ty: \"st\",\n              c: { a: 0, k: [1, 1, 1, 1], ix: 3 },\n              o: { a: 0, k: 100, ix: 4 },\n              w: { a: 0, k: 2, ix: 5 },\n              lc: 1,\n              lj: 1,\n              ml: 4,\n              bm: 0,\n              nm: \"Stroke 1\",\n              mn: \"ADBE Vector Graphic - Stroke\",\n              hd: false,\n            },\n            {\n              ty: \"fl\",\n              c: { a: 0, k: [0, 0.468933612108, 1, 1], ix: 4 },\n              o: { a: 0, k: 100, ix: 5 },\n              r: 1,\n              bm: 0,\n              nm: \"Fill 1\",\n              mn: \"ADBE Vector Graphic - Fill\",\n              hd: false,\n            },\n            {\n              ty: \"tr\",\n              p: { a: 0, k: [494.618, 123.481], ix: 2 },\n              a: { a: 0, k: [0, 0], ix: 1 },\n              s: { a: 0, k: [100, 100], ix: 3 },\n              r: { a: 0, k: 0, ix: 6 },\n              o: { a: 0, k: 100, ix: 7 },\n              sk: { a: 0, k: 0, ix: 4 },\n              sa: { a: 0, k: 0, ix: 5 },\n              nm: \"Transform\",\n            },\n          ],\n          nm: \"Rectangle 2\",\n          np: 3,\n          cix: 2,\n          bm: 0,\n          ix: 1,\n          mn: \"ADBE Vector Group\",\n          hd: false,\n        },\n      ],\n      ip: 0,\n      op: 90.0000036657751,\n      st: 0,\n      ct: 1,\n      bm: 0,\n    },\n    {\n      ddd: 0,\n      ind: 2,\n      ty: 1,\n      nm: \"White Solid 1\",\n      sr: 1,\n      ks: {\n        o: { a: 0, k: 100, ix: 11 },\n        r: { a: 0, k: 0, ix: 10 },\n        p: { a: 0, k: [960, 540, 0], ix: 2, l: 2 },\n        a: { a: 0, k: [960, 540, 0], ix: 1, l: 2 },\n        s: { a: 0, k: [100, 100, 100], ix: 6, l: 2 },\n      },\n      ao: 0,\n      sw: 1920,\n      sh: 1080,\n      sc: \"#ffffff\",\n      ip: 0,\n      op: 90.0000036657751,\n      st: 0,\n      bm: 0,\n    },\n  ],\n  markers: [],\n};\n\n// @filename: Animation.tsx\nimport { animationData } from \"./animation\";\n\n// ---cut---\nimport { getLottieMetadata } from \"@remotion/lottie\";\n\n// animationData is a JSON object, can be imported from a .json file, remote file or using staticFile()\nconst metadata = getLottieMetadata(animationData);\n\n/*\n{\n  durationInFrames: 90,\n  durationInSeconds: 3.0030030030030037,\n  fps: 29.9700012207031,\n  height: 1080,\n  width: 1920,\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Development Server using Bun\nDESCRIPTION: This command starts the Remotion development server using the Bun runtime. Executing this command launches the server and automatically opens a Remotion Studio instance in the browser, enabling the user to begin editing video compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/editing.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbun start\n```\n\n----------------------------------------\n\nTITLE: Initiating a Still Render on Remotion Cloud Run using TypeScript\nDESCRIPTION: This example demonstrates how to import and call the `renderStillOnCloudrun` function to start a still rendering job on a pre-deployed Remotion Cloud Run service. It specifies the target region, service name, composition ID, image format, and the URL of the deployed Remotion site (`serveUrl`). The code then checks if the render was successful and logs the resulting bucket name and render ID.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/renderstilloncloudrun.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ---cut---\nimport {renderStillOnCloudrun} from '@remotion/cloudrun/client';\n\nconst result = await renderStillOnCloudrun({\n  region: 'us-east1',\n  serviceName: 'remotion-render-bds9aab',\n  composition: 'MyStill',\n  imageFormat: 'png',\n  serveUrl: 'https://storage.googleapis.com/remotioncloudrun-123asd321/sites/abcdefgh',\n});\n\nif (result.type === 'success') {\n  console.log(result.bucketName);\n  console.log(result.renderId);\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Remotion Compositions with `<Folder>` (TSX)\nDESCRIPTION: This example shows how to use the `<Folder>` component from Remotion to group `<Composition>` components in the Remotion Studio sidebar. Compositions nested within a `<Folder>` (like `CompInFolder`) will appear under that folder's name ('Visuals' in this case), while others (like `CompOutsideFolder`) remain at the top level. This helps organize projects with multiple compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/composition.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport React from \"react\";\nconst Component: React.FC = () => null;\n// ---cut---\nimport { Composition, Folder } from \"remotion\";\n\nexport const Video = () => {\n  return (\n    <>\n      <Folder name=\"Visuals\">\n        <Composition\n          id=\"CompInFolder\"\n          durationInFrames={100}\n          fps={30}\n          width={1080}\n          height={1080}\n          component={Component}\n        />\n      </Folder>\n      <Composition\n        id=\"CompOutsideFolder\"\n        durationInFrames={100}\n        fps={30}\n        width={1080}\n        height={1080}\n        component={Component}\n      />\n    </>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Paths in translatePath() (TypeScript)\nDESCRIPTION: This snippet demonstrates the error handling behavior of the `translatePath` function when provided with an invalid SVG path string. Calling `translatePath` with a non-path string like \"remotion\" will cause the function to throw an error indicating malformed path data. Requires the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/translate-path.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { translatePath } from \"@remotion/paths\";\n// ---cut---\ntranslatePath(\"remotion\", 10, 0); // Malformed path data: \"m\" ...\n```\n```\n\n----------------------------------------\n\nTITLE: Seeking to a Keyframe with @remotion/media-parser in TypeScript/React\nDESCRIPTION: Shows how to issue a seek request to a specific keyframe before a given time in seconds using a mediaParserController instance. Focuses on targeted seeking to synchronize decoding with keyframes as required by many video formats. Requires @remotion/media-parser, and expects a seek type and time as parameters. Returns the controller in a seeked state. The approach will only succeed if field constraints do not prohibit forward seeking.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/seeking.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {mediaParserController} from '@remotion/media-parser';\n\nconst controller = mediaParserController();\n\ncontroller._experimentalSeek({\n  type: 'keyframe-before-time',\n  timeInSeconds: 5,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Bun\nDESCRIPTION: Uses the Bun package manager command `bun i` (short for `bun install`) to download and install all the necessary project dependencies defined in the project's configuration files (like `package.json`). This step should be run after cloning the repository and installing Bun.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/setup.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun i\n```\n\n----------------------------------------\n\nTITLE: Querying Transition Duration with springTiming in Remotion (TypeScript)\nDESCRIPTION: This snippet demonstrates how to obtain the duration in frames for a transition using the springTiming utility, given a specific frame rate. It requires @remotion/transitions and is intended for scenarios where dynamic timing calculations are needed for transitions. The getDurationInFrames method is called with a fps argument, and the output is a numeric frame count (e.g., 23 for 30fps and damping=200).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/transitionseries.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { springTiming } from \\\"@remotion/transitions\\\";\n\nspringTiming({ config: { damping: 200 } }).getDurationInFrames({ fps: 30 }); // 23\n```\n\n----------------------------------------\n\nTITLE: Defining Progress Callback for Webpack Bundling - TypeScript\nDESCRIPTION: This snippet illustrates creating a callback function to track and log the progress of the Webpack bundling operation used by bundle(). It receives a progress value from 0 to 100 and outputs the current completion percentage to the console. The function is intended to be passed as the onProgress parameter to bundle(), and assumes a TypeScript environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/bundle.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst onProgress = (progress: number) => {\\n  console.log(`Webpack bundling progress: ${progress}%`);\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Remotion Composition with Minimal Arguments (Bash)\nDESCRIPTION: Shows the shortest Remotion CLI render command where the entry point, composition name, and output file are all omitted. Remotion attempts to guess the entry point (or uses a configured one) and then prompts the user to select the composition to render. The output is saved to a default location.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-17-remotion-3-3.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Setting Encoding Buffer Size using Remotion Config in TypeScript\nDESCRIPTION: Configures the encoding buffer size using `Config.setEncodingBufferSize()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the buffer size to '10000k' (10000 kilobits), affecting how the encoder manages bitrate fluctuations. This setting can be overridden by the `--buffer-size` command-line flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setEncodingBufferSize('10000k');\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Render Server in Development - Console\nDESCRIPTION: Launches the Express.js server in watch mode using npm scripts, allowing for live-reload feature during development. Assumes all dependencies are installed. Listens for HTTP requests on the configured port for rendering operations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-render-server/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Rive Instance via Ref in RemotionRiveCanvas (TSX)\nDESCRIPTION: This snippet illustrates how to attach a ref to the `<RemotionRiveCanvas>` component to gain access to the underlying Rive canvas instance and its properties. It uses `React.useRef` with the `RiveCanvasRef` type and `useEffect` to safely access methods like `getAnimationInstance()`, `getArtboard()`, `getRenderer()`, and `getCanvas()` once the component is mounted. It depends on `@remotion/rive` and React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/rive/remotionrivecanvas.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComp.tsx\"\nimport {RemotionRiveCanvas, RiveCanvasRef} from '@remotion/rive';\nimport {useEffect} from 'react';\n\nconst MyComp: React.FC = () => {\n  const canvasRef = React.useRef<RiveCanvasRef>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current) {\n      return;\n    }\n\n    canvasRef.current.getAnimationInstance(); // import(\"@rive-app/canvas-advanced\").LinearAnimationInstance\n    canvasRef.current.getArtboard(); // import(\"@rive-app/canvas-advanced\").Artboard\n    canvasRef.current.getRenderer(); // import(\"@rive-app/canvas-advanced\").CanvasRenderer\n    canvasRef.current.getCanvas(); // import(\"@rive-app/canvas-advanced\").RiveCanvas\n  }, [canvasRef]);\n\n  return (\n    <RemotionRiveCanvas\n      src=\"https://example.com/myAnimation.riv\"\n      ref={canvasRef}\n    />\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Static Volume for <Video> in Remotion (TSX)\nDESCRIPTION: This example shows how to set a fixed volume level for the Remotion `<Video>` component. The `volume` prop is set to a static number (0.5 in this case), which represents 50% of the original volume.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, staticFile, Video} from 'remotion';\n\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video volume={0.5} src={staticFile('video.webm')} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting FFmpeg Pixel Format in Remotion Config (TypeScript)\nDESCRIPTION: Controls the pixel format used by FFmpeg during encoding, set via the `Config` object in `remotion.config.ts`. Acceptable values include `yuv420p` (default), `yuv422p`, `yuv444p`, various 10-bit formats, and alpha channel formats like `yuva420p` (since v1.4) and `yuva444p10le` (since v2.1.7). Depends on the `Config` object from `@remotion/cli/config`. The `--pixel-format` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setPixelFormat('yuv420p');\n```\n\n----------------------------------------\n\nTITLE: Displaying Required Remotion Lambda User Policies (Bash)\nDESCRIPTION: Command to display the updated AWS IAM user policy JSON required for the installed (upgraded) Remotion Lambda version. This policy includes necessary permissions like `s3:PutBucketOwnershipControls` and `s3:PutBucketPublicAccessBlock`. The output should be copied and applied to the IAM user associated with Remotion Lambda.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/s3-public-access.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda policies user\n```\n\n----------------------------------------\n\nTITLE: Setting Number of GIF Loops in Remotion Config (TypeScript)\nDESCRIPTION: Specifies the number of times a GIF animation should loop using the `Config` object in `remotion.config.ts`. See linked <Options> documentation for details on possible values (e.g., 0 for infinite loop). Depends on the `Config` object from `@remotion/cli/config`. The `--number-of-gif-loops` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setNumberOfGifLoops(2);\n```\n\n----------------------------------------\n\nTITLE: Playing HLS Video in Remotion Preview using hls.js and TypeScript\nDESCRIPTION: This TypeScript React component (`HlsVideo`) demonstrates how to play an HLS video stream during Remotion previews using the `hls.js` library. It wraps the standard Remotion `<Video>` component and uses a `useEffect` hook to initialize `hls.js`, configure it, attach it to the video element's ref, and load the HLS source specified by the `src` prop. Note that this approach is intended for preview only and will not render audio correctly when creating an MP4 output.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/hls.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"HlsDemo.tsx\"\nimport Hls from 'hls.js';\nimport React, {useEffect, useRef} from 'react';\nimport {AbsoluteFill, RemotionVideoProps, Video} from 'remotion';\n\nconst HlsVideo: React.FC<RemotionVideoProps> = ({src}) => {\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  useEffect(() => {\n    if (!src) {\n      throw new Error('src is required');\n    }\n\n    const startFrom = 0;\n\n    const hls = new Hls({\n      startLevel: 4,\n      maxBufferLength: 5,\n      maxMaxBufferLength: 5,\n    });\n\n    hls.on(Hls.Events.MANIFEST_PARSED, () => {\n      hls.startLoad(startFrom);\n    });\n\n    hls.loadSource(src);\n    hls.attachMedia(videoRef.current!); // Use non-null assertion operator\n\n    return () => {\n      hls.destroy();\n    };\n  }, [src]);\n\n  return <Video ref={videoRef} src={src} />;\n};\n\nexport const HlsDemo: React.FC = () => {\n  return (\n    <AbsoluteFill>\n      <HlsVideo src=\"https://stream.mux.com/nqGuji1CJuoPoU3iprRRhiy3HXiQN0201HLyliOg44HOU.m3u8\" />\n    </AbsoluteFill>\n  );\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/google-fonts with pnpm - Bash\nDESCRIPTION: Installs the @remotion/google-fonts package using pnpm as the package manager. Ensure pnpm is installed and run this command at the root of your Node.js-based project to add the font loader integration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/google-fonts\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies using Bun (Bash)\nDESCRIPTION: Installs Remotion core, player, CLI, React, ReactDOM as main dependencies, and associated TypeScript types and the Vite React plugin as development dependencies using the Bun package manager and runtime.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun i remotion @remotion/player @remotion/cli react react-dom\nbun --dev @types/react @types/react-dom @vitejs/plugin-react\n```\n\n----------------------------------------\n\nTITLE: Example Remotion Render Script (Node.js/TypeScript)\nDESCRIPTION: A Node.js script using ES Modules (`.mjs`) that demonstrates how to bundle a Remotion project, select a specific composition, and render it to an MP4 video file using `@remotion/bundler` and `@remotion/renderer`. It includes recommended Chromium options for Linux environments.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {bundle} from '@remotion/bundler';\nimport {renderMedia, selectComposition} from '@remotion/renderer';\nimport {createRequire} from 'node:module';\n\nconst require = createRequire(import.meta.url);\n\nconst bundled = await bundle({\n  entryPoint: require.resolve('./src/index.ts'),\n  // If you have a webpack override in remotion.config.ts, pass it here as well.\n  webpackOverride: (config) => config,\n});\n\nconst inputProps = {};\n\nconst composition = await selectComposition({\n  serveUrl: bundled,\n  id: 'MyComp',\n  inputProps,\n});\n\nconsole.log('Starting to render composition');\n\nawait renderMedia({\n  codec: 'h264',\n  composition,\n  serveUrl: bundled,\n  outputLocation: `out/${composition.id}.mp4`,\n  chromiumOptions: {\n    enableMultiProcessOnLinux: true,\n  },\n  inputProps,\n});\n\nconsole.log(`Rendered composition ${composition.id}.`);\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Captions via NPM - Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the @remotion/captions package using npm with the --save-exact flag, ensuring that the exact specified version is installed. No additional dependencies are necessary beyond npm itself. The input is a terminal command, and successful execution will add the package to the project's dependencies. The flag ensures all Remotion-related packages remain at an aligned version, as required for compatibility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/captions/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/captions --save-exact\n```\n\n----------------------------------------\n\nTITLE: Setting x264 Preset in Remotion Config (TypeScript)\nDESCRIPTION: Sets the x264 encoding preset when the codec is set to `h264`, using the `Config` object in `remotion.config.ts`. Affects encoding speed and compression efficiency. Possible values range from `superfast` to `placebo`. The default is `medium`. Depends on the `Config` object from `@remotion/cli/config`. Available since Remotion v4.2.2. The `--x264-preset` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setX264Preset('fast');\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Packages (Shell)\nDESCRIPTION: Uses the Remotion CLI via `npx` to upgrade all Remotion-related packages in the project to their latest compatible versions. This helps keep the project up-to-date with Remotion features and fixes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Skia Template with npm (Bash)\nDESCRIPTION: This command uses `npx` (Node Package Execute) to run the `create-video` script, part of the Remotion CLI tools, to scaffold a new Remotion project pre-configured with the Skia template using the `--skia` flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/skia.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpx create-video --skia\n```\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Packages using npm Script\nDESCRIPTION: Provides the shell command to upgrade all Remotion packages within an existing project. Executing `npm run upgrade` triggers the 'upgrade' script, typically defined in the project's `package.json`, which handles fetching and installing the latest versions of Remotion dependencies. This ensures the project benefits from the newest features and bug fixes, like those introduced in version 1.1.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-11-remotion1-1.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```\nnpm run upgrade\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Browser Executable via Remotion CLI Flag\nDESCRIPTION: Command-line interface flag (`--browser-executable`) used with Remotion CLI commands. It allows overriding the configured browser path or specifying one if none is found, directing Remotion to use a specific Chrome/Chromium executable for rendering. See `/docs/cli` for details.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-03-03-remotion-1-5.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n--browser-executable\n```\n\n----------------------------------------\n\nTITLE: Declaring a Reusable Webpack Override Function for API Usage (TypeScript)\nDESCRIPTION: Exports a webpack override function as WebpackOverrideFn, allowing reuse across command line and Node.js API invocations. Meant to be stored in a separate file, it ensures consistency of Webpack overrides regardless of the configuration context. Requires @remotion/bundler as a dependency.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {WebpackOverrideFn} from '@remotion/bundler';\n\nexport const webpackOverride: WebpackOverrideFn = (currentConfiguration) => {\n  return {\n    ...currentConfiguration,\n    // Your override here\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Remotion Lambda User Policies via CLI\nDESCRIPTION: Executes the Remotion Lambda command-line interface (CLI) command to validate the currently configured AWS user policy. This helps confirm if the user credentials being used have the necessary permissions required by Remotion Lambda. Note that successful validation here does not guarantee the role policy is correct or that environment variables are correctly loaded when using Node.JS APIs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/permissions.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda policies validate\n```\n\n----------------------------------------\n\nTITLE: Generating CSS perspective() Transform in Remotion (TSX)\nDESCRIPTION: Shows how to use the `perspective` function from `@remotion/animation-utils` to create a CSS `perspective()` transform string. It takes a single numerical argument representing the perspective depth, defaulting to pixels.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { perspective } from \"@remotion/animation-utils\";\n\nconst transform = perspective(100);\n// => \"perspective(100px)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Copying Project Files in Dockerfile\nDESCRIPTION: Copies essential project files like package manifests, lock files, configuration files, source code (`src`), and optionally the `public` directory into the Docker image. These files are needed to build and run the Remotion application.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_3\n\nLANGUAGE: docker\nCODE:\n```\nCOPY package.json package*.json yarn.lock* pnpm-lock.yaml* bun.lockb* bun.lock* tsconfig.json* remotion.config.* ./\nCOPY src ./src\nCOPY public ./public\n```\n\n----------------------------------------\n\nTITLE: Using focusDefaultPropsPath to Focus a Field (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the `focusDefaultPropsPath` function from `@remotion/studio`. It calls the function with an object containing a `path` array `[\"array\", 0, \"subfield\"]`, which instructs the Remotion Studio to scroll to and focus on the 'subfield' of the first element (index 0) within the 'array' field in the default props editor.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/focus-default-props-path.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComp.tsx\"\nimport { focusDefaultPropsPath } from \"@remotion/studio\";\n\nfocusDefaultPropsPath({\n  path: [\"array\", 0, \"subfield\"],\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Fonts Helper Package - Bash\nDESCRIPTION: Installs the @remotion/fonts package using npm with the --save-exact flag to ensure an exact version match. This ensures compatibility across all Remotion-related packages as recommended. The command does not accept parameters and expects npm to be installed in the environment. Output is dependent on npm's standard logging.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/fonts/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/fonts --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/three using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@remotion/three` package. The `--save-exact` flag ensures that the exact version of the package is added to the project's dependencies in `package.json`, preventing potential issues caused by minor version differences between Remotion-related packages. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/three/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/three --save-exact\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Browser Path via Remotion Config File\nDESCRIPTION: Configuration function used in `remotion.config.ts` to provide a path to a custom Chromium-based browser executable. This allows users to bypass Remotion's automatic browser management for CLI operations if needed (e.g., unsupported platform, specific browser version requirement, or pre-existing installation).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetBrowserExecutable()\n```\n\n----------------------------------------\n\nTITLE: Setting Recording Folder Prefix - Remotion Recorder - TypeScript\nDESCRIPTION: Configures the file prefix within copy.ts corresponding to the composition ID in a Remotion project. This assignment is critical for directing scripts that move or process recording files into the correct subdirectory (public/[composition-id]). Requires updating the prefix constant at the start of copy.ts, with expected input as the string identifier of the desired composition. The output is that subsequent scripts use this value for sorting and moving files correctly.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/record/index.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst prefix = '<id-of-your-composition>';\n```\n\n----------------------------------------\n\nTITLE: Confirming a Cognito User - Bash\nDESCRIPTION: Confirms the user registration via AWS CLI, allowing the account to sign in. Requires the Cognito User Pool ID and the username used in the previous step. The command must be run with an authorized AWS CLI profile and adequate permissions for Cognito management.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws cognito-idp admin-confirm-sign-up \\\n  --user-pool-id YOUR_USER_POOL_ID \\\n  --username \"sample@test.com\"\n```\n\n----------------------------------------\n\nTITLE: Default Download Location for Chrome Headless Shell\nDESCRIPTION: Specifies the default directory structure within `node_modules` where Remotion downloads and installs Chrome Headless Shell. The `[platform]` placeholder represents the target operating system and architecture (e.g., `mac-arm64`, `mac-x64`, `linux64`, `linux-arm64`, `win64`). An executable (`chrome-headless-shell` or `chrome-headless-shell.exe`) is created within this path.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nnode_modules/.remotion/chrome-headless-shell/[platform]/chrome-headless-shell-[platform]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Correct FontFace src Syntax (With Quotes)\nDESCRIPTION: Shows the correct syntax for the CSS 'src' property within a @font-face rule, including required quotes around the URL and format values ('font.woff2' and 'woff2'). This syntax is necessary for compatibility with older Chrome versions and prevents the 'Source could not be parsed as a value list' error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/could-not-be-parsed-as-a-value-list.mdx#_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nsrc: url('font.woff2') format('woff2');\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotion Player for 'prevent-media-session' Mode (TSX)\nDESCRIPTION: This TSX snippet demonstrates configuring the Remotion `<Player>` component to use the `prevent-media-session` mode for `browserMediaControlsBehavior`. In this default mode, Remotion prevents the browser's default media key actions by mapping them to no-ops, avoiding issues where media tags might resume independently of the Player.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/media-keys.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst otherProps = {\n  compositionHeight: 720,\n  compositionWidth: 1280,\n  inputProps: {},\n  durationInFrames: 120,\n  fps: 30,\n  component: () => null,\n};\n// ---cut---\n\nimport {Player} from '@remotion/player';\n\nexport const MyComp: React.FC = () => {\n  return (\n    <Player\n      browserMediaControlsBehavior={{\n        mode: 'prevent-media-session',\n      }}\n      {...otherProps}\n    />\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Generating CSS matrix() Transform in Remotion (TSX)\nDESCRIPTION: Illustrates the use of the `matrix` function from `@remotion/animation-utils` to create a CSS `matrix()` transform string. It takes six numerical arguments representing the 2D transformation matrix.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { matrix } from \"@remotion/animation-utils\";\n\nconst transform = matrix(1, 0, 0, 1, 50, 50);\n// => \"matrix(1, 0, 0, 1, 50, 50)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind and Related Dependencies (yarn, Bash)\nDESCRIPTION: This yarn command will add the set of dependencies needed to set up TailwindCSS v2 support in a Remotion project, including the specific version of Tailwind, loader, and plugins. Run this if you use yarn instead of npm or pnpm.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-2.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add postcss-loader postcss postcss-preset-env tailwindcss@2 autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid SVG Path Input with Remotion Paths API (TypeScript)\nDESCRIPTION: This snippet shows how 'getTangentAtLength' throws an error when supplied with malformed SVG path data. The snippet demonstrates importing the function and calling it with an invalid path string ('remotion'). This will throw an exception such as 'Malformed path data', and should be handled appropriately. The example illustrates the importance of validating path input before using this API.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-tangent-at-length.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getTangentAtLength } from \"@remotion/paths\";\n// ---cut---\ngetTangentAtLength(\"remotion\", 50); // Error: Malformed path data: ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Angular Wrapper Component for React (TSX)\nDESCRIPTION: Defines an Angular standalone component (`PlayerViewWrapper`) that acts as a bridge to render a React component (`PlayerView`). It uses `@ViewChild` to get a container element, `@Input` to receive data (as an Angular Signal), and `@Output` to emit events. It leverages `react-dom/client`'s `createRoot` to render the React component within its template and manages the React component's lifecycle using `ngAfterViewInit` and `ngOnDestroy`. An effect (`effect()`) is used to re-render the React component when the input data signal changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  AfterViewInit,\n  Component,\n  effect,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  signal,\n  Signal,\n  ViewChild,\n  WritableSignal,\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {RouterOutlet} from '@angular/router';\nimport React from 'react';\nimport {createRoot, Root} from 'react-dom/client';\nimport {PlayerRef} from '@remotion/player';\nimport {myCompSchema, PlayerView} from './PlayerView';\nimport {z} from 'zod';\n\nconst rootDomID: string = 'reactCounterWrapperId';\n\n@Component({\n  selector: 'app-player-view',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet],\n  template: ` <div id=\"${rootDomID}\" #${rootDomID}></div>`,\n})\nexport class PlayerViewWrapper implements AfterViewInit, OnDestroy {\n  @ViewChild(rootDomID, {static: false}) containerRef: ElementRef | undefined;\n  @Input({required: true}) data: Signal<z.infer<typeof myCompSchema>> = signal({\n    titleText: 'Welcome to Remotion',\n    titleColor: '#000000',\n    logoColor1: '#91EAE4',\n    logoColor2: '#86A8E7',\n  });\n  @Output() onPaused = new EventEmitter<void>();\n  playerRef: WritableSignal<PlayerRef | undefined> = signal(undefined);\n\n  private root?: Root;\n\n  constructor() {\n    effect(() => {\n      this.render();\n    });\n  }\n\n  ngAfterViewInit() {\n    this.root = createRoot(this.getRootDomNode());\n    this.render();\n    this.playerRef()?.play();\n  }\n\n  ngOnDestroy(): void {\n    this.root?.unmount();\n  }\n\n  private getRootDomNode() {\n    if (!this.containerRef || !this.containerRef.nativeElement) {\n      throw new Error('Cannot get root element. This should not happen.');\n    }\n    return this.containerRef.nativeElement;\n  }\n\n  protected render() {\n    if (!this.containerRef || !this.containerRef.nativeElement) {\n      return;\n    }\n\n    this.root?.render(\n      <PlayerView\n        playerRefInstance={this.playerRef}\n        data={this.data()}\n        onPaused={() => this.onPaused.emit()}\n      />,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/gif using npm (Bash)\nDESCRIPTION: This command installs the `@remotion/gif` package using the Node Package Manager (npm). The `--save-exact` flag is crucial as it ensures that the exact version of the package is installed and recorded in the `package.json` file, preventing potential issues caused by minor version differences between Remotion packages. This requires Node.js and npm to be installed on the system.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/gif/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/gif --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn in Dockerfile\nDESCRIPTION: Enables Corepack and installs project dependencies using Yarn. This is an alternative to `RUN npm i` for projects using Yarn. Requires the `packageManager` field set in `package.json`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_6\n\nLANGUAGE: docker\nCODE:\n```\nRUN corepack enable\nRUN yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera Position and Properties in R3F/Remotion (TypeScript)\nDESCRIPTION: This code uses the `useThree` hook from `@react-three/fiber` to get a reference to the 3D scene's camera. Within a `useEffect` hook, it sets the camera's initial position (placing it back along the Z-axis), configures its near and far clipping planes, and ensures it points towards the origin (0, 0, 0). This setup runs once when the component mounts, establishing the initial view.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/spline.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst camera = useThree((state) => state.camera);\n\nuseEffect(() => {\n  camera.position.set(0, 0, -400);\n  camera.near = 0.2;\n  camera.far = 1000;\n  camera.lookAt(0, 0, 0);\n}, [camera]);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Remotion Project using Yarn\nDESCRIPTION: Shell command to bootstrap a new Remotion video project using the Yarn package manager. It sets up the necessary file structure and installs initial dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-03-03-remotion-1-5.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn create video\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/lottie via yarn - Bash\nDESCRIPTION: This snippet provides the command to add the @remotion/lottie package to a Remotion project using yarn. The package enables integration of Lottie animation assets into Remotion videos. yarn must be installed and the command run within an initialized project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-08-10-remotion-3-2.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/lottie\n```\n\n----------------------------------------\n\nTITLE: Configuring Remotionb for Bun Execution in package.json (JSON)\nDESCRIPTION: This snippet sets up a npm script in package.json to use the Bun-compatible version of the Remotion CLI by specifying 'remotionb render'. This allows leveraging Bun's runtime for Remotion CLI operations. Prerequisite: remotionb should be installed and available; Output: CLI render executed under Bun when running the script.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/cli.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"scripts\\\": {\\n    \\\"render\\\": \\\"remotionb render\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Translating SVG Path Horizontally with translatePath() (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `translatePath` function from `@remotion/paths` to translate an SVG path string horizontally. It takes the original path, a horizontal offset (x=10), and a vertical offset (y=0) as arguments. The resulting translated path string is then logged to the console. Requires the `@remotion/paths` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/translate-path.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title='translate-x.ts'\nimport { translatePath } from \"@remotion/paths\";\n\nconst translatedPath = translatePath(\"M 50 50 L 150 50\", 10, 0);\nconsole.log(translatedPath); // \"M 50 50 L 150 50\"\n```\n```\n\n----------------------------------------\n\nTITLE: Generating CSS rotateY() Transform in Remotion (TSX)\nDESCRIPTION: Demonstrates using the `rotateY` function from `@remotion/animation-utils` to create a CSS `rotateY()` transform string. It accepts the angle as a number (degrees), a string with unit, or a number and an optional unit string.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { rotateY } from \"@remotion/animation-utils\";\n\nconst transform = rotateY(45);\n// => \"rotateY(45deg)\"\n\nconst transform2 = rotateY(\"45deg\");\n// => \"rotateY(45deg)\"\n\nconst transform3 = rotateY(1, \"rad\");\n// => \"rotateY(1rad)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Running Repository-Wide Style Checks using pnpm (Bash)\nDESCRIPTION: This command, intended to be run from the root directory of the Remotion repository, executes the 'stylecheck' script defined in the root 'package.json' using pnpm. This script typically aggregates formatting (Prettier) and linting (ESLint) checks across the entire codebase to verify that all code conforms to the project's standards and will pass continuous integration checks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/formatting.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run stylecheck\n```\n\n----------------------------------------\n\nTITLE: Checking Custom Lambda Layer Size using Shell Script\nDESCRIPTION: This shell command executes the `size.sh` script, likely located in the `remotion-dev/lambda-binaries` repository, to calculate and display the size of the folders containing the custom layer components. This helps ensure the total extracted size does not exceed the 250MB AWS Lambda layer limit.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/custom-layers.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh size.sh\n```\n\n----------------------------------------\n\nTITLE: Handling ENAMETOOLONG Error Output from FFmpeg Command - Plaintext\nDESCRIPTION: This snippet displays the actual error output users may encounter when Remotion's FFmpeg integration fails due to a command exceeding the Windows command-line length (8192 characters). It serves as a real-world example to help users recognize this specific failure scenario. No coding dependencies are required; it is a shell error output sample. Input: any command execution exceeding limit; Output: failure message.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/enametoolong.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCommand failed with ENAMETOOLONG: ffmpeg ...\n```\n\n----------------------------------------\n\nTITLE: Uploading Container Image to Artifact Registry with Environment Tag - Bash\nDESCRIPTION: This snippet demonstrates how to upload a built container image for Remotion to the appropriate Google Cloud Artifact Registry using a Node.js upload script. The operation varies depending on whether the 'development' or 'production' environment variable is set. Dependencies include Node.js, Google Cloud CLI, and the configured GCP Project. The environment variable ARTIFACT_REGISTRY_ENV switches between repository folders, as referenced in the upload logic.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/container/readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nARTIFACT_REGISTRY_ENV=development node submit.mjs\n```\n\nLANGUAGE: bash\nCODE:\n```\nARTIFACT_REGISTRY_ENV=production node submit.mjs\n```\n\n----------------------------------------\n\nTITLE: Listing Remotion Lambda Function ARNs with Remotion CLI (Shell)\nDESCRIPTION: Executes the Remotion CLI command to list the Amazon Resource Names (ARNs) of deployed Remotion Lambda functions in the configured AWS account and region. The `-q` flag suggests a concise output, likely just the ARNs, which is useful for providing specific function details when requesting quota increases from AWS. Requires the Remotion CLI, Node.js, and configured AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/limits.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion lambda functions ls -q\n```\n\n----------------------------------------\n\nTITLE: Adjusting Audio Playback Speed with playbackRate in Remotion (TSX)\nDESCRIPTION: Demonstrates how to control the speed of the audio playback using the `playbackRate` prop. A value of `1` is normal speed, `< 1` is slower, and `> 1` is faster. This example sets the playback rate to `2`, making the audio play twice as fast.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/audio.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Audio, staticFile} from 'remotion';\n\nexport const MyVideo = () => {\n  return (\n    <AbsoluteFill>\n      <Audio src={staticFile('audio.mp3')} playbackRate={2} />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom DotEnv File Location in Remotion Config (TypeScript)\nDESCRIPTION: Specifies a custom path (absolute or relative to CWD) for the `.env` file using the `Config` object in `remotion.config.ts`. This allows loading environment variables from a non-standard location. Depends on the `Config` object from `@remotion/cli/config`. The `--env-file` command line flag overrides this setting.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setDotEnvLocation('.my-env');\n```\n\n----------------------------------------\n\nTITLE: Migrating from Player to IframePlayer in Remotion (diff, Usage Example)\nDESCRIPTION: This 'diff' format snippet outlines how to switch existing code from using the standard Remotion Player to a custom IframePlayer component. It shows the changes needed in both the import statement and component usage. Developers are instructed to import IframePlayer from its new file path and use it as a direct replacement for <Player>, helping to encapsulate player styles.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/snippets/player-in-iframe.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { Player } from '@remotion/player';\\n+ import { IframePlayer } from 'path/to/IframePlayer';\\n\\n- <Player {/* ... */} />\\n+ <IframePlayer {/* ... */} />\n```\n\n----------------------------------------\n\nTITLE: Re-encoding a Video for Frame Extraction Efficiency (FFmpeg, Shell)\nDESCRIPTION: This shell command re-encodes a video file using FFmpeg, which can be necessary when getCanExtractFramesFast indicates that a video does not support fast frame extraction. Requires the FFmpeg command-line utility installed and accessible. The inputvideo.mp4 file is transcoded into outputvideo.mp4, potentially improving frame extraction performance for Remotion rendering workflows; all video and audio streams are re-encoded according to FFmpeg defaults.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/get-can-extract-frames-fast.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nffmpeg -i inputvideo.mp4 outputvideo.mp4\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/licensing via npm\nDESCRIPTION: This command installs the '@remotion/licensing' package using the Node Package Manager (npm). This package is required for tracking Remotion usage for company license holders and is an automatic dependency for '@remotion/webcodecs'. It allows reporting usage points and checking current usage programmatically.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/licensing/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/licensing\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion WebCodecs using npm (Bash)\nDESCRIPTION: This Bash command installs the @remotion/webcodecs package with an exact version match to ensure compatibility among all remotion and related packages. By using the --save-exact flag, the package.json will record the precise version specified, avoiding issues from unwanted upgrades. It requires Node.js and npm to be installed prior to usage.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/webcodecs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/webcodecs --save-exact\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Skia Template with pnpm (Bash)\nDESCRIPTION: This command uses `pnpm create` to run the `create-video` initializer for Remotion, creating a new project directory with the Skia template structure by passing the `--skia` option.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/skia.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npnpm create video --skia\n```\n```\n\n----------------------------------------\n\nTITLE: NPM Package Scripts for Lambda Management - JSON\nDESCRIPTION: This code block shows the scripts section of a package.json file, which defines commands for deploying, deleting, and testing Lambda functions using ts-node. To run these scripts, Node.js, npm, and ts-node must be available. Key parameters include deploy-fn for deployment, delete-fn for removal, and render-fn for local execution. Outputs, logs, or errors are based on each script's execution.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ...\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"deploy-fn\": \"ts-node src/infra/deploy-lambda-fn.ts\",\n    \"delete-fn\": \"ts-node src/infra/delete-lambda-fn.ts\",\n    \"render-fn\": \"ts-node src/infra/local-render-fn.ts\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using npm (Bash)\nDESCRIPTION: Installs or updates project dependencies listed in `package.json` using the npm package manager. This step is typically run after manually editing version numbers in `package.json` during a manual upgrade.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/upgrading.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Invoking the Remotion CLI via npx (Shell)\nDESCRIPTION: This command executes the Remotion Command Line Interface (CLI) using `npx`. It's used for various tasks like rendering videos, upgrading projects, etc. The surrounding text highlights that Fig provides autocomplete suggestions for this command and its subcommands, enhancing developer productivity in the terminal. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-10-26-remotion-2-5.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/enable-scss Package Using npm - Bash\nDESCRIPTION: This Bash command demonstrates how to install the @remotion/enable-scss package with an exact version using npm. It is required to enable SCSS stylesheet support in Remotion projects. The command should be run at the root of your project, and users are advised to align all Remotion package versions exactly (no caret ^ version specifiers) for compatibility.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/enable-scss/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/enable-scss --save-exact\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Package to Latest Version - Console\nDESCRIPTION: This command upgrades the Remotion framework and its CLI to the latest version available on npm, ensuring access to new features and bug fixes. Run this periodically in your Remotion project directory, and review the changelog for breaking changes before use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-azure/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Deploying a New AWS Lambda Function via Remotion CLI (Bash)\nDESCRIPTION: This snippet shows how to deploy a new Remotion Lambda function through the Remotion CLI. Use the 'deploy' command to add a fresh function for video rendering tasks within your AWS account. Ensure that you have AWS access configured and the Remotion CLI installed, and specify any custom settings as required for your function. The command will output deployment details and make the function immediately available for rendering jobs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/faq.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda functions deploy\n```\n\n----------------------------------------\n\nTITLE: Muting a <Video> Component in Remotion (TSX)\nDESCRIPTION: This code snippet shows how to mute the audio of a video using the `muted` prop in the Remotion `<Video>` component. Adding the `muted` prop (set implicitly to true) silences the video's audio track, which can improve rendering performance if the audio isn't needed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/video.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {AbsoluteFill, Video} from 'remotion';\n// ---cut---\nexport const MyComposition = () => {\n  return (\n    <AbsoluteFill>\n      <Video muted src=\"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\" />\n    </AbsoluteFill>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Studio Player Buffering UI Delay using Remotion Config in TypeScript\nDESCRIPTION: Configures the delay in milliseconds before the Studio Player displays a buffering indicator using `Config.setBufferStateDelayInMilliseconds()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the delay to 0 milliseconds, making the indicator appear immediately upon buffering (default is 300ms).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_30\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setBufferStateDelayInMilliseconds(0);\n```\n\n----------------------------------------\n\nTITLE: Checking AWS Lambda Quotas with Remotion CLI\nDESCRIPTION: Demonstrates using the Remotion CLI command `npx remotion lambda quotas` to check the current AWS Lambda concurrency limits for the associated AWS account and region. Executing this command requires the Remotion CLI to be installed and configured with appropriate AWS permissions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/rate-limit.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda quotas\n```\n\n----------------------------------------\n\nTITLE: Generating CSS translate() Transform in Remotion (TSX)\nDESCRIPTION: Illustrates using the `translate` function from `@remotion/animation-utils` to generate a CSS `translate()` transform string. It supports various argument combinations for X and Y translation, including numbers (defaulting to px), strings with units, and number/unit pairs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animation-utils/make-transform.mdx#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash\nimport { translate } from \"@remotion/animation-utils\";\n\nconst transform = translate(10);\n// => \"translate(10px)\"\n\nconst transform2 = translate(\"12rem\");\n// => \"translate(12rem)\"\n\nconst transform3 = translate(10, 20);\n// => \"translate(10px, 20px)\"\n\nconst transform4 = translate(10, \"%\");\n// => \"translate(10%)\"\n\nconst transform5 = translate(0, \"%\", 10, \"%\");\n// => \"translate(0%, 10%)\"\n\nconst transform6 = translate(\"10px\", \"30%\");\n// => \"translate(10px, 20%)\"\n```\n```\n\n----------------------------------------\n\nTITLE: Translating SVG Path to Origin using resetPath in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `resetPath` function from the `@remotion/paths` package. It imports the function and applies it to an example SVG path string ('M 10 10 L 20 20'), resulting in a new path string ('M 0 0 L 10 10') where the path's bounding box starts at the origin (0,0). The function requires a valid SVG path string as input and will throw an error if the path is invalid. Dependency: `@remotion/paths`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/reset-path.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { resetPath } from \"@remotion/paths\";\n\nconst newPath = resetPath(\"M 10 10 L 20 20\"); // M 0 0 L 10 10\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Binaries Directory using Remotion Config in TypeScript\nDESCRIPTION: Specifies a custom directory path where Remotion should look for FFmpeg and FFprobe binaries using `Config.setBinariesDirectory()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. This example sets the path to '/path/to/custom/directory'. Useful if the binaries are not in the system's PATH.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_31\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setBinariesDirectory('/path/to/custom/directory');\n```\n\n----------------------------------------\n\nTITLE: Defining a Top-25 Google Fonts Array for Bundle Optimization - TypeScript\nDESCRIPTION: This code snippet demonstrates creating a custom array, 'top25', which contains only the most popular Google Fonts to minimize bundle size in Remotion projects. Each font is represented by an object with a 'family' string and a 'load' function utilizing dynamic import and TypeScript type assertions. Dependencies include '@remotion/google-fonts' and knowledge of the TypeScript import system. The exported array is intended for use in font loaders or selectors, ensuring only the defined fonts are selectable at runtime.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/font-picker.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {GoogleFont} from '@remotion/google-fonts';\n\nexport const top25 = [\n  {\n    family: 'Inter',\n    load: () => import('@remotion/google-fonts/Inter') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Kanit',\n    load: () => import('@remotion/google-fonts/Kanit') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Lato',\n    load: () => import('@remotion/google-fonts/Lato') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Lora',\n    load: () => import('@remotion/google-fonts/Lora') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Merriweather',\n    load: () => import('@remotion/google-fonts/Merriweather') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Montserrat',\n    load: () => import('@remotion/google-fonts/Montserrat') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans',\n    load: () => import('@remotion/google-fonts/NotoSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans JP',\n    load: () => import('@remotion/google-fonts/NotoSansJP') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans KR',\n    load: () => import('@remotion/google-fonts/NotoSansKR') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Noto Sans TC',\n    load: () => import('@remotion/google-fonts/NotoSansTC') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Nunito',\n    load: () => import('@remotion/google-fonts/Nunito') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Nunito Sans',\n    load: () => import('@remotion/google-fonts/NunitoSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Open Sans',\n    load: () => import('@remotion/google-fonts/OpenSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Oswald',\n    load: () => import('@remotion/google-fonts/Oswald') as Promise<GoogleFont>,\n  },\n  {\n    family: 'PT Sans',\n    load: () => import('@remotion/google-fonts/PTSans') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Playfair Display',\n    load: () => import('@remotion/google-fonts/PlayfairDisplay') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Poppins',\n    load: () => import('@remotion/google-fonts/Poppins') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Raleway',\n    load: () => import('@remotion/google-fonts/Raleway') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Roboto',\n    load: () => import('@remotion/google-fonts/Roboto') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Roboto Condensed',\n    load: () => import('@remotion/google-fonts/RobotoCondensed') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Roboto Mono',\n    load: () => import('@remotion/google-fonts/RobotoMono') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Roboto Slab',\n    load: () => import('@remotion/google-fonts/RobotoSlab') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Rubik',\n    load: () => import('@remotion/google-fonts/Rubik') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Ubuntu',\n    load: () => import('@remotion/google-fonts/Ubuntu') as Promise<GoogleFont>,\n  },\n  {\n    family: 'Work Sans',\n    load: () => import('@remotion/google-fonts/WorkSans') as Promise<GoogleFont>,\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Example Remotion Timeout Error for Pexels Video Component\nDESCRIPTION: Illustrates a common Remotion error message indicating a `delayRender()` timeout when loading a video directly from Pexels using the `<Video>` component. This typically occurs because Pexels throttles frequent requests, common during distributed rendering like on Remotion Lambda, exceeding Remotion's default timeout period.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/pexels.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nA delayRender() 'Loading <Video> duration with src=\"https://videos.pexels.com/video-files/5182920/5182920-hd_720_1280_25fps.mp4\"' was called but not cleared after 28000ms.\n```\n\n----------------------------------------\n\nTITLE: Overriding Webpack Config for Babel in remotion.config.ts (TypeScript)\nDESCRIPTION: Illustrates how to replace the default ESBuild loader with the legacy Babel loader globally for a Remotion project. This is done by modifying the `remotion.config.ts` file, importing `Config` from `@remotion/cli/config` and `replaceLoadersWithBabel` from `@remotion/babel-loader`, and then calling `Config.overrideWebpackConfig` with the provided helper function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/legacy-babel-loader.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\n// ---cut---\nimport { replaceLoadersWithBabel } from \"@remotion/babel-loader\";\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return replaceLoadersWithBabel(currentConfiguration);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Animated Emoji Package with npm (Bash)\nDESCRIPTION: This Bash snippet installs the @remotion/animated-emoji package using npm with the --save-exact flag to ensure version consistency. It is required that all remotion and @remotion/* packages are aligned to the same version without the ^ character for compatibility. The exact version should be used to avoid dependency conflicts in Remotion projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/animated-emoji/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/animated-emoji --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/paths via pnpm (Node.js Bash)\nDESCRIPTION: This bash snippet shows how to install the @remotion/paths package using pnpm, which is an alternative fast, disk space-efficient package manager for Node.js projects. The command will fetch and link the SVG path utilities in the local project context. The main input is the package name; the result is a pnpm-managed installation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/paths\n```\n\n----------------------------------------\n\nTITLE: Changing Timeout Per delayRender Call in Remotion (TypeScript/React)\nDESCRIPTION: Shows how to customize the timeout for a specific delayRender invocation by passing timeoutInMilliseconds. This overrides the global timeout just for this async block. timeoutInMilliseconds is specified in ms. Also configurable via props on certain media components. Needs Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/delay-render.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { delayRender } from \"remotion\";\n\ndelayRender(\"Loading asset...\", {\n  timeoutInMilliseconds: 7000,\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Config after Enabling Skia (TypeScript)\nDESCRIPTION: Illustrates how to apply custom Webpack modifications in addition to the changes made by `enableSkia`. It uses the spread operator (`...`) within the `Config.overrideWebpackConfig` callback in `remotion.config.ts` to pass the existing configuration to `enableSkia` while allowing for further custom rules or settings to be added. Dependencies include `@remotion/cli` and `@remotion/skia`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/skia/enable-skia.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Config } from \"@remotion/cli/config\";\nimport { enableSkia } from \"@remotion/skia/enable\";\n\nConfig.overrideWebpackConfig((currentConfiguration) => {\n  return enableSkia({\n    ...currentConfiguration,\n\n    // Make other changes\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying AWS CDK Stack using Bash\nDESCRIPTION: Runs the 'cdk deploy' command in the 'apigw-sqs-app' directory to deploy the application stack defined by AWS Cloud Development Kit. Requires AWS CLI, CDK installed, and credentials configured. The command provisions all resources defined in the stack; no parameters beyond environment setup are needed. Output will include progress indicators and prompts for deployment approval.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncdk deploy\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.sin Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.sin`. This easing function uses a sinusoidal curve, typically resulting in an ease-in effect based on the sine wave.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nstatic sin(t): number\n```\n\n----------------------------------------\n\nTITLE: Defining exact height ResizeOperation in TypeScript\nDESCRIPTION: Shows how to define a `ResizeOperation` object for use with `convertMedia`. This configuration scales a video to have the exact specified `height` (480 pixels), adjusting the width to maintain aspect ratio. It requires the `ResizeOperation` type from `@remotion/webcodecs`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resizing.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ResizeOperation} from '@remotion/webcodecs';\n\nconst resize: ResizeOperation = {\n  mode: 'height',\n  height: 480,\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion for Issue Resolution - Console\nDESCRIPTION: Repeated usage of \\\"npx remotion upgrade\\\" to emphasize its importance for resolving issues before filing bug reports. Functionally identical to the other Remotion upgrade snippet. Ensures that the latest updates and fixes are applied, which may resolve bugs encountered during development or rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-music-visualization/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/lottie with pnpm (Bash)\nDESCRIPTION: Installs the `@remotion/lottie` package and its peer dependency `lottie-web` using the pnpm package manager. This command should be run in the terminal within a Node.js project directory where pnpm is configured.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/lottie lottie-web\n```\n\n----------------------------------------\n\nTITLE: Checking Render Progress via API using curl in Bash\nDESCRIPTION: Uses curl to send a GET request to the API Gateway endpoint to check the status of a specific video render job. Requires the 'renderId' in the path, the 'bucketName' as a query parameter, and a valid bearer token in the Authorization header.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'https://xxxxxxxx.execute-api.ap-southeast-2.amazonaws.com/dev/render/i9xnfrgXXXX?bucketName=remotionlambda-apsoutheast2-xxxxxxxx' \\\n--header 'Authorization: Bearer eyJraWQiOiJMVVVVZGtIQ1JXWEEXXXXXXXXXXXvaQ'\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Dependencies in Node.js (Console)\nDESCRIPTION: Updates Remotion packages to their latest versions to ensure compatibility and access to new features. Requires project setup with Remotion installed. \"npx remotion upgrade\" fetches and applies new versions. Input: none. Output: updated package versions in project dependencies. Limitations: may introduce breaking changes in major upgrades.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-still/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase Storage Security Rules in JavaScript\nDESCRIPTION: This JavaScript-like snippet defines security rules for a Firebase Storage bucket. It grants public read and write access to all files within the 'remotion-gtts' directory. This configuration is part of the Firebase setup process, intended for development, with a recommendation for stricter rules in production.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-google/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nrules_version = '2';\nservice firebase.storage {\n  match /b/{bucket}/o {\n    match /remotion-gtts/{allPaths=**} {\n      allow read, write: if true;\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Embedding Video with Alpha Channel in Remotion using TypeScript\nDESCRIPTION: This snippet demonstrates how to embed a video file that includes an alpha channel for transparency within a Remotion component. It utilizes the `<OffthreadVideo>` component from the 'remotion' library, referencing the video source using `staticFile` and enabling transparency rendering by setting the `transparent` prop to true.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/videos/transparency.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {OffthreadVideo, staticFile} from 'remotion';\n\nexport const MyComp: React.FC = () => {\n  return <OffthreadVideo src={staticFile('transparent.webm')} transparent />;\n};\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion via CLI - Shell\nDESCRIPTION: Executes 'npx remotion upgrade' to update the Remotion framework to the latest version. This command checks for updates and applies them, ensuring access to the latest features and bug fixes. Requires internet connectivity and an npm-based project setup. Input: None. Output: Remotion dependencies brought up to date.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-stargazer/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Packages Using CLI - Shell\nDESCRIPTION: This snippet demonstrates how to upgrade all Remotion-related packages using the CLI command npx remotion upgrade. It requires Node.js and npm (or yarn/pnpm) to be installed. The command auto-detects the package manager but can be forced using the --package-manager flag, and allows specifying a target version via --version. It forwards additional arguments to the detected or specified package manager. The command expects no input and produces upgraded package versions as an output, updating relevant files like package.json.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/upgrade.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Skipping AWS Credentials Check in TypeScript\nDESCRIPTION: TypeScript code showing how to bypass Remotion's default AWS credential validation by setting the `REMOTION_SKIP_AWS_CREDENTIALS_CHECK` environment variable. This is useful when authenticating via alternative methods, such as EC2 instance metadata, where standard credential environment variables might not be present. While this prevents Remotion's initial check, AWS SDK errors may still occur later if authentication ultimately fails.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/authentication.mdx#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nprocess.env.REMOTION_SKIP_AWS_CREDENTIALS_CHECK = \"1\";\n```\n\n----------------------------------------\n\nTITLE: Setting Chromium OpenGL Renderer via Remotion Config using TypeScript\nDESCRIPTION: This snippet demonstrates how to specify the OpenGL implementation (e.g., 'swiftshader') for Chromium rendering within Remotion using the configuration file method `Config.setChromiumOpenGlRenderer()`. Requires importing `Config` from `@remotion/cli/config`. Prior to v3.3.39, the method was `Config.Puppeteer.setChromiumOpenGlRenderer()`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/chromium-flags.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\n// ---cut---\n\nConfig.setChromiumOpenGlRenderer('swiftshader');\n```\n\n----------------------------------------\n\nTITLE: Defining Wipe Direction Type in TypeScript\nDESCRIPTION: This snippet shows the TypeScript type definition for the `direction` option used in the `wipe()` presentation. It demonstrates how to declare a variable of type `WipeDirection` and assign one of its valid string literal values, specifying the direction from which the wipe transition originates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/wipe.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WipeDirection } from \"@remotion/transitions/wipe\";\n\nconst wipeDirection: WipeDirection = \"from-left\";\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/mcp with npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@remotion/mcp` library. The `--save-exact` flag ensures that the exact version specified is recorded in the `package.json` file, which is recommended for Remotion projects to maintain version consistency across related packages (`remotion` and `@remotion/*`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/mcp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/mcp --save-exact\n```\n\n----------------------------------------\n\nTITLE: Programmatically Ensuring FFprobe Availability (JavaScript/TypeScript)\nDESCRIPTION: This function, provided by the `@remotion/renderer` package, programmatically ensures the FFprobe binary is available, downloading it if needed. This is useful for automated setups and complements the `ensureFfmpeg()` function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ffmpeg.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nensureFfprobe()\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Skia with npm (Bash)\nDESCRIPTION: This snippet demonstrates how to install the @remotion/skia package using npm with the --save-exact flag, ensuring that the installed version matches exactly. The command must be run in the terminal within the desired project directory. Dependencies include npm and Node.js, and it is recommended to align all remotion-related packages to the same version, excluding the caret (^) character from package.json version fields. No specific inputs required; outputs are the installation of the @remotion/skia package in the node_modules directory and an update to the project's package.json.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/skia/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @remotion/skia --save-exact\n```\n\n----------------------------------------\n\nTITLE: Initiating Video Render via API using curl in Bash\nDESCRIPTION: Uses curl to send a POST request to the API Gateway endpoint to start a new video rendering job. Requires a valid bearer token in the Authorization header.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://xxxxxxxx.execute-api.ap-southeast-2.amazonaws.com/dev/render' \\\n--header 'Authorization: Bearer eyJraWQiOiJMVVVVZGtIQ1JXWEEyWEEXXXXXXXXXjMKR1t5S-oA'\n```\n\n----------------------------------------\n\nTITLE: Splitting Video Files with FFmpeg in Bun Script (TypeScript)\nDESCRIPTION: This TypeScript script automates the process of splitting long recording files into two separate video files at a specified trim point. It uses Bun for process execution, Node.js modules for file operations, and relies on project-specific prefix constants. By parsing command-line arguments, it identifies the video segment to split, duplicates and trims associated files using FFmpeg, and cleans up captions. Required dependencies include Bun, FFmpeg, and configuration for file prefixes. Inputs are the composition ID, timestamp, and trim point in seconds; outputs are newly split video files and removed captions. Run this script from the command line with three arguments. Limitations include destructive behavior (original files modified), so changes should be committed beforehand.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/cutting-clips.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { $ } from \"bun\";\nimport { existsSync, readdirSync, renameSync, rmSync } from \"fs\";\nimport { join } from \"path\";\nimport {\n  ALTERNATIVE1_PREFIX,\n  ALTERNATIVE2_PREFIX,\n  CAPTIONS_PREFIX,\n  DISPLAY_PREFIX,\n  WEBCAM_PREFIX,\n} from \"./config/cameras\";\n\nconst compositionId = process.argv[2];\nif (!compositionId) {\n  throw new Error(\"Expected composition ID as first argument\");\n}\n\nconsole.log(\"Composition ID\", compositionId);\nconst timestamp = process.argv[3];\nif (!timestamp) {\n  throw new Error(\"Expected timestamp as second argument\");\n}\n\nconst trimPoint = process.argv[4];\nif (!trimPoint) {\n  throw new Error(\"Expected trim point as third argument\");\n}\n\nconsole.log(\"Timestamp\", timestamp);\nconsole.log(\"Trim point\", trimPoint);\n\nconst folder = join(\"public\", compositionId);\nconst files = readdirSync(folder);\n\nconst webcamFile = files.find((f) => f.startsWith(`webcam${timestamp}`));\n\nif (!webcamFile) {\n  throw new Error(\n    `Expected file ${compositionId}/webcam${timestamp}.* to exist`,\n  );\n}\n\nconst webcamTimestamp = webcamFile.match(/\\d{1,14}/g)?.[0] ?? null;\n\nif (!webcamTimestamp) {\n  throw new Error(\n    `Expected file ${compositionId}/webcam${timestamp}.* to have timestamp ${timestamp}`,\n  );\n}\n\nconst allFilesWithTimestamp = files.filter((f) => {\n  return (\n    f.startsWith(`${WEBCAM_PREFIX}${timestamp}`) ||\n    f.startsWith(`${DISPLAY_PREFIX}${timestamp}`) ||\n    f.startsWith(`${ALTERNATIVE1_PREFIX}${timestamp}.mp4`) ||\n    f.startsWith(`${ALTERNATIVE2_PREFIX}${timestamp}.mp4`)\n  );\n});\n\nconst allTimestamps = [\n  ...new Set(\n    files.map((f) => {\n      return f.match(/\\d{1,14}/g)?.[0] ?? null;\n    }),\n  ),\n];\n\nconst timestampBefore = Number(\n  allTimestamps.filter((t) => Number(t) < Number(webcamTimestamp) ?? null) ??\n    \"0\",\n);\n\nconst newTimestamp =\n  (Number(webcamTimestamp) - timestampBefore) / 2 + timestampBefore;\n\nfor (const file of allFilesWithTimestamp) {\n  const newFile = file.replace(\n    new RegExp(`${webcamTimestamp}`),\n    String(newTimestamp),\n  );\n\n  // Create video before trim point\n  await $`bunx ffmpeg -i ${file} -t ${trimPoint} -c:v copy -c:a copy ${newFile}`.cwd(\n    folder,\n  );\n\n  // Create video after trim point\n  const temporaryFile = `temp-${newFile}`;\n  await $`bunx ffmpeg -ss ${trimPoint} -accurate_seek -i ${file} ${temporaryFile}`.cwd(\n    folder,\n  );\n  rmSync(join(folder, file));\n  renameSync(join(folder, temporaryFile), join(folder, file));\n}\n\n// Remove the captions file\nconst captionsFile = join(folder, `${CAPTIONS_PREFIX}${timestamp}.json`);\nif (existsSync(captionsFile)) {\n  rmSync(captionsFile);\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Static File Changes with Remotion Studio API (TypeScript)\nDESCRIPTION: This snippet shows how to use the watchStaticFile function to observe changes in a static file located in the /public directory within a Remotion Studio environment. It imports the required methods from the remotion package and sets up a callback to handle file additions, modifications, or deletions. The watchStaticFile function takes the filename and a callback as arguments, returning an object with a cancel method to stop watching for changes. The callback receives a StaticFile object on updates or null if the file is deleted. Note: This API is only functional in Remotion Studio, not in the Remotion Player, and requires version 4.0.61 or later.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/watch-static-file.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StaticFile, watchStaticFile } from \\\"remotion\\\";\n\n// Watch for changes in a specific static file\nconst { cancel } = watchStaticFile(\n  \\\"your-static-file.jpg\\\",\n  (newData: StaticFile | null) => {\n    if (newData) {\n      console.log(`File ${newData.name} has been added or modified.`);\n    } else {\n      console.log(\\\"File has been deleted.\\\");\n    }\n  },\n);\n\n// To stop watching for changes, call the cancel function\ncancel();\n```\n\n----------------------------------------\n\nTITLE: Using watchStaticFile() to Monitor Static File Changes in Remotion Studio (TypeScript)\nDESCRIPTION: This TypeScript example demonstrates importing `StaticFile` and `watchStaticFile` from `@remotion/studio`. It sets up a watcher for 'your-static-file.jpg'. The provided callback function logs a message indicating whether the file was added/modified (receiving a `StaticFile` object) or deleted (receiving `null`). The watcher can be stopped by calling the returned `cancel` function. This API is only active within the Remotion Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/watch-static-file.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StaticFile, watchStaticFile } from \"@remotion/studio\";\n\n// Watch for changes in a specific static file\nconst { cancel } = watchStaticFile(\n  \"your-static-file.jpg\",\n  (newData: StaticFile | null) => {\n    if (newData) {\n      console.log(`File ${newData.name} has been added or modified.`);\n    } else {\n      console.log(\"File has been deleted.\");\n    }\n  },\n);\n\n// To stop watching for changes, call the cancel function\ncancel();\n```\n\n----------------------------------------\n\nTITLE: Including Typechecked TSX Snippets in Remotion Docs\nDESCRIPTION: Demonstrates how to embed a typechecked TypeScript (TSX) code snippet in Remotion documentation using the 'tsx twoslash' format. This example imports and uses the 'useCurrentFrame' hook from the 'remotion' library. The 'title' attribute specifies the filename ('MyComponent.tsx') displayed in the docs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/new-docs/new-doc.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"MyComponent.tsx\"\nimport {useCurrentFrame} from 'remotion';\n\nconst frame = useCurrentFrame();\n```\n```\n\n----------------------------------------\n\nTITLE: Referencing the `<CameraMotionBlur>` Alternative Component in Remotion (JSX)\nDESCRIPTION: References the `<CameraMotionBlur>` component, another suggested replacement for the deprecated `<MotionBlur>`. This component likely applies motion blur based on simulated camera movements within the Remotion composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/motion-blur.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<CameraMotionBlur>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video with Remotion CLI - Console\nDESCRIPTION: Initiates the video rendering process from the terminal by executing \\\"npx remotion render\\\". This command compiles the Remotion video project with current parameters and exports it as a final video file (typically MP4 or similar format). Dependencies must be installed before running. Output is the rendered video saved to disk.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-music-visualization/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/noise via npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@remotion/noise` library. The `--save-exact` flag ensures that the exact version specified is installed and recorded in the project's package.json, which is recommended for Remotion packages to avoid potential compatibility issues between different package versions. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/noise/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install @remotion/noise --save-exact\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Studio Development Server\nDESCRIPTION: This console command executes the `dev` script defined in the project's `package.json`, which typically starts the Remotion Studio development environment. This allows for live preview and editing of the video composition. The accompanying text notes that the separate TTS server included in the template also starts during development.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-google/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n```console\nnpm run dev\n```\n```\n\n----------------------------------------\n\nTITLE: Enable Beep Notification in Remotion Studio - Shell\nDESCRIPTION: Illustrates use of the '--beep-on-finish' CLI flag to trigger a beep sound when Remotion video rendering completes. Requires Remotion v4.0.84 or later. Useful for background render jobs where audio feedback is desirable. No additional parameters are needed; passing the flag alone enables the feature.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/studio.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion studio --beep-on-finish\n```\n\n----------------------------------------\n\nTITLE: Running Basic Remotion Benchmark in Bash\nDESCRIPTION: This command runs the Remotion benchmark tool on the specified entry point file (`src/index.ts`). It measures render time by running renders multiple times (default is 3). If optional `composition-ids` are not provided, Remotion will prompt the user to select compositions interactively from a list.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/benchmark.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion benchmark src/index.ts [composition-ids]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM in Dockerfile\nDESCRIPTION: Enables Corepack (Node's manager for package managers) and installs project dependencies using PNPM. This is an alternative to `RUN npm i` for projects using PNPM. Requires the `packageManager` field set in `package.json`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\nRUN corepack enable\nRUN pnpm i\n```\n\n----------------------------------------\n\nTITLE: Deploying the CDK Stack - Bash\nDESCRIPTION: Uses AWS CDK to deploy the specified stack, creating or updating AWS Lambda and related resources. The --outputs-file parameter writes CloudFormation output values to a local file, useful for automation and referencing resource ARNs, URLs, or IDs after deployment. Requires a valid local AWS CLI profile with permissions to deploy stacks and Lambda resources.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx aws-cdk deploy \\\n  --outputs-file ./cdk-outputs.json\n```\n\n----------------------------------------\n\nTITLE: Defining max-width ResizeOperation in TypeScript\nDESCRIPTION: Shows how to define a `ResizeOperation` object for use with `convertMedia`. This configuration scales a video down so its width is at most the specified `maxWidth` (640 pixels), preserving the aspect ratio. It requires the `ResizeOperation` type from `@remotion/webcodecs`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resizing.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {ResizeOperation} from '@remotion/webcodecs';\n\nconst resize: ResizeOperation = {\n  mode: 'max-width',\n  maxWidth: 640,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing TailwindCSS v3 Dependencies for Remotion\nDESCRIPTION: Shows commands for installing the `@remotion/tailwind` development dependency for integrating TailwindCSS v3 into an existing Remotion project, using various package managers.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @remotion/tailwind\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @remotion/tailwind\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D @remotion/tailwind\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i -D @remotion/tailwind\n```\n\n----------------------------------------\n\nTITLE: Handling WebCodecs Decoder Errors in TSX\nDESCRIPTION: This snippet shows basic error handling for WebCodecs decoders. Inside the sample processing function returned by `onVideoTrack`, it checks if the `videoDecoder.state` is 'closed'. If it is, likely due to an error reported in the `error` callback during decoder initialization, it stops passing further samples to the decoder by returning early. Similar logic applies to `AudioDecoder`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {OnVideoTrack} from '@remotion/media-parser';\n\nconst onVideoTrack: OnVideoTrack = async ({track}) => {\n  const videoDecoder = new VideoDecoder({\n    output: console.log,\n    error: console.error,\n  });\n\n  return async (sample) => {\n    if (videoDecoder.state === 'closed') {\n      return;\n    }\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Getting font metadata with getInfo - TypeScript\nDESCRIPTION: Demonstrates how to retrieve metadata about a font (such as available subsets, weights, URLs, and unicode ranges) by using the getInfo function exported from a font-specific package. Useful for introspection, advanced logic, or diagnostic purposes, this approach provides a programmatic way to access font details at runtime. No parameters are needed; simply log the output of getInfo().\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getInfo} from '@remotion/google-fonts/Montserrat';\nconsole.log(getInfo());\n```\n\n----------------------------------------\n\nTITLE: Using getFunctionInfo to Fetch Lambda Function Details in TypeScript\nDESCRIPTION: This TypeScript example demonstrates importing and using the `getFunctionInfo` function from `@remotion/lambda`. It fetches information about a Lambda function specified by `functionName` ('remotion-render-d7nd2a9f') and `region` ('eu-central-1') and logs details like memory size, disk size, version, and timeout. It requires the `@remotion/lambda` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/getfunctioninfo.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {getFunctionInfo} from '@remotion/lambda';\n\nconst info = await getFunctionInfo({\n  functionName: 'remotion-render-d7nd2a9f',\n  region: 'eu-central-1',\n});\nconsole.log(info.functionName); // remotion-render-d7nd2a9f\nconsole.log(info.memorySizeInMb); // 1500\nconsole.log(info.diskSizeInMb); // 2048\nconsole.log(info.version); // '2021-07-14'\nconsole.log(info.timeoutInSeconds); // 120\n```\n\n----------------------------------------\n\nTITLE: Error Message for Failed Dynamic Import (Bash)\nDESCRIPTION: Shows the typical error message encountered when Webpack fails to resolve a dynamically required module, as demonstrated in the preceding TSX snippet. The error indicates that the module corresponding to the constructed path (e.g., './image0.png') could not be found at build time.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/dynamic-import.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nError: Cannot find module './image0.png'\n```\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Set Cloud Run Service IAM Policy\nDESCRIPTION: Specifies the IAM permission required to modify the IAM policy of a Cloud Run service. This is used, for example, to allow or disallow unauthenticated invocation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nrun.services.setIamPolicy\n```\n\n----------------------------------------\n\nTITLE: Verifying .env File Loading in Remotion with Verbose Logging\nDESCRIPTION: Example log output shown when running a Remotion command with the `--log=verbose` flag. This confirms that Remotion has successfully located and loaded environment variables from a specific `.env` file (e.g., `.env.local`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/env-variables.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nLoaded env file from /Users/my-user/remotion-project/.env.local.\n```\n\n----------------------------------------\n\nTITLE: Triggering and Polling Remotion Lambda Renders with PHP\nDESCRIPTION: This PHP code snippet initiates a video render on AWS Lambda using the Remotion Lambda PHP SDK and polls its progress until completion. It requires Composer-installed dependencies (aws/aws-sdk-php, vlucas/phpdotenv, and remotion/lambda), environment variables for AWS and Remotion, and sets up input props and composition details. The script loads environment variables, authenticates using AWS credentials, instantiates the rendering client, sets up render parameters, starts the render, and repeatedly checks progress until the render is complete, outputting status along the way. Inputs include AWS environment variables and composition parameters; the output includes render progress and completion messages. Limitations include no support for large input props (>200KB) in PHP.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/php.mdx#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nuse Aws\\\\Credentials\\\\CredentialProvider;\\n\\n// We'll assume you use Composer, which will add autoload.php\\nrequire_once dirname(__DIR__) . '/vendor/autoload.php';\\n\\nuse Dotenv\\\\Dotenv;\\nuse Remotion\\\\LambdaPhp\\\\PHPClient;\\nuse Remotion\\\\LambdaPhp\\\\RenderParams;\\n\\n// Load environment variables\\n// Use \\\"unsafe\\\" because AWS reads environment variables from getenv(), not $_ENV\\n$dotenv = Dotenv::createUnsafeImmutable(__DIR__);\\n$dotenv->load();\\n\\n// Specify the region you deployed to, for example \\\"us-east-1\\\"\\n$region = getenv('REMOTION_APP_REGION');\\n// Specify the function you would like to call\\n$functionName = getenv('REMOTION_APP_FUNCTION_NAME');\\n// Specify the URL to your Webpack bundle\\n$serveUrl = getenv('REMOTION_APP_SERVE_URL');\\n\\n\\n$provider = CredentialProvider::defaultProvider();\\n\\n// Instantiate the client\\n$client = new PHPClient($region, $serveUrl, $functionName, $provider);\\n\\n// Initiate the param object and customize as needed\\n$params = new RenderParams();\\n\\n$params->setComposition('react-svg');\\n\\n// Set input props\\n$params->setInputProps(['message' => 'yo whats up']);\\n\\n// Execute the render and get the response\\n\\n$renderResponse = $client->renderMediaOnLambda($params);\\n\\n// Output render response\\nprint_r($renderResponse);\\n\\n\\n// Get render progress\\n$renderId = $renderResponse->renderId;\\n$bucketName = $renderResponse->bucketName;\\n\\n\\n$renderProgressResponse = $client->getRenderProgress($renderId, $bucketName);\\n\\nwhile (!$renderProgressResponse->done) {\\n  // Render is not done\\n  // Get the render progress\\n  $renderProgress = $renderProgressResponse->overallProgress;\\n  // Output render progress\\n  print_r(\\\"progress: \\\" . ($renderProgress * 100) . \\\"%\\\\n\\\");\\n  // Wait 1 second\\n  sleep(1);\\n  // Get render progress again\\n  $renderProgressResponse = $client->getRenderProgress($renderId, $bucketName);\\n}\\n\\nprint_r(\\\"Render is done!\\\\n\\\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging and CloudWatch Debug Links in Remotion Lambda CLI - Bash\nDESCRIPTION: Shows how to enable verbose logging for debugging purposes using the '--log=verbose' flag. When set, additional log details are captured, and a CloudWatch link is printed for deeper inspection. This feature assists in troubleshooting rendering issues in AWS Lambda executions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/render.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda render --log=verbose testbed my-comp\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Get Cloud Run Operation Status\nDESCRIPTION: Specifies the IAM permission needed during deployment to retrieve the status of Cloud Run operations, primarily used to confirm if a deployment has succeeded.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nrun.operations.get\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiline String Props with Preserved Line Breaks - CSS\nDESCRIPTION: This usage demonstrates how to render a multiline string from zTextarea() into a React component while ensuring visual line breaks are respected. The key dependency is a React setup that receives a string prop with possible \\n characters. By applying the CSS property white-space: pre-line to the containing element, the browser will display newlines and spaces in the string as intended, mimicking user input.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/zod-types/z-textarea.mdx#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\nwhite-space: pre-line;\n```\n\n----------------------------------------\n\nTITLE: Resampling Audio to 16kHz Using Remotion CLI FFmpeg Wrapper (Bash)\nDESCRIPTION: This code demonstrates the use of npx to run the Remotion-provided ffmpeg CLI wrapper for converting an input audio or video file to WAVE format with a 16kHz sample rate. This command is useful if you do not wish to install FFmpeg globally, leveraging Remotion's self-contained binary. Inputs include the input media file and desired output filename; the -ar 16000 flag ensures a 16kHz sample rate. Output is a new or overwritten .wav file. Requires Node.js and network access for npx to fetch the Remotion CLI package if not cached locally.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/resample-audio-16khz.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion ffmpeg -i input.mp4 -ar 16000 output.wav -y\\n\n```\n\n----------------------------------------\n\nTITLE: Example Output Structure of getInfo() Function in JSON\nDESCRIPTION: Provides an example of the JSON object returned by the `getInfo()` function for the 'Titan One' font. It showcases the structure, including font family name, import name, version, CSS import URL, unicode ranges for subsets, available font styles/weights with their corresponding WOFF2 file URLs, and a list of supported subsets.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/get-info.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fontFamily\": \"Titan One\",\n  \"importName\": \"TitanOne\",\n  \"version\": \"v13\",\n  \"url\": \"https://fonts.googleapis.com/css2?family=Titan+One:ital,wght@0,400\",\n  \"unicodeRanges\": {\n    \"latin-ext\": \"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF\",\n    \"latin\": \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD\"\n  },\n  \"fonts\": {\n    \"normal\": {\n      \"400\": {\n        \"latin-ext\": \"https://fonts.gstatic.com/s/titanone/v13/mFTzWbsGxbbS_J5cQcjCmjgm6Es.woff2\",\n        \"latin\": \"https://fonts.gstatic.com/s/titanone/v13/mFTzWbsGxbbS_J5cQcjClDgm.woff2\"\n      }\n    }\n  },\n  \"subsets\": [\"latin\", \"latin-ext\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Synchronous WebAssembly in Remotion Config (TypeScript)\nDESCRIPTION: Configures Webpack for Remotion to enable synchronous WebAssembly support by overriding the Webpack configuration using `Config.overrideWebpackConfig` from `@remotion/cli/config`. It merges the existing configuration with a new `experiments` object setting `syncWebAssembly` to `true`. Using synchronous WASM might require declaring compositions with `lazyComponent`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\nConfig.overrideWebpackConfig((conf) => {\n  return {\n    ...conf,\n    experiments: {\n      syncWebAssembly: true,\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Docker and Dependencies - Bash\nDESCRIPTION: Installs core Docker components including the engine, CLI, container runtime, buildx, and compose plugins. Must be run after the Docker repository is set up on Ubuntu/Debian systems. Outputs a full Docker environment ready for use; requires sudo and network access.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies with npm (Bash)\nDESCRIPTION: Installs Remotion core, player, CLI, Zod types, React, React DOM, and Zod as project dependencies. It also installs React type definitions as development dependencies using the npm package manager.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/angular.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i remotion @remotion/player @remotion/cli @remotion/zod-types react react-dom zod\nnpm i --save-dev @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Comparing Forked Remotion Recorder with Upstream (URL)\nDESCRIPTION: Provides a GitHub URL template to visually compare code differences between a forked commit and the latest version of the Remotion Recorder. Requires substituting 'COMMIT_ID' with the actual commit hash at which the fork occurred. Input: COMMIT_ID as parameter. Output: GitHub diff view highlighting changes between the specified commit and the 'main' branch.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/upgrading.mdx#_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttps://github.com/remotion-dev/recorder/compare/COMMIT_ID...main\n```\n\n----------------------------------------\n\nTITLE: Styling Text Bold and Blue using Inline JSX Style\nDESCRIPTION: Applies inline styles to a span element using a JSX style object. Sets the font weight to bold and the text color to blue (#0B84F3). This is used within the document to visually highlight specific text, in this case, related to the Company License badge.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/support.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<span style={{\n  fontWeight: \"bold\",\n  color: \"#0B84F3\"\n}}>\n```\n\n----------------------------------------\n\nTITLE: Verifying AWS CDK Final Deployment Output in Bash\nDESCRIPTION: Shows the detailed terminal output after successful deployment of the CDK stack, including asset publication progress, confirmation of successful deployment, and stack outputs such as API URL, queue information, and Cognito UserPool variables. This information is vital for integration testing, post-deployment configuration, or referencing resource identifiers in other workflows.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\napigw-sqs-app-stack: deploying... [1/1]\n[0%] start: Publishing 8efaff13bbe794558db1f1cb8f506bc13b87d7ab3e568ebc324bac680da3a75d:XXXXXXXXXX-ap-southeast-2\n[0%] start: Publishing 3b7a9f596977e2db94a676c6c89c99dd7eb87a5985f97a11ff23b9f338027764:XXXXXXXXXX-ap-southeast-2\n[0%] start: Publishing cf7f13fe5c0ff3b22e7352152a554dd8a4767f6a5e2285e6bf353fc42070e697:XXXXXXXXXX-ap-southeast-2\n[33%] success: Published 3b7a9f596977e2db94a676c6c89c99dd7eb87a5985f97a11ff23b9f338027764:XXXXXXXXXX-ap-southeast-2\n[66%] success: Published 8efaff13bbe794558db1f1cb8f506bc13b87d7ab3e568ebc324bac680da3a75d:XXXXXXXXXX-ap-southeast-2\n[100%] success: Published cf7f13fe5c0ff3b22e7352152a554dd8a4767f6a5e2285e6bf353fc42070e697:XXXXXXXXXX-ap-southeast-2\napigw-sqs-app-stack: creating CloudFormation changeset...\n\n ✅  apigw-sqs-app-stack\n\n✨  Deployment time: 158.36s\n\nOutputs:\napigw-sqs-app-stack.apiUrl = https://6mvgq2iad9.execute-api.ap-southeast-2.amazonaws.com/\napigw-sqs-app-stack.queuearn = arn:aws:sqs:ap-southeast-2:XXXXXXXXXX:remotion_queue\napigw-sqs-app-stack.queuename = remotion_queue\napigw-sqs-app-stack.queueurl = https://sqs.ap-southeast-2.amazonaws.com/XXXXXXXXXX/remotion_queue\napigw-sqs-app-stack.region = ap-southeast-2\napigw-sqs-app-stack.userPoolClientId = 5d88adjpffj314pm4pot8g292i\napigw-sqs-app-stack.userPoolId = ap-southeast-2_vzSlhO9O0\nStack ARN:\narn:aws:cloudformation:ap-southeast-2:XXXXXXXXXX:stack/apigw-sqs-app-stack/acb8b8f0-a52a-11ed-a440-024da00b5a8e\n```\n\n----------------------------------------\n\nTITLE: Setting Chromium Ignore Certificate Errors via Remotion Config using TypeScript\nDESCRIPTION: This snippet shows how to make Chromium ignore invalid SSL certificate errors, such as self-signed ones, by setting the `ignoreCertificateErrors` option to `true` in the Remotion configuration file using `Config.setChromiumIgnoreCertificateErrors()`. Requires importing `Config` from `@remotion/cli/config`. Prior to v3.3.39, the method was `Config.Puppeteer.setChromiumIgnoreCertificateErrors()`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/chromium-flags.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\n// ---cut---\n\nConfig.setChromiumIgnoreCertificateErrors(true);\n```\n\n----------------------------------------\n\nTITLE: Updating Error Handling for `renderStill` (TypeScript/TSX)\nDESCRIPTION: Illustrates the change in error handling for `renderStill`, `renderFrames`, and `getCompositions` in Remotion v3. The `onError` callback property is removed. Errors thrown within the Remotion component during rendering now cause the function promise to reject, requiring the use of a `try/catch` block for error handling.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nawait renderStill({\n  // ...\n  output: \"/tmp/still.png\",\n  onError: (err) => {\n    console.log(\"Error occured in browser\", err);\n  },\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\ntry {\n  await renderStill({\n    // ...\n    output: \"/tmp/still.png\",\n  });\n} catch (err) {\n  console.log(\"Error occured in browser\", err);\n}\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Response Format for Remotion Cloud Run Progress (JSON)\nDESCRIPTION: This JSON snippet details the typical response payload that an external webhook endpoint will receive from Remotion Cloud Run during a media render job. It includes status metrics such as progress, rendered and encoded frame counts, the render job ID, and associated project ID. The structure is dictated by Remotion's webhook integration and is sent via HTTP POST calls as rendering events occur. Input is not required; output is a JSON object passed as the POST body to the webhook callback.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/rendermediaoncloudrun.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"progress\": 0.1,\n  \"renderedFrames\": 100,\n  \"encodedFrames\": 100,\n  \"renderId\": \"1234567890\",\n  \"projectId\": \"1234567890\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Tangent at Length on SVG Path with Remotion Paths API (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the 'getTangentAtLength' function from the '@remotion/paths' package to compute the tangent vector of a point at a specified length along an SVG path. Required dependency is '@remotion/paths'. The first parameter is an SVG path string (e.g., 'M 50 50 L 150 50'), and the second is the position along the path (a number between 0 and the path's total length). The function returns an object with 'x' and 'y' properties indicating the tangent direction; in this example, it logs { x: 1, y: 0 } for a straight path segment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-tangent-at-length.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { getTangentAtLength } from \"@remotion/paths\";\n\nconst tangent = getTangentAtLength(\"M 50 50 L 150 50\", 50);\nconsole.log(tangent); // { x: 1, y: 0}\n```\n\n----------------------------------------\n\nTITLE: Modifying npm Test Script for JavaScript Support - npm (Diff Format)\nDESCRIPTION: This diff snippet shows how to update the project’s test script in package.json to include JavaScript (.js, .jsx) files in ESLint checks and removes the TypeScript compiler (tsc) step. No special dependencies are required beyond ESLint and the configuration must be adapted in package.json. The modification ensures that ESLint runs over both TypeScript and JavaScript files, enabling projects that have transitioned away from TypeScript.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/jsx-support.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-  \"test\": \"eslint src --ext ts,tsx && tsc\"\\n+  \"test\": \"eslint src --ext ts,tsx,js,jsx\"\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Dependencies using npm (Bash)\nDESCRIPTION: Installs Remotion core, player, CLI, React, ReactDOM as main dependencies, and associated TypeScript types and the Vite React plugin as development dependencies using the npm package manager. This is the first step in setting up Remotion within a Vue project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i remotion @remotion/player @remotion/cli react react-dom\nnpm i --save-dev @types/react @types/react-dom @vitejs/plugin-react\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/zod-types with npm - Bash\nDESCRIPTION: This snippet shows how to install the @remotion/zod-types package using npm with the --save-exact flag to pin the exact version. It assumes npm is installed and should be run in the root of a Node.js project. The only parameter is the package name; it installs the dependency and locks its version in package.json. No input is required, and the output is an updated node_modules directory and package.json file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/zod-types/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/zod-types --save-exact\n```\n\n----------------------------------------\n\nTITLE: Handling Events with webcodecsController() in TypeScript\nDESCRIPTION: This snippet illustrates how to attach and detach event listeners to a `webcodecsController` instance. It defines handler functions for the 'pause' and 'resume' events, uses `addEventListener` to register them, and demonstrates the necessary cleanup step using `removeEventListener`. This allows reacting to the pausing and resuming of the media conversion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/webcodecs-controller.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Use events\"\nimport {webcodecsController, convertMedia} from '@remotion/webcodecs';\n\nconst controller = webcodecsController();\n\nconst onPause = () => {\n  console.log('Paused');\n};\n\nconst onResume = () => {\n  console.log('Resumed');\n};\n\ncontroller.addEventListener('pause', onPause);\ncontroller.addEventListener('resume', onResume);\n\n// Make sure to cleanup later:\ncontroller.removeEventListener('pause', onPause);\ncontroller.removeEventListener('resume', onResume);\n```\n```\n\n----------------------------------------\n\nTITLE: Updating React Type Definitions to v19 (diff)\nDESCRIPTION: Shows the required version changes for the `@types/react` and `@types/react-dom` packages in a dependency file for TypeScript projects upgrading to React 19. This aligns type definitions with the updated React version.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/react-19.mdx#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- \"@types/react\": \"18.3.1\"\n- \"@types/react-dom\": \"18.3.1\"\n+ \"@types/react\": \"19.0.0\"\n+ \"@types/react-dom\": \"19.0.0\"\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/eslint-config-flat via npm (Bash)\nDESCRIPTION: This command installs the `@remotion/eslint-config-flat` npm package as a development dependency. The `--save-exact` flag ensures that the exact version of the package is installed and recorded in the `package.json` file, preventing potential issues caused by minor version updates and adhering to Remotion's recommendation for maintaining consistent package versions. Node.js and npm are required to execute this command.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/eslint-config-flat/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/eslint-config-flat --save-exact\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Without Secret for Lambda Rendering - Remotion - TypeScript\nDESCRIPTION: This snippet shows how to set up a Remotion Lambda webhook endpoint without request validation by assigning 'null' to the secret field in the configuration object. The object structure matches the type expected by Remotion's rendering function. Only the URL and a null secret are provided, disabling signature verification for inbound requests. This is suitable when validation is not necessary. Dependencies: '@remotion/lambda'. Inputs: webhook URL and null secret. Outputs: webhook configuration for Remotion Lambda rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/rendermediaonlambda.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {RenderMediaOnLambdaInput} from '@remotion/lambda';\\n\\nconst webhook: RenderMediaOnLambdaInput['webhook'] = {\\n  url: 'https://mapsnap.app/api/webhook',\\n  secret: null,\\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to a Specific Composition in Remotion Studio using TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `goToComposition` function imported from `@remotion/studio`. Calling this function with a string argument representing the composition's ID will cause the Remotion Studio UI to select and display that composition. If a composition with the provided ID is not found, the function will throw an error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/go-to-composition.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"Go to a composition\"\nimport {goToComposition} from '@remotion/studio';\n\ngoToComposition('my-composition');\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting Remotion Lambda Function (npm/pnpm/yarn) - Bash\nDESCRIPTION: This Bash sequence executes the 'delete-fn' script to remove the deployed Remotion Lambda function from your AWS account. npm, pnpm, and yarn variants are shown. Requires correct setup and credentials. This is a destructive operation, removing AWS Lambda resources created earlier.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run delete-fn\n```\n\n----------------------------------------\n\nTITLE: Building Custom Lambda Layers using Shell Script\nDESCRIPTION: This shell command runs the `make.sh` script within the `remotion-dev/lambda-binaries` repository. The script packages the modified binaries (e.g., Chrome, fonts) into ZIP files, placing the resulting artifacts in the `out` directory, ready for upload to AWS Lambda as custom layers.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/custom-layers.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh make.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm - Console\nDESCRIPTION: This command installs all npm dependencies listed in the project's package.json, ensuring the environment is ready for Remotion development. Run in the project root directory before using any other scripts. Requires Node.js and npm to be pre-installed on your system.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-azure/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Development Preview using NPM\nDESCRIPTION: This command executes the 'dev' script defined in the project's `package.json` file, which typically starts the Remotion development server and player. This allows developers to preview their video compositions and changes live in a web browser during the development process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-helloworld/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Service to Cloud Run using CLI (Shell)\nDESCRIPTION: This snippet shows the shell command to deploy a Remotion service to Google Cloud Run via the CLI. It requires Node.js and the Remotion CLI (`npx remotion`) installed. Users can customize deployment using flags such as `--region`, `--memoryLimit`, `--cpuLimit`, among others to control resource allocation and operational parameters. The input is the command as written, and the output is either a new or reused service deployment in the specified GCP region. Limitations include dependency on proper GCP access and project configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/services/deploy.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun services deploy\n```\n\n----------------------------------------\n\nTITLE: Importing the Tailwind Stylesheet in Remotion Entry Point (JavaScript)\nDESCRIPTION: This import statement should be placed at the top of your main component (src/Root.tsx) to ensure the Tailwind-generated CSS is globally loaded in your application. It assumes style.css exists and was set up as above. This inclusion triggers bundling and application of all Tailwind styles in your Remotion project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-2.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./style.css\";\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Invoke Cloud Run Routes\nDESCRIPTION: Specifies the IAM permission required to make HTTP requests to invoke deployed Cloud Run services. This is essential for initiating rendering tasks.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nrun.routes.invoke\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS for TailwindCSS v4\nDESCRIPTION: JavaScript module export configuration for `postcss.config.mjs`. It specifies the `@tailwindcss/postcss` plugin required for processing Tailwind directives and functions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  plugins: {\n    \"@tailwindcss/postcss\": {},\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Development Preview using npm\nDESCRIPTION: Executes the 'dev' script defined in `package.json`, which typically starts the Remotion development server. This enables a live preview of the video composition in a web browser, often with hot-reloading for immediate feedback during development.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-javascript/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Browser Path via Remotion SSR API Option\nDESCRIPTION: Option available in server-side rendering API functions like `renderMedia()` to specify the path to a custom Chromium-based browser executable. This overrides Remotion's default browser selection (Headless Shell or Chrome for Testing) for programmatic rendering calls.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nbrowserExecutable\n```\n\n----------------------------------------\n\nTITLE: Displaying Puppeteer Browser Launch Error in Remotion Lambda\nDESCRIPTION: Shows another potential error message indicating a failure to launch the headless Chromium browser process via Puppeteer, a common symptom of the AWS Lambda runtime incompatibility affecting Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/feb-2023-incident.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nFailed to launch the browser process!\n\n\n\nTROUBLESHOOTING: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Remotion Cloud Run Site - Bash\nDESCRIPTION: Creates or updates a Remotion Cloud Run site by specifying the path to the entry file and the '--site-name' option to denote the target site. If an existing site name is provided, the deployed site is updated in-place; otherwise, a new site along with its URL will be created. Prerequisites include a working Remotion project located at the given path and the Remotion CLI correctly configured. The command outputs either an updated or newly generated site URL upon completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/upgrading.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites create src/index.ts --site-name=my-name\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Webpack Overrides Sequentially in Remotion Config (TSX)\nDESCRIPTION: Displays how to call Config.overrideWebpackConfig multiple times within remotion.config.ts, enabling each override to be applied in sequence. This approach requires Remotion v4.0.229+ and only works in the config file. Each override function is imported individually.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\nimport {enableScss} from '@remotion/enable-scss';\nimport {enableTailwind} from '@remotion/tailwind-v4';\n\nConfig.overrideWebpackConfig(enableScss);\nConfig.overrideWebpackConfig(enableTailwind);\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Media Fragment Appending in Remotion - TypeScript\nDESCRIPTION: This example shows how to override Remotion's automatic media fragment appending by explicitly adding a hash (e.g., #disable) to the video source URL in OffthreadVideo. The snippet uses the remotion library and expects fps context to be present. The approach prevents Remotion from modifying the URL for fragment-based optimization. The input is a video URL with a custom hash, and the output is a React sequence that renders the specified section of video without Remotion appending a media fragment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-fragments.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Sequence, OffthreadVideo, useVideoConfig} from 'remotion';\\n\\nexport const MyComp: React.FC = () => {\\n  const {fps} = useVideoConfig();\\n\\n  return (\\n    <Sequence from={2 * fps} durationInFrames={4 * fps}>\\n      <OffthreadVideo src=\\\"https://example.com/bbb.mp4#disable\\\" />\\n    </Sequence>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Still Frame Using Remotion Lambda - Ruby\nDESCRIPTION: This Ruby snippet illustrates submitting a still-image render request to AWS Lambda using RemotionLambda::Client from the remotion_lambda gem. Setup involves creating the client, providing AWS region and Lambda function name, and composing the payload (with fields such as composition and input_props). The call to render_still_on_lambda returns the render result, which is printed to stdout. It assumes correct payload formatting (snake_case for top-level fields), matching SDK and Lambda package versions, and required environment configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/ruby.mdx#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nrequire 'remotion_lambda'\n\nclient = RemotionLambda::Client.new(\n  region: 'eu-central-1',\n)\n\nfunction_name = ENV.fetch('REMOTION_APP_FUNCTION_NAME')\n\npayload = get_render_still_on_lambda_payload(\n  composition: \"still-helloworld\",\n  input_props: {\n    message: \"Hello from props!\",\n  }\n)\n\nres = client.render_still_on_lambda(function_name, payload)\nputs res\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Framework Version\nDESCRIPTION: This console command uses the Remotion CLI (executed via `npx`) to upgrade the Remotion library and related dependencies in the project to their latest compatible versions. This is used for project maintenance.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-google/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n```console\nnpx remotion upgrade\n```\n```\n\n----------------------------------------\n\nTITLE: Running the React Router Development Server\nDESCRIPTION: Executes the 'dev' script defined in `package.json` to start the React Router application's development server. This typically enables features like hot module reloading for a better development experience.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Embedding Mux Video with a Custom React Component\nDESCRIPTION: This snippet demonstrates embedding a video hosted on Mux using a custom React component named `NewMuxVideo`. It imports the component from a local path and renders it, passing the specific Mux video ID (`muxId`) and inline styles (`style`) as props. This component likely handles the underlying video player implementation for Mux videos within the website.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/success-stories/2023-11-01-Shortvid.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {NewMuxVideo} from '../src/components/MuxVideo';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<NewMuxVideo muxId=\"TwOvAh7kvNl3FCBVDFmqFbnNumIW01NgMv02tTm1kuyPI\"\nstyle={{ width: \"100%\"}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Listing Remotion Cloud Run Sites (Default Region) using CLI\nDESCRIPTION: This command lists the Remotion sites deployed to Google Cloud Run within the configured or default GCP region for the current project. The output includes details for each site such as its name, associated bucket, region, and the serve URL, which can be used with the `render` command. Requires Remotion CLI and authenticated gcloud CLI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/ls.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun sites ls\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Remotion Three Integration - PNPM\nDESCRIPTION: Shows how to add 'three', '@react-three/fiber', '@remotion/three', and '@types/three' via pnpm for a Remotion project. This assures that all necessary libraries for React Three Fiber 3D composition in Remotion are present, including Three.js types for TypeScript support. Intended for PNPM-managed workspaces; run at repository root. Input: none. Output: pnpm-lock.yaml and project dependencies updated.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/three.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i three @react-three/fiber @remotion/three @types/three\n```\n\n----------------------------------------\n\nTITLE: Configuring Bun Test Preload (TOML)\nDESCRIPTION: This TOML configuration snippet for Bun (`bunfig.toml`) specifies a script to be preloaded before running tests. The `[test]` section indicates test-specific configuration, and `preload = \"./happydom.ts\"` instructs Bun to execute the `happydom.ts` script to set up the testing environment (in this case, registering Happy DOM).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/testing.mdx#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n```toml title=\"bunfig.tom\"\n[test]\npreload = \"./happydom.ts\"\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Response from API (Bash/JSON)\nDESCRIPTION: Demonstrates a possible API response showing successful SQS enqueueing. The response contains a JSON object with a message and MessageId. Requires earlier successful invocation of the API endpoint. Input is the previous curl request, and output is this JSON. False JSON formatting is noted, but the structure indicates expected fields for confirmation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n{\\n   {\"message\":\"Message Send to SQS- Here is MessageId: a6abd0bc-b838-48b5-a562-4c511fac5b2f\"}\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Deployed Lambda Functions with Remotion Lambda API - TypeScript\nDESCRIPTION: This snippet demonstrates how to use Remotion's Lambda API in TypeScript to retrieve and delete all deployed Lambda functions in a specified AWS region. It imports deleteFunction and getFunctions from the @remotion/lambda package, gathers all available Lambda functions via getFunctions(), and iteratively deletes each function by passing its functionName and region to deleteFunction. Dependencies required are Node.js, the @remotion/lambda library, and valid AWS credentials/configuration. The region and functionName parameters specify which Lambda functions to target for deletion. No return value is expected; if a deletion fails, an error will be thrown.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/deletefunction.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {deleteFunction, getFunctions} from '@remotion/lambda';\\n\\nconst functions = await getFunctions({\\n  region: 'us-east-1',\\n  compatibleOnly: false,\\n});\\nfor (const fn of functions) {\\n  await deleteFunction({\\n    region: 'us-east-1',\\n    functionName: fn.functionName,\\n  });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Multi-Process Linux Rendering via Remotion CLI Flag (Shell)\nDESCRIPTION: Pass the `--enable-multi-process-on-linux` flag to the Remotion CLI `render` command to explicitly enable Chromium's multi-process mode during rendering initiated from the command line on Linux systems.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-single-process.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n--enable-multi-process-on-linux\n```\n\n----------------------------------------\n\nTITLE: Multi-Account AWS Credentials .env Example - Bash\nDESCRIPTION: This snippet extends the .env AWS credentials example to support multiple deployment accounts (e.g. for load balancing). Add variables for additional AWS_KEY_2 and AWS_SECRET_2. Used for alternating credentials in deployment scripts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nAWS_KEY_1=\nAWS_SECRET_1=\nAWS_KEY_2=\nAWS_SECRET_2=\n```\n\n----------------------------------------\n\nTITLE: Rendering a Styled Text Div for Measurement Debugging in Remotion (TypeScript/React)\nDESCRIPTION: This snippet demonstrates how to render a <div> element in a Remotion React component with the exact CSS properties used in text measurement functions. This aids in debugging discrepancies between measured and rendered text dimensions by visually exposing all relevant font-related attributes. Dependencies include Remotion and React; key parameters such as fontSize, fontWeight, fontFamily, and a text string are passed as props to the <div>. This approach enables side-by-side comparison in Chrome DevTools to identify layout inconsistencies. Expected output is an absolutely filled container with the debuggable text; ensure the correct font is loaded and avoid using border or padding on the text node.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/debug.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport {AbsoluteFill} from 'remotion';\\n\\nconst MyComp: React.FC = () => {\\n  const fontSize = 100;\\n  const fontWeight = 'bold';\\n  const fontFamily = 'Roboto';\\n  const text = 'Hello World ';\\n  const letterSpacing = undefined;\\n  const fontVariantNumeric = undefined;\\n  const textTransform = undefined;\\n\\n  return (\\n    <AbsoluteFill>\\n      <div\\n        id=\\\"remotion-measurer\\\"\\n        style={{\\n          display: 'inline-block',\\n          whiteSpace: 'pre',\\n          fontSize,\\n          fontWeight,\\n          fontFamily,\\n          letterSpacing,\\n          fontVariantNumeric,\\n          textTransform,\\n        }}\\n      >\\n        {text}\\n      </div>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Example Remotion Timeout Error for Pexels Video via Proxy\nDESCRIPTION: Shows another variation of the Remotion `delayRender()` timeout error, possibly when using an `<Img>` component (e.g., for a poster) or when fetching a Pexels video through a local proxy. The underlying cause remains Pexels throttling leading to slow resource loading, which exceeds the timeout threshold.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/pexels.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nA delayRender() \"Loading <Img> with src=http://localhost:3000/proxy?src=https://videos.pexels.com/video-files/5182920/5182920-hd_720_1280_25fps.mp4\" was called but not cleared after 28000ms. See https://remotion.dev/docs/timeout for help\n```\n\n----------------------------------------\n\nTITLE: Deploying Site Using Remotion CLI - Bash\nDESCRIPTION: This command deploys a Remotion site to AWS S3 using the CLI, preparing it for Lambda-based video rendering. The first argument provided to the command specifies the entry point to the Remotion project. Prerequisites are a configured AWS account, Remotion CLI installed, and access to the entry point. Input is the entry path; output is the deployment of the Remotion site to S3.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites create\n```\n\n----------------------------------------\n\nTITLE: Deleting Remotion Lambda Function with Yarn - Bash\nDESCRIPTION: This Bash snippet removes the deployed Lambda function by running the 'delete-fn' script with yarn. Assumes proper yarn/npm project setup and AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn delete-fn\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Remotion Server - Bash\nDESCRIPTION: This snippet defines essential environment variables in a .env file for initializing the Remotion server, specifying the port, IAM role details for AWS access, and credentials for basic API authentication. Required dependencies include the actual Remotion application, AWS IAM setup, and accurate secret values for production use. Each parameter, such as PORT and API credentials, configures service behavior or access; values should be changed before production deployment to ensure security.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPORT=8080\\nREMOTION_ROLE_ARN=arn:aws:iam::XXXXXXXXXX:role/remotion-ec2-executionrole\\nREMOTION_ROLE_SESSION_NAME=render-sessions\\nAPI_USERNAME=admin\\nAPI_PASSWORD=password\n```\n\n----------------------------------------\n\nTITLE: Importing Remotion Version Constant in TypeScript\nDESCRIPTION: This snippet shows how to import the `VERSION` constant from the main `remotion` package in TypeScript. It then logs the current version string (e.g., \"4.0.57\") to the console. This import method also brings in React and ReactDOM dependencies.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/version.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { VERSION } from \"remotion\";\n\nconsole.log(VERSION); // \"4.0.57\";\n```\n\n----------------------------------------\n\nTITLE: Setting Preference for Lossless Audio using Remotion Config in TypeScript\nDESCRIPTION: Configures whether Remotion should prefer lossless audio formats during intermediate processing steps using `Config.setPreferLosslessAudio()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. Setting it to `true` prioritizes lossless audio, which can maintain quality but might increase temporary file sizes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_32\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setPreferLosslessAudio(true);\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda Function with CLI (bash)\nDESCRIPTION: Uses the Remotion Lambda CLI command to deploy a pre-built AWS Lambda function to the user's AWS account. This function contains the necessary binaries and runtime code to execute Remotion rendering tasks based on a provided serve URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/setup.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda functions deploy\n```\n\n----------------------------------------\n\nTITLE: Rendering DownloadPressRelease React Component\nDESCRIPTION: Renders the custom `DownloadPressRelease` React component using JSX syntax. This component likely renders a button or link allowing users to download the official press release document related to the funding announcement.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-09-seed-funding.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DownloadPressRelease />\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cloud Run Site Projects with Remotion CLI - Bash\nDESCRIPTION: Removes all site projects managed by Remotion Cloud Run via a single CLI command using the Remotion CLI. Assumes Node.js and Remotion CLI are set up. The '-y' flag skips confirmation, which can result in irreversible deletion. No additional parameters are needed unless targeting a specific project context. After running, all site projects are permanently deleted from your Cloud Run infrastructure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/uninstall.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudRun sites rmall -y\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Function Using Remotion CLI - Bash\nDESCRIPTION: This command deploys a new AWS Lambda function via the Remotion CLI to facilitate cloud video rendering. Prerequisites include a properly configured AWS account and installed Remotion CLI. The command deploys the serverless function, which is required for subsequent rendering operations. Input is none; output is the deployment of the Lambda function.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/static/llms.txt#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda functions deploy\n```\n\n----------------------------------------\n\nTITLE: Executing Site Removal - Remotion Lambda CLI - Bash\nDESCRIPTION: These bash commands demonstrate how to use the Remotion Lambda CLI to remove one or multiple deployed sites from an AWS S3 bucket by their site IDs. Prerequisites include having Node.js, npx, and the remotion Lambda CLI installed and configured with proper AWS credentials. Required parameters are the site IDs to remove; optional flags include region selection, automatic confirmation (-y), forced bucket name, and custom S3 path style. The expected input is a list of one or more site IDs, and the command outputs deletion logs and storage reclaimed. Limitations include requiring the CLI to be run where credentials and appropriate permissions are available.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/sites/rm.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites rm abcdef\nnpx remotion lambda sites rm abcdef my-project # multiple at once\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Packages using Remotion CLI\nDESCRIPTION: Uses the Remotion CLI (via `npx`) to upgrade all Remotion-related packages (`@remotion/*`) in the project to their latest compatible versions defined in `package.json`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Updating React Type Definitions in package.json (diff)\nDESCRIPTION: Shows the update for React type definitions (`@types/react`) to version `18.0.0` when using TypeScript and optionally upgrading to React 18 alongside Remotion v3.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- \"@types/react\": \"17.0.3\"\n+ \"@types/react\": \"18.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Using Compositions in the Remotion Player (JSX)\nDESCRIPTION: Refers to the `<Player>` React component, which is part of the Remotion Player API. Unlike Studio registration with `<Composition>`, the `<Player>` component receives the composition's React component and metadata directly as props.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/composition.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Player>\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: List Cloud Run Services\nDESCRIPTION: Specifies the IAM permission required to retrieve a list of existing Cloud Run services within the project. This helps prevent unintentional overwriting during deployment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nrun.services.list\n```\n\n----------------------------------------\n\nTITLE: Identifying S3 ACL Error in Remotion Lambda Output (Text)\nDESCRIPTION: This text snippet shows the specific error message 'AccessControlListNotSupported: The bucket does not allow ACLs' that may appear during a Remotion Lambda render. This error indicates that the target AWS S3 bucket is configured to disallow Access Control Lists (ACLs), often relying on bucket policies for permissions instead. Resolving this requires adjusting the Remotion Lambda call.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/bucket-disallows-acl.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAccessControlListNotSupported: The bucket does not allow ACLs\n```\n\n----------------------------------------\n\nTITLE: Installing Whisper.cpp via Remotion Utility in TypeScript/JavaScript\nDESCRIPTION: Demonstrates importing the installWhisperCpp function from '@remotion/install-whisper-cpp' and using it to install a specific version of Whisper.cpp into a designated folder. Dependencies include Node.js built-in 'path' module and the '@remotion/install-whisper-cpp' package. Key parameters are 'to' (installation path) and 'version' (Whisper.cpp semver or commit hash). The output is an object indicating if installation was necessary, enabling idempotence. The snippet uses top-level await (requires an ES module environment) and supports customization via options such as output logging and cancellation through AbortController.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/install-whisper-cpp/install-whisper-cpp.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport path from 'path';\nimport {installWhisperCpp} from '@remotion/install-whisper-cpp';\n\nconst {alreadyExisted} = await installWhisperCpp({\n  to: path.join(process.cwd(), 'whisper.cpp'),\n  version: '1.5.5', // A Whisper.cpp semver or git tag\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Render Server in Production - Console\nDESCRIPTION: Starts the Express.js remotion render server in production mode for serving video render requests. Suitable for deployment and handles incoming render API calls as documented.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-render-server/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: List Storage Objects\nDESCRIPTION: Specifies the IAM permission required to list objects within Cloud Storage buckets. (Note: Full explanation marked as 'ToDo' in the original text).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nstorage.objects.list\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/layout-utils using yarn (Bash)\nDESCRIPTION: This command adds the `@remotion/layout-utils` package as a dependency using the yarn package manager. Run this in your project's root directory via the terminal. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/layout-utils/index.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @remotion/layout-utils\n```\n\n----------------------------------------\n\nTITLE: Removing All Cloud Run Services with Remotion CLI - Bash\nDESCRIPTION: Deletes all Cloud Run services without prompting for confirmation using the Remotion CLI. Requires Node.js and Remotion CLI installed (via npm or npx). The '-y' flag ensures that all services are force-deleted. There are no required input parameters; the script applies to the default or currently active configuration. Use with caution: all services will be removed permanently.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/uninstall.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudRun services rmall -y\n```\n\n----------------------------------------\n\nTITLE: Running Captioning Script for All Videos\nDESCRIPTION: Executes the Node.js script `sub.mjs` to generate captions for all video files found in the `public` directory. This script utilizes Whisper.cpp for transcription, which needs to be configured separately (e.g., model selection in `whisper-config.mjs`).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tiktok/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nnode sub.mjs\n```\n\n----------------------------------------\n\nTITLE: Displaying UnrecognizedClientException Error Text\nDESCRIPTION: This snippet shows the exact error message text for `UnrecognizedClientException` that occurs when AWS credentials are provided but lack the necessary permissions for a Remotion Lambda operation. This typically happens due to credential conflicts in nested serverless function calls.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/unrecognizedclientexception.mdx#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nUnrecognizedClientException: The AWS credentials provided were probably mixed up.\n```\n\n----------------------------------------\n\nTITLE: Running GCP Setup Script in Cloud Shell (Bash)\nDESCRIPTION: Downloads and executes a setup script within Google Cloud Shell. This script automates the process of enabling necessary GCP APIs, creating resources, and configuring permissions required for Remotion Cloud Run.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://github.com/remotion-dev/remotion/raw/main/packages/cloudrun/src/gcpInstaller/gcpInstaller.tar | tar -x -C . && node install.mjs\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Mux Video Component in React - JavaScript/JSX\nDESCRIPTION: This snippet imports the NewMuxVideo component from a local path, making it available within the React file for rendering Mux-hosted videos. It requires that the file ../../src/components/MuxVideo exists and exports NewMuxVideo. The imported component is expected to handle video playback and customization within the page. No external npm package installation is mentioned, so dependencies must be fulfilled locally.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/demo.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {NewMuxVideo} from '../../src/components/MuxVideo';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian using Bash\nDESCRIPTION: Uses the `apt install` command to install required shared libraries for Remotion's Chrome Headless Shell on Debian systems. Installs packages necessary for networking, accessibility, graphics rendering, display management, audio, and printing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-dependencies.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt install -y \\\n  libnss3 \\\n  libdbus-1-3 \\\n  libatk1.0-0 \\\n  libgbm-dev \\\n  libasound2 \\\n  libxrandr2 \\\n  libxkbcommon-dev \\\n  libxfixes3 \\\n  libxcomposite1 \\\n  libxdamage1 \\\n  libpango-1.0-0 \\\n  libcairo2 \\\n  libcups2 \\\n  libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid SVG Paths with getLength()\nDESCRIPTION: This snippet shows the behavior of the `getLength()` function when provided with an invalid SVG path string ('remotion'). The function is expected to throw an error indicating that the path data is malformed. This demonstrates the function's error handling mechanism for invalid inputs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-length.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getLength } from \"@remotion/paths\";\n// ---cut---\ngetLength(\"remotion\"); // Error: Malformed path data: ...\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Get Cloud Run Service IAM Policy\nDESCRIPTION: Specifies the IAM permission needed to retrieve the current IAM policy attached to a Cloud Run service. This is typically checked before modifying invocation permissions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nrun.services.getIamPolicy\n```\n\n----------------------------------------\n\nTITLE: Building/Rendering a Remotion Project using npm\nDESCRIPTION: Shell command using npm scripts to trigger the video rendering process in a Remotion project. As of v1.5, the first execution of this command might trigger a Chromium download if no suitable local browser is found and none is specified.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-03-03-remotion-1-5.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining Webhook Response Headers - JSON\nDESCRIPTION: Describes the standard HTTP headers returned in Remotion Lambda webhook requests. These headers allow consumers to verify request authenticity, rendering status, and execution context. No dependencies required; all fields presented as literal keys/values typical in webhook notifications.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/webhooks.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"Content-Type\": \"application/json\",\\n  \"X-Remotion-Mode\": \"production\" | \"demo\",\\n  \"X-Remotion-Signature\": \"sha512=HASHED_SIGNATURE\" | \"NO_SECRET_PROVIDED\",\\n  \"X-Remotion-Status\": \"success\" | \"timeout\" | \"error\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion CLI and Packages\nDESCRIPTION: Command to upgrade the Remotion installation using npx. This is the first step in the recommended resolution to lock the AWS Lambda Node.JS runtime to a compatible version (v14.28) introduced in Remotion v3.3.54.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/feb-2023-incident.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Using Installation Component in MDX/JSX\nDESCRIPTION: Utilizes a custom `<Installation>` component, likely specific to the Remotion documentation setup (MDX/Docusaurus), to display installation instructions. The `pkg` prop specifies the package name (`@remotion/animated-emoji`) for which the installation command should be shown.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animated-emoji/index.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation pkg=\"@remotion/animated-emoji\" />\n```\n\n----------------------------------------\n\nTITLE: Removing Remotion Lambda Functions via CLI (Shell)\nDESCRIPTION: This command uses the Remotion CLI via `npx` to remove one or more specified AWS Lambda functions previously deployed for Remotion rendering. It accepts a space-separated list of function names as arguments. The command will prompt for confirmation before deleting unless the `--yes` or `-y` flag is provided. The `--region` flag can be used to specify the AWS region.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/functions/rm.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda functions rm remotion-render-2021-12-16-2048mb-240sec\n```\n\n----------------------------------------\n\nTITLE: Referencing the Remotion Player Component in React\nDESCRIPTION: This snippet shows the syntax for the Remotion Player React component, typically used within JSX. It's the main component provided by the `@remotion/player` package for embedding Remotion videos into React applications. Requires the `@remotion/player` package to be installed and imported.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/terminology/player.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Player>\n```\n\n----------------------------------------\n\nTITLE: Getting Default Video Codec with Remotion WebCodecs in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getDefaultVideoCodec function from the @remotion/webcodecs package to retrieve the default video codec for a given container, such as 'webm'. The function takes an object with a 'container' property and returns a string representing the codec (e.g., 'vp8'). This requires the @remotion/webcodecs dependency and expects a container name as the key parameter. The output is a codec string, and this function is part of an unstable API that may change in future releases.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/get-default-video-codec.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {getDefaultVideoCodec} from '@remotion/webcodecs';\\n\\ngetDefaultVideoCodec({container: 'webm'}); // 'vp8'\n```\n\n----------------------------------------\n\nTITLE: Extracting SVG Subpaths Using getSubpaths() in Remotion Paths (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import and use the getSubpaths() function from the @remotion/paths package to split an SVG path into separate subpaths. It requires @remotion/paths version 3.3.6 or newer and TypeScript/JavaScript with ES Module import support. The input is a multiline SVG path string, and the output is an array, where each entry corresponds to a subpath, separated at each 'M' or 'm' command.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-subpaths.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSubpaths } from \"@remotion/paths\";\n\nconst parts = getSubpaths(`\n  M 0 0 L 100 0\n  M 0 100 L 200 100\n`);\n```\n\n----------------------------------------\n\nTITLE: Removing All Sites Using Remotion Cloud Run CLI (Bash)\nDESCRIPTION: This snippet demonstrates the usage of the Remotion Cloud Run CLI command to remove all sites from the currently configured GCP project region. It requires a Node.js environment and the Remotion CLI package installed or accessible via npx. No parameters are required, but region-specific or confirmation flags can alter behavior. The command prompts for confirmation before deleting each site, providing details such as site name, bucket, region, and serve URL. Input is not required except when prompted for confirmation, and the output lists sites found and their deletion status.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/rmall.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites rmall\n```\n\n----------------------------------------\n\nTITLE: Deploying Remotion Lambda Functions Using CLI - Bash\nDESCRIPTION: This snippet demonstrates how to deploy Remotion Lambda functions with the x86_64 architecture using the CLI. The command requires the Remotion Lambda CLI to be installed (typically via npx), and it targets an environment where AWS credentials are configured. The --architecture flag explicitly sets the target infrastructure. The primary parameter is the architecture, which enables compatibility due to the recent AWS Lambda changes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/feb-2022-outage.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda functions deploy --architecture=x86_64\n```\n\n----------------------------------------\n\nTITLE: Executing the Audio Normalization Script with Bun\nDESCRIPTION: This command executes the `normalize.ts` TypeScript script using the Bun runtime environment. Ensure Bun is installed and the `normalize.ts` script exists in the current directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/normalizing-audio.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\nbun normalize.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pnpm (Bash)\nDESCRIPTION: Installs or updates project dependencies using the pnpm package manager, based on the `package.json` file. This is executed as part of the manual Remotion upgrade process after modifying dependency versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/upgrading.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Deploying/Updating Remotion Lambda Function and S3 Assets\nDESCRIPTION: Executes the `deploy.mjs` Node.js script. This command deploys or updates the Remotion video rendering function on AWS Lambda and the associated static assets on Amazon S3. It should be rerun after upgrading Remotion versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnode deploy.mjs\n```\n\n----------------------------------------\n\nTITLE: Delaying Frame Rendering in Remotion Components (Conceptual)\nDESCRIPTION: Conceptual reference to the `delayRender()` function available in Remotion's API (JavaScript/TypeScript). This function is used within components to pause the rendering of a specific frame, typically while waiting for asynchronous operations like data fetching. In v1.5, failing to resolve the lock created by this function will cause the render process to fail.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-03-03-remotion-1-5.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndelayRender()\n```\n\n----------------------------------------\n\nTITLE: Adding an API Key for Telemetry Tracking in TypeScript\nDESCRIPTION: This code demonstrates how to use the `convertMedia` function from `@remotion/webcodecs` with an `apiKey` parameter. Providing a public API key obtained from `remotion.pro` allows tracking the number of media conversions associated with that key on your dashboard. The function requires the source media URL (`src`), the target container format (`container`), and the public API key (`apiKey`). Telemetry is sent upon completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/telemetry.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {convertMedia} from '@remotion/webcodecs';\n\nawait convertMedia({\n  src: 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4',\n  container: 'webm',\n  apiKey: 'rm_pub_abcdefghijklo',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Remotion Dependencies to v5.0 in package.json (Diff)\nDESCRIPTION: Shows the required version bumps for `remotion` and associated `@remotion/*` packages from version 4.0.141 to 5.0.0 within a project's dependency file (e.g., `package.json`). Users need to replace the old versions with the new ones and run their package manager's install command.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/5-0-migration.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- \"remotion\": \"4.0.141\"\n- \"@remotion/bundler\": \"4.0.141\"\n- \"@remotion/eslint-config\": \"4.0.141\"\n- \"@remotion/eslint-plugin\": \"4.0.141\"\n- \"@remotion/cli\": \"4.0.141\"\n- \"@remotion/renderer\": \"4.0.141\"\n+ \"remotion\": \"5.0.0\"\n+ \"@remotion/bundler\": \"5.0.0\"\n+ \"@remotion/eslint-config\": \"5.0.0\"\n+ \"@remotion/eslint-plugin\": \"5.0.0\"\n+ \"@remotion/cli\": \"5.0.0\"\n+ \"@remotion/renderer\": \"5.0.0\"\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Still Image via Remotion Cloud Run CLI with Service Name (Bash)\nDESCRIPTION: This command renders a single still frame by specifying the service name and region, rather than the Cloud Run URL. It requires prior knowledge of the service's deployment location. The rendered image will be stored in the configured cloud storage upon completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun still <serve-url | site-name> <still-id> --service-name=<service-name> --region=<region>\n```\n\n----------------------------------------\n\nTITLE: Viewing Environment Variables - Bash\nDESCRIPTION: This command displays the contents of the .env file in the current working directory. No dependencies beyond standard Bash utilities (cat). Input is the .env file (must exist in the same directory); output is its contents, which can be manually copied or inspected. Ensure file permissions restrict its access and do not commit it to source control.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/generate-env.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat .env\n```\n\n----------------------------------------\n\nTITLE: Creating Remotion Directory Structure (Plaintext)\nDESCRIPTION: Suggests creating a dedicated `src/remotion` folder within the Vue project to organize Remotion-specific files, improving code separation and maintainability.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsrc/remotion\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/noise Using npm - Bash\nDESCRIPTION: This snippet provides the npm command to install the @remotion/noise package, a utility for generating noise effects. Users must have Node.js and npm installed to run this command. Executing it will add @remotion/noise as a dependency in the project's package.json; required for utilizing the provided noise utility functions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/noise/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/noise\n\n```\n\n----------------------------------------\n\nTITLE: Running Captioning Script for a Specific Folder\nDESCRIPTION: Executes the Node.js script `sub.mjs`, passing a specific folder path (replace `<path-to-folder>`) as an argument. This generates captions for all video files found within the specified folder using Whisper.cpp.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tiktok/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnode sub.mjs <path-to-folder>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple AWS Account Credentials in .env File\nDESCRIPTION: Example `.env` file storing access keys and secret keys for multiple AWS accounts (Account 1 and Account 2). These variables need to be loaded into the environment (e.g., using the `dotenv` package) and can then be used by scripts, such as the provided TypeScript example, for rotating credentials in Remotion Lambda operations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/authentication.mdx#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n# Account 1\nAWS_KEY_1=AK...\nAWS_SECRET_1=M/\n\n# Account 2\nAWS_KEY_2=AK...\nAWS_SECRET_2=M/\n```\n\n----------------------------------------\n\nTITLE: Embedding Mux Video with NewMuxVideo Component in JSX\nDESCRIPTION: Renders a video player using the custom `NewMuxVideo` React component. It specifies the video source using the `muxId` prop, sets the player width to 100% via the `style` prop, and enables standard video controls (`controls`), muted playback (`muted`), automatic playback (`autoPlay`), and a poster image (`poster`). This component is used here to showcase an example video created by YARX.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/success-stories/2022-09-16-YARX.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<NewMuxVideo muxId=\"hQodJfIe701qG8AAiaLttVl8SVxo9W012fXHJPIsdVFIg\" style={{\n  width: '100%'\n}} controls muted autoPlay poster=\"/img/yarx-image.png\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion CLI using pnpm\nDESCRIPTION: Installs the Remotion Command Line Interface (`@remotion/cli`) package as a project dependency using the pnpm package manager. This is a prerequisite for launching the Remotion Studio.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/studio.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/cli\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion to the Latest Version (Node.js, Bash)\nDESCRIPTION: Runs the Remotion upgrade routine, ensuring all Remotion packages are updated to their latest versions according to official recommendations. Can be necessary after major framework updates or to receive bug fixes. Requires project repository access and may trigger dependency installation afterward. Outputs upgrade logs to the terminal.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-pages/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Updating Remotion Dependencies in package.json (diff)\nDESCRIPTION: Shows the required version changes for `remotion` and associated `@remotion` packages when upgrading from v2 to v3. Update versions from `^2.6.15` to `^3.0.0` in your `package.json` and run your package manager's install command.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/3-0-migration.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- \"remotion\": \"^2.6.15\"\n- \"@remotion/bundler\": \"^2.6.15\"\n- \"@remotion/eslint-config\": \"^2.6.15\"\n- \"@remotion/eslint-plugin\": \"^2.6.15\"\n- \"@remotion/cli\": \"^2.6.15\"\n- \"@remotion/renderer\": \"^2.6.15\"\n+ \"remotion\": \"^3.0.0\"\n+ \"@remotion/bundler\": \"^3.0.0\"\n+ \"@remotion/eslint-config\": \"^3.0.0\"\n+ \"@remotion/eslint-plugin\": \"^3.0.0\"\n+ \"@remotion/cli\": \"^3.0.0\"\n+ \"@remotion/renderer\": \"^3.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Removing All Sites Without Confirmation (Bash)\nDESCRIPTION: Executes the Remotion CLI command to remove all Lambda sites, automatically confirming deletion for all found sites using the `-y` (or `--yes`) flag. This bypasses the interactive confirmation prompt.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/sites/rmall.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites rmall -y\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Cloud Run Site Using the CLI - Bash\nDESCRIPTION: This snippet demonstrates how to use the Remotion CLI to create a site on Google Cloud Run by running the command via npx. The <entry-point>? parameter specifies the file to bundle; if omitted, Remotion determines it automatically. Once executed, this command bundles the project and uploads it to Cloud Storage, producing a public URL for the hosted site. This command requires npx, remotion installed as a dependency, Cloud Run setup, and appropriate GCP credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/create.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites create <entry-point>?\n```\n\n----------------------------------------\n\nTITLE: Deploying a Remotion Service via CLI (Bash)\nDESCRIPTION: Deploys a Remotion rendering service to the configured GCP project using the Remotion CLI. This service contains the necessary binaries and runtime to execute Remotion renders on Cloud Run. It does not include the user's specific Remotion project code.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun services deploy\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing LFS and Public Assets to GitHub - bash\nDESCRIPTION: This snippet demonstrates the sequence of git commands to add the .gitattributes file and the public directory to staging, commit them with a descriptive message, and push to the remote repository. This is the final step which ensures the configuration and public media files are now tracked under source control via Git LFS. These commands should be run after LFS has been initialized and configured. The inputs are bash commands executed in the project directory; the result is updated repository state both locally and remotely.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/source-control.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ngit add .gitattributes\ngit add public\ngit commit -m \\\"Enable Git LFS\\\"\ngit push\n```\n```\n\n----------------------------------------\n\nTITLE: Executing the Remotion Bundle Command (Bash)\nDESCRIPTION: Demonstrates the basic syntax for using the `npx remotion bundle` command. This command creates a Remotion Bundle, which is a self-contained package of your Remotion project. It optionally accepts a Serve URL or an entry point file path as an argument. If no argument is provided, Remotion attempts to determine the entry point automatically. Various flags can be used to customize the bundling process.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/bundle.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion bundle <serve-url|entry-file>?\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions to Update Lambda Function Layers via IAM Policy\nDESCRIPTION: This JSON defines an AWS IAM policy required to update Lambda function layers using the AWS SDK, as shown in the Node.js example. It grants permissions to get the function's configuration (`lambda:GetFunctionConfiguration`), update it (`lambda:UpdateFunctionConfiguration`), and get layer version details (`lambda:GetLayerVersion`) for specified Remotion render functions and any layer version.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/custom-layers.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Sid\": \"UpdateFunction\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"lambda:GetFunctionConfiguration\",\n      \"lambda:UpdateFunctionConfiguration\"\n    ],\n    \"Resource\": [\"arn:aws:lambda:*:*:function:remotion-render-*\"]\n  },\n  {\n    \"Sid\": \"GetOwnLayerVersion\",\n    \"Effect\": \"Allow\",\n    \"Action\": [\"lambda:GetLayerVersion\"],\n    \"Resource\": [\"*\"]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/paths via npm (Node.js Bash)\nDESCRIPTION: This bash snippet demonstrates how to install the @remotion/paths package in a Node.js project using npm. No specific runtime dependencies are required, and the command will add the functional SVG path utilities (with TypeScript support) to your project's node_modules. The only required parameter is the package name; the output is an updated package.json and the installed package in your project's environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/index.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @remotion/paths\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Remotion Versions – Bash\nDESCRIPTION: This bash command lists the current Remotion version(s) installed in your environment. It is useful for troubleshooting and reporting issues, as including your Remotion version helps maintainers understand your context. Requires Node.js and the ability to run the 'npx' command; outputs version info to the terminal.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ask-for-help.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion versions\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server - Bash\nDESCRIPTION: Runs the Next.js development server for local development. Uses the project's package.json' dev script, making the app accessible at localhost for testing, debugging, and iterative development.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app-tailwind/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n```\n\n----------------------------------------\n\nTITLE: Destroying the CDK Stack - Bash\nDESCRIPTION: Removes all AWS resources provisioned by the stack. This Bash command is used for cleanup when the Lambda function or associated resources are no longer needed. Requires sufficient deletion permissions in the AWS CLI profile; use with care as it will destroy live cloud infrastructure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx aws-cdk destroy\n```\n\n----------------------------------------\n\nTITLE: Invoking API Gateway Endpoint with JWT Token - Bash\nDESCRIPTION: Uses curl to invoke the deployed Lambda API Gateway endpoint, passing the Cognito IdToken as a Bearer Authorization header. The example uses a POST request but may need adapting to the actual API. The command expects a valid authentication token and endpoint URL from earlier steps.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://du7jfr6.execute-api.us-east-1.amazonaws.com/render' \\\n--header 'Authorization: Bearer eyJraWQiOiJGcUJFV1B1cHhxM0NXRko0RVN2..........'\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Process Linux Rendering via Remotion Config File (TypeScript)\nDESCRIPTION: Use the `Config.setChromiumMultiProcessInLinux()` method within your Remotion configuration file (e.g., `remotion.config.ts`) to programmatically set the multi-process mode for Chromium on Linux. Pass `true` to enable or `false` to disable multi-process rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-single-process.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nConfig.setChromiumMultiProcessInLinux()\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/shapes using pnpm - Bash\nDESCRIPTION: Installs the @remotion/shapes package using pnpm as the package manager. Requires Node.js and pnpm to be installed. This adds the utilities for generating SVG shapes to your JavaScript project and manages dependencies in pnpm-lock.yaml. Should be run from the project root.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/shapes/index.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @remotion/shapes\n```\n\n----------------------------------------\n\nTITLE: Illustrating Remotion Cloud Run Service Name Pattern\nDESCRIPTION: Shows the pattern used by Remotion to construct Cloud Run service names based on deployment parameters. The name encodes the Remotion version (with dots replaced by dashes), memory limit, CPU limit, and timeout duration in seconds.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/speculateservicename.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nremotion--3-3-96--mem2gi--cpu1-0--t-1900\n          ^^^^^^   ^^^     ^^^      ^^^\n            |       |       |        |-- Timeout in seconds\n            |       |       |----------- Cpu limit\n            |       |------------------- Memory limit\n            |--------------------------- Remotion version with dots replaced by dashes\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Path Errors with getPointAtLength() in TypeScript\nDESCRIPTION: This snippet shows how the `getPointAtLength` function handles invalid SVG path data. When provided with a malformed path string ('remotion'), the function throws an error indicating the path data is malformed. This demonstrates the function's error handling capability.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-point-at-length.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getPointAtLength } from \"@remotion/paths\";\n// ---cut---\ngetPointAtLength(\"remotion\", 50); // Error: Malformed path data: ...\n```\n\n----------------------------------------\n\nTITLE: Importing TableOfContents Component for Audio Docs - JavaScript\nDESCRIPTION: Imports the TableOfContents component from the audio documentation directory to provide an index of audio-related topics. This import is intended for use within an MDX file in a React-based documentation site. The dependency is the local project file './audio/TableOfContents', and the component is expected to render a menu or list. No customizable parameters, and requires the presence of the referenced TableOfContents module.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/using-audio.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {TableOfContents} from './audio/TableOfContents';\n```\n\n----------------------------------------\n\nTITLE: Checking Installed Remotion Versions using Remotion CLI - Bash\nDESCRIPTION: This Bash command uses the Remotion CLI to list all installed Remotion package versions in the current project. It is useful for verifying which versions are actually present, as installed versions may differ from those declared in package.json due to version ranges or dependency conflicts. The command expects 'npx' and 'remotion' to be available in the executing environment. Output includes a summary of installed Remotion packages and their versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/version-mismatch.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion versions\n```\n\n----------------------------------------\n\nTITLE: Embedding a Mux Video using a Custom React Component (JSX)\nDESCRIPTION: This JSX snippet demonstrates embedding a video hosted on Mux using a custom React component named `NewMuxVideo`. It utilizes the `muxId` prop to specify the video asset and an inline `style` prop to set the component's width to 100% of its container. This component is likely imported from '../src/components/MuxVideo' as shown earlier in the file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/success-stories/2023-11-09-Typeframes.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<NewMuxVideo muxId=\"VasLjYwvbjX8qD2Gr58ujP3Az726hsYHCEj8501uTdg00\" style={{\n  width: '100%'\n}}\n/>\n```\n\n----------------------------------------\n\nTITLE: Logging SVG Subpaths Array Items with getSubpaths() (TypeScript)\nDESCRIPTION: This code uses getSubpaths() from @remotion/paths to retrieve subpaths from an SVG path string and then logs each subpath to the console by array index. It depends on the same prerequisites and demonstrates how each subpath is output as a string, showing correspondence between input SVG commands and resulting array elements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/get-subpaths.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { getSubpaths } from \"@remotion/paths\";\n\nconst parts = getSubpaths(`\n  M 0 0 L 100 0\n  M 0 100 L 200 100\n`);\n\n// ---cut---\n\nconsole.log(parts[0]); // \"M 0 0 L 100 0\"\nconsole.log(parts[1]); // \"M 0 100 L 200 100\"\n```\n\n----------------------------------------\n\nTITLE: Building the Application for Production\nDESCRIPTION: Executes the 'build' script defined in `package.json`. This command processes the application source code, optimizes it, and bundles it into static assets suitable for production deployment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Cognito JWT Auth Token - Bash\nDESCRIPTION: Initiates authentication using Cognito's USER_PASSWORD_AUTH flow to retrieve an identity JWT token for authorized API access. Expects parameters: USERNAME and PASSWORD, along with the client ID. Output contains tokens for session management and API calls.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\naws cognito-idp initiate-auth \\\n  --auth-flow USER_PASSWORD_AUTH \\\n  --auth-parameters \\\n  USERNAME=\"sample@test.com\",PASSWORD=\"compLicat3d123\" \\\n  --client-id YOUR_USER_POOL_CLIENT_ID\n\n```\n\n----------------------------------------\n\nTITLE: Controlling Remotion Lambda via CLI (Bash)\nDESCRIPTION: This command demonstrates how to interact with and control Remotion Lambda functionalities using the command-line interface (CLI). It requires `npx` (Node Package Runner) and access to the `@remotion/lambda` package. Further details on specific CLI commands and options can be found in the linked CLI documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda\n```\n\n----------------------------------------\n\nTITLE: Creating a Cognito User - Bash\nDESCRIPTION: Registers a new user in the Cognito User Pool using AWS CLI, specifying client ID, username, and password for initial setup. This prepares for authentication with the deployed API. The user credentials must conform to Cognito pool password requirements.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naws cognito-idp sign-up \\\n  --client-id YOUR_USER_POOL_CLIENT_ID \\\n  --username \"sample@test.com\" \\\n  --password \"compLicat3d123\"\n```\n\n----------------------------------------\n\nTITLE: GCP API: Cloud Resource Manager\nDESCRIPTION: Identifies the necessary Google Cloud Platform API endpoint for managing cloud resources. This API must be enabled in the GCP project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ncloudresourcemanager.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of staticFile() with Current Directory Relative Path (TypeScript)\nDESCRIPTION: Shows an incorrect way to call `staticFile()` using a relative path prefixed with `./` (`./image.png`). Remotion requires specifying only the filename relative to the `public/` directory, without the `./` prefix.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/static-file-relative-paths.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"❌ File should not have ./ prefix\"\nimport { staticFile } from \"remotion\";\nstaticFile(\"./image.png\");\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering the Example Video Locally with Remotion CLI\nDESCRIPTION: Uses the Remotion CLI (via `npx`) to render the default video composition defined in the project locally. This generates the video file based on the React components without needing AWS.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion render\n```\n\n----------------------------------------\n\nTITLE: Installing Emoji Fonts in Dockerfile (Debian)\nDESCRIPTION: Installs the `fonts-noto-color-emoji` package using `apt-get` within the Debian-based Docker container. This adds support for rendering color emojis in Remotion videos.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/docker.mdx#_snippet_12\n\nLANGUAGE: docker\nCODE:\n```\nRUN apt-get install fonts-noto-color-emoji\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind and Related Dependencies (pnpm, Bash)\nDESCRIPTION: This pnpm command installs all required PostCSS and Tailwind v2 dependencies. Use this version if your project employs pnpm as the package manager. The packages ensure Remotion's build pipeline can process TailwindCSS.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-2.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i postcss-loader postcss postcss-preset-env tailwindcss@2 autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Running Remotion MCP Client via npx (Shell)\nDESCRIPTION: This shell command utilizes `npx` to download and execute the latest version of the Remotion Model Context Protocol (MCP) client package (`@remotion/mcp`). It's designed to be configured as a command within an AI editor (e.g., Cursor) to enable access to Remotion's documentation context for the AI features. The command ensures the latest client is always used without prior installation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ai/mcp.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @remotion/mcp@latest\n```\n\n----------------------------------------\n\nTITLE: Filtering Logs for a Specific Render Chunk in Remotion - Plaintext\nDESCRIPTION: This CloudWatch log filter pattern targets log entries associated with a particular chunk of a Remotion Lambda render. By adding 'chunk=<chunk-number>' to the filter, you can investigate issues for that segment of the render process. Replace [render-id] and the chunk number as applicable. No libraries or SDKs are required; use directly in the CloudWatch Logs interface to improve issue localization.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/troubleshooting/debug.mdx#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmethod=renderer,renderId=[render-id],chunk=12\n```\n\n----------------------------------------\n\nTITLE: Creating a Remotion Project with Tailwind Template via npm - Bash\nDESCRIPTION: This CLI command uses npx to initialize a new Remotion video project with TailwindCSS integration. The '--tailwind' flag configures the starter project to use Tailwind out of the box. Requires Node.js and npm. Run this command in the terminal to scaffold a new project that comes preconfigured for Tailwind utility classes. The output will be a new directory set up for Remotion video development with Tailwind styling ready to use.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-07-14-remotion-3-1.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-video --tailwind\n```\n\n----------------------------------------\n\nTITLE: Building the Remotion Project with PNPM (Shell)\nDESCRIPTION: Executes the build script defined in the project's `package.json` using pnpm. This command compiles source code, bundles assets, and prepares the project for development or testing. Should be run after installing dependencies. Dependency: pnpm, project build toolchain (e.g., TypeScript compiler, bundler).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Logging for the Remotion Player Component in TypeScript\nDESCRIPTION: Demonstrates how to activate detailed trace-level logging for the Remotion `<Player>` component by setting the `logLevel` prop to `\"trace\"`. This is useful for observing media mounting, loading, seeking, and buffering events during development to diagnose playback issues. It depends on React and the `<Player>` component from `@remotion/player`. Note that enabling this in production might cause slowdowns.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/playback-issues.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst otherProps = {\n  compositionHeight: 1080,\n  compositionWidth: 1920,\n  inputProps: {},\n  component: () => null,\n  fps: 30,\n  durationInFrames: 100,\n};\n\n// ---cut---\nimport React from 'react';\nimport {Player} from '@remotion/player';\n\nexport const MyApp: React.FC = () => {\n  return <Player {...otherProps} logLevel=\"trace\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cloud Run Services in a Region using TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to delete all deployed Cloud Run services within a specific Google Cloud region ('us-east1'). It first retrieves a list of services using `getServices` and then iterates through this list, calling `deleteService` for each service identified by its `serviceName`. This requires the `@remotion/cloudrun` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/deleteservice.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {deleteService, getServices} from '@remotion/cloudrun';\n\nconst services = await getServices({\n  region: 'us-east1',\n  compatibleOnly: false,\n});\nfor (const service of services) {\n  await deleteService({\n    region: 'us-east1',\n    serviceName: service.serviceName,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NVIDIA SMI Startup Service (Bash)\nDESCRIPTION: Creates a systemd service file (`nvidia-smi.service`) that runs the `nvidia-smi` command once at system startup. It then enables and starts this service to ensure the GPU state is initialized.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\necho '[Unit]\nDescription=Run nvidia-smi at system startup\n\n[Service]\nExecStart=/usr/bin/nvidia-smi\nType=oneshot\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target' | sudo tee /etc/systemd/system/nvidia-smi.service\nsudo systemctl enable nvidia-smi.service\nsudo systemctl start nvidia-smi.service\n```\n\n----------------------------------------\n\nTITLE: Displaying SIGKILL Error for Remotion Rust Process (txt)\nDESCRIPTION: This snippet shows an example error message indicating that the Remotion Rust compositor process was terminated unexpectedly with a `SIGKILL` signal. This typically occurs when the operating system force-quits the process due to excessive memory consumption or other critical resource issues.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/sigkill.mdx#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nCompositor quit with signal SIGKILL: [...]\n```\n\n----------------------------------------\n\nTITLE: Executing Remotion CLI Commands via PNPM Exec (Shell)\nDESCRIPTION: Shows how to test the Remotion CLI by navigating to `packages/examples` and using `pnpm exec remotion` followed by CLI commands like `compositions` (to list available compositions) or `render` (to render a specific composition like `ten-frame-tester`). Dependency: pnpm, Remotion CLI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/examples\n# Example - Get available compositions\npnpm exec remotion compositions\n# Example - Render command\npnpm exec remotion render ten-frame-tester --output ../../out/video.mp4\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of staticFile() Including 'public/' Prefix (TypeScript)\nDESCRIPTION: Demonstrates an incorrect call to `staticFile()` where the `public/` directory prefix is explicitly included in the path (`public/image.png`). Remotion automatically resolves paths relative to the `public/` folder, so the prefix is unnecessary and incorrect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/static-file-relative-paths.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"❌ File should not include the public/ prefix\"\nimport { staticFile } from \"remotion\";\nstaticFile(\"public/image.png\");\n```\n```\n\n----------------------------------------\n\nTITLE: Changing JSX Import Source in Remotion Webpack Config (TypeScript)\nDESCRIPTION: Overrides the Remotion Webpack configuration to change the JSX import source, targeting the 'esbuild' loader. It iterates through module rules and loader configurations using `map`, finds the one including 'esbuild', and modifies its `options.jsxImportSource` property to 'react'. Requires `Config` from `@remotion/cli/config`. Error suppression comments (`@ts-expect-error`) are used due to potential type complexities when manipulating nested configuration objects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/overwriting-webpack-config.mdx#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n\nConfig.overrideWebpackConfig((config) => {\n  return {\n    ...config,\n    module: {\n      ...config.module,\n      rules: config.module?.rules?.map((rule) => {\n        // @ts-expect-error\n        if (!rule?.use) {\n          return rule;\n        }\n\n        return {\n          // @ts-expect-error\n          ...rule,\n          // @ts-expect-error\n          use: rule?.use.map((use) => {\n            if (!use?.loader?.includes('esbuild')) {\n              return use;\n            }\n            return {\n              ...use,\n              options: {\n                ...use.options,\n                jsxImportSource: 'react',\n              },\n            };\n          }),\n        };\n      }),\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Image Format for Frame Rendering - Remotion Config API - TypeScript\nDESCRIPTION: Shows how to specify the image format for frame rendering in Remotion's TypeScript configuration file using setImageFormat(), which is deprecated in v4.0. Supports 'jpeg', 'png', or 'none' as options and requires '@remotion/cli/config'. The command line flag --image-format will override this setting. Place this code in 'remotion.config.ts'.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\\n// ---cut---\\nConfig.setImageFormat('png');\n```\n\n----------------------------------------\n\nTITLE: Removing Serverless Project in Bash\nDESCRIPTION: Executes the Serverless Framework command to remove the deployed application stack and associated resources from the AWS account. This should be run from the 'serverless-app' directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n serverless remove\n```\n\n----------------------------------------\n\nTITLE: Listing all available Google Fonts with getAvailableFonts - TypeScript\nDESCRIPTION: Illustrates how to use the getAvailableFonts function from the @remotion/google-fonts root package to retrieve a list of all supported Google Font packages. This API is useful for meta-programming, generating UIs, or building font pickers. The function requires no arguments and outputs an array or object listing available font names.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/google-fonts/index.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getAvailableFonts} from '@remotion/google-fonts';\n\nconsole.log(getAvailableFonts());\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials .env File Example - Bash\nDESCRIPTION: This snippet provides an example of a .env file used to store AWS access credentials for deployment. The variables AWS_KEY_1 and AWS_SECRET_1 (optionally *_2 for multiple accounts) must be filled with appropriate AWS IAM keys for the deployment scripts to authenticate. No direct dependencies, but used by scripts/tools that read environment variables from .env. Do not commit this file to source control.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nAWS_KEY_1=\nAWS_SECRET_1=\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests with PNPM (Shell)\nDESCRIPTION: Executes the test suite using the `test` script defined in `package.json`. This command can be run in the root directory to run all tests across the monorepo, or within a specific subpackage's directory to run only its tests. Dependency: pnpm, testing framework (e.g., Jest, Vitest).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Avoiding Custom Browser Path via Remotion API (Best Practice)\nDESCRIPTION: Advises against using the `browserExecutable` option in SSR APIs as a best practice. Sticking with Remotion's default browser management (using the automatically downloaded Chrome Headless Shell) helps maintain stability and compatibility with the framework, reducing potential rendering errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/chrome-headless-shell.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nbrowserExecutable\n```\n\n----------------------------------------\n\nTITLE: Running Captioning Script for a Specific Video\nDESCRIPTION: Executes the Node.js script `sub.mjs`, passing a specific video file path (replace `<path-to-video-file>`) as an argument. This generates captions only for the specified video file using Whisper.cpp.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tiktok/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nnode sub.mjs <path-to-video-file>\n```\n\n----------------------------------------\n\nTITLE: Updating React Dependencies to v19 (diff)\nDESCRIPTION: Shows the required version changes for the `react` and `react-dom` packages in a dependency file (e.g., `package.json`) to upgrade to React 19. This upgrade requires at least Remotion version `4.0.0`.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/react-19.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff\n- \"react\": \"18.3.1\"\n- \"react-dom\": \"18.3.1\"\n+ \"react\": \"19.0.0\"\n+ \"react-dom\": \"19.0.0\"\n```\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: List Storage Buckets\nDESCRIPTION: Specifies the IAM permission necessary to list existing Cloud Storage buckets. This helps prevent accidental overwriting or naming conflicts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nstorage.buckets.list\n```\n\n----------------------------------------\n\nTITLE: Modifying .gitignore to Include the Public Folder - diff\nDESCRIPTION: This snippet demonstrates how to comment out the line in the .gitignore file that ignores the public folder, allowing video recordings in public directories to be tracked by git. The change ensures that all media files such as mp4, webm, and mov are no longer ignored. No external dependencies are required, but the modification must be made within the project root's .gitignore file. Input is the diff representing the change, and the expected output is an updated .gitignore file permitting version control of public media assets.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/source-control.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n```diff title=\\\"Comment out this line\\\"\n- public/**/*.{mp4,webm,mov}\n+ # public/**/*.{mp4,webm,mov}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing onVideoFrame Callback in Remotion WebCodecs (TypeScript)\nDESCRIPTION: This code provides a TypeScript representation of the onVideoFrame callback for convertMedia() in @remotion/webcodecs. The callback receives individual VideoFrame objects during encoding, logs the frame, optionally modifies it (such as drawing to a canvas or applying transformations), and then returns the VideoFrame to be used for encoding. The function can be synchronous or asynchronous, and may return either the same frame or a new one (with required matching properties), supporting advanced frame-by-frame video processing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/convert-media.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ConvertMediaOnVideoFrame} from '@remotion/webcodecs';\\n\\nexport const onVideoFrame: ConvertMediaOnVideoFrame = ({frame}) => {\\n  console.log(frame);\\n  //           ^?\\n\\n  // Do something with the frame, for example:\\n  // - Draw to a canvas\\n  // - Modify the frame\\n\\n  // Then return the frame to be used for encoding.\\n  return frame;\\n};\n```\n\n----------------------------------------\n\nTITLE: Destroying AWS CDK Stack using Bash\nDESCRIPTION: Executes 'cdk destroy' in the 'apigw-sqs-app' directory, which deletes all AWS resources associated with the stack. Dependencies include that the CDK CLI and credentials are configured. No arguments are necessary; all resources defined in the stack will be irreversibly removed. Use this operation for project teardown or cleanup.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncdk destroy\n```\n\n----------------------------------------\n\nTITLE: Installing Rust using rustup (Shell)\nDESCRIPTION: This command downloads and executes the `rustup` installation script using `curl`. It sets up the Rust toolchain, including Cargo, which is required for building the Rust parts of Remotion. This is the first step for developers contributing to the Rust codebase.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/rust.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://sh.rustup.rs -sSf | sh\n```\n\n----------------------------------------\n\nTITLE: Ensuring No Remotion Version Mismatch When Consuming Libraries - JSON\nDESCRIPTION: This example demonstrates a package.json for a consumer project. When using a Remotion-based library (my-remotion-library), Remotion should be declared only at the root project level while the library omits Remotion as a direct dependency. This ensures there is no inadvertent version duplication or mismatch. The code also contains a descriptive comment highlighting that this pattern avoids conflicts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/version-mismatch.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dependencies\\\": {\\n    // No version mismatch will be introduced because `remotion`\\n    // is not a direct dependency of `my-remotion-library`\\n    \\\"remotion\\\": \\\"2.7.0\\\",\\n    \\\"my-remotion-library\\\": \\\"1.0.0\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting All Remotion Lambda Projects Using NPX - Shell\nDESCRIPTION: This shell snippet shows how to delete all Remotion Lambda 'sites' (projects) from your AWS account with NPX. The '-y' flag skips prompts to confirm, performing immediate deletion of all Remotion Lambda project sites. Prerequisite: Remotion Lambda CLI must be installed and correctly configured. Inputs: None (deletes all sites). Outputs: All Remotion Lambda sites are removed; previously rendered media may also be lost.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/uninstall.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion lambda sites rmall -y\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Environment Token - Shell\nDESCRIPTION: Sets the REMOTION_GITHUB_TOKEN environment variable in a .env file for authentication with GitHub's API. This token is essential for Remotion scripts to access stargazer data from the target repository. Replace 'github_pat_...' with a valid GitHub personal access token generated in the user's account. Input: A string token. Output: A properly configured environment variable in a .env file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-stargazer/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nREMOTION_GITHUB_TOKEN=github_pat_...\n```\n\n----------------------------------------\n\nTITLE: Synthesizing CDK Stack to CloudFormation using Bash\nDESCRIPTION: This command invokes the AWS CDK CLI to synthesize the defined CDK stack (within the `apigw-sqs-app` directory) into an AWS CloudFormation template. This allows reviewing the AWS resources that will be created before deploying them.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncdk synthesize\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Lambda Ruby Package - Bash\nDESCRIPTION: This snippet demonstrates how to install the @remotion/lambda-ruby NPM package using the exact version. To ensure compatibility, all 'remotion' and '@remotion/*' packages should use matching versions, with the caret (^) character removed to enforce precise versioning. This command must be run in a Node.js project environment with NPM available; output will add the package to the project's dependencies in package.json and install its files locally.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/lambda-ruby/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/lambda-ruby --save-exact\n```\n\n----------------------------------------\n\nTITLE: Default Video Track Handler Implementation in Remotion WebCodecs (TypeScript)\nDESCRIPTION: Presents the full TypeScript implementation for defaultOnVideoTrackHandler in @remotion/webcodecs, showing how to handle video track operations in convertMedia(). The code checks whether a video track can be copied, dropped, re-encoded, or if the operation should fail, based on the codec and track properties. Dependencies include @remotion/webcodecs for API types and helper functions; expected parameters include video track details, codec, containers, rotation, and resizing. Outputs are VideoOperation objects for copy, drop, reencode, or fail. The function is asynchronous and its logic adapts based on the input track and conversion request.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/default-on-video-track-handler.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {canReencodeVideoTrack, getDefaultVideoCodec, ConvertMediaOnVideoTrackHandler, VideoOperation} from '@remotion/webcodecs';\\n\\nexport const defaultOnVideoTrackHandler: ConvertMediaOnVideoTrackHandler = async ({track, defaultVideoCodec, logLevel, outputContainer, rotate, inputContainer, canCopyTrack, resizeOperation}): Promise<VideoOperation> => {\\n  if (canCopyTrack) {\\n    return Promise.resolve({type: 'copy'});\\n  }\\n\\n  // If for example exporting to audio, the default video codec will be null\\n  if (defaultVideoCodec === null) {\\n    return Promise.resolve({type: 'drop'});\\n  }\\n\\n  const canReencode = await canReencodeVideoTrack({\\n    videoCodec: defaultVideoCodec,\\n    track,\\n    resizeOperation,\\n    rotate,\\n  });\\n\\n  if (canReencode) {\\n    return Promise.resolve({\\n      type: 'reencode',\\n      videoCodec: defaultVideoCodec,\\n      rotation: rotate - track.rotation,\\n    });\\n  }\\n\\n  return Promise.resolve({type: 'fail'});\\n};\n```\n\n----------------------------------------\n\nTITLE: Example Deployment Logs - Bash\nDESCRIPTION: This snippet shows a sample output log from running the Lambda deployment script. Helps verify successful deployment and provides details such as the function name, region, S3 bucket, and serveUrl. No execution, purely informational.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nFound 1 accounts. Deploying...\nEnsured function=\"remotion-render-3-3-78-mem2048mb-disk2048mb-240sec\" to region=\"ap-southeast-2\" in account 1\nentryPoint /xxxx/code/remotion-serverless/remotion-app/src/index.tsx\nDeployed site to region=\"ap-southeast-2\" in account 1 with bucket=\"remotionlambda-apsoutheast2-xxxxx\" under serveUrl=\"https://remotionlambda-apsoutheast2-xxxxx.s3.ap-southeast-2.amazonaws.com/sites/remotion-render-app-3.3.78/index.html\"\n\n```\n\n----------------------------------------\n\nTITLE: Example AWS Security Token Error Message\nDESCRIPTION: This text snippet shows a common error message encountered when attempting to use an AWS region that is supported by Remotion but not enabled by default in the user's AWS account. Receiving this error signifies that the target region must be explicitly enabled within the AWS Management Console before deployments or operations can proceed in that region.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/region-selection.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThe security token included in the request is invalid\n```\n\n----------------------------------------\n\nTITLE: Checking Browser Support for @remotion/media-parser Features in TSX\nDESCRIPTION: This snippet shows how to check if the current browser environment supports the necessary APIs required by `@remotion/media-parser`. It verifies the presence of the global `fetch` function and the `resize` method on `ArrayBuffer.prototype`, which are essential for the library's operation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/webcodecs.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst canUseMediaParser = typeof fetch === 'function' && typeof new ArrayBuffer().resize === 'function';\n```\n\n----------------------------------------\n\nTITLE: Running the AWS Lambda Test Script (Shell)\nDESCRIPTION: Navigates to `packages/example` and executes the `runlambda.sh` shell script. This script rebuilds Lambda code, deploys a new function to AWS Lambda, and renders a test video using it. Requires AWS credentials configured in a `.env` file and necessary AWS permissions. Note: This script deletes existing Lambda functions in the account. Dependency: Shell environment, AWS CLI, pnpm, configured AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/example\nsh ./runlambda.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Port Visibility in GitHub Codespaces\nDESCRIPTION: This console command uses the GitHub CLI (`gh`) to set the visibility of port 5050 to public within a GitHub Codespace environment. This is necessary because the template includes a server component that needs to be accessible for Remotion Studio or renders to function correctly in this cloud environment. A warning advises caution as this exposes the port publicly.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-google/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n```console\ngh codespace ports visibility 5050:public -c $CODESPACE_NAME\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Lottie Animation Structure in JSON\nDESCRIPTION: This JSON object represents the structure of a Lottie animation, defining vector shapes, fills, transformations (position, scale, rotation, opacity), and grouping elements. It includes detailed path data ('ks') with vertices ('v'), in-tangents ('i'), and out-tangents ('o'), as well as color ('c'), opacity ('o'), and other properties for visual elements like fills ('fl') and shapes ('sh'). This structure is typically exported from animation software like Adobe After Effects and is used as input for Lottie players.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lottie/lottie-comp.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],\"o\":[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]],\"v\":[[195.999,130.324],[195.999,42.753],[106.531,42.753],[106.531,18.885],[195.999,18.885],[195.999,-58.687],[226.288,-58.687]],\"c\":false},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.779999976065,0.685999971278,0.745000023935,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[930.297,702.905],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 6\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":6,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[2.638,0.429],[42.793,6.726],[20.377,8.319],[15.643,12.377],[6.397,6.883],[5.804,8.142],[2.37,9.052],[-1.739,9.062],[0.707,-3.755],[-4.604,-10.68],[-8.299,-8.275],[-8.148,-6.966],[-9.192,-4.871],[-9.055,-3.645],[-10.814,-3.006],[-21.983,-0.186],[-33.222,-6.242],[19.264,21.159],[4.926,-0.498],[20.032,7.089],[15.272,36.222],[44.228,-50.773],[-11.176,-16.865],[-8.725,-9.545],[-10.181,-8.896],[-10.072,-5.378],[-11.096,-2.356],[-22.313,-4.26],[-10.031,-4.634],[-9.096,-6.915],[-13.836,-16.505],[-6.843,-18.04],[12.276,55.008]],\"o\":[[-42.745,-6.956],[-21.715,-3.4],[-18.17,-7.413],[-7.309,-5.798],[-6.766,-7.255],[-5.331,-7.471],[-2.335,-8.935],[0.72,-3.765],[-2.164,11.575],[4.726,10.961],[7.599,7.553],[7.969,6.801],[8.663,4.59],[10.435,4.201],[21.132,5.877],[33.738,0.285],[-7.597,-26.735],[-4.857,0.931],[-21.276,2.16],[-34.775,-12.308],[-72.595,-8.368],[5.846,19.534],[7.201,10.882],[9.164,10.021],[8.635,7.547],[10.078,5.39],[22.237,4.741],[10.792,2.067],[10.326,4.785],[16.989,12.881],[12.188,14.523],[38.1,-66.58],[-2.61,-0.584]],\"v\":[[175.772,-9.752],[46.589,-13.695],[-16.663,-31.75],[-67.94,-59.034],[-88.454,-78.177],[-108.3,-100.672],[-120.358,-126.349],[-120.343,-153.529],[-114.806,-152.451],[-111.797,-120.175],[-92.699,-92.411],[-70.09,-69.758],[-44.362,-52.122],[-17.466,-40.714],[14.404,-29.864],[79.317,-20.073],[181.054,-18.445],[140.597,-90.672],[125.937,-88.461],[63.853,-96.357],[-21.815,-169.169],[-195.92,-98.466],[-170.866,-43.57],[-146.642,-13.438],[-117.788,15.206],[-89.923,35.37],[-57.847,46.526],[9.546,56.433],[41.038,65.951],[70.078,83.933],[117.143,128.541],[145.874,177.536],[183.644,-8.216]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.877999997606,0.827000038297,0.859000052658,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[980.015,599.237],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 7\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":7,\"mn\":\"ADBE Vector Group\",\"hd\":false},{\"ty\":\"gr\",\"it\":[{\"ind\":0,\"ty\":\"sh\",\"ix\":1,\"ks\":{\"a\":0,\"k\":{\"i\":[[-68.084,139.48],[-148.947,-62.867],[129.952,-161.749],[66.604,45.96]],\"o\":[[59.198,-121.251],[151.696,64.031],[-96.433,120.042],[-54.781,-37.818]],\"v\":[[-206.553,-119.03],[99.096,-247.12],[144.686,138.579],[-168.034,264.027]],\"c\":true},\"ix\":2},\"nm\":\"Path 1\",\"mn\":\"ADBE Vector Shape - Group\",\"hd\":false},{\"ty\":\"fl\",\"c\":{\"a\":0,\"k\":[0.779999976065,0.685999971278,0.745000023935,1],\"ix\":4},\"o\":{\"a\":0,\"k\":100,\"ix\":5},\"r\":1,\"bm\":0,\"nm\":\"Fill 1\",\"mn\":\"ADBE Vector Graphic - Fill\",\"hd\":false},{\"ty\":\"tr\",\"p\":{\"a\":0,\"k\":[939.241,699.276],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100],\"ix\":3},\"r\":{\"a\":0,\"k\":0,\"ix\":6},\"o\":{\"a\":0,\"k\":100,\"ix\":7},\"sk\":{\"a\":0,\"k\":0,\"ix\":4},\"sa\":{\"a\":0,\"k\":0,\"ix\":5},\"nm\":\"Transform\"}],\"nm\":\"Group 8\",\"np\":2,\"cix\":2,\"bm\":0,\"ix\":8,\"mn\":\"ADBE Vector Group\",\"hd\":false}],\"ip\":0,\"op\":190,\"st\":0,\"bm\":0}],\"markers\":[]}\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion ESLint Plugin via NPM - Bash\nDESCRIPTION: This Bash command installs the @remotion/eslint-plugin package using npm and enforces exact versioning with the --save-exact flag. Ensure all remotion and @remotion/* packages are installed at the same version. The command does not require any additional parameters beyond those shown and outputs installed packages to package.json.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/eslint-plugin/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/eslint-plugin --save-exact\n```\n\n----------------------------------------\n\nTITLE: Removing All Sites Without User Confirmation Using Remotion Cloud Run CLI (Bash)\nDESCRIPTION: This snippet shows the Remotion Cloud Run CLI command with the -y flag, which automatically confirms deletion for all sites in the current region. It requires Node.js and Remotion CLI present in the environment. The -y flag eliminates interactive confirmation prompts, enabling fully automated bulk deletion. Input consists only of the CLI command and flags, and the output logs deletion actions directly without pause.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/rmall.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion cloudrun sites rmall -y\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/licensing via npm - Bash\nDESCRIPTION: This snippet provides the npm command necessary to install the @remotion/licensing package with an exact version. The usage of --save-exact ensures that the exact version specified at install time is saved in package.json, preventing automatic upgrades. This approach is recommended to maintain version consistency between remotion-related packages. The snippet requires a Node.js environment and npm installed. The input is the command line, and the output is the addition of the dependency in your project's package.json. Users must remove the ^ character from version numbers to avoid semver floating.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/licensing/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/licensing --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/layout-utils via npm (Bash)\nDESCRIPTION: This command installs the `@remotion/layout-utils` Node.js package using the npm package manager. The `--save-exact` flag ensures that the exact version specified is saved to the `package.json` file, which is recommended for Remotion projects to avoid version conflicts between related packages like `remotion` and `@remotion/*`. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/layout-utils/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install @remotion/layout-utils --save-exact\n```\n\n----------------------------------------\n\nTITLE: Adjusting package.json Side Effects for CSS (Tailwind v4)\nDESCRIPTION: Diff snippet showing the required modification in `package.json`. If `\"sideEffects\": false` is present, it must be changed to `\"sideEffects\": [\"*.css\"]` to prevent bundlers from tree-shaking CSS imports.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind.mdx#_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n{\n// Only if `\"sideEffects\": false` exists in your package.json.\n-  \"sideEffects\": false\n+  \"sideEffects\": [\"*.css\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Version using npx\nDESCRIPTION: Invokes the Remotion CLI's `upgrade` command via npx. This command checks for newer compatible versions of Remotion packages and automatically updates the project's dependencies and potentially necessary configuration files.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-javascript/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Ensuring FFmpeg Installation via Remotion CLI (Deprecated)\nDESCRIPTION: Executes the Remotion CLI command to check if the FFmpeg binary is installed and accessible. If not found, it downloads the appropriate binary from the internet. This command was useful for pre-installing FFmpeg before the first render attempt. It was part of Remotion v3.3 and removed in v4.0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/install.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion install ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Displaying Environment Variables in Cloud Shell (Bash)\nDESCRIPTION: Displays the contents of the `.env` file generated by the GCP setup script. This file contains necessary environment variables for configuring the Remotion Cloud Run integration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/setup.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat .env\n```\n\n----------------------------------------\n\nTITLE: Connecting to Remote EC2 Server via SSH - Bash\nDESCRIPTION: This command establishes an SSH connection to a remote Ubuntu-based EC2 instance using a private key (remotion.pem). It requires the remotion.pem file to have correct permissions and the username and IP to match the target server. Successful execution provides a terminal on the EC2 instance for further operations, such as issuing API requests or inspecting the service.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nssh -i \"remotion.pem\" ubuntu@example.com\n```\n\n----------------------------------------\n\nTITLE: Updating React and React DOM Package Versions\nDESCRIPTION: Shows the necessary updates for `react` and `react-dom` versions in `package.json` when upgrading to React 18. This involves changing the dependency versions from 17.x to 18.x.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/react-18.mdx#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- \"react\": \"17.0.1\"\n- \"react-dom\": \"17.0.1\"\n+ \"react\": \"18.2.0\"\n+ \"react-dom\": \"18.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect usage of useCurrentFrame() with Remotion Motion Blur in TypeScript\nDESCRIPTION: This TypeScript React snippet demonstrates the common mistake of using the useCurrentFrame() hook outside of the <CameraMotionBlur> component from Remotion. The key issue is that the motion blur effect does not work as expected because useCurrentFrame() is not called within the context manipulated by motion blur providers. No additional dependencies beyond remotion and @remotion/motion-blur are required. Input: None directly; Output: JSX with incorrect motion blur effect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/common-mistake.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {AbsoluteFill, useCurrentFrame} from 'remotion';\\nimport {CameraMotionBlur} from '@remotion/motion-blur';\\n\\nexport const MyComp = () => {\\n  const frame = useCurrentFrame();\\n\\n  return (\\n    <AbsoluteFill>\\n      <CameraMotionBlur>\\n        <AbsoluteFill\\n          style={{\\n            backgroundColor: 'red',\\n            justifyContent: 'center',\\n            alignItems: 'center',\\n            color: 'white',\\n            fontSize: frame,\\n          }}\\n        >\\n          A\\n        </AbsoluteFill>\\n      </CameraMotionBlur>\\n    </AbsoluteFill>\\n  );\\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.in Helper Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for the `Easing.in` helper function. It takes an existing easing function and returns a function that applies the easing in the forward direction (ease-in). This is often the default behavior for many base easing functions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nstatic in(easing: (t: number) => number): (t: number) => number;\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Architecture - Bash\nDESCRIPTION: This bash command prints the architecture of the currently active Node.js binary by evaluating the 'process.arch' property. It requires an installed Node.js runtime. The expected output is 'arm64' for native operation; any other value (such as 'x64') indicates that Node is not running natively on Apple Silicon.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/rosetta.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode -p process.arch\n```\n\n----------------------------------------\n\nTITLE: Inserting an Interactive Demo with Demo Component in MDX\nDESCRIPTION: Shows how to embed a Remotion interactive demo using the <Demo> component in MDX. The type prop specifies which demo to render (e.g., 'rect'). The demo must already be implemented in the Remotion docs components (in packages/docs/components/demos/index.tsx). This pattern allows for live, interactive visualizations within docs to illustrate concepts. The only required parameter is 'type', which controls the demo instance to render.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/docs.mdx#_snippet_3\n\nLANGUAGE: md\nCODE:\n```\n<Demo type=\\\"rect\\\"/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Beep on Finish using Remotion Config in TypeScript\nDESCRIPTION: Enables an audible beep sound when a render process finishes using `Config.setBeepOnFinish()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. Setting it to `true` enables the beep. This setting can be overridden by the `--beep-on-finish` command-line flag.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_29\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setBeepOnFinish(true);\n```\n\n----------------------------------------\n\nTITLE: Building Remotion Rust Binaries for All Platforms (Shell)\nDESCRIPTION: Executes the `build-all` script (likely defined in `package.json` within `packages/compositor`) using `bun`. This command triggers the cross-compilation process for the Rust components, generating binaries for all configured target platforms. These resulting artifacts are typically checked into Git.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/rust.mdx#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbun run build-all\n```\n\n----------------------------------------\n\nTITLE: Logging into Serverless Framework Dashboard - Bash\nDESCRIPTION: This Bash snippet runs the serverless login command, which authenticates the user with the Serverless Framework Dashboard. Requires the serverless CLI to be installed. Upon successful login, the local serverless session is associated with the user's serverless.com dashboard account.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nserverless login\n```\n\n----------------------------------------\n\nTITLE: Defining Remotion Dependencies with Optional Version Ranges in package.json - JSON\nDESCRIPTION: This code snippet demonstrates a package.json configuration where Remotion and its related packages are specified using version ranges with the caret (^) operator. It shows how allowing ranges can unintentionally permit version mismatches among related Remotion packages, which is discouraged. No external dependencies are required to interpret this JSON, but its usage can lead to inconsistent package versions. The 'dependencies' field lists package names mapped to version range specifiers.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/version-mismatch.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dependencies\\\": {\\n    \\\"remotion\\\": \\\"^2.6.12\\\",\\n    \\\"@remotion/player\\\": \\\"^2.6.12\\\",\\n    \\\"@remotion/gif\\\": \\\"^2.6.12\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding a YouTube Video Using React iframe Component (JavaScript/React)\nDESCRIPTION: This snippet shows how to embed a responsive YouTube video player using a React <iframe> component. The code includes inline styling to set the width to 100% and maintain a 16:9 aspect ratio, and sets various iframe attributes (like src, title, frameborder, allow, allowfullscreen) to support enhanced video features. This is typically used in documentation or UI components to demonstrate product features, and requires React to be available in the environment.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2023-07-03-remotion-4-0.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<iframe\n  style={{\n    width: '100%',\n    aspectRatio: '16 / 9',\n  }}\n  src=\"https://www.youtube.com/embed/S3C9wlPNhkQ\"\n  title=\"YouTube video player\"\n  frameborder=\"0\"\n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n  allowfullscreen\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Example Cognito Initiate-Auth Output - Bash\nDESCRIPTION: Illustrates the JSON output from Cognito after successful authentication, providing access, refresh, and ID tokens. The IdToken value is needed for subsequent API requests. Placeholders are used for brevity and security.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/example.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n{\n    \"ChallengeParameters\": {},\n    \"AuthenticationResult\": {\n        \"AccessToken\": \"eyJraWQiOiJGcUJ....\",\n        \"ExpiresIn\": 3600,\n        \"TokenType\": \"Bearer\",\n        \"RefreshToken\": \"eyJjdHkiOiJKV1QiLCJlbm...\",\n        \"IdToken\": \"eyJraWQiOiJCcjY3Rk5WdzRpYVVYVlpNdF...\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Delete Storage Objects\nDESCRIPTION: Specifies the IAM permission required to delete objects from Cloud Storage buckets. (Note: Full explanation marked as 'ToDo' in the original text).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nstorage.objects.delete\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping a Serverless Application from Template - Bash\nDESCRIPTION: This Bash command initializes a new Serverless Framework project using a remote template. 'serverless --template-url' creates the project structure according to the provided starter (here, TypeScript HTTP API example). Requires serverless CLI to be globally installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nserverless --template-url=https://github.com/serverless/examples/tree/v3/aws-node-http-api-typescript\n```\n\n----------------------------------------\n\nTITLE: Displaying Font Loading Timeout Error Message - diff\nDESCRIPTION: Shows a typical timeout error encountered when using @remotion/google-fonts with default settings. Demonstrates the message indicating delayRender was called but not cleared due to long font fetching operations. Useful for identifying and troubleshooting performance bottlenecks related to font loading.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/font-loading-errors.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- A delayRender() \\\"Fetching Inter font {\\\"style\\\":\\\"normal\\\",\\\"weight\\\":\\\"100\\\",\\\"subset\\\":\\\"cyrillic-ext\\\"}\\\" was called but not cleared after 58000ms.\\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to Application Directory on EC2 - Bash Commands\nDESCRIPTION: This snippet changes the current directory on the EC2 instance to 'ec2-remotion-lambda', where the application code should reside after upload. It assumes the code has been uploaded to the user's home directory. Dependency: The directory must exist before running the command.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/without-iam/ec2.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ec2-remotion-lambda\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Docker Official GPG Key - Bash\nDESCRIPTION: Installs necessary dependencies and downloads Docker's official GPG key, adding it to apt keyrings for secure repository access. Requires sudo, existing connectivity, and an Ubuntu-based system. Prepares the system for Docker installation by ensuring repository signatures can be validated.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n```\n\n----------------------------------------\n\nTITLE: Launching Remotion Studio in Regular Templates\nDESCRIPTION: Starts the Remotion Studio development server using the standard `npm start` script, typically configured in the `package.json` of regular Remotion templates. This opens the Studio interface in a web browser.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/studio.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Server and Studio (Regular Templates)\nDESCRIPTION: After scaffolding a Remotion project using a regular template (like 'Hello World'), this command starts the development server and the Remotion Studio. It assumes the project uses standard npm scripts.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/getting-started.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm run dev\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Development Preview using npm\nDESCRIPTION: Runs the 'dev' script defined in the project's `package.json` file using the npm script runner. For standard Remotion projects, this command launches the Remotion Studio, which provides a development server and a browser-based interface for live previewing, editing properties, and debugging the video composition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-overlay/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Starting Remotion Project Preview Server - Console\nDESCRIPTION: This script starts the Remotion development server, enabling live preview of video compositions. It should be executed from the project root after dependencies are installed. The preview server supports hot reload and live editing, and listens on a local port as configured in your project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tts-azure/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Inline Image with JSX Style\nDESCRIPTION: Embeds an image element inline using JSX. The `style` prop applies inline styles using a JSX object to set the height to 20 pixels and vertically align the image with the middle of the text. The `src` attribute points to the image file '/img/blue-heart.png'. This represents the blue heart icon associated with the Company License badge.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/support.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<img style={{height: 20, verticalAlign: \"middle\"}} src=\"/img/blue-heart.png\"/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Vue Wrapper Component for React Player (HTML/Vue)\nDESCRIPTION: Defines a Vue 3 component (`PlayerViewWrapper.vue`) using the Composition API (`<script setup>`). This component acts as a bridge, mounting and managing a React component (`PlayerView`) within a Vue application. It uses `createRoot` from `react-dom/client` to render the React component into a `div` element managed by Vue's `ref`. It watches props for changes and unmounts the React component when the Vue component is destroyed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/vue.mdx#_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<script lang=\"ts\" setup>\n  import {onBeforeUnmount, onMounted, ref, watch} from 'vue';\n  import {type PlayerSchema, PlayerView} from '@/remotion/PlayerView';\n  import {createRoot, type Root} from 'react-dom/client';\n  import * as React from 'react';\n\n  interface PlayerData {\n    data: PlayerSchema;\n  }\n\n  const playerRef = ref();\n  const reactRoot = ref();\n  let root: Root;\n  const emit = defineEmits(['paused']);\n\n  const props = defineProps<PlayerData>();\n\n  onMounted(() => {\n    root = createRoot(reactRoot.value);\n    render();\n  });\n\n  function render() {\n    root.render(\n      React.createElement(PlayerView, {\n        data: props.data,\n        playerRefInstance: playerRef,\n        onPaused: () => emit('paused'),\n      }),\n    );\n  }\n\n  watch(\n    () => playerRef,\n    (newData, oldData) => {\n      playerRef.value.play();\n    },\n    {deep: true},\n  );\n\n  watch(\n    () => props.data,\n    (newData, oldData) => {\n      render();\n    },\n    {deep: true},\n  );\n\n  onBeforeUnmount(() => {\n    if (root) {\n      root.unmount();\n    }\n  });\n</script>\n\n<template>\n  <div ref=\"reactRoot\"></div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: React Component: SVG Path Cutoff Example (TSX)\nDESCRIPTION: Defines a React functional component `ViewBoxExample` that renders an SVG element with a fixed viewBox ('0 0 1000 1000'). It includes a path element whose 'd' attribute specifies coordinates extending horizontally beyond the defined viewBox (from 0 to 1500), illustrating a common scenario where parts of the path will be visually cut off.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/extend-viewbox.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst viewBox = \"0 0 1000 1000\";\n\nexport const ViewBoxExample: React.FC = () => {\n  return (\n    <svg viewBox={viewBox}>\n      <path d={\"0 500 1500 500\"} stroke=\"black\" strokeWidth={4} />\n    </svg>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Remotion Cloud Run Sites (All Regions) using CLI\nDESCRIPTION: Executes the `sites ls` command with the `--all-regions` flag. This instructs the command to ignore the default or specified region and list all Remotion sites deployed across all available GCP regions associated with the configured project. The output format remains the same, detailing each site's name, bucket, region, and URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/cli/sites/ls.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx remotion cloudrun sites ls --all-regions\n```\n\n----------------------------------------\n\nTITLE: Declaring Tailwind Directives in Base Stylesheet (CSS)\nDESCRIPTION: This CSS file snippet is placed in src/style.css and introduces TailwindCSS v2 by including its three core directives: base, components, and utilities. The file must be present for Tailwind's styles to be injected and processed at build time. No further configuration is needed besides including this file in your main TypeScript/JSX file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-2.mdx#_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n```\n\n----------------------------------------\n\nTITLE: Listing Deployed Remotion Lambda Functions (Shell)\nDESCRIPTION: This command uses the Remotion CLI via `npx` to list AWS Lambda functions deployed for Remotion rendering within the selected AWS region. It outputs details such as function name, version, memory allocation, and timeout settings. Requires Node.js, npm/npx, and configured AWS credentials.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/functions/ls.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx remotion lambda functions ls\n```\n\n----------------------------------------\n\nTITLE: Discouraged: Using Next.js Image Tag with Remotion - TypeScript/React\nDESCRIPTION: This snippet demonstrates an incorrect usage pattern where Next.js's <Image> component is imported and used directly in a Remotion project. Using <Image> prevents Remotion from reliably determining when the image has loaded, which can result in uncontrolled rendering and flicker artifacts in exported videos. No additional dependencies are required for the code itself, but this approach lacks support for synchronization with Remotion's rendering lifecycle. The primary parameter is 'src', which supplies the image source. The main limitation is that this setup does not notify Remotion about image load completion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/nextjs-image.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Image from \"next/image\";\n\nconst myMarkup = <Image src=\"https://picsum.photos/200/300\"></Image>;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Remotion Video Playback Error Message\nDESCRIPTION: Shows the exact error message format displayed by Remotion when it fails to play a video source. This error indicates an issue loading or decoding the video file specified in the `src` attribute of a `<Video>` component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-playback-error.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- Error: Could not play video with src [source] [object MediaError]\n```\n\n----------------------------------------\n\nTITLE: Triggering FFprobe Auto-Install via Remotion CLI\nDESCRIPTION: This command uses the Remotion CLI (`npx remotion`) to manually trigger the download and installation of the FFprobe binary if it's not already found. Similar to the FFmpeg command, this helps in preparing the environment beforehand. Requires the `@remotion/cli` package.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ffmpeg.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion install ffprobe\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Instruction in Remotion Paths (TypeScript)\nDESCRIPTION: This snippet provides the comprehensive TypeScript definition for the Instruction type, which models all possible commands parsed from an SVG path string. Each union case represents a command with its required parameters, covering both uppercase (absolute) and lowercase (relative) SVG commands. The structured type definition helps consumers type-check their parsed instruction arrays. It requires TypeScript for interpretation and has no runtime behavior.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/parse-path.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport type Instruction =\n  | {\n      type: \"M\";\n      x: number;\n      y: number;\n    }\n  | {\n      type: \"L\";\n      x: number;\n      y: number;\n    }\n  | {\n      type: \"H\";\n      x: number;\n    }\n  | {\n      type: \"V\";\n      y: number;\n    }\n  | {\n      type: \"C\";\n      cp1x: number;\n      cp1y: number;\n      cp2x: number;\n      cp2y: number;\n      x: number;\n      y: number;\n    }\n  | {\n      type: \"S\";\n      cpx: number;\n      cpy: number;\n      x: number;\n      y: number;\n    }\n  | {\n      type: \"Q\";\n      cpx: number;\n      cpy: number;\n      x: number;\n      y: number;\n    }\n  | {\n      type: \"T\";\n      x: number;\n      y: number;\n    }\n  | {\n      type: \"A\";\n      rx: number;\n      ry: number;\n      xAxisRotation: number;\n      largeArcFlag: boolean;\n      sweepFlag: boolean;\n      x: number;\n      y: number;\n    }\n  | {\n      type: \"m\";\n      dx: number;\n      dy: number;\n    }\n  | {\n      type: \"l\";\n      dx: number;\n      dy: number;\n    }\n  | {\n      type: \"h\";\n      dx: number;\n    }\n  | {\n      type: \"v\";\n      dy: number;\n    }\n  | {\n      type: \"c\";\n      cp1dx: number;\n      cp1dy: number;\n      cp2dx: number;\n      cp2dy: number;\n      dx: number;\n      dy: number;\n    }\n  | {\n      type: \"s\";\n      cpdx: number;\n      cpdy: number;\n      dx: number;\n      dy: number;\n    }\n  | {\n      type: \"q\";\n      cpdx: number;\n      cpdy: number;\n      dx: number;\n      dy: number;\n    }\n  | {\n      type: \"t\";\n      dx: number;\n      dy: number;\n    }\n  | {\n      type: \"a\";\n      rx: number;\n      ry: number;\n      xAxisRotation: number;\n      largeArcFlag: boolean;\n      sweepFlag: boolean;\n      dx: number;\n      dy: number;\n    }\n  | {\n      type: \"Z\";\n    }\n  | {\n      type: \"z\";\n    };\n```\n\n----------------------------------------\n\nTITLE: Site Removal with Automatic Confirmation - Remotion Lambda CLI - Bash\nDESCRIPTION: This command uses the -y flag to perform site removal without interactive confirmation. Dependencies and setup are the same as standard site removal in the Remotion Lambda CLI. The -y or --yes parameter instructs the CLI to immediately delete the specified site(s) without prompting; inputs are the site IDs. Outputs are deletion logs for each file removed and a summary of freed storage. Use this mode in scripts or automated workflows where manual confirmation is undesirable. Caution: accidental deletions cannot be undone.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/cli/sites/rm.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion lambda sites rm abcdef -y\n```\n\n----------------------------------------\n\nTITLE: Adding Presentation Name to Bundle Array in TypeScript/TSX\nDESCRIPTION: This snippet shows how to register a new custom presentation within the `@remotion/transitions` package. The name of the new presentation ('yourPresentation') must be added to the `presentations` array located in the `bundle.ts` file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/presentation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n  const presentations = ['slide', 'flip', 'wipe', 'fade', ..., 'yourPresentation'];\n```\n\n----------------------------------------\n\nTITLE: Installing @remotion/tailwind Package using npm\nDESCRIPTION: This command installs the `@remotion/tailwind` package as a project dependency using npm. The `--save-exact` flag is crucial for Remotion projects to ensure that the exact version specified is installed, maintaining version consistency across all `remotion` and `@remotion/*` packages. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/tailwind/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/tailwind --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Preload Package with NPM - Bash\nDESCRIPTION: This snippet provides the npm command needed to install the @remotion/preload package with an exact version requirement, ensuring compatibility between Remotion packages. There are no additional parameters aside from the package name and installation flags. The output of the command will be the addition of the @remotion/preload package to your project's dependencies. Ensure to use this command in your project directory and to align all Remotion package versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/preload/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/preload --save-exact\n```\n\n----------------------------------------\n\nTITLE: Installing Remotion Shapes Package via npm (Bash)\nDESCRIPTION: This snippet shows how to install the @remotion/shapes package using npm with the --save-exact flag, ensuring an exact version match. The installation command is foundational for setting up the package in a project and aligns with Remotion's recommendation to use consistent package versions. No input parameters are required, and running this command will add the dependency to your project's package.json file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/shapes/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @remotion/shapes --save-exact\n```\n\n----------------------------------------\n\nTITLE: Importing the Instruction Type Definition from Remotion Paths (TypeScript)\nDESCRIPTION: This snippet shows how to import the Instruction type from the @remotion/paths package for type-checking the parsed result. It allows developers to ensure proper type safety when working with instruction arrays generated by parsePath. No parameters or outputs are shown, as this snippet is focused purely on type import, which requires TypeScript and @remotion/paths installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/paths/parse-path.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport type { Instruction } from \"@remotion/paths\";\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js v20 via NodeSource (Bash)\nDESCRIPTION: Adds the NodeSource repository GPG key and APT repository for Node.js version 20, updates the package list, and installs Node.js. This provides the necessary JavaScript runtime for Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\n\nNODE_MAJOR=20\necho \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main\" | sudo tee /etc/apt/sources.list.d/nodesource.list\n\nsudo apt-get update\nsudo apt-get install nodejs -y\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.quad Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.quad`. This is a quadratic easing function where the output position is proportional to the square of the elapsed time (`f(t) = t * t`), resulting in an ease-in effect.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nstatic quad(t): number\n```\n\n----------------------------------------\n\nTITLE: Discouraged: Using CSS background-image in Remotion (TSX)\nDESCRIPTION: Demonstrates the incorrect method of applying a background image using the CSS `backgroundImage` style property within a Remotion component. This approach is discouraged because Remotion cannot determine when the image has finished loading, potentially causing flickering during rendering.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/background-image.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst src = \"abc\";\n// ---cut---\nconst myMarkup = (\n  <div\n    style={{\n      backgroundImage: `url(${src})`,\n    }}\n  >\n    <p>Hello World</p>\n  </div>\n);\n```\n\n----------------------------------------\n\nTITLE: Logging Output to Console in TypeScript (twoslash, titled file.ts)\nDESCRIPTION: Demonstrates how to print a simple 'Hello World' message to the console in TypeScript, with enhanced type safety enabled using the 'twoslash' extension. This snippet serves as a basic example for authors to include and preview typed code in Remotion documentation. No external dependencies are required. The code expects no inputs and outputs a line to standard output when executed. The snippet is formatted for type-checking and preview within MDX docs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/docs.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconsole.log(\"Hello World\");\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.out Helper Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for the `Easing.out` helper function. It takes an existing easing function and returns a new function that applies the original easing in reverse (ease-out).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nstatic out(easing: (t: number) => number): (t: number) => number;\n```\n\n----------------------------------------\n\nTITLE: Embedding the FileExtensionTable Component (JSX)\nDESCRIPTION: This snippet inserts the FileExtensionTable component into the Markdown. It lists file extensions and their associated default codecs or containers relevant for Remotion's rendering capabilities, enabling users to see mapping and override rules. Requires the component definition.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/encoding.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<FileExtensionTable />\n```\n\n----------------------------------------\n\nTITLE: Importing the Layout Component (JavaScript/JSX)\nDESCRIPTION: This code imports the `Layout` component from a relative path within the project structure. This component is used later to render visual representations of different video layouts (landscape, square).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/layout.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Layout } from \"../../../components/recorder/layout\";\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: This command uses Node Package Manager (npm) to install all the necessary dependencies defined in the project's `package.json` file. This is typically the first step after cloning or setting up a new Node.js project like Remotion.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-tiktok/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using npm\nDESCRIPTION: Installs all the necessary project dependencies defined in the `package.json` file using the Node Package Manager (npm). This command should be run first after cloning or downloading the starter kit.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining a Minimal React Component - TypeScript/React\nDESCRIPTION: This snippet defines a simple functional React component, BlueSquare, as a TypeScript arrow function returning an empty div. It may serve as a visual element in the frozen frame examples without external dependencies. The component does not accept any props and has no side effects, making it a generic building block for UI compositions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/freeze.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst BlueSquare: React.FC = () => <div></div>\n// - BlueSquare\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Create Cloud Run Services\nDESCRIPTION: Specifies the IAM permission necessary to deploy new Cloud Run services or modify the configuration of existing ones.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nrun.services.create\n```\n\n----------------------------------------\n\nTITLE: Removing .env File - Bash\nDESCRIPTION: This command deletes the .env file from the current directory in a secure manner. It assumes you have the correct permissions to remove files. No external dependencies beyond Bash's rm utility. Use with caution, as this action is irreversible and may impact any processes relying on the .env file.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cloudrun/generate-env.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm .env\n```\n\n----------------------------------------\n\nTITLE: Overriding FFmpeg Command using Remotion Config in TypeScript\nDESCRIPTION: Allows modification of the FFmpeg command arguments used internally by Remotion via `Config.overrideFfmpegCommand()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. The function receives an object with command details (type, args) and must return the modified arguments array. This example injects custom FFmpeg options; use with caution as it's considered fragile and may break with updates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_34\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.overrideFfmpegCommand(({args}) => {\n  // Define the custom FFmpeg options as an array of strings\n  const customFfmpegOptions = ['-profile:v', 'main', '-video_track_timescale', '90000', '-color_primaries', 'bt709', '-color_trc', 'bt709', '-strict', 'experimental'];\n  // The customFfmpegOptions are inserted before the last element to ensure\n  // they appear before the ffmpeg's output path\n  args.splice(args.length - 1, 0, ...customFfmpegOptions);\n  return args;\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of staticFile() with Parent Directory Relative Path (TypeScript)\nDESCRIPTION: Demonstrates an incorrect attempt to use Remotion's `staticFile()` function by providing a relative path that navigates up from the current directory (`../public/image.png`). This approach is not supported and will result in an error.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/static-file-relative-paths.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n```tsx twoslash title=\"❌ Relative path\"\nimport { staticFile } from \"remotion\";\nstaticFile(\"../public/image.png\");\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering a Placeholder BlueSquare Component (React/TypeScript)\nDESCRIPTION: Illustrates rendering the previously defined BlueSquare component within a parent MyVideo functional component. This example uses TypeScript and React and assumes BlueSquare was imported or defined earlier. There are no external dependencies apart from React.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/sequence.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// @include: example-BlueSquare\n// ---cut---\nconst MyVideo = () => {\n  return <BlueSquare />;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Package Manager Install Commands for Dependency Management in Shell\nDESCRIPTION: This snippet instructs the user to run either 'yarn', 'npm i', or 'pnpm i' to install project dependencies after updating package versions. These commands are typically executed in a terminal and require the respective package manager to be installed. The purpose is to ensure package.json changes are applied and updated in node_modules, enabling the use of the intended Remotion prerelease.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/prereleases.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm i\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Importing the ConvertMediaContainer Type from Remotion WebCodecs (TypeScript)\nDESCRIPTION: This snippet shows how to import the ConvertMediaContainer TypeScript type from the @remotion/webcodecs package, allowing developers to annotate variables or function parameters with the correct set of possible container types. Useful for type safety and autocompletion, this requires a TypeScript environment with the @remotion/webcodecs package. No runtime logic is present; it's for static typing only.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/webcodecs/get-available-containers.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type {ConvertMediaContainer} from '@remotion/webcodecs';\n//                 ^?\n```\n\n----------------------------------------\n\nTITLE: Importing ParseMediaProgress Type for Progress Callback with Remotion Media Parser (TypeScript)\nDESCRIPTION: This short code imports the ParseMediaProgress type from @remotion/media-parser, to be used as the type for the parameter of the onParseProgress callback in parseMedia. It assists with type safety when handling progress updates during media parsing. Useful for developers extending the parser with their own progress handling logic.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/parse-media.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {ParseMediaProgress} from '@remotion/media-parser';\\n//          ^?\n```\n\n----------------------------------------\n\nTITLE: Rendering SystemPrompt component - JSX\nDESCRIPTION: This snippet renders the SystemPrompt React component, presumably displaying the prompt content relevant to instructing LLMs on Remotion. It is used within a Markdown or MDX file, so it integrates JSX. The component is used with no props, assuming all requisite data is encapsulated within or fetched by the component itself. No inputs are expected from the rendering side, and the primary output is UI rendering within documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ai/system-prompt.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SystemPrompt />\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.bounce Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.bounce`. This function simulates a bouncing effect, typically used for ease-out animations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nstatic bounce(t): number\n```\n\n----------------------------------------\n\nTITLE: Initializing a Remotion Project via Yarn - Bash\nDESCRIPTION: Initializes a new Remotion video project using yarn with the blank template. Prerequisites include Node.js and yarn. This command sets up the Remotion project locally and doesn't require other parameters. Output is a new workspace for Remotion animations.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/learn/2022-12-22-apple-wow.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create video --blank\n```\n\n----------------------------------------\n\nTITLE: Setting Up NVIDIA Container Toolkit - Bash\nDESCRIPTION: This bash sequence downloads and adds the NVIDIA container toolkit keyring and repository, then updates the package list on Ubuntu-based systems. Required for enabling GPU support in Docker containers. Dependencies include sudo privileges, curl, sed, and apt. Inputs include system shell access and connectivity to NVIDIA repositories; outputs are updated keyrings and apt sources for NVIDIA container support.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/cloud-gpu-docker.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg\ncurl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Writing JavaScript Function for Caption Autocorrect - JavaScript\nDESCRIPTION: Shows the option to write a JavaScript function intended to fix common misspellings in video captions during editing. To use this capability, knowledge of JavaScript functions and how they interact with the caption editor UI is required. The implementation expects the user to define custom logic for correction; inputs are typically strings (captions), and outputs are the corrected string. There may be constraints on the types of errors that can be programmatically fixed and integration with the Remotion Recorder UI.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Write a JavaScript function to fix common misspellings\n\n```\n\n----------------------------------------\n\nTITLE: Starting the Application in Production Mode (Post-Build)\nDESCRIPTION: Executes the 'dev' script defined in `package.json`, intended here to start the application using the production build artifacts generated by `npm run build`. Note: Using a 'dev' script for production might be unconventional; typically a 'start' script serves this purpose.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-react-router/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Rendering Player Guide Component in React/MDX\nDESCRIPTION: This JSX snippet renders the previously imported `PlayerGuide` React component. It is responsible for displaying the main content or guide section for the Remotion Player documentation on the page.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/installation.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<PlayerGuide />\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Repository using Git\nDESCRIPTION: This command clones the `remotion-serverless` repository from GitHub, which contains the example projects needed for the SQS integration guide.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/sqs.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/alexfernandez803/remotion-serverless\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion SDK Version - Bash\nDESCRIPTION: Updates Remotion and related dependencies to the latest version using the Remotion CLI. Necessary for accessing new features, bug fixes, and compatibility with updated project templates.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app-tailwind/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion upgrade\n\n```\n\n----------------------------------------\n\nTITLE: Measuring and Adjusting DOM Dimensions via Fixed-Width Measurer in React (TypeScript, Pre-v4.0.111 Remotion)\nDESCRIPTION: This snippet offers a workaround for accurately measuring DOM node dimensions in Remotion versions prior to v4.0.111. It introduces an invisible, fixed-width element (the 'measurer') to deduce the scale factor applied to the container by comparing the measured pixel width to the expected width. The measured node's width and height are then multiplied by this scale factor to approximate their true rendered values. Required dependencies are React (useRef, useEffect, useState). Limitations include the need for the measurer to render off-screen and potential inaccuracy if transforms change dynamically. Output is an object with corrected width and height, and both the element to measure and the measurer must be present in the DOM.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/measuring.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useCallback, useEffect, useState, useRef } from \"react\";\n\nconst MEASURER_SIZE = 10;\n\nexport const MyComponent = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const measurer = useRef<HTMLDivElement>(null);\n\n  const [dimensions, setDimensions] = useState<{\n    correctedHeight: number;\n    correctedWidth: number;\n  } | null>(null);\n\n  useEffect(() => {\n    if (!ref.current || !measurer.current) {\n      return;\n    }\n\n    const rect = ref.current.getBoundingClientRect();\n    const measurerRect = measurer.current.getBoundingClientRect();\n    const scale = measurerRect.width / MEASURER_SIZE;\n\n    setDimensions({\n      correctedHeight: rect.height * scale,\n      correctedWidth: rect.width * scale,\n    });\n  }, []);\n\n  return (\n    <div>\n      <div ref={ref}>Hello World!</div>\n      <div\n        ref={measurer}\n        style={{\n          width: MEASURER_SIZE,\n          position: \"fixed\",\n          top: -99999,\n        }}\n      />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Starting the @remotion/player Testbed (Shell)\nDESCRIPTION: Navigates into the `packages/player-example` directory and runs the `dev` script via pnpm. This starts a development server specifically for testing and developing the `@remotion/player` component. Dependency: pnpm, Node.js.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/player-example\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu 24.04 using Bash\nDESCRIPTION: Uses the `apt install` command to install required shared libraries for Remotion's Chrome Headless Shell on Ubuntu 24.04. These libraries include essentials for networking (libnss3), accessibility (libatk1.0-0, libatk-bridge2.0-0), audio (libasound2t64), display management (libxrandr2, libxkbcommon-dev, libxfixes3, libxcomposite1, libxdamage1, libgbm-dev), printing (libcups2), and graphics rendering (libcairo2, libpango-1.0-0).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/miscellaneous/linux-dependencies.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install -y \\\n  libnss3 \\\n  libdbus-1-3 \\\n  libatk1.0-0 \\\n  libasound2t64 \\\n  libxrandr2 \\\n  libxkbcommon-dev \\\n  libxfixes3 \\\n  libxcomposite1 \\\n  libxdamage1 \\\n  libgbm-dev \\\n  libcups2 \\\n  libcairo2 \\\n  libpango-1.0-0 \\\n  libatk-bridge2.0-0\n```\n\n----------------------------------------\n\nTITLE: Misusing staticFile() with Remote URLs in Remotion - TypeScript\nDESCRIPTION: This code snippet demonstrates an incorrect usage of the staticFile() helper function from the Remotion library, where a remote URL is wrapped in staticFile() when rendering an Img component. Remotion throws an error because staticFile() is only designed for local, statically-hosted assets. This pattern illustrates a common mistake; the 'staticFile' import is unnecessary in this context. Dependencies: Remotion library. Key parameter: 'src' expects either the output of staticFile() (for local files) or a remote URL directly. Limitation: Do not use staticFile() for external URLs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/static-file-remote-urls.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Img, staticFile } from \\\"remotion\\\";\n\nconst MyComp = () => {\n  return <Img src={staticFile(\\\"https://example.com/image.png\\\")} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Serverless App - Bash\nDESCRIPTION: This bash snippet executes npm update in the current directory, which updates all installed npm modules to their latest compatible versions according to package.json and package-lock.json. Requires npm and Node.js. Updates dependencies for the serverless-app.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/serverless-framework-integration.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpm update\n```\n\n----------------------------------------\n\nTITLE: Laying out Scene Type Examples using JSX Flexbox\nDESCRIPTION: This JSX snippet uses nested div elements with inline styles to create a horizontal flexbox layout. It displays three examples (image and caption) of different scene types (Title, Video Scene, Endcard) side-by-side, utilizing flex properties for alignment and spacing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/editing/scenes.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div style={{\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'space-around',\n}}>\n  <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: 6,\n  }}>\n    <img src=\"/recorder/titlecard-example.png\" width=\"250\" height=\"250\" />\n    <div>Title</div>\n  </div>\n  <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: 6,\n  }}>\n    <img src=\"/recorder/videoscene-example.png\" width=\"250\" height=\"250\" />\n    <div>Video Scene</div>\n  </div>\n  <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    gap: 6,\n  }}>\n    <img src=\"/recorder/endcard-example.png\" width=\"250\" height=\"250\" />\n    <div>Endcard</div>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering a React Component for Presentations\nDESCRIPTION: This JSX snippet imports the `Presentations` component from a relative path (`../../../components/TableOfContents/transitions/presentations`) and then renders it. This component is likely used within the documentation page to dynamically generate a table of contents or list related to Remotion presentation transitions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/presentations/index.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Presentations } from \"../../../components/TableOfContents/transitions/presentations\";\n\n<Presentations />\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Package via NPX (Bash)\nDESCRIPTION: Command to upgrade the Remotion CLI and related packages to the latest version (required v3.3.87 or later). This upgrade includes changes necessary to comply with new AWS S3 bucket creation policies. Running this command is the first step in resolving the bucket creation errors.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/s3-public-access.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Using TableOfContents Component in MDX/JSX\nDESCRIPTION: Renders a custom `<TableOfContents />` component, likely specific to the Remotion documentation setup (MDX/Docusaurus). This component dynamically generates a table of contents based on the headings or API sections within the current documentation scope.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animated-emoji/index.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<TableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Remotion 1.1 Build Performance (Bash)\nDESCRIPTION: This snippet uses the `hyperfine` command-line tool to benchmark the execution time of `npm run build` for a Remotion 1.1 project. It runs the command at least 5 times, specifying overwrite behavior and a concurrency of 16. The output shows the mean time and standard deviation, providing a baseline for performance comparison.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2021-02-15-remotion-1-3.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhyperfine --min-runs 5  'npm run build -- --overwrite --concurrency=16'\nBenchmark #1: npm run build -- --overwrite --concurrency=16\n  Time (mean ± σ):     98.972 s ±  0.650 s    [User: 123.329 s, System: 10.103 s]\n  Range (min … max):   97.951 s … 99.540 s    5 runs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Video Metadata using Remotion Renderer in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import and invoke getVideoMetadata from the @remotion/renderer package to asynchronously fetch metadata from a local video file. It expects an absolute path to the video file (local only, URLs unsupported) and returns an object containing properties such as width, height, fps, duration, codec, seeking support, color space, audio codec, and pixel format. It requires Node.js or Bun as the runtime environment and does not operate in browsers. The function is deprecated in favor of parseMedia().\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/get-video-metadata.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getVideoMetadata, VideoMetadata} from '@remotion/renderer';\n\nconst videoMetadata: VideoMetadata = await getVideoMetadata('/Users/john/Documents/bunny.mp4');\n\nconst {width, height, fps, durationInSeconds, codec, supportsSeeking, colorSpace, audioCodec, audioFileExtension, pixelFormat} = videoMetadata;\n```\n\n----------------------------------------\n\nTITLE: Rendering the API Table of Contents (JSX)\nDESCRIPTION: Renders the custom `TableOfContents` component that was imported earlier. This component dynamically generates and displays the table of contents specific to the `@remotion/transitions` API documentation section.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/index.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<TableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Rendering TableOfContents Component in JSX\nDESCRIPTION: This JSX snippet renders the `TableOfContents` component that was previously imported. It uses the standard JSX self-closing tag syntax. The component is expected to render the actual table of contents structure onto the page where this code is placed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/api.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Rendering Player Table of Contents Component in React/MDX\nDESCRIPTION: This JSX snippet renders the previously imported `PlayerTableOfContents` React component. Its purpose is to dynamically generate and display a table of contents relevant to the Remotion Player documentation within the page.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/installation.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<PlayerTableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Importing Theme Tabs for MDX Documentation - JavaScript\nDESCRIPTION: Imports the Tabs and TabItem components from a theme package for use in the MDX documentation layout. These React components are dependencies commonly used for creating tabbed navigation in MDX-based documentation. There are no parameters; the imports must be used within an MDX-supported context such as Docusaurus. No direct input or output is present, and the snippet is functional within MDX/JavaScript documentation projects only.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/using-audio.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Handling URI-Unsafe Characters Before v4.0 in staticFile (TypeScript)\nDESCRIPTION: This snippet illustrates how staticFile() handled file paths with URI-unsafe characters in versions before v4.0. It demonstrates that passing such characters directly would not encode them, potentially leading to incorrect asset resolution. Inputs with characters like # would result in truncated URLs, so caution was needed when referencing such files before upgrading to v4.0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/staticfile.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nstaticFile(\"my-image#portrait.png\"); //output: \"/my-image#portrait.png\"\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Create Storage Objects\nDESCRIPTION: Specifies the IAM permission required to upload new objects (files) into Cloud Storage buckets. This includes bundled sites, render outputs, and potentially logs.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nstorage.objects.create\n```\n\n----------------------------------------\n\nTITLE: Importing Redirect Component and Using Redirect in React - JavaScript\nDESCRIPTION: This snippet demonstrates importing a custom Redirect component from a relative path and using it in a React file to redirect the user's navigation to a new documentation URL. The Redirect component is likely responsible for handling client-side navigation within a single-page application or documentation site. No additional dependencies are shown beyond the imported Redirect module, which must accept a 'redirect' prop for specifying the target URL.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/downloadvideo.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Redirect from '../../components/Redirect';\n\nThis page has moved. Redirecting...\n\n<Redirect redirect=\"/docs/lambda/downloadmedia\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - Console\nDESCRIPTION: Installs all required dependencies defined in the package.json for the Remotion project using the Node Package Manager (npm). Run this before developing or running any commands to ensure all libraries and tools are available. Outputs a fully prepared node_modules directory; requires Node.js and npm to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-code-hike/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Referencing the `<Trail>` Alternative Component in Remotion (JSX)\nDESCRIPTION: References the `<Trail>` component, which is suggested as a replacement for the deprecated `<MotionBlur>`. This component is likely used for creating trailing visual effects that can simulate motion blur.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/motion-blur.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Trail>\n```\n\n----------------------------------------\n\nTITLE: Installing Tailwind and Related Dependencies (npm, Bash)\nDESCRIPTION: This shell command installs the necessary dependencies for legacy TailwindCSS v2 integration using npm. It includes postcss-loader, postcss, postcss-preset-env, tailwindcss version 2, and autoprefixer, all required for the PostCSS pipeline. This should be executed in the root directory of your Remotion project before further configuration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/tailwind-2.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i postcss-loader postcss postcss-preset-env tailwindcss@2 autoprefixer\n```\n\n----------------------------------------\n\nTITLE: Using the Deprecated `<MotionBlur>` Component in Remotion (JSX)\nDESCRIPTION: References the `<MotionBlur>` component in Remotion. The surrounding text indicates this component is deprecated and should no longer be used. It was originally intended for applying motion blur effects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/motion-blur.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MotionBlur>\n```\n\n----------------------------------------\n\nTITLE: Importing and Embedding a Table of Contents Component - React JavaScript\nDESCRIPTION: Imports the TableOfContents React component from a local module and renders it within the page layout. This enables automatic generation of section links or navigation based on article structure. The snippet assumes the presence of the TableOfContents component defined in a sibling file and requires a React environment configured with ES module support.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/ai/index.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {TableOfContents} from './TableOfContents';\n\n<TableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Chromium Launch Error Log Output\nDESCRIPTION: Displays an error message indicating a failure to launch the Chromium browser process within AWS Lambda. This specific error relates to a symbol (`__pthread_attr_copy`) not being found due to library mismatches between the Lambda environment and the Remotion layer, specifically triggered by an AWS update to the Node.js 14 stack's glibc library. The '2022-02-14' update addresses this issue by removing the problematic shared object from the layer.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/changelog.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nError: Failed to launch the browser process!\\n/opt/bin/chromium: relocation error: /lib64/librt.so.1: symbol \\_\\_pthread_attr_copy, version GLIBC_PRIVATE not defined in file libpthread.so.0 with link time reference\n```\n\n----------------------------------------\n\nTITLE: Illustrating Remotion Audio Playback Error Message\nDESCRIPTION: Shows the exact error message format displayed by Remotion when it fails to play an audio source. This error indicates an issue loading or decoding the audio file specified in the `src` attribute of an `<Audio>` component.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-playback-error.mdx#_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- Error: Could not play audio with src [source] [object MediaError]\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation with Motion Canvas API in TSX\nDESCRIPTION: This snippet illustrates the same animation (circle color change and horizontal movement) using Motion Canvas's imperative API. It defines a 2D scene using `makeScene2D`. A `Circle` component is created using `createRef` and added to the view. Animations are defined sequentially using `yield*` with generator functions. The `fill` method tweens the color over 2 seconds (assuming default framerate), and the `spring` function animates the circle's x-position.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/compare/motion-canvas.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeScene2D } from \"@motion-canvas/2d\";\nimport { Circle } from \"@motion-canvas/2d/lib/components\";\nimport { SmoothSpring, spring } from \"@motion-canvas/core/lib/tweening\";\nimport { createRef } from \"@motion-canvas/core/lib/utils\";\n\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n\n  view.add(<Circle ref={circle} size={200} fill={\"#e6a700\"} />);\n\n  yield* circle().fill(\"#e13238\", 2);\n  yield* spring(SmoothSpring, 0, 300, (value) => circle().position.x(value));\n});\n```\n\n----------------------------------------\n\nTITLE: Importing DragAndDropDemo Component in JavaScript/JSX\nDESCRIPTION: This code snippet imports the `DragAndDropDemo` component from a relative file path './Demo'. This component is presumably used later in the document to demonstrate the drag and drop functionality within the Remotion Player. It utilizes ES6 module import syntax common in React projects.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {DragAndDropDemo} from './Demo';\n```\n\n----------------------------------------\n\nTITLE: Running Font Generation Script using Bun (Shell)\nDESCRIPTION: Executes the font generation script defined in the project's `package.json` (aliased as 'generate') using the Bun runtime. This command updates the Google Font list, potentially requiring manual filtering of incompatible fonts in `filtered-fonts.ts`. It depends on the `GOOGLE_FONTS_API_KEY` environment variable being set.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/google-fonts/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbun run generate\n```\n\n----------------------------------------\n\nTITLE: Defining the Easing.step0 Function Signature (JSX)\nDESCRIPTION: Provides the static method signature for `Easing.step0`. This is a stepping function that returns 1 for any positive input value `n`, otherwise 0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/easing.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nstatic step0(n): number\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Theme Components (JavaScript/JSX)\nDESCRIPTION: Imports the `Tabs` and `TabItem` components from the `@theme/Tabs` module. These components are part of the Docusaurus theme system and are typically used to create interactive tabbed content within documentation pages.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport TabItem from \"@theme/TabItem\";\n```\n\n----------------------------------------\n\nTITLE: Generating Remotion Recorder Captions via CLI using Bun (Bash)\nDESCRIPTION: Executes the `sub.ts` script using the Bun runtime to generate captions for external recordings. This command processes files prefixed with `webcam` in the relevant directory and outputs the generated captions as JSON files into `public/<composition-id>/sub[timestamp].json`. Requires Bun and Whisper.cpp to be installed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/recorder/captions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun sub.ts\n```\n\n----------------------------------------\n\nTITLE: Starting the Remotion Testbed Example (Shell)\nDESCRIPTION: Navigates to the `packages/example` directory and starts the development server for the Testbed application using the `dev` script defined in its `package.json`. This allows developers to visually test Remotion components and compositions. Dependency: pnpm, Node.js.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/index.mdx#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/example\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using the Installation Component (JSX)\nDESCRIPTION: Renders a custom `Installation` component, passing the package name `@remotion/transitions` as the `pkg` prop. This reusable component is expected to display standardized installation commands (like npm or yarn install) for the specified package, simplifying documentation maintenance.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/transitions/index.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation pkg=\"@remotion/transitions\"/>\n```\n\n----------------------------------------\n\nTITLE: Sample Output from Remotion GPU Check (Text)\nDESCRIPTION: This example output demonstrates the information provided by the `npx remotion gpu` command. It details the status (e.g., 'Hardware accelerated', 'Enabled', 'Disabled') of various graphics rendering and processing features within the Chrome browser instance used by Remotion, helping users understand the GPU configuration. Note that the format may change between versions and should not be used for automated parsing.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/gpu.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCanvas: Hardware accelerated\nCanvas out-of-process rasterization: Enabled\nDirect Rendering Display Compositor: Disabled\nCompositing: Hardware accelerated\nMultiple Raster Threads: Enabled\nOpenGL: Enabled\nRasterization: Hardware accelerated\nRaw Draw: Disabled\nSkia Graphite: Disabled\nVideo Decode: Hardware accelerated\nVideo Encode: Hardware accelerated\nWebGL: Hardware accelerated\nWebGL2: Hardware accelerated\nWebGPU: Hardware accelerated\n```\n\n----------------------------------------\n\nTITLE: Legacy bundle() Signature Usage Example - JavaScript\nDESCRIPTION: This snippet shows how to use the legacy function signature of bundle(), still supported in Remotion v3. It demonstrates calling bundle() with an entry point, a progress callback, and an options object containing a webpackOverride function. Output can be used just like in the modern API. The progress variable must be defined or passed to the callback for logging. Ensure compatibility with Remotion version if using this form.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/bundle.mdx#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait bundle('src/index.ts', () => console.log(progress * 100 + '% done'), {\\n  webpackOverride,\\n});\n```\n\n----------------------------------------\n\nTITLE: Building the Remotion Rust Compositor Locally (Shell)\nDESCRIPTION: Navigates into the `packages/compositor` directory and uses `bun` to execute the `build.ts` script with the `--debug` flag. This compiles the Rust code specifically for the developer's current operating system and architecture for development and testing purposes.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/rust.mdx#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/compositor\nbun build.ts --debug\n```\n\n----------------------------------------\n\nTITLE: Displaying Puppeteer Browser Launch Error Message - Plain Text\nDESCRIPTION: This snippet displays the exact error message encountered when the browser process fails to launch, typically within the Remotion or Puppeteer workflow. It serves as a reference for users to recognize the error and follow the associated troubleshooting URL for further assistance. No specific dependencies are required to read this message, but it is output when browser startup issues are present during automated rendering or testing scripts using Puppeteer.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/browser-launch.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nFailed to launch the browser process!\n\nTROUBLESHOOTING: https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md // or a URL pointing to this page\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Cross-Compilation Toolchains (Shell)\nDESCRIPTION: Changes to the `packages/compositor` directory and runs the `install-toolchain.ts` script using Node.js. This script installs the necessary Rust toolchains required to cross-compile the Remotion compositor for different target platforms, enabling the building of binaries for all supported operating systems and architectures.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/rust.mdx#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd packages/compositor\nnode install-toolchain.ts\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Credits in Documentation using JSX\nDESCRIPTION: This snippet demonstrates the usage of a custom 'Credits' component within a documentation file (likely MDX or similar). It passes an array of contributor objects, each containing a username and contribution description, via the 'contributors' prop to the component for rendering acknowledgments on the page.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/creating-a-library.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Credits contributors={[\n{\nusername: \"Just-Moh-it\",\ncontribution: \"Template and docs\"\n},\n]} />\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion and Related Dependencies - diff\nDESCRIPTION: This snippet provides a diff-style patch for updating Remotion packages and related dependencies within a project's package.json. It highlights which lines to remove (prefixed with '-') and which new versions to add (prefixed with '+'), demonstrating the transition from 1.x to 2.x versions for Remotion, as well as the addition of required peer modules like react-dom. When applying, ensure all package versions match project requirements, and execute 'npm install' to update node_modules accordingly. The diff format is oriented for manual updates or to guide automation tools during migration.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/2-0-migration.mdx#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-\"@remotion/bundler\": \"^1.5.4\",\n-\"@remotion/cli\": \"^1.5.4\",\n-\"@remotion/eslint-config\": \"^1.5.4\",\n-\"@remotion/renderer\": \"^1.5.4\",\n+\"@remotion/bundler\": \"^2.0.0\",\n+\"@remotion/cli\": \"^2.0.0\",\n+\"@remotion/eslint-config\": \"2.0.0\",\n+\"@remotion/renderer\": \"^2.0.0\",\n\"@types/express\": \"^4.17.9\",\n\"@types/react\": \"^17.0.0\",\n\"eslint\": \"^7.15.0\",\n\"express\": \"^4.17.1\",\n\"prettier\": \"^2.2.1\",\n\"react\": \"^17.0.2\",\n+\"react-dom\": \"^17.0.2\",\n-\"remotion\": \"^1.5.4\",\n+\"remotion\": \"^2.0.0\",\n```\n\n----------------------------------------\n\nTITLE: Upgrading Remotion Package Version - Console\nDESCRIPTION: Updates the Remotion framework to the latest available version via the \\\"npx remotion upgrade\\\" command. This retrieves and installs updates, bug fixes, and improvements into the project. Should be run periodically to ensure compatibility and get the latest features or patches. Requires active internet connection and may modify package.json and lockfiles.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-music-visualization/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpx remotion upgrade\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Components in JSX\nDESCRIPTION: Imports necessary components (`Tabs`, `TabItem`, `TableOfContents`) from the Docusaurus theme (`@theme`) and a local file (`./TableOfContents`) to structure the documentation page. These components are part of the documentation framework (likely Docusaurus).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/animated-emoji/index.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from \"@theme/Tabs\";\nimport TabItem from \"@theme/TabItem\";\nimport {TableOfContents} from \"./TableOfContents\";\n```\n\n----------------------------------------\n\nTITLE: Inserting a Custom Installation Guide Component in MDX (JSX)\nDESCRIPTION: This snippet places the <Installation /> component into the Markdown/MDX content. It is used to automatically render a package installation command for @remotion/media-parser. Prerequisites include a custom or pre-supplied Installation React component, and its proper configuration in the MDX environment. Inputs: package name as prop; outputs: rendered installation instructions. This enhances onboarding by providing guide-specific package installation steps.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/index.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation pkg=\"@remotion/media-parser\" />\n```\n\n----------------------------------------\n\nTITLE: GCP API: Cloud Run\nDESCRIPTION: Identifies the necessary Google Cloud Platform API endpoint for managing Cloud Run services. This API must be enabled in the GCP project.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrun.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components with React and MDX (JavaScript/JSX)\nDESCRIPTION: This snippet imports several React components, such as Tabs, TabItem, and custom tables of contents, which are then used in the Markdown/MDX documentation. These imports are required for rendering interactive guides and API navigation elements. Prerequisites: React, MDX/MDX bundler, and the local TableOfContents module. Inputs are the imported module paths; outputs are symbol bindings for use in the documentation content.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/index.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport {TableOfContents, MediaParserGuideTableOfContents, ReadersTableOfContents, WritersTableOfContents} from './TableOfContents';\n```\n\n----------------------------------------\n\nTITLE: Importing `TableOfContents` Component in JavaScript/JSX\nDESCRIPTION: Imports the `TableOfContents` component using JavaScript ES6 module syntax from a relative path. This component is likely used for rendering navigation specific to the motion blur documentation within the application.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/motion-blur/motion-blur.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {TableOfContents} from '../../components/TableOfContents/motion-blur';\n```\n\n----------------------------------------\n\nTITLE: Ensuring FFprobe Installation via Remotion CLI (Deprecated)\nDESCRIPTION: Runs the Remotion CLI command to verify the presence of the FFprobe binary. If FFprobe is missing, the command downloads it from the internet. This ensured FFprobe was ready before rendering. This command was introduced in Remotion v3.3 and deprecated in v4.0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/cli/install.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx remotion install ffprobe\n```\n\n----------------------------------------\n\nTITLE: Calling ensureFfmpeg to Install FFmpeg with @remotion/renderer in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates importing and calling the `ensureFfmpeg()` function from the `@remotion/renderer` package. This asynchronous function checks if the FFmpeg binary is installed locally (in PATH or `node_modules`) and downloads it if necessary. Although Remotion typically handles FFmpeg installation automatically upon rendering, this function could be used to ensure its availability beforehand. The function returns a promise indicating whether FFmpeg was already present or installed. Note: This function was removed in Remotion v4.0.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/renderer/ensure-ffmpeg.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { ensureFfmpeg } from \"@remotion/renderer\";\n\nawait ensureFfmpeg();\n```\n\n----------------------------------------\n\nTITLE: Invoking Redirect Component in MDX\nDESCRIPTION: This JSX code invokes the `Redirect` component within an MDX file. It takes a `redirect` prop specifying the target URL (`/docs/lambda/rendermediaonlambda`) to which the user should be automatically redirected. This is typically used when documentation pages are moved or renamed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/lambda/rendervideoonlambda.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Redirect redirect=\"/docs/lambda/rendermediaonlambda\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Installation Component to Show @remotion/player Command in React/MDX\nDESCRIPTION: This JSX snippet renders the `Installation` React component. It passes the string \"@remotion/player\" via the `pkg` prop, instructing the component to display the correct command(s) for installing this specific package within a React project. This component likely abstracts the display logic for different package managers (npm, yarn).\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/installation.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Installation pkg=\"@remotion/player\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Supported Codec Tables in Remotion (JavaScript/JSX)\nDESCRIPTION: This snippet imports React components representing data tables for supported audio codecs and file extensions in Remotion. These components are typically used to render compatibility matrices for different media formats in the documentation. Requires the `SupportedAudioCodecTable` and `FileExtensionTable` components to exist at the specified relative path.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/encoding.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  SupportedAudioCodecTable,\n  FileExtensionTable,\n} from '../components/SupportedAudioCodec';\n```\n\n----------------------------------------\n\nTITLE: Project Structure Including CSS for Styling (Text)\nDESCRIPTION: Depicts a file structure with a CSS stylesheet (style.css) placed in the src/ directory for styling Remotion components. No logic involved; purely for referencing asset placement before using CSS imports in the code.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/importing-assets.mdx#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nmy-video/\\n├─ node_modules/\\n├─ src/\\n│  ├─ style.css\\n│  ├─ MyComp.tsx\\n│  ├─ Root.tsx\\n│  ├─ index.ts\\n├─ package.json\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom FFprobe Executable Path (Removed v4.0) using Remotion Config in TypeScript\nDESCRIPTION: *This configuration method was removed in Remotion v4.0.* It previously allowed specifying an absolute path to a custom ffprobe binary using `Config.setFfprobeExecutable()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. Use `setBinariesDirectory()` in newer versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_36\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setFfprobeExecutable('/path/to/custom/ffprobe');\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm - Bash\nDESCRIPTION: Installs all project dependencies as defined in package.json using npm. This is a prerequisite for running the application, ensuring that all required Node.js packages are available in the node_modules directory.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/template-next-app-tailwind/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n\n```\n\n----------------------------------------\n\nTITLE: Importing TableOfContents Component in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the 'TableOfContents' component from a local file ('./TableOfContents') in a React codebase using TypeScript or JavaScript. The import statement is essential for bringing in reusable components defined elsewhere in the project. No external dependencies are required beyond standard React and JavaScript module resolution.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/api.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TableOfContents } from \"./TableOfContents\";\n```\n\n----------------------------------------\n\nTITLE: Displaying NPM Executable Error Message - Plaintext\nDESCRIPTION: This snippet shows the exact error message received when NPM cannot determine which executable to run, often due to missing CLI binaries or misconfigured package managers. It is intended to help developers recognize the specific error string in their terminal output. No dependencies are required, and it serves as documentation rather than code to execute.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/troubleshooting/could-not-find-executable-to-run.mdx#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnpm ERR! could not determine executable to run\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Blog Post\nDESCRIPTION: Imports two custom React components, `InvestorGrid` and `DownloadPressRelease`, from relative paths within the project's components directory. These components are likely used later in the document to display investor information and a press release download link.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/blog/2022-11-09-seed-funding.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {InvestorGrid} from '../components/InvestorGrid'\nimport {DownloadPressRelease} from '../components/DownloadPressRelease'\n```\n\n----------------------------------------\n\nTITLE: Rendering the DragAndDropDemo Component in JSX\nDESCRIPTION: This snippet renders the previously imported `DragAndDropDemo` component within the documentation page, surrounded by HTML line break elements (`<br />`). This embeds the interactive demo, allowing users to directly experience the drag and drop functionality discussed.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/player/drag-and-drop/index.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<br />\n<DragAndDropDemo />\n<br />\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation TOC Item with PresentationPreview in TypeScript/TSX\nDESCRIPTION: This TSX code snippet shows an example of how to add an entry for the new presentation to the documentation's table of contents (TOC) located at `docs/transitions/presentations`. It uses a `TOCItem` component containing a link to the presentation's documentation page, a `PresentationPreview` component to display a visual demo, and a brief description of the presentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/contributing/presentation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<TOCItem link=\"/docs/transitions/presentations/yourPresentation\">\n  <div style={row}>\n    <PresentationPreview\n      durationRestThreshold={0.001}\n      effect={yourPresentation()}\n    />\n    <div style={{ flex: 1, marginLeft: 10 }}>\n      <strong>\n        <code>{\"yourPresentation()\"}</code>\n      </strong>\n      <div>Insert one-liner describing your presentation</div>\n    </div>\n  </div>\n</TOCItem>\n```\n\n----------------------------------------\n\nTITLE: Structuring Keyboard Shortcuts Table - HTML/JSX\nDESCRIPTION: This snippet shows an HTML/JSX table used for listing keyboard shortcuts and their actions in the Remotion Studio documentation. Each <tr> details a shortcut and its respective action, often combining <kbd> tags, SVG icons (when necessary), and descriptive text. It is intended to be rendered by a React-based site or static documentation generator, requiring no external dependencies aside from HTML and JSX parsing support. Inputs are JSX/HTML definitions and outputs are formatted tables in the rendered documentation.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/studio/shortcuts.mdx#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<tr>\n<td>\n  <kbd>Space</kbd> \n</td>\n<td>Play / Pause</td>\n</tr>\n<tr>\n<td>\n  <kbd>A</kbd>\n</td>\n<td>\nJump to beginning\n</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Embedding Section Table of Contents Components (JSX)\nDESCRIPTION: These snippets insert sectional table of contents components into the documentation, helping users navigate through guides, APIs, readers, and writers sections of the documentation. Each component renders a navigation element. Requirements: React, correct path resolution, and component definitions in the project. No direct inputs or outputs other than the rendered content structure.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/media-parser/index.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<MediaParserGuideTableOfContents />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<TableOfContents />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ReadersTableOfContents />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<WritersTableOfContents />\n```\n\n----------------------------------------\n\nTITLE: Setting Custom FFmpeg Executable Path (Removed v4.0) using Remotion Config in TypeScript\nDESCRIPTION: *This configuration method was removed in Remotion v4.0.* It previously allowed specifying an absolute path to a custom FFmpeg binary using `Config.setFfmpegExecutable()` in `remotion.config.ts`. Requires importing `Config` from `@remotion/cli/config`. Use `setBinariesDirectory()` in newer versions.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/docs/docs/config.mdx#_snippet_35\n\nLANGUAGE: ts\nCODE:\n```\nimport {Config} from '@remotion/cli/config';\n// ---cut---\nConfig.setFfmpegExecutable('/path/to/custom/ffmpeg');\n```\n\n----------------------------------------\n\nTITLE: GCP IAM Permission: Create Storage Buckets\nDESCRIPTION: Specifies the IAM permission required to create new Cloud Storage buckets. These buckets are used to store the bundled Remotion site and the output renders.\nSOURCE: https://github.com/remotion-dev/remotion/blob/main/packages/cloudrun/src/gcpInstaller/readme.md#_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nstorage.buckets.create\n```"
  }
]