[
  {
    "owner": "orbitdb",
    "repo": "orbitdb",
    "content": "TITLE: Creating and Using OrbitDB with Helia and Libp2p\nDESCRIPTION: Complete example demonstrating how to initialize OrbitDB with Helia IPFS, configure Libp2p with required services, create/open a database, listen for updates, add entries, and query the database.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHelia } from 'helia'\nimport { createOrbitDB } from '@orbitdb/core'\nimport { gossipsub } from \"@chainsafe/libp2p-gossipsub\";\nimport { identify } from \"@libp2p/identify\";\nimport { createLibp2p } from 'libp2p'\n\nconst Libp2pOptions = {\n  services: {\n    pubsub: gossipsub({\n      // neccessary to run a single peer\n      allowPublishToZeroTopicPeers: true\n    }),\n    identify: identify()\n  }\n}\n\n;(async function () {\n  const libp2p = await createLibp2p({ ...Libp2pOptions })\n  const ipfs = await createHelia({libp2p})\n  const orbitdb = await createOrbitDB({ ipfs })\n\n  // Create / Open a database. Defaults to db type \"events\".\n  const db = await orbitdb.open(\"hello\")\n  \n  const address = db.address\n  console.log(address)\n  // \"/orbitdb/zdpuAkstgbTVGHQmMi5TC84auhJ8rL5qoaNEtXo2d5PHXs2To\"\n  // The above address can be used on another peer to open the same database\n\n  // Listen for updates from peers\n  db.events.on(\"update\", async entry => {\n    console.log(entry)\n    const all = await db.all()\n    console.log(all)\n  })\n\n  // Add an entry\n  const hash = await db.add(\"world\")\n  console.log(hash)\n\n  // Query\n  for await (const record of db.iterator()) {\n    console.log(record)\n  }\n  \n  await db.close()\n  await orbitdb.stop()\n  await ipfs.stop()\n})()\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone OrbitDB Database\nDESCRIPTION: Complete example of creating an OrbitDB database with Helia and Libp2p, adding records, and properly closing the database. This shows the full lifecycle of an OrbitDB instance.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { createOrbitDB } from '@orbitdb/core'\nimport { LevelBlockstore } from 'blockstore-level'\nimport { Libp2pOptions } from './config/libp2p.js'\n\n// Create an IPFS instance.\nconst blockstore = new LevelBlockstore('./ipfs/blocks')\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p, blockstore })\n\nconst orbitdb = await createOrbitDB({ ipfs })\n\nconst db = await orbitdb.open('my-db')\n\nconsole.log('my-db address', db.address)\n\n// Add some records to the db.\nawait db.add('hello world 1')\nawait db.add('hello world 2')\n\n// Print out the above records.\nconsole.log(await db.all())\n\n// Close your db and stop OrbitDB and IPFS.\nawait db.close()\nawait orbitdb.stop()\nawait ipfs.stop()\n```\n\n----------------------------------------\n\nTITLE: Implementing OrbitDB Replication with IPFS in JavaScript\nDESCRIPTION: This code demonstrates how to set up two OrbitDB instances using separate IPFS nodes, create databases, write data to one database, and replicate it to another. It includes event listeners for synchronization and update events, and proper cleanup of resources.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/REPLICATION.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { LevelBlockstore } from 'blockstore-level'\nimport { createOrbitDB } from '@orbitdb/core'\nimport { Libp2pOptions } from './config/libp2p.js'\n\n// Our ipfs instances will be connecting over tcp. You can find out more about peer connectivity at https://connectivity.libp2p.io/.\n\nconst initIPFSInstance = () => {\n  const blockstore = new LevelBlockstore('./ipfs')\n  const libp2p = await createLibp2p(Libp2pOptions)\n  return createHelia({ libp2p, blockstore })\n}\n\nconst ipfs1 = await initIPFSInstance()\nconst ipfs2 = await initIPFSInstance()\n\n// The decentralized nature if IPFS can make it slow for peers to find one \n// another. You can speed up a connection between two peers by \"dialling-in\"\n// to one peer from another.\n/* \nawait ipfs2.libp2p.save(ipfs1.libp2p.peerId, { multiaddr: ipfs1.libp2p.getMultiaddrs() })\nawait ipfs2.libp2p.dial(ipfs1.libp2p.peerId)\n*/\n\nconst orbitdb1 = await createOrbitDB({ ipfs: ipfs1, id: 'userA', directory: './orbitdb/1' })\nconst orbitdb2 = await createOrbitDB({ ipfs: ipfs2, id: 'userB', directory: './orbitdb/2' })\n\n// This opens a new db. Default db type will be 'events'.\nconst db1 = await orbitdb1.open('my-db')\n\n// We connect to the first db using its address. This initiates a\n// synchronization of the heads between db1 and db2.\nconst db2 = await orbitdb2.open(db1.address)\n\n// We write some data to db1. This will automatically replicated on db2\nawait db1.add('hello world 1')\nawait db1.add('hello world 2')\nawait db1.add('hello world 3')\nawait db1.add('hello world 4')\n\nlet db2Updated = false\n\n// Listen for the connection of ipfs1 to ipfs2.\n// If we want to listen for connections from ipfs2 to ipfs1, add a \"join\" \n// listener to db1.\ndb2.events.on('join', async (peerId, heads) => {\n  // The peerId of the ipfs1 node.\n  console.log(peerId, (await ipfs1.id()).id)\n})\n\n// Listen for any updates to db2.\n// If we want to listen for new data on db2, add an \"update\" listener to db1.\ndb2.events.on('update', async (entry) => {\n  db2Updated = true\n})\n\n// wait for db2 to complete updating.\nawait new Promise((resolve, reject) => {\n  setInterval(() => {\n    if (db2Updated) {\n      resolve()\n    }\n  }, 1000)\n})\n\n// Close db1 and its underlying ipfs peer.\nawait db1.close()\nawait orbitdb1.stop()\nawait ipfs1.stop()\n\n// Close db2 and its underlying ipfs peer.\nawait db2.close()\nawait orbitdb2.stop()\nawait ipfs2.stop()\n```\n\n----------------------------------------\n\nTITLE: Connecting a Second Peer to an Existing OrbitDB Database\nDESCRIPTION: Example command to launch a second OrbitDB peer that connects to an existing peer and database using the OrbitDB address and libp2p multiaddress.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnode test.js /orbitdb/zdpuB2aYUCnZ7YUBrDkCWpRLQ8ieUbqJEVRZEd5aDhJBDpBqj /ip4/127.0.0.1/tcp/36161/p2p/12D3KooWKFWB78Hka2uPVNYYoXfucWp6rDLsQzr5CFiP67NAo7YF\n```\n\n----------------------------------------\n\nTITLE: Creating an OrbitDB Peer with Replication Capabilities\nDESCRIPTION: Complete implementation of an OrbitDB peer that can either initialize a new database or connect to an existing one. It includes access control configuration, event listeners, and proper cleanup.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { createOrbitDB, IPFSAccessController } from '@orbitdb/core'\nimport { LevelBlockstore } from 'blockstore-level'\nimport { Libp2pOptions } from './config/libp2p.js'\nimport { multiaddr } from '@multiformats/multiaddr'\n\nconst main = async () => {\n  // create a random directory to avoid OrbitDB conflicts.\n  let randDir = (Math.random() + 1).toString(36).substring(2)\n    \n  const blockstore = new LevelBlockstore(`./${randDir}/ipfs/blocks`)\n  const libp2p = await createLibp2p(Libp2pOptions)\n  const ipfs = await createHelia({ libp2p, blockstore })\n\n  const orbitdb = await createOrbitDB({ ipfs, directory: `./${randDir}/orbitdb` })\n\n  let db\n\n  if (process.argv[2] && process.argv[3]) {\n    await orbitdb.ipfs.libp2p.dial(multiaddr(process.argv[3]))\n    console.log('opening db', process.argv[2])\n    db = await orbitdb.open(process.argv[2])\n  } else {\n    // When we open a new database, write access is only available to the \n    // db creator. If we want to allow other peers to write to the database,\n    // they must be specified in IPFSAccessController write array param. Here,\n    // we simply allow anyone to write to the database. A more robust solution\n    // would use the OrbitDBAccessController to provide mutable, \"fine-grain\"\n    // access using grant and revoke.\n    db = await orbitdb.open('my-db', { AccessController: IPFSAccessController({ write: ['*']}) })\n    \n    console.log('libp2p address', '(copy one of these addresses then dial into this node from the second node)', orbitdb.ipfs.libp2p.getMultiaddrs())\n    \n    // Copy this output if you want to connect a peer to another.\n    console.log('my-db address', '(copy my db address and use when launching peer 2)', db.address)\n  }\n\n  db.events.on('update', async (entry) => {\n    // what has been updated.\n    console.log('update', entry.payload.value)\n  })\n  \n  if (process.argv[2]) {\n    await db.add('hello from second peer')\n    await db.add('hello again from second peer')\n  } else {\n    // write some records\n    await db.add('hello from first peer')\n    await db.add('hello again from first peer')    \n  }\n  // Clean up when stopping this app using ctrl+c\n  process.on('SIGINT', async () => {\n      // print the final state of the db.\n      console.log((await db.all()).map(e => e.value))\n      // Close your db and stop OrbitDB and IPFS.\n      await db.close()\n      await orbitdb.stop()\n      await ipfs.stop()\n\n      process.exit()\n  })\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Database Replication Between Peers\nDESCRIPTION: Example demonstrating database replication between two OrbitDB peers using LibP2P and Helia.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { createOrbitDB } from '@orbitdb/core'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst initIPFSInstance = () => {\n  const libp2p = await createLibp2p(Libp2pOptions)\n  return createHelia({ libp2p })\n}\n\nconst ipfs1 = await initIPFSInstance()\nconst ipfs2 = await initIPFSInstance()\n\norbitdb1 = await createOrbitDB({ ipfs: ipfs1, id: 'user1', directory: './orbitdb1' })\norbitdb2 = await createOrbitDB({ ipfs: ipfs2, id: 'user2', directory: './orbitdb2' })\n\nconst db1 = await orbitdb1.open('my-db')\n\nawait db1.add('hello world')\n\nconst db2 = await orbitdb2.open(db1.address)\n\nfor await (const record of db2.iterator()) {\n  console.log(record)\n}\n```\n\n----------------------------------------\n\nTITLE: Database Address and Connection Example\nDESCRIPTION: Demonstrates how to create and connect to an OrbitDB database using LibP2P and Helia, showing the database address structure.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { createOrbitDB } from '@orbitdb/core'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p })\n\nconst orbitdb = await createOrbitDB({ ipfs })\nconst db = await orbitdb.open('my-db')\nconsole.log(db.address)\n// /orbitdb/zdpuAmrcSRUhkQcnRQ6p4bphs7DJWGBkqczSGFYynX6moTcDL\n```\n\n----------------------------------------\n\nTITLE: Database Operations Example\nDESCRIPTION: Examples of adding, putting, and deleting items in different types of OrbitDB databases.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst orbitdb = await createOrbitDB()\nconst db = await orbitdb.open('my-db', { type: 'keyvalue' })\nconst hash = await db.put('key', 'value')\n\nconst orbitdb = await createOrbitDB()\nconst db = await orbitdb.open('my-db')\nconst hash = await db.add('event')\n\nconst orbitdb = await createOrbitDB()\nconst db = await orbitdb.open('my-db', { type: 'keyvalue' })\nconst hash = await db.put('key', 'value')\nawait db.del(hash)\n```\n\n----------------------------------------\n\nTITLE: Configuring Helia with Level Blockstore\nDESCRIPTION: Code snippet showing how to instantiate LevelBlockstore and create a Helia instance with persistent storage, which is essential for maintaining OrbitDB data between sessions.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LevelBlockstore } from 'blockstore-level'\n\nconst blockstore = new LevelBlockstore('./ipfs/blocks')\nconst ipfs = createHelia({ blockstore })\n```\n\n----------------------------------------\n\nTITLE: Database Creation Examples\nDESCRIPTION: Various examples of creating different types of OrbitDB databases including events, documents, keyvalue, and with metadata.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst orbitdb = await createOrbitDB()\nawait orbitdb.open('my-db')\n\nconst orbitdb = await createOrbitDB()\nawait orbitdb.open('my-db', { type: 'documents' })\n\nconst orbitdb = await createOrbitDB()\nawait orbitdb.open('my-db', { type: 'keyvalue' })\n\nconst meta = { description: 'A database with metadata.' }\nconst orbitdb = await createOrbitDB()\nawait orbitdb.open('my-db', { meta })\n```\n\n----------------------------------------\n\nTITLE: Initializing OrbitDB with Custom Access Controller\nDESCRIPTION: Example showing how to initialize OrbitDB with a custom access controller, including setting up libp2p, Helia, and blockstore dependencies.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { createOrbitDB } from '@orbitdb/core'\nimport { LevelBlockstore } from 'blockstore-level'\nimport { Libp2pOptions } from './config/libp2p.js'\nimport * as SomeAccessController from 'some-access-controller.js'\n\nconst blockstore = new LevelBlockstore('./ipfs')\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p, blockstore })\n\nconst orbitdb = await createOrbitDB({ ipfs })\n\nconst db = orbitdb.open('my-db', { AccessController: SomeAccessController() })\n```\n\n----------------------------------------\n\nTITLE: Libp2p Configuration for OrbitDB Node.js\nDESCRIPTION: Basic Libp2p configuration for Node.js, setting up the networking stack with mDNS discovery, TCP transport, noise encryption, yamux multiplexing, and Gossipsub pub/sub.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  peerDiscovery: [\n    mdns()\n  ],\n  addresses: {\n    listen: ['/ip4/0.0.0.0/tcp/0']\n  },\n  transports: [\n    tcp()\n  ],\n  connectionEncrypters: [noise()],\n  streamMuxers: [yamux()],\n  services: {\n    identify: identify(),\n    pubsub: gossipsub({ allowPublishToZeroTopicPeers: true })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Complex Data to a Documents Database\nDESCRIPTION: Example of adding JSON objects to a documents-type OrbitDB database using the put method, demonstrating how to store structured data with document IDs.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait db.put({ _id: \"doc1\", hello: \"world 1\", hits: 5 })\nawait db.put({ _id: \"doc2\", hello: \"world 2\", hits: 2 })\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Node.js Server for WebSocket Connections\nDESCRIPTION: Configures a Node.js server to listen for incoming WebSocket connections from browsers. This enables browser-to-node communication by exposing a WebSocket endpoint and setting up a circuit relay.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/CONNECTING_PEERS.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { yamux } from '@chainsafe/libp2p-yamux'\nimport { noise } from '@chainsafe/libp2p-noise'\nimport { identify } from '@libp2p/identify'\nimport { circuitRelayServer } from '@libp2p/circuit-relay-v2'\nimport { webSockets } from '@libp2p/websockets'\nimport * as filters from '@libp2p/websockets/filters'\n\nconst options = {\n  addresses: {\n    listen: ['/ip4/0.0.0.0/tcp/12345/ws']\n  },\n  transports: [\n    webSockets({\n      filter: filters.all\n    })\n  ],\n  connectionEncrypters: [noise()],\n  streamMuxers: [yamux()],\n  services: {\n    identify: identify(),\n    relay: circuitRelayServer()\n  }\n}\n\nconst libp2p = createLibp2p(options)\nconst ipfs1 = await createHelia({ libp2p })\n```\n\n----------------------------------------\n\nTITLE: Configuring a Browser Client to Connect to Node.js Server\nDESCRIPTION: Sets up a browser-based IPFS node that can connect to a Node.js server via WebSockets and WebRTC. This configuration supports circuit relay for discovery and communication.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/CONNECTING_PEERS.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// import the following libraries if using a build environment such as vite.\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { yamux } from '@chainsafe/libp2p-yamux'\nimport { identify } from '@libp2p/identify'\nimport { webSockets } from '@libp2p/websockets'\nimport { webRTC } from '@libp2p/webrtc'\nimport { noise } from '@chainsafe/libp2p-noise'\nimport { circuitRelayTransport } from '@libp2p/circuit-relay-v2'\n\nconst ws = new webSockets()\n\nconst options = {\n  addresses: {\n    listen: [\n      '/webrtc'\n    ]\n  },\n  transports: [\n    webSockets({\n      filter: all\n    }),\n    webRTC(),\n    circuitRelayTransport({\n      discoverRelays: 1\n    })\n  ],\n  connectionEncrypters: [noise()],\n  streamMuxers: [yamux()],\n  connectionGater: {\n    denyDialMultiaddr: () => {\n      return false\n    }\n  },\n  services: {\n    identify: identify()\n  }\n}\n\nconst libp2p = createLibp2p(options)\nconst ipfs1 = await createHelia({ libp2p })\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Storage Module for OrbitDB\nDESCRIPTION: Template for implementing a custom storage module that follows OrbitDB's storage interface. Includes required methods like put, get, del, iterator, merge, clear, and close.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/STORAGE.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomStorage = async (params) => { // Drop params if not required\n  \n  const put = async (hash, data) => {\n    // Puts the hash and data to the underlying storage. This is not required.\n    // For example, the Events database uses add() to add a value without a \n    // key.\n  }\n\n  const get = async (hash) => {\n     // Gets a record identified by hash from the underlying storage\n  }\n\n  const del = async (hash) => {\n    // Deletes a record identified by hash from the underlying storage\n  }\n\n  const iterator = async function * () {\n    // Iterates over the underlying storage's records\n    // see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\n  }\n\n  const merge = async (other) => {\n    // Merges the records from two storages\n  }\n\n  const clear = async () => {\n    // Clears all records from the underlying storage\n  }\n\n  const close = async () => {\n    // Closes the underlying storage\n  }\n\n  return {\n    put,\n    del,\n    get,\n    iterator,\n    merge,\n    clear,\n    close\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Identity in OrbitDB\nDESCRIPTION: Demonstrates how to create an identity using the Identities module from OrbitDB core. The created identity can be used to control access to database actions such as write operations.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/IDENTITIES.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Identities } from '@orbitdb/core'\n\nconst id = 'userA'\nconst identities = await Identities() \nconst identity = identities.createIdentity({ id })\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst orbitdb = await createOrbitDB({ identities, id: 'userA' })\n```\n\n----------------------------------------\n\nTITLE: Implementing Composed Storage in OrbitDB\nDESCRIPTION: Creates a composed storage by combining MemoryStorage and IPFSBlockStorage. The order matters, as ComposedStorage attempts to retrieve data from the first storage before trying the second one.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/STORAGE.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst memoryStorage = await MemoryStorage()\nconst ipfsStorage = await IPFSBlockStorage()\n\nconst composedStorage = await ComposedStorage(memoryStorage, ipfsStorage)\n```\n\n----------------------------------------\n\nTITLE: Custom Access Controller Implementation\nDESCRIPTION: Template for implementing a custom access controller with required type and canAppend function.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst type = 'custom'\n\nconst CustomAccessController = () => async ({ orbitdb, identities, address }) => {\n  address = '/custom/access-controller'\n\n  const canAppend = (entry) => {\n    // return true if the entry can be appended to the log, false otherwise.\n  }\n}\n\nCustomAccessController.type = type\n\nexport default CustomAccessController\n```\n\n----------------------------------------\n\nTITLE: Custom Database Implementation\nDESCRIPTION: Example showing how to implement a custom database type in OrbitDB with required interface methods.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst type = 'customdb'\n\nconst CustomDB = async ({ OpLog, Database, ipfs, identity, address, name, access, directory, storage, meta, syncAutomatically }) => {\n  const database = await Database({ OpLog, ipfs, identity, address, name, access, directory, storage, meta, syncAutomatically })\n\n  const { addOperation, log } = database\n\n  const put = async (doc) => {\n  }\n\n  const del = async (key) => {\n  }\n\n  const get = async (key) => {\n  }\n\n  const iterator = async function * ({ amount } = {}) {\n  }\n\n  return {\n    ...database,\n    type,\n    put,\n    del,\n    get,\n    iterator\n  }\n}\n\nCustomDB.type = type\n\nexport default CustomDB\n```\n\n----------------------------------------\n\nTITLE: Using OrbitDB Access Controller with Grant and Revoke\nDESCRIPTION: Demonstrates how to use OrbitDBAccessController with its mutable access control features to grant and revoke write permissions.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { LevelBlockstore } from 'blockstore-level'\nimport { createOrbitDB, Identities, OrbitDBAccessController } from '@orbitdb/core'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst blockstore = new LevelBlockstore('./ipfs')\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p })\n\nconst orbitdb = await createOrbitDB({ ipfs })\n\nconst identities = await Identities({ ipfs })\nconst anotherIdentity = identities.createIdentity('userB')\n\nconst db = orbitdb.open('my-db', { AccessController: OrbitDBAccessController({ write: [orbitdb.identity.id, anotherIdentity.id]) })\n\ndb.access.grant('write', anotherIdentity.id)\ndb.access.revoke('write', anotherIdentity.id)\n```\n\n----------------------------------------\n\nTITLE: Exporting Libp2p Configuration as ES Module\nDESCRIPTION: Complete example of exporting a Libp2p configuration as an ES module including all required imports. This configuration enables peer discovery, networking, encryption, and pub/sub for OrbitDB.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { tcp } from '@libp2p/tcp'\nimport { identify } from '@libp2p/identify'\nimport { gossipsub } from '@chainsafe/libp2p-gossipsub'\nimport { noise } from '@chainsafe/libp2p-noise'\nimport { yamux } from '@chainsafe/libp2p-yamux'\nimport { mdns } from '@libp2p/mdns'\n\nexport const Libp2pOptions = {\n  peerDiscovery: [\n    mdns()\n  ],\n  addresses: {\n    listen: ['/ip4/0.0.0.0/tcp/0']\n  },\n  transports: [\n    tcp()\n  ],\n  connectionEncrypters: [noise()],\n  streamMuxers: [yamux()],\n  services: {\n    identify: identify(),\n    pubsub: gossipsub({ allowPublishToZeroTopicPeers: true })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Storage in OrbitDB\nDESCRIPTION: Demonstrates how to override OrbitDB's default storage when opening a database by specifying custom storage instances for entry and heads storage.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/STORAGE.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst entryStorage = await MemoryStorage()\nconst headsStorage = await MemoryStorage()\nconst db = await orbitdb.open('my-db', { entryStorage, headsStorage })\n```\n\n----------------------------------------\n\nTITLE: Opening a Documents-type OrbitDB Database\nDESCRIPTION: Code snippet showing how to open an OrbitDB database with a specific type (documents) instead of using the default 'events' type.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = await orbitdb.open('my-documents-db', { type: 'documents' })\n```\n\n----------------------------------------\n\nTITLE: Using Custom Database Type\nDESCRIPTION: Shows how to register and use a custom database type in OrbitDB.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createOrbitDB, useDatabaseType } from '@orbitdb/core'\nimport CustomDB from './custom-db.js'\n\nuseDatabaseType(CustomDB)\nconst orbitdb = await createOrbitDB()\nawait orbitdb.open('my-custom-db', { type: 'customdb' })\n```\n\n----------------------------------------\n\nTITLE: Initializing and Connecting Node.js IPFS Instances\nDESCRIPTION: Creates two IPFS instances in Node.js and demonstrates basic data sharing between them. The instances automatically discover each other on local networks.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/CONNECTING_PEERS.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst initIPFSInstance = () => {\n  const libp2p = await createLibp2p(Libp2pOptions)\n  return createHelia({ libp2p })\n}\n\nconst ipfs1 = await initIPFSInstance()\nconst ipfs2 = await initIPFSInstance()\n\nconst cid = await ipfs1.block.put('here is some data')\nconst block = await ipfs2.block.get(cid)\n```\n\n----------------------------------------\n\nTITLE: Implementing canAppend Function for Custom Access Controller\nDESCRIPTION: Example implementation of the canAppend function for a custom access controller with identity verification.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nwrite = [identity.id]\n\nconst canAppend = async (entry) => {\n  const writerIdentity = await identities.getIdentity(entry.identity)\n  if (!writerIdentity) {\n    return false\n  }\n\n  const { id } = writerIdentity\n\n  if (write.includes(id) || write.includes('*')) {\n    return identities.verifyIdentity(writerIdentity)\n  }\n  return false\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existing Database\nDESCRIPTION: Example showing how to open an existing OrbitDB database using its address.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst orbitdb = await createOrbitDB()\nconst db = await orbitdb.open('my-db')\nawait db.close()\nconst dbReopened = await orbitdb.open(db.address)\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Keystore in OrbitDB\nDESCRIPTION: Shows how to use an existing keystore with the Identities module. This allows for more control over where and how keys are stored.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/IDENTITIES.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Identities, KeyStore } from '@orbitdb/core'\n\nconst keystore = await KeyStore()\nconst id = 'userA'\nconst identities = await Identities({ keystore })\nconst identity = identities.createIdentity({ id })\n```\n\n----------------------------------------\n\nTITLE: Registering and Using Custom Access Controller\nDESCRIPTION: Shows how to register a custom access controller with OrbitDB and use it when opening a database.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { LevelBlockstore } from 'blockstore-level'\nimport { createOrbitDB, useAccessController } from '@orbitdb/core'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst blockstore = new LevelBlockstore('./ipfs')\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p, blockstore })\n\nuseAccessController(CustomAccessController)\nconst orbitdb = await createOrbitDB({ ipfs })\nconst db = await orbitdb.open('my-db', { AccessController: CustomAccessController(params) })\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Identity Provider in OrbitDB\nDESCRIPTION: Shows the structure for creating a custom identity provider module. This allows for extending OrbitDB's identity system with custom implementations.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/IDENTITIES.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// A unique name for the identity provider\nconst type = 'custom'\n\n// check whether the identity was signed by the identity's id.\nconst verifyIdentity = identity => {\n  // ...\n}\n\n// The identity provider.\nconst MyCustomIdentityProvider = ({ keystore }) => async () => {\n  const getId = async ({ id } = {}) => {\n    // return the \"root\" identity managed by the custom identity provider,\n    // eg. a public key or a wallet address\n  }\n\n  const signIdentity = async (publicKeyAndIdSignature) => {\n    // sign the publicKeyAndIdSignature using the custom identity provider system\n  }\n\n  return {\n    type,\n    getId,\n    signIdentity\n  }\n}\n\nMyCustomIdentityProvider.verifyIdentity = verifyIdentity\nMyCustomIdentityProvider.type = type\n\nexport default MyCustomIdentityProvider\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addIdentityProvider } from '@orbitdb/core'\nimport MyCustomIdentityProvider from 'my-custom-identity-provider'\naddIdentityProvider(MyCustomIdentityProvider)\nconst identity = await createIdentity({ provider: MyCustomIdentityProvider(options) })\n```\n\n----------------------------------------\n\nTITLE: Installing OrbitDB and Helia via npm\nDESCRIPTION: Command to install the OrbitDB core library and Helia IPFS implementation, which are the essential dependencies for working with OrbitDB.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i helia @orbitdb/core\n```\n\n----------------------------------------\n\nTITLE: Installing OrbitDB and Dependencies using npm\nDESCRIPTION: Command to install OrbitDB core package and its Helia dependency via npm.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @orbitdb/core helia\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Manifest from IPFS\nDESCRIPTION: Example showing how to retrieve and decode a database manifest from IPFS using multiformats and IPLD.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport * as Block from 'multiformats/block'\nimport { createOrbitDB, OrbitDBAddress } from '@orbitdb/core'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p })\n\nconst orbitdb = await createOrbitDB({ ipfs })\nconst db = await orbitdb.open('my-db')\nawait db.close()\n\nconst addr = OrbitDBAddress(db.address)\nconst cid = CID.parse(addr.path, base58btc)\n\nconst bytes = await ipfs.block.get(cid)\n\nconst codec = dagCbor\nconst hasher = sha256\n\nconst { value } = await Block.decode({ bytes, codec, hasher })\n\nconsole.log('manifest', value)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Storage Implementation with OrbitDB\nDESCRIPTION: Shows how to use a custom storage implementation with OrbitDB by importing a custom storage module and passing storage instances when opening a database.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/STORAGE.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Perhaps some kind of locally developed storage implementation.\nimport CustomStorage from './custom-storage.js'\n\nconst entryStorage = await CustomStorage()\nconst headsStorage = await CustomStorage()\nconst indexStorage = await CustomStorage()\nconst db = await orbitdb.open('my-db', { entryStorage, headsStorage, indexStorage })\n```\n\n----------------------------------------\n\nTITLE: Implementing Public Write Access with IPFS Access Controller\nDESCRIPTION: Example of configuring IPFSAccessController to allow public write access using the wildcard operator.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { LevelBlockstore } from 'blockstore-level'\nimport { createOrbitDB, Identities, IPFSAccessController } from '@orbitdb/core'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst blockstore = new LevelBlockstore('./ipfs')\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p })\n\nconst orbitdb = await createOrbitDB({ ipfs })\n\nconst db = orbitdb.open('my-db', { AccessController: IPFSAccessController({ write: ['*'] }) })\n```\n\n----------------------------------------\n\nTITLE: Directly Connecting Node.js IPFS Instances with Dial\nDESCRIPTION: Demonstrates how to directly connect two IPFS instances using libp2p's dial function to speed up communication between peers, especially in remote networks.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/CONNECTING_PEERS.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst initIPFSInstance = () => {\n  const libp2p = await createLibp2p(Libp2pOptions)\n  return createHelia({ libp2p })\n}\n\nconst ipfs1 = await initIPFSInstance()\nconst ipfs2 = await initIPFSInstance()\n\nawait ipfs2.libp2p.save(ipfs1.libp2p.peerId, { multiaddr: ipfs1.libp2p.getMultiaddrs() })\nawait ipfs2.libp2p.dial(ipfs1.libp2p.peerId)\n\nconst cid = await ipfs1.block.put('here is some data')\nconst block = await ipfs2.block.get(cid)\n```\n\n----------------------------------------\n\nTITLE: Configuring IPFS Access Controller with Multiple Users\nDESCRIPTION: Shows how to configure IPFSAccessController to allow multiple specific users to have write access to the database.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { LevelBlockstore } from 'blockstore-level'\nimport { createOrbitDB, Identities, IPFSAccessController } from '@orbitdb/core'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst blockstore = new LevelBlockstore('./ipfs')\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p, blockstore })\n\nconst identities = await Identities()\nconst anotherIdentity = identities.createIdentity('userB')\n\n// OrbitDB will create an identity using the id 'UserA'.\nconst orbitdb = await createOrbitDB({ ipfs, id: 'userA' })\n\n// Open a db with write access for userA and userB.\nconst db = orbitdb.open('my-db', { AccessController: IPFSAccessController({ write: [orbitdb.identity.id, anotherIdentity.id]) })\n```\n\n----------------------------------------\n\nTITLE: Default IPFS Access Controller Usage\nDESCRIPTION: Demonstrates the default behavior of IPFSAccessController where only the creator has write access to the database.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst orbitdb = await createOrbitDB({ ipfs })\nconst db = orbitdb.open('my-db')\n\nawait db.add('hello world') // only orbitdb.identity.id can write to the db.\n```\n\n----------------------------------------\n\nTITLE: Custom Access Controller with Configuration\nDESCRIPTION: Example of implementing a custom access controller with configurable parameters.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/ACCESS_CONTROLLERS.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomAccessController = ({ write }) => async ({ orbitdb, identities, address }) => {\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through OrbitDB Oplog Entries\nDESCRIPTION: Example showing how to iterate through entries in an OrbitDB operations log using an async iterator.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/OPLOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfor await (const entry of log.iterator()) {\n  console.log(entry)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sort Function Implementation for OrbitDB\nDESCRIPTION: Example of implementing a custom sort function for ordering concurrent entries in an OrbitDB operations log.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/OPLOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomSortFn = (a, b) => {\n  // alternative sorting mechanism\n  return a > b ? 1 : -1\n}\n\nconst log = await Log(..., { sortFn: CustomSortFn })\n```\n\n----------------------------------------\n\nTITLE: Installing Blockstore-Level Storage for Helia\nDESCRIPTION: Command to install the Level-based block storage implementation for Helia, enabling persistent storage of IPFS blocks.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i blockstore-level\n```\n\n----------------------------------------\n\nTITLE: Database Manifest Structure Example\nDESCRIPTION: Shows the structure of an OrbitDB database manifest containing name, type, and access controller information.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  name: 'my-db',\n  type: 'events',\n  accessController: '/ipfs/zdpuB1TUuF5E81MFChDbRsZZ1A3Kz2piLJwKQ2ddnfZLEBx64'\n}\n```\n\n----------------------------------------\n\nTITLE: OrbitDB Oplog Entry Structure Example\nDESCRIPTION: Example of an OrbitDB operations log entry showing the complete data structure including version, ID, signatures, references, clock, and payload fields.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/OPLOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  v: 2,\n  id: '/orbitdb/zdpuArkmnVAAVjEZfF644i1iBpXHZMq3xXUofgF7UZF4ukPJT',\n  key: '029a8405cfd6800bea85c31b9438ba7f96592f5c4756ad176b811d591961697a89',\n  sig: '3045022100b07fee7696c740021b82cfa95de3262efa593bc115ace2a0d82694469ada60f70220198335d8fea0c37f16d61faf426d440c8f0cae55a3c5b098a10a1ce62835dbd3',\n  next: [ 'zdpuAsjEHJKydfWjpjmhzYTPJkjSfbRWZ455GJRsN3RZgj9Nm' ],\n  refs: [ 'zdpuApQnDfNfGFF3UtTpCLTFMZZvCKYpJQL4EZrvwEBv7aphx' ],\n  clock: {\n    id: '029a8405cfd6800bea85c31b9438ba7f96592f5c4756ad176b811d591961697a89',\n    time: 3\n  },\n  payload: { op: 'ADD', key: null, value: 'hello world!' },\n  identity: 'zdpuAkY8EXyQRwtF6xzNpfM8q5jyTW2RR3Yz6CvRz1Uvdk1hJ'\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up the First Browser Peer to Connect via Relay\nDESCRIPTION: Configures the first browser peer to connect to a relay server and discover its WebRTC address. This is the first step in establishing browser-to-browser connectivity through a relay.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/CONNECTING_PEERS.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// import the following libraries if using a build environment such as vite.\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { yamux } from '@chainsafe/libp2p-yamux'\nimport { identify } from '@libp2p/identify'\nimport { webSockets } from '@libp2p/websockets'\nimport { webRTC } from '@libp2p/webrtc'\nimport { noise } from '@chainsafe/libp2p-noise'\nimport { circuitRelayTransport } from '@libp2p/circuit-relay-v2'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { WebRTC as WebRTCMatcher } from '@multiformats/multiaddr-matcher'\nimport pRetry from 'p-retry'\nimport delay from 'delay'\n\nconst options = {\n  addresses: {\n    listen: [\n      '/webrtc'\n    ]\n  },\n  transports: [\n    webSockets({\n      filter: all\n    }),\n    webRTC(),\n    circuitRelayTransport({\n      discoverRelays: 1\n    })\n  ],\n  connectionEncrypters: [noise()],\n  streamMuxers: [yamux()],\n  connectionGater: {\n    denyDialMultiaddr: () => {\n      return false\n    }\n  },\n  services: {\n    identify: identify()\n  }\n}\n\nconst libp2p = createLibp2p(options)\nconst ipfs1 = await createHelia({ libp2p })\n\n/*The creation and deployment of a circuit relay is not covered in this documentation. However, you can use the one bundled with the OrbitDB unit tests by cloning the OrbitDB repository, installing the dependencies and then running `npm run webrtc` from the OrbitDB project's root dir. Once running, the webrtc relay server will print a number of addresses it is listening on. Use the address /ip4/127.0.0.1/tcp/12345/ws/p2p when specifying the relay for browser 1.\n*/\nconst relay = '/ip4/127.0.0.1/tcp/12345/ws/p2p' // the address of the relay server. Change this if you are not using the OrbitDB-bundled webrtc relay.\n\nawait ipfs1.libp2p.dial(multiaddr(relay))\n\nconst a1 = await pRetry(async () => {\n  const addr = ipfs1.libp2p.getMultiaddrs().filter(ma => WebRTCMatcher.matches(ma)).pop()\n\n  if (addr == null) {\n    await delay(10)\n    throw new Error('No WebRTC address found')\n  }\n\n  return addr\n})\n\nconsole.log('ipfs1 address discovered: ', a1)\n```\n\n----------------------------------------\n\nTITLE: Connecting Second Browser Peer to First Browser Peer via WebRTC\nDESCRIPTION: Configures a second browser peer and connects it to the first browser peer using the discovered WebRTC address. This completes the browser-to-browser connection through the relay.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/CONNECTING_PEERS.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// import the following libraries if using a build environment such as vite.\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { yamux } from '@chainsafe/libp2p-yamux'\nimport { identify } from '@libp2p/identify'\nimport { webSockets } from '@libp2p/websockets'\nimport { webRTC } from '@libp2p/webrtc'\nimport { noise } from '@chainsafe/libp2p-noise'\nimport { circuitRelayTransport } from '@libp2p/circuit-relay-v2'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { WebRTC as WebRTCMatcher } from '@multiformats/multiaddr-matcher'\nimport pRetry from 'p-retry'\nimport delay from 'delay'\n\nconst options = {\n  addresses: {\n    listen: [\n      '/webrtc'\n    ]\n  },\n  transports: [\n    webSockets({\n      filter: all\n    }),\n    webRTC(),\n    circuitRelayTransport({\n      discoverRelays: 1\n    })\n  ],\n  connectionEncrypters: [noise()],\n  streamMuxers: [yamux()],\n  connectionGater: {\n    denyDialMultiaddr: () => {\n      return false\n    }\n  },\n  services: {\n    identify: identify()\n  }\n}\n\nconst libp2p = createLibp2p(options)\nconst ipfs1 = await createHelia({ libp2p })\n\nconst ipfs1Address = '' // paste the \"ipfs1 address discovered:\" value here.\n\nawait ipfs1.libp2p.dial(multiaddr(ipfs1Address))\n\nconst a2 = await pRetry(async () => {\n  const addr = ipfs2.libp2p.getMultiaddrs().filter(ma => WebRTCMatcher.matches(ma)).pop()\n\n  if (addr == null) {\n    await delay(10)\n    throw new Error('No WebRTC address found')\n  }\n\n  return addr\n})\n\nconsole.log('ipfs2 address discovered: ', a2)\n```\n\n----------------------------------------\n\nTITLE: Importing Libp2p Configuration\nDESCRIPTION: Example of how to import a Libp2p configuration from an external file, commonly used throughout the OrbitDB documentation.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Libp2pOptions } from './config/libp2p.js'\n```\n\n----------------------------------------\n\nTITLE: Setting Up OrbitDB Application Dependencies\nDESCRIPTION: Command to create a new OrbitDB project and install all necessary dependencies including Helia, OrbitDB core, blockstore-level, and libp2p components.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir orbitdb-app\ncd orbitdb-app\nnpm init\nnpm i helia @orbitdb/core blockstore-level @chainsafe/libp2p-gossipsub\n```\n\n----------------------------------------\n\nTITLE: Retrieving Identity as Linked Data Object in OrbitDB\nDESCRIPTION: Illustrates how to retrieve an identity object from IPFS using the identity's hash. This demonstrates that the identity object is stored like any other IPLD data structure and can be accessed accordingly.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/IDENTITIES.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createLibp2p } from 'libp2p'\nimport { createHelia } from 'helia'\nimport { LevelBlockstore } from 'blockstore-level'\nimport * as Block from 'multiformats/block'\nimport { Identities } from '@orbitdb/core'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { CID } from 'multiformats/cid'\nimport { Libp2pOptions } from './config/libp2p.js'\n\nconst blockstore = new LevelBlockstore('./ipfs')\nconst libp2p = await createLibp2p(Libp2pOptions)\nconst ipfs = await createHelia({ libp2p, blockstore })\n\nconst identities = await Identities({ ipfs })\nconst identity = await identities.createIdentity({ id: 'me' })\n\nconst cid = CID.parse(identity.hash, base58btc)\n\n// Extract the hash from the full db path.\nconst bytes = await ipfs.blockstore.get(cid)\n\n// Defines how we serialize/hash the data.\nconst codec = dagCbor\nconst hasher = sha256\n\n// Retrieve the block data, decoding it to human-readable JSON text.\nconst { value } = await Block.decode({ bytes, codec, hasher })\n\nconsole.log('identity', value)\n```\n\n----------------------------------------\n\nTITLE: Customizing Keystore Path in OrbitDB\nDESCRIPTION: Demonstrates various ways to customize the location of the key store, including changing the base directory for OrbitDB, specifying a custom path for KeyStore, and setting a different path for Identities.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/IDENTITIES.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// This will create a key store under ./different-path/key-store\nconst orbitdb = await createOrbitDB({ directory: './different-path' })\n// Be aware that this will change the base path to the database as well.\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// This will create a key store under ./different-key-store.\nconst path = './different-key-store'\nconst keystore = await KeyStore({ path })\n\n// keystore can now be used with other functions, for example:\nconst identities = await Identities({ keystore })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n/// This will create a KeyStore under ./different-identities-path\nconst path = './different-identities-path'\nconst identities = await Identities({ path })\n```\n\n----------------------------------------\n\nTITLE: Implementing an Empty Method in OrbitDB Custom Storage\nDESCRIPTION: Example of implementing an empty method in a custom storage solution when functionality is not needed, maintaining API consistency without requiring implementation.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/STORAGE.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst close = async () => {}\n```\n\n----------------------------------------\n\nTITLE: Opening OrbitDB Database with Type Specification\nDESCRIPTION: Shows how to open an OrbitDB database with a specific type parameter.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/DATABASES.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst type = 'documents'\norbitdb.open('my-db', { type })\n```\n\n----------------------------------------\n\nTITLE: Launching First OrbitDB Peer\nDESCRIPTION: Command to launch the first OrbitDB peer that will create a database and wait for connections from other peers.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnode test.js\n```\n\n----------------------------------------\n\nTITLE: Setting Up OrbitDB Peer for Replication\nDESCRIPTION: Commands to create a new project specifically for an OrbitDB peer that will be used in database replication between multiple nodes.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdir orbitdb-peer\ncd orbitdb-peer\nnpm init\nnpm i helia @orbitdb/core blockstore-level @chainsafe/libp2p-gossipsub\n```\n\n----------------------------------------\n\nTITLE: Running the OrbitDB Application\nDESCRIPTION: Command to execute the Node.js script that creates and interacts with an OrbitDB database.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/GETTING_STARTED.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Enabling Local WebSockets with All Filter\nDESCRIPTION: Demonstrates how to resolve connection issues with local WebRTC relays by allowing insecure WebSocket connections using the 'all' filter. This should only be used in development environments.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/docs/CONNECTING_PEERS.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { all } from '@libp2p/websockets/filters'\n\nconst ws = webSockets({ filter: all })\n```\n\n----------------------------------------\n\nTITLE: Viewing Git Log Changes Between OrbitDB Versions\nDESCRIPTION: Git command to generate a condensed log of changes between versions v2.4.3 and v2.5.0 of OrbitDB. Uses the --oneline flag for a compact single-line format.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit log v2.4.3..v2.5.0 --oneline\n```\n\n----------------------------------------\n\nTITLE: Markdown Contributors List\nDESCRIPTION: A formatted list of GitHub contributors with profile links in Markdown syntax.\nSOURCE: https://github.com/orbitdb/orbitdb/blob/main/CONTRIBUTORS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n - [@0xflotus](https://github.com/0xflotus)\n - [@509dave16](https://github.com/509dave16)\n - [@5310](https://github.com/5310)\n...\n```"
  }
]