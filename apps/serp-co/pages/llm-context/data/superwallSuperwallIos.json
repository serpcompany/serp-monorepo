[
  {
    "owner": "superwall",
    "repo": "superwall-ios",
    "content": "TITLE: Resetting Superwall User Data (Swift)\nDESCRIPTION: Resets the `userId`, on-device paywall assignments, and all data stored by Superwall, even if the user is not currently logged in. This function provides a way to completely clear Superwall's user-specific data.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n`reset()`\n```\n\n----------------------------------------\n\nTITLE: Creating a Superwall Account (Swift)\nDESCRIPTION: Creates a new account with Superwall, linking a provided `userId` to Superwall's automatically generated alias. This function is part of the identity API and enables associating user data with the Superwall system for personalized paywall experiences.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n`createAccount(userId:)`\n```\n\n----------------------------------------\n\nTITLE: Logging Out a Superwall User (Swift)\nDESCRIPTION: Logs out the current user, resetting on-device paywall assignments and clearing the `userId` stored by Superwall. This effectively ends the user's session and removes any personalized configurations.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\n`logOut(userId:)`\n```\n\n----------------------------------------\n\nTITLE: Identity Options Swift\nDESCRIPTION: Allows passing an `IdentityOptions` object to `identify(userId:options:)` for advanced user identification scenarios. Setting `restorePaywallAssignments` to `true` prevents paywalls from showing until assignments are restored, useful for apps with account switching or frequent reinstallations.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Checking Active Subscription Status in Superwall (Swift)\nDESCRIPTION: A published property that indicates whether Superwall detects an active subscription. The value is stored on disk and synced with active purchases on the device, enabling real-time updates to subscription status.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\n`hasActiveSubscription`\n```\n\n----------------------------------------\n\nTITLE: Checking Login Status in Superwall (Swift)\nDESCRIPTION: Checks whether the user is currently logged in to the Superwall SDK. It returns `true` if either `logIn(userId:)` or `createAccount(userId:)` has been called previously.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\n`Superwall.isLoggedIn`\n```\n\n----------------------------------------\n\nTITLE: Check Login Status Swift\nDESCRIPTION: Adds `Superwall.shared.isLoggedIn` to check whether the user is logged in to the SDK or not, meaning `identify(userId:options:)` has previously been called. The value is also accessible in user properties for rule creation.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Preloading Paywalls for Triggers (Swift)\nDESCRIPTION: Preloads paywalls for specified triggers. To be used with `Superwall.options.shouldPreloadPaywall = false` to have more control over when/what paywalls are preloaded.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\n`Paywall.preloadPaywalls(forTriggers:)`\n```\n\n----------------------------------------\n\nTITLE: Specifying Products with Triggers (Swift)\nDESCRIPTION: Specifies `SKProducts` with triggers, overriding products defined in the dashboard.  This is done by creating a `PaywallProducts` object and calling `Paywall.trigger(event: \"event\", products: products)`.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_37\n\nLANGUAGE: swift\nCODE:\n```\n`Paywall.trigger(event: \"event\", products: products)`\n```\n\n----------------------------------------\n\nTITLE: Accessing Free Trial Availability (Swift)\nDESCRIPTION: Indicates if a free trial is available within the `PaywallInfo` object. This allows developers to tailor the paywall presentation based on the user's eligibility for a free trial.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\n`isFreeTrialAvailable`\n```\n\n----------------------------------------\n\nTITLE: Requesting PaywallViewController Swift\nDESCRIPTION: Introduces `getPaywall(forEvent:params:paywallOverrides:delegate:)` to request a `PaywallViewController` for custom presentation logic. This method allows developers to present the paywall using their preferred UI presentation methods.  A delegate is required to control paywall dismissal.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Trigger Paywall with View Controller - Swift\nDESCRIPTION: Presents a paywall using the push presentation style with a specified view controller.  This ensures a more realistic push transition by moving the view during the animation. Requires UIKit.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_38\n\nLANGUAGE: swift\nCODE:\n```\nPaywall.trigger(event: \"MyEvent\", on: self)\n```\n\n----------------------------------------\n\nTITLE: Checking Superwall Configuration Status (Swift)\nDESCRIPTION: A published boolean property indicating whether Superwall is fully configured and ready to present paywalls. This allows developers to confirm Superwall is initialized before triggering paywalls.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\n`isConfigured`\n```\n\n----------------------------------------\n\nTITLE: Subscription Status Delegate Swift\nDESCRIPTION: Adds `subscriptionStatusDidChange(to:)` delegate function. This function will be called whenever the user's internal subscription status changes if letting Superwall handle subscription logic. A published `subscriptionStatus` variable is also available.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Observing Configuration State Swift\nDESCRIPTION: Adds the `isConfigured` published property to check if Superwall is configured and ready to present paywalls.  Additionally, a completion handler is available in `Superwall.configure(...)`.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Getting Presentation Result Swift\nDESCRIPTION: Adds `getPresentationResult(forEvent:params:)`. This method returns a `PresentationResult`, which can be used to preemptively get the result of registering an event and whether a paywall will be presented in the future.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Retrieving Tracking Results in Superwall (Swift)\nDESCRIPTION: Returns a `TrackResult` that indicates the result of tracking an event without actually tracking it. It's useful for determining whether a paywall will be shown based on event triggers.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\n`getTrackResult(forEvent:params:)`\n```\n\n----------------------------------------\n\nTITLE: Configure Superwall in SwiftUI App init()\nDESCRIPTION: SwiftUI apps can now call `Superwall.configure` in the `init()` of the `App` file, removing the need for a `UIApplicationDelegate`.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Superwall Initialization Check Swift\nDESCRIPTION: Adds static variable `Superwall.isInitialized`, which is `true` when initialization is complete and `Superwall.shared` can be accessed.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Preloading All Paywalls (Swift)\nDESCRIPTION: Preloads all paywalls. To be used with `Superwall.options.shouldPreloadPaywall = false` to have more control over when/what paywalls are preloaded.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\n`Paywall.preloadAllPaywalls()`\n```\n\n----------------------------------------\n\nTITLE: Toggle Paywall Spinner Swift\nDESCRIPTION: Adds `togglePaywallSpinner(isHidden:)` to toggle the loading spinner on and off. Particularly useful when doing async work during a custom action.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Disabling External Data Collection (Swift)\nDESCRIPTION: A data privacy `PaywallOption` that, when set to `false`, prevents non-Superwall events and properties from being sent to the Superwall servers. This provides control over user data privacy.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\n`isExternalDataCollectionEnabled`\n```\n\n----------------------------------------\n\nTITLE: Adding SuperwallKit via Cocoapods\nDESCRIPTION: This code snippet shows how to add the SuperwallKit SDK to your Podfile when using Cocoapods as a dependency manager. It specifies that the version should be less than 5.0.0, allowing for updates within the 4.x range.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/README.md#_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'SuperwallKit', '< 5.0.0'\n```\n\n----------------------------------------\n\nTITLE: Exposing Paywall Features to Objective-C\nDESCRIPTION: This enhancement exposes `PaywallOverrides` and `PaywallViewController` to Objective-C, allowing Objective-C developers to utilize these features within their projects. Additionally, Objective-C convenience methods have been added to `PaywallOverrides` to ease integration. This enhances the SDK's accessibility for projects written in Objective-C.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Deep Link Handling Swift\nDESCRIPTION: `handleDeepLink(_:)` now returns a discardable `Bool` indicating whether the deep link was handled. This value can be returned from `application(_:open:options:)`.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Removing User Attributes in Superwall (Obj-C)\nDESCRIPTION: Removes specified user attributes. In Swift, this can be achieved by passing `nil` for a specific attribute within the `setUserAttributes(_:)` function. This provides a mechanism for clearing user-specific data.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_29\n\nLANGUAGE: objective-c\nCODE:\n```\n`removeUserAttributes(_:)`\n```\n\n----------------------------------------\n\nTITLE: Remove User Attributes Objective-C\nDESCRIPTION: Adds `removeUserAttributes(_:)` to remove user attributes within Objective-C. Swift developers can use `setUserAttributes(_:)` with `nil` to remove user attributes.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: SwiftUI PaywallView Usage Swift\nDESCRIPTION: Adds a `PaywallView` for SwiftUI users using iOS 14+. This allows embedding and presenting paywalls directly within SwiftUI views. Note that you're responsible for the deallocation of the view. If you have a `PaywallView` presented somewhere and you try to present the same `PaywallView` elsewhere, you will get a crash.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Purchase Function in Superwall SDK Objective-C/Swift\nDESCRIPTION: Changes the `PurchaseController` purchase function to `func purchase(product: StoreProduct) async -> PurchaseResult`. There will be an StoreKit 2 product accessible via `product.sk2Product` by default. However, if you're using the StoreKit 1 `SuperwallOption` or your app is running on an iOS version lower than iOS 15, this will be `nil` and you can access the StoreKit 1 product via `product.sk1Product`.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nfunc purchase(product: StoreProduct) async -> PurchaseResult\n```\n\n----------------------------------------\n\nTITLE: Objective-C: PurchaseController purchase(product:completion:)\nDESCRIPTION: This snippet shows the updated method signature for `purchase(product:)` in the `SWKPurchaseController` for Objective-C users. The completion block must be called with the result of the user's purchase attempt, handling all cases of `SWKPurchaseResult`: `.purchased`, `.cancelled`, `.pending`, `failed`. Errors must be passed through the completion block as `.failed` with the associated error.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_10\n\nLANGUAGE: objective-c\nCODE:\n```\n- (void)purchase:(SKProduct *)product completion:(void (^)(SWKPurchaseResult))completion;\n```\n\n----------------------------------------\n\nTITLE: SuperwallDelegate method Swift\nDESCRIPTION: The `SuperwallDelegate` method `entitlementStatusDidChange(from:to:)` is added so you can listen to receive updates whenever the entitlement status changes.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Logging In with User ID in Superwall (Swift)\nDESCRIPTION: Logs in a user with their unique `userId` to retrieve personalized paywalls assigned to them. This function uses the new identity API introduced in the SDK, available through async/await or completion handlers. It establishes a user session and retrieves associated paywall configurations.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n`logIn(userId:)`\n```\n\n----------------------------------------\n\nTITLE: Registering events in Superwall SDK Swift\nDESCRIPTION: Renames `register(event:)` to `register(placement:)`. This is a breaking change that requires developers to update their code to use the new `placement` parameter when registering an event.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Getting paywalls in Superwall SDK Swift\nDESCRIPTION: Renames `getPaywall(forEvent:)` to `getPaywall(forPlacement:)`. This is a breaking change that requires developers to update their code to use the new `forPlacement` parameter when getting paywalls.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Getting presentation result in Superwall SDK Swift\nDESCRIPTION: Renames `getPresentationResult(forEvent:)` to `getPresentationResult(forPlacement:)`. This is a breaking change that requires developers to update their code to use the new `forPlacement` parameter when getting the presentation result.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Renaming PaywallView initializer Swift\nDESCRIPTION: Renames `PaywallView(event:)` to `PaywallView(placement:)`. This is a breaking change that requires developers to update their code to use the new `placement` parameter when initializing `PaywallView`.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Preloading paywalls in Superwall SDK Swift\nDESCRIPTION: Renames `preloadPaywalls(forEvents:)` to `preloadPaywalls(forPlacements:)`. This is a breaking change that requires developers to update their code to use the new `forPlacements` parameter when preloading paywalls.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Purchase result handling in Superwall Swift\nDESCRIPTION: Renames the `PurchaseResult` case `purchased(productId: String)` to `purchased(Product)`. This change affects how the result of a purchase is handled, requiring developers to adapt their code to the new `Product` type.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Handling Superwall events in Superwall SDK Swift\nDESCRIPTION: Renames `handleSuperwallEvent(withInfo:)` to `handleSuperwallPlacement(withInfo:)`. This is a breaking change that requires developers to update their code to use the new `handleSuperwallPlacement` method when handling superwall events.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Objective-C PaywallOption Fix\nDESCRIPTION: Exposes the `transactionBackgroundView` `PaywallOption` to Objective-C by making it non-optional and adding a `none` case in place of setting it to `nil`.\nSOURCE: https://github.com/superwall/superwall-ios/blob/develop/CHANGELOG.md#_snippet_22\n\n"
  }
]