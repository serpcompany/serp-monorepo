[
  {
    "owner": "react-component",
    "repo": "field-form",
    "content": "TITLE: React Form Validation Example (TypeScript)\nDESCRIPTION: This snippet provides an example of how to implement form validation in a React component using TypeScript. The full code is located at the relative path '../examples/validate.tsx'. It likely contains the implementation of the validation logic and error handling for the form fields.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/validate.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<code src=\"../examples/validate.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Form Error Handling\nDESCRIPTION: This JavaScript code demonstrates how to validate form fields using async/await. It shows how to handle validation errors and access error messages.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function() {\n  try {\n    const values = await form.validateFields();\n    console.log(values);\n  } catch (errorList) {\n    errorList.forEach(({ name, errors }) => {\n      // Do something...\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Form Values in React (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `initialValues` prop in a React form component to set the initial state of the form fields. The `initialValues` prop accepts an object where keys correspond to field names and values represent the initial values for those fields. This approach allows you to pre-populate form fields with data when the form is initially rendered.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/initialValues.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/initialValues.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Usage with rc-field-form in React\nDESCRIPTION: Demonstrates a simple form implementation using `rc-field-form`'s `Form` and `Field` components, with input fields for username and password and a submit button. The `onFinish` prop logs the form values to the console upon successful submission.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport Form, { Field } from 'rc-field-form';\n\nconst Input = ({ value = '', ...props }) => <input value={value} {...props} />;\n\nconst Demo = () => {\n  return (\n    <Form\n      onFinish={values => {\n        console.log('Finish:', values);\n      }}\n    >\n      <Field name=\"username\">\n        <Input placeholder=\"Username\" />\n      </Field>\n      <Field name=\"password\">\n        <Input placeholder=\"Password\" />\n      </Field>\n\n      <button>Submit</button>\n    </Form>\n  );\n};\n\nexport default Demo;\n```\n\n----------------------------------------\n\nTITLE: Render Props Example in React with TypeScript\nDESCRIPTION: This snippet demonstrates the implementation of render props in a React component using TypeScript. It allows for flexible customization of form field rendering by passing a render function as a prop. The example resides in renderProps.tsx file.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/renderProps.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/renderProps.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: Basic Field Form Example (React/TypeScript)\nDESCRIPTION: This snippet demonstrates a basic usage of the Field Form component in a React application using TypeScript. It showcases how to integrate the component and its core functionality within a simple form.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/basic.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/basic.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: Redux Integration Example in TypeScript\nDESCRIPTION: This code snippet demonstrates how to integrate the React Component Field Form with Redux for state management. It likely includes actions, reducers, and component connections to dispatch actions and retrieve form data from the Redux store. The example would showcase how form field updates are handled and persisted using Redux.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/redux.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/redux.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: useWatch Example (React/TypeScript)\nDESCRIPTION: This snippet demonstrates the usage of the `useWatch` hook in a React component using TypeScript. The hook is likely used to track changes in form field values and trigger side effects or update the component's state accordingly. It shows how to import the hook and integrate it into a functional component's logic.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/useWatch.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/useWatch.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: useWatch with Selector in React (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `useWatch` hook with a selector function in a React component.  It likely showcases how to extract specific values from a form's state and update the component when those selected values change. The example aims to optimize re-renders by only triggering updates when the selected values are modified, rather than on every form state change.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/useWatch-selector.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/useWatch-selector.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: React Context Example (TypeScript)\nDESCRIPTION: This code snippet showcases the use of React Context in a TypeScript file.  It likely defines a context provider and consumer for managing and accessing shared data throughout a React application. The context allows components to subscribe to context changes without needing to pass props down manually through each level of the component tree. Requires React and TypeScript.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/context.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"../examples/context.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: Field Touch Example in React (TypeScript/JSX)\nDESCRIPTION: This code snippet shows how to determine if a specific field in a React form has been 'touched' (i.e., the user has interacted with it). It likely uses a form management library such as Formik or React Hook Form to manage form state. The `touched` property from the form state is used to check if a particular field has been visited or modified by the user.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/fieldTouched.md#_snippet_0\n\nLANGUAGE: TypeScript/JSX\nCODE:\n```\n<code src=\"../examples/fieldTouched.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: Reset Form Fields in React (TSX)\nDESCRIPTION: This snippet (expected to be found in `reset.tsx`) demonstrates how to reset the values of form fields in a React component. It likely involves using React's `useState` hook to manage form input values and a handler function to clear those values when a reset button is clicked. The snippet depends on React.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/reset.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"../examples/reset.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: useForm Hook Example (TypeScript)\nDESCRIPTION: This snippet demonstrates the usage of the `useForm` hook within a React component. It showcases how to integrate the hook into a functional component for form management, but the actual code for the hook itself is located in a separate file, linked as an example.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/useForm.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/useForm.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: Using useForm Hook with Form Component\nDESCRIPTION: Illustrates how to create a form instance using the `Form.useForm()` hook and pass it to the `Form` component via the `form` prop. This enables access to form methods outside the component.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nconst Demo = () => {\n  const [form] = Form.useForm();\n  return <Form form={form} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Field Form Validation Example (validateOnly)\nDESCRIPTION: This TypeScript code snippet demonstrates how to use the `validateOnly` functionality in a field form. It showcases the implementation of a form with validation constraints.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/validateOnly.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Field, Form } from '@alifd/next';\nimport { SubmitButton } from './common';\n\nconst FormItem = Field.Item;\n\nconst style = {\n  labelCol: { fixedSpan: 6 },\n  wrapperCol: { span: 14 },\n};\n\nexport default () => {\n  const {\n    form,\n    init,\n    validate,\n    isFieldValidating,\n    setValues,\n    getValues,\n    reset,\n    getValue,\n  } = Form.useForm();\n\n  const [formValue, setValue] = useState({});\n\n  const saveValue = () => {\n    validate((errors, values) => {\n      if (!errors) {\n        setValue(values);\n      }\n    });\n  };\n\n  const resetValue = () => {\n    reset();\n    setValue({});\n  };\n\n  return (\n    <Form\n      style={{ width: 600 }}\n      form={form}\n      labelAlign=\"left\"\n    >\n      <FormItem label=\"Name:\" {...style} required>\n        <Field\n          name=\"name\"\n          rules={[{\n            required: true,\n            message: 'Please enter your name',\n          }]}\n        />\n      </FormItem>\n      <FormItem label=\"Email:\" {...style} required>\n        <Field\n          name=\"email\"\n          rules={[{\n            required: true,\n            type: 'email',\n            message: 'Please enter a valid email address',\n          }]}\n        />\n      </FormItem>\n      <FormItem label=\"Age:\" {...style}>\n        <Field\n          name=\"age\"\n          rules={[{\n            type: 'number',\n            transform: value => {\n              if (value) {\n                return Number(value);\n              }\n              return value;\n            },\n            message: 'Please enter a valid age',\n          }]}\n        />\n      </FormItem>\n      <FormItem label=\"Gender:\" {...style}>\n        <Field\n          name=\"gender\"\n          component=\"select\"\n          dataSource={[\n            { label: 'Male', value: 'male' },\n            { label: 'Female', value: 'female' },\n            { label: 'Other', value: 'other' },\n          ]}\n        />\n      </FormItem>\n      <FormItem label=\" \" {...style}>\n        <SubmitButton type=\"primary\" style={{ marginRight: 16 }} onClick={saveValue}>\n          Save\n        </SubmitButton>\n        <SubmitButton type=\"normal\" onClick={resetValue}>\n          Reset\n        </SubmitButton>\n      </FormItem>\n      <FormItem label=\"Result:\" {...style}>\n        <pre>{JSON.stringify(formValue, null, 2)}</pre>\n      </FormItem>\n    </Form>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: List Example in React (TSX)\nDESCRIPTION: This snippet demonstrates how to use the list component within a React application using TypeScript. It showcases a specific implementation within the /react-component/field-form project, providing a practical example for integrating lists into forms.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/list.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"../examples/list.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: React Form Field Preservation\nDESCRIPTION: This code snippet demonstrates preserving the state of form fields within a React component. The actual implementation is expected to be found in the `preserve.tsx` file located in the `../examples/` directory. It likely uses React's state management or refs to achieve the preservation functionality.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/preserve.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"../examples/preserve.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: React Form Validation Performance (TSX)\nDESCRIPTION: This code snippet demonstrates form validation performance using React and TypeScript (TSX). It likely involves validating user inputs within a form, aiming for efficient validation to maintain responsiveness. The specifics of the form library used and the validation logic are found within the linked file.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/validate-perf.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/validate-perf.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: Draggable List StateForm Example (React/TSX)\nDESCRIPTION: This code snippet likely implements a React component that uses a stateForm to manage the state of a draggable list.  It showcases how to integrate a form with a list that can be reordered via drag and drop.  The component uses React and potentially a library like react-beautiful-dnd or similar for the drag-and-drop functionality.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/stateForm-list-draggable.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"../examples/stateForm-list-draggable.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: React Form Field: clearOnDestroy Example (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates the usage of the `clearOnDestroy` property in a React form field component. It shows how to clear the form field value automatically when the component is unmounted, typically used to prevent data persistence issues when the component is no longer active. The code assumes the existence of a custom form field component.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/clearOnDestroy.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/clearOnDestroy.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: React Component Dependencies (deps.tsx)\nDESCRIPTION: This code snippet represents the dependencies required for the React component field form. It specifies the necessary imports, configurations, and external libraries that are essential for the project to function correctly. It's assumed that the actual content of 'deps.tsx' is relevant to defining necessary modules or libraries.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/deps.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/deps.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: React Field Form Layout\nDESCRIPTION: This TypeScript snippet demonstrates the layout structure of a React field form component. It showcases how to arrange form elements and incorporate styling for a visually appealing and functional form.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/layout.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/layout.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: useWatch Hook with List in React (tsx)\nDESCRIPTION: This code snippet demonstrates how to use the `useWatch` hook to observe changes in a list within a React component. It shows a practical example of using `useWatch` to trigger updates when elements are added to or removed from the list. The component re-renders when the watched list changes.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/useWatch-list.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<code src=\"../examples/useWatch-list.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: JSX Form with Input Field\nDESCRIPTION: This JSX snippet demonstrates how to create a Form with a single input Field. It includes a reference to the input element for custom handling of focus or scrolling.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Form>\n  <Field name=\"username\">\n    <input ref={this.inputRef} />\n  </Field>\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Instance with Ref\nDESCRIPTION: Demonstrates how to access the form instance within a class component using `ref`. The `setRef` method is used to capture the form instance when the component mounts.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nclass Demo extends React.Component {\n  setRef = form => {\n    // Form instance here\n  };\n\n  render() {\n    return <Form ref={this.setRef} />;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Example\nDESCRIPTION: This snippet represents an example of a React component, likely a form field, defined in TypeScript. It is a placeholder indicating the location of the actual code in the examples directory.\nSOURCE: https://github.com/react-component/field-form/blob/master/docs/demo/component.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<code src=\"../examples/component.tsx\"></code>\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies\nDESCRIPTION: Installs dependencies to start working on the component library.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Start Development Server\nDESCRIPTION: Starts a local development server and opens it in a browser to start developing.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Access Local Development\nDESCRIPTION: Opens the development environment in the browser.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nopen http://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: JavaScript Form Error Handling (rc-form)\nDESCRIPTION: This JavaScript snippet demonstrates how to handle errors when using `rc-form` library to get form errors. It is useful for supporting older versions of `rc-form` library.\nSOURCE: https://github.com/react-component/field-form/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n(form.getFieldsError('fieldName') || []).forEach(() => {\n  // Do something...\n});\n```"
  }
]