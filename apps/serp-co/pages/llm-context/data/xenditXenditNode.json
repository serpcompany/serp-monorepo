[
  {
    "owner": "xendit",
    "repo": "xendit-node",
    "content": "TITLE: Initializing Xendit Client with API Key\nDESCRIPTION: Example of initializing the Xendit client using a secret API key obtained from the Xendit Dashboard. This is the basic setup required for using the SDK.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit } from 'xendit-node';\n\nconst xenditClient = new Xendit({\n  secretKey: SECRET_API_KEY,\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Xendit Node SDK with NPM\nDESCRIPTION: Command to install the latest version of the Xendit Node SDK package using npm. Requires Node.js version 18.0 or later.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install xendit-node@latest --save\n```\n\n----------------------------------------\n\nTITLE: Initializing Xendit PaymentRequest Client\nDESCRIPTION: Shows how to initialize the Xendit client for PaymentRequest API usage with a secret key.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit, PaymentRequest as PaymentRequestClient } from 'xendit-node';\n\nconst xenditClient = new Xendit({secretKey: YOUR_SECRET_KEY})\nconst { PaymentRequest } = xenditClient\n\nconst xenditPaymentRequestClient = new PaymentRequestClient({secretKey: YOUR_SECRET_KEY})\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code Payment Request\nDESCRIPTION: Example of creating a fixed amount dynamic QR code payment request using QRIS.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentRequestParameters, PaymentRequest } from 'xendit-node/payment_request/models'\n\nconst data: PaymentRequestParameters = {\n  \"amount\" : 15000,\n  \"metadata\" : {\n    \"sku\" : \"example-sku-1234\"\n  },\n  \"paymentMethod\" : {\n    \"qrCode\" : {\n      \"channelCode\" : \"\"QRIS\"\"\n    },\n    \"reusability\" : \"ONE_TIME_USE\",\n    \"type\" : \"QR_CODE\"\n  },\n  \"currency\" : \"IDR\",\n  \"referenceId\" : \"example-ref-1234\"\n}\n\nconst response: PaymentRequest = await xenditPaymentRequestClient.createPaymentRequest({\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Creating E-Wallet Payment Method in TypeScript\nDESCRIPTION: Demonstrates how to create a payment method for an e-wallet (OVO). Shows setting up channel properties, reusability, and customer information when linking an e-wallet account.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodParameters, PaymentMethod } from 'xendit-node/payment_method/models'\n\nconst data: PaymentMethodParameters = {\n  \"ewallet\" : {\n    \"channelProperties\" : {\n      \"failureReturnUrl\" : \"https://redirect.me/failure\",\n      \"successReturnUrl\" : \"https://redirect.me/success\",\n      \"cancelReturnUrl\" : \"https://redirect.me/cancel\"\n    },\n    \"channelCode\" : \"OVO\"\n  },\n  \"metadata\" : {\n    \"sku\" : \"example-1234\"\n  },\n  \"reusability\" : \"MULTIPLE_USE\",\n  \"type\" : \"EWALLET\",\n  \"customer\" : {\n    \"type\" : \"INDIVIDUAL\",\n    \"referenceId\" : \"customer-123\",\n    \"individualDetail\" : {\n      \"surname\" : \"Doe\",\n      \"givenNames\" : \"John\"\n    }\n  }\n}\n\nconst response: PaymentMethod = await xenditPaymentMethodClient.createPaymentMethod({\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Payment Callback Example in Xendit Node.js SDK\nDESCRIPTION: Example of a payment callback object structure and handler function for processing payment webhooks. Shows the complete callback object structure with all possible fields.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentCallback } from 'xendit-node/payment_request/models'\n\nconst paymentCallback = {\n  \"apiVersion\" : null,\n  \"data\" : {\n    \"country\" : \"PH\",\n    \"amount\" : 1000,\n    \"metadata\" : {\n      \"sku\" : \"ABCDEFGH\"\n    },\n    \"failureCode\" : null,\n    \"created\" : \"2022-08-12T13:30:40.9209Z\",\n    \"paymentRequestId\" : \"pr-5b26cae1-545b-49e9-855e-f85128f3e705\",\n    \"description\" : null,\n    \"referenceId\" : \"25cfd0f9-baee-44ca-9a12-6debe03f3c22\",\n    \"paymentDetail\" : null,\n    \"channelProperties\" : null,\n    \"customerId\" : \"c832697e-a62d-46fa-a383-24930b155e81\",\n    \"paymentMethod\" : {\n      \"metadata\" : {\n        \"sku\" : \"ABCDEFGH\"\n      },\n      \"created\" : \"2022-08-12T13:30:26.579048Z\",\n      \"description\" : null,\n      \"reusability\" : \"MULTIPLE_USE\",\n      \"type\" : \"DIRECT_DEBIT\",\n      \"directDebit\" : {\n        \"bankAccount\" : {\n          \"maskedBankAccountNumber\" : \"XXXXXX1234\",\n          \"bankAccountHash\" : \"b4dfa99c9b60c77f2e3962b73c098945\"\n        },\n        \"channelProperties\" : {\n          \"failureReturnUrl\" : \"https://your-redirect-website.com/failure\",\n          \"successReturnUrl\" : \"https://your-redirect-website.com/success\"\n        },\n        \"debitCard\" : null,\n        \"type\" : \"BANK_ACCOUNT\",\n        \"channelCode\" : \"BPI\"\n      },\n      \"referenceId\" : \"620b9df4-fe69-4bfd-b9d4-5cba6861db8a\",\n      \"ewallet\" : null,\n      \"directBankTransfer\" : null,\n      \"qrCode\" : null,\n      \"overTheCounter\" : null,\n      \"id\" : \"pm-951b1ad9-1fbb-4724-a744-8956ab6ed17f\",\n      \"updated\" : \"2022-08-12T13:30:40.221525Z\",\n      \"virtualAccount\" : null,\n      \"card\" : null,\n      \"status\" : \"ACTIVE\"\n    },\n    \"currency\" : \"PHP\",\n    \"id\" : \"ddpy-3cd658ae-25b9-4659-aa36-596ae41a809f\",\n    \"updated\" : \"2022-08-12T13:30:58.729373Z\",\n    \"status\" : \"SUCCEEDED\"\n  },\n  \"created\" : \"2022-08-12T13:30:58.986Z\",\n  \"businessId\" : \"5f27a14a9bf05c73dd040bc8\",\n  \"event\" : \"payment.succeeded\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SimulatePaymentCallback(paymentCallback: PaymentCallback) {\n    const { id } = paymentCallback\n    // do things here with the callback\n}\n```\n\n----------------------------------------\n\nTITLE: PaymentRequest Properties Table in Markdown\nDESCRIPTION: Markdown table documenting all properties of the PaymentRequest object including their types, required status, descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **id** |string | ☑️ |  | | |\n| **created** |string | ☑️ |  | | |\n| **updated** |string | ☑️ |  | | |\n| **referenceId** |string | ☑️ |  | | |\n| **businessId** |string | ☑️ |  | | |\n| **customerId** |string |  |  | | |\n| **customer** |object |  |  | | |\n| **amount** |number |  |  | | |\n| **minAmount** |number |  |  | | |\n| **maxAmount** |number |  |  | | |\n| **country** |[PaymentRequestCountry](PaymentRequestCountry.md) |  |  | | |\n| **currency** |[PaymentRequestCurrency](PaymentRequestCurrency.md) | ☑️ |  | | |\n| **paymentMethod** |[PaymentMethod](PaymentMethod.md) | ☑️ |  | | |\n| **description** |string |  |  | | |\n| **failureCode** |string |  |  | | |\n| **captureMethod** |[PaymentRequestCaptureMethod](PaymentRequestCaptureMethod.md) |  |  | | |\n| **initiator** |[PaymentRequestInitiator](PaymentRequestInitiator.md) |  |  | | |\n| **cardVerificationResults** |[PaymentRequestCardVerificationResults](PaymentRequestCardVerificationResults.md) |  |  | | |\n| **status** |[PaymentRequestStatus](PaymentRequestStatus.md) | ☑️ |  | | |\n| **actions** |[PaymentRequestAction[]](PaymentRequestAction.md) |  |  | | |\n| **metadata** |object |  |  | | |\n| **shippingInformation** |[PaymentRequestShippingInformation](PaymentRequestShippingInformation.md) |  |  | | |\n| **items** |[PaymentRequestBasketItem[]](PaymentRequestBasketItem.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: PaymentRequestStatus Enum Definition in Xendit Node SDK\nDESCRIPTION: An enumeration of possible payment request statuses in the Xendit payment system. Each enum value represents a specific state in the payment lifecycle, from initial request to final resolution.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Pending` (value: `'PENDING'`)\n\n* `RequiresAction` (value: `'REQUIRES_ACTION'`)\n\n* `Canceled` (value: `'CANCELED'`)\n\n* `Succeeded` (value: `'SUCCEEDED'`)\n\n* `Failed` (value: `'FAILED'`)\n\n* `Voided` (value: `'VOIDED'`)\n\n* `Unknown` (value: `'UNKNOWN'`)\n\n* `AwaitingCapture` (value: `'AWAITING_CAPTURE'`)\n\n* `Expired` (value: `'EXPIRED'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Creating E-Wallet Payment Request\nDESCRIPTION: Example of creating a one-time payment request for ShopeePay e-wallet with redirect URL.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentRequestParameters, PaymentRequest } from 'xendit-node/payment_request/models'\n\nconst data: PaymentRequestParameters = {\n  \"country\" : \"ID\",\n  \"amount\" : 15000,\n  \"paymentMethod\" : {\n    \"ewallet\" : {\n      \"channelProperties\" : {\n        \"successReturnUrl\" : \"https://redirect.me/success\"\n      },\n      \"channelCode\" : \"SHOPEEPAY\"\n    },\n    \"reusability\" : \"ONE_TIME_USE\",\n    \"type\" : \"EWALLET\"\n  },\n  \"currency\" : \"IDR\",\n  \"referenceId\" : \"example-ref-1234\"\n}\n\nconst response: PaymentRequest = await xenditPaymentRequestClient.createPaymentRequest({\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Payment Method Callback in Xendit Node.js SDK\nDESCRIPTION: This snippet illustrates the structure of a PaymentMethodCallback object and how to use it in a webhook handler. It's used for receiving callbacks on events such as successful payments or account linking.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodCallback } from 'xendit-node/payment_method/models'\n\nconst paymentMethodCallback = {\n  \"data\" : {\n    \"country\" : \"PH\",\n    \"metadata\" : null,\n    \"failureCode\" : null,\n    \"created\" : \"2022-08-12T13:30:26.579048Z\",\n    \"description\" : null,\n    \"reusability\" : \"MULTIPLE_USE\",\n    \"type\" : \"DIRECT_DEBIT\",\n    \"billingInformation\" : null,\n    \"directDebit\" : {\n      \"bankAccount\" : {\n        \"maskedBankAccountNumber\" : \"XXXXXX1234\",\n        \"bankAccountHash\" : \"b4dfa99c9b60c77f2e3962b73c098945\"\n      },\n      \"channelProperties\" : {\n        \"failureReturnUrl\" : \"https://your-redirect-website.com/failure\",\n        \"successReturnUrl\" : \"https://your-redirect-website.com/success\"\n      },\n      \"debitCard\" : null,\n      \"type\" : \"BANK_ACCOUNT\",\n      \"channelCode\" : \"BPI\"\n    },\n    \"referenceId\" : \"620b9df4-fe69-4bfd-b9d4-5cba6861db8a\",\n    \"ewallet\" : null,\n    \"directBankTransfer\" : null,\n    \"qrCode\" : null,\n    \"overTheCounter\" : null,\n    \"customerId\" : \"e2878b4c-d57e-4a2c-922d-c0313c2800a3\",\n    \"id\" : \"pm-6ff0b6f2-f5de-457f-b08f-bc98fbae485a\",\n    \"updated\" : \"2022-08-12T13:30:58.908220358Z\",\n    \"virtualAccount\" : null,\n    \"card\" : null,\n    \"status\" : \"ACTIVE\"\n  },\n  \"created\" : \"2022-08-12T13:30:59.074277334Z\",\n  \"businessId\" : \"5f27a14a9bf05c73dd040bc8\",\n  \"event\" : \"payment_method.activated\"\n}\n\nfunction SimulatePaymentMethodCallback(paymentMethodCallback: PaymentMethodCallback) {\n    const { id } = paymentMethodCallback\n    // do things here with the callback\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Xendit PaymentMethod Client in TypeScript\nDESCRIPTION: Shows how to initialize the Xendit client and access the PaymentMethod API module. Demonstrates two approaches: using the destructured client or creating a dedicated PaymentMethod client instance.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit, PaymentMethod as PaymentMethodClient } from 'xendit-node';\n\nconst xenditClient = new Xendit({secretKey: YOUR_SECRET_KEY})\nconst { PaymentMethod } = xenditClient\n\nconst xenditPaymentMethodClient = new PaymentMethodClient({secretKey: YOUR_SECRET_KEY})\n\n// At this point, `PaymentMethod` and `xenditPaymentMethodClient` will have no usage difference, for example:\n// PaymentMethod.\n// or\n// xenditPaymentMethodClient.\n```\n\n----------------------------------------\n\nTITLE: Creating an Invoice with Xendit API in TypeScript\nDESCRIPTION: Demonstrates how to create a new invoice using the Xendit Invoice API. The example shows defining invoice properties like amount, duration, external ID, description, currency, and reminder time.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Invoice.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreateInvoiceRequest, Invoice } from 'xendit-node/invoice/models'\n\nconst data: CreateInvoiceRequest = {\n  \"amount\" : 10000,\n  \"invoiceDuration\" : 172800,\n  \"externalId\" : \"test1234\",\n  \"description\" : \"Test Invoice\",\n  \"currency\" : \"IDR\",\n  \"reminderTime\" : 1\n}\n\nconst response: Invoice = await xenditInvoiceClient.createInvoice({\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethod Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the PaymentMethod model using a markdown table. It includes property names, types, whether they are required, and links to related model definitions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentMethod.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **id** |string | ☑️ |  | | |\n| **type** |[PaymentMethodType](PaymentMethodType.md) | ☑️ |  | | |\n| **created** |string |  |  | | |\n| **updated** |string |  |  | | |\n| **description** |string |  |  | | |\n| **referenceId** |string |  |  | | |\n| **card** |[Card](Card.md) |  |  | | |\n| **directDebit** |[DirectDebit](DirectDebit.md) |  |  | | |\n| **ewallet** |[EWallet](EWallet.md) |  |  | | |\n| **overTheCounter** |[OverTheCounter](OverTheCounter.md) |  |  | | |\n| **virtualAccount** |[VirtualAccount](VirtualAccount.md) |  |  | | |\n| **qrCode** |[QRCode](QRCode.md) |  |  | | |\n| **reusability** |[PaymentMethodReusability](PaymentMethodReusability.md) | ☑️ |  | | |\n| **status** |[PaymentMethodStatus](PaymentMethodStatus.md) | ☑️ |  | | |\n| **metadata** |object |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Payment Methods with Filters in TypeScript\nDESCRIPTION: Demonstrates how to fetch multiple payment methods with optional filtering. Allows retrieving payment methods based on various criteria such as type, status, or customer ID.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodList } from 'xendit-node/payment_method/models'\n\nconst response: PaymentMethodList = await xenditPaymentMethodClient.getAllPaymentMethods({ )\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Account Payment Request\nDESCRIPTION: Example of creating a fixed amount single-use virtual account payment request with BNI bank.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentRequestParameters, PaymentRequest } from 'xendit-node/payment_request/models'\n\nconst data: PaymentRequestParameters = {\n  \"country\" : \"ID\",\n  \"amount\" : 15000,\n  \"metadata\" : {\n    \"sku\" : \"example-sku-1234\"\n  },\n  \"paymentMethod\" : {\n    \"reusability\" : \"ONE_TIME_USE\",\n    \"type\" : \"VIRTUAL_ACCOUNT\",\n    \"virtualAccount\" : {\n      \"channelProperties\" : {\n        \"customerName\" : \"Ahmad Gunawan\",\n        \"expiresAt\" : \"2023-01-03T17:00:00Z\"\n      },\n      \"channelCode\" : \"BNI\"\n    },\n    \"referenceId\" : \"example-1234\"\n  },\n  \"currency\" : \"IDR\",\n  \"referenceId\" : \"example-ref-1234\"\n}\n\nconst response: PaymentRequest = await xenditPaymentRequestClient.createPaymentRequest({\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Refund with Xendit API in TypeScript\nDESCRIPTION: This snippet shows how to use the createRefund function to create a new refund. It imports the Refund model and calls the createRefund method on the xenditRefundClient.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Refund.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Refund } from 'xendit-node/refund/models'\n\nconst response: Refund = await xenditRefundClient.createRefund({ )\n```\n\n----------------------------------------\n\nTITLE: Simulating Payment with Xendit Node.js SDK\nDESCRIPTION: This snippet shows how to use the simulatePayment function from the Xendit Payment Method Client. It simulates a payment operation using a payment method ID.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await xenditPaymentMethodClient.simulatePayment({ \n    paymentMethodId: \"pm-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n })\n```\n\n----------------------------------------\n\nTITLE: Creating Bank or EWallet Payout in TypeScript\nDESCRIPTION: Example of creating a bank or e-wallet payout using the Xendit Payout client. This shows how to structure the payout request with channel properties, amount, currency, and other required fields.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Payout.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CreatePayoutRequest, GetPayouts200ResponseDataInner } from 'xendit-node/payout/models'\n\nconst data: CreatePayoutRequest = {\n  \"amount\" : 90000,\n  \"channelProperties\" : {\n    \"accountNumber\" : \"000000\",\n    \"accountHolderName\" : \"John Doe\"\n  },\n  \"description\" : \"Test Bank Payout\",\n  \"currency\" : \"PHP\",\n  \"type\" : \"DIRECT_DISBURSEMENT\",\n  \"referenceId\" : \"DISB-001\",\n  \"channelCode\" : \"PH_BDO\"\n}\n\nconst response: GetPayouts200ResponseDataInner = await xenditPayoutClient.createPayout({\n    idempotencyKey: \"DISB-1234\",\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Direct Debit Payment Request\nDESCRIPTION: Example of creating a subsequent payment request using a linked direct debit account in Philippines.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentRequestParameters, PaymentRequest } from 'xendit-node/payment_request/models'\n\nconst data: PaymentRequestParameters = {\n  \"amount\" : 1500,\n  \"metadata\" : {\n    \"sku\" : \"example-sku-1234\"\n  },\n  \"paymentMethodId\" : \"pm-9685a196-81e9-4c73-8d62-97df5aab2762\",\n  \"currency\" : \"PHP\",\n  \"referenceId\" : \"example-ref-1234\"\n}\n\nconst response: PaymentRequest = await xenditPaymentRequestClient.createPaymentRequest({\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer with Xendit API in TypeScript\nDESCRIPTION: Demonstrates how to create a new customer using the Xendit API. The function accepts an optional idempotency key, forUserId, and customer data object.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Customer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Customer } from 'xendit-node/customer/models'\n\nconst response: Customer = await xenditCustomerClient.createCustomer({ )\n```\n\n----------------------------------------\n\nTITLE: Initializing Xendit Balance Client in TypeScript\nDESCRIPTION: Shows two ways to initialize the Xendit Balance client - either by destructing from the main Xendit client or by directly instantiating the Balance client. Both approaches require setting a secret key.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Balance.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit, Balance as BalanceClient } from 'xendit-node';\n\nconst xenditClient = new Xendit({secretKey: YOUR_SECRET_KEY})\nconst { Balance } = xenditClient\n\nconst xenditBalanceClient = new BalanceClient({secretKey: YOUR_SECRET_KEY})\n\n// At this point, `Balance` and `xenditBalanceClient` will have no usage difference, for example:\n// Balance.\n// or\n// xenditBalanceClient.\n```\n\n----------------------------------------\n\nTITLE: Creating Direct Debit Payment Method for Philippines in TypeScript\nDESCRIPTION: Shows how to create a direct debit payment method for BPI bank in the Philippines. Includes setting up mobile number, channel properties, and customer details for account linking.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethodParameters, PaymentMethod } from 'xendit-node/payment_method/models'\n\nconst data: PaymentMethodParameters = {\n  \"mobileNumber\" : 628774494404,\n  \"reusability\" : \"MULTIPLE_USE\",\n  \"type\" : \"DIRECT_DEBIT\",\n  \"directDebit\" : {\n    \"channelProperties\" : {\n      \"failureReturnUrl\" : \"https://redirect.me/failure\",\n      \"successReturnUrl\" : \"https://redirect.me/success\"\n    },\n    \"channelCode\" : \"BPI\"\n  },\n  \"email\" : \"testemail@email.com\",\n  \"customer\" : {\n    \"type\" : \"INDIVIDUAL\",\n    \"referenceId\" : \"customer-123\",\n    \"individualDetail\" : {\n      \"surname\" : \"Doe\",\n      \"givenNames\" : \"John\"\n    }\n  }\n}\n\nconst response: PaymentMethod = await xenditPaymentMethodClient.createPaymentMethod({\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Using getBalance Method in TypeScript\nDESCRIPTION: Demonstrates how to use the getBalance method to retrieve balance information. This example imports the Balance model from the Xendit Node package and calls the getBalance method without any parameters.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Balance.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Balance } from 'xendit-node/balance_and_transaction/models'\n\nconst response: Balance = await xenditBalanceClient.getBalance({ )\n```\n\n----------------------------------------\n\nTITLE: Handling Refund Callbacks with Xendit API in TypeScript\nDESCRIPTION: This snippet shows how to work with the RefundCallback object for handling webhooks. It includes an example of the callback object structure and a function to simulate handling a refund callback.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Refund.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundCallback } from 'xendit-node/refund/models'\n\nconst refundCallback = {\n  \"data\" : {\n    \"reason\" : \"CANCELLATION\",\n    \"amount\" : 10000,\n    \"metadata\" : null,\n    \"failureCode\" : null,\n    \"created\" : \"2020-08-30T09:12:33.001Z\",\n    \"referenceId\" : \"b2756a1e-e6cd-4352-9a68-0483aa2b6a2\",\n    \"paymentId\" : \"ddpy-3cd658ae-25b9-4659-aa36-596ae41a809f\",\n    \"refundFeeAmount\" : null,\n    \"invoiceId\" : null,\n    \"currency\" : \"PHP\",\n    \"id\" : \"rfd-6f4a377d-a201-437f-9119-f8b00cbbe857\",\n    \"paymentMethodType\" : \"DIRECT_DEBIT\",\n    \"updated\" : \"2020-08-30T09:12:33.001Z\",\n    \"channelCode\" : \"BPI\",\n    \"status\" : \"SUCCEEDED\"\n  },\n  \"created\" : \"2020-08-29T09:12:33.001Z\",\n  \"businessId\" : \"5f27a14a9bf05c73dd040bc8\",\n  \"event\" : \"refund.succeeded\"\n}\n\nfunction SimulateRefundCallback(refundCallback: RefundCallback) {\n    const { id } = refundCallback\n    // do things here with the callback\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Method Details in TypeScript\nDESCRIPTION: Shows how to update the properties of an existing payment method using the patchPaymentMethod function. Allows modifying payment method attributes after creation.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethod } from 'xendit-node/payment_method/models'\n\nconst response: PaymentMethod = await xenditPaymentMethodClient.patchPaymentMethod({ \n    paymentMethodId: \"pm-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Transactions in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getAllTransactions function to retrieve a list of transactions. It includes the function signature, request parameters, and a usage example.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Transaction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransactionsResponse } from 'xendit-node/balance_and_transaction/models'\n\nconst response: TransactionsResponse = await xenditTransactionClient.getAllTransactions({ )\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Invoice by ID with Xendit API in TypeScript\nDESCRIPTION: Shows how to fetch a specific invoice by its ID using the Xendit Invoice API. The function requires an invoice ID parameter and optionally accepts a forUserId parameter.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Invoice.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Invoice } from 'xendit-node/invoice/models'\n\nconst response: Invoice = await xenditInvoiceClient.getInvoiceById({ \n    invoiceId: \"62efe4c33e45294d63f585f2\",\n)\n```\n\n----------------------------------------\n\nTITLE: PaymentMethodType Enum Definition in Xendit Node.js SDK\nDESCRIPTION: Defines the available payment method types in the Xendit payment system. These enum values are used to specify the payment method when creating transactions. The enum includes a fallback value for handling unknown values in older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentMethodType.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Card` (value: `'CARD'`)\n* `DirectDebit` (value: `'DIRECT_DEBIT'`)\n* `Ewallet` (value: `'EWALLET'`)\n* `OverTheCounter` (value: `'OVER_THE_COUNTER'`)\n* `QrCode` (value: `'QR_CODE'`)\n* `VirtualAccount` (value: `'VIRTUAL_ACCOUNT'`)\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethod Properties in Markdown\nDESCRIPTION: A markdown table detailing the properties of the PaymentMethod object. It includes property names, types, whether they are required, descriptions, and examples. The table covers various payment-related properties such as ID, business ID, type, country, customer details, status, and specific payment method types like e-wallet, direct debit, and virtual account.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/PaymentMethod.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **id** |string | ☑️ |  | | |\n| **businessId** |string |  |  | | |\n| **type** |[PaymentMethodType](PaymentMethodType.md) |  |  | | |\n| **country** |[PaymentMethodCountry](PaymentMethodCountry.md) |  |  | | |\n| **customerId** |string |  |  | | |\n| **customer** |object |  |  | | |\n| **referenceId** |string |  |  | | |\n| **description** |string |  |  | | |\n| **status** |[PaymentMethodStatus](PaymentMethodStatus.md) |  |  | | |\n| **reusability** |[PaymentMethodReusability](PaymentMethodReusability.md) |  |  | | |\n| **actions** |[PaymentMethodAction[]](PaymentMethodAction.md) |  |  | | |\n| **metadata** |object |  |  | | |\n| **billingInformation** |[BillingInformation](BillingInformation.md) |  |  | | |\n| **failureCode** |string |  |  | | |\n| **created** |Date |  |  | | |\n| **updated** |Date |  |  | | |\n| **ewallet** |[EWallet](EWallet.md) |  |  | | |\n| **directDebit** |[DirectDebit](DirectDebit.md) |  |  | | |\n| **overTheCounter** |[OverTheCounter](OverTheCounter.md) |  |  | | |\n| **card** |[Card](Card.md) |  |  | | |\n| **qrCode** |[QRCode](QRCode.md) |  |  | | |\n| **virtualAccount** |[VirtualAccount](VirtualAccount.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Method by ID in TypeScript\nDESCRIPTION: Shows how to retrieve a payment method by its ID using the getPaymentMethodByID function. This allows fetching the details of a previously created payment method.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethod } from 'xendit-node/payment_method/models'\n\nconst response: PaymentMethod = await xenditPaymentMethodClient.getPaymentMethodByID({ \n    paymentMethodId: \"pm-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payments by Payment Method ID in TypeScript\nDESCRIPTION: Demonstrates fetching all payments associated with a specific payment method ID. Useful for tracking transactions made with a particular payment method.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response: object = await xenditPaymentMethodClient.getPaymentsByPaymentMethodId({ \n    paymentMethodId: \"pm-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Tokenized E-Wallet Payment Request\nDESCRIPTION: Example of creating a subsequent payment request using a previously linked e-wallet account.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentRequestParameters, PaymentRequest } from 'xendit-node/payment_request/models'\n\nconst data: PaymentRequestParameters = {\n  \"amount\" : 15000,\n  \"metadata\" : {\n    \"sku\" : \"example-sku-1234\"\n  },\n  \"paymentMethodId\" : \"pm-2b2c6092-2100-4843-a7fc-f5c7edac7efd\",\n  \"currency\" : \"IDR\",\n  \"referenceId\" : \"example-ref-1234\"\n}\n\nconst response: PaymentRequest = await xenditPaymentRequestClient.createPaymentRequest({\n    data\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payout by ID in TypeScript\nDESCRIPTION: Example of retrieving a specific payout using its ID. This function allows checking the status and details of a previously created payout.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Payout.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPayouts200ResponseDataInner } from 'xendit-node/payout/models'\n\nconst response: GetPayouts200ResponseDataInner = await xenditPayoutClient.getPayoutById({ \n    id: \"disb-7baa7335-a0b2-4678-bb8c-318c0167f332\",\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Refund with Xendit API in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getRefund function to retrieve a specific refund. It imports the Refund model and calls the getRefund method on the xenditRefundClient with a refundID.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Refund.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Refund } from 'xendit-node/refund/models'\n\nconst response: Refund = await xenditRefundClient.getRefund({ \n    refundID: \"rfd-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining EWalletChannelCode Enum in JavaScript\nDESCRIPTION: This enum defines all supported e-wallet payment channels in the Xendit Node.js SDK. It includes options for various e-wallet providers across Southeast Asia such as GCash, GrabPay, OVO, Dana, and others. A fallback value 'UNKNOWN_ENUM_VALUE' is provided for handling cases where the SDK version might be outdated.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/EWalletChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Gcash` (value: `'GCASH'`)\n* `Grabpay` (value: `'GRABPAY'`)\n* `Paymaya` (value: `'PAYMAYA'`)\n* `Ovo` (value: `'OVO'`)\n* `Dana` (value: `'DANA'`)\n* `Linkaja` (value: `'LINKAJA'`)\n* `Shopeepay` (value: `'SHOPEEPAY'`)\n* `Sakuku` (value: `'SAKUKU'`)\n* `Nexcash` (value: `'NEXCASH'`)\n* `Astrapay` (value: `'ASTRAPAY'`)\n* `Jeniuspay` (value: `'JENIUSPAY'`)\n* `Appota` (value: `'APPOTA'`)\n* `Momo` (value: `'MOMO'`)\n* `Vnptwallet` (value: `'VNPTWALLET'`)\n* `Viettelpay` (value: `'VIETTELPAY'`)\n* `Zalopay` (value: `'ZALOPAY'`)\n* `Wechatpay` (value: `'WECHATPAY'`)\n* `Linepay` (value: `'LINEPAY'`)\n* `Truemoney` (value: `'TRUEMONEY'`)\n* `Alipay` (value: `'ALIPAY'`)\n* `Touchngo` (value: `'TOUCHNGO'`)\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Canceling a Payout in TypeScript\nDESCRIPTION: Example of canceling a requested payout that has not yet been sent to partner banks and e-wallets. Cancellation is only possible when the payout status is ACCEPTED.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Payout.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPayouts200ResponseDataInner } from 'xendit-node/payout/models'\n\nconst response: GetPayouts200ResponseDataInner = await xenditPayoutClient.cancelPayout({ \n    id: \"disb-7baa7335-a0b2-4678-bb8c-318c0167f332\",\n)\n```\n\n----------------------------------------\n\nTITLE: Updating a Customer with Xendit API in TypeScript\nDESCRIPTION: Demonstrates how to update an existing customer's information. The function requires a customer ID and accepts optional forUserId and data parameters containing fields to update.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Customer.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Customer } from 'xendit-node/customer/models'\n\nconst response: Customer = await xenditCustomerClient.updateCustomer({ \n    id: \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Transaction Type Enum Values in JavaScript\nDESCRIPTION: Enumerates all possible transaction types in the Xendit Node.js SDK. Includes transaction categories like disbursements, payments, remittances, transfers, fees, refunds, and account operations. A fallback value is provided for backward compatibility with older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/balance_and_transaction/TransactionTypes.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `BatchDisbursement` (value: `'BATCH_DISBURSEMENT'`)\n\n* `Disbursement` (value: `'DISBURSEMENT'`)\n\n* `Payment` (value: `'PAYMENT'`)\n\n* `Remittance` (value: `'REMITTANCE'`)\n\n* `RemittancePayout` (value: `'REMITTANCE_PAYOUT'`)\n\n* `RemittanceCollection` (value: `'REMITTANCE_COLLECTION'`)\n\n* `Transfer` (value: `'TRANSFER'`)\n\n* `PlatformFee` (value: `'PLATFORM_FEE'`)\n\n* `Refund` (value: `'REFUND'`)\n\n* `Cashback` (value: `'CASHBACK'`)\n\n* `Topup` (value: `'TOPUP'`)\n\n* `Withdrawal` (value: `'WITHDRAWAL'`)\n\n* `Other` (value: `'OTHER'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Invoices with Xendit API in TypeScript\nDESCRIPTION: Demonstrates how to fetch multiple invoices with optional filtering parameters using the Xendit Invoice API. The function returns an array of Invoice objects.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Invoice.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Invoice } from 'xendit-node/invoice/models'\n\nconst response: Invoice[] = await xenditInvoiceClient.getInvoices({ )\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Transaction by ID in TypeScript\nDESCRIPTION: This snippet shows how to use the getTransactionByID function to retrieve a specific transaction. It includes the function signature, request parameters, and a usage example.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Transaction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TransactionResponse } from 'xendit-node/balance_and_transaction/models'\n\nconst response: TransactionResponse = await xenditTransactionClient.getTransactionByID({ \n    id: \"id_example\",\n)\n```\n\n----------------------------------------\n\nTITLE: Canceling a Refund with Xendit API in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the cancelRefund function to cancel a specific refund. It imports the Refund model and calls the cancelRefund method on the xenditRefundClient with a refundID.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Refund.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Refund } from 'xendit-node/refund/models'\n\nconst response: Refund = await xenditRefundClient.cancelRefund({ \n    refundID: \"rfd-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Xendit Refund Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Xendit client and Refund module. It shows two ways to create a Refund client: using the Xendit instance or directly importing the Refund module.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Refund.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit, Refund as RefundClient } from 'xendit-node';\n\nconst xenditClient = new Xendit({secretKey: YOUR_SECRET_KEY})\nconst { Refund } = xenditClient\n\nconst xenditRefundClient = new RefundClient({secretKey: YOUR_SECRET_KEY})\n\n// At this point, `Refund` and `xenditRefundClient` will have no usage difference, for example:\n// Refund.\n// or\n// xenditRefundClient.\n```\n\n----------------------------------------\n\nTITLE: Expiring a Payment Method in TypeScript\nDESCRIPTION: Shows how to explicitly expire a payment method using the expirePaymentMethod function. This is useful for invalidating payment methods that should no longer be used.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethod } from 'xendit-node/payment_method/models'\n\nconst response: PaymentMethod = await xenditPaymentMethodClient.expirePaymentMethod({ \n    paymentMethodId: \"pm-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n)\n```\n\n----------------------------------------\n\nTITLE: Authorizing Payment Request in Xendit Node.js SDK\nDESCRIPTION: Demonstrates how to authorize a payment request using the Xendit client. Requires paymentRequestId as a mandatory parameter.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentRequest } from 'xendit-node/payment_request/models'\n\nconst response: PaymentRequest = await xenditPaymentRequestClient.authorizePaymentRequest({ \n    paymentRequestId: \"pr-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionStatuses Enum in JavaScript\nDESCRIPTION: This enum defines possible transaction statuses for use in the Xendit Node.js SDK. It includes standard statuses like SUCCESS, PENDING, FAILED, as well as REVERSED and VOIDED. A default fallback is provided for unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/balance_and_transaction/TransactionStatuses.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Success` (value: `'SUCCESS'`)\n\n* `Pending` (value: `'PENDING'`)\n\n* `Failed` (value: `'FAILED'`)\n\n* `Reversed` (value: `'REVERSED'`)\n\n* `Voided` (value: `'VOIDED'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining Direct Debit Type Enum Values in TypeScript\nDESCRIPTION: Enumeration defining the available direct debit payment types in the Xendit system. Includes options for debit cards, bank accounts, bank redirects, and a fallback value for unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/DirectDebitType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum DirectDebitType {\n    DebitCard = 'DEBIT_CARD',\n    BankAccount = 'BANK_ACCOUNT',\n    BankRedirect = 'BANK_REDIRECT',\n    XenditEnumDefaultFallback = 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Customer by ID with Xendit API in TypeScript\nDESCRIPTION: Shows how to fetch a customer record by their unique ID. The function requires an ID parameter and accepts an optional forUserId parameter.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Customer.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Customer } from 'xendit-node/customer/models'\n\nconst response: Customer = await xenditCustomerClient.getCustomer({ \n    id: \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n)\n```\n\n----------------------------------------\n\nTITLE: Authenticating Payment Method with Xendit Node.js SDK\nDESCRIPTION: This snippet demonstrates how to use the authPaymentMethod function from the Xendit Payment Method Client. It authenticates a payment method using its ID and returns a PaymentMethod object.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentMethod.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentMethod } from 'xendit-node/payment_method/models'\n\nconst response: PaymentMethod = await xenditPaymentMethodClient.authPaymentMethod({ \n    paymentMethodId: \"pm-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodStatus Enum Values in JavaScript\nDESCRIPTION: An enumeration of possible payment method statuses in the Xendit system. It defines standard statuses (Active, Inactive, Pending, Expired, Failed) and includes a fallback value for handling unknown enum values that might appear in newer API versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentMethodStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Active` (value: `'ACTIVE'`)\n\n* `Inactive` (value: `'INACTIVE'`)\n\n* `Pending` (value: `'PENDING'`)\n\n* `Expired` (value: `'EXPIRED'`)\n\n* `Failed` (value: `'FAILED'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Customer by Reference ID with Xendit API in TypeScript\nDESCRIPTION: Illustrates how to get customer information using a reference ID. The function requires a referenceId parameter and accepts an optional forUserId parameter.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Customer.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetCustomerByReferenceID200Response } from 'xendit-node/customer/models'\n\nconst response: GetCustomerByReferenceID200Response = await xenditCustomerClient.getCustomerByReferenceID({ \n    referenceId: \"referenceId_example\",\n)\n```\n\n----------------------------------------\n\nTITLE: Handling Invoice Callback Objects in TypeScript\nDESCRIPTION: Demonstrates the structure of an Invoice callback object sent by Xendit on events like successful payments. Includes an example of how to use the callback object in a webhook handler.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Invoice.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { InvoiceCallback } from 'xendit-node/invoice/models'\n\nconst invoiceCallback = {\n  \"amount\" : 2000000,\n  \"paymentDestination\" : \"TEST815\",\n  \"created\" : \"2020-01-13T02:32:49.827Z\",\n  \"externalId\" : \"testing-invoice\",\n  \"description\" : \"Invoice webhook test\",\n  \"userId\" : \"5848fdf860053555135587e7\",\n  \"merchantName\" : \"Xendit\",\n  \"paymentChannel\" : \"ALFAMART\",\n  \"paymentMethod\" : \"RETAIL_OUTLET\",\n  \"paidAt\" : \"2020-01-14T02:32:50.912Z\",\n  \"currency\" : \"IDR\",\n  \"id\" : \"593f4ed1c3d3bb7f39733d83\",\n  \"paidAmount\" : 2000000,\n  \"payerEmail\" : \"test@xendit.co\",\n  \"updated\" : \"2020-01-13T02:32:50.912Z\",\n  \"status\" : \"PAID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Payouts by Reference ID in TypeScript\nDESCRIPTION: Example of retrieving multiple payouts using a reference ID. This function allows fetching all payouts matching a specific reference ID.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Payout.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetPayouts200Response } from 'xendit-node/payout/models'\n\nconst response: GetPayouts200Response = await xenditPayoutClient.getPayouts({ \n    referenceId: \"DISB-123\",\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentRequestInitiator Enum in JavaScript\nDESCRIPTION: This enum defines the possible initiators of a payment request in the Xendit system. It includes 'CUSTOMER' for customer-initiated requests, 'MERCHANT' for merchant-initiated requests, and a fallback value for unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestInitiator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Customer` (value: `'CUSTOMER'`)\n\n* `Merchant` (value: `'MERCHANT'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Manually Expiring an Invoice with Xendit API in TypeScript\nDESCRIPTION: Shows how to manually expire an invoice using the Xendit Invoice API. The function requires an invoice ID parameter and optionally accepts a forUserId parameter.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Invoice.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Invoice } from 'xendit-node/invoice/models'\n\nconst response: Invoice = await xenditInvoiceClient.expireInvoice({ \n    invoiceId: \"5f4708b7bd394b0400b96276\",\n)\n```\n\n----------------------------------------\n\nTITLE: Resending Payment Request Authorization in Xendit Node.js SDK\nDESCRIPTION: Shows how to resend a payment request authorization using the Xendit client. Requires paymentRequestId as a mandatory parameter.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentRequest } from 'xendit-node/payment_request/models'\n\nconst response: PaymentRequest = await xenditPaymentRequestClient.resendPaymentRequestAuth({ \n    paymentRequestId: \"pr-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Xendit Invoice Client in TypeScript\nDESCRIPTION: Shows how to initialize the Xendit Invoice client using either the destructured client or direct module import. Both approaches provide the same functionality for interacting with the Invoice API.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Invoice.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit, Invoice as InvoiceClient } from 'xendit-node';\n\nconst xenditClient = new Xendit({secretKey: YOUR_SECRET_KEY})\nconst { Invoice } = xenditClient\n\nconst xenditInvoiceClient = new InvoiceClient({secretKey: YOUR_SECRET_KEY})\n\n// At this point, `Invoice` and `xenditInvoiceClient` will have no usage difference, for example:\n// Invoice.\n// or\n// xenditInvoiceClient.\n```\n\n----------------------------------------\n\nTITLE: Direct Debit Channel Code Enum Definition\nDESCRIPTION: Enumeration of all supported direct debit channel codes in the Xendit system. Includes codes for various banks across Southeast Asia including BCA, BRI, BNI, Mandiri, BPI, BDO, and FPX payment channels. Contains a fallback value for unknown enum values that may appear in newer SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/DirectDebitChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    BcaKlikpay: 'BCA_KLIKPAY',\n    BcaOneklik: 'BCA_ONEKLIK',\n    Bri: 'BRI',\n    BniAutopay: 'BNI_AUTOPAY',\n    Mandiri: 'MANDIRI',\n    Bpi: 'BPI',\n    BpiRecurring: 'BPI_RECURRING',\n    Bdo: 'BDO',\n    Cimbniaga: 'CIMBNIAGA',\n    Mtb: 'MTB',\n    Rcbc: 'RCBC',\n    Ubp: 'UBP',\n    UbpEada: 'UBP_EADA',\n    UbpDebitPull: 'UBP_DEBIT_PULL',\n    Chinabank: 'CHINABANK',\n    Bay: 'BAY',\n    Ktb: 'KTB',\n    Bbl: 'BBL',\n    Scb: 'SCB',\n    KbankMb: 'KBANK_MB',\n    BayMb: 'BAY_MB',\n    KtbMb: 'KTB_MB',\n    BblMb: 'BBL_MB',\n    ScbMb: 'SCB_MB',\n    BdoEpay: 'BDO_EPAY',\n    AffinFpx: 'AFFIN_FPX',\n    AgroFpx: 'AGRO_FPX',\n    AllianceFpx: 'ALLIANCE_FPX',\n    AmbankFpx: 'AMBANK_FPX',\n    IslamFpx: 'ISLAM_FPX',\n    MuamalatFpx: 'MUAMALAT_FPX',\n    BocFpx: 'BOC_FPX',\n    RakyatFpx: 'RAKYAT_FPX',\n    BsnFpx: 'BSN_FPX',\n    CimbFpx: 'CIMB_FPX',\n    HlbFpx: 'HLB_FPX',\n    HsbcFpx: 'HSBC_FPX',\n    KfhFpx: 'KFH_FPX',\n    Mayb2EFpx: 'MAYB2E_FPX',\n    Mayb2UFpx: 'MAYB2U_FPX',\n    OcbcFpx: 'OCBC_FPX',\n    PublicFpx: 'PUBLIC_FPX',\n    RhbFpx: 'RHB_FPX',\n    SchFpx: 'SCH_FPX',\n    UobFpx: 'UOB_FPX',\n    XenditEnumDefaultFallback: UNKNOWN_ENUM_VALUE\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Payout Channels in TypeScript\nDESCRIPTION: Example of retrieving the available channels for payouts. This function can be used to get the current list of supported banks and e-wallets for payouts.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Payout.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel } from 'xendit-node/payout/models'\n\nconst response: Channel[] = await xenditPayoutClient.getPayoutChannels({ )\n```\n\n----------------------------------------\n\nTITLE: Listing All Refunds with Xendit API in TypeScript\nDESCRIPTION: This snippet shows how to use the getAllRefunds function to retrieve a list of refunds. It imports the RefundList model and calls the getAllRefunds method on the xenditRefundClient.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Refund.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RefundList } from 'xendit-node/refund/models'\n\nconst response: RefundList = await xenditRefundClient.getAllRefunds({ )\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentRequestCaptureMethod Enum in JavaScript\nDESCRIPTION: Enum definition for PaymentRequestCaptureMethod which specifies how a payment request should be captured. It supports 'AUTOMATIC' for immediate capture, 'MANUAL' for deferred capture, and a fallback value for backward compatibility.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestCaptureMethod.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Automatic` (value: `'AUTOMATIC'`)\n\n* `Manual` (value: `'MANUAL'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: ChannelsCategories Enum Definition in JavaScript\nDESCRIPTION: An enum defining various payment channel categories for Xendit's payment processing system. Each enum value represents a different payment method category that can be used when integrating with Xendit's API.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/balance_and_transaction/ChannelsCategories.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Bank` (value: `'BANK'`)\n* `CardlessCredit` (value: `'CARDLESS_CREDIT'`)\n* `Paylater` (value: `'PAYLATER'`)\n* `Cards` (value: `'CARDS'`)\n* `Cash` (value: `'CASH'`)\n* `DirectDebit` (value: `'DIRECT_DEBIT'`)\n* `Ewallet` (value: `'EWALLET'`)\n* `Invoice` (value: `'INVOICE'`)\n* `QrCode` (value: `'QR_CODE'`)\n* `RetailOutlet` (value: `'RETAIL_OUTLET'`)\n* `VirtualAccount` (value: `'VIRTUAL_ACCOUNT'`)\n* `Xenplatform` (value: `'XENPLATFORM'`)\n* `DirectBankTransfer` (value: `'DIRECT_BANK_TRANSFER'`)\n* `Other` (value: `'OTHER'`)\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining EwalletType Enum in JavaScript\nDESCRIPTION: This enum defines the available eWallet channels used for invoice-related transactions in the Xendit system. It includes popular eWallet providers from different countries in Southeast Asia. The enum also includes a fallback value for unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/EwalletType.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nEwalletType = {\n    Ovo: 'OVO',\n    Dana: 'DANA',\n    Linkaja: 'LINKAJA',\n    Paymaya: 'PAYMAYA',\n    Shopeepay: 'SHOPEEPAY',\n    Gcash: 'GCASH',\n    Grabpay: 'GRABPAY',\n    Astrapay: 'ASTRAPAY',\n    Nexcash: 'NEXCASH',\n    Jeniuspay: 'JENIUSPAY',\n    Momo: 'MOMO',\n    Zalopay: 'ZALOPAY',\n    Viettelpay: 'VIETTELPAY',\n    Vnptwallet: 'VNPTWALLET',\n    Appota: 'APPOTA',\n    Linepay: 'LINEPAY',\n    Truemoney: 'TRUEMONEY',\n    Wechatpay: 'WECHATPAY',\n    Touchngo: 'TOUCHNGO',\n    XenditEnumDefaultFallback: 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Xendit Customer Client in TypeScript\nDESCRIPTION: Shows two ways to initialize a Xendit Customer client: by destructuring from the main Xendit client or by directly importing the Customer module. Both methods require providing your secret key.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Customer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit, Customer as CustomerClient } from 'xendit-node';\n\nconst xenditClient = new Xendit({secretKey: YOUR_SECRET_KEY})\nconst { Customer } = xenditClient\n\nconst xenditCustomerClient = new CustomerClient({secretKey: YOUR_SECRET_KEY})\n\n// At this point, `Customer` and `xenditCustomerClient` will have no usage difference, for example:\n// Customer.\n// or\n// xenditCustomerClient.\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodReusability Enum in JavaScript\nDESCRIPTION: Enumeration defining possible values for payment method reusability. It includes options for multiple use, one-time use, and a fallback for handling unknown enum values in different SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/PaymentMethodReusability.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `MultipleUse` (value: `'MULTIPLE_USE'`)\n\n* `OneTimeUse` (value: `'ONE_TIME_USE'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining OTC Channel Code Enums in JavaScript\nDESCRIPTION: Enumeration of available over-the-counter payment channel codes with their corresponding string values. Includes retail chains, pawnshops, and convenience stores across Southeast Asia. Falls back to UNKNOWN_ENUM_VALUE for unsupported channels.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/OverTheCounterChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    _7Eleven: '7ELEVEN',\n    _7ElevenCliqq: '7ELEVEN_CLIQQ',\n    Cebuana: 'CEBUANA',\n    Ecpay: 'ECPAY',\n    Palawan: 'PALAWAN',\n    Mlhuillier: 'MLHUILLIER',\n    EcpayDragonloan: 'ECPAY_DRAGONLOAN',\n    Lbc: 'LBC',\n    EcpaySchool: 'ECPAY_SCHOOL',\n    RdPawnshop: 'RD_PAWNSHOP',\n    Cvm: 'CVM',\n    Ussc: 'USSC',\n    SmBills: 'SM_BILLS',\n    RobinsonsBills: 'ROBINSONS_BILLS',\n    Alfamart: 'ALFAMART',\n    Indomaret: 'INDOMARET',\n    XenditEnumDefaultFallback: 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Xendit Transaction Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Xendit client and Transaction module. It shows two methods of initialization: using the Xendit constructor and directly importing the Transaction client.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Transaction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit, Transaction as TransactionClient } from 'xendit-node';\n\nconst xenditClient = new Xendit({secretKey: YOUR_SECRET_KEY})\nconst { Transaction } = xenditClient\n\nconst xenditTransactionClient = new TransactionClient({secretKey: YOUR_SECRET_KEY})\n\n// At this point, `Transaction` and `xenditTransactionClient` will have no usage difference, for example:\n// Transaction.\n// or\n// xenditTransactionClient.\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelCategory Enum in JavaScript for Xendit Node SDK\nDESCRIPTION: This enum defines categories for payment channels in the Xendit system. It includes values for Bank, Ewallet, OTC (Over The Counter), and a fallback for unknown values. The enum is used to classify different payment methods.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payout/ChannelCategory.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Bank` (value: `'BANK'`)\n\n* `Ewallet` (value: `'EWALLET'`)\n\n* `Otc` (value: `'OTC'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Identity Account Type Enum Definition\nDESCRIPTION: Defines the available payment account types in the Xendit system. Includes bank accounts, e-wallets, credit cards, pay later options, over-the-counter payments, and QR code payments. Contains a fallback value for handling unknown enum values in older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/IdentityAccountType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum IdentityAccountType {\n    BankAccount = 'BANK_ACCOUNT',\n    Ewallet = 'EWALLET',\n    CreditCard = 'CREDIT_CARD',\n    PayLater = 'PAY_LATER',\n    Otc = 'OTC',\n    QrCode = 'QR_CODE',\n    XenditEnumDefaultFallback = 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Webhook Handler for Invoice Callbacks in TypeScript\nDESCRIPTION: Shows how to implement a function that processes Invoice callbacks in a webhook handler. The function extracts the invoice ID from the callback object for further processing.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Invoice.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction SimulateInvoiceCallback(invoiceCallback: InvoiceCallback) {\n    const { id } = invoiceCallback\n    // do things here with the callback\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceCurrency Enum in TypeScript\nDESCRIPTION: Defines the InvoiceCurrency enum with currency codes for Southeast Asian countries including IDR, USD, THB, VND, PHP, MYR, and a default fallback value for handling unknown enum values in older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/InvoiceCurrency.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n* `Idr` (value: `'IDR'`)\n\n* `Usd` (value: `'USD'`)\n\n* `Thb` (value: `'THB'`)\n\n* `Vnd` (value: `'VND'`)\n\n* `Php` (value: `'PHP'`)\n\n* `Myr` (value: `'MYR'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Refund Callback Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the RefundCallback interface, including event type, business ID, creation timestamp, and refund data object. Contains information about property names, types, requirements, and descriptions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/refund/RefundCallback.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **event** |string | ☑️ | Identifies the event that triggered a notification to the merchant | | |\n| **businessId** |string | ☑️ | business_id | | |\n| **created** |string | ☑️ |  | | |\n| **data** |[RefundCallbackData](RefundCallbackData.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Simulating Payment Request Payment in Xendit Node.js SDK\nDESCRIPTION: Demonstrates how to simulate a payment request payment using the Xendit client. Requires paymentRequestId as a mandatory parameter.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/PaymentRequest.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymentSimulation } from 'xendit-node/payment_request/models'\n\nconst response: PaymentSimulation = await xenditPaymentRequestClient.simulatePaymentRequestPayment({ \n    paymentRequestId: \"pr-1fdaf346-dd2e-4b6c-b938-124c7167a822\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodCountry Enum in JavaScript\nDESCRIPTION: Defines an enum for payment method countries with two-letter country codes as values. Includes a fallback value for handling unknown enum values and instructions for updating the SDK if encountering the fallback value.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/PaymentMethodCountry.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Ph` (value: `'PH'`)\n\n* `Id` (value: `'ID'`)\n\n* `Vn` (value: `'VN'`)\n\n* `Th` (value: `'TH'`)\n\n* `My` (value: `'MY'`)\n\n* `Us` (value: `'US'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining EWallet Properties in Markdown\nDESCRIPTION: This markdown table outlines the properties of the EWallet payment method. It includes the property names, their types, whether they are required, and links to more detailed documentation for each property.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/EWallet.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[EWalletChannelCode](EWalletChannelCode.md) |  |  | | |\n| **channelProperties** |[EWalletChannelProperties](EWalletChannelProperties.md) |  |  | | |\n| **account** |[EWalletAccount](EWalletAccount.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Currency Code Enumeration in Xendit Node.js SDK\nDESCRIPTION: A comprehensive list of currency codes that can be used with the Xendit API. The enumeration includes common currencies like IDR, PHP, USD, and a wide range of international currencies. A fallback value is provided for unknown enumeration values, with a recommendation to upgrade the SDK for access to the newest enumerations.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/balance_and_transaction/Currency.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Idr` (value: `'IDR'`)\n\n* `Php` (value: `'PHP'`)\n\n* `Usd` (value: `'USD'`)\n\n* `Jpy` (value: `'JPY'`)\n\n* `Vnd` (value: `'VND'`)\n\n* `Sgd` (value: `'SGD'`)\n\n* `Aed` (value: `'AED'`)\n\n* `Afn` (value: `'AFN'`)\n\n* `All` (value: `'ALL'`)\n\n* `Amd` (value: `'AMD'`)\n\n* `Ang` (value: `'ANG'`)\n\n* `Aoa` (value: `'AOA'`)\n\n* `Ars` (value: `'ARS'`)\n\n* `Aud` (value: `'AUD'`)\n\n* `Awg` (value: `'AWG'`)\n\n* `Azn` (value: `'AZN'`)\n\n* `Bam` (value: `'BAM'`)\n\n* `Bbd` (value: `'BBD'`)\n\n* `Bdt` (value: `'BDT'`)\n\n* `Bgn` (value: `'BGN'`)\n\n* `Bhd` (value: `'BHD'`)\n\n* `Bif` (value: `'BIF'`)\n\n* `Bmd` (value: `'BMD'`)\n\n* `Bnd` (value: `'BND'`)\n\n* `Bob` (value: `'BOB'`)\n\n* `Brl` (value: `'BRL'`)\n\n* `Bsd` (value: `'BSD'`)\n\n* `Btn` (value: `'BTN'`)\n\n* `Bwp` (value: `'BWP'`)\n\n* `Byn` (value: `'BYN'`)\n\n* `Bzd` (value: `'BZD'`)\n\n* `Cad` (value: `'CAD'`)\n\n* `Cdf` (value: `'CDF'`)\n\n* `Chf` (value: `'CHF'`)\n\n* `Clp` (value: `'CLP'`)\n\n* `Cny` (value: `'CNY'`)\n\n* `Cop` (value: `'COP'`)\n\n* `Crc` (value: `'CRC'`)\n\n* `Cuc` (value: `'CUC'`)\n\n* `Cup` (value: `'CUP'`)\n\n* `Cve` (value: `'CVE'`)\n\n* `Czk` (value: `'CZK'`)\n\n* `Djf` (value: `'DJF'`)\n\n* `Dkk` (value: `'DKK'`)\n\n* `Dop` (value: `'DOP'`)\n\n* `Dzd` (value: `'DZD'`)\n\n* `Egp` (value: `'EGP'`)\n\n* `Ern` (value: `'ERN'`)\n\n* `Etb` (value: `'ETB'`)\n\n* `Eur` (value: `'EUR'`)\n\n* `Fjd` (value: `'FJD'`)\n\n* `Fkp` (value: `'FKP'`)\n\n* `Gbp` (value: `'GBP'`)\n\n* `Gel` (value: `'GEL'`)\n\n* `Ggp` (value: `'GGP'`)\n\n* `Ghs` (value: `'GHS'`)\n\n* `Gip` (value: `'GIP'`)\n\n* `Gmd` (value: `'GMD'`)\n\n* `Gnf` (value: `'GNF'`)\n\n* `Gtq` (value: `'GTQ'`)\n\n* `Gyd` (value: `'GYD'`)\n\n* `Hkd` (value: `'HKD'`)\n\n* `Hnl` (value: `'HNL'`)\n\n* `Hrk` (value: `'HRK'`)\n\n* `Htg` (value: `'HTG'`)\n\n* `Huf` (value: `'HUF'`)\n\n* `Ils` (value: `'ILS'`)\n\n* `Imp` (value: `'IMP'`)\n\n* `Inr` (value: `'INR'`)\n\n* `Iqd` (value: `'IQD'`)\n\n* `Irr` (value: `'IRR'`)\n\n* `Isk` (value: `'ISK'`)\n\n* `Jep` (value: `'JEP'`)\n\n* `Jmd` (value: `'JMD'`)\n\n* `Jod` (value: `'JOD'`)\n\n* `Kes` (value: `'KES'`)\n\n* `Kgs` (value: `'KGS'`)\n\n* `Khr` (value: `'KHR'`)\n\n* `Kmf` (value: `'KMF'`)\n\n* `Kpw` (value: `'KPW'`)\n\n* `Krw` (value: `'KRW'`)\n\n* `Kwd` (value: `'KWD'`)\n\n* `Kyd` (value: `'KYD'`)\n\n* `Kzt` (value: `'KZT'`)\n\n* `Lak` (value: `'LAK'`)\n\n* `Lbp` (value: `'LBP'`)\n\n* `Lkr` (value: `'LKR'`)\n\n* `Lrd` (value: `'LRD'`)\n\n* `Lsl` (value: `'LSL'`)\n\n* `Lyd` (value: `'LYD'`)\n\n* `Mad` (value: `'MAD'`)\n\n* `Mdl` (value: `'MDL'`)\n\n* `Mga` (value: `'MGA'`)\n\n* `Mkd` (value: `'MKD'`)\n\n* `Mmk` (value: `'MMK'`)\n\n* `Mnt` (value: `'MNT'`)\n\n* `Mop` (value: `'MOP'`)\n\n* `Mru` (value: `'MRU'`)\n\n* `Mur` (value: `'MUR'`)\n\n* `Mvr` (value: `'MVR'`)\n\n* `Mwk` (value: `'MWK'`)\n\n* `Mxn` (value: `'MXN'`)\n\n* `Myr` (value: `'MYR'`)\n\n* `Mzn` (value: `'MZN'`)\n\n* `Nad` (value: `'NAD'`)\n\n* `Ngn` (value: `'NGN'`)\n\n* `Nio` (value: `'NIO'`)\n\n* `Nok` (value: `'NOK'`)\n\n* `Npr` (value: `'NPR'`)\n\n* `Nzd` (value: `'NZD'`)\n\n* `Omr` (value: `'OMR'`)\n\n* `Pab` (value: `'PAB'`)\n\n* `Pen` (value: `'PEN'`)\n\n* `Pgk` (value: `'PGK'`)\n\n* `Pkr` (value: `'PKR'`)\n\n* `Pln` (value: `'PLN'`)\n\n* `Pyg` (value: `'PYG'`)\n\n* `Qar` (value: `'QAR'`)\n\n* `Ron` (value: `'RON'`)\n\n* `Rsd` (value: `'RSD'`)\n\n* `Rub` (value: `'RUB'`)\n\n* `Rwf` (value: `'RWF'`)\n\n* `Sar` (value: `'SAR'`)\n\n* `Sbd` (value: `'SBD'`)\n\n* `Scr` (value: `'SCR'`)\n\n* `Sdg` (value: `'SDG'`)\n\n* `Sek` (value: `'SEK'`)\n\n* `Shp` (value: `'SHP'`)\n\n* `Sll` (value: `'SLL'`)\n\n* `Sos` (value: `'SOS'`)\n\n* `Spl` (value: `'SPL'`)\n\n* `Srd` (value: `'SRD'`)\n\n* `Stn` (value: `'STN'`)\n\n* `Svc` (value: `'SVC'`)\n\n* `Syp` (value: `'SYP'`)\n\n* `Szl` (value: `'SZL'`)\n\n* `Thb` (value: `'THB'`)\n\n* `Tjs` (value: `'TJS'`)\n\n* `Tmt` (value: `'TMT'`)\n\n* `Tnd` (value: `'TND'`)\n\n* `Top` (value: `'TOP'`)\n\n* `Try` (value: `'TRY'`)\n\n* `Ttd` (value: `'TTD'`)\n\n* `Tvd` (value: `'TVD'`)\n\n* `Twd` (value: `'TWD'`)\n\n* `Tzs` (value: `'TZS'`)\n\n* `Uah` (value: `'UAH'`)\n\n* `Ugx` (value: `'UGX'`)\n\n* `Uyu` (value: `'UYU'`)\n\n* `Uzs` (value: `'UZS'`)\n\n* `Vef` (value: `'VEF'`)\n\n* `Vuv` (value: `'VUV'`)\n\n* `Wst` (value: `'WST'`)\n\n* `Xaf` (value: `'XAF'`)\n\n* `Xcd` (value: `'XCD'`)\n\n* `Xdr` (value: `'XDR'`)\n\n* `Xof` (value: `'XOF'`)\n\n* `Xpf` (value: `'XPF'`)\n\n* `Yer` (value: `'YER'`)\n\n* `Zar` (value: `'ZAR'`)\n\n* `Zmw` (value: `'ZMW'`)\n\n* `Zwd` (value: `'ZWD'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n\nIf you encounter `UNKNOWN_ENUM_VALUE`, it means that this ENUM is unavailable in your current SDK version. Please upgrade to get the newest ENUM.\n```\n\n----------------------------------------\n\nTITLE: EWallet Properties Schema Definition in Markdown\nDESCRIPTION: Markdown table defining the properties, types, requirements and descriptions for eWallet channel configuration. Includes URL redirects, mobile number formatting, points redemption settings, and channel-specific parameters.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/EWalletChannelProperties.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **successReturnUrl** |string |  | URL where the end-customer is redirected if the authorization is successful | | |\n| **failureReturnUrl** |string |  | URL where the end-customer is redirected if the authorization failed | | |\n| **pendingReturnUrl** |string |  | URL where the end-customer is redirected if the authorization is pending | | |\n| **cancelReturnUrl** |string |  | URL where the end-customer is redirected if the authorization cancelled | | |\n| **mobileNumber** |string |  | Mobile number of customer in E.164 format (e.g. +628123123123). For OVO one time payment use only. | | |\n| **redeemPoints** |string |  | REDEEM_NONE will not use any point, REDEEM_ALL will use all available points before cash balance is used. For OVO and ShopeePay tokenized payment use only. | | |\n| **cashtag** |string |  | Available for JENIUSPAY only | | |\n| **promotionLabel** |string |  | Available only for OVO | | |\n```\n\n----------------------------------------\n\nTITLE: Defining CardChannelCode Enum in Markdown\nDESCRIPTION: Enumerates card channel codes for different banks and payment options. Includes a fallback value for unknown enum values and a note about SDK versioning.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/CardChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `BayCardInstallment` (value: `'BAY_CARD_INSTALLMENT'`)\n\n* `BblCardInstallment` (value: `'BBL_CARD_INSTALLMENT'`)\n\n* `Gpn` (value: `'GPN'`)\n\n* `KbankCardInstallment` (value: `'KBANK_CARD_INSTALLMENT'`)\n\n* `KtbCardInstallment` (value: `'KTB_CARD_INSTALLMENT'`)\n\n* `ScbCardInstallment` (value: `'SCB_CARD_INSTALLMENT'`)\n\n* `TtbCardInstallment` (value: `'TTB_CARD_INSTALLMENT'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining DirectDebitType Enum in TypeScript\nDESCRIPTION: This enum represents the available Direct Debit channels used for invoice-related transactions in the Xendit payment system. It includes various bank-specific options and FPX channels for different banks in Malaysia.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/DirectDebitType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum DirectDebitType {\n    BaBri = 'BA_BRI',\n    DcBri = 'DC_BRI',\n    DdBri = 'DD_BRI',\n    DdMandiri = 'DD_MANDIRI',\n    BaBpi = 'BA_BPI',\n    DcBpi = 'DC_BPI',\n    DdBpi = 'DD_BPI',\n    BaUbp = 'BA_UBP',\n    DcUbp = 'DC_UBP',\n    DdUbp = 'DD_UBP',\n    BcaKlikpay = 'BCA_KLIKPAY',\n    BaBcaKlikpay = 'BA_BCA_KLIKPAY',\n    DcBcaKlikpay = 'DC_BCA_KLIKPAY',\n    DdBcaKlikpay = 'DD_BCA_KLIKPAY',\n    DdBdoEpay = 'DD_BDO_EPAY',\n    DdRcbc = 'DD_RCBC',\n    DdChinabank = 'DD_CHINABANK',\n    BaChinabank = 'BA_CHINABANK',\n    DcChinabank = 'DC_CHINABANK',\n    DdPublicFpx = 'DD_PUBLIC_FPX',\n    DdAmbankFpx = 'DD_AMBANK_FPX',\n    DdKfhFpx = 'DD_KFH_FPX',\n    DdAgroFpx = 'DD_AGRO_FPX',\n    DdAffinFpx = 'DD_AFFIN_FPX',\n    DdAllianceFpx = 'DD_ALLIANCE_FPX',\n    DdMuamalatFpx = 'DD_MUAMALAT_FPX',\n    DdHlbFpx = 'DD_HLB_FPX',\n    DdIslamFpx = 'DD_ISLAM_FPX',\n    DdRakyatFpx = 'DD_RAKYAT_FPX',\n    DdCimbFpx = 'DD_CIMB_FPX',\n    DdUobFpx = 'DD_UOB_FPX',\n    DdBocFpx = 'DD_BOC_FPX',\n    DdBsnFpx = 'DD_BSN_FPX',\n    DdOcbcFpx = 'DD_OCBC_FPX',\n    DdHsbcFpx = 'DD_HSBC_FPX',\n    DdSchFpx = 'DD_SCH_FPX',\n    DdMayb2UFpx = 'DD_MAYB2U_FPX',\n    DdRhbFpx = 'DD_RHB_FPX',\n    DdUobFpxBusiness = 'DD_UOB_FPX_BUSINESS',\n    DdAgroFpxBusiness = 'DD_AGRO_FPX_BUSINESS',\n    DdAllianceFpxBusiness = 'DD_ALLIANCE_FPX_BUSINESS',\n    DdAmbankFpxBusiness = 'DD_AMBANK_FPX_BUSINESS',\n    DdIslamFpxBusiness = 'DD_ISLAM_FPX_BUSINESS',\n    DdMuamalatFpxBusiness = 'DD_MUAMALAT_FPX_BUSINESS',\n    DdHlbFpxBusiness = 'DD_HLB_FPX_BUSINESS',\n    DdHsbcFpxBusiness = 'DD_HSBC_FPX_BUSINESS',\n    DdRakyatFpxBusiness = 'DD_RAKYAT_FPX_BUSINESS',\n    DdKfhFpxBusiness = 'DD_KFH_FPX_BUSINESS',\n    DdOcbcFpxBusiness = 'DD_OCBC_FPX_BUSINESS',\n    DdPublicFpxBusiness = 'DD_PUBLIC_FPX_BUSINESS',\n    DdRhbFpxBusiness = 'DD_RHB_FPX_BUSINESS',\n    DdSchFpxBusiness = 'DD_SCH_FPX_BUSINESS',\n    DdCitibankFpxBusiness = 'DD_CITIBANK_FPX_BUSINESS',\n    DdBnpFpxBusiness = 'DD_BNP_FPX_BUSINESS',\n    DdDeutscheFpxBusiness = 'DD_DEUTSCHE_FPX_BUSINESS',\n    DdMayb2EFpxBusiness = 'DD_MAYB2E_FPX_BUSINESS',\n    DdCimbFpxBusiness = 'DD_CIMB_FPX_BUSINESS',\n    DdAffinFpxBusiness = 'DD_AFFIN_FPX_BUSINESS',\n    XenditEnumDefaultFallback = 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DirectDebitParameters Properties in Markdown\nDESCRIPTION: This markdown table describes the properties of DirectDebitParameters. It includes the property names, their types, whether they are required, and links to further documentation for complex types.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/DirectDebitParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[DirectDebitChannelCode](DirectDebitChannelCode.md) | ☑️ |  | | |\n| **channelProperties** |[DirectDebitChannelProperties](DirectDebitChannelProperties.md) | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: E-Wallet Channel Code Enumeration in Xendit Node SDK\nDESCRIPTION: A comprehensive enumeration of e-wallet payment channels supported by the Xendit payment platform. Includes e-wallets from the Philippines, Indonesia, Vietnam, China, Thailand, Malaysia and other Southeast Asian countries. The enum provides standardized channel codes to be used when integrating with various e-wallet payment methods.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/EWalletChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Gcash` (value: `'GCASH'`)\n\n* `Grabpay` (value: `'GRABPAY'`)\n\n* `Paymaya` (value: `'PAYMAYA'`)\n\n* `Dana` (value: `'DANA'`)\n\n* `Ovo` (value: `'OVO'`)\n\n* `Linkaja` (value: `'LINKAJA'`)\n\n* `Shopeepay` (value: `'SHOPEEPAY'`)\n\n* `Nexcash` (value: `'NEXCASH'`)\n\n* `Astrapay` (value: `'ASTRAPAY'`)\n\n* `Jeniuspay` (value: `'JENIUSPAY'`)\n\n* `Appota` (value: `'APPOTA'`)\n\n* `Momo` (value: `'MOMO'`)\n\n* `Vnptwallet` (value: `'VNPTWALLET'`)\n\n* `Viettelpay` (value: `'VIETTELPAY'`)\n\n* `Zalopay` (value: `'ZALOPAY'`)\n\n* `Wechatpay` (value: `'WECHATPAY'`)\n\n* `Linepay` (value: `'LINEPAY'`)\n\n* `Truemoney` (value: `'TRUEMONEY'`)\n\n* `Alipay` (value: `'ALIPAY'`)\n\n* `Touchngo` (value: `'TOUCHNGO'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining DigitalPayoutChannelProperties Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the DigitalPayoutChannelProperties class, including their names, types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payout/DigitalPayoutChannelProperties.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **accountHolderName** |string |  | Registered account name | | |\n| **accountNumber** |string | ☑️ | Registered account number | | |\n| **accountType** |[ChannelAccountType](ChannelAccountType.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceStatus Enum in Xendit Node.js SDK\nDESCRIPTION: Enumeration representing the possible states of an invoice in the Xendit system. It includes the statuses Pending, Paid, Settled, Expired, and a fallback value for handling unknown enum values in older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/InvoiceStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n* `Pending` (value: `'PENDING'`)\n\n* `Paid` (value: `'PAID'`)\n\n* `Settled` (value: `'SETTLED'`)\n\n* `Expired` (value: `'EXPIRED'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Virtual Account Properties Table\nDESCRIPTION: Markdown table defining the properties, data types, requirements and descriptions for Virtual Account payment method configuration. Includes fields for amount limits, currency, channel codes, and region-specific display options.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/VirtualAccount.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **amount** |number |  |  | | |\n| **minAmount** |number |  |  | | |\n| **maxAmount** |number |  |  | | |\n| **currency** |string |  |  | | |\n| **channelCode** |[VirtualAccountChannelCode](VirtualAccountChannelCode.md) | ☑️ |  | | |\n| **channelProperties** |[VirtualAccountChannelProperties](VirtualAccountChannelProperties.md) | ☑️ |  | | |\n| **alternativeDisplayTypes** |string[] |  | For payments in Vietnam only, alternative display requested for the virtual account | | |\n| **alternativeDisplays** |[VirtualAccountAlternativeDisplay[]](VirtualAccountAlternativeDisplay.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining EndCustomerStatus Enum in JavaScript\nDESCRIPTION: This code snippet defines the EndCustomerStatus enum with various customer statuses. It includes a fallback value for unknown enum values and a note about upgrading the SDK for new enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/EndCustomerStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Active` (value: `'ACTIVE'`)\n\n* `Inactive` (value: `'INACTIVE'`)\n\n* `Pending` (value: `'PENDING'`)\n\n* `Blocked` (value: `'BLOCKED'`)\n\n* `Deleted` (value: `'DELETED'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining IdentityAccountRequestProperties in Markdown\nDESCRIPTION: This snippet defines the properties of the IdentityAccountRequestProperties object using a Markdown table. It includes fields for account information, such as account number, holder name, SWIFT code, and various other account-related details.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/IdentityAccountRequestProperties.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **accountNumber** |string |  | Unique account identifier as per the bank records. | | |\n| **accountHolderName** |string |  | Name of account holder as per the cardless credit account. | | |\n| **swiftCode** |string |  | The SWIFT code for international payments | | |\n| **accountType** |string |  | Free text account type, e.g., Savings, Transaction, Virtual Account. | | |\n| **accountDetails** |string |  | Potentially masked account detail, for display purposes only. | | |\n| **currency** |string |  |  | | |\n| **tokenId** |string |  | The token id returned in tokenisation | | |\n| **accountId** |string |  | Alphanumeric string identifying this account. Usually an email address or phone number. | | |\n| **paymentCode** |string |  | Complete fixed payment code (including prefix) | | |\n| **expiresAt** |string |  | YYYY-MM-DD string with expiry date for the payment code | | |\n| **qrString** |string |  | String representation of the QR Code image | | |\n```\n\n----------------------------------------\n\nTITLE: Defining DirectDebit Properties in Markdown\nDESCRIPTION: This markdown table outlines the properties of the DirectDebit payment method, including their types, whether they are required, and links to their detailed definitions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/DirectDebit.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[DirectDebitChannelCode](DirectDebitChannelCode.md) | ☑️ |  | | |\n| **channelProperties** |[DirectDebitChannelProperties](DirectDebitChannelProperties.md) | ☑️ |  | | |\n| **type** |[DirectDebitType](DirectDebitType.md) | ☑️ |  | | |\n| **bankAccount** |[DirectDebitBankAccount](DirectDebitBankAccount.md) |  |  | | |\n| **debitCard** |[DirectDebitDebitCard](DirectDebitDebitCard.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Card Channel Properties Schema Definition in Markdown\nDESCRIPTION: Defines the properties schema for CardChannelProperties including optional boolean, string, and date fields for configuring card payment channels. Properties include 3D Secure settings, return URLs, card-on-file type, expiration, installment configuration and merchant ID tags.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/CardChannelProperties.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **skipThreeDSecure** |boolean |  | This field value is only being used for reusability &#x3D; MULTIPLE_USE. To indicate whether to perform 3DS during the linking phase. Defaults to false. | | |\n| **successReturnUrl** |string |  | URL where the end-customer is redirected if the authorization is successful | | |\n| **failureReturnUrl** |string |  | URL where the end-customer is redirected if the authorization failed | | |\n| **cardonfileType** |string |  | Type of \"credential-on-file\" / \"card-on-file\" payment being made. Indicate that this payment uses a previously linked Payment Method for charging. | | |\n| **expiresAt** |Date |  |  | | |\n| **installmentConfiguration** |[CardInstallmentConfiguration](CardInstallmentConfiguration.md) |  |  | | |\n| **merchantIdTag** |string |  | Tag for a Merchant ID that you want to associate this payment with. For merchants using their own MIDs to specify which MID they want to use | | |\n```\n\n----------------------------------------\n\nTITLE: Defining BankCode Enum in Xendit Node.js SDK\nDESCRIPTION: An enumeration of bank codes supported by Xendit for invoice-related transactions. Includes banks from Southeast Asia, particularly Indonesia and Vietnam. The enum also features a fallback value for handling unknown enum values when using older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/BankCode.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Bca` (value: `'BCA'`)\n* `Bni` (value: `'BNI'`)\n* `Bri` (value: `'BRI'`)\n* `Mandiri` (value: `'MANDIRI'`)\n* `Permata` (value: `'PERMATA'`)\n* `Bsi` (value: `'BSI'`)\n* `Bjb` (value: `'BJB'`)\n* `SahabatSampoerna` (value: `'SAHABAT_SAMPOERNA'`)\n* `Cimb` (value: `'CIMB'`)\n* `Vietcapital` (value: `'VIETCAPITAL'`)\n* `Woori` (value: `'WOORI'`)\n* `Pv` (value: `'PV'`)\n* `Msb` (value: `'MSB'`)\n* `Vpb` (value: `'VPB'`)\n* `Bidv` (value: `'BIDV'`)\n* `Cake` (value: `'CAKE'`)\n* `Bnc` (value: `'BNC'`)\n* `Hana` (value: `'HANA'`)\n* `Muamalat` (value: `'MUAMALAT'`)\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceFee Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the InvoiceFee class using a markdown table. It specifies two required properties: 'type' (a string representing the fee type) and 'value' (a number representing the fee amount).\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/InvoiceFee.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **type** |string | ☑️ | The type of fee. | | |\n| **value** |number | ☑️ | The value or amount of the fee. | | |\n```\n\n----------------------------------------\n\nTITLE: Defining CardInformation Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the CardInformation class. It includes property names, types, whether they are required, descriptions, and examples. The properties cover various aspects of card information such as tokenId, maskedCardNumber, expiry details, and card-specific attributes.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/CardInformation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **tokenId** |string |  |  | | |\n| **maskedCardNumber** |string |  | 1st 6 and last 4 digits of the card | | |\n| **expiryMonth** |string |  | Card expiry month in MM format | | |\n| **expiryYear** |string |  | Card expiry month in YY format | | |\n| **cardholderName** |string |  | Cardholder name | | |\n| **fingerprint** |string |  |  | | |\n| **type** |string |  |  | | |\n| **network** |string |  |  | | |\n| **country** |string |  |  | | |\n| **issuer** |string |  |  | | |\n| **cardNumber** |string |  |  | | |\n| **oneTimeToken** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: DirectDebitChannelProperties Schema Documentation in Markdown\nDESCRIPTION: Markdown table documenting the properties of the DirectDebitChannelProperties object, including field names, types, requirements, and descriptions for direct debit transactions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/DirectDebitChannelProperties.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **successReturnUrl** |string |  |  | | |\n| **failureReturnUrl** |string |  |  | | |\n| **mobileNumber** |string |  | Mobile number of the customer registered to the partner channel | | |\n| **cardLastFour** |string |  | Last four digits of the debit card | | |\n| **cardExpiry** |string |  | Expiry month and year of the debit card (in MM/YY format) | | |\n| **email** |string |  | Email address of the customer that is registered to the partner channel | | |\n| **identityDocumentNumber** |string |  | Identity number of the customer registered to the partner channel | | |\n| **requireAuth** |boolean |  |  | | |\n| **accountNumber** |string |  | Account number of the customer | | |\n| **destinationAccountId** |string |  | Destination Account ID for BaaS topups | | |\n```\n\n----------------------------------------\n\nTITLE: Payment Currency Enum Definition\nDESCRIPTION: Enumeration of supported payment currencies in the Xendit payment system. Includes Southeast Asian currencies (IDR, PHP, VND, THB, MYR) and USD, with a fallback value for handling unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestCurrency.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum PaymentRequestCurrency {\n    Idr = 'IDR',\n    Php = 'PHP',\n    Vnd = 'VND',\n    Thb = 'THB',\n    Myr = 'MYR',\n    Usd = 'USD',\n    XenditEnumDefaultFallback = 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: PaymentMethodCallback Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the PaymentMethodCallback object, including event type, business ID, creation timestamp, and payment method data.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/PaymentMethodCallback.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **event** |string | ☑️ | Identifies the event that triggered a notification to the merchant | | |\n| **businessId** |string | ☑️ | business_id | | |\n| **created** |string | ☑️ |  | | |\n| **data** |[PaymentMethod](PaymentMethod.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceClientType Enum Values in TypeScript\nDESCRIPTION: This enum defines the various client types or sources from which an invoice can originate in the Xendit system. It includes values for dashboard-created invoices, API Gateway, integrations, on-demand invoices, recurring invoices, and mobile sources. It also includes a fallback value for handling unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/InvoiceClientType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n* `Dashboard` (value: `'DASHBOARD'`)\n\n* `ApiGateway` (value: `'API_GATEWAY'`)\n\n* `Integration` (value: `'INTEGRATION'`)\n\n* `OnDemand` (value: `'ON_DEMAND'`)\n\n* `Recurring` (value: `'RECURRING'`)\n\n* `Mobile` (value: `'MOBILE'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Individual Detail Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the IndividualDetail structure, including field names, types, requirements, descriptions and examples. Contains personal information fields like names, birth details, and employment information.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/IndividualDetail.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **givenNames** |string |  |  | | |\n| **givenNamesNonRoman** |string |  |  | | |\n| **middleName** |string |  |  | | |\n| **surname** |string |  |  | | |\n| **surnameNonRoman** |string |  |  | | |\n| **motherMaidenName** |string |  |  | | |\n| **gender** |string |  |  | | |\n| **dateOfBirth** |string |  |  | | |\n| **nationality** |string |  | ISO3166-2 country code | | |\n| **placeOfBirth** |string |  |  | | |\n| **employment** |[EmploymentDetail](EmploymentDetail.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: CreateInvoiceRequest Properties Table in Markdown\nDESCRIPTION: A markdown table listing all properties of the CreateInvoiceRequest object, including their names, types, whether they are required, and descriptions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/CreateInvoiceRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **externalId** |string | ☑️ | The external ID of the invoice. | | |\n| **amount** |number | ☑️ | The invoice amount. | | |\n| **payerEmail** |string |  | The email address of the payer. | | |\n| **description** |string |  | A description of the payment. | | |\n| **invoiceDuration** |string |  | The duration of the invoice. | | |\n| **callbackVirtualAccountId** |string |  | The ID of the callback virtual account. | | |\n| **shouldSendEmail** |boolean |  | Indicates whether email notifications should be sent. | | |\n| **customer** |[CustomerObject](CustomerObject.md) |  |  | | |\n| **customerNotificationPreference** |[NotificationPreference](NotificationPreference.md) |  |  | | |\n| **successRedirectUrl** |string |  | The URL to redirect to on successful payment. | | |\n| **failureRedirectUrl** |string |  | The URL to redirect to on payment failure. | | |\n| **paymentMethods** |string[] |  | An array of available payment methods. | | |\n| **midLabel** |string |  | The middle label. | | |\n| **shouldAuthenticateCreditCard** |boolean |  | Indicates whether credit card authentication is required. | | |\n| **currency** |string |  | The currency of the invoice. | | |\n| **reminderTime** |number |  | The reminder time. | | |\n| **locale** |string |  | The default language to display. | | |\n| **reminderTimeUnit** |string |  | The unit of the reminder time. | | |\n| **items** |[InvoiceItem[]](InvoiceItem.md) |  | An array of items included in the invoice. | | |\n| **fees** |[InvoiceFee[]](InvoiceFee.md) |  | An array of fees associated with the invoice. | | |\n| **channelProperties** |[ChannelProperties](ChannelProperties.md) |  |  | | |\n| **metadata** |object |  | A free-format JSON for additional information that you may use. Object can be up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. | | |\n```\n\n----------------------------------------\n\nTITLE: Defining VirtualAccountParameters Properties in Markdown\nDESCRIPTION: A markdown table listing the properties of the VirtualAccountParameters object, including their names, types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/VirtualAccountParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **amount** |number |  |  | | |\n| **minAmount** |number |  |  | | |\n| **maxAmount** |number |  |  | | |\n| **currency** |string |  |  | | |\n| **channelCode** |[VirtualAccountChannelCode](VirtualAccountChannelCode.md) | ☑️ |  | | |\n| **channelProperties** |[VirtualAccountChannelProperties](VirtualAccountChannelProperties.md) | ☑️ |  | | |\n| **alternativeDisplayTypes** |string[] |  | For payments in Vietnam only, alternative display requested for the virtual account | | |\n```\n\n----------------------------------------\n\nTITLE: Defining Over The Counter Payment Channel Enum Values in JavaScript\nDESCRIPTION: Enumeration of supported over-the-counter payment channels with their corresponding string values. Includes popular retail chains and payment centers like 7-Eleven, Cebuana, Palawan, and various other outlets across Southeast Asia. Contains a fallback value 'UNKNOWN_ENUM_VALUE' for handling unsupported enum values in older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/OverTheCounterChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    _7Eleven: '7ELEVEN',\n    _7ElevenCliqq: '7ELEVEN_CLIQQ',\n    Cebuana: 'CEBUANA',\n    Ecpay: 'ECPAY',\n    Palawan: 'PALAWAN',\n    Mlhuillier: 'MLHUILLIER',\n    EcpayDragonloan: 'ECPAY_DRAGONLOAN',\n    Lbc: 'LBC',\n    EcpaySchool: 'ECPAY_SCHOOL',\n    RdPawnshop: 'RD_PAWNSHOP',\n    Cvm: 'CVM',\n    Ussc: 'USSC',\n    SmBills: 'SM_BILLS',\n    RobinsonsBills: 'ROBINSONS_BILLS',\n    Alfamart: 'ALFAMART',\n    Indomaret: 'INDOMARET',\n    XenditEnumDefaultFallback: 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelAccountType Enum in JavaScript\nDESCRIPTION: Enumerates the available account types for MY_DUITNOW, including NationalId, MobileNo, Passport, BusinessRegistration, and BankAccount. It also defines a fallback value for unknown enum types. This enum is used to specify the type of account when interacting with MY_DUITNOW services.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payout/ChannelAccountType.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `NationalId` (value: `'NATIONAL_ID'`)\n\n* `MobileNo` (value: `'MOBILE_NO'`)\n\n* `Passport` (value: `'PASSPORT'`)\n\n* `BusinessRegistration` (value: `'BUSINESS_REGISTRATION'`)\n\n* `BankAccount` (value: `'BANK_ACCOUNT'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining E-Wallet Parameters Structure in Markdown\nDESCRIPTION: Table defining the properties of EWalletParameters including channelCode (required), channelProperties, and account fields. Each property links to its respective detailed documentation.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/EWalletParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[EWalletChannelCode](EWalletChannelCode.md) | ☑️ |  | | |\n| **channelProperties** |[EWalletChannelProperties](EWalletChannelProperties.md) |  |  | | |\n| **account** |[EWalletAccount](EWalletAccount.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: BillingInformation Properties Table\nDESCRIPTION: Markdown table defining the BillingInformation model properties, including field names, data types, required flags, descriptions and example values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/BillingInformation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **country** |string | ☑️ |  | | |\n| **streetLine1** |string |  |  | | |\n| **streetLine2** |string |  |  | | |\n| **city** |string |  |  | | |\n| **provinceState** |string |  |  | | |\n| **postalCode** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Account Channel Code Enum in JavaScript\nDESCRIPTION: This enum defines the available channel codes for virtual accounts in the Xendit system. It includes codes for various banks and financial institutions, with a fallback option for unknown values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/VirtualAccountChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nVirtualAccountChannelCode = {\n    Bca: 'BCA',\n    Bjb: 'BJB',\n    Bni: 'BNI',\n    Bri: 'BRI',\n    Mandiri: 'MANDIRI',\n    Permata: 'PERMATA',\n    Bsi: 'BSI',\n    Cimb: 'CIMB',\n    SahabatSampoerna: 'SAHABAT_SAMPOERNA',\n    Artajasa: 'ARTAJASA',\n    Pv: 'PV',\n    Vietcapital: 'VIETCAPITAL',\n    Woori: 'WOORI',\n    Msb: 'MSB',\n    Vpb: 'VPB',\n    Bidv: 'BIDV',\n    StandardChartered: 'STANDARD_CHARTERED',\n    Ambank: 'AMBANK',\n    Uob: 'UOB',\n    Bnc: 'BNC',\n    Hana: 'HANA',\n    Muamalat: 'MUAMALAT',\n    BankTransfer: 'BANK_TRANSFER',\n    XenditEnumDefaultFallback: 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentRequestListResponse Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the PaymentRequestListResponse object using a markdown table. It specifies two properties: 'data' (an array of PaymentRequest objects) and 'hasMore' (a boolean), both of which are required fields.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestListResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **data** |[PaymentRequest[]](PaymentRequest.md) | ☑️ |  | | |\n| **hasMore** |boolean | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining CardChannelProperties Class Structure in Markdown\nDESCRIPTION: This markdown table defines the properties of the CardChannelProperties class. It includes field names, types, whether they are required, descriptions, and examples for each property.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/CardChannelProperties.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **skipThreeDSecure** |boolean |  | To indicate whether to perform 3DS during the linking phase | | |\n| **successReturnUrl** |string |  | URL where the end-customer is redirected if the authorization is successful | | |\n| **failureReturnUrl** |string |  | URL where the end-customer is redirected if the authorization failed | | |\n| **cardonfileType** |string |  | Type of \"credential-on-file\" / \"card-on-file\" payment being made. Indicate that this payment uses a previously linked Payment Method for charging. | | |\n| **merchantIdTag** |string |  | Tag for a Merchant ID that you want to associate this payment with. For merchants using their own MIDs to specify which MID they want to use | | |\n| **expiresAt** |Date |  |  | | |\n| **installmentConfiguration** |[CardInstallmentConfiguration](CardInstallmentConfiguration.md) |  |  | | |\n| **skipAuthorization** |boolean |  | To indicate whether to skip the authorization phase | | |\n```\n\n----------------------------------------\n\nTITLE: Defining AddressStatus Enum in JavaScript\nDESCRIPTION: This enum defines possible states for an address in the Xendit system. It includes 'ACTIVE' and 'DELETED' states, as well as a fallback value for unknown enum values. The enum is likely used in API responses or requests related to address management.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/AddressStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Active` (value: `'ACTIVE'`)\n\n* `Deleted` (value: `'DELETED'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining CreateRefund404Response Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the CreateRefund404Response model. It specifies two string properties: errorCode and message, neither of which are required fields.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/refund/CreateRefund404Response.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **errorCode** |string |  |  | | |\n| **message** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodList Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the PaymentMethodList model using a markdown table. It specifies the name, type, requirement status, description, and examples for each property.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/PaymentMethodList.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **data** |[PaymentMethod[]](PaymentMethod.md) | ☑️ |  | | |\n| **hasMore** |boolean |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining DirectDebitParameters Properties in Markdown\nDESCRIPTION: This markdown table describes the properties of the DirectDebitParameters object. It includes the property names, their types, whether they are required, and links to related object definitions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/DirectDebitParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[DirectDebitChannelCode](DirectDebitChannelCode.md) | ☑️ |  | | |\n| **channelProperties** |[DirectDebitChannelProperties](DirectDebitChannelProperties.md) | ☑️ |  | | |\n| **type** |[DirectDebitType](DirectDebitType.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: PaymentRequestAction Properties Table\nDESCRIPTION: Markdown table defining the required properties for PaymentRequestAction objects including type constraints and requirement status.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestAction.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **action** |string | ☑️ |  | | |\n| **urlType** |string | ☑️ |  | | |\n| **method** |string | ☑️ |  | | |\n| **url** |string | ☑️ |  | | |\n| **qrCode** |string | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentDetails Properties in Markdown Table\nDESCRIPTION: This snippet defines the properties of the PaymentDetails object using a markdown table. It includes the property names, their types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/PaymentDetails.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **receiptId** |string |  | The unique identifier or reference ID associated with the payment receipt. | | |\n| **source** |string |  | The source or method of payment. | | |\n```\n\n----------------------------------------\n\nTITLE: Defining Card Verification Results Properties in Markdown\nDESCRIPTION: This markdown table outlines the properties of the CardVerificationResults object, including threeDSecure, cvvResult, and addressVerificationResult. It specifies the type, requirement status, and links to related documentation.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/CardVerificationResults.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **threeDSecure** |[CardVerificationResultsThreeDSecure](CardVerificationResultsThreeDSecure.md) |  |  | | |\n| **cvvResult** |string |  |  | | |\n| **addressVerificationResult** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: FeeResponse Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the FeeResponse object, including field names, types, requirements, and descriptions. Contains fields for Xendit fees, VAT, withholding taxes, and status.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/balance_and_transaction/FeeResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **xenditFee** |number | ☑️ | Amount of the Xendit fee for this transaction. | | |\n| **valueAddedTax** |number | ☑️ | Amount of the VAT for this transaction. | | |\n| **xenditWithholdingTax** |number |  | Amount of the Xendit Withholding Tax for this transaction if applicable. See [Tax Documentation](https://docs.xendit.co/fees-and-vat#vat) for more information. | | |\n| **thirdPartyWithholdingTax** |number |  | Amount of the 3rd Party Withholding Tax for this transaction if applicable. 3rd party example: Bank  | | |\n| **status** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: KYCDocumentSubType Enumeration in Xendit Node.js SDK\nDESCRIPTION: Defines constants for various identification document subtypes used in KYC processes. Each enum value represents a specific document type with its corresponding string value. The enumeration includes a fallback value for handling unknown enum values which indicates SDK version incompatibility.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/KycDocumentSubType.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `NationalId` (value: `'NATIONAL_ID'`)\n\n* `ConsularId` (value: `'CONSULAR_ID'`)\n\n* `VoterId` (value: `'VOTER_ID'`)\n\n* `PostalId` (value: `'POSTAL_ID'`)\n\n* `ResidencePermit` (value: `'RESIDENCE_PERMIT'`)\n\n* `TaxId` (value: `'TAX_ID'`)\n\n* `StudentId` (value: `'STUDENT_ID'`)\n\n* `MilitaryId` (value: `'MILITARY_ID'`)\n\n* `MedicalId` (value: `'MEDICAL_ID'`)\n\n* `Others` (value: `'OTHERS'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining DirectDebitChannelPropertiesDebitCard Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the DirectDebitChannelPropertiesDebitCard class using a markdown table. It includes the property names, types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/DirectDebitChannelPropertiesDebitCard.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **mobileNumber** |string |  | Mobile number of the customer registered to the partner channel | | |\n| **accountNumber** |string |  |  | | |\n| **cardLastFour** |string |  | Last four digits of the debit card | | |\n| **cardExpiry** |string |  | Expiry month and year of the debit card (in MM/YY format) | | |\n| **email** |string |  | Email address of the customer that is registered to the partner channel | | |\n```\n\n----------------------------------------\n\nTITLE: Defining QRCodeParameters Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the QRCodeParameters object using a markdown table. It specifies the name, type, required status, description, and examples for each property.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/QrCodeParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[QRCodeChannelCode](QRCodeChannelCode.md) |  |  | | |\n| **channelProperties** |[QRCodeChannelProperties](QRCodeChannelProperties.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining GetPayouts200ResponseLinks Properties in Markdown\nDESCRIPTION: Describes the properties of the GetPayouts200ResponseLinks model using a Markdown table. The model has three optional string properties: href, rel, and method.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payout/GetPayouts200ResponseLinks.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **href** |string |  |  | | |\n| **rel** |string |  |  | | |\n| **method** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: AccountBank Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the AccountBank model, including field names, types, requirements, descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/AccountBank.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **accountNumber** |string |  | Unique account identifier as per the bank records. | | |\n| **accountHolderName** |string |  | Name of account holder as per the bank records. Needs to match the registered account name exactly. . | | |\n| **swiftCode** |string |  | The SWIFT code for international payments | | |\n| **accountType** |string |  | Free text account type, e.g., Savings, Transaction, Virtual Account. | | |\n| **accountDetails** |string |  | Potentially masked account detail, for display purposes only. | | |\n| **currency** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining DirectDebitChannelPropertiesBankRedirect Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the DirectDebitChannelPropertiesBankRedirect object using a Markdown table. It specifies the name, type, requirement status, description, and examples for each property.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/DirectDebitChannelPropertiesBankRedirect.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **email** |string |  |  | | |\n| **mobileNumber** |string |  | Mobile number of the customer that is registered to channel | | |\n| **successReturnUrl** |string |  |  | | |\n| **failureReturnUrl** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining BusinessDetail Properties in Markdown\nDESCRIPTION: A markdown table listing the properties of the BusinessDetail class. It includes the property names, types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/BusinessDetail.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **businessName** |string |  |  | | |\n| **businessType** |string |  |  | | |\n| **dateOfRegistration** |string |  |  | | |\n| **natureOfBusiness** |string |  |  | | |\n| **businessDomicile** |string |  | ISO3166-2 country code | | |\n```\n\n----------------------------------------\n\nTITLE: DirectDebitBankAccount Properties Table in Markdown\nDESCRIPTION: Markdown table defining the DirectDebitBankAccount model properties including their types, requirements, descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/DirectDebitBankAccount.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **maskedBankAccountNumber** |string |  |  | | |\n| **bankAccountHash** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentRequestCardVerificationResults Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the PaymentRequestCardVerificationResults model using a markdown table. It includes the property names, types, whether they are required, and descriptions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestCardVerificationResults.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **threeDSecure** |[PaymentRequestCardVerificationResultsThreeDeeSecure](PaymentRequestCardVerificationResultsThreeDeeSecure.md) | ☑️ |  | | |\n| **cvvResult** |string |  |  | | |\n| **addressVerificationResult** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining EWalletParameters Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the EWalletParameters object. It includes the property names, their types, whether they are required, and links to further documentation.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/EWalletParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[EWalletChannelCode](EWalletChannelCode.md) |  |  | | |\n| **channelProperties** |[EWalletChannelProperties](EWalletChannelProperties.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining CardInstallmentConfiguration Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the CardInstallmentConfiguration class. It includes the property names, their types, whether they are required, and placeholders for descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/CardInstallmentConfiguration.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **terms** |number |  |  | | |\n| **interval** |string |  |  | | |\n| **code** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: CardVerificationResultsThreeDSecure Properties Table\nDESCRIPTION: Markdown table defining the properties of the CardVerificationResultsThreeDSecure class, including property names, types, requirements, descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/CardVerificationResultsThreeDSecure.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **threeDSecureFlow** |string |  |  | | |\n| **eciCode** |string |  |  | | |\n| **threeDSecureResult** |string |  |  | | |\n| **threeDSecureResultReason** |string |  |  | | |\n| **threeDSecureVersion** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: CreateRefund Data Model Properties for Xendit Node.js SDK\nDESCRIPTION: Defines the structure and properties available when creating a refund through Xendit's API. The model includes fields for payment identification, refund amount, currency, reason and additional metadata.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/refund/CreateRefund.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **paymentRequestId** |string |  |  | | |\n| **invoiceId** |string |  |  | | |\n| **referenceId** |string |  |  | | |\n| **amount** |number |  |  | | |\n| **currency** |string |  |  | | |\n| **reason** |string |  |  | | |\n| **metadata** |object |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: NotificationChannel Enum Values in xendit-node\nDESCRIPTION: Defines the available notification channel options in the xendit-node SDK. Includes Email, SMS, WhatsApp, Viber, and a fallback value for backward compatibility.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/NotificationChannel.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Email` (value: `'email'`)\n\n* `Sms` (value: `'sms'`)\n\n* `Whatsapp` (value: `'whatsapp'`)\n\n* `Viber` (value: `'viber'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining CVV Property in Markdown for xendit-node\nDESCRIPTION: This snippet defines the 'cvv' property for the PaymentRequestParametersChannelPropertiesAllOf object. It specifies the property name, type, requirement status, description, and provides space for examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestParametersChannelPropertiesAllOf.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| **cvv** |string |  | Three digit code written on the back of the card (usually called CVV/CVN). | | |\n```\n\n----------------------------------------\n\nTITLE: Defining KYC Document Request Properties Schema in Markdown\nDESCRIPTION: Markdown table defining the properties schema for KYC document requests. Includes required fields like country code, document type/subtype, document details, expiration, holder name and document images.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/KycDocumentRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **country** |string |  | ISO3166-2 country code | | |\n| **type** |[KYCDocumentType](KYCDocumentType.md) |  |  | | |\n| **subType** |[KYCDocumentSubType](KYCDocumentSubType.md) |  |  | | |\n| **documentName** |string |  |  | | |\n| **documentNumber** |string |  |  | | |\n| **expiresAt** |string |  |  | | |\n| **holderName** |string |  |  | | |\n| **documentImages** |string[] |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: KYC Document Response Properties Schema\nDESCRIPTION: Markdown table defining the required properties and their types for KYC document responses. Includes validation requirements and property descriptions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/KycDocumentResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **country** |string | ☑️ |  | | |\n| **type** |[KYCDocumentType](KYCDocumentType.md) | ☑️ |  | | |\n| **subType** |[KYCDocumentSubType](KYCDocumentSubType.md) | ☑️ |  | | |\n| **documentName** |string | ☑️ |  | | |\n| **documentNumber** |string | ☑️ |  | | |\n| **expiresAt** |string | ☑️ |  | | |\n| **holderName** |string | ☑️ |  | | |\n| **documentImages** |string[] | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining AddressRequest Properties in Markdown\nDESCRIPTION: A markdown table defining the properties of the AddressRequest object, including property names, types, whether they are required, descriptions, and examples. It covers various address-related fields such as category, country code, province/state, city, and more.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/AddressRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **category** |string |  | Home, work or provincial | | |\n| **countryCode** |string |  | ISO3166-2 country code | | |\n| **provinceState** |string |  |  | | |\n| **city** |string |  |  | | |\n| **suburb** |string |  |  | | |\n| **postalCode** |string |  |  | | |\n| **line1** |string |  |  | | |\n| **line2** |string |  |  | | |\n| **status** |[AddressStatus](AddressStatus.md) |  |  | | |\n| **isPrimary** |boolean |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelPropertiesCardsInstallmentConfigurationAllowedTermsInner Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the ChannelPropertiesCardsInstallmentConfigurationAllowedTermsInner class. It includes the property names, types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/ChannelPropertiesCardsInstallmentConfigurationAllowedTermsInner.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **issuer** |string |  | The bank code of the installment provider / issuer | | |\n| **terms** |number[] |  | An array containing list of installment tenor available to choose | | |\n```\n\n----------------------------------------\n\nTITLE: Bank Object Properties Table in Markdown\nDESCRIPTION: Markdown table defining the structure of a Bank object, including property names, types, requirements, descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/Bank.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **bankCode** |[BankCode](BankCode.md) | ☑️ |  | | |\n| **collectionType** |string | ☑️ | The collection type for the bank details. | | |\n| **bankBranch** |string |  | The branch of the bank. | | |\n| **bankAccountNumber** |string |  | The bank account number. | | |\n| **accountHolderName** |string | ☑️ | The name of the account holder. | | |\n| **transferAmount** |number |  | The transfer amount. | | |\n| **alternativeDisplays** |[AlternativeDisplayItem[]](AlternativeDisplayItem.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Invoice Properties Schema Documentation in Markdown\nDESCRIPTION: Markdown table documenting the complete schema of an Invoice object, including all properties, their types, whether they are required, and descriptions. This schema defines the structure used for invoice creation and management in the Xendit API.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/Invoice.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **id** |string |  | The unique identifier for the invoice. | | |\n| **externalId** |string | ☑️ | The external identifier for the invoice. | | |\n| **userId** |string | ☑️ | The user ID associated with the invoice. | | |\n| **payerEmail** |string |  | The email address of the payer. | | |\n| **description** |string |  | A description of the invoice. | | |\n| **paymentMethod** |[InvoicePaymentMethod](InvoicePaymentMethod.md) |  |  | | |\n| **status** |[InvoiceStatus](InvoiceStatus.md) | ☑️ |  | | |\n| **merchantName** |string | ☑️ | The name of the merchant. | | |\n| **merchantProfilePictureUrl** |string | ☑️ | The URL of the merchant's profile picture. | | |\n| **locale** |string |  | The locale or language used for the invoice. | | |\n| **amount** |number | ☑️ | The total amount of the invoice. | | |\n| **expiryDate** |Date | ☑️ | Representing a date and time in ISO 8601 format. | | |\n| **invoiceUrl** |string | ☑️ | The URL to view the invoice. | | |\n| **availableBanks** |[Bank[]](Bank.md) | ☑️ | An array of available banks for payment. | | |\n| **availableRetailOutlets** |[RetailOutlet[]](RetailOutlet.md) | ☑️ | An array of available retail outlets for payment. | | |\n| **availableEwallets** |[Ewallet[]](Ewallet.md) | ☑️ | An array of available e-wallets for payment. | | |\n| **availableQrCodes** |[QrCode[]](QrCode.md) | ☑️ | An array of available QR codes for payment. | | |\n| **availableDirectDebits** |[DirectDebit[]](DirectDebit.md) | ☑️ | An array of available direct debit options for payment. | | |\n| **availablePaylaters** |[Paylater[]](Paylater.md) | ☑️ | An array of available pay-later options for payment. | | |\n| **shouldExcludeCreditCard** |boolean |  | Indicates whether credit card payments should be excluded. | | |\n| **shouldSendEmail** |boolean | ☑️ | Indicates whether email notifications should be sent. | | |\n| **created** |Date | ☑️ | Representing a date and time in ISO 8601 format. | | |\n| **updated** |Date | ☑️ | Representing a date and time in ISO 8601 format. | | |\n| **successRedirectUrl** |string |  | The URL to redirect to on successful payment. | | |\n| **failureRedirectUrl** |string |  | The URL to redirect to on payment failure. | | |\n| **shouldAuthenticateCreditCard** |boolean |  | Indicates whether credit card authentication is required. | | |\n| **currency** |[InvoiceCurrency](InvoiceCurrency.md) |  |  | | |\n| **items** |[InvoiceItem[]](InvoiceItem.md) |  | An array of items included in the invoice. | | |\n| **fixedVa** |boolean |  | Indicates whether the virtual account is fixed. | | |\n| **reminderDate** |Date |  | Representing a date and time in ISO 8601 format. | | |\n| **customer** |[CustomerObject](CustomerObject.md) |  |  | | |\n| **customerNotificationPreference** |[NotificationPreference](NotificationPreference.md) |  |  | | |\n| **fees** |[InvoiceFee[]](InvoiceFee.md) |  | An array of fees associated with the invoice. | | |\n| **channelProperties** |[ChannelProperties](ChannelProperties.md) |  |  | | |\n| **metadata** |object |  | A free-format JSON for additional information that you may use. Object can be up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. | | |\n```\n\n----------------------------------------\n\nTITLE: Defining TransactionResponse Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the TransactionResponse model using a markdown table. It includes details such as property names, types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/balance_and_transaction/TransactionResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **id** |string | ☑️ | The unique id of a transaction. It will have `txn_` as prefix | | |\n| **productId** |string | ☑️ | The product_id of the transaction. Product id will have a different prefix for each product. You can use this id to match the transaction from this API to each product API. | | |\n| **type** |[TransactionResponseType](TransactionResponseType.md) | ☑️ |  | | |\n| **status** |[TransactionStatuses](TransactionStatuses.md) | ☑️ |  | | |\n| **channelCategory** |[ChannelsCategories](ChannelsCategories.md) | ☑️ |  | | |\n| **channelCode** |string | ☑️ | The channel of the transaction that is used. See [channel codes](https://docs.xendit.co/xendisburse/channel-codes) for the list of available per channel categories. | | |\n| **accountIdentifier** |string | ☑️ | Account identifier of transaction. The format will be different from each channel. | | |\n| **referenceId** |string | ☑️ | customer supplied reference/external_id | | |\n| **currency** |[Currency](Currency.md) | ☑️ |  | | |\n| **amount** |number | ☑️ | The transaction amount. The number of decimal places will be different for each currency according to ISO 4217. | | |\n| **cashflow** |string | ☑️ | Representing whether the transaction is money in or money out For transfer, the transfer out side it will shows up as money out and on transfer in side in will shows up as money-in. Available values are `MONEY_IN` for money in and `MONEY_OUT` for money out. | | |\n| **settlementStatus** |string |  | The settlement status of the transaction. `PENDING` - Transaction amount has not been settled to merchant's balance. `SETTLED` - Transaction has been settled to merchant's balance | | |\n| **estimatedSettlementTime** |Date |  | Estimated settlement time will only apply to money-in transactions. For money-out transaction, the value will be `NULL`. Estimated settlement time in which transaction amount will be settled to merchant's balance. | | |\n| **businessId** |string | ☑️ | The id of business where this transaction belong to | | |\n| **fee** |[FeeResponse](FeeResponse.md) | ☑️ |  | | |\n| **created** |Date | ☑️ | Transaction created timestamp (UTC+0) | | |\n| **updated** |Date | ☑️ | Transaction updated timestamp (UTC+0) | | |\n```\n\n----------------------------------------\n\nTITLE: Defining Ewallet Object Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the Ewallet object. It specifies that the object has a single required property 'ewalletType' of type EwalletType.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/Ewallet.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **ewalletType** |[EwalletType](EwalletType.md) | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodType Enum in JavaScript\nDESCRIPTION: This code snippet defines an enumeration of payment method types. It includes common payment options and a fallback value for unknown enum values. The enum is likely used to specify the payment method for transactions in the Xendit payment system.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/PaymentMethodType.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Card` (value: `'CARD'`)\n\n* `Cryptocurrency` (value: `'CRYPTOCURRENCY'`)\n\n* `DirectBankTransfer` (value: `'DIRECT_BANK_TRANSFER'`)\n\n* `DirectDebit` (value: `'DIRECT_DEBIT'`)\n\n* `Ewallet` (value: `'EWALLET'`)\n\n* `OverTheCounter` (value: `'OVER_THE_COUNTER'`)\n\n* `QrCode` (value: `'QR_CODE'`)\n\n* `VirtualAccount` (value: `'VIRTUAL_ACCOUNT'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Account Parameters Schema - Markdown\nDESCRIPTION: Markdown table defining the properties and requirements for virtual account parameters. Includes fields for amount limits, currency, channel codes, and display properties.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/VirtualAccountParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **minAmount** |number |  |  | | |\n| **maxAmount** |number |  |  | | |\n| **amount** |number |  |  | | |\n| **currency** |[PaymentRequestCurrency](PaymentRequestCurrency.md) |  |  | | |\n| **channelCode** |[VirtualAccountChannelCode](VirtualAccountChannelCode.md) | ☑️ |  | | |\n| **channelProperties** |[VirtualAccountChannelProperties](VirtualAccountChannelProperties.md) | ☑️ |  | | |\n| **alternativeDisplayTypes** |string[] |  | Alternative display requested for the virtual account | | |\n```\n\n----------------------------------------\n\nTITLE: ReceiptNotification Type Definition\nDESCRIPTION: Defines the structure for configuring email notifications for payout receipts. The type includes optional arrays of email addresses for To, Cc, and Bcc fields.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payout/ReceiptNotification.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **emailTo** |string[] |  | Valid email address to send the payout receipt | | |\n| **emailCc** |string[] |  | Valid email address to cc the payout receipt | | |\n| **emailBcc** |string[] |  | Valid email address to bcc the payout receipt | | |\n```\n\n----------------------------------------\n\nTITLE: DirectDebitChannelCode Enum Declaration for Xendit Node SDK\nDESCRIPTION: A comprehensive enumeration of direct debit channel codes supported by Xendit across multiple countries. The enum includes various banks and payment channels from Indonesia, Philippines, Thailand, Malaysia and other countries with their corresponding string values. It also includes a fallback value for unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/DirectDebitChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n* `BcaKlikpay` (value: `'BCA_KLIKPAY'`)\n* `BcaOneklik` (value: `'BCA_ONEKLIK'`)\n* `Bdo` (value: `'BDO'`)\n* `Bpi` (value: `'BPI'`)\n* `BpiRecurring` (value: `'BPI_RECURRING'`)\n* `Bri` (value: `'BRI'`)\n* `BniAutopay` (value: `'BNI_AUTOPAY'`)\n* `Chinabank` (value: `'CHINABANK'`)\n* `Cimbniaga` (value: `'CIMBNIAGA'`)\n* `Mtb` (value: `'MTB'`)\n* `Rcbc` (value: `'RCBC'`)\n* `Ubp` (value: `'UBP'`)\n* `Mandiri` (value: `'MANDIRI'`)\n* `Bbl` (value: `'BBL'`)\n* `Scb` (value: `'SCB'`)\n* `Ktb` (value: `'KTB'`)\n* `Bay` (value: `'BAY'`)\n* `KbankMb` (value: `'KBANK_MB'`)\n* `BayMb` (value: `'BAY_MB'`)\n* `KtbMb` (value: `'KTB_MB'`)\n* `BblMb` (value: `'BBL_MB'`)\n* `ScbMb` (value: `'SCB_MB'`)\n* `BdoEpay` (value: `'BDO_EPAY'`)\n* `UbpEada` (value: `'UBP_EADA'`)\n* `UbpDebitPull` (value: `'UBP_DEBIT_PULL'`)\n* `AffinFpx` (value: `'AFFIN_FPX'`)\n* `AgroFpx` (value: `'AGRO_FPX'`)\n* `AllianceFpx` (value: `'ALLIANCE_FPX'`)\n* `AmbankFpx` (value: `'AMBANK_FPX'`)\n* `IslamFpx` (value: `'ISLAM_FPX'`)\n* `MuamalatFpx` (value: `'MUAMALAT_FPX'`)\n* `BocFpx` (value: `'BOC_FPX'`)\n* `RakyatFpx` (value: `'RAKYAT_FPX'`)\n* `BsnFpx` (value: `'BSN_FPX'`)\n* `CimbFpx` (value: `'CIMB_FPX'`)\n* `HlbFpx` (value: `'HLB_FPX'`)\n* `HsbcFpx` (value: `'HSBC_FPX'`)\n* `KfhFpx` (value: `'KFH_FPX'`)\n* `Mayb2EFpx` (value: `'MAYB2E_FPX'`)\n* `Mayb2UFpx` (value: `'MAYB2U_FPX'`)\n* `OcbcFpx` (value: `'OCBC_FPX'`)\n* `PublicFpx` (value: `'PUBLIC_FPX'`)\n* `RhbFpx` (value: `'RHB_FPX'`)\n* `SchFpx` (value: `'SCH_FPX'`)\n* `UobFpx` (value: `'UOB_FPX'`)\n* `AffinFpxBusiness` (value: `'AFFIN_FPX_BUSINESS'`)\n* `AgroFpxBusiness` (value: `'AGRO_FPX_BUSINESS'`)\n* `AllianceFpxBusiness` (value: `'ALLIANCE_FPX_BUSINESS'`)\n* `AmbankFpxBusiness` (value: `'AMBANK_FPX_BUSINESS'`)\n* `IslamFpxBusiness` (value: `'ISLAM_FPX_BUSINESS'`)\n* `MuamalatFpxBusiness` (value: `'MUAMALAT_FPX_BUSINESS'`)\n* `BnpFpxBusiness` (value: `'BNP_FPX_BUSINESS'`)\n* `CimbFpxBusiness` (value: `'CIMB_FPX_BUSINESS'`)\n* `CitibankFpxBusiness` (value: `'CITIBANK_FPX_BUSINESS'`)\n* `DeutscheFpxBusiness` (value: `'DEUTSCHE_FPX_BUSINESS'`)\n* `HlbFpxBusiness` (value: `'HLB_FPX_BUSINESS'`)\n* `HsbcFpxBusiness` (value: `'HSBC_FPX_BUSINESS'`)\n* `RakyatFpxBusiness` (value: `'RAKYAT_FPX_BUSINESS'`)\n* `KfhFpxBusiness` (value: `'KFH_FPX_BUSINESS'`)\n* `Mayb2EFpxBusiness` (value: `'MAYB2E_FPX_BUSINESS'`)\n* `OcbcFpxBusiness` (value: `'OCBC_FPX_BUSINESS'`)\n* `PublicFpxBusiness` (value: `'PUBLIC_FPX_BUSINESS'`)\n* `RhbFpxBusiness` (value: `'RHB_FPX_BUSINESS'`)\n* `SchFpxBusiness` (value: `'SCH_FPX_BUSINESS'`)\n* `UobFpxBusiness` (value: `'UOB_FPX_BUSINESS'`)\n* `BdoOnlineBanking` (value: `'BDO_ONLINE_BANKING'`)\n* `BpiOnlineBanking` (value: `'BPI_ONLINE_BANKING'`)\n* `UnionbankOnlineBanking` (value: `'UNIONBANK_ONLINE_BANKING'`)\n* `BocOnlineBanking` (value: `'BOC_ONLINE_BANKING'`)\n* `ChinabankOnlineBanking` (value: `'CHINABANK_ONLINE_BANKING'`)\n* `InstapayOnlineBanking` (value: `'INSTAPAY_ONLINE_BANKING'`)\n* `LandbankOnlineBanking` (value: `'LANDBANK_ONLINE_BANKING'`)\n* `MaybankOnlineBanking` (value: `'MAYBANK_ONLINE_BANKING'`)\n* `MetrobankOnlineBanking` (value: `'METROBANK_ONLINE_BANKING'`)\n* `PnbOnlineBanking` (value: `'PNB_ONLINE_BANKING'`)\n* `PsbankOnlineBanking` (value: `'PSBANK_ONLINE_BANKING'`)\n* `PesonetOnlineBanking` (value: `'PESONET_ONLINE_BANKING'`)\n* `RcbcOnlineBanking` (value: `'RCBC_ONLINE_BANKING'`)\n* `RobinsonsBankOnlineBanking` (value: `'ROBINSONS_BANK_ONLINE_BANKING'`)\n* `SecurityBankOnlineBanking` (value: `'SECURITY_BANK_ONLINE_BANKING'`)\n* `AutodebitUbp` (value: `'AUTODEBIT_UBP'`)\n* `AutodebitBpi` (value: `'AUTODEBIT_BPI'`)\n* `GbwBblMobileBanking` (value: `'GBW_BBL_MOBILE_BANKING'`)\n* `GbwKbankMobileBanking` (value: `'GBW_KBANK_MOBILE_BANKING'`)\n* `GbwKtbMobileBanking` (value: `'GBW_KTB_MOBILE_BANKING'`)\n* `GbwScbMobileBanking` (value: `'GBW_SCB_MOBILE_BANKING'`)\n* `GbwBayMobileBanking` (value: `'GBW_BAY_MOBILE_BANKING'`)\n* `GbwBbl` (value: `'GBW_BBL'`)\n* `GbwKbank` (value: `'GBW_KBANK'`)\n* `GbwKtb` (value: `'GBW_KTB'`)\n* `GbwScb` (value: `'GBW_SCB'`)\n* `GbwBay` (value: `'GBW_BAY'`)\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Over the Counter Payment Properties Definition\nDESCRIPTION: Property table defining the structure of Over the Counter payment requests including amount, currency, channel code and channel properties. Specifies required fields and references to additional documentation for enum types.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/OverTheCounter.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **amount** |number |  |  | | |\n| **currency** |[PaymentRequestCurrency](PaymentRequestCurrency.md) |  |  | | |\n| **channelCode** |[OverTheCounterChannelCode](OverTheCounterChannelCode.md) | ☑️ |  | | |\n| **channelProperties** |[OverTheCounterChannelProperties](OverTheCounterChannelProperties.md) | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: Paylater Properties Table in Markdown\nDESCRIPTION: Documentation table showing the properties, types, requirements and descriptions for the paylater object fields. Includes paylaterType which is required and shouldExclude which is optional.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/Paylater.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **paylaterType** |[PaylaterType](PaylaterType.md) | ☑️ |  | | |\n| **shouldExclude** |boolean |  | Indicates whether this paylater option should be excluded. | | |\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Account Channel Code Enum in JavaScript\nDESCRIPTION: This enum defines various bank and financial institution codes for virtual accounts. It includes major banks in Indonesia, Vietnam, and other Southeast Asian countries. A fallback value is provided for unknown enum values, and there's a note about upgrading the SDK for the newest enums.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/VirtualAccountChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nVirtualAccountChannelCode = {\n    Bca: 'BCA',\n    Bjb: 'BJB',\n    Bni: 'BNI',\n    Bri: 'BRI',\n    Mandiri: 'MANDIRI',\n    Permata: 'PERMATA',\n    Bsi: 'BSI',\n    Cimb: 'CIMB',\n    SahabatSampoerna: 'SAHABAT_SAMPOERNA',\n    Artajasa: 'ARTAJASA',\n    Pv: 'PV',\n    Vietcapital: 'VIETCAPITAL',\n    Woori: 'WOORI',\n    Msb: 'MSB',\n    Vpb: 'VPB',\n    Bidv: 'BIDV',\n    Cake: 'CAKE',\n    StandardChartered: 'STANDARD_CHARTERED',\n    Ambank: 'AMBANK',\n    Uob: 'UOB',\n    Bnc: 'BNC',\n    Hana: 'HANA',\n    Muamalat: 'MUAMALAT',\n    BankTransfer: 'BANK_TRANSFER',\n    XenditEnumDefaultFallback: UNKNOWN_ENUM_VALUE\n}\n```\n\n----------------------------------------\n\nTITLE: EWalletAllOf Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the EWalletAllOf model, showing the name, type, required status, description and examples fields.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/EWalletAllOf.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **account** |[EWalletAccount](EWalletAccount.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: PaymentMethodAuthParameters Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of PaymentMethodAuthParameters, showing that authCode is a required string parameter.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/PaymentMethodAuthParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **authCode** |string | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining QRCodeChannelCode Enumeration in JavaScript for Xendit Node.js SDK\nDESCRIPTION: An enumeration of QR code channel codes supported by Xendit's payment system. The enum includes various payment networks like QRIS, DANA, RCBC, PROMPTPAY, LINKAJA, XENDIT, and QRPH, with a fallback value for unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/QrCodeChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n* `Qris` (value: `'QRIS'`)\n\n* `Dana` (value: `'DANA'`)\n\n* `Rcbc` (value: `'RCBC'`)\n\n* `Promptpay` (value: `'PROMPTPAY'`)\n\n* `Linkaja` (value: `'LINKAJA'`)\n\n* `Xendit` (value: `'XENDIT'`)\n\n* `Qrph` (value: `'QRPH'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Documenting GetPayouts200ResponseDataInner Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the GetPayouts200ResponseDataInner response object. Includes field names, types, requirements, descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payout/GetPayouts200ResponseDataInner.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **referenceId** |string | ☑️ | A client defined payout identifier | | |\n| **channelCode** |string | ☑️ | Channel code of selected destination bank or e-wallet | | |\n| **channelProperties** |[DigitalPayoutChannelProperties](DigitalPayoutChannelProperties.md) | ☑️ |  | | |\n| **amount** |number | ☑️ | Amount to be sent to the destination account and should be a multiple of the minimum increment for the selected channel | | |\n| **description** |string |  | Description to send with the payout, the recipient may see this e.g., in their bank statement (if supported) or in email receipts we send on your behalf | | |\n| **currency** |string | ☑️ | Currency of the destination channel using ISO-4217 currency code | | |\n| **receiptNotification** |[ReceiptNotification](ReceiptNotification.md) |  |  | | |\n| **metadata** |object |  | Object of additional information you may use | | |\n| **id** |string | ☑️ | Xendit-generated unique identifier for each payout | | |\n| **created** |Date | ☑️ | The time payout was created on Xendit\\&#39;s system, in ISO 8601 format | | |\n| **updated** |Date | ☑️ | The time payout was last updated on Xendit\\&#39;s system, in ISO 8601 format | | |\n| **businessId** |string | ☑️ | Xendit Business ID | | |\n| **status** |string | ☑️ | Status of payout | | |\n| **failureCode** |string |  | If the Payout failed, we include a failure code for more details on the failure. | | |\n| **estimatedArrivalTime** |Date |  | Our estimated time on to when your payout is reflected to the destination account | | |\n```\n\n----------------------------------------\n\nTITLE: Markdown API Response Model Properties\nDESCRIPTION: Documents the properties of the GetCustomerByReferenceID200Response model, which includes hasMore boolean for pagination and an array of Customer objects.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/GetCustomerByReferenceId200Response.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **hasMore** |boolean |  |  | | |\n| **data** |[Customer[]](Customer.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining Card Channel Code Enum in Markdown\nDESCRIPTION: Enumerates various card channel codes including bank card installment options and payment networks. It provides string values for each enum option and includes a fallback for unknown values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/CardChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Enum\n\n    * `BayCardInstallment` (value: `'BAY_CARD_INSTALLMENT'`)\n\n    * `BblCardInstallment` (value: `'BBL_CARD_INSTALLMENT'`)\n\n    * `Gpn` (value: `'GPN'`)\n\n    * `KbankCardInstallment` (value: `'KBANK_CARD_INSTALLMENT'`)\n\n    * `KtbCardInstallment` (value: `'KTB_CARD_INSTALLMENT'`)\n\n    * `ScbCardInstallment` (value: `'SCB_CARD_INSTALLMENT'`)\n\n    * `TtbCardInstallment` (value: `'TTB_CARD_INSTALLMENT'`)\n\n    * `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining Card Properties in Markdown\nDESCRIPTION: A markdown table defining the properties of a Card object, including channelCode, currency, channelProperties, cardInformation, and cardVerificationResults. Each property is linked to its respective documentation file.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/Card.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[CardChannelCode](CardChannelCode.md) |  |  | | |\n| **currency** |[PaymentRequestCurrency](PaymentRequestCurrency.md) |  |  | | |\n| **channelProperties** |[CardChannelProperties](CardChannelProperties.md) | ☑️ |  | | |\n| **cardInformation** |[CardInformation](CardInformation.md) |  |  | | |\n| **cardVerificationResults** |[CardVerificationResults](CardVerificationResults.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentSimulation Properties in Markdown\nDESCRIPTION: A markdown table detailing the properties of the PaymentSimulation object. It includes two properties: 'status' and 'message', both of string type and not marked as required.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentSimulation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **status** |string |  |  | | |\n| **message** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining PaymentMethodStatus Enum Values in JavaScript\nDESCRIPTION: Enumeration of possible status values for payment methods in the Xendit Node.js SDK. Contains values for tracking payment method lifecycle states from creation through processing to final status.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/PaymentMethodStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Active` (value: `'ACTIVE'`)\n\n* `Expired` (value: `'EXPIRED'`)\n\n* `Inactive` (value: `'INACTIVE'`)\n\n* `Pending` (value: `'PENDING'`)\n\n* `RequiresAction` (value: `'REQUIRES_ACTION'`)\n\n* `Failed` (value: `'FAILED'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining Card Payment Method Properties in Markdown\nDESCRIPTION: A markdown table that outlines the properties of the Card payment method, including their names, types, requirements, descriptions, and examples. It references several related components such as CardChannelCode, CardChannelProperties, TokenizedCardInformation, and CardVerificationResults.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/Card.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **channelCode** |[CardChannelCode](CardChannelCode.md) |  |  | | |\n| **currency** |string |  |  | | |\n| **channelProperties** |[CardChannelProperties](CardChannelProperties.md) | ☑️ |  | | |\n| **cardInformation** |[TokenizedCardInformation](TokenizedCardInformation.md) |  |  | | |\n| **cardVerificationResults** |[CardVerificationResults](CardVerificationResults.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining ServerError Properties in Markdown\nDESCRIPTION: This snippet defines the properties of a ServerError class using a markdown table. It specifies two required string properties: errorCode and message.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/ServerError.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **errorCode** |string | ☑️ |  | | |\n| **message** |string | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: DirectDebitType Enum Values for Xendit Payment Processing\nDESCRIPTION: Defines the supported direct debit payment methods in the Xendit payment system. Includes options for debit cards, bank accounts, and bank redirects. Contains a fallback value for handling unknown enum values in older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_method/DirectDebitType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum DirectDebitType {\n    DebitCard = 'DEBIT_CARD',\n    BankAccount = 'BANK_ACCOUNT',\n    BankRedirect = 'BANK_REDIRECT',\n    XenditEnumDefaultFallback = 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting PaymentMethodParameters Properties in Markdown\nDESCRIPTION: This markdown table outlines the properties of the PaymentMethodParameters object. It includes the property names, their types (with links to type definitions), whether they are required, and placeholders for descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentMethodParameters.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **type** |[PaymentMethodType](PaymentMethodType.md) | ☑️ |  | | |\n| **reusability** |[PaymentMethodReusability](PaymentMethodReusability.md) | ☑️ |  | | |\n| **description** |string |  |  | | |\n| **referenceId** |string |  |  | | |\n| **card** |[CardParameters](CardParameters.md) |  |  | | |\n| **directDebit** |[DirectDebitParameters](DirectDebitParameters.md) |  |  | | |\n| **ewallet** |[EWalletParameters](EWalletParameters.md) |  |  | | |\n| **overTheCounter** |[OverTheCounterParameters](OverTheCounterParameters.md) |  |  | | |\n| **virtualAccount** |[VirtualAccountParameters](VirtualAccountParameters.md) |  |  | | |\n| **qrCode** |[QRCodeParameters](QRCodeParameters.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining ForbiddenError Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ForbiddenError class using a markdown table. It specifies two properties: errorCode and message, both of which are required string fields.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/ForbiddenError.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **errorCode** |string | ☑️ | The specific error code indicating that access to the invoice operation is suspended. | | |\n| **message** |string | ☑️ | A human-readable error message providing additional context about the 403 Forbidden response. | | |\n```\n\n----------------------------------------\n\nTITLE: Defining KYCDocumentType Enum in Markdown\nDESCRIPTION: Enumerates various document types used for KYC verification, including personal identification documents and business-related documents. It also includes a fallback value for handling unknown enum values in older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/KycDocumentType.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `BirthCertificate` (value: `'BIRTH_CERTIFICATE'`)\n\n* `BankStatement` (value: `'BANK_STATEMENT'`)\n\n* `DrivingLicense` (value: `'DRIVING_LICENSE'`)\n\n* `IdentityCard` (value: `'IDENTITY_CARD'`)\n\n* `Passport` (value: `'PASSPORT'`)\n\n* `Visa` (value: `'VISA'`)\n\n* `BusinessRegistration` (value: `'BUSINESS_REGISTRATION'`)\n\n* `BusinessLicense` (value: `'BUSINESS_LICENSE'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Documenting ServerError Properties in Markdown\nDESCRIPTION: Defines the properties of the ServerError class using a markdown table. It specifies three required properties: statusCode (number), error (string), and message (string).\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/balance_and_transaction/ServerError.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **statusCode** |number | ☑️ |  | | |\n| **error** |string | ☑️ |  | | |\n| **message** |string | ☑️ |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining ModelError Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ModelError class using a markdown table. It includes the property names, types, whether they are required, descriptions, and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payout/Error.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **errorCode** |string | ☑️ | Specific error encountered when processing the request, can refer to the API documentation on proper handling of each available error code https://developers.xendit.co/api-reference/#payouts | | |\n| **message** |string | ☑️ | Human readable error message | | |\n| **errors** |[ErrorErrorsInner[]](ErrorErrorsInner.md) |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining InvoicePaymentMethod Enum Values in Xendit Node.js SDK\nDESCRIPTION: An enumeration of all available payment methods for Xendit invoices. The enum includes standard payment options like POOL, CALLBACK_VIRTUAL_ACCOUNT, CREDIT_CARD, and newer methods like CRYPTOCURRENCY. It also includes a fallback value for handling unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/InvoicePaymentMethod.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Pool` (value: `'POOL'`)\n\n* `CallbackVirtualAccount` (value: `'CALLBACK_VIRTUAL_ACCOUNT'`)\n\n* `CreditCard` (value: `'CREDIT_CARD'`)\n\n* `RetailOutlet` (value: `'RETAIL_OUTLET'`)\n\n* `QrCode` (value: `'QR_CODE'`)\n\n* `Qris` (value: `'QRIS'`)\n\n* `Ewallet` (value: `'EWALLET'`)\n\n* `DirectDebit` (value: `'DIRECT_DEBIT'`)\n\n* `BankTransfer` (value: `'BANK_TRANSFER'`)\n\n* `Paylater` (value: `'PAYLATER'`)\n\n* `Cryptocurrency` (value: `'CRYPTOCURRENCY'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining AccountCard Properties in Markdown\nDESCRIPTION: Describes the 'tokenId' property of the AccountCard class using a markdown table. The tokenId is a string that represents the token returned during tokenization.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/AccountCard.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **tokenId** |string |  | The token id returned in tokenisation | | |\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCustomer400Response Properties in Markdown\nDESCRIPTION: Specifies the properties of the CreateCustomer400Response model using a markdown table. It includes the property names, data types, whether they are required, and placeholders for descriptions and examples.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/CreateCustomer400Response.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **errorCode** |string | ☑️ |  | | |\n| **message** |any | ☑️ |  | | |\n| **errors** |object[] |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Defining QR Code Channel Enums in JavaScript\nDESCRIPTION: Enumeration of supported QR code payment channels in the Xendit system. Includes values for different regional payment methods like QRIS, DANA, RCBC, LINKAJA, PROMPTPAY as well as Xendit's own QR formats. Contains a fallback value for handling unknown enum values.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/QrCodeChannelCode.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    Qris: 'QRIS',\n    Dana: 'DANA',\n    Rcbc: 'RCBC',\n    Linkaja: 'LINKAJA',\n    Promptpay: 'PROMPTPAY',\n    Xendit: 'XENDIT',\n    Qrph: 'QRPH',\n    XenditEnumDefaultFallback: 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetCustomerByReferenceID400ResponseAllOf Properties in Markdown\nDESCRIPTION: Describes the properties of the GetCustomerByReferenceID400ResponseAllOf class using a markdown table. It includes two properties: errorCode (string) and message (any type), neither of which are marked as required.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/customer/GetCustomerByReferenceId400ResponseAllOf.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **errorCode** |string |  |  | | |\n| **message** |any |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Payment Method Reusability Enum Constants\nDESCRIPTION: Defines the available reusability options for payment methods. Includes MULTIPLE_USE for reusable payment methods, ONE_TIME_USE for single-use methods, and a fallback value for unknown enum values in older SDK versions.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentMethodReusability.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n* `MultipleUse` (value: `'MULTIPLE_USE'`)\n* `OneTimeUse` (value: `'ONE_TIME_USE'`)\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining CreateRefund503Response Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the CreateRefund503Response object using a Markdown table. It specifies two string properties: errorCode and message, neither of which are marked as required.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/refund/CreateRefund503Response.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **errorCode** |string |  |  | | |\n| **message** |string |  |  | | |\n```\n\n----------------------------------------\n\nTITLE: Payment Request Country Enum Definition in JavaScript\nDESCRIPTION: Defines the PaymentRequestCountry enum with country code values for Indonesia, Philippines, Vietnam, Thailand, Malaysia, and a fallback value for unknown enum types. When encountering UNKNOWN_ENUM_VALUE, users should upgrade their SDK version.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/payment_request/PaymentRequestCountry.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Id` (value: `'ID'`)\n\n* `Ph` (value: `'PH'`)\n\n* `Vn` (value: `'VN'`)\n\n* `Th` (value: `'TH'`)\n\n* `My` (value: `'MY'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: PaylaterType Enum Values in JavaScript\nDESCRIPTION: Defines enum values for paylater payment channels supported by Xendit. Includes common providers like Kredivo, Akulaku, Uangme, Billease, Cashalo, and Atome, plus a fallback value for unknown enum types. When encountering UNKNOWN_ENUM_VALUE, users should upgrade their SDK version.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/PaylaterType.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n* `Kredivo` (value: `'KREDIVO'`)\n\n* `Akulaku` (value: `'AKULAKU'`)\n\n* `Uangme` (value: `'UANGME'`)\n\n* `Billease` (value: `'BILLEASE'`)\n\n* `Cashalo` (value: `'CASHALO'`)\n\n* `Atome` (value: `'ATOME'`)\n\n* `XenditEnumDefaultFallback` (value: `UNKNOWN_ENUM_VALUE`)\n```\n\n----------------------------------------\n\nTITLE: Defining Retail Outlet Enums - JavaScript\nDESCRIPTION: Enumeration of retail outlet channel identifiers used for payment locations. Includes major convenience stores and payment centers across Southeast Asia. Contains a fallback value 'UNKNOWN_ENUM_VALUE' for backwards compatibility.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/RetailOutletName.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  Alfamart: 'ALFAMART',\n  Indomaret: 'INDOMARET',\n  _7Eleven: '7ELEVEN',\n  Cebuana: 'CEBUANA',\n  DpEcpayLoan: 'DP_ECPAY_LOAN',\n  DpMlhuillier: 'DP_MLHUILLIER',\n  DpPalawan: 'DP_PALAWAN', \n  DpEcpaySchool: 'DP_ECPAY_SCHOOL',\n  Lbc: 'LBC',\n  XenditEnumDefaultFallback: 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QR Code Types Enum in TypeScript\nDESCRIPTION: Enumerates the available QR Code channels for invoice transactions. Includes QRIS, PROMPTPAY, QRPH, and a fallback for unknown values. Developers should update their SDK if encountering the fallback value.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/QrCodeType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum QrCodeType {\n    Qris = 'QRIS',\n    Promptpay = 'PROMPTPAY',\n    Qrph = 'QRPH',\n    XenditEnumDefaultFallback = 'UNKNOWN_ENUM_VALUE'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InvoiceNotFoundError Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the InvoiceNotFoundError response. It includes the name, type, requirement status, description, and examples for each property.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/invoice/InvoiceNotFoundError.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Required | Description | Examples |\n|------------|:-------------:|:-------------:|-------------|:-------------:|\n| **errorCode** |string | ☑️ | The error code indicating the type of error that occurred. | | |\n| **message** |string | ☑️ | A human-readable error message that provides additional information about the error. | | |\n```\n\n----------------------------------------\n\nTITLE: Initializing Xendit Payout Client in TypeScript\nDESCRIPTION: Shows how to initialize the Xendit Payout client using either the destructured client instance or direct module import. Both methods require setting your secret key for authentication.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/docs/Payout.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Xendit, Payout as PayoutClient } from 'xendit-node';\n\nconst xenditClient = new Xendit({secretKey: YOUR_SECRET_KEY})\nconst { Payout } = xenditClient\n\nconst xenditPayoutClient = new PayoutClient({secretKey: YOUR_SECRET_KEY})\n\n// At this point, `Payout` and `xenditPayoutClient` will have no usage difference, for example:\n// Payout.\n// or\n// xenditPayoutClient.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Xendit URL\nDESCRIPTION: Example of initializing the Xendit client with a custom API URL. This allows overriding the default production URL for testing or specific environment requirements.\nSOURCE: https://github.com/xendit/xendit-node/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst xenditClient = new Xendit({\n  secretKey: SECRET_API_KEY,\n  xenditURL: 'https://mock-server.localhost:3000',\n})\n```"
  }
]