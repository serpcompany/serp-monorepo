[
  {
    "owner": "seleniumbase",
    "repo": "seleniumbase",
    "content": "TITLE: Listing SeleniumBase Console Commands\nDESCRIPTION: This snippet shows the available SeleniumBase console commands and their basic usage. It includes commands for driver installation, method listing, test execution options, GUI tools, and more.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nCOMMANDS:\n      get / install    [DRIVER] [OPTIONS]\n      methods          (List common Python methods)\n      options          (List common pytest options)\n      behave-options   (List common behave options)\n      gui / commander  [OPTIONAL PATH or TEST FILE]\n      behave-gui       (SBase Commander for Behave)\n      caseplans        [OPTIONAL PATH or TEST FILE]\n      mkdir            [DIRECTORY] [OPTIONS]\n      mkfile           [FILE.py] [OPTIONS]\n      mkrec / codegen  [FILE.py] [OPTIONS]\n      recorder         (Open Recorder Desktop App.)\n      record           (If args: mkrec. Else: App.)\n      mkpres           [FILE.py] [LANG]\n      mkchart          [FILE.py] [LANG]\n      print            [FILE] [OPTIONS]\n      translate        [SB_FILE.py] [LANG] [ACTION]\n      convert          [WEBDRIVER_UNITTEST_FILE.py]\n      extract-objects  [SB_FILE.py]\n      inject-objects   [SB_FILE.py] [OPTIONS]\n      objectify        [SB_FILE.py] [OPTIONS]\n      revert-objects   [SB_FILE.py] [OPTIONS]\n      encrypt / obfuscate\n      decrypt / unobfuscate\n      proxy            (Start a basic proxy server)\n      download server  (Get Selenium Grid JAR file)\n      grid-hub         [start|stop] [OPTIONS]\n      grid-node        [start|stop] --hub=[HOST/IP]\n * (EXAMPLE: \"sbase get chromedriver\") *\n```\n\n----------------------------------------\n\nTITLE: Importing BaseCase from SeleniumBase in Python\nDESCRIPTION: Shows how to import the BaseCase class from SeleniumBase, which is the foundation for creating test classes with SeleniumBase functionality.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\n```\n\n----------------------------------------\n\nTITLE: Running Basic SeleniumBase Test\nDESCRIPTION: Run a basic test using the default Chrome browser\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Tests with Various Command-Line Options in Bash\nDESCRIPTION: Examples of how to run SeleniumBase tests using pytest with different command-line options to customize test execution. Options include browser selection, running in various modes (Demo, Headless, Multi-threading), generating reports, debugging, data passing, grid integration, proxy configuration, and mobile emulation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Run a test in Chrome (default browser)\npytest my_first_test.py\n\n# Run a test in Edge\npytest test_swag_labs.py --edge\n\n# Run a test in Demo Mode (highlight assertions)\npytest test_demo_site.py --demo\n\n# Run a test in Headless Mode (invisible browser)\npytest test_demo_site.py --headless\n\n# Run tests multi-threaded using [n] threads\npytest test_suite.py -n4\n\n# Reuse the browser session for all tests (\"--reuse-session\")\npytest test_suite.py --rs\n\n# Reuse the browser session, but erase cookies between tests\npytest test_suite.py --rs --crumbs\n\n# Create a real-time dashboard for test results\npytest test_suite.py --dashboard\n\n# Create a pytest-html report after tests are done\npytest test_suite.py --html=report.html\n\n# Rerun failing tests more times\npytest test_suite.py --reruns=1\n\n# Activate Debug Mode at the start (\"n\": next. \"c\": continue)\npytest test_null.py --trace -s\n\n# Activate Debug Mode on failures (\"n\": next. \"c\": continue)\npytest test_fail.py --pdb -s\n\n# Activate Debug Mode at the end (\"n\": next. \"c\": continue)\npytest test_fail.py --ftrace -s\n\n# Activate Recorder/Debug Mode as the test begins (\"c\" to continue)\npytest test_null.py --recorder --trace -s\n\n# Pass extra data into tests (retrieve by calling self.data)\npytest my_first_test.py --data=\"ABC\"\n\n# Run tests on a local Selenium Grid\npytest test_suite.py --server=\"127.0.0.1\"\n\n# Run tests on a remote Selenium Grid\npytest test_suite.py --server=IP_ADDRESS --port=4444\n\n# Run tests on a remote Selenium Grid with authentication\npytest test_suite.py --server=USERNAME:KEY@IP_ADDRESS --port=80\n\n# Run tests through a proxy server\npytest proxy_test.py --proxy=IP_ADDRESS:PORT\n\n# Run tests through a proxy server with authentication\npytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT\n\n# Run tests while setting the web browser's User Agent\npytest user_agent_test.py --agent=\"USER-AGENT-STRING\"\n\n# Run tests using Chrome's mobile device emulator (default settings)\npytest test_swag_labs.py --mobile\n\n# Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio\npytest test_swag_labs.py --mobile --metrics=\"360,640,2\"\n\n# Run tests using UC Mode to evade bot-detection services\npytest verify_undetected.py --uc\n```\n\n----------------------------------------\n\nTITLE: Using context managers for iframe switching in SeleniumBase\nDESCRIPTION: This snippet shows how to use context managers to switch to iframes, perform actions, and automatically switch back when exiting the context. It also demonstrates handling nested iframes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/handling_iframes.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith self.frame_switch(\"iframe\"):\n    # ... Now perform actions while inside the code block\n# You have left the iframe\n```\n\nLANGUAGE: python\nCODE:\n```\nwith self.frame_switch('iframe[name=\"frame1\"]'):\n    with self.frame_switch('iframe[name=\"frame2\"]'):\n        # ... Now perform actions while inside the code block\n    # You are now back inside the first iframe\n# You have left all the iframes\n```\n\n----------------------------------------\n\nTITLE: Listing Common pytest Options for SeleniumBase\nDESCRIPTION: This snippet shows the output of the 'sbase options' command, which lists common pytest command-line options available when using SeleniumBase. It includes options for browser selection, test execution modes, and various configurations.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--browser=BROWSER  (The web browser to use. Default is \"chrome\")\n--edge / --firefox / --safari  (Shortcut for browser selection.)\n--headless  (Run tests headlessly. Default mode on Linux OS.)\n--demo  (Slow down and visually see test actions as they occur.)\n--slow  (Slow down the automation. Faster than using Demo Mode.)\n--rs / --reuse-session  (Reuse browser session between tests.)\n--crumbs  (Clear all cookies between tests reusing a session.)\n--maximize  (Start tests with the web browser window maximized.)\n--dashboard  (Enable SeleniumBase's Dashboard at dashboard.html)\n--incognito  (Enable Chromium's Incognito mode.)\n--guest  (Enable Chromium's Guest Mode.)\n--dark  (Enable Chromium's Dark Mode.)\n--uc  (Use undetected-chromedriver to evade detection.)\n-m=MARKER  (Run tests with the specified pytest marker.)\n-n=NUM  (Multithread the tests using that many threads.)\n-v  (Verbose mode. Print the full names of each test run.)\n--html=report.html  (Create a detailed pytest-html report.)\n--collect-only / --co  (Only show discovered tests. No run.)\n--co -q  (Only show full names of discovered tests. No run.)\n-x  (Stop running tests after the first failure is reached.)\n--pdb  (Enter the Post Mortem Debug Mode after any test fails.)\n--trace  (Enter Debug Mode immediately after starting any test.)\n      | Debug Mode Commands  >>>   help / h: List all commands. |\n      |   n: Next line of method. s: Step through. c: Continue. |\n      |  return / r: Run until method returns. j: Jump to line. |\n      | where / w: Show stack spot. u: Up stack. d: Down stack. |\n      | longlist / ll: See code. dir(): List namespace objects. |\n--help / -h  (Display list of all available pytest options.)\n--final-debug  (Enter Final Debug Mode after each test ends.)\n--recorder / --rec  (Save browser actions as Python scripts.)\n--rec-behave / --rec-gherkin  (Save actions as Gherkin code.)\n--rec-print  (Display recorded scripts when they are created.)\n--save-screenshot  (Save a screenshot at the end of each test.)\n--archive-logs  (Archive old log files instead of deleting them.)\n--check-js  (Check for JavaScript errors after page loads.)\n--start-page=URL  (The browser start page when tests begin.)\n--agent=STRING  (Modify the web browser's User-Agent string.)\n--mobile  (Use Chromium's mobile device emulator during tests.)\n--metrics=STRING  (Set mobile \"CSSWidth,CSSHeight,PixelRatio\".)\n--ad-block  (Block some types of display ads after page loads.)\n--settings-file=FILE  (Override default SeleniumBase settings.)\n--env=ENV  (Set the test env. Access with \"self.env\" in tests.)\n--data=DATA  (Extra test data. Access with \"self.data\" in tests.)\n--disable-csp  (Disable the Content Security Policy of websites.)\n--remote-debug  (Sync to Ch-R-Debugger chrome://inspect/#devices)\n--server=SERVER  (The Selenium Grid server/IP used for tests.)\n--port=PORT  (The Selenium Grid port used by the test server.)\n--proxy=SERVER:PORT  (Connect to a proxy server:port for tests.)\n--proxy=USER:PASS@SERVER:PORT  (Use authenticated proxy server.)\n```\n\n----------------------------------------\n\nTITLE: Verifying ChromeDriver Installation with Python\nDESCRIPTION: Python commands to verify that ChromeDriver is correctly installed and accessible. This example instantiates a Chrome browser and navigates to the Chrome website.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/verify_webdriver.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from seleniumbase import get_driver\n>>> driver = get_driver(\"chrome\", headless=False)\n>>> driver.get(\"https://www.google.com/chrome\")\n>>> driver.quit()\n>>> exit()\n```\n\n----------------------------------------\n\nTITLE: Downloading WebDrivers using SeleniumBase Commands in Bash\nDESCRIPTION: These commands demonstrate how to download ChromeDriver, GeckoDriver, and EdgeDriver using SeleniumBase's built-in commands. The drivers are downloaded into the seleniumbase/drivers/ folder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/webdriver_installation.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase get chromedriver\nseleniumbase get geckodriver\nseleniumbase get edgedriver\n```\n\n----------------------------------------\n\nTITLE: Running Basic Test with Demo Mode\nDESCRIPTION: Shows how to execute a basic test with Demo Mode enabled for enhanced visualization of test steps.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/demo_mode.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py --demo\n```\n\n----------------------------------------\n\nTITLE: Listing Common Behave Options for SeleniumBase\nDESCRIPTION: This snippet displays the output of the 'sbase behave-options' command, which lists common Behave command-line options available when using SeleniumBase. It includes options for browser selection, test execution modes, and various configurations specific to Behave.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-D browser=BROWSER  (The web browser to use. Default is \"chrome\")\n-D headless  (Run tests headlessly. Default mode on Linux OS.)\n-D demo  (Slow down and visually see test actions as they occur.)\n-D slow  (Slow down the automation. Faster than using Demo Mode.)\n-D reuse-session / -D rs  (Reuse browser session between tests.)\n-D crumbs  (Clear all cookies between tests reusing a session.)\n-D maximize  (Start tests with the web browser window maximized.)\n-D dashboard  (Enable SeleniumBase's Dashboard at dashboard.html)\n-D incognito  (Enable Chromium's Incognito Mode.)\n-D guest  (Enable Chromium's Guest Mode.)\n-D dark  (Enable Chromium's Dark Mode.)\n-D uc  (Use undetected-chromedriver to evade detection.)\n--no-snippets / -q  (Quiet mode. Don't print snippets.)\n--dry-run / -d  (Dry run. Only show discovered tests.)\n--stop  (Stop running tests after the first failure is reached.)\n-D pdb  (Enter the Post Mortem Debug Mode after any test fails.)\n      | Debug Mode Commands  >>>   help / h: List all commands. |\n      |   n: Next line of method. s: Step through. c: Continue. |\n      |  return / r: Run until method returns. j: Jump to line. |\n      | where / w: Show stack spot. u: Up stack. d: Down stack. |\n      | longlist / ll: See code. dir(): List namespace objects. |\n-D recorder  (Record browser actions to generate test scripts.)\n-D rec-print  (Display recorded scripts when they are created.)\n-D save-screenshot  (Save a screenshot at the end of each test.)\n-D archive-logs  (Archive old log files instead of deleting them.)\n-D check-js  (Check for JavaScript errors after page loads.)\n-D start-page=URL  (The browser start page when tests begin.)\n-D agent=STRING  (Modify the web browser's User-Agent string.)\n-D mobile  (Use Chromium's mobile device emulator during tests.)\n-D metrics=STRING  (Set mobile \"CSSWidth,CSSHeight,PixelRatio\".)\n-D ad-block  (Block some types of display ads after page loads.)\n-D settings-file=FILE  (Override default SeleniumBase settings.)\n-D env=ENV  (Set the test env. Access with \"self.env\" in tests.)\n-D data=DATA  (Extra test data. Access with \"self.data\" in tests.)\n-D disable-csp  (Disable the Content Security Policy of websites.)\n-D remote-debug  (Sync to Ch-R-Debugger chrome://inspect/#devices)\n-D server=SERVER  (The Selenium Grid server/IP used for tests.)\n-D port=PORT  (The Selenium Grid port used by the test server.)\n-D proxy=SERVER:PORT  (Connect to a proxy server:port for tests.)\n-D proxy=USER:PASS@SERVER:PORT  (Use authenticated proxy server.)\n```\n\n----------------------------------------\n\nTITLE: Downloading Web Drivers with SeleniumBase Commands\nDESCRIPTION: Commands to download web drivers to the seleniumbase/drivers folder. These commands automatically download the correct version of the driver for your browser.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/verify_webdriver.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsbase get chromedriver\nsbase get geckodriver\nsbase get edgedriver\n```\n\n----------------------------------------\n\nTITLE: Activating CDP Mode and Bypassing CAPTCHA in Python\nDESCRIPTION: This code snippet demonstrates how to activate CDP Mode in SeleniumBase, navigate to a GitLab login page, and bypass a CAPTCHA using the uc_gui_click_captcha() method.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, locale=\"en\") as sb:\n    url = \"https://gitlab.com/users/sign_in\"\n    sb.activate_cdp_mode(url)\n    sb.uc_gui_click_captcha()\n    sb.sleep(2)\n```\n\n----------------------------------------\n\nTITLE: Basic SeleniumBase Test Execution\nDESCRIPTION: Command to run SeleniumBase tests with custom settings file\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py --settings-file=custom_settings.py\n```\n\n----------------------------------------\n\nTITLE: Bypassing Cloudflare Turnstile CAPTCHA with CDP Mode in Python\nDESCRIPTION: This code snippet shows how to use CDP Mode to bypass a Cloudflare Turnstile CAPTCHA on a website. It uses the cdp.gui_click_element() method to interact with the CAPTCHA element.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True) as sb:\n    url = \"www.planetminecraft.com/account/sign_in/\"\n    sb.activate_cdp_mode(url)\n    sb.sleep(2)\n    sb.cdp.gui_click_element(\"#turnstile-widget div\")\n    sb.sleep(2)\n```\n\n----------------------------------------\n\nTITLE: Using SeleniumBase APIs within a test method\nDESCRIPTION: Shows how to call SeleniumBase APIs via self within a test method to perform browser actions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass MyTestClass(BaseCase):\n    def test_abc(self):\n        self.open(\"https://example.com\")\n```\n\n----------------------------------------\n\nTITLE: Using Chrome for Testing Binary\nDESCRIPTION: Commands to download and run tests with Chrome for Testing binary, including parallel execution with dashboard and HTML reporting.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nsbase get cft\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest --cft -n8 --dashboard --html=report.html -v --rs --headless\n```\n\n----------------------------------------\n\nTITLE: Creating an IntroJS Website Tour in Python\nDESCRIPTION: Code example showing how to create an interactive tour of Google Maps using SeleniumBase's tour generator. This creates, configures, exports, and plays a website tour with multiple steps.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.open(\"https://www.google.com/maps/@42.3591234,-71.0915634,15z\")\nself.create_tour(theme=\"introjs\")\nself.add_tour_step(\"Welcome to Google Maps!\", title=\"SeleniumBase Tours\")\nself.add_tour_step(\"Enter Location\", \"#searchboxinput\", title=\"Search Box\")\nself.add_tour_step(\"See it\", \"#searchbox-searchbutton\", alignment=\"bottom\")\nself.add_tour_step(\"Thanks for using Tours!\", title=\"End of Guided Tour\")\nself.export_tour(filename=\"maps_introjs_tour.js\")\nself.play_tour()\n```\n\n----------------------------------------\n\nTITLE: Complete SeleniumBase login test example\nDESCRIPTION: A full example of a SeleniumBase test that performs a login operation including page navigation, form filling, element verification, and logout.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass TestSimpleLogin(BaseCase):\n    def test_simple_login(self):\n        self.open(\"https://seleniumbase.io/simple/login\")\n        self.type(\"#username\", \"demo_user\")\n        self.type(\"#password\", \"secret_pass\")\n        self.click('a:contains(\"Sign in\")')\n        self.assert_exact_text(\"Welcome!\", \"h1\")\n        self.assert_element(\"img#image1\")\n        self.highlight(\"#image1\")\n        self.click_link(\"Sign out\")\n        self.assert_text(\"signed out\", \"#top_message\")\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase via Command Line\nDESCRIPTION: Shows how to execute SeleniumBase using the shortened command form 'sbase' through Python module execution\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/sbase/ReadMe.txt#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m sbase\n```\n\n----------------------------------------\n\nTITLE: UC Mode with Incognito for Post-Form Submission CAPTCHA\nDESCRIPTION: Advanced example using both UC Mode and incognito mode to handle CAPTCHA that appears after submitting a form. Uses reconnect between actions and handles CAPTCHA after submission.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, incognito=True, locale=\"en\") as sb:\n    url = \"https://ahrefs.com/website-authority-checker\"\n    input_field = 'input[placeholder=\"Enter domain\"]'\n    submit_button = 'span:contains(\"Check Authority\")'\n    sb.uc_open_with_reconnect(url)  # The bot-check is later\n    sb.type(input_field, \"github.com/seleniumbase/SeleniumBase\")\n    sb.reconnect(0.1)\n    sb.uc_click(submit_button, reconnect_time=4)\n    sb.uc_gui_click_captcha()\n    sb.wait_for_text_not_visible(\"Checking\", timeout=12)\n    sb.highlight('p:contains(\"github.com/seleniumbase/SeleniumBase\")')\n    sb.highlight('a:contains(\"Top 100 backlinks\")')\n    sb.set_messenger_theme(location=\"bottom_center\")\n    sb.post_message(\"SeleniumBase wasn't detected!\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Element Removal with Visual Testing in Python\nDESCRIPTION: Test case that demonstrates detecting when an element is removed from a page. The test creates a baseline of the Python.org homepage, removes the 'Donate' button, and then compares the modified page against the baseline.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass VisualLayoutTest(BaseCase):\n    def test_python_home_layout_change_failure(self):\n        self.open('https://python.org/')\n        print('\\nCreating baseline in \"visual_baseline\" folder.')\n        self.check_window(name=\"python_home\", baseline=True)\n        # Remove the \"Donate\" button\n        self.remove_element('a.donate-button')\n        self.check_window(name=\"python_home\", level=3)\n```\n\n----------------------------------------\n\nTITLE: Installing SeleniumBase from GitHub Branch\nDESCRIPTION: Direct installation from a specific GitHub branch (master) using pip.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/seleniumbase/SeleniumBase.git@master#egg=seleniumbase\n```\n\n----------------------------------------\n\nTITLE: Bypassing Akamai Protection on Walmart Website with CDP Mode in Python\nDESCRIPTION: This example shows how to automate interactions with the Walmart website, which uses Akamai protection with PerimeterX. The script performs a product search, filters results, and extracts product descriptions and prices using SeleniumBase's CDP Mode.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, ad_block=True) as sb:\n    url = \"https://www.walmart.com/\"\n    sb.activate_cdp_mode(url)\n    sb.sleep(2.5)\n    sb.cdp.click_if_visible('[data-automation-id*=\"close-mark\"]')\n    sb.cdp.mouse_click('input[aria-label=\"Search\"]')\n    sb.sleep(1.2)\n    search = \"Settlers of Catan Board Game\"\n    required_text = \"Catan\"\n    sb.cdp.press_keys('input[aria-label=\"Search\"]', search + \"\\n\")\n    sb.sleep(3.8)\n    sb.cdp.remove_elements('[data-testid=\"skyline-ad\"]')\n    print('*** Walmart Search for \"%s\":' % search)\n    print('    (Results must contain \"%s\".)' % required_text)\n    unique_item_text = []\n    items = sb.cdp.find_elements('div[data-testid=\"list-view\"]')\n    for item in items:\n        if required_text in item.text:\n            description = item.querySelector(\n                '[data-automation-id=\"product-price\"] + span'\n            )\n            if description and description.text not in unique_item_text:\n                unique_item_text.append(description.text)\n                print(\"* \" + description.text)\n                price = item.querySelector(\n                    '[data-automation-id=\"product-price\"]'\n                )\n                if price:\n                    price_text = price.text\n                    price_text = price_text.split(\"current price Now \")[-1]\n                    price_text = price_text.split(\"current price \")[-1]\n                    price_text = price_text.split(\" \")[0]\n                    print(\"  (\" + price_text + \")\")\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Pytest Options\nDESCRIPTION: Shows an example of combining multiple pytest and SeleniumBase options for enhanced test execution, including parallel processing, headless mode, dashboard creation, and HTML report generation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npytest --headless -n8 --dashboard --html=report.html -v --rs --crumbs\n```\n\n----------------------------------------\n\nTITLE: Downloading Chrome Browser Binaries in SeleniumBase\nDESCRIPTION: Commands for downloading Chrome for Testing (CFT) and Chrome-Headless-Shell (CHS) browser binaries into the seleniumbase/drivers folder. These binaries can be referenced in scripts using the binary_location parameter.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/drivers/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsbase get cft\nsbase get chs\n```\n\n----------------------------------------\n\nTITLE: Bypassing Shape Security on Nike Website with CDP Mode in Python\nDESCRIPTION: This example demonstrates how to automate interactions with the Nike website, which uses Shape Security. The script performs a product search and extracts product information using SeleniumBase's CDP Mode with undetected Chrome.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, locale=\"en\", pls=\"none\") as sb:\n    url = \"https://www.nike.com/\"\n    sb.activate_cdp_mode(url)\n    sb.sleep(2.5)\n    sb.cdp.click('div[data-testid=\"user-tools-container\"]')\n    sb.sleep(1.5)\n    search = \"Nike Air Force 1\"\n    sb.cdp.press_keys('input[type=\"search\"]', search)\n    sb.sleep(4)\n    elements = sb.cdp.select_all('ul[data-testid*=\"products\"] figure .details')\n    if elements:\n        print('**** Found results for \"%s\": ****' % search)\n    for element in elements:\n        print(\"* \" + element.text)\n    sb.sleep(2)\n```\n\n----------------------------------------\n\nTITLE: Complete E-commerce Flow Test in Python using SeleniumBase\nDESCRIPTION: Test case for full e-commerce flow including login, adding items to cart, checkout, and logout on saucedemo.com\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_summary.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmy_first_test.py::MyTestClass::test_swag_labs\n```\n\n----------------------------------------\n\nTITLE: SeleniumBase CDP Mode API Methods\nDESCRIPTION: A comprehensive list of SeleniumBase CDP Mode API methods for browser automation and web element interaction. These methods cover actions such as navigation, element manipulation, JavaScript execution, window management, and assertions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nsb.cdp.get(url)\nsb.cdp.open(url)\nsb.cdp.reload(ignore_cache=True, script_to_evaluate_on_load=None)\nsb.cdp.refresh()\nsb.cdp.get_event_loop()\nsb.cdp.add_handler(event, handler)\nsb.cdp.find_element(selector, best_match=False, timeout=None)\nsb.cdp.find(selector, best_match=False, timeout=None)\nsb.cdp.locator(selector, best_match=False, timeout=None)\nsb.cdp.find_element_by_text(text, tag_name=None, timeout=None)\nsb.cdp.find_all(selector, timeout=None)\nsb.cdp.find_elements_by_text(text, tag_name=None)\nsb.cdp.select(selector, timeout=None)\nsb.cdp.select_all(selector, timeout=None)\nsb.cdp.find_elements(selector, timeout=None)\nsb.cdp.find_visible_elements(selector, timeout=None)\nsb.cdp.click_nth_element(selector, number)\nsb.cdp.click_nth_visible_element(selector, number)\nsb.cdp.click_link(link_text)\nsb.cdp.go_back()\nsb.cdp.go_forward()\nsb.cdp.get_navigation_history()\nsb.cdp.tile_windows(windows=None, max_columns=0)\nsb.cdp.get_all_cookies(*args, **kwargs)\nsb.cdp.set_all_cookies(*args, **kwargs)\nsb.cdp.save_cookies(*args, **kwargs)\nsb.cdp.load_cookies(*args, **kwargs)\nsb.cdp.clear_cookies()\nsb.cdp.sleep(seconds)\nsb.cdp.bring_active_window_to_front()\nsb.cdp.bring_to_front()\nsb.cdp.get_active_element()\nsb.cdp.get_active_element_css()\nsb.cdp.click(selector, timeout=None)\nsb.cdp.click_active_element()\nsb.cdp.click_if_visible(selector)\nsb.cdp.click_visible_elements(selector, limit=0)\nsb.cdp.mouse_click(selector, timeout=None)\nsb.cdp.nested_click(parent_selector, selector)\nsb.cdp.get_nested_element(parent_selector, selector)\nsb.cdp.select_option_by_text(dropdown_selector, option)\nsb.cdp.flash(selector, duration=1, color=\"44CC88\", pause=0)\nsb.cdp.highlight(selector)\nsb.cdp.focus(selector)\nsb.cdp.highlight_overlay(selector)\nsb.cdp.get_parent(element)\nsb.cdp.remove_element(selector)\nsb.cdp.remove_from_dom(selector)\nsb.cdp.remove_elements(selector)\nsb.cdp.send_keys(selector, text, timeout=None)\nsb.cdp.press_keys(selector, text, timeout=None)\nsb.cdp.type(selector, text, timeout=None)\nsb.cdp.set_value(selector, text, timeout=None)\nsb.cdp.submit(selector)\nsb.cdp.evaluate(expression)\nsb.cdp.js_dumps(obj_name)\nsb.cdp.maximize()\nsb.cdp.minimize()\nsb.cdp.medimize()\nsb.cdp.set_window_rect()\nsb.cdp.reset_window_size()\nsb.cdp.open_new_window(url=None, switch_to=True)\nsb.cdp.switch_to_window(window)\nsb.cdp.switch_to_newest_window()\nsb.cdp.open_new_tab(url=None, switch_to=True)\nsb.cdp.switch_to_tab(tab)\nsb.cdp.switch_to_newest_tab()\nsb.cdp.close_active_tab()\nsb.cdp.get_active_tab()\nsb.cdp.get_tabs()\nsb.cdp.get_window()\nsb.cdp.get_text(selector)\nsb.cdp.get_title()\nsb.cdp.get_current_url()\nsb.cdp.get_origin()\nsb.cdp.get_page_source()\nsb.cdp.get_user_agent()\nsb.cdp.get_cookie_string()\nsb.cdp.get_locale_code()\nsb.cdp.get_local_storage_item(key)\nsb.cdp.get_session_storage_item(key)\nsb.cdp.get_screen_rect()\nsb.cdp.get_window_rect()\nsb.cdp.get_window_size()\nsb.cdp.get_window_position()\nsb.cdp.get_element_rect(selector, timeout=None)\nsb.cdp.get_element_size(selector, timeout=None)\nsb.cdp.get_element_position(selector, timeout=None)\nsb.cdp.get_gui_element_rect(selector, timeout=None)\nsb.cdp.get_gui_element_center(selector, timeout=None)\nsb.cdp.get_document()\nsb.cdp.get_flattened_document()\nsb.cdp.get_element_attributes(selector)\nsb.cdp.get_element_attribute(selector, attribute)\nsb.cdp.get_attribute(selector, attribute)\nsb.cdp.get_element_html(selector)\nsb.cdp.set_locale(locale)\nsb.cdp.set_local_storage_item(key, value)\nsb.cdp.set_session_storage_item(key, value)\nsb.cdp.set_attributes(selector, attribute, value)\nsb.cdp.gui_press_key(key)\nsb.cdp.gui_press_keys(keys)\nsb.cdp.gui_write(text)\nsb.cdp.gui_click_x_y(x, y)\nsb.cdp.gui_click_element(selector)\nsb.cdp.gui_drag_drop_points(x1, y1, x2, y2, timeframe=0.35)\nsb.cdp.gui_drag_and_drop(drag_selector, drop_selector, timeframe=0.35)\nsb.cdp.gui_click_and_hold(selector, timeframe=0.35)\nsb.cdp.gui_hover_x_y(x, y)\nsb.cdp.gui_hover_element(selector)\nsb.cdp.gui_hover_and_click(hover_selector, click_selector)\nsb.cdp.internalize_links()\nsb.cdp.is_checked(selector)\nsb.cdp.is_selected(selector)\nsb.cdp.check_if_unchecked(selector)\nsb.cdp.select_if_unselected(selector)\nsb.cdp.uncheck_if_checked(selector)\nsb.cdp.unselect_if_selected(selector)\nsb.cdp.is_element_present(selector)\nsb.cdp.is_element_visible(selector)\nsb.cdp.is_text_visible(text, selector=\"body\")\nsb.cdp.is_exact_text_visible(text, selector=\"body\")\nsb.cdp.wait_for_text(text, selector=\"body\", timeout=None)\nsb.cdp.wait_for_text_not_visible(text, selector=\"body\", timeout=None)\nsb.cdp.wait_for_element_visible(selector, timeout=None)\nsb.cdp.wait_for_element_not_visible(selector, timeout=None)\nsb.cdp.wait_for_element_absent(selector, timeout=None)\nsb.cdp.assert_element(selector, timeout=None)\nsb.cdp.assert_element_visible(selector, timeout=None)\nsb.cdp.assert_element_present(selector, timeout=None)\nsb.cdp.assert_element_absent(selector, timeout=None)\nsb.cdp.assert_element_not_visible(selector, timeout=None)\nsb.cdp.assert_element_attribute(selector, attribute, value=None)\nsb.cdp.assert_title(title)\nsb.cdp.assert_title_contains(substring)\nsb.cdp.assert_url(url)\nsb.cdp.assert_url_contains(substring)\nsb.cdp.assert_text(text, selector=\"html\", timeout=None)\nsb.cdp.assert_exact_text(text, selector=\"html\", timeout=None)\nsb.cdp.assert_text_not_visible(text, selector=\"body\", timeout=None)\nsb.cdp.assert_true()\nsb.cdp.assert_false()\nsb.cdp.assert_equal(first, second)\nsb.cdp.assert_not_equal(first, second)\nsb.cdp.assert_in(first, second)\nsb.cdp.assert_not_in(first, second)\nsb.cdp.scroll_into_view(selector)\nsb.cdp.scroll_to_y(y)\nsb.cdp.scroll_to_top()\nsb.cdp.scroll_to_bottom()\nsb.cdp.scroll_up(amount=25)\nsb.cdp.scroll_down(amount=25)\nsb.cdp.save_screenshot(name, folder=None, selector=None)\nsb.cdp.print_to_pdf(name, folder=None)\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Demo Mode with Pytest\nDESCRIPTION: Demonstrates how to run SeleniumBase tests in Demo Mode, which slows down test execution and highlights page elements. The --demo flag enables Demo Mode, and --demo-sleep can be used to override the default wait time.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py --demo\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py --demo --demo-sleep=1.2\n```\n\n----------------------------------------\n\nTITLE: Debugging SeleniumBase Tests in Python\nDESCRIPTION: Shows various debugging techniques for SeleniumBase tests, including adding sleep time, using pdb for interactive debugging, and using pytest's built-in debugger.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport time; time.sleep(5)  # Makes the test wait and do nothing for 5 seconds.\nimport pdb; pdb.set_trace()  # Debug Mode. n: next, c: continue, s: step, u: up, d: down.\nimport pytest; pytest.set_trace()  # Debug Mode. n: next, c: continue, s: step, u: up, d: down.\n```\n\n----------------------------------------\n\nTITLE: Running Behave Calculator Feature with Dashboard in SeleniumBase\nDESCRIPTION: This command runs a specific scenario (line 61) from the calculator.feature file with the Behave test runner in SeleniumBase. It shows how to use higher-level Behave steps to simplify feature files by abstracting implementation details into step definitions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> cd examples/behave_bdd/\n> behave features/calculator.feature:61 -T -D dashboard -k\n\nDashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n********************************************************************************\nFeature: SeleniumBase scenarios for the Calculator App # features/calculator.feature:1\n\n  Background:   # features/calculator.feature:3\n\n  Scenario: 7.0 × (3 + 3) = 42        # features/calculator.feature:49\n    Given Open the Calculator App     # features/steps/calculator.py:4\n    When Press C                      # features/steps/calculator.py:9\n    And Press 7                       # features/steps/calculator.py:79\n    And Press .                       # features/steps/calculator.py:104\n    And Press 0                       # features/steps/calculator.py:94\n    And Press ×                       # features/steps/calculator.py:29\n    And Press (                       # features/steps/calculator.py:14\n    And Press 3                       # features/steps/calculator.py:59\n    And Press +                       # features/steps/calculator.py:39\n    And Press 3                       # features/steps/calculator.py:59\n    And Press )                       # features/steps/calculator.py:19\n    Then Verify output is \"7.0×(3+3)\" # features/steps/calculator.py:135\n    When Press =                      # features/steps/calculator.py:44\n    Then Verify output is \"42\"        # features/steps/calculator.py:135\n   ✅ Scenario Passed!\n\n- Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n--- LogPath: /Users/michael/github/SeleniumBase/examples/behave_bdd/latest_logs/\n==================================================================================\n1 feature passed, 0 failed, 0 skipped\n1 scenario passed, 0 failed, 8 skipped\n14 steps passed, 0 failed, 60 skipped, 0 undefined\nTook 0m1.672s\n```\n\n----------------------------------------\n\nTITLE: Extended UC Mode Example with Page Validation\nDESCRIPTION: A longer example of UC Mode that performs CAPTCHA bypass and then validates page elements. It uses assert_text, assert_element, highlight, and post_message methods to verify successful login page access.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True) as sb:\n    url = \"https://gitlab.com/users/sign_in\"\n    sb.uc_open_with_reconnect(url, 4)\n    sb.uc_gui_click_captcha()\n    sb.assert_text(\"Username\", '[for=\"user_login\"]', timeout=3)\n    sb.assert_element('label[for=\"user_login\"]')\n    sb.highlight('button:contains(\"Sign in\")')\n    sb.highlight('h1:contains(\"GitLab.com\")')\n    sb.post_message(\"SeleniumBase wasn't detected\", duration=4)\n```\n\n----------------------------------------\n\nTITLE: Calculator Application Test in Python using SeleniumBase\nDESCRIPTION: Test case verifying calculator functionality with specific arithmetic operations\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_summary.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntest_calculator.py::CalculatorTests::test_6_times_7_plus_12_equals_54\n```\n\n----------------------------------------\n\nTITLE: SeleniumBase Specific Command Options\nDESCRIPTION: Comprehensive list of SeleniumBase-specific command-line options for controlling browser behavior, test environment, and execution parameters\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n--browser=BROWSER\n--chrome\n--edge\n--firefox\n--safari\n--settings-file=FILE\n--env=ENV\n--account=STR\n--data=STRING\n--var1=STRING\n--var2=STRING\n--var3=STRING\n--variables=DICT\n--user-data-dir=DIR\n--protocol=PROTOCOL\n--server=SERVER\n--port=PORT\n--cap-file=FILE\n--cap-string=STRING\n--proxy=SERVER:PORT\n--proxy=USERNAME:PASSWORD@SERVER:PORT\n--proxy-bypass-list=STRING\n--proxy-pac-url=URL\n--proxy-pac-url=USERNAME:PASSWORD@URL\n--proxy-driver\n--multi-proxy\n--agent=STRING\n--mobile\n--metrics=STRING\n--chromium-arg=\"ARG=N,ARG2\"\n--firefox-arg=\"ARG=N,ARG2\"\n--firefox-pref=SET\n--extension-zip=ZIP\n--extension-dir=DIR\n--disable-features=\"F1,F2\"\n--binary-location=PATH\n--driver-version=VER\n--sjw\n--wfa\n--pls=PLS\n--headless\n--headless1\n--headless2\n--headed\n--xvfb\n--xvfb-metrics=STRING\n--locale=LOCALE_CODE\n--interval=SECONDS\n--start-page=URL\n--archive-logs\n--archive-downloads\n--time-limit=SECONDS\n--slow\n--demo\n--demo-sleep=SECONDS\n--highlights=NUM\n--message-duration=SECONDS\n--check-js\n--ad-block\n--host-resolver-rules=RULES\n--block-images\n--do-not-track\n--verify-delay=SECONDS\n--ee | --esc-end\n--recorder\n--rec-behave\n--rec-sleep\n--rec-print\n--disable-cookies\n--disable-js\n--disable-csp\n--disable-ws\n--enable-ws\n--enable-sync\n--uc | --undetected\n--uc-cdp-events\n--log-cdp\n--remote-debug\n--ftrace | --final-trace\n--dashboard\n--dash-title=STRING\n--enable-3d-apis\n--swiftshader\n--incognito\n--guest\n--dark\n--devtools\n--rs | --reuse-session\n--rcs | --reuse-class-session\n--crumbs\n--disable-beforeunload\n--window-position=X,Y\n--window-size=WIDTH,HEIGHT\n--maximize\n--screenshot\n--no-screenshot\n--visual-baseline\n--wire\n--external-pdf\n--timeout-multiplier=MULTIPLIER\n--list-fail-page\n```\n\n----------------------------------------\n\nTITLE: Using SeleniumBase with raw Driver syntax\nDESCRIPTION: Shows an alternative SeleniumBase syntax that uses the raw Driver object instead of BaseCase, which can be run with python directly instead of pytest.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import Driver\n\ndriver = Driver()\ntry:\n    driver.get(\"https://seleniumbase.io/simple/login\")\n    driver.type(\"#username\", \"demo_user\")\n    driver.type(\"#password\", \"secret_pass\")\n    driver.click('a:contains(\"Sign in\")')\n    driver.assert_exact_text(\"Welcome!\", \"h1\")\n    driver.assert_element(\"img#image1\")\n    driver.highlight(\"#image1\")\n    driver.click_link(\"Sign out\")\n    driver.assert_text(\"signed out\", \"#top_message\")\nfinally:\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: SeleniumBase CDP Mode WebElement API Methods\nDESCRIPTION: A list of SeleniumBase CDP Mode WebElement API methods for interacting with specific web elements. These methods include actions such as clicking, typing, scrolling, and retrieving element properties.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nelement.clear_input()\nelement.click()\nelement.flash(duration=0.5, color=\"EE4488\")\nelement.focus()\nelement.gui_click(timeframe=0.25)\nelement.highlight_overlay()\nelement.mouse_click()\nelement.mouse_drag(destination)\nelement.mouse_move()\nelement.press_keys(text)\nelement.query_selector(selector)\nelement.querySelector(selector)\nelement.query_selector_all(selector)\nelement.querySelectorAll(selector)\nelement.remove_from_dom()\nelement.save_screenshot(*args, **kwargs)\nelement.save_to_dom()\nelement.scroll_into_view()\nelement.select_option()\nelement.send_file(*file_paths)\nelement.send_keys(text)\nelement.set_text(value)\nelement.type(text)\nelement.get_position()\nelement.get_html()\nelement.get_js_attributes()\nelement.get_attribute(attribute)\nelement.get_parent()\n```\n\n----------------------------------------\n\nTITLE: Recording Tests with mkrec/codegen\nDESCRIPTION: Records browser interactions to generate SeleniumBase test code with support for various browsers and recording modes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsbase mkrec new_test.py\nsbase mkrec new_test.py --url=seleniumbase.io\nsbase codegen new_test.py\nsbase codegen new_test.py --url=wikipedia.org\n```\n\n----------------------------------------\n\nTITLE: Creating Baseline Screenshots with SeleniumBase\nDESCRIPTION: This code shows how to create a baseline screenshot of a webpage for visual comparison testing using the check_window() method with baseline=True parameter.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/case_plans/test_layout_fail.VisualLayout_FixtureTests.test_python_home_change.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncheck_window(baseline=True)\n```\n\n----------------------------------------\n\nTITLE: Testing Calculator Operation in SeleniumBase\nDESCRIPTION: Test method verifying the calculation '6 × 7 + 12 = 54' using SeleniumBase's calculator web application. The test performs multiplication and addition operations and validates the expected output.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/test_calculator.CalculatorTests.test_6_times_7_plus_12_equals_54.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest_6_times_7_plus_12_equals_54\n```\n\n----------------------------------------\n\nTITLE: Testing Python.org Homepage Layout Changes with SeleniumBase\nDESCRIPTION: This test opens Python.org, establishes a baseline for visual comparison, then removes the 'Donate' button and performs a level 0 (print-only) check to detect changes. The test demonstrates how to identify visual layout differences without causing test failures.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/case_plans/python_home_test.VisualLayoutTests.test_python_home_layout_change.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncheck_window(baseline=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nremove_element(SELECTOR)\n```\n\nLANGUAGE: python\nCODE:\n```\ncheck_window(level=0)\n```\n\n----------------------------------------\n\nTITLE: Using Mobile Mode in SeleniumBase Driver Syntax\nDESCRIPTION: This Python code demonstrates how to use mobile mode in SeleniumBase's Driver syntax, performing various actions on a mobile version of a website.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mobile_testing.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import Driver\n\ndriver = Driver(mobile=True)\ntry:\n    driver.open(\"https://www.skype.com/en/get-skype/\")\n    driver.assert_element('[aria-label=\"Microsoft\"]')\n    driver.assert_text(\"Download Skype\", \"h1\")\n    driver.highlight(\"div.appBannerContent\")\n    driver.highlight(\"h1\")\n    driver.assert_text(\"Skype for Mobile\", \"h2\")\n    driver.highlight(\"h2\")\n    driver.highlight(\"#get-skype-0\")\n    driver.highlight_click(\"span[data-dropdown-icon]\")\n    driver.highlight(\"#get-skype-0_android-download\")\n    driver.highlight('[data-bi-id*=\"ios\"]')\nfinally:\n    driver.quit()\n```\n\n----------------------------------------\n\nTITLE: Detecting Hidden Element Becoming Visible with Visual Testing\nDESCRIPTION: Complete test case showing how to detect when a hidden element becomes visible using visual regression testing. The test sets a baseline, performs actions that change the page layout, then compares the new state against the baseline.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass VisualLayoutTest(BaseCase):\n    def test_applitools_layout_change_failure(self):\n        self.open('https://applitools.com/helloworld?diff1')\n        print('\\nCreating baseline in \"visual_baseline\" folder.')\n        self.check_window(name=\"helloworld\", baseline=True)\n        # Click a button that changes the text of an element\n        self.click('a[href=\"?diff1\"]')\n        # Click a button that makes a hidden element visible\n        self.click(\"button\")\n        self.check_window(name=\"helloworld\", level=3)\n```\n\n----------------------------------------\n\nTITLE: Defining a TestClass that inherits from BaseCase\nDESCRIPTION: Shows how to create a test class by inheriting from BaseCase to gain SeleniumBase functionality.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyTestClass(BaseCase):\n```\n\n----------------------------------------\n\nTITLE: All Available Dialog Box Methods in SeleniumBase\nDESCRIPTION: List of all methods available for creating and customizing dialog boxes in SeleniumBase, showing the method signatures.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nself.get_jqc_button_input(message, buttons, options=None)\n\nself.get_jqc_text_input(message, button=None, options=None)\n\nself.get_jqc_form_inputs(message, buttons, options=None)\n\nself.set_jqc_theme(theme, color=None, width=None)\n\nself.reset_jqc_theme()\n\nself.activate_jquery_confirm()  # Automatic for jqc methods\n```\n\n----------------------------------------\n\nTITLE: Switching Tabs and Frames in Python using SeleniumBase\nDESCRIPTION: Demonstrates how to switch between tabs/windows and iframes using SeleniumBase methods. This is useful when dealing with multiple pages or embedded content.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nself.switch_to_window(1)  # This switches to the new tab (0 is the first one)\n\nself.switch_to_frame('ContentManagerTextBody_ifr')\n# Now you can act inside the iFrame\n```\n\n----------------------------------------\n\nTITLE: UC Mode for Required CAPTCHA Checkbox Forms\nDESCRIPTION: Example demonstrating how to handle CAPTCHA forms that require checkbox interaction. Uses uc_gui_handle_captcha to click the CAPTCHA checkbox and then verifies success with an assertion.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True) as sb:\n    url = \"https://seleniumbase.io/apps/turnstile\"\n    sb.uc_open_with_reconnect(url, reconnect_time=2)\n    sb.uc_gui_handle_captcha()\n    sb.assert_element(\"img#captcha-success\", timeout=3)\n    sb.set_messenger_theme(location=\"top_left\")\n    sb.post_message(\"SeleniumBase wasn't detected\", duration=3)\n```\n\n----------------------------------------\n\nTITLE: Swag Labs Step Definitions Example\nDESCRIPTION: Example step definitions for testing the Swag Labs application using SeleniumBase with Behave\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom behave import step\n\n@step(\"Open the Swag Labs Login Page\")\ndef go_to_swag_labs(context):\n    sb = context.sb\n    sb.open(\"https://www.saucedemo.com\")\n    sb.clear_local_storage()\n\n@step(\"Login to Swag Labs with {user}\")\ndef login_to_swag_labs(context, user):\n    sb = context.sb\n    sb.type(\"#user-name\", user)\n    sb.type(\"#password\", \"secret_sauce\\n\")\n\n@step(\"Verify that the current user is logged in\")\ndef verify_logged_in(context):\n    sb = context.sb\n    sb.assert_element(\"#header_container\")\n    sb.assert_element(\"#react-burger-menu-btn\")\n    sb.assert_element(\"#shopping_cart_container\")\n\n@step('Add \"{item}\" to cart')\ndef add_item_to_cart(context, item):\n    sb = context.sb\n    sb.click('div.inventory_item:contains(\"%s\") button[name*=\"add\"]' % item)\n```\n\n----------------------------------------\n\nTITLE: Using HTML Inspector in SeleniumBase Python Test\nDESCRIPTION: This Python script demonstrates how to use the HTML Inspector feature in a SeleniumBase test. It opens a web page and then calls the inspect_html() method to analyze the page's HTML structure.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/html_inspector.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass HtmlInspectorTests(BaseCase):\n    def test_html_inspector(self):\n        self.open(\"https://xkcd.com/1144/\")\n        self.inspect_html()\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Logic with Element Presence and Visibility in Python using SeleniumBase\nDESCRIPTION: Demonstrates a more complex use of SeleniumBase methods to check for both element presence and visibility in a custom function.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef is_there_a_cloaked_klingon_ship_on_this_page():\n    if self.is_element_present(\"div.ships div.klingon\"):\n        return not self.is_element_visible(\"div.ships div.klingon\")\n    return False\n```\n\n----------------------------------------\n\nTITLE: Bypassing Incapsula/Imperva Protection on Pokemon Website with CDP Mode in Python\nDESCRIPTION: This example demonstrates how to use SeleniumBase's CDP Mode to automate interactions with the Pokemon website, which utilizes Incapsula/Imperva protection with invisible reCAPTCHA. The script navigates through the site, performs advanced searches, and extracts information about Pokemon and events.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, locale=\"en\", ad_block=True) as sb:\n    url = \"https://www.pokemon.com/us\"\n    sb.activate_cdp_mode(url)\n    sb.sleep(3.2)\n    sb.cdp.click(\"button#onetrust-accept-btn-handler\")\n    sb.sleep(1.2)\n    sb.cdp.click(\"a span.icon_pokeball\")\n    sb.sleep(2.5)\n    sb.cdp.click('b:contains(\"Show Advanced Search\")')\n    sb.sleep(2.5)\n    sb.cdp.click('span[data-type=\"type\"][data-value=\"electric\"]')\n    sb.sleep(0.5)\n    sb.scroll_into_view(\"a#advSearch\")\n    sb.sleep(0.5)\n    sb.cdp.click(\"a#advSearch\")\n    sb.sleep(1.2)\n    sb.cdp.click('img[src*=\"img/pokedex/detail/025.png\"]')\n    sb.cdp.assert_text(\"Pikachu\", 'div[class*=\"title\"]')\n    sb.cdp.assert_element('img[alt=\"Pikachu\"]')\n    sb.cdp.scroll_into_view(\"div.pokemon-ability-info\")\n    sb.sleep(1.2)\n    sb.cdp.flash('div[class*=\"title\"]')\n    sb.cdp.flash('img[alt=\"Pikachu\"]')\n    sb.cdp.flash(\"div.pokemon-ability-info\")\n    name = sb.cdp.get_text(\"label.styled-select\")\n    info = sb.cdp.get_text(\"div.version-descriptions p.active\")\n    print(\"*** %s: ***\\n* %s\" % (name, info))\n    sb.sleep(2)\n    sb.cdp.highlight_overlay(\"div.pokemon-ability-info\")\n    sb.sleep(2)\n    sb.cdp.click('a[href=\"https://www.pokemon.com/us/play-pokemon/\"]')\n    sb.sleep(0.6)\n    sb.cdp.click('h3:contains(\"Find an Event\")')\n    location = \"Concord, MA, USA\"\n    sb.cdp.type('input[data-testid=\"location-search\"]', location)\n    sb.sleep(1.5)\n    sb.cdp.click(\"div.autocomplete-dropdown-container div.suggestion-item\")\n    sb.sleep(0.6)\n    sb.cdp.click('img[alt=\"search-icon\"]')\n    sb.sleep(2)\n    events = sb.cdp.select_all('div[data-testid=\"event-name\"]')\n    print(\"*** Pokemon events near %s: ***\" % location)\n    for event in events:\n        print(\"* \" + event.text)\n    sb.sleep(2)\n```\n\n----------------------------------------\n\nTITLE: Bypassing DataDome Protection on BestWestern Website with CDP Mode in Python\nDESCRIPTION: This example demonstrates how to automate interactions with the BestWestern website, which uses DataDome protection. The script searches for hotels in a specific location and extracts hotel names and prices using SeleniumBase's CDP Mode.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, locale=\"en\", ad_block=True) as sb:\n    url = \"https://www.bestwestern.com/en_US.html\"\n    sb.activate_cdp_mode(url)\n    sb.sleep(2.5)\n    sb.cdp.click_if_visible(\".onetrust-close-btn-handler\")\n    sb.sleep(1)\n    sb.cdp.click(\"input#destination-input\")\n    sb.sleep(2)\n    location = \"Palm Springs, CA, USA\"\n    sb.cdp.press_keys(\"input#destination-input\", location)\n    sb.sleep(1)\n    sb.cdp.click(\"ul#google-suggestions li\")\n    sb.sleep(1)\n    sb.cdp.click(\"button#btn-modify-stay-update\")\n    sb.sleep(4)\n    sb.cdp.click(\"label#available-label\")\n    sb.sleep(2.5)\n    print(\"Best Western Hotels in %s:\" % location)\n    summary_details = sb.cdp.get_text(\"#summary-details-column\")\n    dates = summary_details.split(\"DESTINATION\")[-1]\n    dates = dates.split(\" CHECK-OUT\")[0].strip() + \" CHECK-OUT\"\n    dates = dates.replace(\"  \", \" \")\n    print(\"(Dates: %s)\" % dates)\n    flip_cards = sb.cdp.select_all(\".flipCard\")\n    for i, flip_card in enumerate(flip_cards):\n        hotel = flip_card.query_selector(\".hotelName\")\n        price = flip_card.query_selector(\".priceSection\")\n        if hotel and price:\n            print(\"* %s: %s => %s\" % (\n                i + 1, hotel.text.strip(), price.text.strip())\n            )\n```\n\n----------------------------------------\n\nTITLE: SeleniumBase Element Click\nDESCRIPTION: Simplified and more reliable element clicking in SeleniumBase with built-in waits\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/migration/raw_selenium/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.click(\"button\")\n```\n\n----------------------------------------\n\nTITLE: Test Case Structure for MFA Login Testing in Selenium\nDESCRIPTION: A markdown table outlining test steps for MFA login with expectations. The test navigates to seleniumbase.io/realworld/login, performs authentication, interacts with page elements, captures a screenshot, and verifies sign out functionality.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/test_mfa_login.TestMFALogin.test_mfa_login.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Step Description | Expected Result |\n| - | ---------------- | --------------- |\n| 1 | Open https://seleniumbase.io/realworld/login <br /> Enter credentials and Sign In. | Sign In was successful. |\n| 2 | Click the ``This Page`` button. <br /> Save a screenshot to the logs. | |\n| 3 | Click to Sign Out | Sign Out was successful. |\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple HTML Elements Using assert_elements_present in SeleniumBase\nDESCRIPTION: Verifies that multiple elements are present in the HTML structure of a webpage using the assert_elements_present method. This checks for the existence of head, style, and script tags in the page source.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/test_assert_elements.ListAssertTests.test_assert_list_of_elements.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.assert_elements_present(\"head\", \"style\", \"script\")\n```\n\n----------------------------------------\n\nTITLE: Asserting Text Visibility with Timeouts in Python using SeleniumBase\nDESCRIPTION: Shows how to assert the visibility of text within elements on a page using SeleniumBase. It includes examples with and without timeout specifications.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nself.assert_text(\"Make it so!\", \"div#trek div.picard div.quotes\")\nself.assert_text(\"Tea. Earl Grey. Hot.\", \"div#trek div.picard div.quotes\", timeout=3)\n```\n\n----------------------------------------\n\nTITLE: Testing XKCD Logo Visual Layout Changes in Python using SeleniumBase\nDESCRIPTION: Test case that checks for visual changes in the XKCD website logo. The test first captures a baseline screenshot, modifies the logo's attributes, then compares against the baseline to detect layout changes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/case_plans/test_layout_fail.VisualLayoutFailureTests.test_xkcd_logo_change.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest_xkcd_logo_change\n```\n\nLANGUAGE: python\nCODE:\n```\ncheck_window(baseline=True)\n```\n\nLANGUAGE: python\nCODE:\n```\nset_attribute()\n```\n\nLANGUAGE: python\nCODE:\n```\ncheck_window(level=3)\n```\n\n----------------------------------------\n\nTITLE: Defining Shadow DOM CSS Selectors in SeleniumBase\nDESCRIPTION: Examples of CSS selectors that pierce through Shadow DOM using SeleniumBase's custom ::shadow syntax. Each example demonstrates how to traverse through shadow-root elements to reach elements inside the Shadow DOM tree.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/shadow_dom.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncss_1 = \"downloads-manager::shadow #no-downloads\"\n\ncss_2 = \"downloads-manager::shadow #downloadsList downloads-item::shadow #file-link\"\n\ncss_3 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow cr-icon-button\"\n\ncss_4 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow #searchInput\"\n\ncss_5 = \"downloads-manager::shadow downloads-toolbar::shadow cr-toolbar::shadow cr-toolbar-search-field::shadow #clearSearch\"\n```\n\n----------------------------------------\n\nTITLE: Testing Python.org Layout Changes with SeleniumBase\nDESCRIPTION: This test opens the Python.org website, creates a baseline screenshot, then removes the Donate button and performs a comparison to detect the layout change. The test is expected to fail when the element is removed, generating a side-by-side comparison HTML file in the logs folder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/case_plans/test_layout_fail.VisualLayout_FixtureTests.test_python_home_change.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest_python_home_change\n```\n\n----------------------------------------\n\nTITLE: Bypassing Kasada Protection on Hyatt Website with CDP Mode in Python\nDESCRIPTION: This example shows how to automate interactions with the Hyatt website, which uses Kasada protection. The script searches for hotels in a specific location and retrieves pricing information using SeleniumBase's CDP Mode with undetected Chrome.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/cdp_mode/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, locale=\"en\", ad_block=True) as sb:\n    url = \"https://www.hyatt.com/\"\n    sb.activate_cdp_mode(url)\n    sb.sleep(2.5)\n    sb.cdp.click_if_visible('button[aria-label=\"Close\"]')\n    sb.sleep(1)\n    sb.cdp.click('span:contains(\"Explore\")')\n    sb.sleep(1)\n    sb.cdp.click('a:contains(\"Hotels & Resorts\")')\n    sb.sleep(3)\n    location = \"Anaheim, CA, USA\"\n    sb.cdp.press_keys(\"input#searchbox\", location)\n    sb.sleep(2)\n    sb.cdp.click(\"div#suggestion-list ul li a\")\n    sb.sleep(1)\n    sb.cdp.click('div.hotel-card-footer button')\n    sb.sleep(1)\n    sb.cdp.click('button[data-locator=\"find-hotels\"]')\n    sb.sleep(5)\n    card_info = 'div[data-booking-status=\"BOOKABLE\"] [class*=\"HotelCard_info\"]'\n    hotels = sb.cdp.select_all(card_info)\n    print(\"Hyatt Hotels in %s:\" % location)\n    print(\"(\" + sb.cdp.get_text(\"ul.b-color_text-white\") + \")\")\n    if len(hotels) == 0:\n        print(\"No availability over the selected dates!\")\n    for hotel in hotels:\n        info = hotel.text.strip()\n        if \"Avg/Night\" in info and not info.startswith(\"Rates from\"):\n            name = info.split(\"  (\")[0].split(\" + \")[0].split(\" Award Cat\")[0]\n            price = \"?\"\n            if \"Rates from : \" in info:\n                price = info.split(\"Rates from : \")[1].split(\" Avg/Night\")[0]\n            print(\"* %s => %s\" % (name, price))\n```\n\n----------------------------------------\n\nTITLE: Basic Login and Cart Test in Python using SeleniumBase\nDESCRIPTION: Test case verifying basic login and cart functionality on saucedemo.com\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_summary.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbasic_test.py::MyTestClass::test_basics\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Chart Presentation in SeleniumBase\nDESCRIPTION: Advanced example showing how to create a presentation containing multiple chart types (pie, bar, column, and line) with custom theming.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass MyChartMakerClass(BaseCase):\n    def test_chart_maker_presentation(self):\n        self.create_presentation(theme=\"sky\")\n\n        self.create_pie_chart(title=\"Automated Tests\")\n        self.add_data_point(\"Passed\", 7, color=\"#95d96f\")\n        self.add_data_point(\"Untested\", 2, color=\"#eaeaea\")\n        self.add_data_point(\"Failed\", 1, color=\"#f1888f\")\n        self.add_slide(\"<p>Pie Chart</p>\" + self.extract_chart())\n\n        self.create_bar_chart(title=\"Language\")\n        self.add_data_point(\"Python\", 33, color=\"Orange\")\n        self.add_data_point(\"JavaScript\", 27, color=\"Teal\")\n        self.add_data_point(\"HTML + CSS\", 21, color=\"Purple\")\n        self.add_slide(\"<p>Bar Chart</p>\" + self.extract_chart())\n\n        self.create_column_chart(title=\"Colors\")\n        self.add_data_point(\"Red\", 10, color=\"Red\")\n        self.add_data_point(\"Green\", 25, color=\"Green\")\n        self.add_data_point(\"Blue\", 15, color=\"Blue\")\n        self.add_slide(\"<p>Column Chart</p>\" + self.extract_chart())\n\n        self.create_line_chart(title=\"Last Week's Data\")\n        self.add_data_point(\"Sun\", 5)\n        self.add_data_point(\"Mon\", 10)\n        self.add_data_point(\"Tue\", 20)\n        self.add_data_point(\"Wed\", 40)\n        self.add_data_point(\"Thu\", 80)\n        self.add_data_point(\"Fri\", 65)\n        self.add_data_point(\"Sat\", 50)\n        self.add_slide(\"<p>Line Chart</p>\" + self.extract_chart())\n\n        self.begin_presentation(filename=\"chart_presentation.html\")\n```\n\n----------------------------------------\n\nTITLE: Raw Selenium Explicit Wait\nDESCRIPTION: Example of explicit wait implementation in raw Selenium with WebDriverWait\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/migration/raw_selenium/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nWebDriverWait(driver, 10).until(EC.element_to_be_clickable(\"css selector\", \"button\")).click()\n```\n\n----------------------------------------\n\nTITLE: Performing Visual Layout Test with Selenium and Applitools in Python\nDESCRIPTION: This code snippet outlines the steps for a visual layout test using Selenium and Applitools. It involves opening a specific URL, using check_window() method for baseline and comparison, and interacting with page elements to trigger visual changes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/case_plans/test_layout_fail.VisualLayoutFailureTests.test_applitools_change.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Step 1: Open https://applitools.com/helloworld?diff1\n# Call check_window() with baseline=True\n\n# Step 2: Click the button that makes a hidden element visible\n# Call check_window() with level=3\n```\n\n----------------------------------------\n\nTITLE: Configure Behave Environment Setup\nDESCRIPTION: Required configuration for the features/environment.py file to set up SeleniumBase with Behave\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nfrom seleniumbase.behave import behave_sb\nbehave_sb.set_base_class(BaseCase)  # Accepts a BaseCase subclass\nfrom seleniumbase.behave.behave_sb import before_all  # noqa\nfrom seleniumbase.behave.behave_sb import before_feature  # noqa\nfrom seleniumbase.behave.behave_sb import before_scenario  # noqa\nfrom seleniumbase.behave.behave_sb import before_step  # noqa\nfrom seleniumbase.behave.behave_sb import after_step  # noqa\nfrom seleniumbase.behave.behave_sb import after_scenario  # noqa\nfrom seleniumbase.behave.behave_sb import after_feature  # noqa\nfrom seleniumbase.behave.behave_sb import after_all  # noqa\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple Visible Elements Using assert_elements with Individual Arguments\nDESCRIPTION: Verifies that multiple elements are visible on the page using the assert_elements method with individual arguments. This checks that h1, h2, and h3 elements are displayed on the page.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/test_assert_elements.ListAssertTests.test_assert_list_of_elements.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.assert_elements(\"h1\", \"h2\", \"h3\")\n```\n\n----------------------------------------\n\nTITLE: General Assertions in Python using SeleniumBase\nDESCRIPTION: Demonstrates how to make general assertions in SeleniumBase tests, including asserting boolean conditions and equality between variables.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nself.assert_true(myvar1 == something)\n\nself.assert_equal(var1, var2)\n```\n\n----------------------------------------\n\nTITLE: Basic UC Mode Example with Driver Manager\nDESCRIPTION: A simple example demonstrating how to use UC Mode with the Driver manager to bypass CAPTCHA on GitLab's sign-in page. The script uses uc_open_with_reconnect and uc_gui_click_captcha methods.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import Driver\n\ndriver = Driver(uc=True)\nurl = \"https://gitlab.com/users/sign_in\"\ndriver.uc_open_with_reconnect(url, 4)\ndriver.uc_gui_click_captcha()\ndriver.quit()\n```\n\n----------------------------------------\n\nTITLE: Creating Area Chart in SeleniumBase with HighCharts\nDESCRIPTION: Method to create a JavaScript area chart using HighCharts. Supports customization of title, subtitle, data series, axis units, and display options. Can handle multiple charts through the chart_name parameter.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nself.create_area_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, zero=False, libs=True):\n```\n\n----------------------------------------\n\nTITLE: Switching to and from iframes in SeleniumBase\nDESCRIPTION: This snippet demonstrates how to switch to an iframe, perform actions inside it, and then switch back to the parent frame or default content.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/handling_iframes.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.switch_to_frame(\"iframe\")\n# ... Now perform actions inside the iframe\nself.switch_to_parent_frame()  # Exit the current iframe\n```\n\nLANGUAGE: python\nCODE:\n```\nself.switch_to_frame('iframe[name=\"frame1\"]')\nself.switch_to_frame('iframe[name=\"frame2\"]')\n# ... Now perform actions inside the inner iframe\nself.switch_to_default_content()  # Back to the main page\n```\n\n----------------------------------------\n\nTITLE: Asserting Multiple Visible Elements Using assert_elements with a List Argument\nDESCRIPTION: Verifies that multiple elements are visible on the page using the assert_elements method with a list argument. This checks visibility of elements with IDs myDropdown, myButton, and svgRect.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/test_assert_elements.ListAssertTests.test_assert_list_of_elements.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.assert_elements([\"#myDropdown\", \"#myButton\", \"#svgRect\"])\n```\n\n----------------------------------------\n\nTITLE: Running Test Suite with Parallel Processing\nDESCRIPTION: Execute a test suite using 8 parallel processes\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py -n=8\n```\n\n----------------------------------------\n\nTITLE: Testing check_window() with Different Layout Changes in SeleniumBase\nDESCRIPTION: This test verifies that check_window() correctly handles layout changes on a web page. It shows that text changes don't trigger failures at any level, while structural changes (like showing hidden elements) are detected only at level 3, which is the strictest check level.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/case_plans/layout_test.VisualLayoutTests.test_applitools_layout_change.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntest_applitools_layout_change\n```\n\n----------------------------------------\n\nTITLE: Verifying Safari WebDriver Installation with Python\nDESCRIPTION: Python commands to verify that Safari WebDriver is correctly installed and accessible. This example instantiates a Safari browser and navigates to the Safari website.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/verify_webdriver.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from seleniumbase import get_driver\n>>> driver = get_driver(\"safari\", headless=False)\n>>> driver.get(\"https://www.apple.com/safari\")\n>>> driver.quit()\n>>> exit()\n```\n\n----------------------------------------\n\nTITLE: Element Assertion Tests in Python using SeleniumBase\nDESCRIPTION: Test case demonstrating various element assertion methods including checking multiple elements simultaneously\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_summary.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntest_assert_elements.py::ListAssertTests::test_assert_list_of_elements\n```\n\n----------------------------------------\n\nTITLE: Remote Selenium Grid Configuration\nDESCRIPTION: Commands for connecting to different Selenium Grid providers like BrowserStack and Sauce Labs for remote test execution.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --server=USERNAME:KEY@hub.browserstack.com --port=80\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --server=USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port=443 --protocol=https\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --protocol=https --server=IP_ADDRESS --port=PORT\n```\n\n----------------------------------------\n\nTITLE: Column Chart API Documentation in SeleniumBase ChartMaker\nDESCRIPTION: API documentation for the create_column_chart method which explains its parameters including chart name, title, subtitle, data series configuration, and display options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nself.create_column_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True):\n\"\"\" Creates a JavaScript column chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n    unit - The description label given to the chart's y-axis values.\n    libs - The option to include Chart libraries (JS and CSS files).\n           Should be set to True (default) for the first time creating\n           a chart on a web page. If creating multiple charts on the\n           same web page, you won't need to re-import the libraries\n           when creating additional charts.\n    labels - If True, displays labels on the chart for data points.\n    legend - If True, displays the data point legend on the chart.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Testing XKCD Layout Changes with SeleniumBase Visual Testing\nDESCRIPTION: This test procedure demonstrates visual testing with SeleniumBase by comparing baseline and modified versions of an XKCD comic page. The test modifies the logo using set_attribute() and then uses check_window() with level=0 to detect but not fail on the change.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/case_plans/xkcd_visual_test.VisualLayoutTests.test_xkcd_layout_change.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Step Description | Expected Result |\n| - | ---------------- | --------------- |\n| 1 | Open https://xkcd.com/554/. <br /> Call ``check_window()`` with ``baseline=True``. | |\n| 2 | Resize the logo using ``set_attribute()``. <br /> Call ``check_window()`` with ``level=0``. | The test detects that the logo has changed. The test does not fail because the check was set to ``level=0`` (print-only). <br /> A ``side_by_side_NAME.html`` file appears in the specific ``latest_logs/`` folder of the test. |\n```\n\n----------------------------------------\n\nTITLE: Swag Labs Feature File Example\nDESCRIPTION: Gherkin feature file demonstrating a complete shopping flow test for Swag Labs\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: SeleniumBase scenarios for the Swag Labs App\n\n  Background:\n    Given Open the Swag Labs Login Page\n\n  Scenario: User can order a backpack from the store\n    When Login to Swag Labs with standard_user\n    Then Verify that the current user is logged in\n    And Save price of \"Backpack\" to <item_price>\n    When Add \"Backpack\" to Cart\n    Then Verify shopping cart badge shows 1 item(s)\n    When Click on shopping cart icon\n    And Click Checkout\n    And Enter checkout info: First, Last, 12345\n    And Click Continue\n    Then Verify 1 \"Backpack\"(s) in cart\n    And Verify cost of \"Backpack\" is <item_price>\n    And Verify item total is $29.99\n    And Verify tax amount is $2.40\n    And Verify total cost is $32.39\n    When Click Finish\n    Then Verify order complete\n    When Logout from Swag Labs\n    Then Verify on Login page\n```\n\n----------------------------------------\n\nTITLE: Verifying Geckodriver (Firefox) Installation with Python\nDESCRIPTION: Python commands to verify that Geckodriver is correctly installed and accessible. This example instantiates a Firefox browser and navigates to the Firefox website.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/verify_webdriver.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from seleniumbase import get_driver\n>>> driver = get_driver(\"firefox\", headless=False)\n>>> driver.get(\"https://www.mozilla.org/firefox\")\n>>> driver.quit()\n>>> exit()\n```\n\n----------------------------------------\n\nTITLE: Using Default Get Method in UC Mode\nDESCRIPTION: Example of using the default_get() method for faster page loads when detection bypass isn't needed.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndriver.default_get(url)  # Faster, but Selenium can be detected\n```\n\n----------------------------------------\n\nTITLE: Launching SeleniumBase Commander using CLI\nDESCRIPTION: This snippet shows how to start the SeleniumBase Commander Desktop App using the command line interface. It demonstrates the use of 'sbase gui' command.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/commander.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsbase gui\n* Starting the SeleniumBase Commander Desktop App...\n```\n\n----------------------------------------\n\nTITLE: Combined Form with Input Field and Buttons in SeleniumBase\nDESCRIPTION: Example showing how to create a form that includes both text input and option buttons, returning both the entered text and the selected button choice.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmessage = \"Type your name and choose a language:\"\nbuttons = [\"Python\", \"JavaScript\"]\ntext, choice = self.get_jqc_form_inputs(message, buttons)\nprint(\"Your name is: %s\" % text)\nprint(\"You picked %s!\" % choice)\n```\n\n----------------------------------------\n\nTITLE: SeleniumBase UC Mode Methods Implementation\nDESCRIPTION: Collection of UC Mode methods for browser automation, including URL handling, connection management, clicking, key presses, and CAPTCHA handling. These methods are designed to bypass anti-bot detection systems and handle CAPTCHAs effectively.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndriver.uc_open(url)\n\ndriver.uc_open_with_tab(url)\n\ndriver.uc_open_with_reconnect(url, reconnect_time=None)\n\ndriver.uc_open_with_disconnect(url, timeout=None)\n\ndriver.reconnect(timeout)\n\ndriver.disconnect()\n\ndriver.connect()\n\ndriver.uc_click(\n    selector, by=\"css selector\",\n    timeout=settings.SMALL_TIMEOUT, reconnect_time=None)\n\ndriver.uc_gui_press_key(key)\n\ndriver.uc_gui_press_keys(keys)\n\ndriver.uc_gui_write(text)\n\ndriver.uc_gui_click_x_y(x, y, timeframe=0.25)\n\ndriver.uc_gui_click_captcha(frame=\"iframe\", retry=False, blind=False)\n# driver.uc_gui_click_cf(frame=\"iframe\", retry=False, blind=False)\n# driver.uc_gui_click_rc(frame=\"iframe\", retry=False, blind=False)\n\ndriver.uc_gui_handle_captcha(frame=\"iframe\")\n# driver.uc_gui_handle_cf(frame=\"iframe\")\n```\n\n----------------------------------------\n\nTITLE: Detecting Element Resizing with Visual Testing in Python\nDESCRIPTION: Test case showing how to detect when an element's dimensions have changed. This example opens an xkcd comic page, sets a baseline, changes the height and width attributes of the logo, and then compares against the baseline to detect the changes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass VisualLayoutTest(BaseCase):\n    def test_xkcd_layout_change_failure(self):\n        self.open('https://xkcd.com/554/')\n        print('\\nCreating baseline in \"visual_baseline\" folder.')\n        self.check_window(name=\"xkcd_554\", baseline=True)\n        # Change height: (83 -> 130) , Change width: (185 -> 120)\n        self.set_attribute('[alt=\"xkcd.com logo\"]', \"height\", \"130\")\n        self.set_attribute('[alt=\"xkcd.com logo\"]', \"width\", \"120\")\n        self.check_window(name=\"xkcd_554\", level=3)\n```\n\n----------------------------------------\n\nTITLE: UC Mode with Incognito for Complete Bot Detection Bypass\nDESCRIPTION: Example demonstrating how incognito mode combined with UC Mode can bypass advanced bot detection on pixelscan.net. The script removes chat widgets and highlights the success elements.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, incognito=True, test=True) as sb:\n    sb.driver.uc_open_with_reconnect(\"https://pixelscan.net/\", 10)\n    sb.remove_elements(\"jdiv\")  # Remove chat widgets\n    sb.highlight(\"span.text-success\", loops=8)\n    sb.highlight(\".bot-detection-context\", loops=10, scroll=False)\n    sb.sleep(2)\n```\n\n----------------------------------------\n\nTITLE: Adding Data Points to SeleniumBase Charts\nDESCRIPTION: Method to add individual data points to an existing chart. Allows specification of label, value, and color for each point. Supports multiple charts through chart_name parameter.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nself.add_data_point(label, value, color=None, chart_name=None):\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Google Search Tour\nDESCRIPTION: Python implementation of a Google search tour using SeleniumBase's tour functionality. Creates two tours with different themes and demonstrates search interaction.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/tour_examples/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__, \"--uc\")\n\nclass MyTourClass(BaseCase):\n\n    def test_google_tour(self):\n        if not self.undetectable:\n            self.get_new_driver(undetectable=True)\n        self.open('https://google.com/ncr')\n        self.wait_for_element('input[title=\"Search\"]')\n        self.hide_elements(\"iframe\")\n\n        self.create_tour(theme=\"dark\")\n        self.add_tour_step(\"Welcome to Google!\", title=\"SeleniumBase Tours\")\n        self.add_tour_step(\"Type in your query here.\", '[title=\"Search\"]')\n        self.play_tour()\n\n        self.highlight_type('input[title=\"Search\"]', \"Google\")\n        self.wait_for_element('[role=\"listbox\"]')  # Wait for autocomplete\n\n        self.create_tour(theme=\"light\")\n        self.add_tour_step(\"Then click to search.\", '[value=\"Google Search\"]')\n        self.add_tour_step(\"Or press [ENTER] after entry.\", '[title=\"Search\"]')\n        self.play_tour()\n```\n\n----------------------------------------\n\nTITLE: RealWorld App Feature File Example\nDESCRIPTION: Gherkin feature file showing login/logout flow test for RealWorld application\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: SeleniumBase scenarios for the RealWorld App\n\n  Scenario: Verify RealWorld App (log in / sign out)\n    Given Open \"seleniumbase.io/realworld/login\"\n    And Clear Session Storage\n    When Type \"demo_user\" into \"#username\"\n    And Type \"secret_pass\" into \"#password\"\n    And Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"\n    Then Assert text \"Welcome!\" in \"h1\"\n    And Highlight element \"img#image1\"\n    And Click 'a:contains(\"This Page\")'\n    And Save screenshot to logs\n    When Click link \"Sign out\"\n    Then Assert element 'a:contains(\"Sign in\")'\n    And Assert text \"You have been signed out!\"\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Code via Command Line in SeleniumBase\nDESCRIPTION: Demonstrates how to specify a language locale code using the command-line when running tests with pytest. This allows customization of web pages on supported websites.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/locale_codes.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest --locale=CODE  # Example: --locale=ru\n```\n\n----------------------------------------\n\nTITLE: Launching Behave GUI\nDESCRIPTION: Command to start the SeleniumBase Behave Commander GUI application\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsbase behave-gui\n* Starting the SeleniumBase Behave Commander GUI App...\n```\n\n----------------------------------------\n\nTITLE: Setting Locale Code in Python with SeleniumBase\nDESCRIPTION: Shows how to set the locale code directly in Python when using the SB() or Driver() formats in SeleniumBase. This approach allows for programmatic control of the browser's locale.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/locale_codes.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlocale_code=\"CODE\"  # Example: SB(locale_code=\"en\")\n```\n\n----------------------------------------\n\nTITLE: Recording Example with Wikipedia\nDESCRIPTION: Complete example of recording a test that visits Wikipedia. Shows the entire workflow including the breakpoint pause and continuation steps that result in a saved recording.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsbase mkrec new_test.py --url=wikipedia.org\n\n* RECORDING initialized: new_test.py\n\npytest new_test.py --rec -q -s --url=wikipedia.org\n\n>>>>>>>>>>>>>>>>>> PDB set_trace >>>>>>>>>>>>>>>>>\n\n> PATH_TO_YOUR_CURRENT_DIRECTORY/new_test.py(9)\n   .\n   5         def test_recording(self):\n   6             if self.recorder_ext:\n   7                 # When done recording actions,\n   8                 # type \"c\", and press [Enter].\n   9  ->             import pdb; pdb.set_trace()\n return None\n(Pdb+) c\n\n>>>>>>>>>>>>>>>>>> PDB continue >>>>>>>>>>>>>>>>>>\n\n>>> RECORDING SAVED as: recordings/new_test_rec.py\n**************************************************\n\n*** RECORDING COPIED to: new_test.py\n```\n\n----------------------------------------\n\nTITLE: Running Behave Feature for RealWorld App with SeleniumBase\nDESCRIPTION: Example of running a Behave feature file for the RealWorld app using SeleniumBase with dashboard and timing options. The example shows a complete test scenario with login/logout functionality.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> cd examples/behave_bdd/\n> behave features/realworld.feature -T -D dashboard -k\n\nDashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n********************************************************************************\nFeature: SeleniumBase scenarios for the RealWorld App # features/realworld.feature:1\n\n  Scenario: Verify RealWorld App (log in / sign out)  # features/realworld.feature:3\n    Given Open \"seleniumbase.io/realworld/login\"      # ../../sbase/steps.py:10\n    And Clear Session Storage                         # ../../sbase/steps.py:669\n    When Type \"demo_user\" into \"#username\"            # ../../sbase/steps.py:40\n    And Type \"secret_pass\" into \"#password\"           # ../../sbase/steps.py:40\n    And Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"    # ../../sbase/steps.py:322\n    Then Assert exact text \"Welcome!\" in \"h1\"         # ../../sbase/steps.py:157\n    And Highlight \"img#image1\"                        # ../../sbase/steps.py:184\n    And Click 'a:contains(\"This Page\")'               # ../../sbase/steps.py:27\n    And Save screenshot to logs                       # ../../sbase/steps.py:239\n    When Click link \"Sign out\"                        # ../../sbase/steps.py:195\n    Then Assert element 'a:contains(\"Sign in\")'       # ../../sbase/steps.py:120\n    And Assert text \"You have been signed out!\"       # ../../sbase/steps.py:145\n   ✅ Scenario Passed!\n\n- Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n--- LogPath: /Users/michael/github/SeleniumBase/examples/behave_bdd/latest_logs/\n==================================================================================\n1 feature passed, 0 failed, 0 skipped\n1 scenario passed, 0 failed, 0 skipped\n12 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m4.682s\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements with Element Visibility in Python using SeleniumBase\nDESCRIPTION: Shows how to use conditional statements with SeleniumBase methods to check for element visibility and presence on a page.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif self.is_element_visible('div#warning'):\n    print(\"Red Alert: Something bad might be happening!\")\n\nif self.is_element_present('div#top_secret img.tracking_cookie'):\n    self.contact_cookie_monster()  # Not a real SeleniumBase method\nelse:\n    current_url = self.get_current_url()\n    self.contact_the_nsa(url=current_url, message=\"Dark Zone Found\")  # Not a real SeleniumBase method\n```\n\n----------------------------------------\n\nTITLE: Adding Data Series to SeleniumBase Charts\nDESCRIPTION: Method to add new data series to an existing chart, enabling multi-series chart creation. Allows specification of series name and chart selection.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nself.add_series_to_chart(self, data_name=None, chart_name=None):\n```\n\n----------------------------------------\n\nTITLE: Creating Sport Selection Dialog Box in SeleniumBase\nDESCRIPTION: Example of creating a dialog box with multiple sport options as buttons, where the user's selection determines the next webpage to open. Shows how to customize button colors and handle user choices.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.open(\"https://xkcd.com/1920/\")\nskip_button = [\"SKIP\", \"red\"]  # Can be a [text, color] list or tuple.\nbuttons = [\"Fencing\", \"Football\", \"Metaball\", \"Go/Chess\", skip_button]\nmessage = \"Choose a sport:\"\nchoice = self.get_jqc_button_input(message, buttons)\nif choice == \"Fencing\":\n    self.open(\"https://xkcd.com/1424/\")\n```\n\n----------------------------------------\n\nTITLE: UC Mode Example with SB Manager\nDESCRIPTION: A basic example showing UC Mode with the SB manager, which has more functionality than the Driver format. This approach works on headless Linux machines by including a special virtual display for PyAutoGUI actions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True) as sb:\n    url = \"https://gitlab.com/users/sign_in\"\n    sb.uc_open_with_reconnect(url, 4)\n    sb.uc_gui_click_captcha()\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase convert on exported Katalon script\nDESCRIPTION: Command to convert a Katalon exported Python test file into a clean SeleniumBase script. The converter creates a new file with '_SB' added to the original file name.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/katalon/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase convert MY_TEST.py\n```\n\n----------------------------------------\n\nTITLE: Converting Katalon Export Command\nDESCRIPTION: Command to convert a Katalon-exported Python test file into a SeleniumBase script\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_ide/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase convert MY_TEST.py\n```\n\n----------------------------------------\n\nTITLE: Detailed Method Documentation for Dialog Boxes in SeleniumBase\nDESCRIPTION: Comprehensive documentation for all dialog box methods, including parameters, return values, and available options. Provides detailed information about themes, colors, and customization possibilities.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nself.get_jqc_button_input(message, buttons, options=None)\n\"\"\"\nPop up a jquery-confirm box and return the text of the button clicked.\nIf running in headless mode, the last button text is returned.\n@Params\nmessage: The message to display in the jquery-confirm dialog.\nbuttons: A list of tuples for text and color.\n    Example: [(\"Yes!\", \"green\"), (\"No!\", \"red\")]\n    Available colors: blue, green, red, orange, purple, default, dark.\n    A simple text string also works: \"My Button\". (Uses default color.)\noptions: A list of tuples for options to set.\n    Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")]\n    Available theme options: bootstrap, modern, material, supervan,\n                             light, dark, and seamless.\n    Available colors: (For the BORDER color, NOT the button color.)\n        \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\".\n    Example option for changing the border color: (\"color\", \"default\")\n    Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\".\n\"\"\"\n\nself.get_jqc_text_input(message, button=None, options=None)\n\"\"\"\nPop up a jquery-confirm box and return the text submitted by the input.\nIf running in headless mode, the text returned is \"\" by default.\n@Params\nmessage: The message to display in the jquery-confirm dialog.\nbutton: A 2-item list or tuple for text and color. Or just the text.\n    Example: [\"Submit\", \"blue\"] -> (default button if not specified)\n    Available colors: blue, green, red, orange, purple, default, dark.\n    A simple text string also works: \"My Button\". (Uses default color.)\noptions: A list of tuples for options to set.\n    Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")]\n    Available theme options: bootstrap, modern, material, supervan,\n                             light, dark, and seamless.\n    Available colors: (For the BORDER color, NOT the button color.)\n        \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\".\n    Example option for changing the border color: (\"color\", \"default\")\n    Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\".\n\"\"\"\n\nself.get_jqc_form_inputs(message, buttons, options=None)\n\"\"\"\nPop up a jquery-confirm box and return the input/button texts as tuple.\nIf running in headless mode, returns the (\"\", buttons[-1][0]) tuple.\n@Params\nmessage: The message to display in the jquery-confirm dialog.\nbuttons: A list of tuples for text and color.\n    Example: [(\"Yes!\", \"green\"), (\"No!\", \"red\")]\n    Available colors: blue, green, red, orange, purple, default, dark.\n    A simple text string also works: \"My Button\". (Uses default color.)\noptions: A list of tuples for options to set.\n    Example: [(\"theme\", \"bootstrap\"), (\"width\", \"450px\")]\n    Available theme options: bootstrap, modern, material, supervan,\n                             light, dark, and seamless.\n    Available colors: (For the BORDER color, NOT the button color.)\n        \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\".\n    Example option for changing the border color: (\"color\", \"default\")\n    Width can be set using percent or pixels. Eg: \"36.0%\", \"450px\".\n\"\"\"\n\nself.set_jqc_theme(theme, color=None, width=None)\n\"\"\" Sets the default jquery-confirm theme and width (optional).\nAvailable themes: \"bootstrap\", \"modern\", \"material\", \"supervan\",\n                  \"light\", \"dark\", and \"seamless\".\nAvailable colors: (This sets the BORDER color, NOT the button color.)\n    \"blue\", \"default\", \"green\", \"red\", \"purple\", \"orange\", \"dark\".\nWidth can be set using percent or pixels. Eg: \"36.0%\", \"450px\".\n\"\"\"\n\nself.reset_jqc_theme()\n\"\"\" Resets the jqc theme settings to factory defaults. \"\"\"\n\nself.activate_jquery_confirm()  # Automatic for jqc methods\n\"\"\" See https://craftpip.github.io/jquery-confirm/ for usage. \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Pytest HTML Reports\nDESCRIPTION: Demonstrates how to generate HTML reports for pytest test runs, including options for combining with the SeleniumBase Dashboard and creating advanced HTML reports.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py --html=report.html\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py --dashboard --html=report.html\n```\n\n----------------------------------------\n\nTITLE: Running Tests with SeleniumBase Dashboard in Pytest\nDESCRIPTION: This command runs tests with the dashboard option enabled, which generates a dashboard.html file that updates automatically as tests run. The --rs flag is for report summary and --headless runs tests without opening browser windows.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest --dashboard --rs --headless\n```\n\n----------------------------------------\n\nTITLE: Multiple Visual Comparison Levels in Python\nDESCRIPTION: Example showing various levels of visual comparison with check_window() method. Demonstrates different strictness levels (0-3) and using the baseline parameter to set a reference point for comparison later in the same test.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    self.check_window(name=\"testing\", level=0)\n    self.check_window(name=\"xkcd_home\", level=1)\n    self.check_window(name=\"github_page\", level=2)\n    self.check_window(name=\"wikipedia_page\", level=3)\n\n    self.check_window(name=\"helloworld\", baseline=True)\n    ### Do something that may change the web page\n    self.check_window(name=\"helloworld\", level=3)\n```\n\n----------------------------------------\n\nTITLE: Extracting HTML from SeleniumBase Charts\nDESCRIPTION: Method to extract the HTML content from a generated chart. Useful for embedding charts in other contexts or further manipulation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nself.extract_chart(chart_name=None):\n```\n\n----------------------------------------\n\nTITLE: UC Mode Reconnection Examples\nDESCRIPTION: Demonstrates various ways to use uc_open_with_reconnect() and reconnect() methods with timeout settings.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nurl = \"https://gitlab.com/users/sign_in\"\ndriver.uc_open_with_reconnect(url, reconnect_time=3)\ndriver.uc_open_with_reconnect(url, 3)\n\ndriver.reconnect(5)\ndriver.reconnect(timeout=5)\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of check_window() Method in Python\nDESCRIPTION: Example usage of the check_window() method for visual regression testing with a specified comparison level. This creates or compares against a visual baseline with level 3 strictness (comparing HTML tags, attribute names, and attribute values).\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.check_window(name=\"first_test)\", level=3)\n```\n\n----------------------------------------\n\nTITLE: Activating pytest when a file is called directly with Python\nDESCRIPTION: Code that ensures pytest is activated when a Python file is called directly with the python command instead of pytest.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBaseCase.main(__name__, __file__)\n```\n\n----------------------------------------\n\nTITLE: Enabling Safari's WebDriver on macOS\nDESCRIPTION: Command to enable Safari's WebDriver on macOS, which is required before running any Safari browser tests. Note that on upgrades from previous macOS versions, this command may need to be run with sudo privileges.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/using_safari_driver.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsafaridriver --enable\n```\n\n----------------------------------------\n\nTITLE: Testing Wikipedia in Japanese using SeleniumBase\nDESCRIPTION: Example test case written in Japanese that navigates Wikipedia's Japanese site and performs searches. Shows SeleniumBase's Japanese translation API implementation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/translations/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Japanese Translation\nfrom seleniumbase.translate.japanese import セレニウムテストケース\n\nclass 私のテストクラス(セレニウムテストケース):\n    def test_例1(self):\n        self.を開く(\"https://ja.wikipedia.org/wiki/\")\n        self.テキストを確認する(\"ウィキペディア\")\n        self.要素を確認する('[title*=\"ウィキペディアへようこそ\"]')\n        self.JS入力('input[name=\"search\"]', \"アニメ\")\n        self.クリックして(\"#searchform button\")\n        self.テキストを確認する(\"アニメ\", \"#firstHeading\")\n        self.JS入力('input[name=\"search\"]', \"寿司\")\n        self.クリックして(\"#searchform button\")\n        self.テキストを確認する(\"寿司\", \"#firstHeading\")\n        self.要素を確認する('img[src*=\"Various_sushi\"]')\n```\n\n----------------------------------------\n\nTITLE: UC Mode for CAPTCHA After Click Navigation\nDESCRIPTION: Example showing how to handle CAPTCHA that appears after clicking to navigate to a sign-in screen. Uses ad_block feature and a specific delay pattern for reconnecting.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True, ad_block=True) as sb:\n    url = \"https://www.thaiticketmajor.com/concert/\"\n    sb.uc_open_with_reconnect(url, 6.111)\n    sb.uc_click(\"button.btn-signin\", 4.1)\n    sb.uc_gui_click_captcha()\n```\n\n----------------------------------------\n\nTITLE: Basic MasterQA Test Implementation in Python\nDESCRIPTION: A basic example showing how to implement MasterQA tests with SeleniumBase. The test opens various web pages and includes manual verification steps with custom questions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/masterqa/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import MasterQA\n\nclass MasterQATests(MasterQA):\n    def test_masterqa(self):\n        self.open(\"https://xkcd.com/1700/\")\n        self.verify(\"Do you see a webcomic?\")\n        self.open(\"https://seleniumbase.io/demo_page\")\n        self.highlight('table')\n        self.verify(\"Do you see elements in a table?\")\n        self.open(\"https://seleniumbase.io/devices/\")\n        self.highlight(\"div.mockup-wrapper\")\n        self.verify(\"Do you see 4 computer devices?\")\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements with CSS Selectors in Python using SeleniumBase\nDESCRIPTION: Demonstrates how to click elements using CSS selectors in SeleniumBase. It shows the recommended way to click elements and how to use partial selectors.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.click(\"a.my_class\")  # DO IT THIS WAY!\n\nself.click('a[name*=\"partial_name\"]')\n```\n\n----------------------------------------\n\nTITLE: Creating a Line Chart in SeleniumBase\nDESCRIPTION: Example code for creating a line chart showing time spent outside over the course of a week, with automatically advancing slides.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass MyChartMakerClass(BaseCase):\n    def test_chart_maker(self):\n        self.create_presentation()\n        self.create_line_chart(\n            title=\"Time Outside\", subtitle=\"Last Week\", unit=\"Minutes\")\n        self.add_data_point(\"Sun\", 5)\n        self.add_data_point(\"Mon\", 10)\n        self.add_data_point(\"Tue\", 20)\n        self.add_data_point(\"Wed\", 40)\n        self.add_data_point(\"Thu\", 80)\n        self.add_data_point(\"Fri\", 65)\n        self.add_data_point(\"Sat\", 50)\n        self.add_slide(\"<p>Line Chart</p>\" + self.extract_chart())\n        self.begin_presentation(filename=\"line_chart.html\", interval=8)\n```\n\n----------------------------------------\n\nTITLE: Multithreaded UC Mode with concurrent.futures\nDESCRIPTION: Example of implementing multithreaded UC Mode using concurrent.futures instead of pytest.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nfrom concurrent.futures import ThreadPoolExecutor\nfrom seleniumbase import Driver\nsys.argv.append(\"-n\")  # Tell SeleniumBase to do thread-locking as needed\n\ndef launch_driver(url):\n    driver = Driver(uc=True)\n    try:\n        driver.get(url=url)\n        driver.sleep(2)\n    finally:\n        driver.quit()\n\nurls = ['https://seleniumbase.io/demo_page' for i in range(3)]\nwith ThreadPoolExecutor(max_workers=len(urls)) as executor:\n    for url in urls:\n        executor.submit(launch_driver, url)\n```\n\n----------------------------------------\n\nTITLE: Adding a Python Breakpoint for Recording\nDESCRIPTION: Python code snippet showing how to insert a breakpoint in an existing test to pause execution for adding manual browser actions with the recorder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pdb; pdb.set_trace()\n```\n\n----------------------------------------\n\nTITLE: Running Demo Site Test\nDESCRIPTION: Execute a test for a demo site containing various HTML elements\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py\n```\n\n----------------------------------------\n\nTITLE: Running Dialog Box Example with Pytest\nDESCRIPTION: Command to run the dialog box example using pytest, which demonstrates the JqueryConfirm package integration.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/dialog_boxes\npytest test_dialog_boxes.py\n```\n\n----------------------------------------\n\nTITLE: Running Test in Headless Mode\nDESCRIPTION: Execute a test with invisible browser in headless mode\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py --headless\n```\n\n----------------------------------------\n\nTITLE: Mobile Device Testing Configuration\nDESCRIPTION: Commands for running tests using Chrome's mobile device emulator with configurable metrics and user agent settings.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests using Chrome's mobile device emulator (default settings)\npytest test_swag_labs.py --mobile\n\n# Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio\npytest test_swag_labs.py --mobile --metrics=\"411,731,3\"\n\n# Run mobile tests specifying the user agent\npytest test_swag_labs.py --mobile --agent=\"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase tests with Sauce Labs capabilities\nDESCRIPTION: This command shows how to execute a SeleniumBase test using Sauce Labs with specified capabilities.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --browser=remote --server=USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port=443 --protocol=https --cap_file=capabilities/sample_cap_file_SL.py\n```\n\n----------------------------------------\n\nTITLE: Running a Multi-Chart Presentation Example in SeleniumBase\nDESCRIPTION: Command to run an example presentation containing multiple charts from the SeleniumBase examples directory.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/chart_maker\npytest chart_presentation.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Swag Labs Step Definitions\nDESCRIPTION: Example step definitions for testing the Swag Labs application using SeleniumBase and Behave\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom behave import step\n\n@step(\"Open the Swag Labs Login Page\")\ndef go_to_swag_labs(context):\n    sb = context.sb\n    sb.open(\"https://www.saucedemo.com\")\n    sb.clear_local_storage()\n\n@step(\"Login to Swag Labs with {user}\")\ndef login_to_swag_labs(context, user):\n    sb = context.sb\n    sb.type(\"#user-name\", user)\n    sb.type(\"#password\", \"secret_sauce\\n\")\n\n@step(\"Verify that the current user is logged in\")\ndef verify_logged_in(context):\n    sb = context.sb\n    sb.assert_element(\"#header_container\")\n    sb.assert_element(\"#react-burger-menu-btn\")\n    sb.assert_element(\"#shopping_cart_container\")\n\n@step('Add \"{item}\" to cart')\ndef add_item_to_cart(context, item):\n    sb = context.sb\n    sb.click('div.inventory_item:contains(\"%s\") button[name*=\"add\"]' % item)\n```\n\n----------------------------------------\n\nTITLE: Running a Test with Recorder Mode\nDESCRIPTION: Command to run a test with the recorder enabled and standard output preserved for breakpoint interaction, allowing manual actions to be recorded into an existing test.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest TEST_NAME.py --rec -s\n```\n\n----------------------------------------\n\nTITLE: Upgrading WebDrivers using Homebrew on macOS\nDESCRIPTION: These commands show how to upgrade existing ChromeDriver and GeckoDriver installations using the Homebrew package manager on macOS systems.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/webdriver_installation.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew upgrade --cask chromedriver\n\nbrew upgrade geckodriver\n```\n\n----------------------------------------\n\nTITLE: Line Chart API Documentation in SeleniumBase ChartMaker\nDESCRIPTION: API documentation for the create_line_chart method which explains its parameters including chart name, title, subtitle, and data series configuration options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nself.create_line_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, zero=False, libs=True):\n\"\"\" Creates a JavaScript line chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript Link Method\nDESCRIPTION: Method signature for the SeleniumBase function to add a JavaScript link to a webpage.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.add_js_link(js_link)\n```\n\n----------------------------------------\n\nTITLE: Displaying SeleniumBase Charts in Browser\nDESCRIPTION: Method to display a generated chart in the browser window. Supports saving to file and includes optional auto-advancing functionality.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nself.display_chart(chart_name=None, filename=None):\n```\n\n----------------------------------------\n\nTITLE: Raw Selenium Element Finding\nDESCRIPTION: Example of basic element finding in raw Selenium that can lead to flaky tests due to lack of waits\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/migration/raw_selenium/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.driver.find_element(by=\"css selector\", value=\"button\").click()\n```\n\n----------------------------------------\n\nTITLE: Setting page content to iframe in SeleniumBase\nDESCRIPTION: This snippet demonstrates how to set the page content to an iframe, switch back to the parent content, or return to the default content. These are useful for special cases when interacting with iframes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/handling_iframes.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.set_content_to_frame(\"iframe\")\n```\n\nLANGUAGE: python\nCODE:\n```\nself.set_content_to_parent()\n```\n\nLANGUAGE: python\nCODE:\n```\nself.set_content_to_default()\n```\n\n----------------------------------------\n\nTITLE: Basic Shopping Cart Test Steps - Markdown Table\nDESCRIPTION: A structured test case in markdown table format that outlines steps for testing basic e-commerce functionality including login, adding/removing items from cart, and logout operations on saucedemo.com.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/basic_test.MyTestClass.test_basics.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Step Description | Expected Result |\n| - | ---------------- | --------------- |\n| 1 | Log in to https://www.saucedemo.com with ``standard_user``. | Login was successful. |\n| 2 | Click on the ``Backpack`` ``ADD TO CART`` button. | The button text changed to ``REMOVE``. |\n| 3 | Click on the cart icon. | The ``Backpack`` is seen in the cart. |\n| 4 | Remove the ``Backpack`` from the cart. | The ``Backpack`` is no longer in the cart. |\n| 5 | Log out from the website. | Logout was successful. |\n```\n\n----------------------------------------\n\nTITLE: Creating Presentations with mkpres\nDESCRIPTION: Generates presentation slides using SeleniumBase with support for multiple languages and customizable themes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsbase mkpres new_presentation.py --en\n```\n\n----------------------------------------\n\nTITLE: Custom Settings Configuration\nDESCRIPTION: Command to override default SeleniumBase settings using a custom settings file that can include timeout values, auth keys, and credentials.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npytest --settings-file=custom_settings.py\n```\n\n----------------------------------------\n\nTITLE: Running Mobile Tests with Various Configurations\nDESCRIPTION: These commands show different ways to run mobile tests, including using default settings, specifying device metrics, and setting a custom user agent.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mobile_testing.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests using Chrome's mobile device emulator (default settings)\npytest test_swag_labs.py --mobile\n\n# Run mobile tests specifying CSS Width, CSS Height, and Pixel-Ratio\npytest test_swag_labs.py --mobile --metrics=\"360,640,2\"\n\n# Run mobile tests specifying the user agent\npytest test_swag_labs.py --mobile --agent=\"Mozilla/5.0 (Linux; Android 9; Pixel 3 XL)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Binary Location in SeleniumBase\nDESCRIPTION: Command to specify the browser binary location. Can use a direct path or special options like 'cft' for Chrome for Testing or 'chs' for Chrome-Headless-Shell.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npytest --binary-location=PATH\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for SeleniumBase (Apple Silicon)\nDESCRIPTION: Commands to build a Docker image for Apple Silicon (M1/M2/M3/M4) Macs, including platform specification to prevent Chrome crashes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/docker/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport DOCKER_DEFAULT_PLATFORM=linux/amd64\n\ndocker build --platform linux/amd64 -t seleniumbase .\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Test in Docker\nDESCRIPTION: Command to run an example test in Chrome inside Docker container with automatic exit after completion.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/docker/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run seleniumbase ./run_docker_test_in_chrome.sh\n```\n\n----------------------------------------\n\nTITLE: Shadow DOM Testing in Python using SeleniumBase\nDESCRIPTION: Test case for interacting with and verifying content within Shadow DOM elements\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_summary.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nshadow_root_test.py::ShadowRootTest::test_shadow_root\n```\n\n----------------------------------------\n\nTITLE: Basic MasterQA Test Implementation in Python\nDESCRIPTION: A basic example showing how to create a MasterQA test class with automated steps and manual verification points. The test navigates to different websites and prompts for manual verification of visual elements.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/master_qa/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import MasterQA\n\nclass MasterQATests(MasterQA):\n    def test_masterqa(self):\n        self.open(\"https://xkcd.com/1700/\")\n        self.verify(\"Do you see a webcomic?\")\n        self.open(\"https://seleniumbase.io/demo_page\")\n        self.highlight('table')\n        self.verify(\"Do you see elements in a table?\")\n        self.open(\"https://seleniumbase.io/devices/\")\n        self.highlight(\"div.mockup-wrapper\")\n        self.verify(\"Do you see 4 computer devices?\")\n```\n\n----------------------------------------\n\nTITLE: Converted SeleniumBase Test Script\nDESCRIPTION: The clean and improved version of the test script after running the seleniumbase convert command. It uses SeleniumBase methods which are more concise and reliable.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/selenium_ide/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nfrom seleniumbase import BaseCase\n\n\nclass Swag(BaseCase):\n\n    def test_swag(self):\n        self.open('https://www.saucedemo.com/')\n        self.type('#user-name', 'standard_user')\n        self.type('#password', 'secret_sauce')\n        self.click('#login-button')\n```\n\n----------------------------------------\n\nTITLE: Swag Labs Feature File Example\nDESCRIPTION: Gherkin feature file demonstrating a complete test scenario for the Swag Labs application\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: SeleniumBase scenarios for the Swag Labs App\n\n  Background:\n    Given Open the Swag Labs Login Page\n\n  Scenario: User can order a backpack from the store\n    When Login to Swag Labs with standard_user\n    Then Verify that the current user is logged in\n    And Save price of \"Backpack\" to <item_price>\n    When Add \"Backpack\" to Cart\n    Then Verify shopping cart badge shows 1 item(s)\n    When Click on shopping cart icon\n    And Click Checkout\n    And Enter checkout info: First, Last, 12345\n    And Click Continue\n    Then Verify 1 \"Backpack\"(s) in cart\n    And Verify cost of \"Backpack\" is <item_price>\n    And Verify item total is $29.99\n    And Verify tax amount is $2.40\n    And Verify total cost is $32.39\n    When Click Finish\n    Then Verify order complete\n    When Logout from Swag Labs\n    Then Verify on Login page\n```\n\n----------------------------------------\n\nTITLE: BrowserStack Capabilities Configuration (YAML)\nDESCRIPTION: This YAML file configures desired capabilities for BrowserStack using the newer SDK format. It specifies the browser, OS version, device, and other test settings.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/desired_capabilities.md#2025-04-19_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\nplatforms:\n  - browserName: safari\n    osVersion: 17\n    deviceName: iPhone 15 Pro Max\nbuildIdentifier: ${BUILD_NUMBER}\nparallelsPerPlatform: 1\nprojectName: My Project\nbrowserstackLocal: true\ndebug: true\nnetworkLogs: true\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Agent for Mobile Testing\nDESCRIPTION: This command demonstrates how to set a custom User-Agent string for mobile testing in SeleniumBase.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mobile_testing.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n--agent=\"USER-AGENT-STRING\"\n```\n\n----------------------------------------\n\nTITLE: Installing pip using curl and Python\nDESCRIPTION: This command downloads the pip installation script using curl and executes it with Python to install or fix pip.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install_python_pip_git.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://bootstrap.pypa.io/get-pip.py | python\n```\n\n----------------------------------------\n\nTITLE: JavaScript Link Injection Implementation\nDESCRIPTION: The full implementation of add_js_link from js_utils.py that shows how JavaScript is injected into webpages using WebDriver's execute_script method.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef add_js_link(driver, js_link):\n    script_to_add_js = (\n        \"\"\"function injectJS(link) {\n              var body = document.getElementsByTagName(\"body\")[0];\n              var script = document.createElement(\"script\");\n              script.src = link;\n              script.defer;\n              script.type=\"text/javascript\";\n              script.crossorigin = \"anonymous\";\n              script.onload = function() { null };\n              body.appendChild(script);\n           }\n           injectJS(\"%s\");\"\"\"\n    )\n    js_link = escape_quotes_if_needed(js_link)\n    driver.execute_script(script_to_add_js % js_link)\n```\n\n----------------------------------------\n\nTITLE: Downloading Web Driver to System PATH\nDESCRIPTION: Command to download ChromeDriver to the system PATH (for Linux/Mac only). On Windows, drivers need to be manually copied to the System Path defined in Environment Variables.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/verify_webdriver.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsbase get chromedriver --path\n```\n\n----------------------------------------\n\nTITLE: Sauce Labs Capabilities Configuration (Python)\nDESCRIPTION: This Python dictionary configures desired capabilities for Sauce Labs. It specifies the browser name, version, platform name, and includes a placeholder for Sauce Labs-specific options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/desired_capabilities.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncapabilities = {\n    \"browserName\": \"chrome\",\n    \"browserVersion\": \"latest\",\n    \"platformName\": \"macOS 10.14\",\n    \"sauce:options\": {},\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Link Injection Implementation\nDESCRIPTION: The full implementation of add_css_link that shows how CSS is injected into webpages using WebDriver's execute_script method.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef add_css_link(driver, css_link):\n    script_to_add_css = (\n        \"\"\"function injectCSS(css) {\n              var head = document.getElementsByTagName(\"head\")[0];\n              var link = document.createElement(\"link\");\n              link.rel = \"stylesheet\";\n              link.type = \"text/css\";\n              link.href = css;\n              link.crossorigin = \"anonymous\";\n              head.appendChild(link);\n           }\n           injectCSS(\"%s\");\"\"\"\n    )\n    css_link = escape_quotes_if_needed(css_link)\n    driver.execute_script(script_to_add_css % css_link)\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Test Files with Dashboard in Pytest\nDESCRIPTION: This command runs two test files with the dashboard enabled, report summary flag, and in headless mode, generating a comprehensive dashboard with results from all tests.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py test_image_saving.py --dashboard --rs --headless\n```\n\n----------------------------------------\n\nTITLE: Setting Chrome Driver Version in SeleniumBase\nDESCRIPTION: Command to specify which version of chromedriver to use. The VER parameter can be a major version, exact version, or special keywords like 'browser', 'keep', 'latest', etc.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npytest --driver-version=VER\n```\n\n----------------------------------------\n\nTITLE: Configuring Behave Environment Setup\nDESCRIPTION: Environment configuration for SeleniumBase Behave integration including hooks for test lifecycle events\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nfrom seleniumbase.behave import behave_sb\nbehave_sb.set_base_class(BaseCase)  # Accepts a BaseCase subclass\nfrom seleniumbase.behave.behave_sb import before_all  # noqa\nfrom seleniumbase.behave.behave_sb import before_feature  # noqa\nfrom seleniumbase.behave.behave_sb import before_scenario  # noqa\nfrom seleniumbase.behave.behave_sb import before_step  # noqa\nfrom seleniumbase.behave.behave_sb import after_step  # noqa\nfrom seleniumbase.behave.behave_sb import after_scenario  # noqa\nfrom seleniumbase.behave.behave_sb import after_feature  # noqa\nfrom seleniumbase.behave.behave_sb import after_all  # noqa\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase tests with command-line capabilities\nDESCRIPTION: This command demonstrates how to run a SeleniumBase test with capabilities specified directly in the command line.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest test_swag_labs.py --cap-string='{\"browserName\":\"chrome\",\"name\":\"test1\"}' --server=\"127.0.0.1\" --browser=remote\n```\n\n----------------------------------------\n\nTITLE: Using the SeleniumBase Translation CLI Command\nDESCRIPTION: Command-line interface for translating SeleniumBase test files between supported languages. Shows the usage, available language options, supported actions, and examples of translating test files.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/translations.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase translate\n```\n\nLANGUAGE: bash\nCODE:\n```\n* Usage:\nseleniumbase translate [SB_FILE.py] [LANGUAGE] [ACTION]\n\n* Languages:\n``--en`` / ``--English``  |  ``--zh`` / ``--Chinese``\n``--nl`` / ``--Dutch``    |  ``--fr`` / ``--French``\n``--it`` / ``--Italian``  |  ``--ja`` / ``--Japanese``\n``--ko`` / ``--Korean``   |  ``--pt`` / ``--Portuguese``\n``--ru`` / ``--Russian``  |  ``--es`` / ``--Spanish``\n\n* Actions:\n``-p`` / ``--print``  (Print translation output to the screen)\n``-o`` / ``--overwrite``  (Overwrite the file being translated)\n``-c`` / ``--copy``  (Copy the translation to a new ``.py`` file)\n\n* Options:\n``-n``  (include line Numbers when using the Print action)\n\n* Examples:\nTranslate test_1.py into Chinese and only print the output:\n>>> seleniumbase translate test_1.py --zh  -p\nTranslate test_2.py into Portuguese and overwrite the file:\n>>> seleniumbase translate test_2.py --pt  -o\nTranslate test_3.py into Dutch and make a copy of the file:\n>>> seleniumbase translate test_3.py --nl  -c\n\n* Output:\nTranslates a SeleniumBase Python file into the language\nspecified. Method calls and ``import`` lines get swapped.\nBoth a language and an action must be specified.\nThe ``-p`` action can be paired with one other action.\nWhen running with ``-c`` (or ``--copy``) the new file name\nwill be the original name appended with an underscore\nplus the 2-letter language code of the new language.\n(Example: Translating ``test_1.py`` into Japanese with\n``-c`` will create a new file called ``test_1_ja.py``.)\n```\n\n----------------------------------------\n\nTITLE: Navigating to SeleniumBase Directory\nDESCRIPTION: Command to change the current directory to the SeleniumBase root folder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd /SeleniumBase\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Tests in Safari\nDESCRIPTION: Command flag that needs to be appended to SeleniumBase test commands to run them in Safari browser after enabling the Safari WebDriver.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/using_safari_driver.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--safari\n```\n\n----------------------------------------\n\nTITLE: BrowserStack Capabilities Configuration (Python)\nDESCRIPTION: This Python dictionary configures desired capabilities for BrowserStack using the legacy JSONWP format. It specifies the browser, OS, version, and various BrowserStack-specific settings.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/desired_capabilities.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndesired_cap = {\n    \"browser\": \"Chrome\",\n    \"os\": \"Windows\",\n    \"os_version\": \"11\",\n    \"browser_version\": \"latest\",\n    \"browserstack.console\": \"info\",\n    \"browserstack.debug\": \"true\",\n    \"browserstack.networkLogs\": \"true\",\n    \"browserstack.local\": \"true\",\n}\n```\n\n----------------------------------------\n\nTITLE: UC Mode on Linux with CAPTCHA Handling\nDESCRIPTION: Example specifically for Linux environments showing CAPTCHA handling with result verification. Uses page title verification before and after CAPTCHA handling to confirm successful bypass.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True, test=True) as sb:\n    url = \"https://www.virtualmanager.com/en/login\"\n    sb.uc_open_with_reconnect(url, 4)\n    print(sb.get_page_title())\n    sb.uc_gui_click_captcha()  # Only used if needed\n    print(sb.get_page_title())\n    sb.assert_element('input[name*=\"email\"]')\n    sb.assert_element('input[name*=\"login\"]')\n    sb.set_messenger_theme(location=\"bottom_center\")\n    sb.post_message(\"SeleniumBase wasn't detected!\")\n```\n\n----------------------------------------\n\nTITLE: Bar Chart API Documentation in SeleniumBase ChartMaker\nDESCRIPTION: API documentation for the create_bar_chart method which explains its parameters including chart name, title, subtitle, data series configuration, and display options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nself.create_bar_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True):\n\"\"\" Creates a JavaScript bar chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n    unit - The description label given to the chart's y-axis values.\n    libs - The option to include Chart libraries (JS and CSS files).\n           Should be set to True (default) for the first time creating\n           a chart on a web page. If creating multiple charts on the\n           same web page, you won't need to re-import the libraries\n           when creating additional charts.\n    labels - If True, displays labels on the chart for data points.\n    legend - If True, displays the data point legend on the chart.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Local Selenium Grid\nDESCRIPTION: Command to execute tests on a local Selenium Grid instance using pytest with server and port specifications.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --server=IP_ADDRESS --port=4444\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Workflow for SeleniumBase Tests in GitHub Actions\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow for running SeleniumBase tests. It includes steps for setting up Python, installing dependencies, and running tests on pull requests and pushes to the master branch.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/github/workflows/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# This code snippet is referenced but not explicitly shown in the text.\n# The actual content would be found at:\n# https://github.com/seleniumbase/SeleniumBase/blob/master/.github/workflows/python-package.yml\n```\n\n----------------------------------------\n\nTITLE: Creating a Chinese Test in SeleniumBase\nDESCRIPTION: Example of a test written in Chinese using SeleniumBase. The test navigates to Chinese Wikipedia, verifies various elements on the page, and searches for \"舞龍\" (dragon dance).\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/translations.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Chinese Translation\nfrom seleniumbase.translate.chinese import 硒测试用例\n\nclass 我的测试类(硒测试用例):\n    def test_例子1(self):\n        self.开启(\"https://zh.wikipedia.org/wiki/\")\n        self.断言标题(\"维基百科，自由的百科全书\")\n        self.断言元素('a[title=\"Wikipedia:关于\"]')\n        self.如果可见请单击('button[aria-label=\"关闭\"]')\n        self.如果可见请单击('button[aria-label=\"關閉\"]')\n        self.断言元素('span:contains(\"创建账号\")')\n        self.断言元素('span:contains(\"登录\")')\n        self.输入文本('input[name=\"search\"]', \"舞龍\")\n        self.单击('button:contains(\"搜索\")')\n        self.断言文本(\"舞龍\", \"#firstHeading\")\n        self.断言元素('img[src*=\"Chinese_draak.jpg\"]')\n```\n\n----------------------------------------\n\nTITLE: SeleniumBase Translation CLI Usage\nDESCRIPTION: Command-line interface documentation for translating SeleniumBase test files between supported languages. Shows available options and example usage patterns.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/translations/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase translate\n```\n\n----------------------------------------\n\nTITLE: Downloading ChromeDriver Manually on Linux\nDESCRIPTION: This script downloads a specific version of ChromeDriver, extracts it, moves it to the /usr/local/bin/ directory, and sets the appropriate permissions on a Linux system.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/webdriver_installation.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip\nunzip chromedriver_linux64.zip\nmv chromedriver /usr/local/bin/\nchmod +x /usr/local/bin/chromedriver\n```\n\n----------------------------------------\n\nTITLE: Downloading GeckoDriver Manually on Linux\nDESCRIPTION: This script downloads a specific version of GeckoDriver, extracts it, moves it to the /usr/local/bin/ directory, and sets the appropriate permissions on a Linux system.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/webdriver_installation.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/mozilla/geckodriver/releases/download/v0.35.0/geckodriver-v0.35.0-linux64.tar.gz\ntar xvfz geckodriver-v0.35.0-linux64.tar.gz\nmv geckodriver /usr/local/bin/\nchmod +x /usr/local/bin/geckodriver\n```\n\n----------------------------------------\n\nTITLE: Running Coffee Cart Test with Demo Mode\nDESCRIPTION: Demonstrates how to run a coffee cart test using SeleniumBase's Demo Mode, which slows down test execution and highlights actions for better visibility.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/demo_mode.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/\npytest test_coffee_cart.py --demo\n```\n\n----------------------------------------\n\nTITLE: Running Pytest Tests in Parallel\nDESCRIPTION: Shows how to run pytest tests with multiple processes using the -n option. The number following -n specifies the number of CPUs to use for parallel execution.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npytest -n=8\npytest -n 8\npytest -n8\n```\n\n----------------------------------------\n\nTITLE: Adding Slides with Various Content in Python\nDESCRIPTION: This snippet demonstrates how to add slides to a presentation using SeleniumBase's add_slide method. It includes examples of adding text, code, images, and speaker notes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/presenter/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.add_slide(\n    '<h3>Multiple <b>themes</b> available:</h3>',\n    code=(\n        'self.create_presentation(theme=\"serif\")\\n\\n'\n        'self.create_presentation(theme=\"sky\")\\n\\n'\n        'self.create_presentation(theme=\"simple\")\\n\\n'\n        'self.create_presentation(theme=\"white\")\\n\\n'\n        'self.create_presentation(theme=\"moon\")\\n\\n'\n        'self.create_presentation(theme=\"black\")\\n\\n'\n        'self.create_presentation(theme=\"night\")\\n\\n'\n        'self.create_presentation(theme=\"beige\")\\n\\n'\n        'self.create_presentation(theme=\"league\")'))\nself.add_slide(\n    '<h2><b>The End</b></h2>',\n    image=\"https://seleniumbase.github.io/img/sb_logo_10.png\")\nself.begin_presentation(\n    filename=\"presenter.html\", show_notes=True, interval=0)\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment with venv on macOS/Linux\nDESCRIPTION: Commands to create a Python virtual environment named 'sbase_env' using venv and activate it on macOS or Linux systems.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv sbase_env\nsource sbase_env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of SeleniumBase Demo Page Test Steps\nDESCRIPTION: A markdown table outlining 20 test steps for the SeleniumBase demo page. Each step includes a description and expected result, covering various web interactions and assertions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/test_demo_site.DemoSiteTests.test_demo_site.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| # | Step Description | Expected Result |\n| - | ---------------- | --------------- |\n| 1 | Open https://seleniumbase.io/demo_page |  |\n| 2 | Assert the title of the current web page. <br /> Assert that a given element is visible on the page. <br /> Assert that a text substring appears in an element's text. | The assertions were successful. |\n| 3 | Type text into various text fields and then verify. | The assertions were successful. |\n| 4 | Verify that a hover dropdown link changes page text. | The assertion was successful. |\n| 5 | Verify that a button click changes text on the page. | The assertion was successful. |\n| 6 | Verify that an SVG element is located on the page. | The assertion was successful. |\n| 7 | Verify that a slider control updates a progress bar. | The assertion was successful. |\n| 8 | Verify that a \"select\" option updates a meter bar. | The assertion was successful. |\n| 9 | Assert an element located inside an iFrame. | The assertion was successful. |\n| 10 | Assert text located inside an iFrame. | The assertion was successful. |\n| 11 | Verify that clicking a radio button selects it. | The assertion was successful. |\n| 12 | Verify that clicking an empty checkbox makes it selected. | The assertion was successful. |\n| 13 | Verify clicking on multiple elements with one call. | The assertions were successful. |\n| 14 | Verify that clicking an iFrame checkbox selects it. | The assertions were successful. |\n| 15 | Verify that Drag and Drop works. | The assertion was successful. |\n| 16 | Assert link text. | The assertion was successful. |\n| 17 | Verify clicking on link text. | The action was successful. |\n| 18 | Assert exact text in an element. | The assertion was successful. |\n| 19 | Highlight a page element. | The action was successful. |\n| 20 | Verify that Demo Mode works. | The assertion was successful. |\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Test Reports in Pytest\nDESCRIPTION: This command runs a test suite and generates an HTML report at the specified location (report.html), providing a detailed view of test results including pass/fail status.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py --html=report.html\n```\n\n----------------------------------------\n\nTITLE: SeleniumBase Explicit Wait\nDESCRIPTION: Simplified explicit wait implementation in SeleniumBase with timeout parameter\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/migration/raw_selenium/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.click(\"button\", timeout=10)\n```\n\n----------------------------------------\n\nTITLE: Saving SeleniumBase Charts to File\nDESCRIPTION: Method to save a generated chart to an HTML file in the saved_charts directory. Supports multiple chart management through chart_name parameter.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nself.save_chart(chart_name=None, filename=None):\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Class Method in Python\nDESCRIPTION: Reference to a specific test method within a Python test class file, indicating the test case to be executed for Swag Labs.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/my_first_test.MyTestClass.test_swag_labs.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmy_first_test.py::MyTestClass::test_swag_labs\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Tests with Pytest\nDESCRIPTION: Demonstrates how to automatically retry failing tests using pytest options. The --reruns option specifies the number of retries, and --reruns-delay sets the delay between retries in seconds.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npytest --reruns=1 --reruns-delay=1\n```\n\n----------------------------------------\n\nTITLE: Running Swag Labs Test with Demo Mode\nDESCRIPTION: Example of running the Swag Labs demo test with Demo Mode enabled to showcase test execution on the Sauce Demo website.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/demo_mode.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest test_swag_labs.py --demo\n```\n\n----------------------------------------\n\nTITLE: BrowserStack capabilities using legacy JSONWP format in Python\nDESCRIPTION: This Python dictionary defines BrowserStack capabilities using the legacy JSONWP format, specifying browser, OS, version, and other test settings.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndesired_cap = {\n    \"browser\": \"Chrome\",\n    \"os\": \"Windows\",\n    \"os_version\": \"11\",\n    \"browser_version\": \"latest\",\n    \"browserstack.console\": \"info\",\n    \"browserstack.debug\": \"true\",\n    \"browserstack.networkLogs\": \"true\",\n    \"browserstack.local\": \"true\",\n}\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Case Plans with Various Arguments\nDESCRIPTION: These commands demonstrate how to run SeleniumBase Case Plans with different arguments to filter and select specific tests or test suites.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/case_plans.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsbase caseplans\nsbase caseplans -k agent\nsbase caseplans -m marker2\nsbase caseplans test_suite.py\nsbase caseplans offline_examples/\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Reports in pynose\nDESCRIPTION: This command runs tests using pynose and generates a fancy report after tests complete, providing a visual summary of test results.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npynose test_suite.py --report\n```\n\n----------------------------------------\n\nTITLE: Creating Test Files with mkfile\nDESCRIPTION: Creates new SeleniumBase test files with boilerplate code supporting multiple languages and formats. Includes options for different syntax formats and testing approaches.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsbase mkfile new_test.py\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Version and Path\nDESCRIPTION: Commands to check the Python version and its installation path in a virtual environment.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython --version\nwhich python\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment with virtualenvwrapper\nDESCRIPTION: Command to create a new virtual environment named 'sbase_env' using virtualenvwrapper.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkvirtualenv sbase_env\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Convert Command on Exported Katalon Script\nDESCRIPTION: Command to convert a Katalon Recorder exported Python file into a clean SeleniumBase test script. The output file will have '_SB' added to the original filename.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/selenium_ide/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase convert MY_TEST.py\n```\n\n----------------------------------------\n\nTITLE: Navigation Method Examples in Python\nDESCRIPTION: Examples of SeleniumBase methods for navigating web pages including opening URLs, going back/forward, refreshing pages, and getting page information.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.open(\"https://xkcd.com/378/\")  # This method opens the specified page.\n\nself.go_back()  # This method navigates the browser to the previous page.\n\nself.go_forward()  # This method navigates the browser forward in history.\n\nself.refresh_page()  # This method reloads the current page.\n\nself.get_current_url()  # This method returns the current page URL.\n\nself.get_page_source()  # This method returns the current page source.\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Notifications for SeleniumBase Workflows\nDESCRIPTION: GitHub Actions configuration for sending Slack notifications using rtCamp/action-slack-notify action. Includes setup for webhook integration, channel specification, and customized notification message with workflow run links.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/github/workflows/extras.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n    - name: Slack notification\n      uses: rtCamp/action-slack-notify@master\n      env:\n        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}\n        SLACK_CHANNEL: general\n        SLACK_ICON_EMOJI: rocket\n        SLACK_USERNAME: SeleniumBase\n        SLACK_MESSAGE: 'Actions workflow completed successful! :tada:  https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'\n```\n\n----------------------------------------\n\nTITLE: BrowserStack capabilities using SDK format in YAML\nDESCRIPTION: This YAML file defines BrowserStack capabilities using the newer SDK format, specifying browser, OS, device, and other test configuration options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nplatforms:\n  - browserName: safari\n    osVersion: 17\n    deviceName: iPhone 15 Pro Max\nbuildIdentifier: ${BUILD_NUMBER}\nparallelsPerPlatform: 1\nprojectName: My Project\nbrowserstackLocal: true\ndebug: true\nnetworkLogs: true\n```\n\n----------------------------------------\n\nTITLE: Converted SeleniumBase Test Script\nDESCRIPTION: The clean, optimized version of the test script after conversion using seleniumbase convert. Uses SeleniumBase methods which are more reliable and reduces the code to the essential parts.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/katalon/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nfrom seleniumbase import BaseCase\n\n\nclass Swag(BaseCase):\n\n    def test_swag(self):\n        self.open('https://www.saucedemo.com/')\n        self.type('#user-name', 'standard_user')\n        self.type('#password', 'secret_sauce')\n        self.click('#login-button')\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit XML Reports in Behave BDD Tests\nDESCRIPTION: This command runs Behave BDD tests and generates JUnit XML reports for each feature, which can be used by Jenkins for better reporting visualization.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbehave behave_bdd/features/ --junit -D rs -D headless\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific WebDriver Versions using SeleniumBase in Bash\nDESCRIPTION: These commands show how to download specific versions of ChromeDriver and EdgeDriver, including stable, beta, dev, and canary versions. The 'sbase' command is a shortcut for 'seleniumbase'.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/webdriver_installation.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsbase get chromedriver 114\nsbase get chromedriver 114.0.5735.90\nsbase get chromedriver stable\nsbase get chromedriver beta\nsbase get chromedriver dev\nsbase get chromedriver canary\nsbase get chromedriver previous  # One major version before the stable version\nsbase get chromedriver mlatest  # Milestone latest version for detected browser\nsbase get edgedriver 115.0.1901.183\n```\n\n----------------------------------------\n\nTITLE: Generating Nosetest Reports\nDESCRIPTION: Demonstrates how to generate fancy reports for nosetests, including options for immediate display of reports after test completion.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnosetests test_suite.py --report\n```\n\n----------------------------------------\n\nTITLE: Launching the Recorder Desktop App\nDESCRIPTION: Command to start the SeleniumBase Recorder Desktop App, which provides a graphical interface for recording browser actions instead of using the command-line approach.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsbase recorder\n* Starting the SeleniumBase Recorder Desktop App...\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Test in Mobile Mode\nDESCRIPTION: This command demonstrates how to run a SeleniumBase test using Chrome's mobile device emulator with default settings.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mobile_testing.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest test_skype_site.py --mobile\n```\n\n----------------------------------------\n\nTITLE: Generating XML Test Reports for Jenkins in Pytest\nDESCRIPTION: This command generates an XML report that can be used by Jenkins CI server to display better reporting for test results.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py --junit-xml=report.xml\n```\n\n----------------------------------------\n\nTITLE: Running Behave Feature for Calculator App with Higher-Level Steps\nDESCRIPTION: Example of running a specific Behave feature scenario for a Calculator app using higher-level custom steps. This demonstrates how to simplify feature files with custom step definitions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> cd examples/behave_bdd/\n> behave features/calculator.feature:61 -T -D dashboard -k\n\nDashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n********************************************************************************\nFeature: SeleniumBase scenarios for the Calculator App # features/calculator.feature:1\n\n  Background:   # features/calculator.feature:3\n\n  Scenario: 7.0 × (3 + 3) = 42        # features/calculator.feature:49\n    Given Open the Calculator App     # features/steps/calculator.py:4\n    When Press C                      # features/steps/calculator.py:9\n    And Press 7                       # features/steps/calculator.py:79\n    And Press .                       # features/steps/calculator.py:104\n    And Press 0                       # features/steps/calculator.py:94\n    And Press ×                       # features/steps/calculator.py:29\n    And Press (                       # features/steps/calculator.py:14\n    And Press 3                       # features/steps/calculator.py:59\n    And Press +                       # features/steps/calculator.py:39\n    And Press 3                       # features/steps/calculator.py:59\n    And Press )                       # features/steps/calculator.py:19\n    Then Verify output is \"7.0×(3+3)\" # features/steps/calculator.py:135\n    When Press =                      # features/steps/calculator.py:44\n    Then Verify output is \"42\"        # features/steps/calculator.py:135\n   ✅ Scenario Passed!\n\n- Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n--- LogPath: /Users/michael/github/SeleniumBase/examples/behave_bdd/latest_logs/\n==================================================================================\n1 feature passed, 0 failed, 0 skipped\n1 scenario passed, 0 failed, 8 skipped\n14 steps passed, 0 failed, 60 skipped, 0 undefined\nTook 0m1.672s\n```\n\n----------------------------------------\n\nTITLE: Converted SeleniumBase Test Script\nDESCRIPTION: Clean and optimized version of the test script after conversion to SeleniumBase format, with simplified syntax and improved reliability\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_ide/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nfrom seleniumbase import BaseCase\n\n\nclass Swag(BaseCase):\n\n    def test_swag(self):\n        self.open('https://www.saucedemo.com/')\n        self.type('#user-name', 'standard_user')\n        self.type('#password', 'secret_sauce')\n        self.click('#login-button')\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Dashboard\nDESCRIPTION: Shows how to generate and view the SeleniumBase Dashboard, including options for running tests with dashboard generation and hosting the dashboard as a web app.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npytest --dashboard --rs --headless\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server 1948\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py --dashboard --rs --headless\n```\n\n----------------------------------------\n\nTITLE: Shadow Root Expected Content\nDESCRIPTION: Expected text content values to be verified within shadow root elements across different tabs\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/shadow_root_test.ShadowRootTest.test_shadow_root.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nContent Panel 1\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nContent Panel 2\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nContent Panel 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Device Metrics for Mobile Testing\nDESCRIPTION: This command shows how to configure Device Metrics for mobile testing in SeleniumBase, specifying CSS Width, CSS Height, and Pixel Ratio.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mobile_testing.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--metrics=\"CSS_Width,CSS_Height,Pixel_Ratio\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Selenium Server JAR - Bash Command\nDESCRIPTION: Command to download the Selenium Server JAR file required for running your own Selenium Grid.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase download server\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase tests with dynamic test name in capabilities\nDESCRIPTION: This command shows how to run a SeleniumBase test with a dynamic test name in the capabilities, using '*' as a placeholder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py --cap-string='{\"browserName\":\"chrome\",\"name\":\"*\"}' --server=\"127.0.0.1\" --browser=chrome\n```\n\n----------------------------------------\n\nTITLE: Downloading Chrome for Testing and Chrome-Headless-Shell Binaries\nDESCRIPTION: These commands download the Chrome for Testing (CFT) and Chrome-Headless-Shell (CHS) browser binaries into the seleniumbase/drivers folder using SeleniumBase's get command.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/webdriver_installation.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsbase get cft  # (For `Chrome for Testing`)\nsbase get chs  # (For `Chrome-Headless-Shell`)\n```\n\n----------------------------------------\n\nTITLE: Using the caseplans Command\nDESCRIPTION: This snippet shows examples of using the caseplans command to generate test case plans. It includes various options for specifying test files or directories.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsbase caseplans\nsbase caseplans -k agent\nsbase caseplans -m marker2\nsbase caseplans test_suite.py\nsbase caseplans offline_examples/\n```\n\n----------------------------------------\n\nTITLE: Using the get/install Command for WebDriver Installation\nDESCRIPTION: This snippet demonstrates how to use the get/install command to download and install WebDrivers. It includes examples for different browsers and options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsbase get chromedriver\nsbase get geckodriver\nsbase get edgedriver\nsbase get chromedriver 114\nsbase get chromedriver 114.0.5735.90\nsbase get chromedriver stable\nsbase get chromedriver beta\nsbase get chromedriver -p\nsbase get cft 131\nsbase get chs\n```\n\n----------------------------------------\n\nTITLE: Creating a Recording Using Command-Line Interface\nDESCRIPTION: Command to start a new recording session using the SeleniumBase command-line interface. This creates a test file that pauses at a breakpoint, allowing manual recording of browser actions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsbase mkrec TEST_NAME.py --url=URL\n```\n\n----------------------------------------\n\nTITLE: Setting Language Locale for Web Tests\nDESCRIPTION: Shows how to specify a Language Locale Code to customize web pages on supported websites during test execution.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npytest --locale=CODE  # Example: --locale=ru\n```\n\n----------------------------------------\n\nTITLE: Installing pip on CentOS 7 using yum\nDESCRIPTION: These commands update the system and install pip using the yum package manager on CentOS 7 and some Linux versions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install_python_pip_git.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyum -y update\nyum -y install python-pip\n```\n\n----------------------------------------\n\nTITLE: Grid Node Server Control Commands\nDESCRIPTION: Commands for managing Grid node servers, including connection to a specific Hub IP address and verbosity options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase grid-node {start|stop|restart} --hub=[HUB_IP] [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Visual Baseline Reset in Bash\nDESCRIPTION: Command-line parameter for resetting the visual baseline when running SeleniumBase tests. This ensures that check_window() will rebuild the baseline rather than comparing to an existing one.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--visual_baseline\n```\n\n----------------------------------------\n\nTITLE: Setting Default Dialog Box Theme in SeleniumBase\nDESCRIPTION: Examples showing how to set and reset the default theme for dialog boxes, including color and width customization.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nself.set_jqc_theme(\"light\", color=\"green\", width=\"38%\")\n\n# To reset jqc theme settings to factory defaults:\nself.reset_jqc_theme()\n```\n\n----------------------------------------\n\nTITLE: Running Behave RealWorld Feature with Dashboard in SeleniumBase\nDESCRIPTION: This command demonstrates how to run a specific Behave feature file (realworld.feature) with SeleniumBase. The -T flag enables test result tracking, the -D dashboard option generates a dashboard, and -k keeps the browser open after tests complete.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> cd examples/behave_bdd/\n> behave features/realworld.feature -T -D dashboard -k\n\nDashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n********************************************************************************\nFeature: SeleniumBase scenarios for the RealWorld App # features/realworld.feature:1\n\n  Scenario: Verify RealWorld App (log in / sign out)  # features/realworld.feature:3\n    Given Open \"seleniumbase.io/realworld/login\"      # ../../sbase/steps.py:10\n    And Clear Session Storage                         # ../../sbase/steps.py:669\n    When Type \"demo_user\" into \"#username\"            # ../../sbase/steps.py:40\n    And Type \"secret_pass\" into \"#password\"           # ../../sbase/steps.py:40\n    And Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"    # ../../sbase/steps.py:322\n    Then Assert exact text \"Welcome!\" in \"h1\"         # ../../sbase/steps.py:157\n    And Highlight \"img#image1\"                        # ../../sbase/steps.py:184\n    And Click 'a:contains(\"This Page\")'               # ../../sbase/steps.py:27\n    And Save screenshot to logs                       # ../../sbase/steps.py:239\n    When Click link \"Sign out\"                        # ../../sbase/steps.py:195\n    Then Assert element 'a:contains(\"Sign in\")'       # ../../sbase/steps.py:120\n    And Assert text \"You have been signed out!\"       # ../../sbase/steps.py:145\n   ✅ Scenario Passed!\n\n- Dashboard: /Users/michael/github/SeleniumBase/examples/behave_bdd/dashboard.html\n--- LogPath: /Users/michael/github/SeleniumBase/examples/behave_bdd/latest_logs/\n==================================================================================\n1 feature passed, 0 failed, 0 skipped\n1 scenario passed, 0 failed, 0 skipped\n12 steps passed, 0 failed, 0 skipped, 0 undefined\nTook 0m4.682s\n```\n\n----------------------------------------\n\nTITLE: MasterQA Verification Method Examples\nDESCRIPTION: Examples of how to use the verify() method in MasterQA tests, showing both default and custom verification prompts.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/master_qa/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.verify()\n\nself.verify(\"Can you find the moon?\")\n```\n\n----------------------------------------\n\nTITLE: Hosting a SeleniumBase Dashboard Server\nDESCRIPTION: This command starts a local HTTP server using Python 3 on port 1948 to host the SeleniumBase Dashboard, allowing you to view it as a web application at http://localhost:1948/dashboard.html.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server 1948\n```\n\n----------------------------------------\n\nTITLE: Run Test Suite with Logging\nDESCRIPTION: Command to execute test suite with logging capabilities\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py\n```\n\n----------------------------------------\n\nTITLE: Replacing text in multiple files using sed (Bash)\nDESCRIPTION: Commands to replace text across multiple files using sed. Separate commands are provided for Linux and macOS due to slight differences in sed syntax between these systems.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/useful_grep_commands.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsed -i 's/foo_abc/bar_xyz/g' *.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nsed -i '' 's/foo_abc/bar_xyz/g' *.py\n```\n\n----------------------------------------\n\nTITLE: User Agent Configuration\nDESCRIPTION: Command to set a custom user agent string for Chrome and Firefox browser tests.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npytest user_agent_test.py --agent=\"Mozilla/5.0 (Nintendo 3DS; U; ; en) Version/1.7412.EU\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Pie Chart Presentation in SeleniumBase\nDESCRIPTION: Example code for creating a pie chart presentation showing automated test results with passed, untested, and failed data points.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import BaseCase\nBaseCase.main(__name__, __file__)\n\nclass MyChartMakerClass(BaseCase):\n    def test_chart_maker(self):\n        self.create_presentation()\n        self.create_pie_chart(title=\"Automated Tests\")\n        self.add_data_point(\"Passed\", 7, color=\"#95d96f\")\n        self.add_data_point(\"Untested\", 2, color=\"#eaeaea\")\n        self.add_data_point(\"Failed\", 1, color=\"#f1888f\")\n        self.add_slide(\"<p>Pie Chart</p>\" + self.extract_chart())\n        self.begin_presentation(filename=\"my_chart.html\")\n```\n\n----------------------------------------\n\nTITLE: Grid Hub Server Control Commands\nDESCRIPTION: Commands for starting, stopping, and restarting the Selenium Grid Hub server with optional parameters for verbosity and timeout settings.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase grid-hub {start|stop|restart} [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Creating Test Directory Structure with mkdir\nDESCRIPTION: Creates a new folder for SeleniumBase scripts with config files and sample tests. Basic option creates minimal structure with only config files.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsbase mkdir ui_tests\n```\n\n----------------------------------------\n\nTITLE: Text Input Dialog in SeleniumBase\nDESCRIPTION: Example of creating a simple form with a text input field and a search button, returning the text entered by the user.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntext = self.get_jqc_text_input(\"Enter text:\", [\"Search\"])\nprint(text)  # This prints the text entered\n```\n\n----------------------------------------\n\nTITLE: Running Error Page Test with Highlights\nDESCRIPTION: Demonstrates running a test that uses the highlight() method to emphasize browser actions without full Demo Mode.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/demo_mode.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest test_error_page.py\n```\n\n----------------------------------------\n\nTITLE: Combining Dashboard with HTML Reports in Pytest\nDESCRIPTION: This command runs tests while enabling both the dashboard and HTML reporting features, which enhances the HTML report with the dashboard's pie chart visualization.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py --dashboard --html=report.html\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for SeleniumBase (Windows/Linux/Intel Mac)\nDESCRIPTION: Command to build a Docker image from the SeleniumBase Dockerfile for standard systems.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/docker/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t seleniumbase .\n```\n\n----------------------------------------\n\nTITLE: Running a Test with Initial Breakpoint and Recorder\nDESCRIPTION: Command to run a test with an automatic breakpoint at the start and recorder enabled, useful for adding recorded actions to tests without explicit pdb breakpoints.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest TEST_NAME.py --trace --rec -s\n```\n\n----------------------------------------\n\nTITLE: Testing Wikipedia in Chinese using SeleniumBase\nDESCRIPTION: Example test case written in Chinese that navigates Wikipedia's Chinese site, verifies elements, and searches for content. Demonstrates SeleniumBase's Chinese translation API usage.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/translations/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Chinese Translation\nfrom seleniumbase.translate.chinese import 硒测试用例\n\nclass 我的测试类(硒测试用例):\n    def test_例子1(self):\n        self.开启(\"https://zh.wikipedia.org/wiki/\")\n        self.断言标题(\"维基百科，自由的百科全书\")\n        self.断言元素('a[title=\"Wikipedia:关于\"]')\n        self.如果可见请单击('button[aria-label=\"关闭\"]')\n        self.如果可见请单击('button[aria-label=\"關閉\"]')\n        self.断言元素('span:contains(\"创建账号\")')\n        self.断言元素('span:contains(\"登录\")')\n        self.输入文本('input[name=\"search\"]', \"舞龍\")\n        self.单击('button:contains(\"搜索\")')\n        self.断言文本(\"舞龍\", \"#firstHeading\")\n        self.断言元素('img[src*=\"Chinese_draak.jpg\"]')\n```\n\n----------------------------------------\n\nTITLE: Running Tests with HTTPS Protocol\nDESCRIPTION: Command demonstrating how to run tests using HTTPS protocol with custom server and port specifications.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --protocol=https --server=IP_ADDRESS --port=PORT\n```\n\n----------------------------------------\n\nTITLE: Simple Button Input Dialog in SeleniumBase\nDESCRIPTION: Examples of creating simple dialog boxes with buttons for user input. Shows both basic implementation and color customization for buttons.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nchoice = self.get_jqc_button_input(\"Ready?\", [\"YES\", \"NO\"])\nprint(choice)  # This prints \"YES\" or \"NO\"\n\n# You may want to customize the color of buttons:\nbuttons = [(\"YES\", \"green\"), (\"NO\", \"red\")]\nchoice = self.get_jqc_button_input(\"Ready?\", buttons)\n```\n\n----------------------------------------\n\nTITLE: Running a Test with Default Logging Configuration in Pytest\nDESCRIPTION: This command runs a failing test case which automatically generates logs in the latest_logs/ folder, including basic test info, page source, and screenshots.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest test_fail.py\n```\n\n----------------------------------------\n\nTITLE: UC Mode Breakpoint Examples\nDESCRIPTION: Shows how to use breakpoint functionality in UC Mode for manual interaction during automation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nurl = \"https://gitlab.com/users/sign_in\"\ndriver.uc_open_with_reconnect(url, reconnect_time=\"breakpoint\")\ndriver.uc_open_with_reconnect(url, \"breakpoint\")\n\ndriver.reconnect(timeout=\"breakpoint\")\ndriver.reconnect(\"breakpoint\")\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Hub and Node (Bash)\nDESCRIPTION: These commands start up a local Selenium Grid hub and node using SeleniumBase. This is necessary when using a local Selenium Grid for testing.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/desired_capabilities.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsbase grid-hub start\nsbase grid-node start\n```\n\n----------------------------------------\n\nTITLE: Creating a test method within a BaseCase class\nDESCRIPTION: Demonstrates how to create a test method inside a BaseCase-inherited class that will automatically handle browser launching and quitting.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyTestClass(BaseCase):\n    def test_abc(self):\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Running Pytest with Debug Options\nDESCRIPTION: Demonstrates how to run pytest with debugging options. The --pdb flag pauses the test on exceptions, while --trace starts tests in Debug Mode.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npytest test_fail.py --pdb\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_coffee_cart.py --trace\n```\n\n----------------------------------------\n\nTITLE: Upgrading SeleniumBase from GitHub\nDESCRIPTION: Commands to update an existing GitHub-based installation of SeleniumBase to the latest version.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running Dialog Box Examples with pytest in SeleniumBase\nDESCRIPTION: Command to run the dialog box examples in SeleniumBase by navigating to the examples directory and executing the test file with pytest.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/dialog_boxes\npytest test_dialog_boxes.py\n```\n\n----------------------------------------\n\nTITLE: Failing Element Assertion in Selenium Test\nDESCRIPTION: A test case that navigates to an XKCD comic page and attempts to find a non-existent 'div#ARMY_OF_ROBOTS' element with a 1-second timeout, which causes the test to fail.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/basic_test_info.txt#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nself.assert_element(\"div#ARMY_OF_ROBOTS\", timeout=1)\n```\n\n----------------------------------------\n\nTITLE: Saving a SeleniumBase Presentation in Python\nDESCRIPTION: These Python snippets show how to save a SeleniumBase presentation as an HTML file. The first method explicitly saves the presentation, while the second method automatically saves it when beginning the presentation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/presenter/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.save_presentation(filename=\"my_presentation.html\", show_notes=True)\n\n# Presentations automatically get saved when calling:\nself.begin_presentation(show_notes=True)\n```\n\n----------------------------------------\n\nTITLE: Password Obfuscation Command-line Interface\nDESCRIPTION: Shows the command-line interface for password obfuscation using the obfuscate.py script. This tool masks password input and outputs an encrypted string.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/common/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython obfuscate.py\n\nEnter password to obfuscate: (CTRL+C to exit)\nPassword: *********\nVerify password:\nPassword: *********\n\nHere is the obfuscated password:\n$^*ENCRYPT=RXlYMSJWTz8HSwM=?&#$\n```\n\n----------------------------------------\n\nTITLE: Creating a Japanese Test in SeleniumBase\nDESCRIPTION: Example of a test written in Japanese using SeleniumBase. This test navigates to Japanese Wikipedia, searches for both \"アニメ\" (anime) and \"寿司\" (sushi), and verifies the search results.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/translations.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Japanese Translation\nfrom seleniumbase.translate.japanese import セレニウムテストケース\n\nclass 私のテストクラス(セレニウムテストケース):\n    def test_例1(self):\n        self.を開く(\"https://ja.wikipedia.org/wiki/\")\n        self.テキストを確認する(\"ウィキペディア\")\n        self.要素を確認する('[title*=\"ウィキペディアへようこそ\"]')\n        self.JS入力('input[name=\"search\"]', \"アニメ\")\n        self.クリックして(\"#searchform button\")\n        self.テキストを確認する(\"アニメ\", \"#firstHeading\")\n        self.JS入力('input[name=\"search\"]', \"寿司\")\n        self.クリックして(\"#searchform button\")\n        self.テキストを確認する(\"寿司\", \"#firstHeading\")\n        self.要素を確認する('img[src*=\"Various_sushi\"]')\n```\n\n----------------------------------------\n\nTITLE: Using Special Highlighting Tags in SeleniumBase Presentations\nDESCRIPTION: This Python snippet demonstrates how to use special <mk-n> tags for highlighting multiple lines at different times in the same slide. These tags generate multiple HTML slides from one Python slide.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/presenter/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.add_slide(\n    code=(\n        \"<p><mk-0>Highlight this on the 1st generated slide</mk-0></p>\"\n        \"<p><mk-1>Highlight this on the 2nd generated slide</mk-1></p>\"\n        \"<p><mk-2>Highlight this on the 3rd generated slide</mk-2></p>\"\n        \"<p><mk-3>Highlight this on the 4th generated slide</mk-3></p>\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Proxy Server Configuration\nDESCRIPTION: Commands for configuring proxy settings including authentication and SOCKS proxy support.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npytest proxy_test.py --proxy=IP_ADDRESS:PORT\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest proxy_test.py --proxy=USERNAME:PASSWORD@IP_ADDRESS:PORT\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest proxy_test.py --proxy=\"socks4://IP_ADDRESS:PORT\"\n\npytest proxy_test.py --proxy=\"socks5://IP_ADDRESS:PORT\"\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest proxy_test.py --proxy=proxy1\n```\n\n----------------------------------------\n\nTITLE: Running the NodeJS server for SeleniumBase Test Runner\nDESCRIPTION: This command starts the NodeJS server for the SeleniumBase Test Runner web app. The server can be stopped using Ctrl+C.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/node_js/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode server.js\n```\n\n----------------------------------------\n\nTITLE: Running tests with pytest command examples\nDESCRIPTION: Shows various ways to run SeleniumBase tests using pytest with different command-line options for controlling test execution.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/how_it_works.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest test_mfa_login.py\npytest --headless -n8 --dashboard --html=report.html -v --rs --crumbs\npytest -m marker2\npytest -k agent\npytest offline_examples/\n```\n\n----------------------------------------\n\nTITLE: Loading IntroJS JavaScript Library Example\nDESCRIPTION: Example showing how to load the IntroJS JavaScript library from a CDN link into a webpage.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nself.add_js_link(\"https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/intro.min.js\")\n```\n\n----------------------------------------\n\nTITLE: Scheduling Delayed Browser Events in JavaScript\nDESCRIPTION: JavaScript method for scheduling delayed execution of browser events. Used in SeleniumBase UC Mode to perform stealthy clicks by scheduling them after chromedriver disconnection.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.setTimeout(function() { SCRIPT }, MS);\n```\n\n----------------------------------------\n\nTITLE: Import SeleniumBase Behave Steps\nDESCRIPTION: Python import statement to include pre-made SeleniumBase Behave steps\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase.behave import steps  # noqa\n```\n\n----------------------------------------\n\nTITLE: Searching for text in files using grep (Bash)\nDESCRIPTION: Commands to search for specific text in files, excluding certain file types or including only specific file types. These are useful for finding occurrences of particular code patterns in the SeleniumBase project.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/useful_grep_commands.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngrep -rl \"self.get_new_driver(\" * --exclude=\\*.pyc\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrep -rl * -e \"self.get_new_driver(\" --exclude=\\*.pyc\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrep -rl \"self.get_new_driver(\" * --include=\\*.py\n```\n\n----------------------------------------\n\nTITLE: Importing SeleniumBase Behave Steps\nDESCRIPTION: Import statement to include pre-made SeleniumBase Behave steps in your step definitions\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase.behave import steps  # noqa\n```\n\n----------------------------------------\n\nTITLE: Managing Selenium Grid Node\nDESCRIPTION: Controls Selenium Grid node servers that act as worker machines for the Grid Hub.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsbase grid-node {start|stop|restart} [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: MasterQA Setup and Installation Commands\nDESCRIPTION: Shell commands for setting up and running MasterQA tests from scratch. Includes cloning the repository, installing dependencies, and running example test files.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/master_qa/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase\npip install .\ncd examples/master_qa\npytest basic_masterqa_test_0.py\npytest masterqa_test_1.py\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Maps Tour Example\nDESCRIPTION: Command to execute the IntroJS tour example for Google Maps with a 1-second interval between steps.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/tour_examples/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/tour_examples\npytest maps_introjs_tour.py --interval=1\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Link Method\nDESCRIPTION: Method signature for the SeleniumBase function to add a CSS link to a webpage.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nself.add_css_link(css_link)\n```\n\n----------------------------------------\n\nTITLE: Launch SeleniumBase Behave GUI Command\nDESCRIPTION: Command to start the SeleniumBase Behave GUI Commander application with various options\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsbase behave-gui  # all tests\nsbase behave-gui -i=calculator  # tests with \"calculator\" in the name\nsbase behave-gui features/  # tests located in the \"features/\" folder\nsbase behave-gui features/calculator.feature  # tests in that feature\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Tests with Inline Capabilities (Bash)\nDESCRIPTION: These commands show how to run SeleniumBase tests with capabilities specified directly in the command line. The first example uses a remote browser, while the second uses a local Chrome browser.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/desired_capabilities.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest test_swag_labs.py --cap-string='{\"browserName\":\"chrome\",\"name\":\"test1\"}' --server=\"127.0.0.1\" --browser=remote\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py --cap-string='{\"browserName\":\"chrome\",\"name\":\"*\"}' --server=\"127.0.0.1\" --browser=chrome\n```\n\n----------------------------------------\n\nTITLE: Text Visibility Checks with Creative Example in Python using SeleniumBase\nDESCRIPTION: Illustrates how to use the is_text_visible method in SeleniumBase with a creative example function that checks for specific text on a page.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef get_mirror_universe_captain_picard_superbowl_ad(superbowl_year):\n    selector = \"div.superbowl_%s div.commercials div.transcript div.picard\" % superbowl_year\n    if self.is_text_visible(\"For the Love of Marketing and Earl Grey Tea!\", selector):\n        return \"Picard HubSpot Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Delivery Drones... Engage\", selector):\n        return \"Picard Amazon Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Bing it on Screen!\", selector):\n        return \"Picard Microsoft Superbowl Ad 2015\"\n    elif self.is_text_visible(\"OK Glass, Make it So!\", selector):\n        return \"Picard Google Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Number One, I've Never Seen Anything Like It.\", selector):\n        return \"Picard Tesla Superbowl Ad 2015\"\n    elif self.is_text_visible(\"\"\"With the first link, the chain is forged.\n                              The first speech censored, the first thought forbidden,\n                              the first freedom denied, chains us all irrevocably.\"\"\", selector):\n        return \"Picard Wikimedia Superbowl Ad 2015\"\n    elif self.is_text_visible(\"Let us make sure history never forgets the name ... Facebook\", selector):\n        return \"Picard Facebook Superbowl Ad 2015\"\n    else:\n        raise Exception(\"Reports of my assimilation are greatly exaggerated.\")\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Example Test with Pytest\nDESCRIPTION: Command to run an example SeleniumBase test using pytest in headless mode.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npytest examples/my_first_test.py --headless\n```\n\n----------------------------------------\n\nTITLE: Password Decryption in Python Tests\nDESCRIPTION: Demonstrates how to decrypt an obfuscated password within a test script using the encryption module from seleniumbase.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/common/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import encryption\n...\npassword = encryption.decrypt('$^*ENCRYPT=RXlYMSJWTz8HSwM=?&#$')\n```\n\n----------------------------------------\n\nTITLE: Running Test in Demo Mode\nDESCRIPTION: Execute a test with highlighted assertions using demo mode\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest test_swag_labs.py --demo\n```\n\n----------------------------------------\n\nTITLE: Rate-Limited Printing Example in Python\nDESCRIPTION: Demonstrates how to use the rate_limited decorator to control the frequency of method calls in a test class. The example shows printing items with a maximum rate of 3.5 calls per second.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/common/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport unittest\nfrom seleniumbase import decorators\n\nclass MyTestClass(unittest.TestCase):\n\n    @decorators.rate_limited(3.5)  # The arg is max calls per second\n    def print_item(self, item):\n        print(item)\n\n    def test_rate_limited_printing(self):\n        print(\"\\nRunning rate-limited print test:\")\n        for item in range(1, 11):\n            self.print_item(item)\n```\n\n----------------------------------------\n\nTITLE: Customizing test collection in SeleniumBase Commander\nDESCRIPTION: These examples show how to customize which tests are loaded by SeleniumBase Commander by passing additional arguments such as test paths, markers, or keywords.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/commander.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsbase gui\nsbase gui -k agent\nsbase gui -m marker2\nsbase gui test_suite.py\nsbase gui offline_examples/\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Tests with Remote Capabilities (Bash)\nDESCRIPTION: These commands demonstrate how to run SeleniumBase tests using remote capabilities for BrowserStack and Sauce Labs. They specify the remote browser, server, port, and capabilities file.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/desired_capabilities.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --browser=remote --server=USERNAME:KEY@hub.browserstack.com --port=80 --cap_file=capabilities/sample_cap_file_BS.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --browser=remote --server=USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port=443 --protocol=https --cap_file=capabilities/sample_cap_file_SL.py\n```\n\n----------------------------------------\n\nTITLE: Generating Pytest XML Reports\nDESCRIPTION: Shows how to generate XML reports for pytest test runs, which can be used for better reporting in Jenkins.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npytest test_suite.py --junit-xml=report.xml\n```\n\n----------------------------------------\n\nTITLE: Running Test with Mobile Emulation\nDESCRIPTION: Execute a test using Chrome's mobile device emulator\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest test_swag_labs.py --mobile\n```\n\n----------------------------------------\n\nTITLE: Defining SeleniumBase Testing Requirements in Python\nDESCRIPTION: This snippet lists additional dependencies required for testing SeleniumBase. It includes packages for code coverage, linting, and style checking. Version requirements are specified for different Python versions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/requirements.txt#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ncoverage>=7.6.1;python_version<\"3.9\"\ncoverage>=7.8.0;python_version>=\"3.9\"\npytest-cov>=5.0.0;python_version<\"3.9\"\npytest-cov>=6.1.1;python_version>=\"3.9\"\nflake8==5.0.4;python_version<\"3.9\"\nflake8==7.2.0;python_version>=\"3.9\"\nmccabe==0.7.0\npyflakes==2.5.0;python_version<\"3.9\"\npyflakes==3.3.2;python_version>=\"3.9\"\npycodestyle==2.9.1;python_version<\"3.9\"\npycodestyle==2.13.0;python_version>=\"3.9\"\n```\n\n----------------------------------------\n\nTITLE: Running a SeleniumBase Presentation from Command Line\nDESCRIPTION: This bash command demonstrates how to run a SeleniumBase presentation script using pytest. It assumes the script is located in the examples/presenter folder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/presenter/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest my_presentation.py\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase tests with BrowserStack capabilities\nDESCRIPTION: This command demonstrates how to run a SeleniumBase test using BrowserStack with specified capabilities.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --browser=remote --server=USERNAME:KEY@hub.browserstack.com --port=80 --cap_file=capabilities/sample_cap_file_BS.py\n```\n\n----------------------------------------\n\nTITLE: Running Behave BDD Tests with Dashboard\nDESCRIPTION: This command runs Behave BDD tests with the SeleniumBase dashboard enabled and in headless mode, providing a visual dashboard for BDD test results.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbehave behave_bdd/features/ -D dashboard -D headless\n```\n\n----------------------------------------\n\nTITLE: Sauce Labs capabilities in Python\nDESCRIPTION: This Python dictionary defines Sauce Labs capabilities, specifying browser name, version, platform, and additional Sauce Labs options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ncapabilities = {\n    \"browserName\": \"chrome\",\n    \"browserVersion\": \"latest\",\n    \"platformName\": \"macOS 10.14\",\n    \"sauce:options\": {},\n}\n```\n\n----------------------------------------\n\nTITLE: Running Test with Firefox Browser\nDESCRIPTION: Execute a test using Firefox browser instead of the default Chrome\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest my_first_test.py --firefox\n```\n\n----------------------------------------\n\nTITLE: Running Google Tour Example\nDESCRIPTION: Command to execute the Google tour example from the tour_examples directory.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/tour_examples/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest google_tour.py\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Example Test on Firefox\nDESCRIPTION: Command to run an example SeleniumBase test using pytest in headless mode with Firefox browser.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npytest examples/my_first_test.py --headless --browser=firefox\n```\n\n----------------------------------------\n\nTITLE: Running GUI Test Runner\nDESCRIPTION: Launch a simple GUI program for running example tests\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython gui_test_runner.py\n```\n\n----------------------------------------\n\nTITLE: Running Tests on BrowserStack Grid\nDESCRIPTION: Command for running tests on BrowserStack's Selenium Grid using authentication credentials.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --server=USERNAME:KEY@hub.browserstack.com --port=80\n```\n\n----------------------------------------\n\nTITLE: Running a Multi-Chart Presentation in SeleniumBase\nDESCRIPTION: Command to run a multi-chart presentation example from the examples/chart_maker directory.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/chart_maker\npytest chart_presentation.py\n```\n\n----------------------------------------\n\nTITLE: Customizing Dialog Box Options in SeleniumBase\nDESCRIPTION: Example demonstrating how to customize dialog box appearance by setting theme and width options when creating the dialog.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/dialog_boxes/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Themes: bootstrap, modern, material, supervan, light, dark, seamless\noptions = [(\"theme\", \"modern\"), (\"width\", \"50%\")]\nself.get_jqc_text_input(\"You Won!\", [\"OK\"], options)\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Tests with Pytest\nDESCRIPTION: Example of running converted Protractor tests using pytest with reuse-session and guest mode options. Shows test execution output including platform info, Python version, and test results.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/migration/protractor/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pytest --rs -v --guest\n=========================== test session starts ============================\nplatform darwin -- Python 3.11.9, pytest-8.3.3, pluggy-1.5.0 -- /Users/michael/.virtualenvs/sbase11/bin/python\nmetadata: {'Python': '3.11.9', 'Platform': 'macOS-13.2.1-arm64-arm-64bit', 'Packages': {'pytest': '8.3.3', 'pluggy': '1.5.0'}, 'Plugins': {'cov': '6.0.0', 'html': '2.0.1', 'metadata': '3.1.1', 'seleniumbase': '4.33.2', 'ordering': '0.6', 'rerunfailures': '15.0', 'xdist': '3.6.1'}}\nrootdir: /Users/michael/github/SeleniumBase/examples\nconfigfile: pytest.ini\nplugins: html-2.0.1, metadata-3.1.1, seleniumbase-4.33.2, ordering-0.6, rerunfailures-15.0, xdist-3.6.1\ncollected 4 items\n\nexample_test.py::AngularJSHomePageTests::test_greet_user PASSED\nexample_test.py::AngularJSHomePageTests::test_todo_list PASSED\ninput_test.py::AngularMaterialInputTests::test_invalid_input PASSED\nmat_paginator_test.py::AngularMaterialPaginatorTests::test_pagination PASSED\n\n============================ 4 passed in 4.24s =============================\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Google Tour Example\nDESCRIPTION: Command to execute the basic Google search tour example.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/tour_examples/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/tour_examples\npytest google_tour.py\n```\n\n----------------------------------------\n\nTITLE: Launching Xvfb for Headless Browser Testing\nDESCRIPTION: Command to start Xvfb, which provides a virtual framebuffer for headless browser testing.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./Xvfb_launcher.sh\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Case Plans GUI with Bash Command\nDESCRIPTION: Command to launch the SeleniumBase Case Plans GUI, which allows selecting tests for case plan generation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/case_plans.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsbase caseplans\n```\n\n----------------------------------------\n\nTITLE: Running Tests on Sauce Labs Grid\nDESCRIPTION: Command for executing tests on Sauce Labs' Selenium Grid with secure connection parameters.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_grid/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest test_demo_site.py --server=USERNAME:KEY@ondemand.us-east-1.saucelabs.com --port=443 --protocol=https\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase Example Test with Nosetests\nDESCRIPTION: Command to run an example SeleniumBase test using nosetests in headless mode.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnosetests examples/my_first_test.py --headless\n```\n\n----------------------------------------\n\nTITLE: Installing WebDrivers using Homebrew on macOS\nDESCRIPTION: These commands demonstrate how to install ChromeDriver and GeckoDriver using the Homebrew package manager on macOS systems.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/webdriver_installation.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew install --cask chromedriver\n\nbrew install geckodriver\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Browser Drivers in SeleniumBase\nDESCRIPTION: Basic commands for downloading Chrome, Firefox (Gecko), and Edge drivers using SeleniumBase's CLI. These drivers are essential for browser automation and are stored in the seleniumbase/drivers/ folder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/drivers/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase get chromedriver\nseleniumbase get geckodriver\nseleniumbase get edgedriver\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Pie Chart Presentation Example in SeleniumBase\nDESCRIPTION: Command to run a simple pie chart presentation example from the SeleniumBase examples directory.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/chart_maker\npytest my_chart.py\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Dependencies for SeleniumBase\nDESCRIPTION: Command to execute a script that installs necessary Linux dependencies for SeleniumBase.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./Linuxfile.sh\n```\n\n----------------------------------------\n\nTITLE: Test Collection Examples\nDESCRIPTION: Various examples of launching the Behave GUI with different test filtering options, including running all tests, filtering by name, and specifying particular folders or feature files.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/behave_gui.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsbase behave-gui  # all tests\nsbase behave-gui -i=calculator  # tests with \"calculator\" in the name\nsbase behave-gui features/  # tests located in the \"features/\" folder\nsbase behave-gui features/calculator.feature  # tests in that feature\n```\n\n----------------------------------------\n\nTITLE: Running Visual Tests with HTML Report in Bash\nDESCRIPTION: Command to run a visual testing example with pytest HTML reporting. This generates a detailed HTML report that shows the test results and includes visual comparison information.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest test_layout_fail.py --html=report.html\n```\n\n----------------------------------------\n\nTITLE: View Available Behave Steps Command\nDESCRIPTION: Command to display all available predefined Behave steps\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbehave --steps-catalog\n```\n\n----------------------------------------\n\nTITLE: Running the SeleniumBase Recorder in Bash\nDESCRIPTION: Shows two command-line options for launching the SeleniumBase Recorder app: using the Python command or the sbase shortcut command.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/desktop_apps/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython recorder.py\n```\n\nLANGUAGE: bash\nCODE:\n```\nsbase recorder\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Chrome Headless Shell\nDESCRIPTION: Demonstrates how to use chrome-headless-shell for faster test execution in headless mode. Includes instructions for obtaining chrome-headless-shell and running tests with the --chs option.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsbase get chs\n```\n\nLANGUAGE: bash\nCODE:\n```\npytest --chs -n8 --dashboard --html=report.html -v --rs\n```\n\n----------------------------------------\n\nTITLE: Running Maps Tour Example with Pytest\nDESCRIPTION: Command to run the Google Maps tour example using pytest with a 1-second interval between steps.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/tour_examples\npytest maps_introjs_tour.py --interval=1\n```\n\n----------------------------------------\n\nTITLE: Granting Jenkins User Sudo Access\nDESCRIPTION: Command to execute a script that gives the Jenkins (tomcat) user sudo permissions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./tomcat_permissions.sh\n```\n\n----------------------------------------\n\nTITLE: Discovering Behave Tests\nDESCRIPTION: Command to display available behave tests in the terminal.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/behave_gui.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbehave -d\n```\n\n----------------------------------------\n\nTITLE: Installing SeleniumBase in Development Mode\nDESCRIPTION: Installation in editable mode for development purposes, allowing code modifications without reinstallation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase/\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Running pytest with collection-only mode\nDESCRIPTION: This command demonstrates how to run pytest in collection-only mode, which is equivalent to the tests loaded by SeleniumBase Commander.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/commander.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest --co -q\n```\n\n----------------------------------------\n\nTITLE: Multithreaded UC Mode with pytest\nDESCRIPTION: Command for running UC Mode tests in parallel using pytest.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npytest --uc -n 4\n```\n\n----------------------------------------\n\nTITLE: Running a Line Chart Example in SeleniumBase\nDESCRIPTION: Command to run a line chart example from the examples/chart_maker directory.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npytest test_line_chart.py\n```\n\n----------------------------------------\n\nTITLE: MasterQA Setup and Installation Commands\nDESCRIPTION: Shell commands for setting up and running MasterQA example tests from scratch, including cloning the repository and installing dependencies.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/masterqa/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase\npip install .\ncd examples/master_qa\npytest basic_masterqa_test_0.py\npytest masterqa_test_1.py\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to SeleniumBase Linux Integration Folder\nDESCRIPTION: Command to navigate to the Linux integration folder within the SeleniumBase repository.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd SeleniumBase/integrations/linux/\n```\n\n----------------------------------------\n\nTITLE: Displaying Behave Steps Catalog\nDESCRIPTION: Command to view all available Behave steps in the project\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbehave --steps-catalog\n```\n\n----------------------------------------\n\nTITLE: Installing SeleniumBase from Git Clone\nDESCRIPTION: Process to install SeleniumBase by cloning the GitHub repository and installing locally.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/seleniumbase/SeleniumBase.git\ncd SeleniumBase/\npip install .\n```\n\n----------------------------------------\n\nTITLE: Managing Selenium Grid Hub\nDESCRIPTION: Controls Selenium Grid Hub server for parallel test execution across multiple machines.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsbase grid-hub {start|stop|restart} [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Basic UC Mode Test Script\nDESCRIPTION: Simple script to test if UC Mode will work on a specific website using breakpoint functionality.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/uc_mode.md#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom seleniumbase import SB\n\nwith SB(uc=True) as sb:\n    sb.uc_open_with_reconnect(URL, reconnect_time=\"breakpoint\")\n```\n\n----------------------------------------\n\nTITLE: Docker Cleanup Commands\nDESCRIPTION: Set of commands for cleaning up unused Docker containers and images to free up system space.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/docker/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker container prune\ndocker system prune\ndocker images | grep \"<none>\" | awk '{print $3}' | xargs docker rmi\ndocker rm 'docker ps --no-trunc -aq'\n\ndocker rm -f $(docker ps -a -q)\ndocker rmi -f $(docker images -q)\n```\n\n----------------------------------------\n\nTITLE: Defining SeleniumBase Core Dependencies in Python\nDESCRIPTION: This snippet lists the core dependencies required for SeleniumBase, including packages for web automation, testing, and various utility libraries. Version requirements are specified for different Python versions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip>=25.0.1\npackaging>=24.2\nsetuptools~=70.2;python_version<\"3.10\"\nsetuptools>=78.1.0;python_version>=\"3.10\"\nwheel>=0.45.1\nattrs>=25.3.0\ncertifi>=2025.1.31\nexceptiongroup>=1.2.2\nwebsockets~=13.1;python_version<\"3.9\"\nwebsockets>=15.0.1;python_version>=\"3.9\"\nfilelock~=3.16.1;python_version<\"3.9\"\nfilelock>=3.18.0;python_version>=\"3.9\"\nfasteners>=0.19\nmycdp>=1.1.1\npynose>=1.5.4\nplatformdirs>=4.3.6;python_version<\"3.9\"\nplatformdirs>=4.3.7;python_version>=\"3.9\"\ntyping-extensions>=4.13.2\nsbvirtualdisplay>=1.4.0\nMarkupSafe==2.1.5;python_version<\"3.9\"\nMarkupSafe>=3.0.2;python_version>=\"3.9\"\nJinja2>=3.1.6\nsix>=1.17.0\nparse>=1.20.2\nparse-type>=0.6.4\ncolorama>=0.4.6\npyyaml>=6.0.2\npygments>=2.19.1\npyreadline3>=3.5.3;platform_system==\"Windows\"\ntabcompleter>=1.4.0\npdbp>=1.7.0\nidna==3.10\nchardet==5.2.0\ncharset-normalizer==3.4.1\nurllib3>=1.26.20,<2;python_version<\"3.10\"\nurllib3>=1.26.20,<2.5.0;python_version>=\"3.10\"\nrequests==2.32.3\nsniffio==1.3.1\nh11==0.14.0\noutcome==1.3.0.post0\ntrio==0.27.0;python_version<\"3.9\"\ntrio==0.29.0;python_version>=\"3.9\"\ntrio-websocket==0.12.2\nwsproto==1.2.0\nwebsocket-client==1.8.0\nselenium==4.27.1;python_version<\"3.9\"\nselenium==4.31.0;python_version>=\"3.9\"\ncssselect==1.2.0;python_version<\"3.9\"\ncssselect==1.3.0;python_version>=\"3.9\"\nsortedcontainers==2.4.0\nexecnet==2.1.1\niniconfig==2.1.0\npluggable==1.5.0\npytest==8.3.5\npytest-html==4.0.2\npytest-metadata==3.1.1\npytest-ordering==0.6\npytest-rerunfailures==14.0;python_version<\"3.9\"\npytest-rerunfailures==15.0;python_version>=\"3.9\"\npytest-xdist==3.6.1\nparameterized==0.9.0\nbehave==1.2.6\nsoupsieve==2.6\nbeautifulsoup4==4.13.3\npyotp==2.9.0\npython-xlib==0.33;platform_system==\"Linux\"\nmarkdown-it-py==3.0.0\nmdurl==0.1.2\nrich>=14.0.0,<15\n```\n\n----------------------------------------\n\nTITLE: Cloning SeleniumBase Repository in Linux\nDESCRIPTION: Commands to clone the SeleniumBase repository from GitHub into the root directory of the Linux server.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /\nsudo git clone https://github.com/seleniumbase/SeleniumBase.git\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Collection Path\nDESCRIPTION: Command syntax for specifying custom test paths when launching the Behave GUI.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/behave_gui.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsbase behave-gui [OPTIONAL PATH or TEST FILE]\n```\n\n----------------------------------------\n\nTITLE: Pie Chart API Documentation in SeleniumBase ChartMaker\nDESCRIPTION: API documentation for the create_pie_chart method which explains its parameters including chart name, title, subtitle, data series configuration, and display options.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nself.create_pie_chart(\n    chart_name=None, title=None, subtitle=None,\n    data_name=None, unit=None, libs=True):\n\"\"\" Creates a JavaScript pie chart using \"HighCharts\".\n    @Params\n    chart_name - If creating multiple charts,\n                 use this to select which one.\n    title - The title displayed for the chart.\n    subtitle - The subtitle displayed for the chart.\n    data_name - The series name. Useful for multi-series charts.\n                If no data_name, will default to using \"Series 1\".\n    unit - The description label given to the chart's y-axis values.\n    libs - The option to include Chart libraries (JS and CSS files).\n           Should be set to True (default) for the first time creating\n           a chart on a web page. If creating multiple charts on the\n           same web page, you won't need to re-import the libraries\n           when creating additional charts.\n    labels - If True, displays labels on the chart for data points.\n    legend - If True, displays the data point legend on the chart.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Installing SeleniumBase from PyPI\nDESCRIPTION: Basic installation of SeleniumBase using pip package manager from the Python Package Index (PyPI).\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install seleniumbase\n```\n\n----------------------------------------\n\nTITLE: HTML SeleniumBase Logo with GitHub Link\nDESCRIPTION: A centered HTML segment containing an anchor tag to the SeleniumBase GitHub repository with the SeleniumBase logo image.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\"><a href=\"https://github.com/seleniumbase/SeleniumBase/\">\n<img src=\"https://seleniumbase.github.io/img/sb_logo_10.png\" alt=\"SeleniumBase\" width=\"260\" />\n</a></p>\n<!-- View on GitHub -->\n```\n\n----------------------------------------\n\nTITLE: Executing SeleniumBase Test Suite with MySQL Reporting\nDESCRIPTION: Jenkins job command to run a SeleniumBase test suite with headless mode and MySQL database reporting enabled.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npytest examples/test_suite.py --headless --with-db_reporting\n```\n\n----------------------------------------\n\nTITLE: Installing ChromeDriver\nDESCRIPTION: Command to install ChromeDriver using SeleniumBase's built-in installer.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo seleniumbase install chromedriver\n```\n\n----------------------------------------\n\nTITLE: Finding chromedriver processes using ps and grep (Bash)\nDESCRIPTION: A command that combines ps and grep to find all running chromedriver processes. This is useful for managing SeleniumBase test executions and cleaning up leftover processes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/useful_grep_commands.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nps -ef |grep chromedriver\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip and setuptools to Latest Version\nDESCRIPTION: This command upgrades pip and setuptools to their latest versions using Python's pip module.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install_python_pip_git.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --upgrade pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Breaking Down Recording Process into Separate Commands\nDESCRIPTION: Alternative approach showing how to split the recording process into four distinct commands: creating a boilerplate test, running with the recorder, printing the result, and copying the final test.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/recorder_mode.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsbase mkfile TEST_NAME.py --rec\n\npytest TEST_NAME.py --rec -q -s\n\nsbase print ./recordings/TEST_NAME_rec.py -n\n\ncp ./recordings/TEST_NAME_rec.py ./TEST_NAME.py\n```\n\n----------------------------------------\n\nTITLE: Specifying the test path for Swag Labs login test\nDESCRIPTION: Identifies the test module, class, and test method to be executed in the SwagLabsLoginTests suite. The test verifies login and logout functionality.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/test_login.SwagLabsLoginTests.test_swag_labs_login.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntest_login.py::SwagLabsLoginTests::test_swag_labs_login\n```\n\n----------------------------------------\n\nTITLE: Running Example Test\nDESCRIPTION: Command to run an example SeleniumBase test in headless Chrome to verify the installation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npytest examples/my_first_test.py --headless --browser=chrome\n```\n\n----------------------------------------\n\nTITLE: Starting Xvfb Display\nDESCRIPTION: Command to start the Xvfb display for headless browser testing.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./Xvfb_launcher.sh\n```\n\n----------------------------------------\n\nTITLE: Managing Virtual Environments with virtualenvwrapper\nDESCRIPTION: Common virtualenvwrapper commands for deactivating, activating, listing, and deleting virtual environments.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndeactivate\nworkon sbase_env\nworkon\nrmvirtualenv sbase_env\n```\n\n----------------------------------------\n\nTITLE: Launching SeleniumBase Behave GUI\nDESCRIPTION: Basic command to start the SeleniumBase Behave GUI Commander application.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/behave_gui.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n> sbase behave-gui\n* Starting the SeleniumBase Behave Commander GUI App...\n```\n\n----------------------------------------\n\nTITLE: Product Selection and UI Elements\nDESCRIPTION: Product name and button text references used in the test case for Swag Labs shopping flow.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/my_first_test.MyTestClass.test_swag_labs.md#2025-04-19_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nBackpack\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nADD TO CART\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nREMOVE\n```\n\n----------------------------------------\n\nTITLE: Special Keys Input Example in Python\nDESCRIPTION: Example showing how to input special keyboard keys like space, backspace and newline using Selenium's Keys class.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom selenium.webdriver.common.keys import Keys\nself.find_element(\"textarea\").send_keys(Keys.SPACE + Keys.BACK_SPACE + '\\n')  # The backspace should cancel out the space, leaving you with the newline\n```\n\n----------------------------------------\n\nTITLE: Upgrading NodeJS using npm\nDESCRIPTION: This command upgrades NodeJS to the latest version using npm. It's recommended to run this if using an older version of NodeJS.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/node_js/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g npm@latest\n```\n\n----------------------------------------\n\nTITLE: Using the behave-gui Command\nDESCRIPTION: This snippet demonstrates how to use the behave-gui command to launch SeleniumBase Commander / GUI for Behave. It includes examples of running the command with different options and paths.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsbase behave-gui\nsbase behave-gui -i=calculator\nsbase behave-gui features/\nsbase behave-gui features/calculator.feature\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to run a script that installs necessary dependencies for SeleniumBase.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./Linuxfile.sh\n```\n\n----------------------------------------\n\nTITLE: Installing virtualenvwrapper on macOS/Linux\nDESCRIPTION: Commands to install virtualenvwrapper, set the WORKON_HOME environment variable, and source the virtualenvwrapper script on macOS or Linux systems.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install virtualenvwrapper --force-reinstall\nexport WORKON_HOME=$HOME/.virtualenvs\nsource `which virtualenvwrapper.sh`\n```\n\n----------------------------------------\n\nTITLE: Running HTML Inspector Test with pytest\nDESCRIPTION: This bash snippet shows the command to run the HTML Inspector test using pytest. It also includes sample output from the test, highlighting various HTML issues detected by the inspector.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/html_inspector.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest test_inspect_html.py\n============== test session starts ==============\n\n* HTML Inspection Results: https://xkcd.com/1144/\n⚠️  'property' is not a valid attribute of the <meta> element.\n⚠️  Do not use <div> or <span> elements without any attributes.\n⚠️  'srcset' is not a valid attribute of the <img> element.\n⚠️  The 'border' attribute is no longer valid on the <img> element.\n⚠️  The <center> element is obsolete.\n⚠️  The id 'comicLinks' appears more than once in the document.\n* (See the Console output for details!)\n```\n\n----------------------------------------\n\nTITLE: Using standard_user credentials for Swag Labs login\nDESCRIPTION: Username to be used during the login step of the test. This is one of the predefined test users for the Sauce Demo website.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/test_login.SwagLabsLoginTests.test_swag_labs_login.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nstandard_user\n```\n\n----------------------------------------\n\nTITLE: Failed Test Example in Python\nDESCRIPTION: Example test that intentionally fails by looking for a non-existent element on XKCD.com. Used to demonstrate SeleniumBase's logging and screenshot functionality on test failures.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\" test_fail.py \"\"\"\nfrom seleniumbase import BaseCase\n\nclass MyTestClass(BaseCase):\n\n    def test_find_army_of_robots_on_xkcd_desert_island(self):\n        self.open(\"https://xkcd.com/731/\")\n        self.assert_element(\"div#ARMY_OF_ROBOTS\", timeout=1)  # This should fail\n```\n\n----------------------------------------\n\nTITLE: Installing SeleniumBase Python Requirements\nDESCRIPTION: Command to install the Python package requirements for SeleniumBase using pip.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo pip install -r requirements.txt --upgrade\n```\n\n----------------------------------------\n\nTITLE: RealWorld App Feature File Example\nDESCRIPTION: Gherkin feature file showing login/logout scenario for the RealWorld application\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/behave/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: SeleniumBase scenarios for the RealWorld App\n\n  Scenario: Verify RealWorld App (log in / sign out)\n    Given Open \"seleniumbase.io/realworld/login\"\n    And Clear Session Storage\n    When Type \"demo_user\" into \"#username\"\n    And Type \"secret_pass\" into \"#password\"\n    And Do MFA \"GAXG2MTEOR3DMMDG\" into \"#totpcode\"\n    Then Assert text \"Welcome!\" in \"h1\"\n    And Highlight element \"img#image1\"\n    And Click 'a:contains(\"This Page\")'\n    And Save screenshot to logs\n    When Click link \"Sign out\"\n    Then Assert element 'a:contains(\"Sign in\")'\n    And Assert text \"You have been signed out!\"\n```\n\n----------------------------------------\n\nTITLE: Switching to Jenkins User\nDESCRIPTION: Commands to switch to the Jenkins user and enter a bash shell.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo su jenkins\nbash\n```\n\n----------------------------------------\n\nTITLE: Aliasing Python in Virtual Environment\nDESCRIPTION: Command to create an alias for python to python3 in a virtual environment on macOS or Linux.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nalias python=python3\n```\n\n----------------------------------------\n\nTITLE: Setting up MySQL on standard Ubuntu Linux\nDESCRIPTION: Commands for installing and configuring MySQL on a standard Ubuntu Linux environment. This includes updating repositories, installing MySQL server, securing the installation, and creating a test database.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mysql_installation.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install mysql-server\nsudo mysql_secure_installation\nsudo mysql -e 'CREATE DATABASE IF NOT EXISTS test_db;'\nsudo mysql -h 127.0.0.1 -u root test_db < seleniumbase/core/create_db_tables.sql\nsudo service mysql restart\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Node\nDESCRIPTION: This command starts a Selenium Grid Node for local testing with SeleniumBase.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsbase grid-node start\n```\n\n----------------------------------------\n\nTITLE: Running Test with PyNose\nDESCRIPTION: Execute a test using PyNose test runner instead of pytest\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npynose my_first_test.py\n```\n\n----------------------------------------\n\nTITLE: Installing SeleniumBase Requirements\nDESCRIPTION: Command to install the Python requirements for SeleniumBase using pip.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo pip install -r requirements.txt --upgrade\n```\n\n----------------------------------------\n\nTITLE: Granting Jenkins User Sudo Access\nDESCRIPTION: Command to execute a script that gives the Jenkins user sudo access on the system.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./jenkins_permissions.sh\n```\n\n----------------------------------------\n\nTITLE: Upgrading SeleniumBase from PyPI\nDESCRIPTION: Command to upgrade an existing SeleniumBase installation to the latest version from PyPI.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -U seleniumbase\n```\n\n----------------------------------------\n\nTITLE: Running SeleniumBase tests with database reporting enabled\nDESCRIPTION: Command to run pytest with the database reporting feature enabled, which allows test results to be written to the MySQL database.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mysql_installation.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest --with-db_reporting\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment with venv on Windows\nDESCRIPTION: Commands to create a Python virtual environment named 'sbase_env' using venv and activate it on Windows systems.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npy -m venv sbase_env\ncall sbase_env\\Scripts\\activate\n```\n\n----------------------------------------\n\nTITLE: Standard Pytest Command Options\nDESCRIPTION: Common pytest command-line options for test execution control and reporting\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n-v\n-q\n-x\n--html=report.html\n--co | --collect-only\n--co -q\n-n=NUM\n-s\n--junit-xml=report.xml\n--pdb\n--trace\n-m=MARKER\n```\n\n----------------------------------------\n\nTITLE: View SeleniumBase Options Commands\nDESCRIPTION: Commands to display available SeleniumBase options\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/customizing_test_runs.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nseleniumbase options\n```\n\nLANGUAGE: bash\nCODE:\n```\nsbase options\n```\n\n----------------------------------------\n\nTITLE: Configuring Test User Credentials in CSV Format\nDESCRIPTION: Defines credentials for three user types: admin, employee, and customer. Each line contains role, username, and password in comma-separated format for QA testing purposes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/boilerplates/samples/file_parsing/qa_login_example.txt#2025-04-19_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nadmin,admin_username_qa,admin_password_qa\nemployee,employee_username_qa,employee_password_qa\ncustomer,customer_username_qa,customer_password_qa\n```\n\n----------------------------------------\n\nTITLE: Starting MySQL service on MacOS\nDESCRIPTION: Command to start the MySQL service on MacOS after installation.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mysql_installation.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start mysql\n```\n\n----------------------------------------\n\nTITLE: Installing SeleniumBase\nDESCRIPTION: Command to install SeleniumBase using the setup.py script.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo python setup.py develop\n```\n\n----------------------------------------\n\nTITLE: Setting up MySQL for GitHub Actions in Ubuntu Linux\nDESCRIPTION: Commands for installing and configuring MySQL in a GitHub Actions environment. This includes starting the MySQL service, creating a test database, importing table schemas, and setting up user credentials.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mysql_installation.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo /etc/init.d/mysql start\nmysql -e 'CREATE DATABASE IF NOT EXISTS test_db;' -uroot -proot\nwget https://raw.githubusercontent.com/seleniumbase/SeleniumBase/master/seleniumbase/core/create_db_tables.sql\nsudo mysql -h 127.0.0.1 -uroot -proot test_db < create_db_tables.sql\nsudo mysql -e 'ALTER USER \"root\"@\"localhost\" IDENTIFIED BY \"test\";' -uroot -proot\nsudo service mysql restart\n```\n\n----------------------------------------\n\nTITLE: Login Credentials for Swag Labs\nDESCRIPTION: Username to be used for logging into the Swag Labs e-commerce website during testing.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/my_first_test.MyTestClass.test_swag_labs.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nstandard_user\n```\n\n----------------------------------------\n\nTITLE: Creating Charts with mkchart\nDESCRIPTION: Generates chart presentations using SeleniumBase with support for multiple languages and themes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsbase mkchart new_chart.py --en\n```\n\n----------------------------------------\n\nTITLE: Linking to SeleniumBase Documentation Home Page\nDESCRIPTION: This snippet provides a markdown link to the SeleniumBase documentation home page. It directs users to the main documentation site for the project.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/mkdocs_build/ReadMe.txt#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://seleniumbase.io\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL on MacOS with Homebrew\nDESCRIPTION: Command to install MySQL on MacOS using Homebrew package manager.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mysql_installation.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install mysql\n```\n\n----------------------------------------\n\nTITLE: Installing Test Runner dependencies\nDESCRIPTION: This command installs the necessary dependencies for the SeleniumBase Test Runner. It should be run in the node_js directory of the SeleniumBase integrations folder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/node_js/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Ensuring pip Installation with Python\nDESCRIPTION: This command ensures that pip is installed with the default version using Python's ensurepip module.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install_python_pip_git.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m ensurepip --default-pip\n```\n\n----------------------------------------\n\nTITLE: Building SeleniumBase Documentation with MkDocs\nDESCRIPTION: This command builds the SeleniumBase documentation using MkDocs. It can be run with or without the '--strict' flag, which will cause the build to fail on warnings.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/mkdocs_build/docs_instructions.txt#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdocs build  (OR \"mkdocs build --strict\" to fail on warnings)\n```\n\n----------------------------------------\n\nTITLE: Staging Credentials Configuration for SeleniumBase Tests\nDESCRIPTION: Configuration data storing credentials for three user roles (admin, employee, customer) in a staging environment. Each line contains a role identifier followed by the username and password for that role, in comma-separated format.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/boilerplates/samples/file_parsing/staging_login_example.txt#2025-04-19_snippet_0\n\nLANGUAGE: csv\nCODE:\n```\nadmin,admin_username_staging,admin_password_staging\nemployee,employee_username_staging,employee_password_staging\ncustomer,customer_username_staging,customer_password_staging\n```\n\n----------------------------------------\n\nTITLE: Changing MySQL root password on Ubuntu\nDESCRIPTION: Commands to change the MySQL root password from 'root' to 'test' and restart the MySQL service to apply changes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mysql_installation.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmysqladmin -u root -p'root' password 'test'\nsudo service mysql restart\n```\n\n----------------------------------------\n\nTITLE: Installing SeleniumBase Package\nDESCRIPTION: Command to install the SeleniumBase package in development mode.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo python setup.py develop\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip and setuptools (Alternative Method)\nDESCRIPTION: This command upgrades pip and setuptools to their latest versions using pip directly. It may require additional permissions or a virtual environment.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/install_python_pip_git.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -U pip setuptools\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs Dependencies for SeleniumBase Documentation\nDESCRIPTION: This command installs the required dependencies for building the SeleniumBase documentation using MkDocs. It should be run from the top-level SeleniumBase folder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/mkdocs_build/docs_instructions.txt#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install -r mkdocs_build/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Example Boilerplate Case Plan in Markdown Format\nDESCRIPTION: Shows the default boilerplate code structure generated for new case plans, including a simple Markdown table with placeholders for test steps.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/case_plans.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n``proxy_test.py::ProxyTests::test_proxy``\n---\n| # | Step Description | Expected Result |\n| - | ---------------- | --------------- |\n| 1 | Perform Action 1 | Verify Action 1 |\n| 2 | Perform Action 2 | Verify Action 2 |\n```\n\n----------------------------------------\n\nTITLE: Starting Selenium Grid Hub\nDESCRIPTION: This command starts the Selenium Grid Hub for local testing with SeleniumBase.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/capabilities/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsbase grid-hub start\n```\n\n----------------------------------------\n\nTITLE: Cloning SeleniumBase Repository\nDESCRIPTION: Commands to navigate to the root directory and clone the SeleniumBase repository using git.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /\nsudo git clone https://github.com/seleniumbase/SeleniumBase.git\n```\n\n----------------------------------------\n\nTITLE: Switching to Jenkins User and Entering Bash Shell\nDESCRIPTION: Commands to switch to the Jenkins (tomcat) user and enter a bash shell.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/google_cloud/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo su tomcat\nbash\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Web Server for Brython Applications\nDESCRIPTION: Command to start a Python HTTP server in the current directory for testing Brython applications. The server can be accessed at http://localhost:8000/ and stopped using Ctrl+C.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/brython/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Page Source Parsing Example in Python\nDESCRIPTION: Example showing how to parse HTML page source using Python string operations to extract content between specific tags.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/chinese.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsource = self.get_page_source()\nhead_open_tag = source.find('<head>')\nhead_close_tag = source.find('</head>', head_open_tag)\neverything_inside_head = source[head_open_tag+len('<head>'):head_close_tag]\n```\n\n----------------------------------------\n\nTITLE: Setting Up SSH Port Forwarding\nDESCRIPTION: Command to set up SSH port forwarding for secure access to Jenkins, to be run on the local machine.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nssh -L 127.0.0.1:8080:localhost:8080 USERNAME@DNS_NAME\n```\n\n----------------------------------------\n\nTITLE: Loading IntroJS CSS Example\nDESCRIPTION: Example showing how to load the IntroJS CSS styles from a CDN link into a webpage.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/js_package_manager.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nself.add_css_link(\"https://cdnjs.cloudflare.com/ajax/libs/intro.js/2.9.3/introjs.css\")\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Slides with Highlighting in SeleniumBase\nDESCRIPTION: These HTML snippets show how the special <mk-n> tags are converted to <mark> tags in the generated HTML slides. Each snippet represents a different generated slide with progressive highlighting.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/presenter/ReadMe.md#2025-04-19_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p><mark>Highlight this on the first generated slide</mark></p>\n<p>Highlight this on the second generated slide</p>\n<p>Highlight this on the third generated slide</p>\n<p>Highlight this on the fourth generated slide></p>\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>Highlight this on the first generated slide</p>\n<p><mark>Highlight this on the second generated slide</mark></p>\n<p>Highlight this on the third generated slide</p>\n<p>Highlight this on the fourth generated slide></p>\n```\n\n----------------------------------------\n\nTITLE: Installing virtualenvwrapper on Windows\nDESCRIPTION: Command to install virtualenvwrapper for Windows using pip.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/virtualenv_instructions.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npy -m pip install virtualenvwrapper-win --force-reinstall --user\n```\n\n----------------------------------------\n\nTITLE: Navigating to SeleniumBase Directory\nDESCRIPTION: Command to change directory to the main SeleniumBase folder.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd /SeleniumBase\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins Job Build Step\nDESCRIPTION: Shell command to be added as a build step in the Jenkins job configuration to run the example test.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd examples\npytest my_first_test.py --headless\n```\n\n----------------------------------------\n\nTITLE: Configuring Jenkins CSP for HTML Reports\nDESCRIPTION: This JavaScript command configures Jenkins Content Security Policy settings to correctly render HTML reports. It needs to be run in the Jenkins Script Console.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/example_logs/ReadMe.md#2025-04-19_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nSystem.setProperty(\"hudson.model.DirectoryBrowserSupport.CSP\", \"\")\n```\n\n----------------------------------------\n\nTITLE: Referencing Azure Pipelines YAML Configuration for SeleniumBase\nDESCRIPTION: This snippet references the azure-pipelines.yml configuration file that needs to be copied from the SeleniumBase repository to set up the CI/CD pipeline in Azure DevOps. The file defines the test environment and execution parameters for running automated browser tests.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/azure_pipelines/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nazure-pipelines.yml\n```\n\n----------------------------------------\n\nTITLE: Installing Brython Package with pip\nDESCRIPTION: Command to install the Brython package using pip. This is the first step required before creating Brython web applications.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/brython/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install brython\n```\n\n----------------------------------------\n\nTITLE: Original Katalon Recorder Exported Python Script\nDESCRIPTION: An example of a messy Python test script exported from Katalon Recorder in WebDriver + unittest format. It contains unnecessary code and lacks the clean structure of SeleniumBase.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/selenium_ide/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.common.exceptions import NoAlertPresentException\nimport unittest, time, re\n\nclass Swag(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.base_url = \"https://www.google.com/\"\n        self.verificationErrors = []\n        self.accept_next_alert = True\n\n    def test_swag(self):\n        driver = self.driver\n        driver.get(\"https://www.saucedemo.com/\")\n        driver.find_element_by_id(\"user-name\").click()\n        driver.find_element_by_id(\"user-name\").clear()\n        driver.find_element_by_id(\"user-name\").send_keys(\"standard_user\")\n        driver.find_element_by_id(\"password\").click()\n        driver.find_element_by_id(\"password\").clear()\n        driver.find_element_by_id(\"password\").send_keys(\"secret_sauce\")\n        driver.find_element_by_id(\"login-button\").click()\n\n    def is_element_present(self, how, what):\n        try: self.driver.find_element(by=how, value=what)\n        except NoSuchElementException as e: return False\n        return True\n\n    def is_alert_present(self):\n        try: self.driver.switch_to_alert()\n        except NoAlertPresentException as e: return False\n        return True\n\n    def close_alert_and_get_its_text(self):\n        try:\n            alert = self.driver.switch_to_alert()\n            alert_text = alert.text\n            if self.accept_next_alert:\n                alert.accept()\n            else:\n                alert.dismiss()\n            return alert_text\n        finally: self.accept_next_alert = True\n\n    def tearDown(self):\n        self.driver.quit()\n        self.assertEqual([], self.verificationErrors)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Defining MkDocs Dependencies for SeleniumBase Documentation\nDESCRIPTION: A requirements specification file listing all necessary Python packages and their versions required for generating the seleniumbase.io documentation website. The minimum Python version requirement is 3.9 for documentation generation purposes.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/mkdocs_build/requirements.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nregex>=2024.11.6\npymdown-extensions>=10.14.3\npipdeptree>=2.26.0\npython-dateutil>=2.8.2\nMarkdown==3.7\nclick==8.1.8\nghp-import==2.1.0\nwatchdog==6.0.0\ncairocffi==1.7.1\npathspec==0.12.1\nBabel==2.17.0\npaginate==0.5.7\nmkdocs==1.6.1\nmkdocs-material==9.6.11\nmkdocs-exclude-search==0.6.6\nmkdocs-simple-hooks==0.1.5\nmkdocs-material-extensions==1.3.1\n```\n\n----------------------------------------\n\nTITLE: Test Failure Output Example\nDESCRIPTION: Example of how test failures are displayed in the console output\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/behave_bdd/ReadMe.md#2025-04-19_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nFeature: SeleniumBase scenarios for the Fail Page # features/fail_page.feature:1\n\n  Scenario: Fail test on purpose to see what happens  # features/fail_page.feature:3\n    When Open the Fail Page                           # features/steps/fail_page.py:4\n    Then Fail test on purpose                         # features/steps/fail_page.py:9\n      Assertion Failed: This test fails on purpose!\n      Captured stdout:\n      >>> STEP FAILED:  (#2) Fail test on purpose\n      Class / Feature:  SeleniumBase scenarios for the Fail Page\n      Test / Scenario:  Fail test on purpose to see what happens\n\n   ❌ Scenario Failed!\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for SeleniumBase Documentation\nDESCRIPTION: Simple HTML comment indicating SeleniumBase documentation section.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/console_scripts/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- SeleniumBase Docs -->\n```\n\n----------------------------------------\n\nTITLE: Shadow Root Test Case Identifier\nDESCRIPTION: Test case identifier following Python unittest format for shadow root testing functionality\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/shadow_root_test.ShadowRootTest.test_shadow_root.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nshadow_root_test.py::ShadowRootTest::test_shadow_root\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS Finder to Show Hidden Files via Terminal\nDESCRIPTION: Command to enable visibility of hidden files in macOS Finder through terminal. This setting persists until changed and requires reopening Finder after execution.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/hidden_files_info.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndefaults write com.apple.finder AppleShowAllFiles -bool true\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for SeleniumBase Documentation\nDESCRIPTION: Simple HTML comment tag indicating the start of SeleniumBase documentation section.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/chart_maker/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- SeleniumBase Docs -->\n```\n\n----------------------------------------\n\nTITLE: Displaying SeleniumBase Logo in Markdown\nDESCRIPTION: This snippet shows how to embed the SeleniumBase logo image in a markdown file with specific attributes such as title, width, and alt text.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/unit_tests/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"https://seleniumbase.github.io/img/logo3.png\" title=\"SeleniumBase\" width=\"20\" />\n```\n\n----------------------------------------\n\nTITLE: Original Katalon Exported Test Script\nDESCRIPTION: Example of a messy test script exported from Katalon Recorder in WebDriver + unittest format, containing unnecessary code and verbosity\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/utilities/selenium_ide/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.common.exceptions import NoAlertPresentException\nimport unittest, time, re\n\nclass Swag(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.base_url = \"https://www.google.com/\"\n        self.verificationErrors = []\n        self.accept_next_alert = True\n\n    def test_swag(self):\n        driver = self.driver\n        driver.get(\"https://www.saucedemo.com/\")\n        driver.find_element_by_id(\"user-name\").click()\n        driver.find_element_by_id(\"user-name\").clear()\n        driver.find_element_by_id(\"user-name\").send_keys(\"standard_user\")\n        driver.find_element_by_id(\"password\").click()\n        driver.find_element_by_id(\"password\").clear()\n        driver.find_element_by_id(\"password\").send_keys(\"secret_sauce\")\n        driver.find_element_by_id(\"login-button\").click()\n\n    def is_element_present(self, how, what):\n        try: self.driver.find_element(by=how, value=what)\n        except NoSuchElementException as e: return False\n        return True\n\n    def is_alert_present(self):\n        try: self.driver.switch_to_alert()\n        except NoAlertPresentException as e: return False\n        return True\n\n    def close_alert_and_get_its_text(self):\n        try:\n            alert = self.driver.switch_to_alert()\n            alert_text = alert.text\n            if self.accept_next_alert:\n                alert.accept()\n            else:\n                alert.dismiss()\n            return alert_text\n        finally: self.accept_next_alert = True\n\n    def tearDown(self):\n        self.driver.quit()\n        self.assertEqual([], self.verificationErrors)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Checkout Process UI Elements\nDESCRIPTION: Button and page references for the checkout process on the Swag Labs website.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/case_plans/my_first_test.MyTestClass.test_swag_labs.md#2025-04-19_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nCHECKOUT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nCONTINUE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nCHECKOUT: OVERVIEW\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nFINISH\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nThank you\n```\n\n----------------------------------------\n\nTITLE: Original Katalon Exported WebDriver Test Script\nDESCRIPTION: An example of a Python test script directly exported from Katalon Recorder using the WebDriver + unittest format. Contains unnecessary code and is less maintainable than the converted version.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/katalon/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.common.exceptions import NoAlertPresentException\nimport unittest, time, re\n\nclass Swag(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.base_url = \"https://www.google.com/\"\n        self.verificationErrors = []\n        self.accept_next_alert = True\n\n    def test_swag(self):\n        driver = self.driver\n        driver.get(\"https://www.saucedemo.com/\")\n        driver.find_element_by_id(\"user-name\").click()\n        driver.find_element_by_id(\"user-name\").clear()\n        driver.find_element_by_id(\"user-name\").send_keys(\"standard_user\")\n        driver.find_element_by_id(\"password\").click()\n        driver.find_element_by_id(\"password\").clear()\n        driver.find_element_by_id(\"password\").send_keys(\"secret_sauce\")\n        driver.find_element_by_id(\"login-button\").click()\n\n    def is_element_present(self, how, what):\n        try: self.driver.find_element(by=how, value=what)\n        except NoSuchElementException as e: return False\n        return True\n\n    def is_alert_present(self):\n        try: self.driver.switch_to_alert()\n        except NoAlertPresentException as e: return False\n        return True\n\n    def close_alert_and_get_its_text(self):\n        try:\n            alert = self.driver.switch_to_alert()\n            alert_text = alert.text\n            if self.accept_next_alert:\n                alert.accept()\n            else:\n                alert.dismiss()\n            return alert_text\n        finally: self.accept_next_alert = True\n\n    def tearDown(self):\n        self.driver.quit()\n        self.assertEqual([], self.verificationErrors)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL test results\nDESCRIPTION: Command to query the MySQL database for test execution results. This retrieves test data including test address, browser used, test state, start time, and runtime.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/mysql_installation.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysql -e 'select test_address,browser,state,start_time,runtime from test_db.test_run_data;' -uroot -ptest\n```\n\n----------------------------------------\n\nTITLE: Structuring SeleniumBase Documentation Home Page in HTML\nDESCRIPTION: This HTML snippet defines the structure of the SeleniumBase documentation home page. It includes a favicon, title, logo, and links to the SeleniumBase GitHub repository and main documentation site.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/mkdocs_build/index.txt#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!doctype html>\n<html lang=\"en\" class=\"no-js\">\n<head>\n      <link rel=\"shortcut icon\" href=\"https://seleniumbase.io/img/logo3a.png\">\n      <title>SeleniumBase</title>\n</head>\n<body>\n<p><a href=\"https://github.com/seleniumbase/SeleniumBase/\"><img src=\"https://seleniumbase.io/img/sb_logo_10.png\" alt=\"SeleniumBase\" width=\"275\" /></a></p>\n<h1><img src=\"https://seleniumbase.io/img/logo6.png\" title=\"SeleniumBase\" width=\"32\" /> Docs Home Page:</h1>\n\n<h2><img src=\"https://seleniumbase.io/img/logo6.png\" title=\"SeleniumBase\" width=\"32\" /> <a href=\"https://seleniumbase.io\">https://seleniumbase.io</a></h2>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Links Structure for SeleniumBase\nDESCRIPTION: A collection of HTML div elements with anchor tags linking to various SeleniumBase documentation pages. Each link includes a bolded title describing the documentation resource.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div><a href=\"https://seleniumbase.dev/help_docs/method_summary\"><b>Method Summary (API Ref)</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/case_plans\"><b>Case Plans</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/translations\"><b>Language Translations</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/locale_codes\"><b>Language Locale Codes</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/js_package_manager\"><b>JS Package Manager</b></a></div>\n<div><a href=\"https://seleniumbase.dev/examples/tour_examples/\"><b>Tour Examples</b></a></div>\n<div><a href=\"https://seleniumbase.dev/examples/presenter/\"><b>Presentation Maker</b></a></div>\n<div><a href=\"https://seleniumbase.dev/examples/chart_maker/\"><b>Chart Maker</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/mysql_installation\"><b>Handling iframes</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/handling_iframes\"><b>MySQL Installation Overview</b></a></div>\n<div><a href=\"https://seleniumbase.dev/seleniumbase/utilities/selenium_grid/\"><b>Using the Selenium Grid</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/desired_capabilities\"><b>Browser Desired Capabilities</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/using_safari_driver\"><b>Safari Driver Detailed Info</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/hidden_files_info\"><b>Seeing Hidden Files on macOS</b></a></div>\n<div><a href=\"https://seleniumbase.dev/help_docs/happy_customers\"><b>Case Studies</b></a></div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Jenkins Initial Admin Password\nDESCRIPTION: Command to retrieve the initial admin password for Jenkins from the server.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n----------------------------------------\n\nTITLE: SSH into Jenkins Azure Instance\nDESCRIPTION: Command to SSH into the newly created Jenkins instance on Azure using the username and IP address.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nssh USERNAME@IP_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Browser Driver Versions in SeleniumBase\nDESCRIPTION: Advanced commands for downloading specific versions of browser drivers, including stable, beta, dev, and canary versions. Shows how to specify exact version numbers and use shortcuts like 'mlatest' for milestone versions.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/drivers/ReadMe.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsbase get chromedriver 114\nsbase get chromedriver 114.0.5735.90\nsbase get chromedriver stable\nsbase get chromedriver beta\nsbase get chromedriver dev\nsbase get chromedriver canary\nsbase get chromedriver previous\nsbase get chromedriver mlatest\nsbase get edgedriver 115.0.1901.183\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for SeleniumBase Documentation\nDESCRIPTION: A simple HTML comment indicating that this file is related to SeleniumBase documentation. The comment serves as a marker for the purpose of the file.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/presenter/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- SeleniumBase Docs -->\n```\n\n----------------------------------------\n\nTITLE: Displaying SeleniumBase Logo in HTML\nDESCRIPTION: This HTML snippet centers and displays the SeleniumBase logo image with specific attributes for alignment, source, alt text, title, and width.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/help_docs/ReadMe.md#2025-04-19_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<p align=\"center\"><a href=\"https://github.com/seleniumbase/SeleniumBase/\"><img src=\"https://seleniumbase.github.io/cdn/img/sb_word_cloud.png\" alt=\"SeleniumBase\" title=\"SeleniumBase\" width=\"330\" /></a></p>\n```\n\n----------------------------------------\n\nTITLE: Removing Elements and Checking Visual Layout in SeleniumBase\nDESCRIPTION: This code demonstrates how to remove an element from a webpage using remove_element() and then check for visual layout differences with a high comparison level (level=3).\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/examples/visual_testing/case_plans/test_layout_fail.VisualLayout_FixtureTests.test_python_home_change.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nremove_element(SELECTOR)\ncheck_window(level=3)\n```\n\n----------------------------------------\n\nTITLE: Uploading SeleniumBase Artifacts in GitHub Actions\nDESCRIPTION: Configuration for uploading SeleniumBase-generated presentation files as artifacts using GitHub's upload-artifact@v4 action. This allows for downloading generated presentations after workflow completion.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/github/workflows/extras.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n    - uses: actions/upload-artifact@v4\n      with:\n        name: Click to download the presentation\n        path: saved_presentations/my_presentation.html\n```\n\n----------------------------------------\n\nTITLE: Navigating to Linux Integration Folder\nDESCRIPTION: Command to change directory to the Linux integration folder in the SeleniumBase repository.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/azure/jenkins/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd SeleniumBase/integrations/linux/\n```\n\n----------------------------------------\n\nTITLE: Simple MasterQA Verification Examples\nDESCRIPTION: Examples of how to implement verification steps in MasterQA tests, showing both default and custom question implementations.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/seleniumbase/masterqa/ReadMe.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nself.verify()\n\nself.verify(\"Can you find the moon?\")\n```\n\n----------------------------------------\n\nTITLE: Entering Docker Interactive Shell\nDESCRIPTION: Command to enter and stay inside the Docker container's interactive shell.\nSOURCE: https://github.com/seleniumbase/seleniumbase/blob/master/integrations/docker/ReadMe.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -i -t seleniumbase\n```"
  }
]