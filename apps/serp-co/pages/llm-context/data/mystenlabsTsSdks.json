[
  {
    "owner": "mystenlabs",
    "repo": "ts-sdks",
    "content": "TITLE: Executing Move Call in Sui\nDESCRIPTION: TypeScript code showing how to execute a Move call in Sui using the SuiClient and Ed25519Keypair.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction } from '@mysten/sui/transactions';\n\n// Generate a new Ed25519 Keypair\nconst keypair = new Ed25519Keypair();\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\nconst packageObjectId = '0x...';\nconst tx = new Transaction();\ntx.moveCall({\n\ttarget: `${packageObjectId}::nft::mint`,\n\targuments: [tx.pure.string('Example NFT')],\n});\nconst result = await client.signAndExecuteTransaction({\n\tsigner: keypair,\n\ttransaction: tx,\n});\nconsole.log({ result });\n```\n\n----------------------------------------\n\nTITLE: Creating Sponsored Transactions with Transaction Builder in TypeScript\nDESCRIPTION: Demonstrates how to create a sponsored transaction by first building a transaction kind and then configuring sponsor-specific details. Uses the onlyTransactionKind flag to generate transaction kind bytes which are then used to create a sponsored transaction with custom sender, gas owner, and gas payment details.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/sponsored-transactions.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst tx = new Transaction();\n\n// ... add some transactions...\n\nconst kindBytes = await tx.build({ provider, onlyTransactionKind: true });\n\n// construct a sponsored transaction from the kind bytes\nconst sponsoredtx = Transaction.fromKind(kindBytes);\n\n// you can now set the sponsored transaction data that is required\nsponsoredtx.setSender(sender);\nsponsoredtx.setGasOwner(sponsor);\nsponsoredtx.setGasPayment(sponsorCoins);\n```\n\n----------------------------------------\n\nTITLE: Fetching Owned Objects in Sui\nDESCRIPTION: TypeScript code showing how to fetch objects owned by a specific address in Sui using the SuiClient.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\nconst objects = await client.getOwnedObjects({\n\towner: '0xcc2bd176a478baea9a0de7a24cd927661cc6e860d5bacecb9a138ef20dbab231',\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Transaction Results in TypeScript\nDESCRIPTION: Demonstrates how to use the result of one transaction as input for another transaction. Shows splitting coins and transferring the resulting coin object.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// split a coin object off of the gas object\nconst [coin] = tx.splitCoins(tx.gas, [100]);\n// transfer the resulting coin object\ntx.transferObjects([coin], address);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coin Information with SuiClient in TypeScript\nDESCRIPTION: Demonstrates various methods to fetch coin data from the Sui blockchain. Examples include retrieving specific coin types owned by an address, fetching all coins owned by an address, and getting the total balance for a specific coin type.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\nconst coins = await client.getCoins({\n\towner: '0xcc2bd176a478baea9a0de7a24cd927661cc6e860d5bacecb9a138ef20dbab231',\n\tcoinType: '0x65b0553a591d7b13376e03a408e112c706dc0909a79080c810b93b06f922c458::usdc::USDC',\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\nconst allCoins = await client.getAllCoins({\n\towner: '0xcc2bd176a478baea9a0de7a24cd927661cc6e860d5bacecb9a138ef20dbab231',\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\n// If coin type is not specified, it defaults to 0x2::sui::SUI\nconst coinBalance = await client.getBalance({\n\towner: '0xcc2bd176a478baea9a0de7a24cd927661cc6e860d5bacecb9a138ef20dbab231',\n\tcoinType: '0x65b0553a591d7b13376e03a408e112c706dc0909a79080c810b93b06f922c458::usdc::USDC',\n});\n```\n\n----------------------------------------\n\nTITLE: Transaction Execution\nDESCRIPTION: Example of executing a transaction with a signer using the signAndExecuteTransaction method.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nclient.signAndExecuteTransaction({ signer: keypair, transaction: tx });\n```\n\n----------------------------------------\n\nTITLE: Fetching Checkpoint Data with SuiClient in TypeScript\nDESCRIPTION: Shows how to retrieve checkpoint data from the Sui blockchain. The first example fetches the latest 100 checkpoints and lists their transactions, while the second example retrieves a specific checkpoint by ID.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nclient.getCheckpoints({ descendingOrder: true }).then(function (checkpointPage: CheckpointPage) {\n\tconsole.log(checkpointPage);\n\n\tcheckpointPage.data.forEach((checkpoint) => {\n\t\tconsole.log('---------------------------------------------------------------');\n\t\tconsole.log(\n\t\t\t' -----------   Transactions for Checkpoint:  ',\n\t\t\tcheckpoint.sequenceNumber,\n\t\t\t' -------- ',\n\t\t);\n\t\tconsole.log('---------------------------------------------------------------');\n\t\tcheckpoint.transactions.forEach((tx) => {\n\t\t\tconsole.log(tx);\n\t\t});\n\t\tconsole.log('***************************************************************');\n\t});\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nclient.getCheckpoint({ id: '1994010' }).then(function (checkpoint: Checkpoint) {\n\tconsole.log('Checkpoint Sequence Num ', checkpoint.sequenceNumber);\n\tconsole.log('Checkpoint timestampMs ', checkpoint.timestampMs);\n\tconsole.log('Checkpoint # of Transactions ', checkpoint.transactions.length);\n});\n```\n\n----------------------------------------\n\nTITLE: Mixing Two SuiFrens in Kiosk\nDESCRIPTION: Function to mix two bullshark SuiFrens using the Kiosk SDK. Demonstrates borrowing items from kiosk, performing the mix operation, and returning the items.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/advanced-examples.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function mixFrens(firstFrenObjectId: string, secondFrenObjectId: string, cap: KioskOwnerCap) {\n    const tx = new Transaction();\n    const kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\n    // borrow both frens.\n    const [fren1, promise1] = kioskTx.borrow({\n        itemType: bullsharkType,\n        itemId: firstFrenObjectId.\n    });\n\n    const [fren2, promise2] = kioskTx.borrow({\n        itemType: bullsharkType,\n        itemId: secondFrenObjectId\n    });\n\n    // Let's call the mix function. We skip any payment related stuff here.\n    tx.moveCall({\n        target: `${packageId}::mix_app::mix`,\n        arguments: [\n            fren1,\n            fren2,\n            kioskTx.getKiosk(),\n            kioskTx.getKioskCap(),\n        ]\n        typeArguments: [bullsharkType],\n    });\n\n    kioskTx.return({\n        itemType: bullsharkType,\n        item: fren1,\n        promise: promise1\n    })\n    .return({\n        itemType: bullsharkType,\n        item: fren2,\n        promise: promise2\n    }).finalize();\n\n    // sign and execute transaction.\n    await signAndExecuteTransaction({ tx: tx });\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Sui Network and Querying Coins with SuiClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to establish a connection to a Sui network using SuiClient, specifically connecting to the Devnet. It then shows how to query coins owned by a specific address.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/sui-client.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\n// use getFullnodeUrl to define Devnet RPC location\nconst rpcUrl = getFullnodeUrl('devnet');\n\n// create a client connected to devnet\nconst client = new SuiClient({ url: rpcUrl });\n\n// get coins owned by an address\n// replace <OWNER_ADDRESS> with actual address in the form of 0x123...\nawait client.getCoins({\n\towner: '<OWNER_ADDRESS>',\n});\n```\n\n----------------------------------------\n\nTITLE: Signing and Executing Transaction with SuiClient in TypeScript\nDESCRIPTION: This snippet shows how to sign and execute a transaction in one step using SuiClient. It demonstrates creating a transaction, signing it with a keypair, and executing it with options to show effects.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/sui-client.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n// add transaction data to tx\n\nconst result = await client.signAndExecuteTransaction({\n\ttransaction: tx,\n\tsigner: keypair,\n\trequestType: 'WaitForLocalExecution',\n\toptions: {\n\t\tshowEffects: true,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Sui TypeScript SDK\nDESCRIPTION: Command to install the Sui TypeScript SDK from npm registry for use in projects.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @mysten/sui\n```\n\n----------------------------------------\n\nTITLE: Setting up Sui dApp Kit Providers in React\nDESCRIPTION: React code to configure and implement the required providers for Sui dApp Kit. It demonstrates how to set up SuiClientProvider, WalletProvider, and QueryClientProvider to enable the dApp Kit functionality in your application.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/dapp-kit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetworkConfig, SuiClientProvider, WalletProvider } from '@mysten/dapp-kit';\nimport { getFullnodeUrl, type SuiClientOptions } from '@mysten/sui/client';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Config options for the networks you want to connect to\nconst { networkConfig } = createNetworkConfig({\n\tlocalnet: { url: getFullnodeUrl('localnet') },\n\tmainnet: { url: getFullnodeUrl('mainnet') },\n});\nconst queryClient = new QueryClient();\n\nfunction App() {\n\treturn (\n\t\t<QueryClientProvider client={queryClient}>\n\t\t\t<SuiClientProvider networks={networkConfig} defaultNetwork=\"localnet\">\n\t\t\t\t<WalletProvider>\n\t\t\t\t\t<YourApp />\n\t\t\t\t</WalletProvider>\n\t\t\t</SuiClientProvider>\n\t\t</QueryClientProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Sui Network with SuiClient\nDESCRIPTION: TypeScript code demonstrating how to create a SuiClient instance to connect to the Sui network and perform operations like getting coins owned by an address.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\n// create a client connected to devnet\nconst client = new SuiClient({ url: getFullnodeUrl('devnet') });\n\n// get coins owned by an address\nawait client.getCoins({\n\towner: '0xcc2bd176a478baea9a0de7a24cd927661cc6e860d5bacecb9a138ef20dbab231',\n});\n```\n\n----------------------------------------\n\nTITLE: Transaction Result Observation\nDESCRIPTION: Implementation showing how to wait for transaction completion and ensure effects are reflected in subsequent RPC calls.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await client.signAndExecuteTransaction({ signer: keypair, transaction: tx });\nawait client.waitForTransaction({ digest: result.digest });\n```\n\n----------------------------------------\n\nTITLE: Basic BCS Usage Example with Custom Types\nDESCRIPTION: Demonstrates a quickstart example of defining custom types with BCS, including serialization and deserialization of a Coin structure with custom transformations for UIDs.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs, fromHex, toHex } from '@mysten/bcs';\n\n// define UID as a 32-byte array, then add a transform to/from hex strings\nconst UID = bcs.fixedArray(32, bcs.u8()).transform({\n\tinput: (id: string) => fromHex(id),\n\toutput: (id) => toHex(Uint8Array.from(id)),\n});\n\nconst Coin = bcs.struct('Coin', {\n\tid: UID,\n\tvalue: bcs.u64(),\n});\n\n// deserialization: BCS bytes into Coin\nconst bcsBytes = Coin.serialize({\n\tid: '0000000000000000000000000000000000000000000000000000000000000001',\n\tvalue: 1000000n,\n}).toBytes();\n\nconst coin = Coin.parse(bcsBytes);\n\n// serialization: Object into bytes - an Option with <T = Coin>\nconst hex = bcs.option(Coin).serialize(coin).toHex();\n\nconsole.log(hex);\n```\n\n----------------------------------------\n\nTITLE: Creating KioskClient for MAINNET or TESTNET in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a KioskClient instance for MAINNET or TESTNET using the Sui Client. It requires the @mysten/kiosk and @mysten/sui/client packages.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { KioskClient, Network } from '@mysten/kiosk';\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\n// We need a Sui Client. You can re-use the SuiClient of your project\n// (it's not recommended to create a new one).\nconst client = new SuiClient({ url: getFullnodeUrl('testnet') });\n\n// Now we can use it to create a kiosk Client.\nconst kioskClient = new KioskClient({\n\tclient,\n\tnetwork: Network.TESTNET,\n});\n```\n\n----------------------------------------\n\nTITLE: Building Transaction Bytes in TypeScript\nDESCRIPTION: Shows how to get raw transaction bytes using the build method. Includes important note about setting the sender explicitly when building transaction bytes directly.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n\n// ... add some transactions...\n\nawait tx.build({ client });\n```\n\n----------------------------------------\n\nTITLE: Transferring Objects in Sui\nDESCRIPTION: TypeScript code demonstrating how to transfer objects in Sui using the SuiClient and Ed25519Keypair.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction } from '@mysten/sui/transactions';\n\n// Generate a new Ed25519 Keypair\nconst keypair = new Ed25519Keypair();\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\n\nconst tx = new Transaction();\ntx.transferObjects(\n\t['0xe19739da1a701eadc21683c5b127e62b553e833e8a15a4f292f4f48b4afea3f2'],\n\t'0x1d20dcdb2bca4f508ea9613994683eb4e76e9c4ed371169677c1be02aaf0b12a',\n);\nconst result = await client.signAndExecuteTransaction({\n\tsigner: keypair,\n\ttransaction: tx,\n});\nconsole.log({ result });\n```\n\n----------------------------------------\n\nTITLE: Sui Wallet Interaction Implementation\nDESCRIPTION: JavaScript implementation demonstrating how to interact with Sui blockchain, including minting SUI tokens and querying wallet balances using the Sui TypeScript SDK\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/hello-sui.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { getFaucetHost, requestSuiFromFaucetV1 } from '@mysten/sui/faucet';\nimport { MIST_PER_SUI } from '@mysten/sui/utils';\n\n// replace <YOUR_SUI_ADDRESS> with your actual address, which is in the form 0x123...\nconst MY_ADDRESS = '<YOUR_SUI_ADDRESS>';\n\n// create a new SuiClient object pointing to the network you want to use\nconst suiClient = new SuiClient({ url: getFullnodeUrl('devnet') });\n\n// Convert MIST to Sui\nconst balance = (balance) => {\n\treturn Number.parseInt(balance.totalBalance) / Number(MIST_PER_SUI);\n};\n\n// store the JSON representation for the SUI the address owns before using faucet\nconst suiBefore = await suiClient.getBalance({\n\towner: MY_ADDRESS,\n});\n\nawait requestSuiFromFaucetV1({\n\t// use getFaucetHost to make sure you're using correct faucet address\n\t// you can also just use the address (see Sui TypeScript SDK Quick Start for values)\n\thost: getFaucetHost('devnet'),\n\trecipient: MY_ADDRESS,\n});\n\n// store the JSON representation for the SUI the address owns after using faucet\nconst suiAfter = await suiClient.getBalance({\n\towner: MY_ADDRESS,\n});\n\n// Output result to console.\nconsole.log(\n\t`Balance before faucet: ${balance(suiBefore)} SUI. Balance after: ${balance(\n\t\tsuiAfter,\n\t)} SUI. Hello, SUI!`,\n);\n```\n\n----------------------------------------\n\nTITLE: Using PasskeyKeypair for Various Operations in TypeScript\nDESCRIPTION: This code snippet demonstrates common operations with a PasskeyKeypair instance, including deriving the public key and address, signing personal messages, and signing transactions.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/passkey.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst publicKey = keypair.getPublicKey();\nconst address = publicKey.toSuiAddress();\n\nconst message = new TextEncoder().encode('hello world');\nconst { signature } = await keypair.signPersonalMessage(message);\n\nconst txSignature = await passkey.signTransaction(txBytes);\n```\n\n----------------------------------------\n\nTITLE: Working with BCS Compound Types\nDESCRIPTION: Shows how to use BCS compound types including vectors, fixed arrays, options, enums, structs, tuples, and maps. Includes both serialization and deserialization examples for each compound type.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs } from '@mysten/bcs';\n\n// Vectors\nconst intList = bcs.vector(bcs.u8()).serialize([1, 2, 3, 4, 5]).toBytes();\nconst stringList = bcs.vector(bcs.string()).serialize(['a', 'b', 'c']).toBytes();\n\n// Fixed length Arrays\nconst intArray = bcs.fixedArray(4, bcs.u8()).serialize([1, 2, 3, 4]).toBytes();\nconst stringArray = bcs.fixedArray(3, bcs.string()).serialize(['a', 'b', 'c']).toBytes();\n\n// Option\nconst option = bcs.option(bcs.string()).serialize('some value').toBytes();\nconst nullOption = bcs.option(bcs.string()).serialize(null).toBytes();\n\n// Enum\nconst MyEnum = bcs.enum('MyEnum', {\n\tNoType: null,\n\tInt: bcs.u8(),\n\tString: bcs.string(),\n\tArray: bcs.fixedArray(3, bcs.u8()),\n});\n\nconst noTypeEnum = MyEnum.serialize({ NoType: null }).toBytes();\nconst intEnum = MyEnum.serialize({ Int: 100 }).toBytes();\nconst stringEnum = MyEnum.serialize({ String: 'string' }).toBytes();\nconst arrayEnum = MyEnum.serialize({ Array: [1, 2, 3] }).toBytes();\n\n// Struct\nconst MyStruct = bcs.struct('MyStruct', {\n\tid: bcs.u8(),\n\tname: bcs.string(),\n});\n\nconst struct = MyStruct.serialize({ id: 1, name: 'name' }).toBytes();\n\n// Tuple\nconst tuple = bcs.tuple([bcs.u8(), bcs.string()]).serialize([1, 'name']).toBytes();\n\n// Map\nconst map = bcs\n\t.map(bcs.u8(), bcs.string())\n\t.serialize(\n\t\tnew Map([\n\t\t\t[1, 'one'],\n\t\t\t[2, 'two'],\n\t\t]),\n\t)\n\t.toBytes();\n\n// Parsing data back into original types\n\n// Vectors\nconst parsedIntList = bcs.vector(bcs.u8()).parse(intList);\nconst parsedStringList = bcs.vector(bcs.string()).parse(stringList);\n\n// Fixed length Arrays\nconst parsedIntArray = bcs.fixedArray(4, bcs.u8()).parse(intArray);\n\n// Option\nconst parsedOption = bcs.option(bcs.string()).parse(option);\nconst parsedNullOption = bcs.option(bcs.string()).parse(nullOption);\n\n// Enum\nconst parsedNoTypeEnum = MyEnum.parse(noTypeEnum);\nconst parsedIntEnum = MyEnum.parse(intEnum);\nconst parsedStringEnum = MyEnum.parse(stringEnum);\nconst parsedArrayEnum = MyEnum.parse(arrayEnum);\n\n// Struct\nconst parsedStruct = MyStruct.parse(struct);\n\n// Tuple\nconst parsedTuple = bcs.tuple([bcs.u8(), bcs.string()]).parse(tuple);\n\n// Map\nconst parsedMap = bcs.map(bcs.u8(), bcs.string()).parse(map);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Data with SuiClient in TypeScript\nDESCRIPTION: Demonstrates how to fetch transaction details by digest. The example shows both single transaction retrieval with specific fields and batch retrieval of multiple transactions with customizable options.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\nconst txn = await client.getTransactionBlock({\n\tdigest: '9XFneskU8tW7UxQf7tE5qFRfcN4FadtC2Z3HAZkgeETd=',\n\t// only fetch the effects field\n\toptions: {\n\t\tshowEffects: true,\n\t\tshowInput: false,\n\t\tshowEvents: false,\n\t\tshowObjectChanges: false,\n\t\tshowBalanceChanges: false,\n\t},\n});\n\n// You can also fetch multiple transactions in one batch request\nconst txns = await client.multiGetTransactionBlocks({\n\tdigests: [\n\t\t'9XFneskU8tW7UxQf7tE5qFRfcN4FadtC2Z3HAZkgeETd=',\n\t\t'17mn5W1CczLwitHCO9OIUbqirNrQ0cuKdyxaNe16SAME=',\n\t],\n\t// fetch both the input transaction data as well as effects\n\toptions: { showInput: true, showEffects: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Keypairs\nDESCRIPTION: Demonstrates creating a random keypair and initializing from an existing secret key.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/keypairs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// random Keypair\nconst keypair = new Ed25519Keypair();\n// Keypair from an existing secret key (Uint8Array)\nconst keypair = Ed25519Keypair.fromSecretKey(secretKey);\n```\n\n----------------------------------------\n\nTITLE: Customizing SuiClient Transport with Custom Options in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom transport instance for SuiClient with custom options such as headers and timeout values. It uses SuiHTTPTransport to set up both JSON RPC and websocket requests.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/sui-client.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient, SuiHTTPTransport } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\ttransport: new SuiHTTPTransport({\n\t\turl: 'https://my-custom-node.com/rpc',\n\t\twebsocket: {\n\t\t\treconnectTimeout: 1000,\n\t\t\turl: 'https://my-custom-node.com/websockets',\n\t\t},\n\t\trpc: {\n\t\t\theaders: {\n\t\t\t\t'x-custom-header': 'custom value',\n\t\t\t},\n\t\t},\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Working with BCS Primitive Types\nDESCRIPTION: Illustrates how to use BCS primitive types like integers, strings, and bytes for serialization and deserialization. Includes examples of u8, u64, u128, string, hex, and bytes types.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs } from '@mysten/bcs';\n\n// Integers\nconst u8 = bcs.u8().serialize(100).toBytes();\nconst u64 = bcs.u64().serialize(1000000n).toBytes();\nconst u128 = bcs.u128().serialize('100000010000001000000').toBytes();\n\n// Other types\nconst str = bcs.string().serialize('this is an ascii string').toBytes();\nconst hex = bcs.hex().serialize('C0FFEE').toBytes();\nconst bytes = bcs.bytes(4).serialize([1, 2, 3, 4]).toBytes();\n\n// Parsing data back into original types\nconst parsedU8 = bcs.u8().parse(u8);\n// u64-u256 will be represented as bigints regardless of how they were provided when serializing them\nconst parsedU64 = bcs.u64().parse(u64);\nconst parsedU128 = bcs.u128().parse(u128);\n\nconst parsedStr = bcs.string().parse(str);\nconst parsedHex = bcs.hex().parse(hex);\nconst parsedBytes = bcs.bytes(4).parse(bytes);\n```\n\n----------------------------------------\n\nTITLE: Implementing Network-Specific Configuration with createNetworkConfig\nDESCRIPTION: This example demonstrates how to use createNetworkConfig to set up network-specific configurations and access them using custom hooks in a React application.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/sui-client-provider.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetworkConfig, SuiClientProvider, WalletProvider } from '@mysten/dapp-kit';\nimport { getFullnodeUrl } from '@mysten/sui/client';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Config options for the networks you want to connect to\nconst { networkConfig, useNetworkVariable } = createNetworkConfig({\n\tlocalnet: {\n\t\turl: getFullnodeUrl('localnet'),\n\t\tvariables: {\n\t\t\tmyMovePackageId: '0x123',\n\t\t},\n\t},\n\tmainnet: {\n\t\turl: getFullnodeUrl('mainnet'),\n\t\tvariables: {\n\t\t\tmyMovePackageId: '0x456',\n\t\t},\n\t},\n});\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n\treturn (\n\t\t<QueryClientProvider client={queryClient}>\n\t\t\t<SuiClientProvider networks={networkConfig} defaultNetwork=\"localnet\">\n\t\t\t\t<WalletProvider>\n\t\t\t\t\t<YourApp />\n\t\t\t\t</WalletProvider>\n\t\t\t</SuiClientProvider>\n\t\t</QueryClientProvider>\n\t);\n}\n\nfunction YourApp() {\n\tconst id = useNetworkVariable('myMovePackageId');\n\n\treturn <div>Package ID: {id}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sui dApp Kit Query Hooks for RPC Calls\nDESCRIPTION: Example demonstrating how to use the useSuiClientQuery hook to fetch data from the Sui blockchain. Shows implementation with loading state handling and data display.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/dapp-kit/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSuiClientQuery } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { data, isPending, error, refetch } = useSuiClientQuery('getOwnedObjects', {\n\t\towner: '0x123',\n\t});\n\n\tif (isPending) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\treturn <pre>{JSON.stringify(data, null, 2)}</pre>;\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Transaction Execution with SuiClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to wait for a transaction to be executed and available over the API using SuiClient. It shows signing and executing a transaction, then waiting for it to be available with options to show effects.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/sui-client.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n\nconst result = await client.signAndExecuteTransaction({\n\ttransaction: tx,\n\tsigner: keypair,\n});\n\nconst transaction = await client.waitForTransaction({\n\tdigest: result.digest,\n\toptions: {\n\t\tshowEffects: true,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Object References for Offline Transactions in Sui TypeScript SDK\nDESCRIPTION: Demonstrates how to create object references for both owned/immutable objects and shared objects when building offline transactions. Uses the Inputs helper from @mysten/sui/transactions to construct the appropriate object references without requiring a client connection.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/offline.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Inputs } from '@mysten/sui/transactions';\n\n// for owned or immutable objects\ntx.object(Inputs.ObjectRef({ digest, objectId, version }));\n\n// for shared objects\ntx.object(Inputs.SharedObjectRef({ objectId, initialSharedVersion, mutable }));\n```\n\n----------------------------------------\n\nTITLE: Initializing SuiClientProvider with Network Configurations in React\nDESCRIPTION: This snippet demonstrates how to set up the SuiClientProvider at the root of a React app, configuring multiple networks and setting a default network.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/sui-client-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetworkConfig, SuiClientProvider, WalletProvider } from '@mysten/dapp-kit';\nimport { getFullnodeUrl } from '@mysten/sui/client';\n\n// Config options for the networks you want to connect to\nconst { networkConfig } = createNetworkConfig({\n\tlocalnet: { url: getFullnodeUrl('localnet') },\n\tmainnet: { url: getFullnodeUrl('mainnet') },\n});\n\nfunction App() {\n\treturn (\n\t\t<SuiClientProvider networks={networkConfig} defaultNetwork=\"localnet\">\n\t\t\t<YourApp />\n\t\t</SuiClientProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Kiosk with KioskTransaction\nDESCRIPTION: This example shows how to create a new standard kiosk using KioskTransaction. It demonstrates creating the kiosk, placing an item in it, sharing the kiosk and transferring the KioskOwnerCap to the owner, and finalizing the transaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/kiosk-transaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Initiliazed somewhere in the app.\nconst kioskClient = new KioskClient({...});\n\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient });\n\n// Calls the creation function.\nkioskTx.create();\n\n// We can use the kiosk for some action.\n// For example, placing an item in the newly created kiosk.\nkioskTx.place({\n    itemType: '0x...::hero::Hero',\n    item: '0xAHero',\n});\n\n// Shares the kiosk and transfers the `KioskOwnerCap` to the owner.\nkioskTx.shareAndTransferCap('0xMyAddress');\n\n// Always called as our last kioskTx interaction.\nkioskTx.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({tx: tx});\n```\n\n----------------------------------------\n\nTITLE: Adding Royalty Rule to a Transfer Policy in TypeScript\nDESCRIPTION: Shows how to add a royalty rule to a transfer policy, specifying the percentage and minimum amount. The percentageToBasisPoints helper converts a percentage to basis points.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// ... tp transaction is initialized and policy is set.\ntpTx.addRoyaltyRule(percentageToBasisPoints(30), 1_000_000_000);\n```\n\n----------------------------------------\n\nTITLE: Requesting SUI from Faucet using Sui TypeScript SDK\nDESCRIPTION: This code demonstrates how to use the requestSuiFromFaucetV0 function to request SUI tokens from a network faucet. It requires specifying the faucet host (obtained using getFaucetHost) and the recipient address.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/faucet.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait requestSuiFromFaucetV0({\n\thost: getFaucetHost('testnet'),\n\trecipient: <RECIPIENT_ADDRESS>,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Rule Support for Kiosk Purchases in TypeScript SDK\nDESCRIPTION: This snippet shows how to add support for a custom rule when purchasing from a kiosk. It defines a custom rule resolver, adds it to the KioskClient, and demonstrates its usage in a purchase transaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/purchasing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst kioskClient = new KioskClient({...});\nconst myCustomRule = {\n\t\trule: `0xMyRuleAddress::game_rule::Rule`,\n\t\tpackageId: `0xMyRuleAddress`,\n        // The resolving function. This is called when calling the `purchaseAndResolve`.\n\t\tresolveRuleFunction: (params: RuleResolvingParams) => {\n            // By knowing the params we have here, we can extract the variables we need to resolve this rule.\n            const { transaction, itemType, packageId, extraArgs } = params;\n            const { gamePass } = extraArgs;\n            if(!gamePass) throw new Error(\"GamePass not supplied\");\n\n            // Calls the game's rule prove function, which could, for example\n            // allow rules to resolve only if the holder has a gamePass object.\n            transaction.moveCall({\n                target: `${packageId}::game_rule::prove_pass`,\n                typeArguments: [itemType],\n                arguments: [transferRequest, transaction.object(gamePass)],\n            });\n        },\n};\n// This allows rules resolution from the `purchaseAndResolve` function.\nkioskClient.addRuleResolver(myCustomRule);\n\n// Assume `cap` is supplied to the function as explained in the introduction section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nawait kioskTx.purchaseAndResolve({\n\titemType: item.itemType,\n\titemId: item.itemId,\n\tprice: item.price,\n\tsellerKiosk: item.sellerKiosk,\n\textraArgs: {\n\t\tgamePass: '0xMyGamePassObjectId'\n\t}\n});\n\nkioskTx.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction Block with SuiClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to execute a transaction block using SuiClient. It shows signing the transaction, serializing it, and then executing it with options to show effects.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/sui-client.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n\n// add transaction data to tx...\n\nconst { bytes, signature } = tx.sign({ client, signer: keypair });\n\nconst result = await client.executeTransactionBlock({\n\ttransactionBlock: bytes,\n\tsignature,\n\trequestType: 'WaitForLocalExecution',\n\toptions: {\n\t\tshowEffects: true,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSuiClientInfiniteQuery Hook for Paginated Sui RPC Calls\nDESCRIPTION: This example demonstrates how to use useSuiClientInfiniteQuery for RPC methods that support pagination. It's built on TanStack Query's useInfiniteQuery and provides functionality for fetching additional pages of data when needed.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/rpc-hooks.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSuiClientInfiniteQuery } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { data, isPending, isError, error, isFetching, fetchNextPage, hasNextPage } =\n\t\tuseSuiClientInfiniteQuery('getOwnedObjects', {\n\t\t\towner: '0x123',\n\t\t});\n\n\tif (isPending) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tif (isError) {\n\t\treturn <div>Error: {error.message}</div>;\n\t}\n\n\treturn <pre>{JSON.stringify(data, null, 2)}</pre>;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SerialTransactionExecutor in TypeScript\nDESCRIPTION: Demonstrates how to initialize and use SerialTransactionExecutor to execute multiple transactions sequentially. The example shows creating two transactions that split and transfer coins to different addresses.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/executors.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { SerialTransactionExecutor } from '@mysten/sui/transactions';\n\nconst client = new SuiClient({ url: getFullnodeUrl('devnet') });\n\nconst executor = new SerialTransactionExecutor({\n\tclient,\n\tsigner: yourKeyPair,\n});\n\nconst tx1 = new Transaction();\nconst [coin1] = tx1.splitCoins(tx1.gas, [1]);\ntx1.transferObjects([coin1], address1);\nconst tx2 = new Transaction();\nconst [coin2] = tx2.splitCoins(tx2.gas, [1]);\ntx2.transferObjects([coin2], address2);\n\nconst [{ digest: digest1 }, { digest: digest2 }] = await Promise.all([\n\texecutor.executeTransaction(tx1),\n\texecutor.executeTransaction(tx2),\n]);\n```\n\n----------------------------------------\n\nTITLE: Installing Sui TypeScript SDK from NPM\nDESCRIPTION: This command installs the Sui TypeScript SDK from the NPM registry for use in projects developing against on-chain Sui networks (Devnet, Testnet, Mainnet).\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/install.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @mysten/sui\n```\n\n----------------------------------------\n\nTITLE: Splitting and Transferring Sui Coins\nDESCRIPTION: Example showing how to split coins from gas payment and transfer them to a specific address.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// create a new coin with balance 100, based on the coins used as gas payment\n// you can define any balance here\nconst [coin] = tx.splitCoins(tx.gas, [100]);\n\n// transfer the split coin to a specific address\ntx.transferObjects([coin], '0xSomeSuiAddress');\n```\n\n----------------------------------------\n\nTITLE: Initializing SuiGraphQLClient and Executing Basic Query in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a SuiGraphQLClient instance and execute a simple query to retrieve the chain identifier. It showcases the basic setup and usage of the client.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/graphql.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SuiGraphQLClient } from '@mysten/sui/graphql';\nimport { graphql } from '@mysten/sui/graphql/schemas/latest';\n\nconst gqlClient = new SuiGraphQLClient({\n\turl: 'https://sui-testnet.mystenlabs.com/graphql',\n});\n\nconst chainIdentifierQuery = graphql(`\n\tquery {\n\t\tchainIdentifier\n\t}\n`);\n\nasync function getChainIdentifier() {\n\tconst result = await gqlClient.query({\n\t\tquery: chainIdentifierQuery,\n\t});\n\n\treturn result.data?.chainIdentifier;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MultiSigSigner for Simplified Signature Handling\nDESCRIPTION: Shows how to create a MultiSigSigner that abstracts the signature combination process. This approach is easier than manually combining signatures when methods accept Signers directly.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/multisig.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { MultiSigPublicKey } from '@mysten/sui/multisig';\n\nconst kp1 = new Ed25519Keypair();\nconst kp2 = new Ed25519Keypair();\n\nconst multiSigPublicKey = MultiSigPublicKey.fromPublicKeys({\n\tthreshold: 1,\n\tpublicKeys: [\n\t\t{\n\t\t\tpublicKey: kp1.getPublicKey(),\n\t\t\tweight: 1,\n\t\t},\n\t\t{\n\t\t\tpublicKey: kp2.getPublicKey(),\n\t\t\tweight: 1,\n\t\t},\n\t],\n});\n\nconst signer = multiSigPublicKey.getSigner(kp1);\n\nconst message = new TextEncoder().encode('hello world');\nconst { signature } = await signer.signPersonalMessage(message);\nconst isValid = await multiSigPublicKey.verifyPersonalMessage(message, signature);\n```\n\n----------------------------------------\n\nTITLE: Requesting SUI from Faucet using TypeScript SDK\nDESCRIPTION: This snippet demonstrates how to request SUI tokens from a faucet using the new methods provided in @mysten/sui/faucet. It uses getFaucetHost to retrieve the faucet URL for a specific network and requestSuiFromFaucetV0 to make the request.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/0.38.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFaucetHost, requestSuiFromFaucetV0 } from '@mysten/sui/faucet';\n\nawait requestSuiFromFaucetV0({\n\thost: getFaucetHost('devnet'),\n\trecipient: '<SUI_ADDRESS>',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Ledger Signer in TypeScript\nDESCRIPTION: This example illustrates how to create a Ledger Signer for signing Sui transactions using a Ledger hardware wallet. It demonstrates setting up the necessary dependencies, initializing the signer with a derivation path, and performing basic operations like getting the Sui address and signing a transaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/signers/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Transport from '@ledgerhq/hw-transport-node-hid';\nimport SuiLedgerClient from '@mysten/ledgerjs-hw-app-sui';\nimport { LedgerSigner } from '@mysten/signers/ledger';\nimport { SuiClient } from '@mysten/sui/client';\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst transport = await Transport.open(undefined);\nconst ledgerClient = new SuiLedgerClient(transport);\nconst suiClient = new SuiClient({ url: getNetworkUrl('testnet') });\n\nconst signer = await LedgerSigner.fromDerivationPath({\n\tderivationPath: \"m/44'/784'/0'/0'/0'\",\n\tledgerClient,\n\tsuiClient,\n});\n\n// Log the Sui address:\nconsole.log(signer.toSuiAddress());\n\n// Define a test transaction:\nconst testTransaction = new Transaction();\nconst transactionBytes = await testTransaction.build();\n\n// Sign a test transaction:\nconst { signature } = await signer.signTransaction(transactionBytes);\nconsole.log(signature);\n```\n\n----------------------------------------\n\nTITLE: Borrowing Item from Kiosk for Action using TypeScript and Kiosk SDK\nDESCRIPTION: This snippet demonstrates how to borrow an item from a kiosk to perform an action (in this case, leveling up). It uses the KioskTransaction to create a borrow transaction and execute a custom contract function on the borrowed item.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/examples.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// A sample function that borrows an item from kiosk and levels it up.\nconst levelUp = async (object) => {\n\tconst tx = new Transaction();\n\n\tnew KioskTransaction({ kioskClient, transaction: tx, cap })\n\t\t.borrowTx(object, (item) => {\n\t\t\ttx.moveCall({\n\t\t\t\ttarget: '0xMyGame::hero::level_up',\n\t\t\t\targuments: [item],\n\t\t\t});\n\t\t})\n\t\t.finalize();\n\n\t// Sign and execute transaction.\n\tawait signAndExecuteTransaction({ tx: tx });\n};\n\nlevelUp({\n\titemType: '0x2MyGame::hero::Hero',\n\titemId: '0xMyHeroObjectId',\n});\n```\n\n----------------------------------------\n\nTITLE: Version 0.6.0 Changes\nDESCRIPTION: Markdown section documenting removal of deprecated imports\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/kiosk/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\\n\\n- fd8589806: Remove uses of deprecated imports from @mysten/sui.js\n```\n\n----------------------------------------\n\nTITLE: Minting into Existing Kiosk using TypeScript and Kiosk SDK\nDESCRIPTION: This snippet demonstrates how to mint an item directly into a user's existing kiosk. It includes getting the kiosk owner cap, creating a transaction, and minting an item using a custom contract function.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/examples.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume that we have created the client somewhere else.\nconst kioskClient = new KioskClient({...});\nconst connectedAddress = '0xAnAddress';\n\n// This function should run when the user connects the wallet.\n// We should re-use the same `KioskClient` instance throughout our dApp.\nconst getCap = async () => {\n    let { kioskOwnerCaps } = await kioskClient.getOwnedKiosks(address);\n    // Assume that the user has only 1 kiosk.\n    // Here, you need to do some more checks in a realistic scenario.\n    // And possibly give the user in our dApp a kiosk selector to choose which one they want to interact with (if they own more than one).\n    return kioskOwnerCaps[0];\n}\n\n// The mint function could be like the following.\nconst mint = async () => {\n    const tx = new Transaction();\n    const kioskTx = new KioskTransaction({ kioskClient, transaction: tx, cap: await getCap() }});\n\n    // Assume it costs one SUI\n    let coin = tx.splitCoins(tx.gas, [1_000_000_000]);\n\n    // A function that mints directly into the kiosk.\n     tx.moveCall({\n            target: '0xMyGame::hero::mint',\n            arguments: [\n                coin, // the payment\n                kioskTx.getKiosk(), // our kiosk that the hero will be placed in.\n                kioskTx.getKioskCap() // our kiosk cap, so that the function can place or lock it.\n            ]\n    });\n\n    kioskTx.finalize();\n\n    // Sign and execute transaction.\n    await signAndExecuteTransaction({ tx: tx });\n}\n```\n\n----------------------------------------\n\nTITLE: Using useSignTransaction Hook with React in Sui dApp\nDESCRIPTION: A complete example showing how to use the useSignTransaction hook to prompt users to sign an empty transaction, execute it, and report transaction effects back to the wallet. The component also displays the connection button and signature information.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useSignTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Transaction } from '@mysten/sui/transactions';\nimport {\n\tConnectButton,\n\tuseCurrentAccount,\n\tuseSignTransaction,\n\tuseSuiClient,\n} from '@mysten/dapp-kit';\nimport { toBase64 } from '@mysten/sui/utils';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\tconst { mutateAsync: signTransaction } = useSignTransaction();\n\tconst [signature, setSignature] = useState('');\n\tconst client = useSuiClient();\n\tconst currentAccount = useCurrentAccount();\n\n\treturn (\n\t\t<div style={{ padding: 20 }}>\n\t\t\t<ConnectButton />\n\t\t\t{currentAccount && (\n\t\t\t\t<>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\tconst { bytes, signature, reportTransactionEffects } = await signTransaction({\n\t\t\t\t\t\t\t\t\ttransaction: new Transaction(),\n\t\t\t\t\t\t\t\t\tchain: 'sui:devnet',\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tconst executeResult = await client.executeTransactionBlock({\n\t\t\t\t\t\t\t\t\ttransactionBlock: bytes,\n\t\t\t\t\t\t\t\t\tsignature,\n\t\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\t\tshowRawEffects: true,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// Always report transaction effects to the wallet after execution\n\t\t\t\t\t\t\t\treportTransactionEffects(executeResult.rawEffects!);\n\n\t\t\t\t\t\t\t\tconsole.log(executeResult);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSign empty transaction\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>Signature: {signature}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Events with SuiClient in TypeScript\nDESCRIPTION: Shows how to query events from the Sui blockchain. This example demonstrates querying events created by transactions sent from a specific address with a limit on the number of results.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\nconst events = client.queryEvents({\n\tquery: { Sender: toolbox.address() },\n\tlimit: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Transfer Policy in TypeScript\nDESCRIPTION: This snippet shows how to create a new transfer policy, add various rules to it, and then share and transfer the policy cap to a specified address. It demonstrates the async create method that includes a protection against accidentally creating duplicate transfer policies.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst publisher = '0xPackagePublisherObject';\nconst tx = new Transaction();\n\nconst tpTx = new TransferPolicyTransaction({ kioskClient, transaction: tx });\n\n// This is an async call, as the SDK protects from accidentally creating\n// a second transfer policy.\n// You can skip this check by passing `skipCheck: true`.\nawait tpTx.create({\n\ttype: `${heroPackageId}::hero::Hero`,\n\tpublisher,\n});\n\ntpTx\n\t.addLockRule()\n\t.addFloorPriceRule(1000n)\n\t.addRoyaltyRule(percentageToBasisPoints(10), 100)\n\t.addPersonalKioskRule()\n\t// Transfers the `TransferPolicyCap` to the user and shares the transfer policy.\n\t.shareAndTransferCap('address_to_transfer_cap_to');\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Using Sui Client Query Hook\nDESCRIPTION: Example demonstrating how to use the useSuiClientQuery hook to fetch data from the Sui blockchain with loading and error handling.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSuiClientQuery } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { data, isPending, error, refetch } = useSuiClientQuery('getOwnedObjects', {\n\t\towner: '0x123',\n\t});\n\n\tif (isPending) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\treturn <pre>{JSON.stringify(data, null, 2)}</pre>;\n}\n```\n\n----------------------------------------\n\nTITLE: Delisting an Item from a Kiosk in TypeScript\nDESCRIPTION: Shows how to remove a listing while keeping the item placed in the kiosk. This is useful when you want to retain ownership of an item but no longer wish to offer it for sale.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst itemId = '0xHeroAddress';\nconst itemType = '0x..::hero::Hero';\n\n/// assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nkioskTx\n\t.delist({\n\t\titemId,\n\t\titemType,\n\t})\n\t.finalize();\n\n// sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Initializing Sui Transaction in TypeScript\nDESCRIPTION: Basic setup for creating a new Sui transaction using the Transaction class from the SDK.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst tx = new Transaction();\n```\n\n----------------------------------------\n\nTITLE: Using CoinWithBalance Intent for Multiple Coin Types\nDESCRIPTION: Shows how to use the CoinWithBalance intent to handle both SUI and custom coin types with specific balances. Requires setting the sender address for non-gas coin operations.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/intents.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { coinWithBalance, Transaction } from '@mysten/sui/transactions';\n\nconst tx = new Transaction();\n\n// Setting the sender is required for the CoinWithBalance intent to resolve coins when not using the gas coin\ntx.setSender(keypair.toSuiAddress());\n\ntx.transferObjects(\n\t[\n\t\t// Create a SUI coin (balance is in MIST)\n\t\tcoinWithBalance({ balance: 100 }),\n\t\t// Create a coin of another type\n\t\tcoinWithBalance({ balance: 100, type: '0x123::foo:Bar' }),\n\t],\n\trecipient,\n);\n```\n\n----------------------------------------\n\nTITLE: Quickstart Example for BCS Usage in TypeScript\nDESCRIPTION: Demonstrates basic usage of BCS, including defining custom types, serialization, and deserialization.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs, fromHex, toHex } from '@mysten/bcs';\n\n// define UID as a 32-byte array, then add a transform to/from hex strings\nconst UID = bcs.fixedArray(32, bcs.u8()).transform({\n\tinput: (id: string) => fromHex(id),\n\toutput: (id) => toHex(Uint8Array.from(id)),\n});\n\nconst Coin = bcs.struct('Coin', {\n\tid: UID,\n\tvalue: bcs.u64(),\n});\n\n// deserialization: BCS bytes into Coin\nconst bcsBytes = Coin.serialize({\n\tid: '0000000000000000000000000000000000000000000000000000000000000001',\n\tvalue: 1000000n,\n}).toBytes();\n\nconst coin = Coin.parse(bcsBytes);\n\n// serialization: Object into bytes - an Option with <T = Coin>\nconst hex = bcs.option(Coin).serialize(coin).toHex();\n\nconsole.log(hex);\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Connected Accounts with useAccounts Hook in React\nDESCRIPTION: This example demonstrates how to use the useAccounts hook from @mysten/dapp-kit to retrieve a list of connected accounts and display them in a React component. The component shows a ConnectButton for wallet connection and renders a list of account addresses when accounts are available.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useAccounts.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useAccounts } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst accounts = useAccounts();\n\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton />\n\t\t\t<h2>Available accounts:</h2>\n\t\t\t{accounts.length === 0 && <div>No accounts detected</div>}\n\t\t\t<ul>\n\t\t\t\t{accounts.map((account) => (\n\t\t\t\t\t<li key={account.address}>- {account.address}</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiSig with zkLogin in Sui\nDESCRIPTION: Demonstrates how to create a multisig using both a traditional keypair and a zkLogin public identifier. This example shows a 1-out-of-2 multisig setup with enhanced recoverability.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/multisig.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// a single Ed25519 keypair and its public key.\nconst kp1 = new Ed25519Keypair();\nconst pkSingle = kp1.getPublicKey();\n\n// compute the address seed based on user salt and jwt token values.\nconst decodedJWT = decodeJwt('a valid jwt token here');\nconst userSalt = BigInt('123'); // a valid user salt\nconst addressSeed = genAddressSeed(userSalt, 'sub', decodedJwt.sub, decodedJwt.aud).toString();\n\n// a zkLogin public identifier derived from an address seed and an iss string.\nlet pkZklogin = toZkLoginPublicIdentifier(addressSeed, decodedJwt.iss);\n\n// derive multisig address from multisig public key defined by the single key and zkLogin public\n// identifier with weight and threshold.\nconst multiSigPublicKey = MultiSigPublicKey.fromPublicKeys({\n\tthreshold: 1,\n\tpublicKeys: [\n\t\t{ publicKey: pkSingle, weight: 1 },\n\t\t{ publicKey: pkZklogin, weight: 1 },\n\t],\n});\n\n// this is the sender of any transactions from this multisig account.\nconst multisigAddress = multiSigPublicKey.toSuiAddress();\n\n// create a regular zklogin signature from the zkproof and ephemeral signature for zkLogin.\n// see zklogin-integration.mdx for more details.\nconst zkLoginSig = getZkLoginSignature({\n\tinputs: zkLoginInputs,\n\tmaxEpoch: '2',\n\tuserSignature: fromBase64(ephemeralSig),\n});\n\n// a valid multisig with just the zklogin signature.\nconst multisig = multiSigPublicKey.combinePartialSignatures([zkLoginSig]);\n```\n\n----------------------------------------\n\nTITLE: Handling Serialized BCS Bytes in Different Formats\nDESCRIPTION: Demonstrates various methods to handle serialized BCS data in different formats including bytes, hex, base64, and base58. Shows conversion and parsing between formats.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs, fromBase58, fromBase64, fromHex } from '@mysten/bcs';\n\nconst serializedString = bcs.string().serialize('this is a string');\n\n// SerializedBcs.toBytes() returns a Uint8Array\nconst bytes: Uint8Array = serializedString.toBytes();\n\n// You can get the serialized bytes encoded as hex, base64 or base58\nconst hex: string = serializedString.toHex();\nconst base64: string = bcsWriter.toBase64();\nconst base58: string = bcsWriter.toBase58();\n\n// To parse a BCS value from bytes, the bytes need to be a Uint8Array\nconst str1 = bcs.string().parse(bytes);\n\n// If your data is encoded as string, you need to convert it to Uint8Array first\nconst str2 = bcs.string().parse(fromHex(hex));\nconst str3 = bcs.string().parse(fromBase64(base64));\nconst str4 = bcs.string().parse(fromBase58(base58));\n\nconsole.assert((str1 == str2) == (str3 == str4), 'Result is the same');\n```\n\n----------------------------------------\n\nTITLE: Combining Signatures with MultiSigPublicKey in Sui\nDESCRIPTION: Demonstrates how to collect individual signatures and combine them using the MultiSigPublicKey. The example signs a message with two keypairs and verifies the combined signature.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/multisig.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// This example uses the same imports, key pairs, and multiSigPublicKey from the previous example\nconst message = new TextEncoder().encode('hello world');\n\nconst signature1 = (await kp1.signPersonalMessage(message)).signature;\nconst signature2 = (await kp2.signPersonalMessage(message)).signature;\n\nconst combinedSignature = multiSigPublicKey.combinePartialSignatures([signature1, signature2]);\n\nconst isValid = await multiSigPublicKey.verifyPersonalMessage(message, combinedSignature);\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price in Sui Transaction\nDESCRIPTION: Sets a custom gas price for a Sui transaction instead of using the default network reference price.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/gas.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntx.setGasPrice(gasPrice);\n```\n\n----------------------------------------\n\nTITLE: Migrating Transaction Signing Implementation\nDESCRIPTION: Shows how to update code that signs and sends transaction blocks after the deprecation of the Signer pattern, using the new modular imports and SuiClient.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import {\n-    Ed25519Keypair,\n-    JsonRpcProvider,\n-    RawSigner,\n-    TransactionBlock,\n-    localnetConnection,\n- } from '@mysten/sui.js';\n+ import { Ed25519Keypair } from '@mysten/sui.js/keypairs/ed25519';\n+ import { SuiClient, getFullnodeUrl } from '@mysten/sui.js/client';\n+ import { TransactionBlock } from '@mysten/sui.js/transactions';\n\n  const keypair = new Ed25519Keypair()\n- const provider = new JsonRpcProvider(localnetConnection);\n- const signer = new RawSigner(keyPair, provider);\n+ const client = new SuiClient({ url: getFullnodeUrl('localnet')});\n\n- const result = await signer.signAndExecuteTransactionBlock({\n+ const result = await client.signAndExecuteTransactionBlock({\n+   signer: keypair,\n    transactionBlock: tx,\n    options: { ... }\n  })\n```\n\n----------------------------------------\n\nTITLE: Signing and Verifying Messages\nDESCRIPTION: Shows how to sign a personal message and verify the signature using a keypair.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/keypairs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst publicKey = keypair.getPublicKey();\nconst message = new TextEncoder().encode('hello world');\n\nconst { signature } = await keypair.signPersonalMessage(message);\nconst isValid = await publicKey.verifyPersonalMessage(message, signature);\n```\n\n----------------------------------------\n\nTITLE: Setting up Sui dApp Kit Providers\nDESCRIPTION: Example showing how to configure and wrap a React application with necessary providers for Sui dApp Kit including network configuration, QueryClient, and wallet integration.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetworkConfig, SuiClientProvider, WalletProvider } from '@mysten/dapp-kit';\nimport { getFullnodeUrl } from '@mysten/sui/client';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Config options for the networks you want to connect to\nconst { networkConfig } = createNetworkConfig({\n\tlocalnet: { url: getFullnodeUrl('localnet') },\n\tmainnet: { url: getFullnodeUrl('mainnet') },\n});\nconst queryClient = new QueryClient();\n\nfunction App() {\n\treturn (\n\t\t<QueryClientProvider client={queryClient}>\n\t\t\t<SuiClientProvider networks={networkConfig} defaultNetwork=\"localnet\">\n\t\t\t\t<WalletProvider>\n\t\t\t\t\t<YourApp />\n\t\t\t\t</WalletProvider>\n\t\t\t</SuiClientProvider>\n\t\t</QueryClientProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Personal Kiosk with KioskTransaction\nDESCRIPTION: This snippet illustrates how to create a personal kiosk using KioskTransaction. It shows creating the personal kiosk, placing an item in it, and finalizing the transaction. The PersonalKioskCap is automatically transferred to the sender during finalization.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/kiosk-transaction.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Initiliazed somewhere in the app.\nconst kioskClient = new KioskClient({...});\n\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient });\n\n// An example that creates a personal kiosk, uses it to place an item, and shares it.\n// The `PersonalKioskCap` is automatically transferred to the sender when calling `.finalize()`.\n// The `Kiosk` is automatically shared when calling `.finalize()`.\nkioskTx\n    .createPersonal(true) // `true` allows us to reuse the kiosk in the same PTB. If we pass false, we can only call `kioskTx.finalize()`.\n    .place({\n        itemType: '0x...::hero::Hero',\n        item: '0xAHero',\n    })\n    .finalize(); // finalize is always our last call.\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({tx: tx});\n```\n\n----------------------------------------\n\nTITLE: Querying Kiosk Content with KioskClient in TypeScript\nDESCRIPTION: This snippet shows how to query a kiosk's contents using the KioskClient. It returns detailed information about the items in the kiosk, including their locked status and listing information if applicable.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/querying.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst kioskClient = new KioskClient({...});\n\nconst id = `0xKioskId`;\n\n// You can perform actions, like querying the owned kiosks for an address.\nconst res = await kioskClient.getKiosk({\n    id,\n    options: {\n        withKioskFields: true, // this flag also returns the `kiosk` object in the response, which includes the base setup\n        withListingPrices: true, // This flag enables / disables the fetching of the listing prices.\n    }\n});\nconsole.log(res);\n/**\n * An example response of an existing kiosk\n *\n{\n  items: [\n    {\n      objectId: '0xf65e88a33466763cabd11b7c2a57938cf4fa707c6cf767cb428894e14caf1537',\n      type: '0xd12f8e0fdae3f5d88d2fc4af2e869ea503491e2d8da5f3136320b65bdcf70ab3::hero::Hero',\n      isLocked: false,\n      kioskId: '0x6d45df1942c11048a9182e3f732262e6e3c95ddd2e5f338c565f531717c2617f',\n      listing: undefined,\n      data: {\n        objectId: '0xf65e88a33466763cabd11b7c2a57938cf4fa707c6cf767cb428894e14caf1537',\n        version: '18',\n        digest: 'As9fkLEP4QVChhYuGemB185xyyzWG4hspSa3UZ6TWR8b',\n        display: { data: null, error: null },\n        content: {\n          dataType: 'moveObject',\n          type: '0xd12f8e0fdae3f5d88d2fc4af2e869ea503491e2d8da5f3136320b65bdcf70ab3::hero::Hero',\n          hasPublicTransfer: true,\n          fields: {\n            id: {\n              id: '0xf65e88a33466763cabd11b7c2a57938cf4fa707c6cf767cb428894e14caf1537'\n            },\n            level: 3\n          }\n        }\n      }\n    },\n    {\n      objectId: '0x34def97cb8c357fcfdf22f72421d4f6f01706662acf7be1afb6e7391d5491372',\n      type: '0xd12f8e0fdae3f5d88d2fc4af2e869ea503491e2d8da5f3136320b65bdcf70ab3::hero::Hero',\n      isLocked: true,\n      kioskId: '0x6d45df1942c11048a9182e3f732262e6e3c95ddd2e5f338c565f531717c2617f',\n      listing: undefined,\n      data: {\n        objectId: '0x34def97cb8c357fcfdf22f72421d4f6f01706662acf7be1afb6e7391d5491372',\n        version: '15',\n        digest: 'J1MdmHUCXJEKd86rkmMwWASMV86wGkVS9P6SFPyRaKVV',\n        display: { data: null, error: null },\n        content: {\n          dataType: 'moveObject',\n          type: '0xd12f8e0fdae3f5d88d2fc4af2e869ea503491e2d8da5f3136320b65bdcf70ab3::hero::Hero',\n          hasPublicTransfer: true,\n          fields: {\n            id: {\n              id: '0x34def97cb8c357fcfdf22f72421d4f6f01706662acf7be1afb6e7391d5491372'\n            },\n            level: 1\n          }\n        }\n      }\n    }\n  ],\n  itemIds: [\n    '0xf65e88a33466763cabd11b7c2a57938cf4fa707c6cf767cb428894e14caf1537',\n    '0x34def97cb8c357fcfdf22f72421d4f6f01706662acf7be1afb6e7391d5491372'\n  ],\n  listingIds: [],\n  extensions: [],\n  kiosk: {\n    id: '6d45df1942c11048a9182e3f732262e6e3c95ddd2e5f338c565f531717c2617f',\n    profits: '100000',\n    owner: '96300f8d9064f954f99db2d7fbe2ad0c5e4344f0e22392330285d399498cfaf3',\n    itemCount: 2,\n    allowExtensions: false\n  }\n}\n */\n```\n\n----------------------------------------\n\nTITLE: Purchasing an Item from a Kiosk using TypeScript SDK\nDESCRIPTION: This snippet demonstrates how to purchase an item from a kiosk using the TypeScript SDK. It creates a KioskTransaction, calls the purchaseAndResolve function, and finalizes the transaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/purchasing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst item = {\n\titemType: '0x..::hero::Hero',\n\titemId: '0x..',\n\tprice: 100000n,\n\tsellerKiosk: '0xSellerKiosk',\n};\n\n// Assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nawait kioskTx.purchaseAndResolve({\n\titemType: item.itemType,\n\titemId: item.itemId,\n\tprice: item.price,\n\tsellerKiosk: item.sellerKiosk,\n});\n\nkioskTx.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Computing ZkLogin Address from JWT in TypeScript\nDESCRIPTION: Shows how to compute a zkLogin address from a JWT string using the jwtToAddress function.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/zklogin.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { jwtToAddress } from '@mysten/sui/zklogin';\n\nconst address = jwtToAddress(jwtAsString, salt);\n```\n\n----------------------------------------\n\nTITLE: Transferring SUI in Sui\nDESCRIPTION: TypeScript code showing how to transfer SUI tokens to another address using the SuiClient and Ed25519Keypair.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction } from '@mysten/sui/transactions';\n\n// Generate a new Ed25519 Keypair\nconst keypair = new Ed25519Keypair();\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\n\nconst tx = new Transaction();\nconst [coin] = tx.splitCoins(tx.gas, [1000]);\ntx.transferObjects([coin], keypair.getPublicKey().toSuiAddress());\nconst result = await client.signAndExecuteTransaction({\n\tsigner: keypair,\n\ttransaction: tx,\n});\nconsole.log({ result });\n```\n\n----------------------------------------\n\nTITLE: Complex Enum Transformation with BCS\nDESCRIPTION: Shows how to transform enum types into a TypeScript-friendly format using custom transformation logic. Includes type definitions and practical usage examples.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Merge<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;\ntype EnumKindTransform<T> = T extends infer U\n\t? Merge<(U[keyof U] extends null | boolean ? object : U[keyof U]) & { kind: keyof U }>\n\t: never;\n\nfunction enumKind<T extends object, Input extends object>(type: BcsType<T, Input>) {\n\treturn type.transform({\n\t\tinput: ({ kind, ...val }: EnumKindTransform<Input>) =>\n\t\t\t({\n\t\t\t\t[kind]: val,\n\t\t\t}) as Input,\n\t\toutput: (val) => {\n\t\t\tconst key = Object.keys(val)[0] as keyof T;\n\n\t\t\treturn { kind: key, ...val[key] } as EnumKindTransform<T>;\n\t\t},\n\t});\n}\n\nconst MyEnum = enumKind(\n\tbcs.enum('MyEnum', {\n\t\tA: bcs.struct('A', {\n\t\t\tid: bcs.u8(),\n\t\t}),\n\t\tB: bcs.struct('B', {\n\t\t\tval: bcs.string(),\n\t\t}),\n\t}),\n);\n\n// Enums wrapped with enumKind flatten the enum variants and add a `kind` field to differentiate them\nconst A = MyEnum.serialize({ kind: 'A', id: 1 }).toBytes();\nconst B = MyEnum.serialize({ kind: 'B', val: 'xyz' }).toBytes();\n\nconst parsedA = MyEnum.parse(A); // returns { kind: 'A', id: 1 }\n```\n\n----------------------------------------\n\nTITLE: Creating KioskClient for Custom Network in TypeScript\nDESCRIPTION: This snippet shows how to create a KioskClient instance for a custom network (e.g., devnet or localnet) by specifying the Network.CUSTOM option and providing packageIds for various rules and extensions.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/introduction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// constructing it for custom network use.\nconst kioskClient = new KioskClient({\n\tclient,\n\tnetwork: Network.CUSTOM,\n\tpackageIds: {\n\t\tkioskLockRulePackageId: '0x...',\n\t\troyaltyRulePackageId: '0x...',\n\t\tpersonalKioskRulePackageId: '0x...',\n\t\tfloorPriceRulePackageId: '0x...',\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Requesting SUI from Faucet\nDESCRIPTION: TypeScript code showing how to request SUI tokens from the faucet for testing purposes on devnet, testnet, or localnet.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFaucetHost, requestSuiFromFaucetV0 } from '@mysten/sui/faucet';\n\nawait requestSuiFromFaucetV0({\n\thost: getFaucetHost('testnet'),\n\trecipient: '0xcc2bd176a478baea9a0de7a24cd927661cc6e860d5bacecb9a138ef20dbab231',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Kiosk with Kiosk SDK V2\nDESCRIPTION: Shows how to create a new kiosk using the new Kiosk SDK V2. It demonstrates initializing the KioskClient once and using the builder pattern API to create a transaction that creates and shares a kiosk, then transfers the capability.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/from-v1.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/// You need to do this only once and re-use it in the application.\nconst kioskClient = new KioskClient({\n\tclient: new SuiClient({\n\t\turl: getFullnodeUrl('mainnet'),\n\t}),\n\tnetwork: Network.MAINNET,\n});\n\nconst placeAndListToKiosk = async () => {\n\tconst tx = new Transaction();\n\n\tconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient });\n\n\tkioskTx.shareAndTransferCap('0xSomeSuiAddress').finalize();\n\n\t// ... continue to sign and execute the transaction\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Type-Safe Query with Variables in TypeScript\nDESCRIPTION: This example shows how to use the graphql function to create a type-safe query with variables. It demonstrates querying for a default SUINS name associated with a given address, showcasing type safety for both the query and its variables.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/graphql.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst getSuinsName = graphql(`\n\tquery getSuiName($address: SuiAddress!) {\n\t\taddress(address: $address) {\n\t\t\tdefaultSuinsName\n\t\t}\n\t}\n`);\n\nasync function getDefaultSuinsName(address: string) {\n\tconst result = await gqlClient.query({\n\t\tquery: getSuinsName,\n\t\tvariables: {\n\t\t\taddress,\n\t\t},\n\t});\n\n\treturn result.data?.address?.defaultSuinsName;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Owned Kiosks with KioskClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to query owned kiosks for a given address using the KioskClient. It returns kioskOwnerCaps and kioskIds, which are important for managing owned kiosks and making purchases.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/querying.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst kioskClient = new KioskClient({...});\nconst address = '0xAddress'\n// You can perform actions, like querying the owned kiosks for an address.\nconst { kioskOwnerCaps, kioskIds } = await kioskClient.getOwnedKiosks({ address });\nconsole.log(kioskOwnerCaps);\n\n/**\n * An example response for an address that owns two kiosks (one of which is personal)\n[\n  {\n    isPersonal: true,\n    digest: '9mstxLa87E3VEewQ62EEQDKb7ZH2irrEXeMetQjQHzXz',\n    version: '18',\n    objectId: '0x5d4df1b8da5e1b6bafbb4b7dc5c73e532324d82c86e331f71bf1ea5dff18dccc',\n    kioskId: '0x8453fc71611ce8ff73efcca42ed241dcaf7dc65411b56a7be42e6a0bc3d72c13'\n  },\n  {\n    isPersonal: false,\n    digest: '8fsKgCh5c2ycPKMVUqUz2H6D9WkPjRHmGP454z67afJh',\n    version: '15',\n    objectId: '0x84f5a9a1379d73eceae03d0578637936e208daa809e04ec07a8085c798a980fd',\n    kioskId: '0xf8c826aae52bc576768032ce496b7fc349f9003603ed1541c8033fc5c2dd2d2c'\n  }\n]\n */\n```\n\n----------------------------------------\n\nTITLE: Batch Transfer Implementation\nDESCRIPTION: Implementation of multiple coin transfers in a single transaction using TypeScript interfaces and array operations.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Transfer {\n\tto: string;\n\tamount: number;\n}\n\n// procure a list of some Sui transfers to make\nconst transfers: Transfer[] = getTransfers();\n\nconst tx = new Transaction();\n\n// first, split the gas coin into multiple coins\nconst coins = tx.splitCoins(\n\ttx.gas,\n\ttransfers.map((transfer) => transfer.amount),\n);\n\n// next, create a transfer transaction for each coin\ntransfers.forEach((transfer, index) => {\n\ttx.transferObjects([coins[index]], transfer.to);\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSuiClientQuery Hook with React for Sui RPC Calls\nDESCRIPTION: This example demonstrates how to use the useSuiClientQuery hook to fetch owned objects from the Sui blockchain. The hook wraps TanStack Query's useQuery and handles loading, error states, and data fetching from the Sui RPC.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/rpc-hooks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSuiClientQuery } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { data, isPending, isError, error, refetch } = useSuiClientQuery(\n\t\t'getOwnedObjects',\n\t\t{ owner: '0x123' },\n\t\t{\n\t\t\tgcTime: 10000,\n\t\t},\n\t);\n\n\tif (isPending) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tif (isError) {\n\t\treturn <div>Error: {error.message}</div>;\n\t}\n\n\treturn <pre>{JSON.stringify(data, null, 2)}</pre>;\n}\n```\n\n----------------------------------------\n\nTITLE: Minting into New Kiosk (Silent Creation) using TypeScript and Kiosk SDK\nDESCRIPTION: This snippet shows how to mint an item for a user without an existing kiosk. It demonstrates silent kiosk creation, minting an item, and transferring the kiosk cap to the user.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/examples.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume the client exists somewhere else.\nconst kioskClient = new KioskClient({...});\n\n// Our mint function.\nconst mint = async () => {\n    const tx = new Transaction();\n    const kioskTx = new KioskTransaction({ kioskClient, transaction: tx }});\n\n    // Creates a kiosk.\n    kioskTx.create();\n\n    // We'll assume it costs 1 SUI\n    let coin = tx.splitCoins(tx.gas, [1_000_000_000]);\n\n    // A function that mints directly into the kiosk.\n     tx.moveCall({\n            target: '0xMyGame::hero::mint',\n            arguments: [\n                coin, // the payment\n                kioskTx.getKiosk(), // our kiosk that the hero will be placed in.\n                kioskTx.getKioskCap() // our kiosk cap, so that the function can place or lock it.\n            ]\n    });\n\n    kioskTx.shareAndTransferCap('0xAddressToTransferCapTo');\n    kioskTx.finalize();\n\n    // Sign and execute transaction.\n    await signAndExecuteTransaction({ tx: tx });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Walrus Client\nDESCRIPTION: Basic setup to create instances of SuiClient and WalrusClient for testnet usage\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { WalrusClient } from '@mysten/walrus';\n\nconst suiClient = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\n\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Module Constants with TypeScript\nDESCRIPTION: Example demonstrating how to update constant values in Move bytecode using BCS serialization. Shows updating decimals, symbol, and name constants with new values.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/move-bytecode-template/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs } from '@mysten/bcs';\nimport * as template from '@mysten/move-bytecode-template';\n\n// please, manually scan the existing values, this operation is very sensitive\nconsole.log(template.get_constants(bytecode));\n\nlet updated;\n\n// Update DECIMALS\nupdated = update_constants(\n\tbytecode,\n\tbcs.u8().serialize(3).toBytes(), // new value\n\tbcs.u8().serialize(6).toBytes(), // current value\n\t'U8', // type of the constant\n);\n\n// Update SYMBOL\nupdated = update_constants(\n\tupdated,\n\tbcs.string().serialize('MYC').toBytes(), // new value\n\tbcs.string().serialize('TMPL').toBytes(), // current value\n\t'Vector(U8)', // type of the constant\n);\n\n// Update NAME\nupdated = update_constants(\n\tupdated,\n\tbcs.string().serialize('My Coin').toBytes(), // new value\n\tbcs.string().serialize('Template Coin').toBytes(), // current value\n\t'Vector(U8)', // type of the constant\n);\n```\n\n----------------------------------------\n\nTITLE: Placing and Listing an Item in a Kiosk in TypeScript\nDESCRIPTION: A convenience function that combines placing an item in a kiosk and listing it for sale in a single operation. This shorthand saves transaction steps compared to calling place() and list() separately.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst item = '0xHeroAddress';\nconst itemType = '0x..::hero::Hero';\n\n// Assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nkioskTx\n\t.placeAndList({\n\t\titemId,\n\t\titemType,\n\t\tprice: 100000n,\n\t})\n\t.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Implementing ParallelTransactionExecutor in TypeScript\nDESCRIPTION: Shows how to initialize and use ParallelTransactionExecutor for concurrent transaction execution. The example demonstrates the same coin splitting and transfer operations as the serial executor but executed in parallel.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/executors.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { ParallelTransactionExecutor } from '@mysten/sui/transactions';\n\nconst client = new SuiClient({ url: getFullnodeUrl('devnet') });\n\nconst executor = new ParallelTransactionExecutor({\n\tclient,\n\tsigner: yourKeyPair,\n});\n\nconst tx1 = new Transaction();\nconst [coin1] = tx1.splitCoins(tx1.gas, [1]);\ntx1.transferObjects([coin1], address1);\nconst tx2 = new Transaction();\nconst [coin2] = tx2.splitCoins(tx2.gas, [1]);\ntx2.transferObjects([coin2], address2);\n\nconst [{ digest: digest1 }, { digest: digest2 }] = await Promise.all([\n\texecutor.executeTransaction(tx1),\n\texecutor.executeTransaction(tx2),\n]);\n```\n\n----------------------------------------\n\nTITLE: Purchasing Items and Resolving Rules with Kiosk SDK V2\nDESCRIPTION: Simplified example of purchasing an item from a kiosk and resolving transfer policy rules using the new Kiosk SDK V2. It shows how the new API works with both personal and non-personal kiosks, and greatly simplifies the purchase flow.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/from-v1.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// You need to do this only once and re-use it in the application.\nconst kioskClient = new KioskClient({\n    client: new SuiClient({\n        url: getFullnodeUrl('mainnet'),\n    }),\n    network: Network.MAINNET,\n});\n\n// An Item as returned from `kioskClient.getKiosk()` call.\nconst item = {\n  isLocked: false,\n  objectId: \"0xb892d61a9992a10c9453efcdbd14ca9720d7dc1000a2048224209c9e544ed223\"\n  type: \"0x52852c4ba80040395b259c641e70b702426a58990ff73cecf5afd31954429090::test::TestItem\",\n  kioskId: '0xSomeKioskAddress',\n  listing: {\n    isExclusive: false,\n    listingId: \"0x368b512ff2514dbea814f26ec9a3d41198c00e8ed778099961e9ed22a9f0032b\",\n    price: \"20000000000\" // in MIST\n  }\n}\n\nconst purchase = async () => {\n    // Assume you have saved the user's preferred kiosk Cap somewhere in your app's state.\n    // You wouldn't need to query this for every purchase.\n    const { kioskOwnerCaps } = await kioskClient.getOwnedKiosks({ address: '0xSomeAddress' });\n\n    const tx = new Transaction();\n\n    const kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap: kioskOwnerCaps[0] });\n\n    // Purchase the item and resolve the rules.\n    await kioskTx.purchaseAndResolve({\n        itemType: item.type,\n        itemId: item.objectId,\n        price: item.listing.price,\n        sellerKiosk: item.kioskId,\n    });\n\n    kioskTx.finalize();\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Transaction Results in TypeScript\nDESCRIPTION: Shows two methods for working with multiple transaction results - using array destructuring and direct array indexing. Examples use NFT minting and transferring.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// destructuring (preferred, as it gives you logical local names)\nconst [nft1, nft2] = tx.moveCall({ target: '0x2::nft::mint_many' });\ntx.transferObjects([nft1, nft2], address);\n\n// array indexes\nconst mintMany = tx.moveCall({ target: '0x2::nft::mint_many' });\ntx.transferObjects([mintMany[0], mintMany[1]], address);\n```\n\n----------------------------------------\n\nTITLE: Sponsored Transaction with CoinWithBalance\nDESCRIPTION: Demonstrates how to use CoinWithBalance intent for sponsored transactions by disabling gas coin usage.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/intents.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\ntx.transferObjects([coinWithBalance({ balance: 100, useGasCoin: false })], recipient);\n```\n\n----------------------------------------\n\nTITLE: Publishing Modules in Sui\nDESCRIPTION: TypeScript code demonstrating how to publish a package in Sui using the SuiClient and Ed25519Keypair.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst { execSync } = require('child_process');\n// Generate a new Ed25519 Keypair\nconst keypair = new Ed25519Keypair();\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\nconst { modules, dependencies } = JSON.parse(\n\texecSync(`${cliPath} move build --dump-bytecode-as-base64 --path ${packagePath}`, {\n\t\tencoding: 'utf-8',\n\t}),\n);\nconst tx = new Transaction();\nconst [upgradeCap] = tx.publish({\n\tmodules,\n\tdependencies,\n});\ntx.transferObjects([upgradeCap], keypair.toSuiAddress());\nconst result = await client.signAndExecuteTransaction({\n\tsigner: keypair,\n\ttransaction: tx,\n});\nconsole.log({ result });\n```\n\n----------------------------------------\n\nTITLE: Using an Existing Transfer Policy in TypeScript\nDESCRIPTION: This snippet demonstrates how to instantiate a TransferPolicyTransaction with an existing transfer policy cap and add various rules like floor price, lock, royalty, and personal kiosk rules to it. It also shows commented-out code for removing these rules.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/introduction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialized somewhere in the app.\nconst kioskClient = new KioskClient({...});\n\n// You could have more than one cap, since we can create more than one transfer policy.\nconst heroPolicyCaps = await kioskClient.getOwnedTransferPoliciesByType({\n    type: `${packageId}::hero::Hero`,\n    address: '0xConnectedAddress',\n});\n\nconst tx = new Transaction();\n// You can choose to use any of the caps you have. For this example, use the first one.\nconst tpTx = new TransferPolicyTransaction({ kioskClient, transaction: tx, cap: heroPolicyCaps[0] });\n\n// A demonstration of using all the available rule add/remove functions.\n// You can chain these commands.\ntpTx\n    .addFloorPriceRule(10n)\n    .addLockRule()\n    .addRoyaltyRule(percentageToBasisPoints(10), 0)\n    .addPersonalKioskRule()\n    // .removeFloorPriceRule()\n    // .removeLockRule()\n    // .removeRoyaltyRule()\n    // .removePersonalKioskRule()\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({tx: tx});}\n```\n\n----------------------------------------\n\nTITLE: Generics Usage in BCS\nDESCRIPTION: Demonstrates how to define and use generic structs and enums in BCS, including examples with multiple generic parameters.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: Generics\nimport { bcs, BcsType } from '@mysten/bcs';\n\n// The T typescript generic is a placeholder for the typescript type of the generic value\n// The T argument will be the bcs type passed in when creating a concrete instance of the Container type\nfunction Container<T extends BcsType<any>>(T: T) {\n\treturn bcs.struct('Container<T>', {\n\t\tcontents: T,\n\t}),\n}\n\n// When serializing, we have to pass the type to use for `T`\nconst bytes = Container(bcs.u8()).serialize({ contents: 100 }).toBytes();\n\n// Alternatively we can save the concrete type as a variable\nconst U8Container = Container(bcs.u8());\nconst bytes = U8Container.serialize({ contents: 100 }).toBytes();\n\n// Using multiple generics\nfunction VecMap<K extends BcsType<any>, V extends BcsType<any>>(K: K, V: V) {\n\t// You can use the names of the generic params in the type name to\n\treturn bcs.struct(\n\t\t// You can use the names of the generic params to give your type a more useful name\n\t\t`VecMap<${K.name}, ${V.name}>`,\n\t\t{\n\t\t\tkeys: bcs.vector(K),\n\t\t\tvalues: bcs.vector(V),\n\t\t}\n\t)\n}\n\n// To serialize VecMap, we can use:\nVecMap(bcs.string(), bcs.string())\n\t.serialize({\n\t\tkeys: ['key1', 'key2', 'key3'],\n\t\tvalues: ['value1', 'value2', 'value3'],\n\t})\n\t.toBytes();\n```\n\n----------------------------------------\n\nTITLE: Creating a Helper Function for Transaction Intent in TypeScript\nDESCRIPTION: This snippet shows how to create a helper function that wraps the process of adding a 'TransferToSender' intent to a transaction, making it easier to use.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/plugins.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Commands, Transaction, TransactionObjectInput } from '@mysten/sui/transactions';\n\nfunction transferToSender(objects: TransactionObjectInput[]) {\n\treturn (tx: Transaction) => {\n\t\ttx.add(\n\t\t\tCommands.Intent({\n\t\t\t\tname: 'TransferToSender',\n\t\t\t\tinputs: {\n\t\t\t\t\tobjects: objects.map((obj) => tx.object(obj)),\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t};\n}\n\nconst transaction = new Transaction();\n\ntransaction.add(transferToSender(['0x1234']));\n```\n\n----------------------------------------\n\nTITLE: Transaction Signature Verification\nDESCRIPTION: Shows how to verify transaction signatures using the Sui client.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/keypairs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { verifyTransactionSignature } from '@mysten/sui/verify';\n\nconst client = new SuiClient({ url: getFullnodeUrl('testnet') });\nconst tx = new Transaction();\nconst bytes = await tx.build({ client });\n\nconst keypair = new Ed25519Keypair();\nconst { signature } = await keypair.signTransaction(bytes);\n\nawait verifyTransactionSignature(bytes, signature, {\n\taddress: keypair.getPublicKey().toSuiAddress(),\n});\n```\n\n----------------------------------------\n\nTITLE: Placing and Listing Items with Kiosk SDK V2\nDESCRIPTION: Demonstrates how to place an item in a kiosk and list it for sale using the new Kiosk SDK V2. It shows how to initialize a KioskClient once, retrieve user kiosks, and use the builder pattern API to create a more readable transaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/from-v1.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/// You need to do this only once and re-use it in the application.\nconst kioskClient = new KioskClient({\n\tclient: new SuiClient({\n\t\turl: getFullnodeUrl('mainnet'),\n\t}),\n\tnetwork: Network.MAINNET,\n});\n\nconst placeAndListToKiosk = async () => {\n\t// Assume you have saved the user's preferred kiosk Cap somewhere in your app's state.\n\tconst { kioskOwnerCaps } = await kioskClient.getOwnedKiosks({ address: '0xSomeAddress' });\n\n\tconst tx = new Transaction();\n\n\t// Assume you use the first owned kiosk.\n\tnew KioskTransaction({ transaction: tx, kioskClient, cap: kioskOwnerCaps[0] })\n\t\t.placeAndList({\n\t\t\titemType: '0xItemAddr::some:ItemType',\n\t\t\titem: 'SomeItemId',\n\t\t\tprice: '100000',\n\t\t})\n\t\t.finalize();\n\n\t// ... continue to sign and execute the transaction\n};\n```\n\n----------------------------------------\n\nTITLE: Using Typed GraphQL Queries with Apollo Client in TypeScript\nDESCRIPTION: This snippet illustrates how to use the typed GraphQL queries generated by the graphql function with other popular GraphQL clients, specifically Apollo Client. It shows a React component that uses the useQuery hook to fetch and display the chain identifier.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/graphql.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useQuery } from '@apollo/client';\n\nconst chainIdentifierQuery = graphql(`\n\tquery {\n\t\tchainIdentifier\n\t}\n`);\n\nfunction ChainIdentifier() {\n\tconst { loading, error, data } = useQuery(getPokemonsQuery);\n\n\treturn <div>{data?.chainIdentifier}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Gas Payment in Sui Transaction\nDESCRIPTION: Configures specific coins to be used as gas payment for a transaction. The coins must not overlap with transaction input objects and will be merged into a single gas coin.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/gas.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// you need to ensure that the coins do not overlap with any\n// of the input objects for the transaction\ntx.setGasPayment([coin1, coin2]);\n```\n\n----------------------------------------\n\nTITLE: Creating a MultiSigPublicKey in TypeScript for Sui\nDESCRIPTION: Creates a MultiSigPublicKey with a threshold of 2 and three keypairs with different weights. The resulting multisig address requires signatures with a combined weight of at least 2 to be valid.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/multisig.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { MultiSigPublicKey } from '@mysten/sui/multisig';\n\nconst kp1 = new Ed25519Keypair();\nconst kp2 = new Ed25519Keypair();\nconst kp3 = new Ed25519Keypair();\n\nconst multiSigPublicKey = MultiSigPublicKey.fromPublicKeys({\n\tthreshold: 2,\n\tpublicKeys: [\n\t\t{\n\t\t\tpublicKey: kp1.getPublicKey(),\n\t\t\tweight: 1,\n\t\t},\n\t\t{\n\t\t\tpublicKey: kp2.getPublicKey(),\n\t\t\tweight: 1,\n\t\t},\n\t\t{\n\t\t\tpublicKey: kp3.getPublicKey(),\n\t\t\tweight: 2,\n\t\t},\n\t],\n});\n\nconst multisigAddress = multiSigPublicKey.toSuiAddress();\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Budget in Sui Transaction\nDESCRIPTION: Explicitly sets a gas budget for a Sui transaction, overriding the default behavior of automatic budget calculation through dry-run execution.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/gas.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntx.setGasBudget(gasBudgetAmount);\n```\n\n----------------------------------------\n\nTITLE: Executing zkSend Link Transaction\nDESCRIPTION: Shows how to execute a transaction to create a zkSend link, including signing and submitting to the blockchain.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/link-builder.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = await link.createSendTransaction();\n\nconst { bytes, signature } = tx.sign({ client, signer: keypair });\n\nconst result = await client.executeTransactionBlock({\n\ttransactionBlock: bytes,\n\tsignature,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Transaction Execution with useSignAndExecuteTransaction\nDESCRIPTION: This example shows how to customize transaction execution by providing a custom execute function that returns additional data. It uses the SuiClient to execute the transaction with options for showing object changes and raw effects.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useSignAndExecuteTransaction.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tConnectButton,\n\tuseSuiClient,\n\tuseCurrentAccount,\n\tuseSignAndExecuteTransaction,\n} from '@mysten/dapp-kit';\nimport { Transaction } from '@mysten/sui/transactions';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\tconst client = useSuiClient();\n\tconst { mutate: signAndExecuteTransaction } = useSignAndExecuteTransaction({\n\t\texecute: async ({ bytes, signature }) =>\n\t\t\tawait client.executeTransactionBlock({\n\t\t\t\ttransactionBlock: bytes,\n\t\t\t\tsignature,\n\t\t\t\toptions: {\n\t\t\t\t\t// Raw effects are required so the effects can be reported back to the wallet\n\t\t\t\t\tshowRawEffects: true,\n\t\t\t\t\t// Select additional data to return\n\t\t\t\t\tshowObjectChanges: true,\n\t\t\t\t},\n\t\t\t}),\n\t});\n\n\tconst [digest, setDigest] = useState('');\n\tconst currentAccount = useCurrentAccount();\n\n\treturn (\n\t\t<div style={{ padding: 20 }}>\n\t\t\t<ConnectButton />\n\t\t\t{currentAccount && (\n\t\t\t\t<>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsignAndExecuteTransaction(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttransaction: new Transaction(),\n\t\t\t\t\t\t\t\t\t\tchain: 'sui:devnet',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tonSuccess: (result) => {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('object changes', result.objectChanges);\n\t\t\t\t\t\t\t\t\t\t\tsetDigest(result.digest);\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSign and execute transaction\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>Digest: {digest}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Purchasing Items and Resolving Rules with Kiosk SDK V1\nDESCRIPTION: Complex example of purchasing an item from a kiosk and resolving transfer policy rules using the original Kiosk SDK V1. It demonstrates querying transfer policies, handling kiosk_lock_rule and royalty_rule, and placing the purchased item in the buyer's kiosk if needed.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/from-v1.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { queryTransferPolicy, purchaseAndResolvePolicies, place, testnetEnvironment } from '@mysten/kiosk';\nimport { SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient(\n  url: 'https://fullnode.testnet.sui.io:443',\n);\n\n// The kiosk we're purchasing from.\nconst kioskId = `0xSomeKioskAddress`;\n// A sample item retrieved from `fetchKiosk` function (or hard-coded).\nconst item = {\n  isLocked: false,\n  objectId: \"0xb892d61a9992a10c9453efcdbd14ca9720d7dc1000a2048224209c9e544ed223\"\n  type: \"0x52852c4ba80040395b259c641e70b702426a58990ff73cecf5afd31954429090::test::TestItem\",\n  listing: {\n    isExclusive: false,\n    listingId: \"0x368b512ff2514dbea814f26ec9a3d41198c00e8ed778099961e9ed22a9f0032b\",\n    price: \"20000000000\" // in MIST\n  }\n}\nconst ownedKiosk = `0xMyKioskAddress`;\nconst ownedKioskCap = `0xMyKioskOwnerCap`;\n\nconst purchaseItem = async (item, kioskId) => {\n\n  // Fetch the policy of the item (could be an array, if there's more than one transfer policy)\n  const policies = await queryTransferPolicy(client, item.type);\n  // Selecting the first one for simplicity.\n  const policyId = policy[0]?.id;\n  // Initialize transaction.\n  const tx = new Transaction();\n\n  // Both are required if there is a `kiosk_lock_rule`.\n  // Optional otherwise. Function throws an error if there's a kiosk_lock_rule and these are missing.\n  const extraParams = {\n    ownedKiosk,\n    ownedKioskCap\n  }\n  // Define the environment.\n  // To use a custom package address for rules, you could call:\n  // const environment = customEnvironment('<PackageAddress>');\n  const environment = testnetEnvironment;\n\n  // Extra params. Optional, but required if the user tries to resolve a `kiosk_lock_rule`.\n  // Purchases the item. Supports `kiosk_lock_rule`, `royalty_rule` (accepts combination too).\n  const result = purchaseAndResolvePolicies(tx, item.type, item.listing.price, kioskId, item.objectId, policy[0], environment, extraParams);\n\n  // result = {item: <the_purchased_item>, canTransfer: true/false // depending on whether there was a kiosk lock rule }\n  // If the item didn't have a kiosk_lock_rule, you need to do something with it.\n  // For example, place it in your own kiosk. (demonstrated below)\n  if(result.canTransfer) place(tx, item.type, ownedKiosk, ownedKioskCap , result.item);\n\n  // ...finally, sign PTB & execute it.\n\n};\n```\n\n----------------------------------------\n\nTITLE: Listing an Item for Sale in a Kiosk in TypeScript\nDESCRIPTION: Demonstrates how to list an item for sale that is already in a kiosk. The function requires specifying the item ID, type, and the price in MIST.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst itemId = '0xHeroAddress';\nconst itemType = '0x..::hero::Hero';\n\n// Assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nkioskTx\n\t.list({\n\t\titemId,\n\t\titemType,\n\t\tprice: 100000n,\n\t})\n\t.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Querying Kiosk Extension with KioskClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to query a kiosk extension's data using the KioskClient. It returns the extension details if it exists, or null if there's no extension with the specified type installed.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/querying.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming we have a kioskClient instance.\nconst kioskClient = new KioskClient({...});\n\n// The type of the custom extension.\nconst type = '0xAddress::custom_extension::ACustomExtensionType';\n\nconst extension = await kioskClient.getKioskExtension({\n  kioskId: '0xAKioskId',\n  type\n});\n\nconsole.log(extension);\n\n/**\n * An example output of the response\n{\n  objectId: 'extensionObjectId',\n  type: '0xAddress::custom_extension::ACustomExtensionType',\n  isEnabled: true,\n  permissions: \"3\",\n  storageId: '0xExampleStorageId',\n  storageSize: \"0\",\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Using useCurrentWallet Hook in React Component\nDESCRIPTION: This snippet demonstrates how to use the useCurrentWallet hook in a React component. It shows how to access the current wallet information and connection status, and render different UI elements based on the connection state.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useCurrentWallet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useCurrentWallet } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { currentWallet, connectionStatus } = useCurrentWallet();\n\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton />\n\t\t\t{connectionStatus === 'connected' ? (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>Current wallet:</h2>\n\t\t\t\t\t<div>Name: {currentWallet.name}</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tAccounts:\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{currentWallet.accounts.map((account) => (\n\t\t\t\t\t\t\t\t<li key={account.address}>- {account.address}</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<div>Connection status: {connectionStatus}</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Existing Kiosk with KioskTransaction\nDESCRIPTION: This snippet demonstrates how to use the KioskTransaction client with an existing kiosk. It shows retrieving owned kiosks, creating a transaction, withdrawing profits, placing and listing items, and finalizing the transaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/kiosk-transaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Initiliazed somewhere in the app.\nconst kioskClient = new KioskClient({...});\nconst { kioskOwnerCaps } = await kioskClient.getOwnedKiosks({ address: '0xMyAddress'});\n\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap: kioskOwnerCaps[0] });\n\n// Now you can do whatever you want with kioskTx.\n// For example, you could withdraw the profits from the kiosk.\nkioskTx.withdraw('0xMyAddress', 100_000_000n);\n\n// You could also chain some other functionality if you want to.\nkioskTx\n    .place({\n        itemType: '0xMyItemType',\n        item: '0xMyItem',\n    })\n    .list({\n        itemType: '0xMyItemType',\n        itemId: '0xMyItem',\n        price: 10000n\n    });\n\n// Always called as our last kioskTx interaction.\nkioskTx.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({tx: tx});\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Signing with useSignPersonalMessage in React\nDESCRIPTION: A React component example demonstrating how to implement personal message signing functionality using the useSignPersonalMessage hook from @mysten/dapp-kit. The component includes a text input for the message, a connect button, and displays the resulting signature.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useSignPersonalMessage.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useCurrentAccount, useSignPersonalMessage } from '@mysten/dapp-kit';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\tconst { mutate: signPersonalMessage } = useSignPersonalMessage();\n\tconst [message, setMessage] = useState('hello, World!');\n\tconst [signature, setSignature] = useState('');\n\tconst currentAccount = useCurrentAccount();\n\n\treturn (\n\t\t<div style={{ padding: 20 }}>\n\t\t\t<ConnectButton />\n\t\t\t{currentAccount && (\n\t\t\t\t<>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\tMessage:{' '}\n\t\t\t\t\t\t\t<input type=\"text\" value={message} onChange={(ev) => setMessage(ev.target.value)} />\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsignPersonalMessage(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tmessage: new TextEncoder().encode(message),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tonSuccess: (result) => setSignature(result.signature),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tSign message\n\t\t\t\t\t</button>\n\t\t\t\t\t<div>Signature: {signature}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Template Library in Web Applications\nDESCRIPTION: Example showing how to initialize and use the Move bytecode template library in web applications. Demonstrates initialization, version checking, and serialization operations.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/move-bytecode-template/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport init, initSync, * as template from '@mysten/move-bytecode-template';\n\nawait init('path/to/move_binary_format_bg.wasm');\n// alternatively initSync(...);\n\nlet version = template.version();\nlet json = template.deserialize(fromHex('a11ceb0b06....'));\nlet bytes = template.serialize(json);\n\nconsole.assert(json == bytes, '(de)serialization failed!');\n```\n\n----------------------------------------\n\nTITLE: Bulk zkSend Link Creation\nDESCRIPTION: Demonstrates how to create multiple zkSend links in a single transaction for improved efficiency.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/link-builder.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst links = [];\n\nfor (let i = 0; i < 10; i++) {\n\tconst link = new ZkSendLinkBuilder({\n\t\tclient,\n\t\tsender: keypair.toSuiAddress(),\n\t});\n\n\tlink.addClaimableMist(100n);\n\tlinks.push(link);\n}\n\nconst urls = links.map((link) => link.getLink());\n\nconst tx = await ZkSendLinkBuilder.createLinks({\n\tlinks,\n});\n\nawait client.signAndExecuteTransaction({\n\ttransaction: tx,\n\tsigner: keypair,\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Address Types for BCS Serialization in TypeScript\nDESCRIPTION: Demonstrates how to transform between hex string addresses and byte array format required for BCS serialization using the transform API.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs, toHex } from '@mysten/bcs';\n\nconst Address = bcs.bytes(32).transform({\n\t// To change the input type, you need to provide a type definition for the input\n\tinput: (val: string) => fromHex(val),\n\toutput: (val) => toHex(val),\n});\n\nconst serialized = Address.serialize('0x000000...').toBytes();\nconst parsed = Address.parse(serialized); // will return a hex string\n```\n\n----------------------------------------\n\nTITLE: Paginating Results with SuiClient in TypeScript\nDESCRIPTION: This snippet illustrates how to handle paginated results from SuiClient RPC methods. It shows how to retrieve the first page of checkpoints and then fetch the next page using the cursor from the previous page.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/sui-client.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst page1 = await client.getCheckpoints({\n\tlimit: 10,\n});\n\nconst page2 =\n\tpage1.hasNextPage &&\n\tclient.getCheckpoints({\n\t\tcursor: page1.nextCursor,\n\t\tlimit: 10,\n\t});\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Types with BCS\nDESCRIPTION: Demonstrates how to create generic types in BCS using TypeScript generic functions. Includes examples of generic containers and more complex structures with multiple generic parameters.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: Generics\nimport { bcs, BcsType } from '@mysten/bcs';\n\n// The T typescript generic is a placeholder for the typescript type of the generic value\n// The T argument will be the bcs type passed in when creating a concrete instance of the Container type\nfunction Container<T>(T: BcsType<T>) {\n\treturn bcs.struct('Container<T>', {\n\t\tcontents: T,\n\t}),\n}\n\n// When serializing, we have to pass the type to use for `T`\nconst bytes = Container(bcs.u8()).serialize({ contents: 100 }).toBytes();\n\n// Alternatively we can save the concrete type as a variable\nconst U8Container = Container(bcs.u8());\nconst bytes = U8Container.serialize({ contents: 100 }).toBytes();\n\n// Using multiple generics\nfunction VecMap<K, V>, (K: BcsType<K>, V: BcsType<V>) {\n\t// You can use the names of the generic params in the type name to\n\treturn bcs.struct(\n\t\t// You can use the names of the generic params to give your type a more useful name\n\t\t`VecMap<${K.name}, ${V.name}>`,\n\t\t{\n\t\t\tkeys: bcs.vector(K),\n\t\t\tvalues: bcs.vector(V),\n\t\t}\n\t)\n}\n\n// To serialize VecMap, we can use:\nVecMap(bcs.string(), bcs.string())\n\t.serialize({\n\t\tkeys: ['key1', 'key2', 'key3'],\n\t\tvalues: ['value1', 'value2', 'value3'],\n\t})\n\t.toBytes();\n```\n\n----------------------------------------\n\nTITLE: Placing an Item in a Kiosk in TypeScript\nDESCRIPTION: Shows how to place an item in a kiosk. This is typically the first step before listing an item for sale or performing other kiosk operations.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst item = '0xHeroAddress';\nconst itemType = '0x..::hero::Hero';\n\n/// Assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nkioskTx\n\t.place({\n\t\titem,\n\t\titemType,\n\t})\n\t.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Claiming zkSend Link\nDESCRIPTION: Shows how to claim assets from a zkSend link using the SDK, including initialization from URL and asset claiming.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/link-builder.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZkSendLink } from '@mysten/zksend';\n\n// create a link instance from a URL\nconst link = await ZkSendLink.fromUrl('https://zksend.com/claim#$abc...');\n\n// list what claimable assets the link has\nconst { nfts, balances } = link.assets;\n\n// claim all the assets from the link\nawait link.claimAssets(addressOfClaimer);\n```\n\n----------------------------------------\n\nTITLE: Implementing an Intent Resolver in TypeScript for Sui Transactions\nDESCRIPTION: This snippet demonstrates how to implement an intent resolver for the 'TransferToSender' intent, which converts the intent into standard commands during transaction building.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/plugins.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst transaction = new Transaction();\n\ntransaction.addIntentResolver('TransferToSender', resolveTransferToSender);\n\nasync function resolveTransferToSender(\n\ttransactionData: TransactionDataBuilder,\n\tbuildOptions: BuildTransactionOptions,\n\tnext: () => Promise<void>,\n) {\n\tif (!transactionData.sender) {\n\t\tthrow new Error('Sender must be set to resolve TransferToSender');\n\t}\n\n\t// Add an input that references the sender's address\n\tconst addressInput = Inputs.Pure(bcs.Address.serialize(transactionData.sender));\n\ttransactionData.inputs.push(addressInput);\n\t// Get the index of the input to use when adding the TransferObjects command\n\tconst addressIndex = transactionData.inputs.length - 1;\n\n\tfor (const [index, transaction] of transactionData.commands.entries()) {\n\t\tif (transaction.$kind !== '$Intent' || transaction.$Intent.name !== 'TransferToSender') {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// This will replace the intent command with the correct TransferObjects command\n\t\ttransactionData.replaceCommand(index, [\n\t\t\tCommands.TransferObjects(\n\t\t\t\t// The inputs for intents are not currently typed, so we need to cast to the correct type here\n\t\t\t\ttransaction.$Intent.inputs.objects as Extract<\n\t\t\t\t\tTransactionObjectArgument,\n\t\t\t\t\t{ $kind: 'Input' }\n\t\t\t\t>,\n\t\t\t\t// This is a CallArg referencing the addressInput we added above\n\t\t\t\t{\n\t\t\t\t\tInput: addressIndex,\n\t\t\t\t},\n\t\t\t),\n\t\t]);\n\t}\n\n\t// Plugins always need to call next() to continue the build process\n\treturn next();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Transfer Policy for Type with KioskClient in TypeScript\nDESCRIPTION: This snippet shows how to query transfer policies for a specific item type using the KioskClient. It returns an array of transfer policies associated with the given item type.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/querying.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst kioskClient = new KioskClient({...});\n\nconst itemType = '0xAddress::hero::Hero';\n// You can perform actions, like querying the owned kiosks for an address.\nconst policies = await kioskClient.getTransferPolicies(itemType)\nconsole.log(policies);\n\n/* An example output of the response\n[\n  {\n    id: '0x074847055fe4ea9a7f51eeaf095c05875509403059115af121cfea9b8de355de',\n    type: '0x2::transfer_policy::TransferPolicy<0x85926b03d56e49bedfca558fc6a2540d43bdfb5c218190d63b571f33afe255f8::hero::Hero>',\n    owner: { Shared: { initial_shared_version: 5 } },\n    rules: [\n      'a82212d931d3bc7c3401552d935abced7b7fd41d4f57a99f0f47b9196b2f57f5::kiosk_lock_rule::Rule',\n      'a82212d931d3bc7c3401552d935abced7b7fd41d4f57a99f0f47b9196b2f57f5::floor_price_rule::Rule',\n      'a82212d931d3bc7c3401552d935abced7b7fd41d4f57a99f0f47b9196b2f57f5::royalty_rule::Rule',\n      'a82212d931d3bc7c3401552d935abced7b7fd41d4f57a99f0f47b9196b2f57f5::personal_kiosk_rule::Rule'\n    ],\n    balance: '20000'\n  }\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Basic Types Usage in BCS\nDESCRIPTION: Examples of using and parsing basic BCS types such as integers, strings, and byte arrays.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs } from '@mysten/bcs';\n\n// Integers\nconst u8 = bcs.u8().serialize(100).toBytes();\nconst u64 = bcs.u64().serialize(1000000n).toBytes();\nconst u128 = bcs.u128().serialize('100000010000001000000').toBytes();\n\n// Other types\nconst str = bcs.string().serialize('this is an ascii string').toBytes();\nconst hex = bcs.hex().serialize('C0FFEE').toBytes();\nconst bytes = bcs.bytes(4).serialize([1, 2, 3, 4]).toBytes();\nconst byteVector = bcs\n\t.byteVector()\n\t.serialize(new Uint8Array([1, 2, 3, 4]))\n\t.toBytes();\n// Parsing data back into original types\nconst parsedU8 = bcs.u8().parse(u8);\n// u64-u256 will be represented as bigints regardless of how they were provided when serializing them\nconst parsedU64 = bcs.u64().parse(u64);\nconst parsedU128 = bcs.u128().parse(u128);\n\nconst parsedStr = bcs.string().parse(str);\nconst parsedHex = bcs.hex().parse(hex);\nconst parsedBytes = bcs.bytes(4).parse(bytes);\nconst parsedByteVector = bcs.byteVector().parse(byteVector);\n```\n\n----------------------------------------\n\nTITLE: Signature Verification\nDESCRIPTION: Example of verifying message signatures and checking against specific addresses.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/keypairs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { verifyPersonalMessageSignature } from '@mysten/sui/verify';\n\nconst keypair = new Ed25519Keypair();\nconst message = new TextEncoder().encode('hello world');\nconst { signature } = await keypair.signPersonalMessage(message);\n\nconst publicKey = await verifyPersonalMessageSignature(message, signature);\n\nif (!publicKey.verifyAddress(keypair.getPublicKey().toSuiAddress())) {\n\tthrow new Error('Signature was valid, but was signed by a different key pair');\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Calling Unsupported RPC Methods with SuiClient in TypeScript\nDESCRIPTION: This snippet shows how to use the SuiClient to call any RPC method exposed by the connected node, even if it's not built into SuiClient. It demonstrates calling the 'suix_getCommitteeInfo' method.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/sui-client.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({ url: getFullnodeUrl('devnet') });\n\n// asynchronously call suix_getCommitteeInfo\nconst committeeInfo = await client.call('suix_getCommitteeInfo', []);\n```\n\n----------------------------------------\n\nTITLE: Using useSwitchAccount Hook with React Component\nDESCRIPTION: This code snippet demonstrates how to implement account switching functionality in a React component using the useSwitchAccount hook from @mysten/dapp-kit. The component renders a list of available accounts with buttons that allow switching between them when clicked.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useSwitchAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useAccounts, useSwitchAccount } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { mutate: switchAccount } = useSwitchAccount();\n\tconst accounts = useAccounts();\n\n\treturn (\n\t\t<div style={{ padding: 20 }}>\n\t\t\t<ConnectButton />\n\t\t\t<ul>\n\t\t\t\t{accounts.map((account) => (\n\t\t\t\t\t<li key={account.address}>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tswitchAccount(\n\t\t\t\t\t\t\t\t\t{ account },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tonSuccess: () => console.log(`switched to ${account.address}`),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSwitch to {account.address}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating New Web Crypto Signer\nDESCRIPTION: Code to generate a new WebCryptoSigner instance using the static generate() method\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/webcrypto-signer.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst keypair = await WebCryptoSigner.generate();\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds from a Kiosk in TypeScript\nDESCRIPTION: Demonstrates how to withdraw funds from a kiosk to a specified address. The amount parameter is optional - if omitted, all available funds will be withdrawn.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nkioskTx\n\t.withdraw({\n\t\taddress: 'address_to_transfer_funds',\n\t\tamount: 100000n,\n\t})\n\t.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Working with Public Keys\nDESCRIPTION: Demonstrates different methods of working with public keys and deriving Sui addresses.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/keypairs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ed25519Keypair, Ed25519PublicKey } from '@mysten/sui/keypairs/ed25519';\n\nconst keypair = new Ed25519Keypair();\n\n// method 1\nconst bytes = keypair.getPublicKey().toRawBytes();\nconst publicKey = new Ed25519PublicKey(bytes);\nconst address = publicKey.toSuiAddress();\n\n// method 2\nconst address = keypair.getPublicKey().toSuiAddress();\n```\n\n----------------------------------------\n\nTITLE: Integrating useConnectWallet Hook with Wallet Components in TypeScript\nDESCRIPTION: This example demonstrates how to use the useConnectWallet hook to establish connections with available wallets. It shows how to retrieve a list of wallets using useWallets, render them as buttons, and connect to a specific wallet when clicked. It also includes handling success callbacks when the connection is established.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useConnectWallet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useConnectWallet, useWallets } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst wallets = useWallets();\n\tconst { mutate: connect } = useConnectWallet();\n\n\treturn (\n\t\t<div style={{ padding: 20 }}>\n\t\t\t<ConnectButton />\n\t\t\t<ul>\n\t\t\t\t{wallets.map((wallet) => (\n\t\t\t\t\t<li key={wallet.name}>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tconnect(\n\t\t\t\t\t\t\t\t\t{ wallet },\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tonSuccess: () => console.log('connected'),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tConnect to {wallet.name}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Minting SuiFren into Kiosk\nDESCRIPTION: Function to mint a new SuiFren into either an existing or newly created kiosk. Handles kiosk creation if needed and performs the minting operation.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/advanced-examples.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync function mintFren(address: string) {\n\tconst { kioskOwnerCaps } = await kioskClient.getOwnedKiosks({ address });\n\n\t// Choose the first kiosk for simplicity. We could have extra logic here (e.g. let the user choose, pick a personal one, etc).\n\tconst cap = kioskOwnerCaps[0];\n\n\tconst tx = new Transaction();\n\tconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\n\t// We're mixing the logic here. If the cap is undefined, we create a new kiosk.\n\tif (!cap) kioskTx.create();\n\n\t// Let's mint a capy here into the kiosk (either a new or an existing one).\n\ttx.moveCall({\n\t\ttarget: `${packageId}::suifrens::mint_app::mint`,\n\t\targuments: [kioskTx.getKiosk(), kioskTx.getKioskCap()],\n\t\ttypeArguments: [capyType],\n\t});\n\n\t// If we don't have a cap, that means we create a new kiosk for the user in this flow.\n\tif (!cap) kioskTx.shareAndTransferCap(address);\n\n\tkioskTx.finalize();\n\n\t// sign and execute transaction.\n\tawait signAndExecuteTransaction({ tx: tx });\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing SuiClient Creation in SuiClientProvider\nDESCRIPTION: This snippet illustrates how to create a custom SuiClient with specific configurations, including custom transport and headers.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/sui-client-provider.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SuiClientProvider } from '@mysten/dapp-kit';\nimport { getFullnodeUrl, SuiClient, SuiHTTPTransport } from '@mysten/sui/client';\n\n// Config options for the networks you want to connect to\nconst networks = {\n\tlocalnet: { url: getFullnodeUrl('localnet') },\n\tmainnet: { url: getFullnodeUrl('mainnet') },\n} satisfies Record<string, SuiClientOptions>;\n\nfunction App() {\n\treturn (\n\t\t<SuiClientProvider\n\t\t\tnetworks={networks}\n\t\t\tdefaultNetwork=\"localnet\"\n\t\t\tcreateClient={(network, config) => {\n\t\t\t\treturn new SuiClient({\n\t\t\t\t\ttransport: new SuiHTTPTransport({\n\t\t\t\t\t\turl: 'https://api.safecoin.org',\n\t\t\t\t\t\trpc: {\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\tAuthorization: 'xyz',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t}}\n\t\t>\n\t\t\t<YourApp />\n\t\t</SuiClientProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Passkey with PasskeyKeypair in TypeScript\nDESCRIPTION: This code demonstrates how to create a new passkey using the PasskeyKeypair class. It initializes a BrowserPasskeyProvider with necessary options and calls getPasskeyInstance to create a new passkey wallet for the origin.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/passkey.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst keypair = await PasskeyKeypair.getPasskeyInstance(\n\tnew BrowserPasskeyProvider('Sui Passkey Example', {\n\t\trpName: 'Sui Passkey Example',\n\t\trpId: window.location.hostname,\n\t} as BrowserPasswordProviderOptions),\n);\n```\n\n----------------------------------------\n\nTITLE: BCS Type Inference Example\nDESCRIPTION: Shows how to correctly get TypeScript types for BCS definitions using $inferType.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs } from '@mysten/sui/bcs';\n\nfunction callArg(arg: typeof bcs.CallArg.$inferType) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Taking an Item from a Kiosk in TypeScript\nDESCRIPTION: Demonstrates how to remove an item from a kiosk and use it in a different Programmable Transaction Block. The taken item is returned as a TransactionArgument which can be used for operations like transfers.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst item = '0xHeroAddress';\nconst itemType = '0x..::hero::Hero';\n\n/// Assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\n// Take item from kiosk.\nconst item = kioskTx.take({\n\titemId: item,\n\titemType,\n});\n\n// Do something with `item`, like transfer it to someone else.\ntx.transferObjects([item], 'address_to_transfer_the_object');\n\n// Finalize the kiosk Tx.\nkioskTx.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Complex Enum Transformation for TypeScript-Friendly Format\nDESCRIPTION: Shows how to transform Move enums into a more TypeScript-friendly format using custom type transformations and the enumKind helper function.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype Merge<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;\ntype EnumKindTransform<T> = T extends infer U\n\t? Merge<(U[keyof U] extends null | boolean ? object : U[keyof U]) & { kind: keyof U }>\n\t: never;\n\nfunction enumKind<T extends object, Input extends object>(type: BcsType<T, Input>) {\n\treturn type.transform({\n\t\tinput: ({ kind, ...val }: EnumKindTransform<Input>) =>\n\t\t\t({\n\t\t\t\t[kind]: val,\n\t\t\t}) as Input,\n\t\toutput: (val) => {\n\t\t\tconst key = Object.keys(val)[0] as keyof T;\n\n\t\t\treturn { kind: key, ...val[key] } as EnumKindTransform<T>;\n\t\t},\n\t});\n}\n\nconst MyEnum = enumKind(\n\tbcs.enum('MyEnum', {\n\t\tA: bcs.struct('A', {\n\t\t\tid: bcs.u8(),\n\t\t}),\n\t\tB: bcs.struct('B', {\n\t\t\tval: bcs.string(),\n\t\t}),\n\t}),\n);\n\n// Enums wrapped with enumKind flatten the enum variants and add a `kind` field to differentiate them\nconst A = MyEnum.serialize({ kind: 'A', id: 1 }).toBytes();\nconst B = MyEnum.serialize({ kind: 'B', val: 'xyz' }).toBytes();\n\nconst parsedA = MyEnum.parse(A); // returns { kind: 'A', id: 1 }\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Object Cache Build Plugin in TypeScript\nDESCRIPTION: Example of a build plugin that caches object versions and digests. It demonstrates how to add missing object data from a cache to avoid extra API calls during the build phase.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/plugins.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tBuildTransactionOptions,\n\tTransaction,\n\tTransactionDataBuilder,\n} from '@mysten/sui/transactions';\n\nconst objectCache = new Map<string, { objectId: string; version: string; digest: string }>();\n\nfunction simpleObjectCachePlugin(\n\ttransactionData: TransactionDataBuilder,\n\t_options: BuildTransactionOptions,\n\tnext: () => Promise<void>,\n) {\n\tfor (const input of transactionData.inputs) {\n\t\tif (!input.UnresolvedObject) continue;\n\n\t\tconst cached = objectCache.get(input.UnresolvedObject.objectId);\n\n\t\tif (!cached) continue;\n\n\t\tif (cached.version && !input.UnresolvedObject.version) {\n\t\t\tinput.UnresolvedObject.version = cached.version;\n\t\t}\n\n\t\tif (cached.digest && !input.UnresolvedObject.digest) {\n\t\t\tinput.UnresolvedObject.digest = cached.digest;\n\t\t}\n\t}\n\n\treturn next();\n}\n\n// Example usage of the build plugin\nconst transaction = new Transaction();\ntransaction.addBuildPlugin(simpleObjectCachePlugin);\n```\n\n----------------------------------------\n\nTITLE: Sui SDK Formatter Functions\nDESCRIPTION: Utility functions for formatting various Sui-related values including addresses, digests, and struct tags.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/utils.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nformatAddress()\nformatDigest()\nnormalizeStructTag()\nnormalizeSuiAddress()\nnormalizeSuiObjectId()\nnormalizeSuiNSName()\n```\n\n----------------------------------------\n\nTITLE: Using SuiClient from SuiClientProvider in React Component\nDESCRIPTION: This example demonstrates how to access and use the SuiClient instance within a React component using the useSuiClient hook.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/sui-client-provider.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSuiClient } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst client = useSuiClient();\n\n\t// use the client\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useSignAndExecuteTransaction Hook in React\nDESCRIPTION: This example demonstrates the basic implementation of the useSignAndExecuteTransaction hook to sign and execute a transaction. It includes a button that triggers the transaction signing process and displays the resulting transaction digest.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useSignAndExecuteTransaction.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton, useCurrentAccount, useSignAndExecuteTransaction } from '@mysten/dapp-kit';\nimport { Transaction } from '@mysten/sui/transactions';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\tconst { mutate: signAndExecuteTransaction } = useSignAndExecuteTransaction();\n\tconst [digest, setDigest] = useState('');\n\tconst currentAccount = useCurrentAccount();\n\n\treturn (\n\t\t<div style={{ padding: 20 }}>\n\t\t\t<ConnectButton />\n\t\t\t{currentAccount && (\n\t\t\t\t<>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tsignAndExecuteTransaction(\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttransaction: new Transaction(),\n\t\t\t\t\t\t\t\t\t\tchain: 'sui:devnet',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tonSuccess: (result) => {\n\t\t\t\t\t\t\t\t\t\t\tconsole.log('executed transaction', result);\n\t\t\t\t\t\t\t\t\t\t\tsetDigest(result.digest);\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSign and execute transaction\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>Digest: {digest}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GCP KMS Signer in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a GCP KMS Signer by providing the necessary GCP credentials and configuration. It uses the fromOptions method to initialize the signer with project ID, location, key ring, crypto key, and crypto key version.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/signers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst signer = await GcpKmsSigner.fromOptions({\n\tprojectId: 'your-google-project-id',\n\tlocation: 'your-google-location',\n\tkeyRing: 'your-google-keyring',\n\tcryptoKey: 'your-google-key-name',\n\tcryptoKeyVersion: 'your-google-key-name-version',\n});\n\n// Retrieve the public key and get the Sui address\nconst publicKey = signer.getPublicKey();\nconsole.log(publicKey.toSuiAddress());\n\n// Define a test message\nconst testMessage = 'Hello, GCP KMS Signer!';\nconst messageBytes = new TextEncoder().encode(testMessage);\n\n// Sign the test message\nconst { signature } = await signer.signPersonalMessage(messageBytes);\n\n// Verify the signature against the public key\nconst isValid = await publicKey.verifyPersonalMessage(messageBytes, signature);\nconsole.log(isValid); // Should print true if the signature is valid\n```\n\n----------------------------------------\n\nTITLE: Importing Faucet Functions from Sui TypeScript SDK\nDESCRIPTION: This snippet shows how to import the necessary functions from the @mysten/sui/faucet package to interact with the Sui faucet.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/faucet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFaucetHost, requestSuiFromFaucetV0 } from '@mysten/sui/faucet';\n```\n\n----------------------------------------\n\nTITLE: Fetching Object Details with SuiClient in TypeScript\nDESCRIPTION: Shows how to retrieve object details from the Sui blockchain. The example demonstrates fetching a single object with content details and multiple objects in a batch request with type information.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\nconst txn = await client.getObject({\n\tid: '0xcc2bd176a478baea9a0de7a24cd927661cc6e860d5bacecb9a138ef20dbab231',\n\t// fetch the object content field\n\toptions: { showContent: true },\n});\n// You can also fetch multiple objects in one batch request\nconst txns = await client.multiGetObjects({\n\tids: [\n\t\t'0xcc2bd176a478baea9a0de7a24cd927661cc6e860d5bacecb9a138ef20dbab231',\n\t\t'0x9ad3de788483877fe348aef7f6ba3e52b9cfee5f52de0694d36b16a6b50c1429',\n\t],\n\t// only fetch the object type\n\toptions: { showType: true },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS KMS Signer in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize an AWS KMS Signer using environment variables for AWS credentials and key ID. It uses the fromKeyId method to create the signer instance.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/signers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AwsKmsSigner } from '@mysten/signers/aws';\n\nconst prepareSigner = async () => {\n\tconst { AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_REGION, AWS_KMS_KEY_ID } = process.env;\n\n\treturn AwsKmsSigner.fromKeyId(AWS_KMS_KEY_ID, {\n\t\tregion: AWS_REGION,\n\t\taccessKeyId: AWS_ACCESS_KEY_ID,\n\t\tsecretAccessKey: AWS_SECRET_ACCESS_KEY,\n\t});\n};\n```\n\n----------------------------------------\n\nTITLE: Sui SDK Encoding Functions\nDESCRIPTION: Utility functions for converting between different encodings including hex and base64 formats.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/utils.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfromHex()\ntoHex()\nfromBase64()\ntoBase64()\n```\n\n----------------------------------------\n\nTITLE: Attaching Rules to Transfer Policy with Kiosk SDK V2\nDESCRIPTION: Simplified example of attaching royalty and kiosk lock rules to a transfer policy using the new Kiosk SDK V2. It demonstrates how to retrieve transfer policy capabilities and use the builder pattern API to add rules in a more readable way.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/from-v1.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/// You need to do this only once and re-use it in the application.\nconst kioskClient = new KioskClient({\n\tclient: new SuiClient({\n\t\turl: getFullnodeUrl('mainnet'),\n\t}),\n\tnetwork: Network.MAINNET,\n});\n\nconst adjustPolicy = async () => {\n\tconst tx = new Transaction();\n\n\t// You could have more than one cap, since you can create more than one transfer policy.\n\tconst policyCaps = await kioskClient.getOwnedTransferPoliciesByType({\n\t\ttype: `SomePackageId::type::MyType`,\n\t\taddress: '0xOwnerAddress',\n\t});\n\n\tnew TransferPolicyTransaction({ transaction: tx, kioskClient, cap: policyCaps[0] })\n\t\t.addRoyaltyRule(percentageToBasisPoints(2.55), 100_000_000)\n\t\t.addLockRule();\n\n\t// ... continue to sign and execute the transaction\n\t// ...\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Walrus SDK Client\nDESCRIPTION: Sets up the basic Walrus client configuration with SuiClient for testnet\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { WalrusClient } from '@mysten/walrus';\n\nconst suiClient = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\n\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n});\n```\n\n----------------------------------------\n\nTITLE: Using useWallets Hook to List Available Wallets in React\nDESCRIPTION: This code snippet demonstrates how to use the useWallets hook from @mysten/dapp-kit to retrieve and display a list of installed wallets in a React component. It handles the case when no wallets are installed and maps through the wallets array to display each wallet's name.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useWallets.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWallets } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst wallets = useWallets();\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Installed wallets</h2>\n\t\t\t{wallets.length === 0 && <div>No wallets installed</div>}\n\t\t\t<ul>\n\t\t\t\t{wallets.map((wallet) => (\n\t\t\t\t\t<li key={wallet.name}>{wallet.name}</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Kiosk Client with Type Constants\nDESCRIPTION: Sets up the initial configuration for working with SuiFrens by defining type constants and initializing a KioskClient connected to the Sui mainnet.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/advanced-examples.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// a constant for bullshark's type.\nconst bullsharkType = `${packageId}::suifrens::SuiFren<${packageId}::bullshark::Bullshark>`;\n// a constant for capy's type.\nconst capyType = `${packageId}::suifrens::SuiFren<${packageId}::capy::Capy>`;\n\n// initialize a kioskClient.\nconst kioskClient = new KioskClient({\n\tclient: new SuiClient({\n\t\turl: getFullnodeUrl('mainnet'),\n\t}),\n\tnetwork: Network.MAINNET,\n});\n```\n\n----------------------------------------\n\nTITLE: Serializing ZkLogin Signature in TypeScript\nDESCRIPTION: Shows how to serialize a zkLogin signature using the getZkLoginSignature function with inputs, maxEpoch, and userSignature parameters.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/zklogin.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getZkLoginSignature } from '@mysten/sui/zklogin';\n\nconst serializedSignature = await getZkLoginSignature({ inputs, maxEpoch, userSignature });\n```\n\n----------------------------------------\n\nTITLE: Basic Coin Splitting with Transaction\nDESCRIPTION: Demonstrates the traditional approach of splitting SUI coins using direct transaction commands.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/intents.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n\nconst [coin] = tx.splitCoins(tx.gas, [100]);\n\ntx.transferObjects([coin], recipient);\n```\n\n----------------------------------------\n\nTITLE: Using Web Crypto Signer\nDESCRIPTION: Examples of common operations with Web Crypto Signer including getting public key, address, and signing messages/transactions\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/webcrypto-signer.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst publicKey = keypair.getPublicKey();\nconst address = publicKey.toSuiAddress();\n\nconst message = new TextEncoder().encode('hello world');\nawait keypair.signPersonalMessage(message);\nawait keypair.signTransaction(txBytes);\n```\n\n----------------------------------------\n\nTITLE: Adding Serialization Plugin to Transaction in TypeScript\nDESCRIPTION: Demonstrates how to add a serialization plugin to a Transaction instance. The plugin can modify the transaction data before and after other serialization steps.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/plugins.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = new Transaction();\n\ntransaction.addSerializationPlugin(async (transactionData, buildOptions, next) => {\n\t// Modify the data before running other serialization steps\n\tawait next();\n\t// Modify the data after running other serialization steps\n});\n```\n\n----------------------------------------\n\nTITLE: Computing ZkLogin Address from Parsed JWT in TypeScript\nDESCRIPTION: Demonstrates computing a zkLogin address from parsed JWT components using the computeZkLoginAddress function.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/zklogin.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { computeZkLoginAddress } from '@mysten/sui/zklogin';\n\nconst address = computeZkLoginAddress({\n\tclaimName,\n\tclaimValue,\n\tiss,\n\taud,\n\tuserSalt: BigInt(salt),\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Blobs to Walrus\nDESCRIPTION: Example of writing a text blob with specified storage duration and deletion settings\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = new TextEncoder().encode('Hello from the TS SDK!!!\\n');\n\nconst { blobId } = await walrusClient.writeBlob({\n\tblob: file,\n\tdeletable: false,\n\tepochs: 3,\n\tsigner: keypair,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Package IDs\nDESCRIPTION: Example of manually configuring WalrusClient with custom system object and staking pool IDs\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst walrusClient = new WalrusClient({\n\tsuiClient,\n\tpackageConfig: {\n\t\tsystemObjectId: '0x98ebc47370603fe81d9e15491b2f1443d619d1dab720d586e429ed233e1255c1',\n\t\tstakingPoolId: '0x20266a17b4f1a216727f3eef5772f8d486a9e3b5e319af80a5b75809c035561d',\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing WalletProvider in React with TypeScript\nDESCRIPTION: Basic implementation example of WalletProvider component at the root level of a React application. This setup enables wallet functionality throughout the application by wrapping the main app component.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-provider.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { WalletProvider } from '@mysten/dapp-kit';\n\nfunction App() {\n\treturn (\n\t\t<WalletProvider>\n\t\t\t<YourApp />\n\t\t</WalletProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Computing ZkLogin Address from Seed in TypeScript\nDESCRIPTION: Demonstrates computing a zkLogin address using a numeric seed and issuer URL with the computeZkLoginAddressFromSeed function.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/zklogin.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { computeZkLoginAddressFromSeed } from '@mysten/sui/zklogin';\n\nconst address = computeZkLoginAddressFromSeed(0n, 'https://accounts.google.com');\n```\n\n----------------------------------------\n\nTITLE: Updating Rules in a Transfer Policy in TypeScript\nDESCRIPTION: Shows how to update an existing rule by removing it and then adding it again with new settings. This example updates a royalty rule.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// ... tp transaction is initialized and policy is set.\ntpTx.removeRoyaltyRule().addRoyaltyRule(percentageToBasisPoints(20), 1_000_000_000);\n```\n\n----------------------------------------\n\nTITLE: Using useSuiClientQueries Hook for Multiple Parallel Sui RPC Calls\nDESCRIPTION: This snippet shows how to use useSuiClientQueries to fetch multiple Sui RPC queries in parallel. It includes a combine function to transform the results into a single value, making it easier to manage the loading, error, and success states of multiple queries.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/rpc-hooks.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSuiClientQueries } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { data, isPending, isError } = useSuiClientQueries({\n\t\tqueries: [\n\t\t\t{\n\t\t\t\tmethod: 'getAllBalances',\n\t\t\t\tparams: {\n\t\t\t\t\towner: '0x123',\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tmethod: 'queryTransactionBlocks',\n\t\t\t\tparams: {\n\t\t\t\t\tfilter: {\n\t\t\t\t\t\tFromAddress: '0x123',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tcombine: (result) => {\n\t\t\treturn {\n\t\t\t\tdata: result.map((res) => res.data),\n\t\t\t\tisSuccess: result.every((res) => res.isSuccess),\n\t\t\t\tisPending: result.some((res) => res.isPending),\n\t\t\t\tisError: result.some((res) => res.isError),\n\t\t\t};\n\t\t},\n\t});\n\n\tif (isPending) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tif (isError) {\n\t\treturn <div>Fetching Error</div>;\n\t}\n\n\treturn <pre>{JSON.stringify(data, null, 2)}</pre>;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Blobs from Walrus\nDESCRIPTION: Example of reading a blob using the Walrus client\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst blob = await walrusClient.readBlob({ blobId });\n```\n\n----------------------------------------\n\nTITLE: Simplified Link Creation\nDESCRIPTION: Demonstrates a shorthand method for creating and submitting a zkSend link transaction using a keypair.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/link-builder.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait link.create({\n\tsigner: yourKeypair,\n\t// Wait until the new link is ready to be indexed so it is claimable\n\twaitForTransaction: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Kiosk Lock Rule from a Transfer Policy in TypeScript\nDESCRIPTION: Demonstrates how to remove a kiosk lock rule from a transfer policy.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntpTx.removeLockRule();\n```\n\n----------------------------------------\n\nTITLE: Adding a Transaction Intent in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a custom 'TransferToSender' intent to a transaction using the Sui TypeScript SDK.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/plugins.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Commands, Transaction } from '@mysten/sui/transactions';\n\nconst transaction = new Transaction();\n\ntransaction.add(\n\tCommands.Intent({\n\t\tname: 'TransferToSender',\n\t\tinputs: {\n\t\t\tobjects: [transaction.object(someId)],\n\t\t},\n\t}),\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Created Links\nDESCRIPTION: Demonstrates how to list zkSend links created by a specific address with pagination support.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/link-builder.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { listCreatedLinks } from '@mysten/zksend';\n\nconst { links, hasNextPage, cursor } = await listCreatedLinks({\n\taddress: addressOfCreator,\n});\n\n// get the claimable assets for this link (will be empty if the link has been claimed)\nconst { nfts, balances } = await links[0].assets;\n```\n\n----------------------------------------\n\nTITLE: Manual Borrowing and Returning of Kiosk Items in TypeScript\nDESCRIPTION: Demonstrates how to manually borrow and return an item from a kiosk. This approach gives more control compared to the callback method but requires explicit return of both the item and the borrow promise.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst itemId = '0xHeroAddress';\nconst itemType = '0x..::hero::Hero';\n\n// Assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nconst [item, promise] = kioskTx.borrow({\n\titemId,\n\titemType,\n});\n\ntx.moveCall({\n\ttarget: '0xMyGame::hero::level_up',\n\targuments: [item],\n});\n\nkioskClient\n\t.return({\n\t\titemType,\n\t\titem,\n\t\tpromise,\n\t})\n\t.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Borrowing an Item with Callback in TypeScript\nDESCRIPTION: Shows how to temporarily borrow an item from a kiosk using the callback approach. The item is automatically returned after the callback function executes, making it safe for operations that need temporary access.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst itemId = '0xHeroAddress';\nconst itemType = '0x..::hero::Hero';\n\n/// assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\nkioskTx\n\t.borrowTx(\n\t\t{\n\t\t\titemId,\n\t\t\titemType,\n\t\t},\n\t\t(item) => {\n\t\t\ttx.moveCall({\n\t\t\t\ttarget: '0xMyGame::hero::level_up',\n\t\t\t\targuments: [item],\n\t\t\t});\n\t\t},\n\t)\n\t.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectButton in React Application\nDESCRIPTION: Basic implementation example of the ConnectButton component that handles wallet connection and disconnection states automatically. The component can be imported from @mysten/dapp-kit and used directly in React components.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-components/ConnectButton.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectButton } from '@mysten/dapp-kit';\n\nexport function YourApp() {\n\treturn <ConnectButton />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using useResolveSuiNSName Hook for Resolving Sui Name Service Names\nDESCRIPTION: This snippet demonstrates how to use the useResolveSuiNSName hook to resolve a Sui Name Service (SuiNS) name for a given address. It handles loading states and displays the domain name if found.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/rpc-hooks.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useResolveSuiNSName } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { data, isPending } = useResolveSuiNSName('0x123');\n\n\tif (isPending) {\n\t\treturn <div>Loading...</div>;\n\t}\n\n\tif (data) {\n\t\treturn <div>Domain name is: {data}</div>;\n\t}\n\n\treturn <div>Domain name not found</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Blobs with WalrusClient\nDESCRIPTION: Example of reading a blob using the readBlob method\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst blob = await walrusClient.readBlob({ blobId });\n```\n\n----------------------------------------\n\nTITLE: Sui SDK Validator Functions\nDESCRIPTION: Functions for validating the format of Sui-related values such as addresses, object IDs, and transaction digests.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/utils.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nisValidSuiAddress()\nisValidSuiObjectId()\nisValidTransactionDigest()\nisValidSuiNSName()\n```\n\n----------------------------------------\n\nTITLE: Adding Floor Price Rule to a Transfer Policy in TypeScript\nDESCRIPTION: Shows how to add a floor price rule to a transfer policy, setting a minimum price for transactions.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// ... tp transaction is initialized and policy is set.\ntpTx.addFloorPriceRule(10_000_000_000); // sets 10 SUI as the floor price.\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Selector Component with SuiClientProvider\nDESCRIPTION: This snippet shows how to create a network selector component using the useSuiClientContext hook to access and switch between available networks.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/sui-client-provider.mdx#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NetworkSelector() {\n\tconst ctx = useSuiClientContext();\n\n\treturn (\n\t\t<div>\n\t\t\t{Object.keys(ctx.networks).map((network) => (\n\t\t\t\t<button key={network} onClick={() => ctx.selectNetwork(network)}>\n\t\t\t\t\t{`select ${network}`}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Compound Types Usage in BCS\nDESCRIPTION: Examples of using and parsing compound BCS types such as vectors, enums, structs, tuples, and maps.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs } from '@mysten/bcs';\n\n// Vectors\nconst intList = bcs.vector(bcs.u8()).serialize([1, 2, 3, 4, 5]).toBytes();\nconst stringList = bcs.vector(bcs.string()).serialize(['a', 'b', 'c']).toBytes();\n\n// Fixed length Arrays\nconst intArray = bcs.fixedArray(4, bcs.u8()).serialize([1, 2, 3, 4]).toBytes();\nconst stringArray = bcs.fixedArray(3, bcs.string()).serialize(['a', 'b', 'c']).toBytes();\n\n// Option\nconst option = bcs.option(bcs.string()).serialize('some value').toBytes();\nconst nullOption = bcs.option(bcs.string()).serialize(null).toBytes();\n\n// Enum\nconst MyEnum = bcs.enum('MyEnum', {\n\tNoType: null,\n\tInt: bcs.u8(),\n\tString: bcs.string(),\n\tArray: bcs.fixedArray(3, bcs.u8()),\n});\n\nconst noTypeEnum = MyEnum.serialize({ NoType: null }).toBytes();\nconst intEnum = MyEnum.serialize({ Int: 100 }).toBytes();\nconst stringEnum = MyEnum.serialize({ String: 'string' }).toBytes();\nconst arrayEnum = MyEnum.serialize({ Array: [1, 2, 3] }).toBytes();\n\n// Struct\nconst MyStruct = bcs.struct('MyStruct', {\n\tid: bcs.u8(),\n\tname: bcs.string(),\n});\n\nconst struct = MyStruct.serialize({ id: 1, name: 'name' }).toBytes();\n\n// Tuple\nconst tuple = bcs.tuple([bcs.u8(), bcs.string()]).serialize([1, 'name']).toBytes();\n\n// Map\nconst map = bcs\n\t.map(bcs.u8(), bcs.string())\n\t.serialize(\n\t\tnew Map([\n\t\t\t[1, 'one'],\n\t\t\t[2, 'two'],\n\t\t]),\n\t)\n\t.toBytes();\n\n// Parsing data back into original types\n\n// Vectors\nconst parsedIntList = bcs.vector(bcs.u8()).parse(intList);\nconst parsedStringList = bcs.vector(bcs.string()).parse(stringList);\n\n// Fixed length Arrays\nconst parsedIntArray = bcs.fixedArray(4, bcs.u8()).parse(intArray);\n\n// Option\nconst parsedOption = bcs.option(bcs.string()).parse(option);\nconst parsedNullOption = bcs.option(bcs.string()).parse(nullOption);\n\n// Enum\nconst parsedNoTypeEnum = MyEnum.parse(noTypeEnum);\nconst parsedIntEnum = MyEnum.parse(intEnum);\nconst parsedStringEnum = MyEnum.parse(stringEnum);\nconst parsedArrayEnum = MyEnum.parse(arrayEnum);\n\n// Struct\nconst parsedStruct = MyStruct.parse(struct);\n\n// Tuple\nconst parsedTuple = bcs.tuple([bcs.u8(), bcs.string()]).parse(tuple);\n\n// Map\nconst parsedMap = bcs.map(bcs.u8(), bcs.string()).parse(map);\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled ConnectModal Component in React\nDESCRIPTION: Example of using ConnectModal with explicit state control. This implementation uses React useState to manage the open/closed state of the modal, allowing for programmatic control of the component's visibility.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-components/ConnectModal.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectModal, useCurrentAccount } from '@mysten/dapp-kit';\nimport { useState } from 'react';\n\nexport function YourApp() {\n\tconst currentAccount = useCurrentAccount();\n\tconst [open, setOpen] = useState(false);\n\n\treturn (\n\t\t<ConnectModal\n\t\t\ttrigger={\n\t\t\t\t<button disabled={!!currentAccount}> {currentAccount ? 'Connected' : 'Connect'}</button>\n\t\t\t}\n\t\t\topen={open}\n\t\t\tonOpenChange={(isOpen) => setOpen(isOpen)}\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Kiosk Lock Rule to a Transfer Policy in TypeScript\nDESCRIPTION: Shows how to add a kiosk lock rule to a transfer policy.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// ... tp transaction is initialized and policy is set.\ntpTx.addLockRule();\n```\n\n----------------------------------------\n\nTITLE: Sui SDK Constants Usage\nDESCRIPTION: Constant values used throughout the Sui SDK including conversion rates, address lengths, and system addresses.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/utils.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMIST_PER_SUI: 1000000000\nSUI_DECIMALS: 9\nSUI_ADDRESS_LENGTH: 32\nMOVE_STDLIB_ADDRESS\nSUI_FRAMEWORK_ADDRESS\nSUI_SYSTEM_ADDRESS\nSUI_CLOCK_OBJECT_ID\nSUI_SYSTEM_STATE_OBJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Fetching\nDESCRIPTION: Implementation of custom fetch behavior with timeout configuration for the WalrusClient\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n\tstorageNodeClientOptions: {\n\t\tfetch: (url, options) => {\n\t\t\tconsole.log('fetching', url);\n\t\t\treturn fetch(url, options);\n\t\t},\n\t\ttimeout: 60_000,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing ZkLogin Signature in TypeScript\nDESCRIPTION: Demonstrates how to parse a serialized zkLogin signature using the parseZkLoginSignature function from @mysten/sui/zklogin package.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/zklogin.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseZkLoginSignature } from '@mysten/sui/zklogin';\n\nconst parsedSignature = await parseZkLoginSignature('BQNNMTY4NjAxMzAyO....');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sui App Version from Ledger Device\nDESCRIPTION: This snippet demonstrates how to get the version of the Sui application installed on the Ledger device. It uses the getVersion method of the Sui app instance and logs the result.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/README.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(await sui.getVersion());\n```\n\n----------------------------------------\n\nTITLE: Adding Personal Kiosk Rule to a Transfer Policy in TypeScript\nDESCRIPTION: Shows how to add a personal kiosk rule to a transfer policy.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// ... tp transaction is initialized and policy is set.\ntpTx.addPersonalKioskRule();\n```\n\n----------------------------------------\n\nTITLE: Command API Updates\nDESCRIPTION: Shows changes to the Commands API including renamed imports and parameter updates.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- import { Transactions } from '@mysten/sui/transactions'\n+ import { Commands } from '@mysten/sui/transactions'\n\n tx.makeMoveVec({\n   type: '0x123::foo:Bar'\n-  objects: [tx.object(objectId)],\n+  elements: [tx.object(objectId)]\n })\n\n tx.upgrade({\n   modules,\n   dependencies,\n   packageId: EXAMPLE_PACKAGE_ID,\n   ticket: tx.object(ticketId),\n-  packageId: '0x123',\n+  package: '0x123'\n })\n```\n\n----------------------------------------\n\nTITLE: Initializing zkSend Link Builder\nDESCRIPTION: Creates a new instance of ZkSendLinkBuilder to start creating a zkSend link. Requires sender address and optionally accepts client and network parameters.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/link-builder.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ZkSendLinkBuilder } from '@mysten/zksend';\n\nconst link = new ZkSendLinkBuilder({\n\tsender: '0x...',\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Floor Price Rule from a Transfer Policy in TypeScript\nDESCRIPTION: Demonstrates how to remove a floor price rule from a transfer policy.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntpTx.removeFloorPriceRule();\n```\n\n----------------------------------------\n\nTITLE: Exporting Web Crypto Keypair\nDESCRIPTION: Example of exporting a keypair and persisting it to IndexedDB storage\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/webcrypto-signer.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the exported keypair:\nconst exported = keypair.export();\n\n// Write the keypair to IndexedDB.\n// This method does not exist, you need to implement it yourself. We recommend `idb-keyval` for simplicity.\nawait writeToIndexedDB('keypair', exported);\n```\n\n----------------------------------------\n\nTITLE: Installing Mysten dApp Creation Tool\nDESCRIPTION: Command to create a new dApp project using the @mysten/create-dapp CLI tool. This command initiates an interactive prompt to guide you through the project creation process.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/create-dapp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create @mysten/dapp\n```\n\n----------------------------------------\n\nTITLE: Using useSuiClientMutation Hook for Sui RPC State Mutations\nDESCRIPTION: This example shows how to use useSuiClientMutation hook for RPC methods that mutate state. It demonstrates how to imperatively call the dryRunTransactionBlock RPC method when a button is clicked.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/rpc-hooks.mdx#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSuiClientMutation } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { mutate } = useSuiClientMutation('dryRunTransactionBlock');\n\n\treturn (\n\t\t<Button\n\t\t\tonClick={() => {\n\t\t\t\tmutate({\n\t\t\t\t\ttransactionBlock: tx,\n\t\t\t\t});\n\t\t\t}}\n\t\t>\n\t\t\tDry run transaction\n\t\t</Button>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline BCS Definitions for Serialization and Deserialization\nDESCRIPTION: Shows how to use inline type definitions with BCS serialization and deserialization methods, allowing for direct schema specification without prior registration.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// inline definition example\nlet struct = { name: 'Alice', age: 25 };\nlet bytes = bcs.ser({ name: 'string', age: 'u8' }, struct).toBytes();\nlet restored = bcs.de({ name: 'string', age: 'u8' }, bytes);\n\n// `restored` deeply equals `struct`\n```\n\n----------------------------------------\n\nTITLE: Removing Royalty Rule from a Transfer Policy in TypeScript\nDESCRIPTION: Demonstrates how to remove a royalty rule from a transfer policy.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntpTx.removeRoyaltyRule();\n```\n\n----------------------------------------\n\nTITLE: Implementing useReportTransactionEffects in a React Component\nDESCRIPTION: This code snippet demonstrates how to use the useReportTransactionEffects hook in a React component. It shows the integration with other hooks like useCurrentAccount and useSuiClient, and how to report transaction effects after executing a pre-signed transaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useReportTransactionEffects.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n\tConnectButton,\n\tuseCurrentAccount,\n\tuseReportTransactionEffects,\n\tuseSuiClient,\n} from '@mysten/dapp-kit';\nimport { toBase64 } from '@mysten/sui/utils';\nimport { useState } from 'react';\n\nfunction MyComponent() {\n\tconst { mutateAsync: reportTransactionEffects } = useReportTransactionEffects();\n\tconst [signature, setSignature] = useState('');\n\tconst client = useSuiClient();\n\tconst currentAccount = useCurrentAccount();\n\n\treturn (\n\t\t<div style={{ padding: 20 }}>\n\t\t\t<ConnectButton />\n\t\t\t{currentAccount && (\n\t\t\t\t<>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\tconst { effects } = await executePreSignedTransaction();\n\t\t\t\t\t\t\t\treportTransactionEffects({ effects });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tSign empty transaction\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>Signature: {signature}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Sui Public Key from Ledger Device\nDESCRIPTION: This snippet demonstrates how to retrieve the Sui public key for a given BIP-32 path from a Ledger device. It uses the getPublicKey method of the Sui app instance.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst publicKey = await sui.getPublicKey(\"44'/784'/0'/0'/0'\");\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Profits from a Transfer Policy in TypeScript\nDESCRIPTION: Demonstrates how to withdraw profits from a specified transfer policy. The amount parameter is optional - when left empty, all profits will be withdrawn.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ... tp transaction is initialized and policy is set.\n// Withdraw 10 SUI from the policy. Leave last parameter empty to withdraw all profits.\ntpTx.withdraw('address_to_transfer_coin', 10_000_000_000);\n```\n\n----------------------------------------\n\nTITLE: Cloning Transaction Updates\nDESCRIPTION: Shows how to update transaction cloning code to use the new Transaction.from() method instead of the constructor.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- const newTransaction = new TransactionBlock(oldTransaction)\n+ const newTransaction = Transaction.from(oldTransaction)\n```\n\n----------------------------------------\n\nTITLE: Transferring an Item from a Kiosk in TypeScript\nDESCRIPTION: Similar to 'take', this function transfers an item to a specified address internally. It simplifies the process by handling the transfer operation directly within the kiosk transaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/managing.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst item = '0xHeroAddress';\nconst itemType = '0x..::hero::Hero';\n\n/// Assume `kioskClient` and `cap` are supplied to the function as explained in the previous section.\nconst tx = new Transaction();\nconst kioskTx = new KioskTransaction({ transaction: tx, kioskClient, cap });\n\n// Take item from kiosk.\nkioskTx\n\t.transfer({\n\t\titemId: item,\n\t\titemType,\n\t\taddress: 'address_to_transfer_the_object',\n\t})\n\t.finalize();\n\n// Sign and execute transaction.\nawait signAndExecuteTransaction({ tx: tx });\n```\n\n----------------------------------------\n\nTITLE: Installing @mysten/create-dapp CLI Tool\nDESCRIPTION: Command to install and run the @mysten/create-dapp CLI tool using pnpm. This will prompt the user to create a new dApp project, select a template, and specify the project name and directory.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create @mysten/dapp\n```\n\n----------------------------------------\n\nTITLE: Implementing Address Transform in BCS\nDESCRIPTION: Demonstrates how to transform between hex string addresses and byte array format using BCS transformation API. Shows serialization and parsing of addresses.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs, fromHex, toHex } from '@mysten/bcs';\n\nconst Address = bcs.bytes(32).transform({\n\t// To change the input type, you need to provide a type definition for the input\n\tinput: (val: string) => fromHex(val),\n\toutput: (val) => toHex(val),\n});\n\nconst serialized = Address.serialize('0x000000...').toBytes();\nconst parsed = Address.parse(serialized); // will return a hex string\n```\n\n----------------------------------------\n\nTITLE: Merging Coins in Sui\nDESCRIPTION: TypeScript code demonstrating how to merge coins in Sui using the SuiClient and Ed25519Keypair.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\nimport { Transaction } from '@mysten/sui/transactions';\n\n// Generate a new Ed25519 Keypair\nconst keypair = new Ed25519Keypair();\nconst client = new SuiClient({\n\turl: getFullnodeUrl('testnet'),\n});\n\nconst tx = new Transaction();\ntx.mergeCoins('0xe19739da1a701eadc21683c5b127e62b553e833e8a15a4f292f4f48b4afea3f2', [\n\t'0x127a8975134a4824d9288722c4ee4fc824cd22502ab4ad9f6617f3ba19229c1b',\n]);\nconst result = await client.signAndExecuteTransaction({\n\tsigner: keypair,\n\ttransaction: tx,\n});\nconsole.log({ result });\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Theme Variables\nDESCRIPTION: Shows how to implement a custom theme by defining the ThemeVars interface with CSS variable values. This example provides a complete light theme definition with variables for colors, typography, spacing, and other UI elements.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/themes.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ThemeVars } from '@mysten/dapp-kit';\n\n// Light theme copied from dapp-kit\nexport const lightTheme: ThemeVars = {\n\tblurs: {\n\t\tmodalOverlay: 'blur(0)',\n\t},\n\tbackgroundColors: {\n\t\tprimaryButton: '#F6F7F9',\n\t\tprimaryButtonHover: '#F0F2F5',\n\t\toutlineButtonHover: '#F4F4F5',\n\t\tmodalOverlay: 'rgba(24 36 53 / 20%)',\n\t\tmodalPrimary: 'white',\n\t\tmodalSecondary: '#F7F8F8',\n\t\ticonButton: 'transparent',\n\t\ticonButtonHover: '#F0F1F2',\n\t\tdropdownMenu: '#FFFFFF',\n\t\tdropdownMenuSeparator: '#F3F6F8',\n\t\twalletItemSelected: 'white',\n\t\twalletItemHover: '#3C424226',\n\t},\n\tborderColors: {\n\t\toutlineButton: '#E4E4E7',\n\t},\n\tcolors: {\n\t\tprimaryButton: '#373737',\n\t\toutlineButton: '#373737',\n\t\ticonButton: '#000000',\n\t\tbody: '#182435',\n\t\tbodyMuted: '#767A81',\n\t\tbodyDanger: '#FF794B',\n\t},\n\tradii: {\n\t\tsmall: '6px',\n\t\tmedium: '8px',\n\t\tlarge: '12px',\n\t\txlarge: '16px',\n\t},\n\tshadows: {\n\t\tprimaryButton: '0px 4px 12px rgba(0, 0, 0, 0.1)',\n\t\twalletItemSelected: '0px 2px 6px rgba(0, 0, 0, 0.05)',\n\t},\n\tfontWeights: {\n\t\tnormal: '400',\n\t\tmedium: '500',\n\t\tbold: '600',\n\t},\n\tfontSizes: {\n\t\tsmall: '14px',\n\t\tmedium: '16px',\n\t\tlarge: '18px',\n\t\txlarge: '20px',\n\t},\n\ttypography: {\n\t\tfontFamily:\n\t\t\t'ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"',\n\t\tfontStyle: 'normal',\n\t\tlineHeight: '1.3',\n\t\tletterSpacing: '1',\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Sui App with LedgerJS Transport\nDESCRIPTION: This snippet shows how to import the Sui app from ledgerjs-hw-app-sui and initialize it with a transport. It's a basic setup required for interacting with the Ledger device for Sui operations.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Sui from 'ledgerjs-hw-app-sui';\n\nconst transport = await Transport.create();\nconst sui = new Sui(transport);\n```\n\n----------------------------------------\n\nTITLE: Installing Walrus SDK Dependencies\nDESCRIPTION: Command to install the required Walrus and Sui SDK packages using npm\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @mysten/walrus @mysten/sui\n```\n\n----------------------------------------\n\nTITLE: Using BCS Serialization with Sui Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the bcs module from the Sui SDK to serialize different data types. It shows serialization of basic types like U8 and Address, as well as complex types like TypeTag.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/bcs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs } from '@mysten/sui/bcs';\n\nbcs.U8.serialize(1);\nbcs.Address.serialize('0x1');\nbcs.TypeTag.serialize({\n\tvector: {\n\t\tu8: true,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Sui CLI for Testnet\nDESCRIPTION: Commands to set up the Sui CLI for the testnet environment and switch to it.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-e2e-counter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsui client new-env --alias testnet --rpc https://fullnode.testnet.sui.io:443\nsui client switch --env testnet\n```\n\n----------------------------------------\n\nTITLE: Getting Owned Transfer Policies with KioskClient in TypeScript\nDESCRIPTION: This snippet demonstrates how to query all owned transfer policies for a given address using the KioskClient. It returns an array of owned transfer policies, including their IDs and types.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/querying.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming we have a kioskClient instance.\nconst kioskClient = new KioskClient({...});\n\n// The address that owns the transfer policies.\nconst address = '0xAddress';\n// You can perform actions, like querying the owned kiosks for an address.\nconst policies = await kioskClient.getOwnedTransferPolicies({ address });\nconsole.log(policies);\n\n/**\n * An example output of the response\n[\n  {\n    policyId: '0x6b6eca8df6e70ea6447e639ef26b519039b5e9123642258eea1b3c781e94faca',\n    policyCapId: '0x34a4794d4ad6578ac345d23ca0f7a4632ca88de297daaf24a1cdbc91e1547be4',\n    type: '0xbe01d0594bedbce45c0e08c7374b03bf822e9b73cd7d555bf39c39bbf09d23a9::hero::Hero'\n  },\n  {\n    policyId: '0x87ac2dd80011ed2de9c7916a19145ff520959acd3d8c3dbd100aa74b34155a0a',\n    policyCapId: '0x858edda13c5c9086b2491eafed39e0ea58511268bb90d90464a2d7b5ed3f3880',\n    type: '0xbe01d0594bedbce45c0e08c7374b03bf822e9b73cd7d555bf39c39bbf09d23a9::hero::Villain'\n  }\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Customizing Data Fetching\nDESCRIPTION: Implementation of custom fetch behavior with timeout configuration\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n\tstorageNodeClientOptions: {\n\t\tfetch: (url, options) => {\n\t\t\tconsole.log('fetching', url);\n\t\t\treturn fetch(url, options);\n\t\t},\n\t\ttimeout: 60_000,\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Kiosk with Kiosk SDK V1\nDESCRIPTION: Example of creating a new kiosk using the original Kiosk SDK V1. It demonstrates how to create a kiosk and share it, then transfer the kiosk capability to the user's account.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/from-v1.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createKioskAndShare } from '@mysten/kiosk';\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst createKiosk = async () => {\n\tconst accountAddress = '0xSomeSuiAddress';\n\n\tconst tx = new Transaction();\n\tconst kiosk_cap = createKioskAndShare(tx);\n\n\ttx.transferObjects([kiosk_cap], accountAddress);\n\n\t// ... continue to sign and execute the transaction\n\t// ...\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @mysten/bcs Package\nDESCRIPTION: Commands to install the @mysten/bcs package using npm or yarn.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @mysten/bcs\n```\n\n----------------------------------------\n\nTITLE: Updating Module Identifiers with TypeScript\nDESCRIPTION: Example showing how to update identifiers in Move bytecode using the template library's update_identifiers function. Demonstrates replacing template names with custom module names.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/move-bytecode-template/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fromHex, update_identifiers } from '@mysten/move-bytecode-template';\n\nlet bytecode = /* ... */;\nlet updated = update_identifiers(bytecode, {\n    \"TEMPLATE\": \"MY_MODULE\",\n    \"template\": \"my_module\"\n});\n\nconsole.assert(updated != bytecode, 'identifiers were not updated!');\n```\n\n----------------------------------------\n\nTITLE: Customizing Fetch Behavior with Undici\nDESCRIPTION: Example of implementing custom fetch behavior using Undici with timeout configuration\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestInfo, RequestInit } from 'undici';\nimport { Agent, fetch, setGlobalDispatcher } from 'undici';\n\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n\tstorageNodeClientOptions: {\n\t\ttimeout: 60_000,\n\t\tfetch: (url, init) => {\n\t\t\treturn fetch(url as RequestInfo, {\n\t\t\t\t...(init as RequestInit),\n\t\t\t\tdispatcher: new Agent({\n\t\t\t\t\tconnectTimeout: 60_000,\n\t\t\t\t}),\n\t\t\t}) as unknown as Promise<Response>;\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating JsonRpcProvider to SuiClient\nDESCRIPTION: Demonstrates how to migrate from the deprecated JsonRpcProvider to the new SuiClient class for interacting with Sui RPC nodes.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- import { JsonRpcProvider, devnetConnection } from '@mysten/sui.js';\n+ import { SuiClient, getFullnodeUrl } from '@mysten/sui.js/client';\n\n- const provider = new JsonRpcProvider(localnetConnection);\n+ const client = new SuiClient({ url: getFullnodeUrl('localnet')});\n```\n\n----------------------------------------\n\nTITLE: Pure Value Transaction Arguments\nDESCRIPTION: Examples of passing pure values and vectors as transaction arguments using different serialization methods.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { bcs } from '@mysten/sui/bcs';\n\ntx.moveCall({\n\ttarget: '0x2::foo::bar',\n\targuments: [\n\t\t// using vector and option methods\n\t\ttx.pure.vector('u8', [1, 2, 3]),\n\t\ttx.pure.option('u8', 1),\n\t\ttx.pure.option('u8', null),\n\n\t\t// Using pure with type arguments\n\t\ttx.pure('vector<u8>', [1, 2, 3]),\n\t\ttx.pure('option<u8>', 1),\n\t\ttx.pure('option<u8>', null),\n\t\ttx.pure('vector<option<u8>>', [1, null, 2]),\n\n\t\t// Using bcs.serialize\n\t\ttx.pure(bcs.vector(bcs.U8).serialize([1, 2, 3])),\n\t\ttx.pure(bcs.option(bcs.U8).serialize(1)),\n\t\ttx.pure(bcs.option(bcs.U8).serialize(null)),\n\t\ttx.pure(bcs.vector(bcs.option(bcs.U8)).serialize([1, null, 2])),\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Retryable Errors\nDESCRIPTION: Error handling implementation for retryable Walrus client errors\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RetryableWalrusClientError } from '@mysten/walrus';\n\nif (error instanceof RetryableWalrusClientError) {\n\twalrusClient.reset();\n\n\t/* retry your operation */\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing Connection Class in TypeScript SDK\nDESCRIPTION: Adds a new Connection class used to define the endpoints for network interactions, providing more flexibility in specifying network connections.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n- aa650aa3b: Introduce new `Connection` class, which is used to define the endpoints that are used\n  when interacting with the network.\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Error Handling\nDESCRIPTION: Example of setting up error logging for network requests\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n\tstorageNodeClientOptions: {\n\t\tonError: (error) => console.log(error),\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SuiClient with GraphQL Transport\nDESCRIPTION: Example of setting up a SuiClient instance using GraphQL transport with optional fallback to JSON RPC for unsupported methods.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/graphql-transport/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SuiClientGraphQLTransport } from '@mysten/graphql-transport';\nimport { getFullnodeUrl, SuiClient } from '@mysten/sui/client';\n\nconst client = new SuiClient({\n\ttransport: new SuiClientGraphQLTransport({\n\t\turl: 'https://sui-testnet.mystenlabs.com/graphql',\n\t\t// When specified, the transport will fallback to JSON RPC for unsupported method and parameters\n\t\tfallbackFullNodeUrl: getFullnodeUrl('testnet'),\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Theme in WalletProvider\nDESCRIPTION: Shows how to provide a basic theme to the WalletProvider component to customize dApp Kit components. This snippet demonstrates importing the lightTheme and applying it to the WalletProvider.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/themes.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lightTheme, WalletProvider } from '@mysten/dapp-kit';\n\nconst App = () => {\n\treturn (\n\t\t<WalletProvider theme={lightTheme}>\n\t\t\t<YourApp />\n\t\t</WalletProvider>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WalletProvider for Stashed Wallet Integration in React\nDESCRIPTION: This code demonstrates how to set up the WalletProvider component with Stashed wallet configuration. The example shows a React functional component that wraps child components with WalletProvider, passing the stashedWallet object with required configuration parameters.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/stashed.mdx#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nfunction App({ children }) {\n\treturn (\n\t\t<WalletProvider\n\t\t\tstashedWallet={{\n\t\t\t\tname: 'Your dApp name',\n\t\t\t}}\n\t\t>\n\t\t\t{children}\n\t\t</WalletProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Stashed Wallet in TypeScript\nDESCRIPTION: Shows how to register the Stashed wallet in a dApp using the registerStashedWallet function. This initialization should be done early in the application lifecycle and requires the dApp name as a parameter.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/dapp.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerStashedWallet } from '@mysten/zksend';\n\nregisterStashedWallet('Your dApp Name');\n```\n\n----------------------------------------\n\nTITLE: Using useCurrentAccount hook with React in @mysten/dapp-kit\nDESCRIPTION: This example demonstrates how to use the useCurrentAccount hook to retrieve the currently selected wallet account. It shows checking for the presence of an account and conditionally rendering UI based on the connection status, including displaying the account address when connected.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useCurrentAccount.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useCurrentAccount } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst account = useCurrentAccount();\n\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton />\n\t\t\t{!account && <div>No account connected</div>}\n\t\t\t{account && (\n\t\t\t\t<div>\n\t\t\t\t\t<h2>Current account:</h2>\n\t\t\t\t\t<div>Address: {account.address}</div>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Inputs for Well-Known Object IDs in TypeScript\nDESCRIPTION: New transaction builder methods for defining inputs for well-known object IDs in Sui transactions.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntx.object.system(); // 0x5\ntx.object.clock(); // 0x6\ntx.object.random(); // 0x8\ntx.object.denyList(); // 0x403\n```\n\n----------------------------------------\n\nTITLE: Installing Mysten Walrus SDK\nDESCRIPTION: Command to install the Walrus SDK and its Sui dependency using npm\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @mysten/walrus @mysten/sui\n```\n\n----------------------------------------\n\nTITLE: Automatic Intent Resolver Addition in TypeScript for Sui Transactions\nDESCRIPTION: This snippet shows how to automatically add an intent resolver when a helper function for adding the intent is called, simplifying the process of using custom intents in transactions.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/plugins.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Commands, Transaction, TransactionObjectInput } from '@mysten/sui/transactions';\n\nfunction transferToSender(objects: TransactionObjectInput[]) {\n\treturn (tx: Transaction) => {\n\t\t// As long as we are adding the same function reference, it will only be added once\n\t\ttx.addIntentResolver('TransferToSender', resolveTransferToSender);\n\t\ttx.add(\n\t\t\tCommands.Intent({\n\t\t\t\tname: 'TransferToSender',\n\t\t\t\tinputs: {\n\t\t\t\t\tobjects: objects.map((obj) => tx.object(obj)),\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t};\n}\n\nconst transaction = new Transaction();\ntransaction.add(transferToSender(['0x1234']));\n```\n\n----------------------------------------\n\nTITLE: Recovering a Passkey with Multiple Signatures in TypeScript\nDESCRIPTION: This snippet illustrates the process of recovering a passkey's public key using two separate signatures. It uses the PasskeyKeypair.signAndRecover method twice and then finds the common public key between the results.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/passkey.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet provider = new BrowserPasskeyProvider('Sui Passkey Example', {\n\trpName: 'Sui Passkey Example',\n\trpId: window.location.hostname,\n} as BrowserPasswordProviderOptions);\n\nconst testMessage = new TextEncoder().encode('Hello world!');\nconst possiblePks = await PasskeyKeypair.signAndRecover(provider, testMessage);\n\nconst testMessage2 = new TextEncoder().encode('Hello world 2!');\nconst possiblePks2 = await PasskeyKeypair.signAndRecover(provider, testMessage2);\n\nconst commonPk = findCommonPublicKey(possiblePks, possiblePks2);\nconst keypair = new PasskeyKeypair(commonPk.toRawBytes(), provider);\n```\n\n----------------------------------------\n\nTITLE: Kiosk and TransferPolicy Transaction Updates\nDESCRIPTION: Shows the migration from transactionBlock to transaction parameter in KioskTransaction and TransferPolicyTransaction.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- const kioskTransaction = new KioskTransaction({ transactionBlock, ...otherOptions })\n+ const kioskTransaction = new KioskTransaction({ transaction, ...otherOptions })\n\n- const transferPolicyTransaction = new TransferPolicyTransaction({ transactionBlock, ...otherOptions })\n+ const transferPolicyTransaction = new TransferPolicyTransaction({ transaction, ...otherOptions })\n\n- resolveRuleFunction({ transactionBlock }) => { ... }\n+ resolveRuleFunction({ transaction }) => { ... }\n```\n\n----------------------------------------\n\nTITLE: Adding TransactionExpiration to TransactionData in TypeScript SDK\nDESCRIPTION: Adds TransactionExpiration to the TransactionData structure, allowing for expiration times to be set on transactions.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n- f2e713bd0: Add TransactionExpiration to TransactionData\n```\n\n----------------------------------------\n\nTITLE: DApp Kit Transaction Hook Updates\nDESCRIPTION: Shows changes to useSignTransaction and useSignAndExecuteTransaction hooks with custom execution options.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { mutate: signAndExecuteTransaction } = useSignAndExecuteTransaction()\n...\nconst { digest, effects } = await signAndExecuteTransaction({ transaction })\n```\n\n----------------------------------------\n\nTITLE: Updating ZkLogin Address Computation in TypeScript\nDESCRIPTION: Example of updating ZkLogin address computation methods to use the new legacyAddress flag for backwards compatibility.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n- import { computeZkLoginAddress, jwtToAddress } from '@mysten/zklogin';\n+ import { computeZkLoginAddress, jwtToAddress } from '@mysten/sui/zklogin';\n\n  const address = jwtToAddress(\n   jwtAsString,\n   salt,\n+  true\n  );\n  const address = computeZkLoginAddress({\n\tclaimName,\n\tclaimValue,\n\tiss,\n\taud,\n\tuserSalt: BigInt(salt),\n+\tlegacyAddress: true,\n  });\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Themes with WalletProvider\nDESCRIPTION: Demonstrates how to implement dynamic themes that can change based on system preferences or CSS selectors. The example shows three theme variations: a default light theme, a dark theme triggered by system preferences, and a pink theme activated by a CSS class.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/themes.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { lightTheme, WalletProvider } from '@mysten/dapp-kit';\n\nimport { darkTheme, pinkTheme } from './my-themes';\n\nconst App = () => {\n\treturn (\n\t\t<WalletProvider\n\t\t\ttheme={[\n\t\t\t\t{\n\t\t\t\t\t// default to light theme\n\t\t\t\t\tvariables: lightTheme,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// Adds theme inside a media query\n\t\t\t\t\tmediaQuery: '(prefers-color-scheme: dark)',\n\t\t\t\t\tvariables: darkTheme,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t// prefixes the theme styles with the given selector\n\t\t\t\t\t// this allows controlling the theme by adding a class to the body\n\t\t\t\t\tselector: '.pink-theme',\n\t\t\t\t\tvariables: pinkTheme,\n\t\t\t\t},\n\t\t\t]}\n\t\t>\n\t\t\t<YourApp />\n\t\t</WalletProvider>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Signing Sui Transaction with Ledger Device\nDESCRIPTION: This snippet shows how to sign a Sui transaction using a Ledger device. It uses the signTransaction method of the Sui app instance, passing the BIP-32 path and transaction contents.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst publicKey = await sui.signTransaction(\"44'/784'/0'/0'/0'\", '<transaction contents>');\n```\n\n----------------------------------------\n\nTITLE: Placing and Listing Items with Kiosk SDK V1\nDESCRIPTION: Example of placing an item in a kiosk and listing it for sale using the original Kiosk SDK V1. It demonstrates importing necessary functions, setting up parameters, and creating a transaction to place and list an item in a kiosk.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/from-v1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { placeAndList } from '@mysten/kiosk';\nimport { Transaction } from '@mysten/sui/transactions';\n\nconst placeAndListToKiosk = async () => {\n\tconst kiosk = 'SomeKioskId';\n\tconst kioskCap = 'KioskCapObjectId';\n\tconst itemType = '0xItemAddr::some:ItemType';\n\tconst item = 'SomeItemId';\n\tconst price = '100000';\n\n\tconst tx = new Transaction();\n\n\tplaceAndList(tx, itemType, kiosk, kioskCap, item, price);\n\n\t// ... continue to sign and execute the transaction\n\t// ...\n};\n```\n\n----------------------------------------\n\nTITLE: Updating MoveCall Arguments in TypeScript SDK\nDESCRIPTION: Makes the arguments field optional for MoveCall to match the Rust definition. This fixes a bug where the Explorer page does not load for transactions with no argument.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n- 31bfcae6a: Make arguments field optional for MoveCall to match Rust definition. This fixes a bug\n  where the Explorer page does not load for transactions with no argument.\n```\n\n----------------------------------------\n\nTITLE: Enoki SDK Transaction API Updates\nDESCRIPTION: Details the renaming of TransactionBlock-related methods to Transaction in the Enoki SDK.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n- enokiFlow.sponsorAndExecuteTransactionBlock({ transactionBlock })\n+ enokiFlow.sponsorAndExecuteTransaction({ transaction })\n\n- enokiFlow.sponsorTransactionBlock({ transactionBlock })\n+ enokiFlow.sponsorTransaction({ transaction })\n\n- enokiFlow.executeTransactionBlock({ ... })\n+ enokiFlow.executeTransaction({ ... })\n\n- enokiClient.createSponsoredTransactionBlock({ transactionBlockKindBytes })\n+ enokiClient.createSponsoredTransaction({ transactionKindBytes })\n\n- enokiClient.executeSponsoredTransactionBlock({ ... })\n+ enokiClient.executeSponsoredTransaction({ ... })\n```\n\n----------------------------------------\n\nTITLE: Package.json Dependencies Entry\nDESCRIPTION: JSON snippet showing the dependency configuration for the Sui SDK in package.json\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/hello-sui.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\n    \"@mysten/sui\": \"^<VERSION_NUMBER>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Coin Module in Move\nDESCRIPTION: Example Move module demonstrating a template for creating custom coins with configurable decimals, symbol, name and description. Shows basic coin creation and transfer functionality.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/move-bytecode-template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: move\nCODE:\n```\nmodule 0x0::template {\n    use std::option;\n    use sui::coin;\n    use sui::transfer;\n    use sui::tx_context::{Self, TxContext};\n\n    /// The OTW for the Coin\n    struct TEMPLATE has drop {}\n\n    const DECIMALS: u8 = 6;\n    const SYMBOL: vector<u8> = b\"TMPL\";\n    const NAME: vector<u8> = b\"Template Coin\";\n    const DESCRIPTION: vector<u8> = b\"Template Coin Description\";\n\n    /// Init the Coin\n    fun init(witness: TEMPLATE, ctx: &mut TxContext) {\n        let (treasury, metadata) = coin::create_currency(\n            witness, DECIMALS, SYMBOL, NAME, DESCRIPTION, option::none(), ctx\n        );\n\n        transfer::public_transfer(treasury, tx_context::sender(ctx));\n        transfer::public_transfer(metadata, tx_context::sender(ctx));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying fromSecretKey Function in TypeScript SDK\nDESCRIPTION: Updates the fromSecretKey function to take a 32-byte private key as input, changing the expected format of the secret key.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n- 4baf554f1: Make fromSecretKey take the 32 bytes privkey\n```\n\n----------------------------------------\n\nTITLE: Removing Personal Kiosk Rule from a Transfer Policy in TypeScript\nDESCRIPTION: Demonstrates how to remove a personal kiosk rule from a transfer policy.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/transfer-policy-transaction/using-the-manager.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntpTx.removePersonalKioskRule();\n```\n\n----------------------------------------\n\nTITLE: Getting Owned Transfer Policies by Type with KioskClient in TypeScript\nDESCRIPTION: This snippet shows how to query owned transfer policies for a specific type and address using the KioskClient. It returns an array of owned transfer policies matching the given type.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/querying.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming you have a kioskClient instance.\nconst kioskClient = new KioskClient({...});\n\n// The address that owns the transfer policies.\nconst address = '0xAddress';\n// The type of the transfer policy.\nconst type = '0xbe01d0594bedbce45c0e08c7374b03bf822e9b73cd7d555bf39c39bbf09d23a9::hero::Hero';\n\n// We can query by type.\nconst policies = await kioskClient.getOwnedTransferPoliciesByType({ address, type });\n\n// An example output of the response\n// [\n//   {\n//     policyId: '0x6b6eca8df6e70ea6447e639ef26b519039b5e9123642258eea1b3c781e94faca',\n//     policyCapId: '0x34a4794d4ad6578ac345d23ca0f7a4632ca88de297daaf24a1cdbc91e1547be4',\n//     type: '0xbe01d0594bedbce45c0e08c7374b03bf822e9b73cd7d555bf39c39bbf09d23a9::hero::Hero'\n//   }\n// ]\n```\n\n----------------------------------------\n\nTITLE: WebSocket Client Configuration Example\nDESCRIPTION: Example showing how to configure SuiClient with a WebSocket implementation for environments without native WebSocket support.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getFullnodeUrl, SuiClient, SuiHTTPTransport } from '@mysten/sui.js/client';\nimport { WebSocket } from 'ws';\n\nnew SuiClient({\n\ttransport: new SuiHTTPTransport({\n\t\turl: getFullnodeUrl('mainnet'),\n\t\t// The typescript definitions may not match perfectly, casting to never avoids these minor incompatibilities\n\t\tWebSocketConstructor: WebSocket as never,\n\t}),\n});\n```\n\n----------------------------------------\n\nTITLE: Pure Transaction Value Updates\nDESCRIPTION: Shows how to update transaction pure value handling with the new type-safe methods.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n- txb.pure('0x123')\n+ txb.pure.address('0x123')\n+ txb.pure(bcs.Address.serialize('0x123'))\n- txb.pure(123)\n+ txb.pure.u64(123n)\n+ txb.pure(bcs.U64.serialize(123n))\n- txb.pure(123, 'u64')\n+ txb.pure.u64(123n)\n- txb.pure(['0x123'], 'vector<address>')\n+ txb.pure(bcs.vector(bcs.Address).serialize(['0x123']))\n```\n\n----------------------------------------\n\nTITLE: Building Sui dApp for Deployment\nDESCRIPTION: Command to build the Sui dApp for production deployment, creating optimized and minified assets.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-client-dapp/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Legacy ZkLogin Address Computation in TypeScript\nDESCRIPTION: Shows various methods for computing legacy zkLogin addresses using different utility functions with the legacyAddress flag.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/zklogin.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tcomputeZkLoginAddress,\n\tcomputeZkLoginAddressFromSeed,\n\tjwtToAddress,\n\ttoZkLoginPublicIdentifier,\n\tgenAddressSeed,\n} from '@mysten/sui/zklogin';\n\nconst address = jwtToAddress(jwtAsString, salt, true);\nconst address = computeZkLoginAddressFromSeed(0n, 'https://accounts.google.com', true);\nconst address = computeZkLoginAddress({\n\tclaimName,\n\tclaimValue,\n\tiss,\n\taud,\n\tuserSalt: BigInt(salt),\n\tlegacyAddress: true,\n});\nconst address = toZkLoginPublicIdentifier(\n\tgenAddressSeed(userSalt, claimName, claimValue, aud),\n\tiss,\n\t{ legacyAddress: true },\n).toSuiAddress();\n```\n\n----------------------------------------\n\nTITLE: Vite Integration Example with TypeScript\nDESCRIPTION: Examples showing how to integrate and use the Move bytecode template library with Vite, including initialization and template manipulation.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/move-bytecode-template/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport init, * as template from '@mysten/move-bytecode-template';\nimport url from '@mysten/move-bytecode-template/move_bytecode_template_bg.wasm?url';\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait init(url);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst templateBytecode = fromHex('a11ceb0b06....');\n\ntemplate.deserialize(templateBytecode);\ntemplate.version();\ntemplate.update_identifiers(templateBytecode, {\n\tTEMPLATE: 'MY_MODULE',\n\ttemplate: 'my_module',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Persisted Web Crypto Keypair\nDESCRIPTION: Code to recover a keypair from IndexedDB storage\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/webcrypto-signer.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Read the keypair from IndexedDB.\nconst exported = await readFromIndexedDB('keypair');\n\nconst keypair = await WebCryptoSigner.import(exported);\n```\n\n----------------------------------------\n\nTITLE: Implementing SuiClientProvider as a Controlled Component in React\nDESCRIPTION: This example shows how to use SuiClientProvider as a controlled component, managing the active network state and handling network changes.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/sui-client-provider.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNetworkConfig, SuiClientProvider } from '@mysten/dapp-kit';\nimport { getFullnodeUrl } from '@mysten/sui/client';\nimport { useState } from 'react';\n\n// Config options for the networks you want to connect to\nconst { networkConfig } = createNetworkConfig({\n\tlocalnet: { url: getFullnodeUrl('localnet') },\n\tmainnet: { url: getFullnodeUrl('mainnet') },\n});\n\nfunction App() {\n\tconst [activeNetwork, setActiveNetwork] = useState('localnet' as keyof typeof networks);\n\n\treturn (\n\t\t<SuiClientProvider\n\t\t\tnetworks={networkConfig}\n\t\t\tnetwork={activeNetwork}\n\t\t\tonNetworkChange={(network) => {\n\t\t\t\tsetActiveNetwork(network);\n\t\t\t}}\n\t\t>\n\t\t\t<YourApp />\n\t\t</SuiClientProvider>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Updated Sui Package\nDESCRIPTION: Commands to uninstall the old @mysten/sui.js package and install the new @mysten/sui package.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm uninstall @mysten/sui.js\nnpm install @mysten/sui\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Sui dApp\nDESCRIPTION: Command to install the project dependencies using pnpm.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-e2e-counter/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating AWS KMS Signer with Explicit Credentials in TypeScript\nDESCRIPTION: This example shows how to create an AWS KMS Signer by explicitly providing the AWS key ID, region, access key ID, and secret access key. It uses the fromKeyId method to initialize the signer.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/signers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst signer = await AwsKmsSigner.fromKeyId('your-kms-key-id', {\n\tregion: 'us-west-2',\n\taccessKeyId: 'your-access-key-id',\n\tsecretAccessKey: 'your-secret-access-key',\n});\n```\n\n----------------------------------------\n\nTITLE: Switching Active Sui Address\nDESCRIPTION: Command to switch the active Sui address in the CLI.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-e2e-counter/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsui client switch --address 0xYOUR_ADDRESS...\n```\n\n----------------------------------------\n\nTITLE: Using MVR Static File with NamedPackagesPlugin\nDESCRIPTION: TypeScript code snippet demonstrating how to use the generated static MVR file in a project. It imports the getMvrCache function from the generated file and uses it to create a cache for the NamedPackagesPlugin.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/mvr-static/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NamedPackagesPlugin } from '@mysten/sui/src/transactions';\n\nimport { getMvrCache } from './mvr.ts';\n\n// create a cache for your network.\nconst cache = getMvrCache('mainnet');\n\nconst plugin = new NamedPackagesPlugin({\n\t// ...,\n\toverrides: cache,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Different Serialized Byte Formats in BCS\nDESCRIPTION: Shows how to work with different serialized byte formats including hex, base64, and base58, demonstrating conversion between formats and parsing.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs, fromBase58, fromBase64, fromHex } from '@mysten/bcs';\n\nconst serializedString = bcs.string().serialize('this is a string');\n\n// SerializedBcs.toBytes() returns a Uint8Array\nconst bytes: Uint8Array = serializedString.toBytes();\n\n// You can get the serialized bytes encoded as hex, base64 or base58\nconst hex: string = serializedString.toHex();\nconst base64: string = bcsWriter.toBase64();\nconst base58: string = bcsWriter.toBase58();\n\n// To parse a BCS value from bytes, the bytes need to be a Uint8Array\nconst str1 = bcs.string().parse(bytes);\n\n// If your data is encoded as string, you need to convert it to Uint8Array first\nconst str2 = bcs.string().parse(fromHex(hex));\nconst str3 = bcs.string().parse(fromBase64(base64));\nconst str4 = bcs.string().parse(fromBase58(base58));\n\nconsole.assert((str1 == str2) == (str3 == str4), 'Result is the same');\n```\n\n----------------------------------------\n\nTITLE: Importing Sui dApp Kit Styles\nDESCRIPTION: Example showing how to import the required CSS stylesheet for Sui dApp Kit UI components.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@mysten/dapp-kit/dist/index.css';\n```\n\n----------------------------------------\n\nTITLE: Installing zkSend SDK via Package Manager\nDESCRIPTION: Command to install the zkSend SDK using npm or yarn package manager. The npm2yarn directive allows automatic conversion between npm and yarn commands.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @mysten/zksend\n```\n\n----------------------------------------\n\nTITLE: Registering Type Aliases in BCS\nDESCRIPTION: Demonstrates how to register a type alias in BCS, which allows referring to complex types by a simple name.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// aliases for types\nbcs.registerAlias('Name', 'string');\nbcs.ser('Name', 'Palpatine');\n```\n\n----------------------------------------\n\nTITLE: Type Inference with BCS Types in TypeScript\nDESCRIPTION: Demonstrates how to use type inference with BCS types using both property-based and helper-based approaches for inferring types and input types.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs, type InferBcsType, type InferBcsInput } from '@mysten/bcs';\n\nconst MyStruct = bcs.struct('MyStruct', {\n\tid: bcs.u64(),\n\tname: bcs.string(),\n});\n\n// using the $inferType and $inferInput properties\ntype MyStructType = typeof MyStruct.$inferType; // { id: string; name: string; }\ntype MyStructInput = typeof MyStruct.$inferInput; // { id: number | string | bigint; name: string; }\n\n// using the InferBcsType and InferBcsInput type helpers\ntype MyStructType = InferBcsType<typeof MyStruct>; // { id: string; name: string; }\ntype MyStructInput = InferBcsInput<typeof MyStruct>; // { id: number | string | bigint; name: string; }\n```\n\n----------------------------------------\n\nTITLE: Listing Transactions with Links\nDESCRIPTION: Shows how to retrieve transactions that created or regenerated zkSend links, including support for claimed links.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/link-builder.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSentTransactionsWithLinks } from '@mysten/zksend';\n\nconst { data, hasNextPage, nextCursor } = await getSentTransactionsWithLinks({\n\taddress: addressOfCreator,\n});\n\nfor (const { transaction, links } of data) {\n\t// get the claimable assets for this link (will be empty if the link has been claimed)\n\tconst firstLink = links[0];\n\n\t// link is claimed\n\tfirstLink.claimed;\n\tconst { nfts, balances } = firstLink.assets;\n\n\t// claim link\n\tawait firstLink.link.claimAssets(addressOfClaimer);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Dynamic Field Name Type in TypeScript SDK\nDESCRIPTION: Changes the type of dynamic field names from string to DynamicFieldName struct, providing more structure and type safety for dynamic field operations.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n- 6ff0c785f: Use DynamicFieldName struct instead of string for dynamic field's name\n```\n\n----------------------------------------\n\nTITLE: Updating Import Statement\nDESCRIPTION: Code diff showing how to update the import statement to use the new package name.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- import { SuiClient } from '@mysten/sui.js'\n+ import { SuiClient } from '@mysten/sui'\n```\n\n----------------------------------------\n\nTITLE: Using BCS Type Aliases and Built-in Encoding Constants\nDESCRIPTION: Demonstrates registering a struct type with built-in encoding constants (HEX, BASE58, BASE64) for different string encoding formats.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nbcs.registerStructType('TestStruct', {\n\thex: BCS.HEX,\n\tbase58: BCS.BASE58,\n\tbase64: BCS.BASE64,\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Faucet Request Implementation\nDESCRIPTION: Demonstrates migration from provider-based faucet requests to the new dedicated faucet module exports.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- import { JsonRpcProvider, devnetConnection } from '@mysten/sui.js';\n- const provider = new JsonRpcProvider(devnetConnection);\n+ import { requestSuiFromFaucetV0, getFaucetHost } from '@mysten/sui.js/faucet';\n\n- await provider.requestSuiFromFaucet(\n-  '<YOUR SUI ADDRESS>'\n- );\n+ await requestSuiFromFaucetV0({\n+   host: getFaucetHost('devnet'),\n+   recipient: '<YOUR SUI ADDRESS>',\n+});\n```\n\n----------------------------------------\n\nTITLE: Installing Experimental Sui TypeScript SDK for Local Networks\nDESCRIPTION: This command installs the experimental-tagged Sui TypeScript SDK package, which contains the latest features for use with local Sui networks built from the main branch of the Sui monorepo.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/install.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @mysten/sui@experimental\n```\n\n----------------------------------------\n\nTITLE: Detecting Stashed Wallet Connection in TypeScript\nDESCRIPTION: Demonstrates how to detect if a user is connected to the Stashed wallet using dapp-kit's useCurrentWallet hook. The code compares the current wallet's name with the STASHED_WALLET_NAME constant.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/dapp.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCurrentWallet } from '@mysten/dapp-kit';\nimport { STASHED_WALLET_NAME } from '@mysten/zksend';\n\nfunction StashedOnly() {\n\tconst { currentWallet } = useCurrentWallet();\n\tconst walletIsStashedWallet = currentWallet?.name === STASHED_WALLET_NAME;\n\n\t// rest of component logic...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Locally Built Sui TypeScript SDK to Project\nDESCRIPTION: This command adds the locally built Sui TypeScript package to a project. It uses a relative path to the ts-sdks/packages/typescript directory from the project root.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/install.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add ../ts-sdks/packages/typescript\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.5\nDESCRIPTION: Documents the addition of WASM URL customization support.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus-wasm/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.5\n\n### Patch Changes\n\n- 4389b36: Add support for customizing wasm url\n```\n\n----------------------------------------\n\nTITLE: Wallet Standard Helper Functions\nDESCRIPTION: Demonstrates the new helper functions for handling wallet-standard methods in dApps.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { signAndExecuteTransaction, signTransaction } from '@mysten/wallet-standard';\n\nconst { signature, bytes } = await signTransaction(wallet, { transaction });\nconst { digest, effects } = await signAndExecuteTransaction(wallet, { transaction });\n```\n\n----------------------------------------\n\nTITLE: Exposing RPC and WebSocket Client Options in TypeScript SDK\nDESCRIPTION: Makes the rpcClient and websocketClient options accessible, allowing for more customization of the RPC and WebSocket connections.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n- f1e3a0373: Expose rpcClient and websocketClient options\n```\n\n----------------------------------------\n\nTITLE: Writing Blobs with WalrusClient\nDESCRIPTION: Example of writing a text blob with specified storage duration and deletion settings\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = new TextEncoder().encode('Hello from the TS SDK!!!\\n');\n\nconst { blobId } = await walrusClient.writeBlob({\n\tblob: file,\n\tdeletable: false,\n\tepochs: 3,\n\tsigner: keypair,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @mysten/bcs Package\nDESCRIPTION: Shows how to install the @mysten/bcs package using npm or yarn package managers.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @mysten/bcs\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.6\nDESCRIPTION: Documents the addition of a separate ESM (ECMAScript Modules) entrypoint.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus-wasm/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.6\n\n### Patch Changes\n\n- 981a39d: Add separate esm entrypoint\n```\n\n----------------------------------------\n\nTITLE: Type Inference with BCS\nDESCRIPTION: Shows how to infer TypeScript types from BCS type definitions using both property access and type helpers. Demonstrates type inference for both regular and input types.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/bcs/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bcs, type InferBcsType, type InferBcsInput } from '@mysten/bcs';\n\nconst MyStruct = bcs.struct('MyStruct', {\n\tid: bcs.u64(),\n\tname: bcs.string(),\n});\n\n// using the $inferType and $inferInput properties\ntype MyStructType = typeof MyStruct.$inferType; // { id: string; name: string; }\ntype MyStructInput = typeof MyStruct.$inferInput; // { id: number | string | bigint; name: string; }\n\n// using the InferBcsType and InferBcsInput type helpers\ntype MyStructType = InferBcsType<typeof MyStruct>; // { id: string; name: string; }\ntype MyStructInput = InferBcsInput<typeof MyStruct>; // { id: number | string | bigint; name: string; }\n```\n\n----------------------------------------\n\nTITLE: Building Sui dApp for Deployment\nDESCRIPTION: Command to build the Sui dApp for deployment using pnpm.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-e2e-counter/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Error Logging\nDESCRIPTION: Setup for logging individual network errors in the Walrus client\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n\tstorageNodeClientOptions: {\n\t\tonError: (error) => console.log(error),\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Package IDs\nDESCRIPTION: Example of manually configuring Walrus client with custom system and staking pool IDs\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst walrusClient = new WalrusClient({\n\tsuiClient,\n\tpackageConfig: {\n\t\tsystemObjectId: '0x98ebc47370603fe81d9e15491b2f1443d619d1dab720d586e429ed233e1255c1',\n\t\tstakingPoolId: '0x20266a17b4f1a216727f3eef5772f8d486a9e3b5e319af80a5b75809c035561d',\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Patch Update for Kiosk SDK\nDESCRIPTION: Adds a patch update to version 0.11.6 with a fix for transaction construction and dependency update.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/kiosk/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.11.6\n\n### Patch Changes\n\n- 986c4e3: Fix transasction construction for royalty_rule::fee_amount\n- Updated dependencies [5cea435]\n  - @mysten/sui@1.27.1\n```\n\n----------------------------------------\n\nTITLE: Version Change Documentation in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates and dependency changes for the Sui TypeScript SDK project. Includes version numbers, patch changes, and dependency updates.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/wallet-standard/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [f3444bdf2]\n- Updated dependencies [e26f47cbf]\n- Updated dependencies [b745cde24]\n- Updated dependencies [01efa8bc6]\n- Updated dependencies [35e0df780]\n- Updated dependencies [5cd51dd38]\n- Updated dependencies [8474242af]\n- Updated dependencies [01efa8bc6]\n- Updated dependencies [f74181212]\n  - @mysten/sui.js@0.23.0\n\n## 0.2.8\n\n### Patch Changes\n\n- Updated dependencies [a55236e48]\n- Updated dependencies [8ae226dae]\n  - @mysten/sui.js@0.22.0\n\n## 0.2.7\n\n### Patch Changes\n\n- Updated dependencies [4fb12ac6d]\n- Updated dependencies [bb14ffdc5]\n- Updated dependencies [9fbe2714b]\n- Updated dependencies [d2015f815]\n- Updated dependencies [7d0f25b61]\n  - @mysten/sui.js@0.21.0\n```\n\n----------------------------------------\n\nTITLE: Importing PasskeyKeypair and Related Classes in TypeScript\nDESCRIPTION: This snippet shows how to import the necessary classes for working with passkeys in the Sui TypeScript SDK.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/passkey.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tBrowserPasskeyProvider,\n\tBrowserPasswordProviderOptions,\n\tPasskeyKeypair,\n} from '@mysten/sui/keypairs/passkey';\n```\n\n----------------------------------------\n\nTITLE: Importing Web Crypto Signer\nDESCRIPTION: TypeScript import statement for the WebCryptoSigner class\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/webcrypto-signer.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { WebCryptoSigner } from '@mysten/signers/webcrypto';\n```\n\n----------------------------------------\n\nTITLE: Installing Experimental Sui TypeScript SDK\nDESCRIPTION: Command to install the experimental version of the Sui TypeScript SDK, which contains the latest changes from the main branch.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mysten/sui@experimental\n```\n\n----------------------------------------\n\nTITLE: Updating Kiosk SDK Version and Dependencies\nDESCRIPTION: Updates the version of @mysten/kiosk to 0.12.1 and its dependency @mysten/sui to 1.28.0.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/kiosk/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.12.1\n\n### Patch Changes\n\n- Updated dependencies [2705dc8]\n  - @mysten/sui@1.28.0\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.3.5\nDESCRIPTION: Documents addition of readme file.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/seal/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.5\n\n### Patch Changes\n\n- ed7333b: Add readme\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using LedgerJS for Sui Operations in Node.js\nDESCRIPTION: This snippet demonstrates how to initialize the Sui app using LedgerJS and perform basic operations like getting a public key, signing a transaction, and retrieving the app version. It uses the @ledgerhq/hw-transport and @mysten/ledgerjs-hw-app-sui packages.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst Transport = require('@ledgerhq/hw-transport').default;\nconst Sui = require('@mysten/ledgerjs-hw-app-sui').default;\n\nconst getPublicKey = async () => {\n\tconst sui = new Sui(await Transport.create());\n\treturn await sui.getPublicKey(\"44'/784'/0'/0'/0'\");\n};\n\nconst signTransaction = async () => {\n\tconst sui = new Sui(await Transport.create());\n\treturn await sui.signTransaction(\"44'/784'/0'/0'/0'\", '<transaction contents>');\n};\n\nconst getVersion = async () => {\n\tconst sui = new Sui(await Transport.create());\n\treturn await sui.getVersion();\n};\n\nconst doAll = async () => {\n\tconsole.log(await getPublicKey());\n\tconsole.log(await signTransaction());\n\tconsole.log(await getVersion());\n};\n\ndoAll().catch((err) => console.log(err));\n```\n\n----------------------------------------\n\nTITLE: Generating MVR Static File using CLI\nDESCRIPTION: Command to generate a static file for MVR resolution using the mvr-static CLI tool. This command runs the tool with default options.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/mvr-static/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx @mysten/mvr-static\n```\n\n----------------------------------------\n\nTITLE: Importing Ed25519 Keypair\nDESCRIPTION: Example of importing the Ed25519Keypair class from the Sui TypeScript SDK.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/keypairs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Deepbook TypeScript SDK\nDESCRIPTION: A sequence of commands to prepare the environment, build the project, and run end-to-end tests for the Deepbook TypeScript SDK.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/deepbook/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm prepare:e2e\npnpm turbo build\npnpm test:e2e to run the unit tests.\n```\n\n----------------------------------------\n\nTITLE: Building Sui TypeScript SDK Locally\nDESCRIPTION: Commands to install dependencies and build the Sui TypeScript SDK locally using pnpm.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install all dependencies\n$ pnpm install\n\n# Run `build` for the TypeScript SDK if you're in the `sdk/typescript` project\n$ pnpm run build\n\n# Run `sdk build` for the TypeScript SDK if you're in the root of `sui` repo\n$ pnpm sdk build\n```\n\n----------------------------------------\n\nTITLE: ZKSend SDK Changelog Entry\nDESCRIPTION: Changelog entry documenting version updates and changes to the @mysten/zksend SDK package, including dependency updates and patches.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/zksend/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @mysten/zksend\n\n## 0.12.26\n\n### Patch Changes\n\n- 3eb8990: use window-wallet-core for experimental unified-adapter\n- Updated dependencies [2705dc8]\n- Updated dependencies [3eb8990]\n  - @mysten/sui@1.28.0\n  - @mysten/window-wallet-core@0.0.2\n  - @mysten/wallet-standard@0.14.5\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Type Syntax for BCS Struct Registration\nDESCRIPTION: Shows how to register a struct type using the new array syntax for better composition of generics, which is an alternative to string templates.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/bcs/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// new syntax\nbcs.registerStructType(['VecMap', 'K', 'V'], {\n\tkeys: ['vector', 'K'],\n\tvalues: ['vector', 'V'],\n});\n\n// is identical to an old string definition\nbcs.registerStructType('VecMap<K, V>', {\n\tkeys: 'vector<K>',\n\tvalues: 'vector<V>',\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Rules to Transfer Policy with Kiosk SDK V1\nDESCRIPTION: Example of attaching royalty and kiosk lock rules to a transfer policy using the original Kiosk SDK V1. It demonstrates how to set up royalty percentages and minimum amounts, and configure both rules for an NFT type.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/from-v1.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n\tattachKioskLockRule,\n\tattachRoyaltyRule,\n\tcreateTransferPolicy,\n\tpercentageToBasisPoints,\n\ttestnetEnvironment,\n} from '@mysten/kiosk';\nimport { Transaction } from '@mysten/sui/transactions';\n\n// Attaches a royalty rule of 1% or 0.1 SUI (whichever is bigger)\n// as well as a kiosk lock, making the objects tradeable only from/to a kiosk.\nconst attachStrongRoyalties = async () => {\n\tconst type = 'SomePackageId::type::MyType'; // the Type for which we're attaching rules.\n\tconst policyId = 'policyObjectId'; // the transfer Policy ID that was created for that Type.\n\tconst transferPolicyCap = 'transferPolicyCapId'; // the transferPolicyCap for that policy.\n\n\t// Royalties configuration.\n\tconst percentage = 2.55; // 2.55%\n\tconst minAmount = 100_000_000; // 0.1 SUI.\n\n\t// The environment on which we're referencing the rules package.\n\t// Use `mainnetEnvironment` for mainnet.\n\tconst environment = testnetEnvironment;\n\n\tconst tx = new Transaction();\n\n\tattachKioskLockRule(tx, type, policyId, policyCapId, environment);\n\tattachRoyaltyRule(\n\t\ttx,\n\t\ttype,\n\t\tpolicyId,\n\t\tpolicyCapId,\n\t\tpercentageToBasisPoints(percentage),\n\t\tminAmount,\n\t\tenvironment,\n\t);\n\n\t// ... continue to sign and execute the transaction\n\t// ...\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Sui dApp Kit CSS for UI Components\nDESCRIPTION: Code snippet showing how to import the dApp Kit's CSS stylesheet, which is required to use the provided UI components with their default styling.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/dapp-kit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport '@mysten/dapp-kit/dist/index.css';\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Sui TypeScript SDK\nDESCRIPTION: Command to run unit tests for the Sui TypeScript SDK using pnpm.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter @mysten/sui test:unit\n```\n\n----------------------------------------\n\nTITLE: Minor Change Entry for v0.14.0\nDESCRIPTION: Documents addition of optional 'chain' parameter to signPersonalMessage feature\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/wallet-standard/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- 68a9ecd: Add an optional `chain` parameter to the `signPersonalMessage` feature\n\n### Patch Changes\n\n- Updated dependencies [e8b5d04]\n  - @mysten/sui@1.25.0\n```\n\n----------------------------------------\n\nTITLE: RuleResolvingParams Type Definition in TypeScript SDK\nDESCRIPTION: This snippet provides the type definition for RuleResolvingParams, which is used in custom rule resolution functions. It includes various parameters needed for resolving rules during a kiosk purchase.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/kiosk-client/kiosk-transaction/purchasing.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// For reference, here's the RuleResolvingParams contents.\ntype RuleResolvingParams = {\n\ttransaction: Transaction;\n\titemType: string;\n\titemId: string;\n\tprice: string;\n\tpolicyId: ObjectArgument;\n\tkiosk: ObjectArgument;\n\townedKiosk: ObjectArgument;\n\townedKioskCap: ObjectArgument;\n\ttransferRequest: TransactionArgument;\n\tpurchasedItem: TransactionArgument;\n\tpackageId: string;\n\textraArgs: Record<string, any>; // extraParams contains more possible {key, values} to pass for custom rules.\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory - Shell Commands\nDESCRIPTION: Shell commands to create and navigate to the project directory\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/hello-sui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir hello-sui\ncd hello-sui\n```\n\n----------------------------------------\n\nTITLE: Moving Base58 Libraries to BCS in TypeScript SDK\nDESCRIPTION: Relocates base58 libraries to the BCS (Binary Canonical Serialization) module, potentially improving organization and reusability of base58 functionality.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n- 67e503c7c: Move base58 libraries to BCS\n```\n\n----------------------------------------\n\nTITLE: Updating Package ID in TypeScript Constants\nDESCRIPTION: Code snippet to update the TESTNET_COUNTER_PACKAGE_ID constant with the newly published package ID.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-e2e-counter/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const TESTNET_COUNTER_PACKAGE_ID = \"<YOUR_PACKAGE_ID>\";\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests Against Devnet\nDESCRIPTION: Command to run E2E tests for the Sui TypeScript SDK against the Devnet environment.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nVITE_FAUCET_URL='https://faucet.devnet.sui.io:443/v2/gas' VITE_FULLNODE_URL='https://fullnode.devnet.sui.io' pnpm --filter @mysten/sui exec vitest e2e\n```\n\n----------------------------------------\n\nTITLE: Importing Mysten Wallet Standard SDK in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the @mysten/wallet-standard package in a Markdown file. It includes the package name and a brief description of its purpose.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/wallet-standard/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@mysten/wallet-standard`\n```\n\n----------------------------------------\n\nTITLE: Installing Web Crypto Signer Package\nDESCRIPTION: Command to install the @mysten/signers package using npm\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/cryptography/webcrypto-signer.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @mysten/signers\n```\n\n----------------------------------------\n\nTITLE: Converting Transaction Bytes to Transaction Object in TypeScript\nDESCRIPTION: Demonstrates how to convert raw transaction bytes back into a Transaction class instance.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/transaction-building/basics.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst bytes = getTransactionBytesFromSomewhere();\nconst tx = Transaction.from(bytes);\n```\n\n----------------------------------------\n\nTITLE: Loading WASM in Vite\nDESCRIPTION: Example of loading WASM bindings in a Vite environment\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport walrusWasmUrl from '@mysten/walrus-wasm/web/walrus_wasm_bg.wasm?url';\n\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n\twasmUrl: walrusWasmUrl,\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.6.4\nDESCRIPTION: Documents a bug fix for public key storage in IndexedDB and dependency updates.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/enoki/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.4\n\n### Patch Changes\n\n- 20568cd: Fix the public key not being stored in IndexedDB for `EnokiFlow` and Enoki wallets\n- Updated dependencies [5cea435]\n  - @mysten/sui@1.27.1\n  - @mysten/signers@0.2.2\n  - @mysten/wallet-standard@0.14.4\n```\n\n----------------------------------------\n\nTITLE: Error Handling in WalrusClient\nDESCRIPTION: Example of handling retryable errors by resetting the client\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RetryableWalrusClientError } from '@mysten/walrus';\n\nif (error instanceof RetryableWalrusClientError) {\n\twalrusClient.reset();\n\n\t/* retry your operation */\n}\n```\n\n----------------------------------------\n\nTITLE: Package Name Declaration in Markdown\nDESCRIPTION: Package name declaration with warning notice about the experimental status of the package and caution for production use.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/window-wallet-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@mysten/window-wallet-core`\n\n⚠️ **Warning**: This package is in active development and should be used with caution. APIs are\nexperimental and subject to breaking changes without notice. We recommend thoroughly testing any\nimplementation before using in production environments.\n```\n\n----------------------------------------\n\nTITLE: Installing Sui dApp Kit and Dependencies with npm/yarn\nDESCRIPTION: Command to install the Sui dApp Kit and its required dependencies including @mysten/sui and @tanstack/react-query packages.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/dapp-kit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save @mysten/dapp-kit @mysten/sui @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Adding requestSuiFromFaucetV2 in Version 0.4.0\nDESCRIPTION: This update adds a new requestSuiFromFaucetV2 function and deprecates previous faucet-related functions. It also updates dependencies.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.0\n\n### Minor Changes\n\n- 2705dc8: Added a requestSuiFromFaucetV2 and added a deprecation comment on the previous\n  requestSuiFromFaucetV0, V1, and status.\n\n### Patch Changes\n\n- Updated dependencies [2705dc8]\n  - @mysten/sui@1.28.0\n  - @mysten/dapp-kit@0.15.6\n```\n\n----------------------------------------\n\nTITLE: Publishing Sui Move Package\nDESCRIPTION: Command to publish the Move package for the counter example with a specified gas budget.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-e2e-counter/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd move\nsui client publish --gas-budget 100000000 counter\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.3.6\nDESCRIPTION: Documents increase in max session key TTL to 30 min and dependency updates.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/seal/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.6\n\n### Patch Changes\n\n- ad8b845: Increase max session key TTL to 30 min\n- Updated dependencies [4d13ef8]\n- Updated dependencies [4d13ef8]\n  - @mysten/sui@1.27.0\n```\n\n----------------------------------------\n\nTITLE: Removing Pending Delegation Switches in TypeScript SDK\nDESCRIPTION: Removes functionality related to pending delegation switches, potentially simplifying the delegation process or removing deprecated features.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/CHANGELOG.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n- 0e202a543: Remove pending delegation switches.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.2\nDESCRIPTION: Documents fixes for WASM bindings in bundled client applications.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus-wasm/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.2\n\n### Patch Changes\n\n- 7d6e114: Fix walrus wasm bindings not working in bundled client applications\n```\n\n----------------------------------------\n\nTITLE: Installing Sui SDK - NPM Command\nDESCRIPTION: NPM command to install the Sui TypeScript SDK as a development dependency\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/hello-sui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @mysten/sui\n```\n\n----------------------------------------\n\nTITLE: Starting Sui dApp in Development Mode\nDESCRIPTION: Command to start the Sui dApp in development mode, allowing for live updates and testing during development.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-client-dapp/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Installing Mysten GraphQL Transport Package\nDESCRIPTION: NPM installation command for the @mysten/graphql-transport package.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/graphql-transport/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @mysten/graphql-transport\n```\n\n----------------------------------------\n\nTITLE: Implementing useAutoConnectWallet Hook in React TypeScript\nDESCRIPTION: Demonstrates how to use the useAutoConnectWallet hook to monitor wallet auto-connection status in a React component. The hook is used alongside ConnectButton to display the current auto-connection state.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useAutoConnectWallet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useAutoConnectWallet } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst autoConnectionStatus = useAutoConnectWallet();\n\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton />\n\t\t\t<div>Auto-connection status: {autoConnectionStatus}</div>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Network Requests with Undici\nDESCRIPTION: Configuration of custom network requests using Undici agent with timeout settings\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { RequestInfo, RequestInit } from 'undici';\nimport { Agent, fetch, setGlobalDispatcher } from 'undici';\n\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n\tstorageNodeClientOptions: {\n\t\ttimeout: 60_000,\n\t\tfetch: (url, init) => {\n\t\t\treturn fetch(url as RequestInfo, {\n\t\t\t\t...(init as RequestInit),\n\t\t\t\tdispatcher: new Agent({\n\t\t\t\t\tconnectTimeout: 60_000,\n\t\t\t\t}),\n\t\t\t}) as unknown as Promise<Response>;\n\t\t},\n\t},\n});\n```\n\n----------------------------------------\n\nTITLE: Building Sui TypeScript SDK from Source\nDESCRIPTION: These commands build the Sui TypeScript SDK from the Sui monorepo using pnpm. It installs all dependencies and runs the build process for the TypeScript SDK.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/install.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install all dependencies\npnpm install\n# Run the build for the TypeScript SDK\npnpm sdk build\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands for running the Next.js development server using different package managers (npm, pnpm, or yarn). The server will be accessible at http://localhost:3000.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.3\nDESCRIPTION: Documents the addition of missing WebAssembly bindings.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus-wasm/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.3\n\n### Patch Changes\n\n- ea2ce74: Add missing wasm bindings\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Initial Release 0.1.0\nDESCRIPTION: Records initial package release with GCP KMS signer implementation and package renaming\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/signers/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\n### Minor Changes\n\n- 2349920: Introduces GCP KMS signer at `@mysten/signers/gcp`\n- e0885ca: renamed package to @mysten/signers and inlines aws4fetch\n\n### Patch Changes\n\n- @mysten/sui@1.16.1\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Sui TypeScript SDK\nDESCRIPTION: Commands to prepare and run E2E tests for the Sui TypeScript SDK against a local network.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/typescript/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter @mysten/sui prepare:e2e\n\n// This will run all e2e tests\npnpm --filter @mysten/sui test:e2e\n\n// Alternatively you can choose to run only one test file\nnpx vitest txn-builder.test.ts\n```\n\n----------------------------------------\n\nTITLE: Loading WASM in Vite\nDESCRIPTION: Configuration for loading WASM bindings in Vite applications\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/walrus/index.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport walrusWasmUrl from '@mysten/walrus-wasm/web/walrus_wasm_bg.wasm?url';\n\nconst walrusClient = new WalrusClient({\n\tnetwork: 'testnet',\n\tsuiClient,\n\twasmUrl: walrusWasmUrl,\n});\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for v0.14.5\nDESCRIPTION: Lists dependency update for @mysten/sui package to version 1.28.0\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/wallet-standard/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.14.5\n\n### Patch Changes\n\n- Updated dependencies [2705dc8]\n  - @mysten/sui@1.28.0\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.1\nDESCRIPTION: Documents the initial release of the package.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus-wasm/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.1\n\n### Patch Changes\n\n- f81d84d: initial release\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.3\nDESCRIPTION: Records dependency update of @mysten/sui to version 1.28.0\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/signers/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.3\n\n### Patch Changes\n\n- Updated dependencies [2705dc8]\n  - @mysten/sui@1.28.0\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Entry for v0.12.0\nDESCRIPTION: Documents major SDK renaming to @mysten/sui with migration guide reference\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/wallet-standard/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Minor Changes\n\n- a92b03de42: The Typescript SDK has been renamed to `@mysten/sui` and includes many new features and breaking changes. See the [full migration guide](https://sdk.mystenlabs.com/typescript/migrations/sui-1.0) for details on how to upgrade.\n\n### Patch Changes\n\n- Updated dependencies [ebdfe7cf21]\n- Updated dependencies [a92b03de42]\n  - @mysten/sui@1.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Version 0.3.57\nDESCRIPTION: This patch updates dependencies for the package and its related modules.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.57\n\n### Patch Changes\n\n- 7ba32a4: update dependencies\n- Updated dependencies [7ba32a4]\n  - @mysten/sui@1.26.1\n  - @mysten/dapp-kit@0.15.2\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.5.0\nDESCRIPTION: This snippet shows the changelog entry for version 0.5.0, which includes minor changes to the signTransaction method and dependency updates.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.0\n\n### Minor Changes\n\n- 156ae13: Remove option to pass `txn` as a hexadecimal string or Buffer\n- 156ae13: Add `options` parameter to the `signTransaction` method for clear signing displays\n\n### Patch Changes\n\n- 7ba32a4: update dependencies\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.1.0\nDESCRIPTION: This snippet shows the changelog entry for version 0.1.0, which includes minor changes to package publishing behavior, naming conventions, and the initial library version publication.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\n### Minor Changes\n\n- a6690ac7d: Changed the default behavior of `publish` to publish an upgreadeable-by-sender package\n  instead of immutable.\n- 0a7b42a6d: This changes almost all occurences of \"delegate\", \"delegation\" (and various\n  capitalizations/forms) to their equivalent \"stake\"-based name. Function names, function argument\n  names, RPC endpoints, Move functions, and object fields have been updated with this new naming\n  convention.\n- 3709957cf: Published initial version of library\n```\n\n----------------------------------------\n\nTITLE: Referencing Seal Package in Markdown\nDESCRIPTION: Package name reference in markdown format showing the beta version of Seal package.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/seal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`@mysten/seal`\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.3.1\nDESCRIPTION: This snippet shows the changelog entry for version 0.3.1, which includes a patch change to update the typescript version.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.1\n\n### Patch Changes\n\n- 4830361fa4: Updated typescript version\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.3.4\nDESCRIPTION: Documents dependency updates for @mysten/sui and @mysten/bcs packages.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/seal/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.4\n\n### Patch Changes\n\n- 7ba32a4: update dependencies\n- Updated dependencies [7ba32a4]\n- Updated dependencies [c3a788c]\n  - @mysten/sui@1.26.1\n  - @mysten/bcs@1.6.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.2.0\nDESCRIPTION: This snippet shows the changelog entry for version 0.2.0, which includes a minor change to add a display option to getPublicKey and clean up library code.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n### Minor Changes\n\n- 29a29756d: Added \"displayOnDevice\" option to getPublicKey and cleaned-up some library code\n```\n\n----------------------------------------\n\nTITLE: Running the Application - Node.js Command\nDESCRIPTION: Command to execute the Node.js application\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/hello-sui.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.4.2\nDESCRIPTION: This snippet shows the changelog entry for version 0.4.2, which includes a patch change to update repository links.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.2\n\n### Patch Changes\n\n- 7abd243: Update repo links\n```\n\n----------------------------------------\n\nTITLE: Version Update Details in Markdown\nDESCRIPTION: Markdown formatted changelog entries documenting version updates, dependency changes, and feature updates for the Typescript SDK.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/dapp-kit/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [6fc6235984]\n  - @mysten/sui@1.0.1\n  - @mysten/wallet-standard@0.12.1\n  - @mysten/zksend@0.9.1\n\n## 0.14.0\n\n### Minor Changes\n\n- a92b03de42: The Typescript SDK has been renamed to `@mysten/sui` and includes many new features\n  and breaking changes. See the\n  [full migration guide](https://sdk.mystenlabs.com/typescript/migrations/sui-1.0) for details on\n  how to upgrade.\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning for Experimental Package in Markdown\nDESCRIPTION: This snippet uses Markdown syntax to display a warning message about the experimental nature of the @mysten/slush-wallet package. It emphasizes the risk of breaking changes and advises against production use.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/slush-wallet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `@mysten/slush-wallet`\n\n⚠️ **Warning**: This package is in active development and should be used with caution. APIs are\nexperimental and subject to breaking changes without notice. This should not be used in production\nenviornments until further notice.\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.3.0\nDESCRIPTION: This snippet shows the changelog entry for version 0.3.0, which includes a minor change to replace the build system.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0\n\n### Minor Changes\n\n- e5f9e3ba21: Replace tsup based build to fix issues with esm/cjs dual publishing\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Sui dApp\nDESCRIPTION: Command to install the necessary dependencies for the Sui dApp using pnpm package manager.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-client-dapp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Minor Version Change for Kiosk SDK\nDESCRIPTION: Adds a minor version update to 0.12.0 with a change to use default pagination limit when loading kiosks.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/kiosk/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.12.0\n\n### Minor Changes\n\n- d81b9a7: Use default pagination limit when loading kiosks\n```\n\n----------------------------------------\n\nTITLE: Package Header in Markdown\nDESCRIPTION: Header section identifying the @mysten/enoki package using markdown syntax\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/enoki/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@mysten/enoki`\n```\n\n----------------------------------------\n\nTITLE: Publishing Blob Data using cURL\nDESCRIPTION: Demonstrates how to publish blob data to a local endpoint using a PUT request. The example sends a simple string payload to the /v1/blobs endpoint running on localhost port 3000.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/examples/publisher/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \"localhost:3000/v1/blobs\" -d \"some string\"\n```\n\n----------------------------------------\n\nTITLE: Starting Sui dApp in Development Mode\nDESCRIPTION: Command to start the Sui dApp in development mode using pnpm.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-e2e-counter/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.6.5\nDESCRIPTION: Records dependency version updates for @mysten/sui, @mysten/signers, and @mysten/wallet-standard packages.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/enoki/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.5\n\n### Patch Changes\n\n- Updated dependencies [2705dc8]\n  - @mysten/sui@1.28.0\n  - @mysten/signers@0.2.3\n  - @mysten/wallet-standard@0.14.5\n```\n\n----------------------------------------\n\nTITLE: Package Name Definition in Markdown\nDESCRIPTION: Package name declaration in a markdown code block, identifying the @mysten/zksend package\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/zksend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@mysten/zksend\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog for TS-SDKs\nDESCRIPTION: Detailed changelog entries documenting version updates, dependency changes, and feature modifications across multiple SDK releases. Includes versioning for @mysten/sui.js and @mysten/zklogin packages along with various feature updates and bug fixes.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/enoki/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- Updated dependencies [e5f9e3ba21]\n  - @mysten/sui.js@0.49.0\n  - @mysten/zklogin@0.4.0\n\n## 0.0.8\n\n### Patch Changes\n\n- Updated dependencies [dd362ec1d6]\n  - @mysten/sui.js@0.48.1\n  - @mysten/zklogin@0.3.10\n\n## 0.0.7\n\n### Patch Changes\n\n- dd485449a7: Update to new two-step API\n- Updated dependencies [cdcfa76c43]\n  - @mysten/sui.js@0.48.0\n  - @mysten/zklogin@0.3.9\n\n## 0.0.6\n\n### Patch Changes\n\n- 0eb6fa61b: Hydrate the session on mount\n\n## 0.0.5\n\n### Patch Changes\n\n- Updated dependencies [0e3d0dfae]\n  - @mysten/zklogin@0.3.8\n\n## 0.0.4\n\n### Patch Changes\n\n- 732fdbb5b: Make enoki flow session observable. Expose state parameter on useAuthCallback.\n\n## 0.0.3\n\n### Patch Changes\n\n- dfa523c77: Key storage off of the API key, and add APIs for transaction block sponsorship\n\n## 0.0.2\n\n### Patch Changes\n\n- 180616bef: Rewrite the encryption layer\n- 9ac7e2f3d: Introduce Enoki SDK\n- Updated dependencies [194c980cb]\n- Updated dependencies [9ac7e2f3d]\n- Updated dependencies [0259aec82]\n- Updated dependencies [64d45ba27]\n  - @mysten/sui.js@0.47.0\n  - @mysten/zklogin@0.3.7\n```\n\n----------------------------------------\n\nTITLE: Creating a New Sui Address\nDESCRIPTION: Command to generate a new Sui address using the secp256k1 algorithm.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/create-dapp/templates/react-e2e-counter/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsui client new-address secp256k1\n```\n\n----------------------------------------\n\nTITLE: Minor Changes Note\nDESCRIPTION: Markdown note indicating breaking changes with link to migration guide\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/kiosk/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- 5ee8c24f1: Introduces BREAKING CHANGES. Migration guide and explanation:\\n  https://sdk.mystenlabs.com/kiosk/from-v1\n```\n\n----------------------------------------\n\nTITLE: Downloading Blobs Using Curl\nDESCRIPTION: Command to download a blob from the local server and save it as a file. Uses curl's -o flag to specify the output filename.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/examples/aggregator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"localhost:3000/v1/blobs/<some blob ID>\" -o <some file name>\n```\n\n----------------------------------------\n\nTITLE: Release Notes Entry in Markdown\nDESCRIPTION: Changelog entry documenting version 0.0.2 patch release that includes package initialization changes\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/window-wallet-core/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @mysten/window-wallet-core\n\n## 0.0.2\n\n### Patch Changes\n\n- 3eb8990: package initialization\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.2.0\nDESCRIPTION: Documents the addition of LedgerSigner class for hardware wallet support and dependency updates\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/signers/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n### Minor Changes\n\n- 156ae13: Add new LedgerSigner class for signing transactions with a Ledger hardware wallet\n\n### Patch Changes\n\n- 7ba32a4: update dependencies\n- Updated dependencies [7ba32a4]\n- Updated dependencies [156ae13]\n- Updated dependencies [156ae13]\n  - @mysten/ledgerjs-hw-app-sui@0.5.0\n  - @mysten/sui@1.26.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.4.1\nDESCRIPTION: This snippet shows the changelog entry for version 0.4.1, which includes a patch change to update dependencies.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.1\n\n### Patch Changes\n\n- 0f27a97: Update dependencies\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for Version 0.4.0\nDESCRIPTION: This snippet shows the changelog entry for version 0.4.0, which includes a minor change renaming the Typescript SDK and introducing breaking changes.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/ledgerjs-hw-app-sui/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.0\n\n### Minor Changes\n\n- a92b03de42: The Typescript SDK has been renamed to `@mysten/sui` and includes many new features\n  and breaking changes. See the\n  [full migration guide](https://sdk.mystenlabs.com/typescript/migrations/sui-1.0) for details on\n  how to upgrade.\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry v0.0.4\nDESCRIPTION: Documents the addition of 'import' functionality to walrus-wasm exports.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus-wasm/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.4\n\n### Patch Changes\n\n- 3e9bb8d: add 'import' to walrus-wasm exports\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.3.8\nDESCRIPTION: Documents dependency update of @mysten/sui package to version 1.28.0.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/seal/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.8\n\n### Patch Changes\n\n- Updated dependencies [2705dc8]\n  - @mysten/sui@1.28.0\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Structured changelog showing version history, dependency updates, feature additions and bug fixes for @mysten/walrus SDK\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/walrus/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @mysten/walrus\n\n## 0.0.17\n\n### Patch Changes\n\n- Updated dependencies [2705dc8]\n  - @mysten/sui@1.28.0\n\n## 0.0.16\n\n### Patch Changes\n\n- 981a39d: Add separate esm entrypoint\n- Updated dependencies [981a39d]\n  - @mysten/walrus-wasm@0.0.6\n\n## 0.0.15\n\n### Patch Changes\n\n- 986c4e3: Add onError to storageNodeClientOptions\n- Updated dependencies [5cea435]\n  - @mysten/sui@1.27.1\n\n## 0.0.14\n\n### Patch Changes\n\n- 4d13ef8: Implement experimental client extension support\n- Updated dependencies [4d13ef8]\n- Updated dependencies [4d13ef8]\n  - @mysten/sui@1.27.0\n\n## 0.0.13\n\n### Patch Changes\n\n- 4389b36: Add support for customizing wasm url\n- Updated dependencies [4389b36]\n  - @mysten/walrus-wasm@0.0.5\n\n## 0.0.12\n\n### Patch Changes\n\n- 3be4016: fix packageId in deleteBlob move call\n\n## 0.0.11\n\n### Patch Changes\n\n- 4425284: Fix certify_blob transaction\n\n## 0.0.10\n\n### Patch Changes\n\n- a83d4a5: update readme\n\n## 0.0.9\n\n### Patch Changes\n\n- 7ba32a4: update dependencies\n- 7ba32a4: update testnet contract ids\n- Updated dependencies [7ba32a4]\n- Updated dependencies [c3a788c]\n  - @mysten/sui@1.26.1\n  - @mysten/bcs@1.6.0\n\n## 0.0.8\n\n### Patch Changes\n\n- Updated dependencies [3e9bb8d]\n  - @mysten/walrus-wasm@0.0.4\n\n## 0.0.7\n\n### Patch Changes\n\n- ea2ce74: Add missing wasm bindings\n- Updated dependencies [ea2ce74]\n  - @mysten/walrus-wasm@0.0.3\n\n## 0.0.6\n\n### Patch Changes\n\n- 7d6e114: Fix walrus wasm bindings not working in bundled client applications\n- Updated dependencies [7d6e114]\n  - @mysten/walrus-wasm@0.0.2\n\n## 0.0.5\n\n### Patch Changes\n\n- Updated dependencies [906dd14]\n  - @mysten/sui@1.26.0\n\n## 0.0.4\n\n### Patch Changes\n\n- 833e007: Add mainnet package ids\n- 833e007: Add support for subsidies\n\n## 0.0.3\n\n### Patch Changes\n\n- Updated dependencies [e8b5d04]\n  - @mysten/sui@1.25.0\n\n## 0.0.2\n\n### Patch Changes\n\n- e6c72c1: Fix testnet bcs mismatch\n\n## 0.0.1\n\n### Patch Changes\n\n- f81d84d: initial release\n- Updated dependencies [cf3d12d]\n- Updated dependencies [f81d84d]\n  - @mysten/sui@1.24.0\n  - @mysten/walrus-wasm@0.0.1\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Version 0.3.7\nDESCRIPTION: Documents dependency update of @mysten/sui package to version 1.27.1.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/seal/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.7\n\n### Patch Changes\n\n- Updated dependencies [5cea435]\n  - @mysten/sui@1.27.1\n```\n\n----------------------------------------\n\nTITLE: Adding Objects Created in Transaction\nDESCRIPTION: Demonstrates how to add newly created objects to a zkSend link within the same transaction. Shows integration with transaction creation and object reference handling.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/zksend/link-builder.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = new Transaction();\n\nconst link = new ZkSendLinkBuilder({\n\tsender: '0x...',\n});\n\nconst newObject = tx.moveCall({\n\ttarget: `${PACKAGE_ID}::your_module::mint`,\n});\n\nlink.addClaimableObjectRef({\n\tref: newObject,\n\ttype: `${PACKAGE_ID}::your_module::YourType`,\n});\n\n// Adds the link creation transactions to the transaction\nlink.createSendTransaction({\n\ttransaction: tx,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Uncontrolled ConnectModal Component in React\nDESCRIPTION: Example of using ConnectModal without explicit state management. This implementation lets the component manage its own open/closed state internally, simplifying usage when external control is not needed.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-components/ConnectModal.mdx#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ConnectModal, useCurrentAccount } from '@mysten/dapp-kit';\n\nexport function YourApp() {\n\tconst currentAccount = useCurrentAccount();\n\n\treturn (\n\t\t<ConnectModal\n\t\t\ttrigger={\n\t\t\t\t<button disabled={!!currentAccount}> {currentAccount ? 'Connected' : 'Connect'}</button>\n\t\t\t}\n\t\t/>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using useDisconnectWallet Hook in React Component\nDESCRIPTION: This snippet demonstrates how to import and use the useDisconnectWallet hook to implement a disconnect button in a React component. It shows the pattern of destructuring the mutate function as disconnect and calling it on button click.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/wallet-hooks/useDisconnectWallet.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ConnectButton, useDisconnectWallet } from '@mysten/dapp-kit';\n\nfunction MyComponent() {\n\tconst { mutate: disconnect } = useDisconnectWallet();\n\treturn (\n\t\t<div>\n\t\t\t<ConnectButton />\n\n\t\t\t<button onClick={() => disconnect()}>Disconnect</button>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: BCS Enum Type Handling in TypeScript\nDESCRIPTION: Demonstrates the updated TypeScript types for BCS enum types, introducing the $kind property for variant discrimination.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/migrations/sui-1.0.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst MyEnum = bcs.enum('MyEnum', {\n\tVariant0: bcs.u16(),\n\tVariant1: bcs.u8(),\n\tVariant2: bcs.string(),\n});\n\nconst parsed = MyEnum.deserialize(data);\n\n// Discriminate using the $kind property\nif (parsed.$kind === 'Variant0') {\n\tparsed.Variant0; // type is number\n}\n\n// We can also directly the enum properties\nif (parsed.Variant0 !== undefined) {\n\tparsed.Variant0; // type is number\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Mysten TypeScript SDKs\nDESCRIPTION: Commands for initial setup of the Mysten TypeScript SDKs project. This installs all dependencies and builds all packages in the monorepo using turbo.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm turbo build\n```\n\n----------------------------------------\n\nTITLE: Running Individual Linting Tools for Mysten TypeScript SDKs\nDESCRIPTION: Commands for running prettier and eslint individually, with options for checking or fixing issues.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm prettier:check\npnpm prettier:fix\npnpm eslint:check\npnpm eslint:fix\n```\n\n----------------------------------------\n\nTITLE: Installing Sui dApp Kit Dependencies\nDESCRIPTION: Command to install the required npm packages including the Sui dApp Kit, Sui client, and React Query dependencies.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/dapp-kit/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save @mysten/dapp-kit @mysten/sui @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Mysten TypeScript SDKs\nDESCRIPTION: Commands for running unit tests for the Mysten TypeScript SDKs. Can be executed from the root or individual package directories.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n# or\npnpm turbo test\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Mysten TypeScript SDKs\nDESCRIPTION: Command for running end-to-end tests which require Docker and use testcontainers to create a test environment.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Kiosk SDK via NPM or Yarn\nDESCRIPTION: Command to install the Kiosk SDK package using npm or yarn. The npm2yarn directive allows the documentation to display the equivalent yarn command automatically.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/kiosk/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @mysten/kiosk\n```\n\n----------------------------------------\n\nTITLE: Building Mysten TypeScript SDKs\nDESCRIPTION: Commands for building the Mysten TypeScript SDKs. Can be run from the root or individual package directories.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n# or\npnpm turbo build\n```\n\n----------------------------------------\n\nTITLE: Linting Mysten TypeScript SDKs\nDESCRIPTION: Commands for running linting checks using eslint and prettier across the codebase.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Auto-fixing Lint Issues in Mysten TypeScript SDKs\nDESCRIPTION: Command for automatically fixing many common linting issues in the codebase.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint:fix\n```\n\n----------------------------------------\n\nTITLE: Installing Sui TypeScript SDK\nDESCRIPTION: Command to install the Sui TypeScript SDK package using npm or yarn package managers.\nSOURCE: https://github.com/mystenlabs/ts-sdks/blob/main/packages/docs/content/typescript/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @mysten/sui\n```"
  }
]