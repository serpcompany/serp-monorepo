[
  {
    "owner": "testing-library",
    "repo": "jest-dom",
    "content": "TITLE: Importing jest-dom in Jest setup file\nDESCRIPTION: Example of importing jest-dom in a Jest setup file and configuring Jest to use it.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In your own jest-setup.js (or any other name)\nimport '@testing-library/jest-dom'\n\n// In jest.config.js add (if you haven't already)\nsetupFilesAfterEnv: ['<rootDir>/jest-setup.js']\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for jest-dom\nDESCRIPTION: Example of configuring tsconfig.json for TypeScript support with jest-dom and Vitest.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"vitest/globals\", \"@testing-library/jest-dom\"]\n  },\n  \"include\": [\n    \"./vitest.setup.ts\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Element Classes with Jest\nDESCRIPTION: JavaScript code demonstrating the usage of toHaveClass matcher in Jest tests for various class scenarios.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst deleteButton = getByTestId('delete-button')\nconst noClasses = getByTestId('no-classes')\n\nexpect(deleteButton).toHaveClass('extra')\nexpect(deleteButton).toHaveClass('btn-danger btn')\nexpect(deleteButton).toHaveClass(/danger/, 'btn')\nexpect(deleteButton).toHaveClass('btn-danger', 'btn')\nexpect(deleteButton).not.toHaveClass('btn-link')\nexpect(deleteButton).not.toHaveClass(/link/)\nexpect(deleteButton).not.toHaveClass(/btn extra/) // It does not match\n\nexpect(deleteButton).toHaveClass('btn-danger extra btn', {exact: true}) // to check if the element has EXACTLY a set of classes\nexpect(deleteButton).not.toHaveClass('btn-danger extra', {exact: true}) // if it has more than expected it is going to fail\n\nexpect(noClasses).not.toHaveClass()\n```\n\n----------------------------------------\n\nTITLE: Using toBeInTheDocument matcher\nDESCRIPTION: Example of using the toBeInTheDocument matcher to check if elements are present in the document.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<span data-testid=\"html-element\"><span>Html Element</span></span>\n<svg data-testid=\"svg-element\"></svg>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(\n  getByTestId(document.documentElement, 'html-element'),\n).toBeInTheDocument()\nexpect(getByTestId(document.documentElement, 'svg-element')).toBeInTheDocument()\nexpect(\n  queryByTestId(document.documentElement, 'does-not-exist'),\n).not.toBeInTheDocument()\n```\n\n----------------------------------------\n\nTITLE: Using toBeDisabled matcher\nDESCRIPTION: Example of using the toBeDisabled matcher to check if elements are disabled.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button data-testid=\"button\" type=\"submit\" disabled>submit</button>\n<fieldset disabled><input type=\"text\" data-testid=\"input\" /></fieldset>\n<a href=\"...\" disabled>link</a>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('button')).toBeDisabled()\nexpect(getByTestId('input')).toBeDisabled()\nexpect(getByText('link')).not.toBeDisabled()\n```\n\n----------------------------------------\n\nTITLE: Using toBeVisible Matcher in Jest DOM\nDESCRIPTION: Checks if an element is visible to the user based on display, visibility, opacity and parent visibility.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\ntoBeVisible()\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-testid=\"zero-opacity\" style=\"opacity: 0\">Zero Opacity Example</div>\n<div data-testid=\"visibility-hidden\" style=\"visibility: hidden\">\n  Visibility Hidden Example\n</div>\n<div data-testid=\"display-none\" style=\"display: none\">Display None Example</div>\n<div style=\"opacity: 0\">\n  <span data-testid=\"hidden-parent\">Hidden Parent Example</span>\n</div>\n<div data-testid=\"visible\">Visible Example</div>\n<div data-testid=\"hidden-attribute\" hidden>Hidden Attribute Example</div>\n<details>\n  <summary>Title of hidden text</summary>\n  Hidden Details Example\n</details>\n<details open>\n  <summary>Title of visible text</summary>\n  <div>Visible Details Example</div>\n</details>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByText('Zero Opacity Example')).not.toBeVisible()\nexpect(getByText('Visibility Hidden Example')).not.toBeVisible()\nexpect(getByText('Display None Example')).not.toBeVisible()\nexpect(getByText('Hidden Parent Example')).not.toBeVisible()\nexpect(getByText('Visible Example')).toBeVisible()\nexpect(getByText('Hidden Attribute Example')).not.toBeVisible()\nexpect(getByText('Hidden Details Example')).not.toBeVisible()\nexpect(getByText('Visible Details Example')).toBeVisible()\n```\n\n----------------------------------------\n\nTITLE: Testing Element Attributes with Jest\nDESCRIPTION: JavaScript code demonstrating the usage of toHaveAttribute matcher in Jest tests for various attribute scenarios.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = getByTestId('ok-button')\n\nexpect(button).toHaveAttribute('disabled')\nexpect(button).toHaveAttribute('type', 'submit')\nexpect(button).not.toHaveAttribute('type', 'button')\n\nexpect(button).toHaveAttribute('type', expect.stringContaining('sub'))\nexpect(button).toHaveAttribute('type', expect.not.stringContaining('but'))\n```\n\n----------------------------------------\n\nTITLE: Testing Element Styling with toHaveStyle Matcher\nDESCRIPTION: Examples of using the toHaveStyle matcher to check CSS properties on DOM elements. Shows different syntax options including string and object notation for style assertions.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst button = getByTestId('delete-button')\n\nexpect(button).toHaveStyle('display: none')\nexpect(button).toHaveStyle({display: 'none'})\nexpect(button).toHaveStyle(`\n  background-color: red;\n  display: none;\n`)\nexpect(button).toHaveStyle({\n  backgroundColor: 'red',\n  display: 'none',\n})\nexpect(button).not.toHaveStyle(`\n  background-color: blue;\n  display: none;\n`)\nexpect(button).not.toHaveStyle({\n  backgroundColor: 'blue',\n  display: 'none',\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Accessible Error Messages with Jest\nDESCRIPTION: JavaScript code demonstrating the usage of toHaveAccessibleErrorMessage matcher in Jest tests for various input scenarios.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// Inputs with Valid Error Messages\nexpect(getByRole('textbox', {name: 'Has Error'})).toHaveAccessibleErrorMessage()\nexpect(getByRole('textbox', {name: 'Has Error'})).toHaveAccessibleErrorMessage(\n  'This field is invalid',\n)\nexpect(getByRole('textbox', {name: 'Has Error'})).toHaveAccessibleErrorMessage(\n  /invalid/i,\n)\nexpect(\n  getByRole('textbox', {name: 'Has Error'}),\n).not.toHaveAccessibleErrorMessage('This field is absolutely correct!')\n\n// Inputs without Valid Error Messages\nexpect(\n  getByRole('textbox', {name: 'No Error Attributes'}),\n).not.toHaveAccessibleErrorMessage()\n\nexpect(\n  getByRole('textbox', {name: 'Not Invalid'}),\n).not.toHaveAccessibleErrorMessage()\n```\n\n----------------------------------------\n\nTITLE: Testing Text Content with toHaveTextContent Matcher\nDESCRIPTION: Examples of using the toHaveTextContent matcher to verify element content using string matching, regular expressions for case-insensitive matching, and exact content matching.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst element = getByTestId('text-content')\n\nexpect(element).toHaveTextContent('Content')\nexpect(element).toHaveTextContent(/^Text Content$/) // to match the whole content\nexpect(element).toHaveTextContent(/content$/i) // to use case-insensitive match\nexpect(element).not.toHaveTextContent('content')\n```\n\n----------------------------------------\n\nTITLE: Using toBeEmpty Matcher in JavaScript\nDESCRIPTION: Demonstrates how to use the toBeEmpty matcher in Jest tests to assert whether elements are empty or not.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('empty')).toBeEmpty()\nexpect(getByTestId('not-empty')).not.toBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Testing Partially Checked States with toBePartiallyChecked Matcher\nDESCRIPTION: Examples of using the toBePartiallyChecked matcher to verify indeterminate or mixed states of checkboxes, including both ARIA-based and JavaScript indeterminate property examples.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nconst ariaCheckboxMixed = getByTestId('aria-checkbox-mixed')\nconst inputCheckboxChecked = getByTestId('input-checkbox-checked')\nconst inputCheckboxUnchecked = getByTestId('input-checkbox-unchecked')\nconst ariaCheckboxChecked = getByTestId('aria-checkbox-checked')\nconst ariaCheckboxUnchecked = getByTestId('aria-checkbox-unchecked')\nconst inputCheckboxIndeterminate = getByTestId('input-checkbox-indeterminate')\n\nexpect(ariaCheckboxMixed).toBePartiallyChecked()\nexpect(inputCheckboxChecked).not.toBePartiallyChecked()\nexpect(inputCheckboxUnchecked).not.toBePartiallyChecked()\nexpect(ariaCheckboxChecked).not.toBePartiallyChecked()\nexpect(ariaCheckboxUnchecked).not.toBePartiallyChecked()\n\ninputCheckboxIndeterminate.indeterminate = true\nexpect(inputCheckboxIndeterminate).toBePartiallyChecked()\n```\n\n----------------------------------------\n\nTITLE: Testing Form Element Values with toHaveValue Matcher\nDESCRIPTION: Examples of using the toHaveValue matcher to verify values of different form elements including text inputs, number inputs, and multi-select dropdowns.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst textInput = getByTestId('input-text')\nconst numberInput = getByTestId('input-number')\nconst emptyInput = getByTestId('input-empty')\nconst selectInput = getByTestId('select-number')\n\nexpect(textInput).toHaveValue('text')\nexpect(numberInput).toHaveValue(5)\nexpect(emptyInput).not.toHaveValue()\nexpect(selectInput).toHaveValue(['second', 'third'])\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveAttribute Matcher in TypeScript\nDESCRIPTION: TypeScript definition for the toHaveAttribute custom matcher, used to assert that an element has a specific attribute with an optional value.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveAttribute(attr: string, value?: any)\n```\n\n----------------------------------------\n\nTITLE: Testing Accessible Names with Jest\nDESCRIPTION: JavaScript code demonstrating the usage of toHaveAccessibleName matcher in Jest tests for various element scenarios.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('img-alt')).toHaveAccessibleName('Test alt')\nexpect(getByTestId('img-empty-alt')).not.toHaveAccessibleName()\nexpect(getByTestId('svg-title')).toHaveAccessibleName('Test title')\nexpect(getByTestId('button-img-alt')).toHaveAccessibleName()\nexpect(getByTestId('img-paragraph')).not.toHaveAccessibleName()\nexpect(getByTestId('svg-button')).toHaveAccessibleName()\nexpect(getByTestId('svg-without-title')).not.toHaveAccessibleName()\nexpect(getByTestId('input-title')).toHaveAccessibleName()\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveFocus Matcher in TypeScript\nDESCRIPTION: TypeScript definition for the toHaveFocus custom matcher, used to assert that an element has focus.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveFocus()\n```\n\n----------------------------------------\n\nTITLE: Testing Checked States with toBeChecked Matcher\nDESCRIPTION: Examples of using the toBeChecked matcher to verify checked states of checkboxes, radio buttons, and elements with ARIA roles that support checked states.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nconst inputCheckboxChecked = getByTestId('input-checkbox-checked')\nconst inputCheckboxUnchecked = getByTestId('input-checkbox-unchecked')\nconst ariaCheckboxChecked = getByTestId('aria-checkbox-checked')\nconst ariaCheckboxUnchecked = getByTestId('aria-checkbox-unchecked')\nexpect(inputCheckboxChecked).toBeChecked()\nexpect(inputCheckboxUnchecked).not.toBeChecked()\nexpect(ariaCheckboxChecked).toBeChecked()\nexpect(ariaCheckboxUnchecked).not.toBeChecked()\n\nconst inputRadioChecked = getByTestId('input-radio-checked')\nconst inputRadioUnchecked = getByTestId('input-radio-unchecked')\nconst ariaRadioChecked = getByTestId('aria-radio-checked')\nconst ariaRadioUnchecked = getByTestId('aria-radio-unchecked')\nexpect(inputRadioChecked).toBeChecked()\nexpect(inputRadioUnchecked).not.toBeChecked()\nexpect(ariaRadioChecked).toBeChecked()\nexpect(ariaRadioUnchecked).not.toBeChecked()\n\nconst ariaSwitchChecked = getByTestId('aria-switch-checked')\nconst ariaSwitchUnchecked = getByTestId('aria-switch-unchecked')\nexpect(ariaSwitchChecked).toBeChecked()\nexpect(ariaSwitchUnchecked).not.toBeChecked()\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveStyle Matcher in TypeScript\nDESCRIPTION: TypeScript definition for the toHaveStyle custom matcher, used to assert that an element has specific CSS properties with specific values.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveStyle(css: string | object)\n```\n\n----------------------------------------\n\nTITLE: Testing Form Values with Jest\nDESCRIPTION: JavaScript code demonstrating the usage of toHaveFormValues matcher in Jest tests for checking form control values.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('login-form')).toHaveFormValues({\n  username: 'jane.doe',\n  rememberMe: true,\n})\n```\n\n----------------------------------------\n\nTITLE: toHaveTextContent Matcher TypeScript Definition\nDESCRIPTION: TypeScript definition for the toHaveTextContent matcher, showing the function signature with its parameters and options for normalizing whitespace.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveTextContent(text: string | RegExp, options?: {normalizeWhitespace: boolean})\n```\n\n----------------------------------------\n\nTITLE: Testing Form Display Values with toHaveDisplayValue Matcher\nDESCRIPTION: Examples of using the toHaveDisplayValue matcher to verify displayed values of different form elements including text inputs, textareas, and select dropdowns with both string and regex matching.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = screen.getByLabelText('First name')\nconst textarea = screen.getByLabelText('Description')\nconst selectSingle = screen.getByLabelText('Fruit')\nconst selectMultiple = screen.getByLabelText('Fruits')\n\nexpect(input).toHaveDisplayValue('Luca')\nexpect(input).toHaveDisplayValue(/Luc/)\nexpect(textarea).toHaveDisplayValue('An example description here.')\nexpect(textarea).toHaveDisplayValue(/example/)\nexpect(selectSingle).toHaveDisplayValue('Select a fruit...')\nexpect(selectSingle).toHaveDisplayValue(/Select/)\nexpect(selectMultiple).toHaveDisplayValue([/Avocado/, 'Banana'])\n```\n\n----------------------------------------\n\nTITLE: toHaveValue Matcher TypeScript Definition\nDESCRIPTION: TypeScript definition for the toHaveValue matcher, showing the function signature that accepts string, string array, or number values for validating form element values.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveValue(value: string | string[] | number)\n```\n\n----------------------------------------\n\nTITLE: Testing Element Focus with Jest\nDESCRIPTION: JavaScript code demonstrating the usage of toHaveFocus matcher in Jest tests for focus and blur scenarios.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = getByTestId('element-to-focus')\n\ninput.focus()\nexpect(input).toHaveFocus()\n\ninput.blur()\nexpect(input).not.toHaveFocus()\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveAccessibleErrorMessage Matcher in TypeScript\nDESCRIPTION: TypeScript definition for the toHaveAccessibleErrorMessage custom matcher, used to assert that an element has the expected accessible error message.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveAccessibleErrorMessage(expectedAccessibleErrorMessage?: string | RegExp)\n```\n\n----------------------------------------\n\nTITLE: Using toHaveRole Matcher in JavaScript\nDESCRIPTION: Demonstrates how to use the toHaveRole matcher in Jest tests to assert the roles of various elements.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('button')).toHaveRole('button')\nexpect(getByTestId('button-explicit')).toHaveRole('button')\nexpect(getByTestId('button-explicit-multiple')).toHaveRole('button')\nexpect(getByTestId('button-explicit-multiple')).toHaveRole('switch')\nexpect(getByTestId('link')).toHaveRole('link')\nexpect(getByTestId('link-invalid')).not.toHaveRole('link')\nexpect(getByTestId('link-invalid')).toHaveRole('generic')\n```\n\n----------------------------------------\n\nTITLE: Using toHaveErrorMessage Matcher in JavaScript\nDESCRIPTION: Demonstrates how to use the toHaveErrorMessage matcher in Jest tests to assert the presence and content of error messages.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeInput = getByLabel('startTime')\n\nexpect(timeInput).toHaveErrorMessage(\n  'Invalid time: the time must be between 9:00 AM and 5:00 PM',\n)\nexpect(timeInput).toHaveErrorMessage(/invalid time/i) // to partially match\nexpect(timeInput).toHaveErrorMessage(expect.stringContaining('Invalid time')) // to partially match\nexpect(timeInput).not.toHaveErrorMessage('Pikachu!')\n```\n\n----------------------------------------\n\nTITLE: Using toContainElement Matcher in Jest DOM\nDESCRIPTION: Asserts whether an element contains another element as a descendant.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntoContainElement(element: HTMLElement | SVGElement | null)\n```\n\nLANGUAGE: html\nCODE:\n```\n<span data-testid=\"ancestor\"><span data-testid=\"descendant\"></span></span>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst ancestor = getByTestId('ancestor')\nconst descendant = getByTestId('descendant')\nconst nonExistantElement = getByTestId('does-not-exist')\n\nexpect(ancestor).toContainElement(descendant)\nexpect(descendant).not.toContainElement(ancestor)\nexpect(ancestor).not.toContainElement(nonExistantElement)\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Empty Element Testing\nDESCRIPTION: Provides an HTML example of empty and non-empty elements for testing the toBeEmpty matcher.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_60\n\nLANGUAGE: html\nCODE:\n```\n<span data-testid=\"not-empty\"><span data-testid=\"empty\"></span></span>\n```\n\n----------------------------------------\n\nTITLE: Using toContainHTML Matcher in Jest DOM\nDESCRIPTION: Tests if an HTML string is contained within an element. Requires complete and valid HTML strings.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ntoContainHTML(htmlText: string)\n```\n\nLANGUAGE: html\nCODE:\n```\n<span data-testid=\"parent\"><span data-testid=\"child\"></span></span>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// These are valid uses\nexpect(getByTestId('parent')).toContainHTML('<span data-testid=\"child\"></span>')\nexpect(getByTestId('parent')).toContainHTML('<span data-testid=\"child\" />')\nexpect(getByTestId('parent')).not.toContainHTML('<br />')\n\n// These won't work\nexpect(getByTestId('parent')).toContainHTML('data-testid=\"child\"')\nexpect(getByTestId('parent')).toContainHTML('data-testid')\nexpect(getByTestId('parent')).toContainHTML('</span>')\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Accessible Error Message Testing\nDESCRIPTION: HTML markup demonstrating the structure for testing accessible error messages, including inputs with various aria attributes.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<input\n  aria-label=\"Has Error\"\n  aria-invalid=\"true\"\n  aria-errormessage=\"error-message\"\n/>\n<div id=\"error-message\" role=\"alert\">This field is invalid</div>\n\n<input aria-label=\"No Error Attributes\" />\n<input\n  aria-label=\"Not Invalid\"\n  aria-invalid=\"false\"\n  aria-errormessage=\"error-message\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using toBeInvalid Matcher in Jest DOM\nDESCRIPTION: Tests if an element is invalid based on aria-invalid attribute or checkValidity() result. Useful for form validation testing.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntoBeInvalid()\n```\n\nLANGUAGE: html\nCODE:\n```\n<input data-testid=\"no-aria-invalid\" />\n<input data-testid=\"aria-invalid\" aria-invalid />\n<input data-testid=\"aria-invalid-value\" aria-invalid=\"true\" />\n<input data-testid=\"aria-invalid-false\" aria-invalid=\"false\" />\n\n<form data-testid=\"valid-form\">\n  <input />\n</form>\n\n<form data-testid=\"invalid-form\">\n  <input required />\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('no-aria-invalid')).not.toBeInvalid()\nexpect(getByTestId('aria-invalid')).toBeInvalid()\nexpect(getByTestId('aria-invalid-value')).toBeInvalid()\nexpect(getByTestId('aria-invalid-false')).not.toBeInvalid()\n\nexpect(getByTestId('valid-form')).not.toBeInvalid()\nexpect(getByTestId('invalid-form')).toBeInvalid()\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Role Testing\nDESCRIPTION: Provides HTML examples of elements with various roles for testing the toHaveRole matcher.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_54\n\nLANGUAGE: html\nCODE:\n```\n<button data-testid=\"button\">Continue</button>\n<div role=\"button\" data-testid=\"button-explicit\">Continue</button>\n<button role=\"switch button\" data-testid=\"button-explicit-multiple\">Continue</button>\n<a href=\"/about\" data-testid=\"link\">About</a>\n<a data-testid=\"link-invalid\">Invalid link<a/>\n```\n\n----------------------------------------\n\nTITLE: Using toBeValid Matcher in Jest DOM\nDESCRIPTION: Tests if an element is valid based on absence of aria-invalid attribute or checkValidity() result being true.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntoBeValid()\n```\n\nLANGUAGE: html\nCODE:\n```\n<input data-testid=\"no-aria-invalid\" />\n<input data-testid=\"aria-invalid\" aria-invalid />\n<input data-testid=\"aria-invalid-value\" aria-invalid=\"true\" />\n<input data-testid=\"aria-invalid-false\" aria-invalid=\"false\" />\n\n<form data-testid=\"valid-form\">\n  <input />\n</form>\n\n<form data-testid=\"invalid-form\">\n  <input required />\n</form>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('no-aria-invalid')).toBeValid()\nexpect(getByTestId('aria-invalid')).not.toBeValid()\nexpect(getByTestId('aria-invalid-value')).not.toBeValid()\nexpect(getByTestId('aria-invalid-false')).toBeValid()\n\nexpect(getByTestId('valid-form')).toBeValid()\nexpect(getByTestId('invalid-form')).not.toBeValid()\n```\n\n----------------------------------------\n\nTITLE: HTML Element for Text Content Testing\nDESCRIPTION: HTML markup defining a span element with a test ID that will be used in the toHaveTextContent matcher examples.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_39\n\nLANGUAGE: html\nCODE:\n```\n<span data-testid=\"text-content\">Text Content</span>\n```\n\n----------------------------------------\n\nTITLE: Using toBeRequired Matcher in Jest DOM\nDESCRIPTION: Checks if a form element has the required attribute or aria-required=\"true\". Validates form field requirements.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntoBeRequired()\n```\n\nLANGUAGE: html\nCODE:\n```\n<input data-testid=\"required-input\" required />\n<input data-testid=\"aria-required-input\" aria-required=\"true\" />\n<input data-testid=\"conflicted-input\" required aria-required=\"false\" />\n<input data-testid=\"aria-not-required-input\" aria-required=\"false\" />\n<input data-testid=\"optional-input\" />\n<input data-testid=\"unsupported-type\" type=\"image\" required />\n<select data-testid=\"select\" required></select>\n<textarea data-testid=\"textarea\" required></textarea>\n<div data-testid=\"supported-role\" role=\"tree\" required></div>\n<div data-testid=\"supported-role-aria\" role=\"tree\" aria-required=\"true\"></div>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('required-input')).toBeRequired()\nexpect(getByTestId('aria-required-input')).toBeRequired()\nexpect(getByTestId('conflicted-input')).toBeRequired()\nexpect(getByTestId('aria-not-required-input')).not.toBeRequired()\nexpect(getByTestId('optional-input')).not.toBeRequired()\nexpect(getByTestId('unsupported-type')).not.toBeRequired()\nexpect(getByTestId('select')).toBeRequired()\nexpect(getByTestId('textarea')).toBeRequired()\nexpect(getByTestId('supported-role')).not.toBeRequired()\nexpect(getByTestId('supported-role-aria')).toBeRequired()\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Error Message Testing\nDESCRIPTION: Provides an HTML example of an input field with an associated error message for testing the toHaveErrorMessage matcher.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_57\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"startTime\"> Please enter a start time for the meeting: </label>\n<input\n  id=\"startTime\"\n  type=\"text\"\n  aria-errormessage=\"msgID\"\n  aria-invalid=\"true\"\n  value=\"11:30 PM\"\n/>\n<span id=\"msgID\" aria-live=\"assertive\" style=\"visibility:visible\">\n  Invalid time: the time must be between 9:00 AM and 5:00 PM\n</span>\n```\n\n----------------------------------------\n\nTITLE: Using toHaveDescription Matcher in JavaScript\nDESCRIPTION: Demonstrates how to use the toHaveDescription matcher in Jest tests to assert the presence and content of accessible descriptions.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nconst closeButton = getByRole('button', {name: 'Close'})\n\nexpect(closeButton).toHaveDescription('Closing will discard any changes')\nexpect(closeButton).toHaveDescription(/will discard/) // to partially match\nexpect(closeButton).toHaveDescription(expect.stringContaining('will discard')) // to partially match\nexpect(closeButton).toHaveDescription(/^closing/i) // to use case-insensitive match\nexpect(closeButton).not.toHaveDescription('Other description')\n\nconst deleteButton = getByRole('button', {name: 'Delete'})\nexpect(deleteButton).not.toHaveDescription()\nexpect(deleteButton).toHaveDescription('') // Missing or empty description always becomes a blank string\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Selection Testing\nDESCRIPTION: Provides HTML examples of elements with text content for testing the toHaveSelection matcher.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_68\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  <input type=\"text\" value=\"text selected text\" data-testid=\"text\" />\n  <textarea data-testid=\"textarea\">text selected text</textarea>\n  <p data-testid=\"prev\">prev</p>\n  <p data-testid=\"parent\">\n    text <span data-testid=\"child\">selected</span> text\n  </p>\n  <p data-testid=\"next\">next</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using toHaveSelection Matcher in JavaScript\nDESCRIPTION: Demonstrates how to use the toHaveSelection matcher in Jest tests to assert text selections within various elements.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\ngetByTestId('text').setSelectionRange(5, 13)\nexpect(getByTestId('text')).toHaveSelection('selected')\n\ngetByTestId('textarea').setSelectionRange(0, 5)\nexpect('textarea').toHaveSelection('text ')\n\nconst selection = document.getSelection()\nconst range = document.createRange()\nselection.removeAllRanges()\nselection.empty()\nselection.addRange(range)\n\n// selection of child applies to the parent as well\nrange.selectNodeContents(getByTestId('child'))\nexpect(getByTestId('child')).toHaveSelection('selected')\nexpect(getByTestId('parent')).toHaveSelection('selected')\n\n// selection that applies from prev all, parent text before child, and part child.\nrange.setStart(getByTestId('prev'), 0)\nrange.setEnd(getByTestId('child').childNodes[0], 3)\nexpect(queryByTestId('prev')).toHaveSelection('prev')\nexpect(queryByTestId('child')).toHaveSelection('sel')\nexpect(queryByTestId('parent')).toHaveSelection('text sel')\nexpect(queryByTestId('next')).not.toHaveSelection()\n\n// selection that applies from part child, parent text after child and part next.\nrange.setStart(getByTestId('child').childNodes[0], 3)\nrange.setEnd(getByTestId('next').childNodes[0], 2)\nexpect(queryByTestId('child')).toHaveSelection('ected')\nexpect(queryByTestId('parent')).toHaveSelection('ected text')\nexpect(queryByTestId('prev')).not.toHaveSelection()\nexpect(queryByTestId('next')).toHaveSelection('ne')\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveErrorMessage Matcher in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the deprecated toHaveErrorMessage custom matcher, which checks for ARIA error messages.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveErrorMessage(text: string | RegExp)\n```\n\n----------------------------------------\n\nTITLE: Using toHaveAccessibleDescription Matcher in Jest DOM\nDESCRIPTION: Checks if an element has the expected accessible description through aria-describedby or aria-description attributes.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveAccessibleDescription(expectedAccessibleDescription?: string | RegExp)\n```\n\nLANGUAGE: html\nCODE:\n```\n<a\n  data-testid=\"link\"\n  href=\"/\"\n  aria-label=\"Home page\"\n  title=\"A link to start over\"\n  >Start</a\n>\n<a data-testid=\"extra-link\" href=\"/about\" aria-label=\"About page\">About</a>\n<img src=\"avatar.jpg\" data-testid=\"avatar\" alt=\"User profile pic\" />\n<img\n  src=\"logo.jpg\"\n  data-testid=\"logo\"\n  alt=\"Company logo\"\n  aria-describedby=\"t1\"\n/>\n<span id=\"t1\" role=\"presentation\">The logo of Our Company</span>\n<img\n  src=\"logo.jpg\"\n  data-testid=\"logo2\"\n  alt=\"Company logo\"\n  aria-description=\"The logo of Our Company\"\n/>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('link')).toHaveAccessibleDescription()\nexpect(getByTestId('link')).toHaveAccessibleDescription('A link to start over')\nexpect(getByTestId('link')).not.toHaveAccessibleDescription('Home page')\nexpect(getByTestId('extra-link')).not.toHaveAccessibleDescription()\nexpect(getByTestId('avatar')).not.toHaveAccessibleDescription()\nexpect(getByTestId('logo')).not.toHaveAccessibleDescription('Company logo')\nexpect(getByTestId('logo')).toHaveAccessibleDescription(\n  'The logo of Our Company',\n)\nexpect(getByTestId('logo2')).toHaveAccessibleDescription(\n  'The logo of Our Company',\n)\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveDescription Matcher in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the deprecated toHaveDescription custom matcher, which checks for accessible descriptions.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveDescription(text: string | RegExp)\n```\n\n----------------------------------------\n\nTITLE: Using toBeEmptyDOMElement matcher\nDESCRIPTION: Example of using the toBeEmptyDOMElement matcher to check if elements are empty.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<span data-testid=\"not-empty\"><span data-testid=\"empty\"></span></span>\n<span data-testid=\"with-whitespace\"> </span>\n<span data-testid=\"with-comment\"><!-- comment --></span>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(getByTestId('empty')).toBeEmptyDOMElement()\nexpect(getByTestId('not-empty')).not.toBeEmptyDOMElement()\nexpect(getByTestId('with-whitespace')).not.toBeEmptyDOMElement()\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Jest Matchers for DOM Element Checking\nDESCRIPTION: Demonstrates alternative ways to check if a value is an HTMLElement using Jest's built-in matchers.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nexpect(document.querySelector('.ok-button')).toBeInstanceOf(HTMLElement)\nexpect(document.querySelector('.cancel-button')).toBeTruthy()\n```\n\n----------------------------------------\n\nTITLE: Importing jest-dom with Vitest\nDESCRIPTION: Example of importing jest-dom when using Vitest and configuring Vitest to use it.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// In your own vitest-setup.js (or any other name)\nimport '@testing-library/jest-dom/vitest'\n\n// In vitest.config.js add (if you haven't already)\nsetupFiles: ['./vitest-setup.js']\n```\n\n----------------------------------------\n\nTITLE: Importing jest-dom with @jest/globals\nDESCRIPTION: Example of importing jest-dom when using @jest/globals with injectGlobals: false.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// In your own jest-setup.js (or any other name)\nimport '@testing-library/jest-dom/jest-globals'\n```\n\n----------------------------------------\n\nTITLE: Using jest-dom with another Jest-compatible expect\nDESCRIPTION: Example of using jest-dom matchers with a different test runner compatible with Jest's expect interface.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as matchers from '@testing-library/jest-dom/matchers'\nimport {expect} from 'my-test-runner/expect'\n\nexpect.extend(matchers)\n```\n\n----------------------------------------\n\nTITLE: Installing jest-dom with yarn\nDESCRIPTION: Command to install jest-dom as a dev dependency using yarn.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @testing-library/jest-dom\n```\n\n----------------------------------------\n\nTITLE: Installing jest-dom with npm\nDESCRIPTION: Command to install jest-dom as a dev dependency using npm.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @testing-library/jest-dom\n```\n\n----------------------------------------\n\nTITLE: toBeChecked Matcher TypeScript Definition\nDESCRIPTION: TypeScript definition for the toBeChecked matcher, showing the function signature used for verifying checkbox and radio button selection states.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\ntoBeChecked()\n```\n\n----------------------------------------\n\nTITLE: toHaveDisplayValue Matcher TypeScript Definition\nDESCRIPTION: TypeScript definition for the toHaveDisplayValue matcher, showing the function signature that accepts strings, regular expressions, or arrays for validating displayed form values.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveDisplayValue(value: string | RegExp | (string|RegExp)[])\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveFormValues Matcher in TypeScript\nDESCRIPTION: TypeScript definition for the toHaveFormValues custom matcher, used to assert that a form or fieldset contains specific form control values.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveFormValues(expectedValues: {\n  [name: string]: any\n})\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveAccessibleName Matcher in TypeScript\nDESCRIPTION: TypeScript definition for the toHaveAccessibleName custom matcher, used to assert that an element has the expected accessible name.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveAccessibleName(expectedAccessibleName?: string | RegExp)\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveClass Matcher in TypeScript\nDESCRIPTION: TypeScript definition for the toHaveClass custom matcher, used to assert that an element has specific CSS classes.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveClass(...classNames: string[], options?: {exact: boolean})\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveRole Matcher in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the toHaveRole custom matcher, which asserts that an element has the expected ARIA role.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveRole(expectedRole: string)\n```\n\n----------------------------------------\n\nTITLE: toBePartiallyChecked Matcher TypeScript Definition\nDESCRIPTION: TypeScript definition for the toBePartiallyChecked matcher, showing the function signature used for verifying indeterminate checkbox states.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\ntoBePartiallyChecked()\n```\n\n----------------------------------------\n\nTITLE: Defining toHaveSelection Matcher in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the toHaveSelection custom matcher, which checks for text selection within an element.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\ntoHaveSelection(expectedSelection?: string)\n```\n\n----------------------------------------\n\nTITLE: Formatting Instructions for User List in Markdown\nDESCRIPTION: Provides an example of how to format user entries in the list using Markdown syntax. It demonstrates the use of bullet points and links for company names and their applications.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/other/USERS.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Company/Project/Person](https://example.com) uses it in [some app](https://example.com)\n```\n\n----------------------------------------\n\nTITLE: HTML Form Elements for Display Value Testing\nDESCRIPTION: HTML markup defining various form elements with labels including text inputs, textareas, and select dropdowns that will be used in the toHaveDisplayValue matcher examples.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_45\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"input-example\">First name</label>\n<input type=\"text\" id=\"input-example\" value=\"Luca\" />\n\n<label for=\"textarea-example\">Description</label>\n<textarea id=\"textarea-example\">An example description here.</textarea>\n\n<label for=\"single-select-example\">Fruit</label>\n<select id=\"single-select-example\">\n  <option value=\"\">Select a fruit...</option>\n  <option value=\"banana\">Banana</option>\n  <option value=\"ananas\">Ananas</option>\n  <option value=\"avocado\">Avocado</option>\n</select>\n\n<label for=\"multiple-select-example\">Fruits</label>\n<select id=\"multiple-select-example\" multiple>\n  <option value=\"\">Select a fruit...</option>\n  <option value=\"banana\" selected>Banana</option>\n  <option value=\"ananas\">Ananas</option>\n  <option value=\"avocado\" selected>Avocado</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: HTML Form Elements for Value Testing\nDESCRIPTION: HTML markup defining various form elements including text inputs, number inputs, and multiple-select dropdowns that will be used in the toHaveValue matcher examples.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_42\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" value=\"text\" data-testid=\"input-text\" />\n<input type=\"number\" value=\"5\" data-testid=\"input-number\" />\n<input type=\"text\" data-testid=\"input-empty\" />\n<select multiple data-testid=\"select-number\">\n  <option value=\"first\">First Value</option>\n  <option value=\"second\" selected>Second Value</option>\n  <option value=\"third\" selected>Third Value</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Form Values Testing\nDESCRIPTION: HTML markup for a login form used in testing form values.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<form data-testid=\"login-form\">\n  <input type=\"text\" name=\"username\" value=\"jane.doe\" />\n  <input type=\"password\" name=\"password\" value=\"12345678\" />\n  <input type=\"checkbox\" name=\"rememberMe\" checked />\n  <button type=\"submit\">Sign in</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: HTML Elements for Checked State Testing\nDESCRIPTION: HTML markup defining various checkbox, radio, and ARIA role elements in different checked states that will be used in the toBeChecked matcher examples.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_48\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" checked data-testid=\"input-checkbox-checked\" />\n<input type=\"checkbox\" data-testid=\"input-checkbox-unchecked\" />\n<div role=\"checkbox\" aria-checked=\"true\" data-testid=\"aria-checkbox-checked\" />\n<div\n  role=\"checkbox\"\n  aria-checked=\"false\"\n  data-testid=\"aria-checkbox-unchecked\"\n/>\n\n<input type=\"radio\" checked value=\"foo\" data-testid=\"input-radio-checked\" />\n<input type=\"radio\" value=\"foo\" data-testid=\"input-radio-unchecked\" />\n<div role=\"radio\" aria-checked=\"true\" data-testid=\"aria-radio-checked\" />\n<div role=\"radio\" aria-checked=\"false\" data-testid=\"aria-radio-unchecked\" />\n<div role=\"switch\" aria-checked=\"true\" data-testid=\"aria-switch-checked\" />\n<div role=\"switch\" aria-checked=\"false\" data-testid=\"aria-switch-unchecked\" />\n```\n\n----------------------------------------\n\nTITLE: HTML Elements for Partially Checked State Testing\nDESCRIPTION: HTML markup defining various checkbox elements including those with mixed/indeterminate states that will be used in the toBePartiallyChecked matcher examples.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_51\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"checkbox\" aria-checked=\"mixed\" data-testid=\"aria-checkbox-mixed\" />\n<input type=\"checkbox\" checked data-testid=\"input-checkbox-checked\" />\n<input type=\"checkbox\" data-testid=\"input-checkbox-unchecked\" />\n<div role=\"checkbox\" aria-checked=\"true\" data-testid=\"aria-checkbox-checked\" />\n<div\n  role=\"checkbox\"\n  aria-checked=\"false\"\n  data-testid=\"aria-checkbox-unchecked\"\n/>\n<input type=\"checkbox\" data-testid=\"input-checkbox-indeterminate\" />\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Accessible Name Testing\nDESCRIPTION: HTML markup demonstrating various elements with accessible names for testing purposes.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<img data-testid=\"img-alt\" src=\"\" alt=\"Test alt\" />\n<img data-testid=\"img-empty-alt\" src=\"\" alt=\"\" />\n<svg data-testid=\"svg-title\"><title>Test title</title></svg>\n<button data-testid=\"button-img-alt\"><img src=\"\" alt=\"Test\" /></button>\n<p><img data-testid=\"img-paragraph\" src=\"\" alt=\"\" /> Test content</p>\n<button data-testid=\"svg-button\"><svg><title>Test</title></svg></p>\n<div><svg data-testid=\"svg-without-title\"></svg></div>\n<input data-testid=\"input-title\" title=\"test\" />\n```\n\n----------------------------------------\n\nTITLE: HTML Button for Attribute Testing\nDESCRIPTION: HTML markup for a button element with various attributes for testing purposes.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<button data-testid=\"ok-button\" type=\"submit\" disabled>ok</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Description Testing\nDESCRIPTION: Provides HTML examples of elements with descriptions for testing the toHaveDescription matcher.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_65\n\nLANGUAGE: html\nCODE:\n```\n<button aria-label=\"Close\" aria-describedby=\"description-close\">X</button>\n<div id=\"description-close\">Closing will discard any changes</div>\n\n<button>Delete</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Input for Focus Testing\nDESCRIPTION: HTML markup for an input element used in focus testing.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_30\n\nLANGUAGE: html\nCODE:\n```\n<div><input type=\"text\" data-testid=\"element-to-focus\" /></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Buttons for Class Testing\nDESCRIPTION: HTML markup for button elements with various CSS classes for testing purposes.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_27\n\nLANGUAGE: html\nCODE:\n```\n<button data-testid=\"delete-button\" class=\"btn extra btn-danger\">\n  Delete item\n</button>\n<button data-testid=\"no-classes\">No Classes</button>\n```\n\n----------------------------------------\n\nTITLE: HTML Button Structure for Style Testing\nDESCRIPTION: HTML markup for a delete button with specific styling that will be used in the toHaveStyle matcher examples.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_36\n\nLANGUAGE: html\nCODE:\n```\n<button\n  data-testid=\"delete-button\"\n  style=\"display: none; background-color: red\"\n>\n  Delete item\n</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Remote for jest-dom Repository in Git\nDESCRIPTION: Commands to add the original jest-dom repository as an upstream remote, fetch its information, and configure the local main branch to track the upstream main branch for easier synchronization.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/testing-library/jest-dom.git\ngit fetch upstream\ngit branch --set-upstream-to=upstream/main main\n```\n\n----------------------------------------\n\nTITLE: Defining toBeInTheDOM Matcher in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the deprecated toBeInTheDOM custom matcher, which checks if a value is a DOM element.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\ntoBeInTheDOM()\n```\n\n----------------------------------------\n\nTITLE: Defining toBeEmpty Matcher in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the deprecated toBeEmpty custom matcher, which checks if an element has content.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/README.md#2025-04-21_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\ntoBeEmpty()\n```\n\n----------------------------------------\n\nTITLE: Committing Minor Version Release in Git\nDESCRIPTION: This snippet provides a template for the commit message when manually releasing a minor version. It includes instructions for referencing related issues or pull requests.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/other/manual-releases.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfeat(release): manually release a minor version\n\nThere was an issue with a minor release, so this manual-releases.md\nchange is to release a new minor version.\n\nReference: #<the number of a relevant pull request, issue, or commit>\n```\n\n----------------------------------------\n\nTITLE: Committing Patch Version Release in Git\nDESCRIPTION: This snippet provides a template for the commit message when manually releasing a patch version. It includes instructions for referencing related issues or commits.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/other/manual-releases.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfix(release): manually release a patch version\n\nThere was an issue with a patch release, so this manual-releases.md\nchange is to release a new patch version.\n\nReference: #<the number of a relevant pull request, issue, or commit>\n```\n\n----------------------------------------\n\nTITLE: Committing Major Version Release in Git\nDESCRIPTION: This snippet provides a template for the commit message when manually releasing a major version. It includes instructions for referencing related issues and specifying breaking changes.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/other/manual-releases.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfix(release): manually release a major version\n\nThere was an issue with a major release, so this manual-releases.md\nchange is to release a new major version.\n\nReference: #<the number of a relevant pull request, issue, or commit>\n\nBREAKING CHANGE: <mention any relevant breaking changes (this is what triggers the major version change so don't skip this!)>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Changelog Configuration\nDESCRIPTION: Markdown content explaining that the changelog is automatically generated using semantic-release tool, with a link to view releases on GitHub repository.\nSOURCE: https://github.com/testing-library/jest-dom/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\nThe changelog is automatically updated using\n[semantic-release](https://github.com/semantic-release/semantic-release). You\ncan see it on the [releases page](../../releases).\n```"
  }
]