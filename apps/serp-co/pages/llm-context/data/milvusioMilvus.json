[
  {
    "owner": "milvus-io",
    "repo": "milvus",
    "content": "TITLE: Installing pymilvus SDK\nDESCRIPTION: Command to install the Python SDK for Milvus using pip package manager.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n$ pip install -U pymilvus\n```\n\n----------------------------------------\n\nTITLE: Creating Remote Milvus Client\nDESCRIPTION: Initialize MilvusClient to connect to a remote Milvus server or Zilliz Cloud with authentication.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclient = MilvusClient(\n    uri=\"<endpoint_of_self_hosted_milvus_or_zilliz_cloud>\",\n    token=\"<username_and_password_or_zilliz_cloud_api_key>\")\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Milvus from Source\nDESCRIPTION: This snippet shows the steps to clone the Milvus repository, install dependencies, and compile Milvus from source code. It includes the commands to clone the repo, run the dependency installation script, and build the project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Clone github repository.\n$ git clone https://github.com/milvus-io/milvus.git\n\n# Install third-party dependencies.\n$ cd milvus/\n$ ./scripts/install_deps.sh\n\n# Compile Milvus.\n$ make\n```\n\n----------------------------------------\n\nTITLE: Searching Vectors in Milvus using Java\nDESCRIPTION: Shows how to perform vector search operations in Milvus. This example searches for the top 10 nearest vectors using ANN (Approximate Nearest Neighbor) search with L2 distance.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.param.dml.SearchParam;\n\nList<List<Float>> search_vectors = new ArrayList<>();\nfor (int i = 0; i < 5; ++i) {\n    List<Float> vector = new ArrayList<>();\n    for (int j = 0; j < 8; j++) {\n        vector.add(RandomUtil.generateFloat(-10.0f, 10.0f));\n    }\n    search_vectors.add(vector);\n}\n\nfinal Integer SEARCH_K = 10;\nfinal String SEARCH_PARAM = \"{\\\"nprobe\\\":10}\";\n\nfinal SearchParam searchParam = SearchParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withMetricType(MetricType.L2)\n    .withTopK(SEARCH_K)\n    .withVectors(search_vectors)\n    .withVectorFieldName(\"book_intro\")\n    .withParams(SEARCH_PARAM)\n    .withConsistencyLevel(ConsistencyLevelEnum.BOUNDED)\n    .addOutField(\"book_id\")\n    .build();\n\nR<SearchResults> respSearch = milvusClient.search(searchParam);\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Index Operations in C++ for Knowhere Engine\nDESCRIPTION: Core interface methods for Knowhere vector search engine including serialization, index building, querying, GPU-CPU data transfer, and memory management. These methods enable vector search functionality with support for user IDs and blacklist filtering during queries.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211223-knowhere_design.md#2025-04-10_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n/*\n * Serialize\n * @return: serialization data\n */\nBinarySet\nSerialize();\n\n/*\n * Load from serialization data\n * @param [in] dataset_ptr: serialization data\n */\nvoid\nLoad(const BinarySet&);\n\n/*\n * Create index\n * @param [in] dataset_ptr: index data (key of the Dataset is \"tensor\", \"rows\" and \"dim\")\n * @parma [in] config: index param\n */\nvoid\nBuildAll(const DatasetPtr& dataset_ptr, const Config& config);\n\n/*\n * KNN (K-Nearest Neighbors) Query\n * @param [in] dataset_ptr: query data (key of the Dataset is \"tensor\" and \"rows\")\n * @parma [in] config: query param\n * @parma [out] blacklist: mark for deletion\n * @return: query result (key of the Dataset is \"ids\" and \"distance\")\n */\nDatasetPtr\nQuery(const DatasetPtr& dataset_ptr, const Config& config, BitsetView blacklist);\n\n/*\n * Copy the index from GPU to CPU\n * @return: CPU vector index\n * @notes: Only valid of the GPU indexes\n */\nVecIndexPtr\nCopyGpuToCpu();\n\n/*\n * If the user IDs has been set, they will be returned in the Query interface;\n * else the range of the returned IDs is [0, row_num-1].\n * @parma [in] uids: user ids\n */\nvoid\nSetUids(std::shared_ptr<std::vector<IDType>> uids);\n\n/*\n * Get the size of the index in memory.\n * @return: index memory size\n */\nint64_t\nSize();\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Schema in Go for Milvus\nDESCRIPTION: This code snippet defines the structure for a collection schema in Milvus using Go. It includes fields for the collection name, description, auto ID generation, and an array of field schemas.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype CollectionSchema struct {\n\tName        string\n\tDescription string\n\tAutoId      bool\n\tFields      []*FieldSchema\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Milvus\nDESCRIPTION: Insert vector data into a specified collection.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nres = client.insert(collection_name=\"demo_collection\", data=data)\n```\n\n----------------------------------------\n\nTITLE: Defining Proxy Service Interface in Go\nDESCRIPTION: Core interface definition for the Proxy service component, including node registration and cache invalidation methods.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype ProxyService interface {\n\tComponent\n\tTimeTickProvider\n\n\tRegisterNode(ctx context.Context, request *proxypb.RegisterNodeRequest) (*proxypb.RegisterNodeResponse, error)\n\tInvalidateCollectionMetaCache(ctx context.Context, request *proxypb.InvalidateCollMetaCacheRequest) (*commonpb.Status, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Milvus Client in Go Application\nDESCRIPTION: Example code showing how to import the Milvus client package, create a context, and initialize a new client connection to a Milvus endpoint with error handling.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/client/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/milvus-io/milvus/client/v2/milvusclient\"\n\n//...other snippet ...\nctx, cancel := context.WithCancel(context.Background())\ndefer cancel()\n\nmilvusAddr := \"YOUR_MILVUS_ENDPOINT\"\n\ncli, err := milvusclient.New(ctx, &milvusclient.ClientConfig{\n\tAddress: milvusAddr,\n})\nif err != nil {\n\t// handle error\n}\n\n// Do your work with milvus client\n```\n\n----------------------------------------\n\nTITLE: Creating New Collection with TTL in Milvus Python\nDESCRIPTION: Creates a new Milvus collection with TTL set to 15 seconds. This configuration determines how long data remains queryable in the collection before expiration.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/collection_ttl.md#2025-04-10_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncollection = Collection(name=name,vschema=schema,properties={\"collection.ttl.seconds\": 15})\n```\n\n----------------------------------------\n\nTITLE: Root Coordinator Interface Definition in Go\nDESCRIPTION: Main interface definition for the Root Coordinator component, defining methods for collection management, partition operations, index building, timestamp allocation, and segment management.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype RootCoord interface {\n\tComponent\n\tTimeTickProvider\n\n\t// DDL request\n\tCreateCollection(ctx context.Context, req *milvuspb.CreateCollectionRequest) (*commonpb.Status, error)\n\tDropCollection(ctx context.Context, req *milvuspb.DropCollectionRequest) (*commonpb.Status, error)\n\tHasCollection(ctx context.Context, req *milvuspb.HasCollectionRequest) (*milvuspb.BoolResponse, error)\n\tDescribeCollection(ctx context.Context, req *milvuspb.DescribeCollectionRequest) (*milvuspb.DescribeCollectionResponse, error)\n\tShowCollections(ctx context.Context, req *milvuspb.ShowCollectionsRequest) (*milvuspb.ShowCollectionsResponse, error)\n\tCreatePartition(ctx context.Context, req *milvuspb.CreatePartitionRequest) (*commonpb.Status, error)\n\tDropPartition(ctx context.Context, req *milvuspb.DropPartitionRequest) (*commonpb.Status, error)\n\tHasPartition(ctx context.Context, req *milvuspb.HasPartitionRequest) (*milvuspb.BoolResponse, error)\n\tShowPartitions(ctx context.Context, req *milvuspb.ShowPartitionsRequest) (*milvuspb.ShowPartitionsResponse, error)\n\tCreateIndex(ctx context.Context, req *milvuspb.CreateIndexRequest) (*commonpb.Status, error)\n\tDescribeIndex(ctx context.Context, req *milvuspb.DescribeIndexRequest) (*milvuspb.DescribeIndexResponse, error)\n\tDropIndex(ctx context.Context, req *milvuspb.DropIndexRequest) (*commonpb.Status, error)\n\tAllocTimestamp(ctx context.Context, req *rootcoordpb.AllocTimestampRequest) (*rootcoordpb.AllocTimestampResponse, error)\n\tAllocID(ctx context.Context, req *rootcoordpb.AllocIDRequest) (*rootcoordpb.AllocIDResponse, error)\n\tUpdateChannelTimeTick(ctx context.Context, req *internalpb.ChannelTimeTickMsg) (*commonpb.Status, error)\n\tDescribeSegment(ctx context.Context, req *milvuspb.DescribeSegmentRequest) (*milvuspb.DescribeSegmentResponse, error)\n\tShowSegments(ctx context.Context, req *milvuspb.ShowSegmentsRequest) (*milvuspb.ShowSegmentsResponse, error)\n\tReleaseDQLMessageStream(ctx context.Context, in *proxypb.ReleaseDQLMessageStreamRequest) (*commonpb.Status, error)\n\tSegmentFlushCompleted(ctx context.Context, in *datapb.SegmentFlushCompletedMsg) (*commonpb.Status, error)\n\tGetMetrics(ctx context.Context, req *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NSG Search Parameters in Python\nDESCRIPTION: Search parameters configuration for NSG index including topk, query vectors, metric type, and search length for query iterations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",      # one of L2, IP\n\n    #Special for RHNSW_SQ\n    \"search_length\": 100  # int. 10~300\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Local Milvus Client\nDESCRIPTION: Instantiate a MilvusClient for local vector database with file persistence.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = MilvusClient(\"milvus_demo.db\")\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search in Milvus\nDESCRIPTION: Execute vector similarity search with query vectors and retrieve results with specified fields.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nquery_vectors = embedding_fn.encode_queries([\"Who is Alan Turing?\", \"What is AI?\"])\nres = client.search(\n    collection_name=\"demo_collection\",  # target collection\n    data=query_vectors,  # a list of one or more query vectors, supports batch\n    limit=2,  # how many results to return (topK)\n    output_fields=[\"vector\", \"text\", \"subject\"],  # what fields to return\n)\n```\n\n----------------------------------------\n\nTITLE: Message Structures for Query Operations in Go\nDESCRIPTION: Various request and response message structures used for query operations including search, retrieve, and segment management.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap07_query_coordinator.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype SearchRequest struct {\n\tBase               *commonpb.MsgBase\n\tResultChannelID    string\n\tDbID               int64\n\tCollectionID       int64\n\tPartitionIDs       []int64\n\tDsl                string\n\tPlaceholderGroup   []byte\n\tDslType            commonpb.DslType\n\tSerializedExprPlan []byte\n\tOutputFieldsId     []int64\n\tTravelTimestamp    uint64\n\tGuaranteeTimestamp uint64\n}\n\ntype RetrieveRequest struct {\n\tBase               *commonpb.MsgBase\n\tResultChannelID    string\n\tDbID               int64\n\tCollectionID       int64\n\tPartitionIDs       []int64\n\tSerializedExprPlan []byte\n\tOutputFieldsId     []int64\n\tTravelTimestamp    uint64\n\tGuaranteeTimestamp uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchByPK Function in Golang\nDESCRIPTION: New SDK method that enables searching by primary keys instead of vectors. The function takes collection name, partitions, expression, output fields, primary keys, vector field, metric type, topK and search parameters as inputs and returns search results.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230403-search_by_pk.md#2025-04-10_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nfunc SearchByPK(\n    ctx context.Context, \n    collName string, \n    partitions []string,\n\texpr string, \n    outputFields []string, \n    primaryKeys []entity.PrimaryKey, \n    vectorField string, \n    metricType entity.MetricType, \n    topK int, \n    sp entity.SearchParam, \n    opts ...SearchQueryOptionFunc,\n) ([]SearchResult, error)\n```\n\n----------------------------------------\n\nTITLE: Starting Milvus Cluster on Local Machine\nDESCRIPTION: Command to start Milvus cluster on a local Linux or MacOS machine.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/start_cluster.sh\n```\n\n----------------------------------------\n\nTITLE: Querying Data in Milvus using Java\nDESCRIPTION: Demonstrates how to retrieve data from Milvus using attribute filtering. This example queries for records where book_id is between 0 and 10.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.param.dml.QueryParam;\n\nfinal String QUERY_FIELD = \"book_id\";\nfinal String QUERY_EXPR = \"book_id in [0, 10]\";\n\nfinal QueryParam queryParam = QueryParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withExpr(QUERY_EXPR)\n    .withOutFields(Arrays.asList(QUERY_FIELD))\n    .build();\n\nR<QueryResults> respQuery = milvusClient.query(queryParam);\n```\n\n----------------------------------------\n\nTITLE: Defining ShardDelegator Interface in Go\nDESCRIPTION: Interface definition for ShardDelegator which handles segment distribution and consumes data from the DML channel. It provides search/query APIs and distribution/DML-related APIs.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// ShardDelegator is the interface definition.\ntype ShardDelegator interface {\n        // Search & Query APIs\n        Search(ctx context.Context, req *querypb.SearchRequest) ([]*internalpb.SearchResults, error)\n        Query(ctx context.Context, req *querypb.QueryRequest) ([]*internalpb.RetrieveResults, error)\n        GetStatistics(ctx context.Context, req *querypb.GetStatisticsRequest) ([]*internalpb.GetStatisticsResponse, error)\n\n\n        // Distribution & dml related APIs\n        ProcessInsert(insertRecords map[int64]*InsertData)\n        ProcessDelete(deleteData []*DeleteData, ts uint64)\n        LoadGrowing(ctx context.Context, infos []*querypb.SegmentLoadInfo, version int64) error\n        LoadSegments(ctx context.Context, req *querypb.LoadSegmentsRequest) error\n        ReleaseSegments(ctx context.Context, req *querypb.ReleaseSegmentsRequest, force bool) error\n        SyncDistribution(ctx context.Context, entries ...SegmentEntry)\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Milvus Collection using Java\nDESCRIPTION: Demonstrates how to insert data into a Milvus collection. The code inserts 1000 rows with book IDs and corresponding vector representations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.param.dml.InsertParam;\n\nfinal int count = 1000;\nList<Long> ids = new ArrayList<>();\nList<List<Float>> vectors = new ArrayList<>();\n\nfor (long i = 0L; i < count; ++i) {\n    ids.add(i);\n    List<Float> vector = new ArrayList<>();\n    for (int j = 0; j < 8; j++) {\n        vector.add(RandomUtil.generateFloat(-10.0f, 10.0f));\n    }\n    vectors.add(vector);\n}\n\nfinal List<InsertParam.Field> fields = new ArrayList<>();\nfields.add(new InsertParam.Field(\"book_id\", ids));\nfields.add(new InsertParam.Field(\"book_intro\", vectors));\n\nfinal InsertParam insertParam = InsertParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withFields(fields)\n    .build();\n\nmilvusClient.insert(insertParam);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Compiling Milvus from Source\nDESCRIPTION: This snippet shows how to clone the Milvus repository, install dependencies, and compile Milvus from source code. It requires Go 1.21, CMake 3.18+, GCC 7.5, and Protobuf 3.7+.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README_CN.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# 克隆项目\n$ git clone https://github.com/milvus-io/milvus.git\n\n# 安装第三方依赖\n$ cd milvus/\n$ ./scripts/install_deps.sh\n\n# 编译 Milvus 单机版\n$ make milvus\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Scheduler in Go\nDESCRIPTION: Implements the central task scheduler that manages different task queues and allocates resources. It schedules tasks based on policies for each task type and monitors task completion.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype taskScheduler struct {\n\tDdQueue TaskQueue\n\tDmQueue TaskQueue\n\tDqQueue TaskQueue\n\n\tidAllocator  *allocator.IDAllocator\n\ttsoAllocator *allocator.TimestampAllocator\n\n\twg     sync.WaitGroup\n\tctx    context.Context\n\tcancel context.CancelFunc\n\n\tmsFactory msgstream.Factory\n}\n\nfunc (sched *taskScheduler) scheduleDdTask() *task\nfunc (sched *taskScheduler) scheduleDmTask() *task\nfunc (sched *taskScheduler) scheduleDqTask() *task\nfunc (sched *TaskScheduler) getTaskByReqID(collMeta UniqueID) task\nfunc (sched *TaskScheduler) processTask(t task, q TaskQueue)\n\nfunc (sched *taskScheduler) Start() error\nfunc (sched *taskScheduler) TaskDoneTest(ts Timestamp) bool\n\nfunc NewTaskScheduler(ctx context.Context, idAllocator *allocator.IDAllocator, tsoAllocator *allocator.TimestampAllocator,\n\tfactory msgstream.Factory) (*TaskScheduler, error)\n```\n\n----------------------------------------\n\nTITLE: Defining Milvus Service Interface in Go\nDESCRIPTION: Comprehensive interface definition for Milvus service including collection, partition, index and search operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype MilvusService interface {\n  CreateCollection(ctx context.Context, request *milvuspb.CreateCollectionRequest) (*commonpb.Status, error)\n\tDropCollection(ctx context.Context, request *milvuspb.DropCollectionRequest) (*commonpb.Status, error)\n\tHasCollection(ctx context.Context, request *milvuspb.HasCollectionRequest) (*milvuspb.BoolResponse, error)\n\tLoadCollection(ctx context.Context, request *milvuspb.LoadCollectionRequest) (*commonpb.Status, error)\n\tReleaseCollection(ctx context.Context, request *milvuspb.ReleaseCollectionRequest) (*commonpb.Status, error)\n\tDescribeCollection(ctx context.Context, request *milvuspb.DescribeCollectionRequest) (*milvuspb.DescribeCollectionResponse, error)\n\tGetCollectionStatistics(ctx context.Context, request *milvuspb.CollectionStatsRequest) (*milvuspb.CollectionStatsResponse, error)\n\tShowCollections(ctx context.Context, request *milvuspb.ShowCollectionRequest) (*milvuspb.ShowCollectionResponse, error)\n\n\tCreateAlias(ctx context.Context, request *milvuspb.CreateAliasRequest) (*commonpb.Status, error)\n\tDropAlias(ctx context.Context, request *milvuspb.DropAliasRequest) (*commonpb.Status, error)\n\tAlterAlias(ctx context.Context, request *milvuspb.AlterAliasRequest) (*commonpb.Status, error)\n\n\tCreatePartition(ctx context.Context, request *milvuspb.CreatePartitionRequest) (*commonpb.Status, error)\n\tDropPartition(ctx context.Context, request *milvuspb.DropPartitionRequest) (*commonpb.Status, error)\n\tHasPartition(ctx context.Context, request *milvuspb.HasPartitionRequest) (*milvuspb.BoolResponse, error)\n\tLoadPartitions(ctx context.Context, request *milvuspb.LoadPartitionRequest) (*commonpb.Status, error)\n\tReleasePartitions(ctx context.Context, request *milvuspb.ReleasePartitionRequest) (*commonpb.Status, error)\n\tGetPartitionStatistics(ctx context.Context, request *milvuspb.PartitionStatsRequest) (*milvuspb.PartitionStatsResponse, error)\n\tShowPartitions(ctx context.Context, request *milvuspb.ShowPartitionRequest) (*milvuspb.ShowPartitionResponse, error)\n\n\tCreateIndex(ctx context.Context, request *milvuspb.CreateIndexRequest) (*commonpb.Status, error)\n\tDescribeIndex(ctx context.Context, request *milvuspb.DescribeIndexRequest) (*milvuspb.DescribeIndexResponse, error)\n\tGetIndexState(ctx context.Context, request *milvuspb.IndexStateRequest) (*milvuspb.IndexStateResponse, error)\n\tDropIndex(ctx context.Context, request *milvuspb.DropIndexRequest) (*commonpb.Status, error)\n\n\tInsert(ctx context.Context, request *milvuspb.InsertRequest) (*milvuspb.InsertResponse, error)\n\tSearch(ctx context.Context, request *milvuspb.SearchRequest) (*milvuspb.SearchResults, error)\n\tFlush(ctx context.Context, request *milvuspb.FlushRequest) (*commonpb.Status, error)\n\n\tGetDdChannel(ctx context.Context, request *commonpb.Empty) (*milvuspb.StringResponse, error)\n\n\tGetQuerySegmentInfo(ctx context.Context, req *milvuspb.QuerySegmentInfoRequest) (*milvuspb.QuerySegmentInfoResponse, error)\n\tGetPersistentSegmentInfo(ctx context.Context, req *milvuspb.PersistentSegmentInfoRequest) (*milvuspb.PersistentSegmentInfoResponse, error)\n  GetQuerySegmentInfo(ctx context.Context, in *GetQuerySegmentInfoRequest, opts ...grpc.CallOption) (*GetQuerySegmentInfoResponse, error)\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Execution Plan Visitor in C++\nDESCRIPTION: Implementation of the ExecPlanNodeVistor, which is a physical plan executor currently supporting only ANNS (Approximate Nearest Neighbor Search) nodes.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/visitor.md#2025-04-10_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n// ${internal/core/src/query}\nExecPlanNodeVistor // physical plan executor only supports ANNS node for now\n```\n\n----------------------------------------\n\nTITLE: Defining DescribeIndexRequest Message in Protobuf\nDESCRIPTION: Defines the DescribeIndexRequest message structure used in the DescribeIndex method. It includes fields for base message, database name, collection name, field name, and index name.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_28\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DescribeIndexRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string field_name = 4;\n  string index_name = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Retrieval Function in Go\nDESCRIPTION: Function signature for retrieving entities from a collection by primary keys. Allows fetching specific fields from entities across optional partition names. Returns a list of matching entities or empty result if keys not found.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211221-retrieve_entity.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// pseudo-code\nfunc get(collection_name string,\n         ids list[string],\n         output_fields list[string],\n         partition_names list[string]) (list[entity], error)\n// Example\n// entities = get(\"collection1\", [\"103\"], [\"_id\", \"age\"], nil)\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Interface in Go for Milvus\nDESCRIPTION: Collection struct definition and associated methods for managing collections in Milvus. It provides functionality to handle collection metadata, partitions, load types, and collection lifecycle operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\ntype Collection struct {\n}\n\nfunc (c *Collection) ID() UniqueID\nfunc (c *Collection) Schema() *schemapb.CollectionSchema\nfunc (c *Collection) GetPartitions() []int64\nfunc (c *Collection) HasPartition(partitionID int64) bool\nfunc (c *Collection) AddPartition(partitionIDs ...int64)\nfunc (c *Collection) RemovePartition(partitionID int64)\nfunc (c *Collection) GetLoadType() querypb.LoadType\nfunc NewCollection(collectionID int64, schema *schemapb.CollectionSchema, loadType querypb.LoadType) *Collection\nfunc DeleteCollection(collection *Collection)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Milvus with Docker\nDESCRIPTION: Steps to build Milvus, create a Docker image, and verify the image creation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ ./build/builder.sh make install // build milvus\n$ ./build/build_image.sh // build milvus latest docker image\n$ docker images // check if milvus latest image is ready\nREPOSITORY                 TAG                                 IMAGE ID       CREATED          SIZE\nmilvusdb/milvus            latest                              63c62ff7c1b7   52 minutes ago   570MB\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Manipulation Task Queue in Go\nDESCRIPTION: Implements a specialized task queue for data manipulation operations (insert and delete). It assigns resources like segment IDs and row IDs to tasks during enqueuing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype dmTaskQueue struct {\n\tbaseTaskQueue\n}\nfunc (queue *dmTaskQueue) Enqueue(task *task) error\n\nfunc newDmTaskQueue() *dmTaskQueue\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Collection TTL in Milvus Python\nDESCRIPTION: Updates the TTL setting for an existing Milvus collection to 1800 seconds (30 minutes). This allows modification of data expiration time for already created collections.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/collection_ttl.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncollection.set_properties(properties={\"collection.ttl.seconds\": 1800})\n```\n\n----------------------------------------\n\nTITLE: Defining DescribeCollection RPC in Protobuf\nDESCRIPTION: Defines the RPC method for describing a collection, including the request message structure with collection details and the response message structure with collection schema and ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_8\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc DescribeCollection(DescribeCollectionRequest) returns (CollectionDescription) {}\n\nmessage DescribeCollectionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  int64 collectionID = 4;\n}\n\nmessage DescribeCollectionResponse {\n  common.Status status = 1;\n  schema.CollectionSchema schema = 2;\n  int64 collectionID = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Milvus Expression Examples in Python\nDESCRIPTION: These examples demonstrate valid expression syntax in Milvus, showing how to combine logical operators, comparison operators, and arithmetic operations to form complex queries.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-query_boolean_expr.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nA > 3 && A < 4 && (C > 5 || D < 6)\n1 < A <= 2.0 + 3 - 4 * 5 / 6 % 7 ** 8\nA == B\nFloatCol in [1.0, 2, 3.0]\nInt64Col in [1, 2, 3] or C != 6\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-way Merge Algorithm for Search Results in Golang\nDESCRIPTION: This algorithm performs a multi-way merge of multiple sorted search result arrays. It uses a set of pointers (locs) to track positions in each result set, iteratively selecting the highest scoring element from all arrays to create the final merged result while maintaining the correct order. The time complexity is n * topk.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/proxy-reduce-cn.md#2025-04-10_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nn = 4\nmultiple_results = [[topk results 1], [topk results 2], [topk results 3], [topk results 4]]\nlocs = [0, 0, 0, 0]\ntopk_results = []\nfor i -> topk:\n\tscore = min_score\n\tchoice = -1\n\tfor j -> n:\n\t\tchoiceOffset = locs[j]\n\t\tif choiceOffset > topk:\n\t\t\t// all result from this way has been got, got from other way\n\t\t\tcontinue\n\t\tscore_this_way = multiple_results[j][choiceOffset]\n\t\tif score_this_way > score:\n\t\t\tchoice = j\n\t\t\tscore = score_this_way\n\tif choice != -1:\n\t\t// update location\n\t\tlocs[choice]++\n\t\ttopk_results = append(topk_results, choice)\n```\n\n----------------------------------------\n\nTITLE: Running Milvus Cluster and Standalone Instances\nDESCRIPTION: Commands to start Milvus in cluster or standalone mode using Docker Compose.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# Running Milvus cluster\n$ cd deployments/docker/dev\n$ docker compose up -d\n$ cd ../../../\n$ ./scripts/start_cluster.sh\n\n# Or running Milvus standalone\n$ cd deployments/docker/dev\n$ docker compose up -d\n$ cd ../../../\n$ ./scripts/start_standalone.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateIndexReqTask in Go\nDESCRIPTION: Go implementation of the CreateIndexReqTask struct, which encapsulates the CreateIndex request for RootCoord processing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype reqTask interface {\n\tCtx() context.Context\n\tType() commonpb.MsgType\n\tExecute(ctx context.Context) error\n\tCore() *Core\n}\n\ntype CreateIndexReqTask struct {\n\tbaseReqTask\n\tReq *milvuspb.CreateIndexRequest\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlushRequest Structure in Go\nDESCRIPTION: Request structure for flushing growing segments of a specified collection. Contains base message information, database ID, and collection ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype FlushRequest struct {\n\tBase         *commonpb.MsgBase\n\tDbID         UniqueID\n\tCollectionID UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Segment Structure and Types in Go for Milvus\nDESCRIPTION: Defines the Segment struct and related types. The Segment represents a data segment in Milvus, containing metadata, indexing information, and runtime state for efficient data management and querying.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap07_query_coordinator.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype segmentType int32\n\nconst (\n\tsegmentTypeInvalid segmentType = iota\n\tsegmentTypeGrowing\n\tsegmentTypeSealed\n\tsegmentTypeIndexing\n)\ntype indexParam = map[string]string\n\ntype Segment struct {\n\tsegmentPtr C.CSegmentInterface\n\n\tsegmentID    UniqueID\n\tpartitionID  UniqueID\n\tcollectionID UniqueID\n\n\tonService bool\n\n\tvChannelID   Channel\n\tlastMemSize  int64\n\tlastRowCount int64\n\n\tonce             sync.Once // guards enableIndex\n\tenableIndex      bool\n\n\trmMutex          sync.Mutex // guards recentlyModified\n\trecentlyModified bool\n\n\ttypeMu      sync.Mutex // guards builtIndex\n\tsegmentType segmentType\n\n\tparamMutex sync.RWMutex // guards index\n\tindexInfos map[FieldID]*indexInfo\n\n\tidBinlogRowSizes []int64\n\n\tvectorFieldMutex sync.RWMutex // guards vectorFieldInfos\n\tvectorFieldInfos map[UniqueID]*VectorFieldInfo\n\n\tpkFilter *bloom.BloomFilter //  bloom filter of pk inside a segment\n}\n```\n\n----------------------------------------\n\nTITLE: Setting IVF_SQ8 Index Parameters in Python for Milvus\nDESCRIPTION: This code snippet shows how to set the building and search parameters for the IVF_SQ8 index type in Milvus using Python. It specifies the index type, metric type, and the 'nlist' parameter for building, and adds 'nprobe' for searching.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# IVF_SQ8\n{\n    \"index_type\": \"IVF_SQ8\",\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n  \t#Special for IVF_SQ8\n    \"nlist\": 100      # int. 1~65536\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# IVF_SQ8\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n    #Special for IVF_SQ8\n    \"nprobe\": 8       # int. 1~nlist(cpu), 1~min[2048, nlist](gpu)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Golang Unit Tests with Make\nDESCRIPTION: This command runs all Golang unit tests using the project's Makefile.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ make test-go\n```\n\n----------------------------------------\n\nTITLE: Creating a Partition Using Wrapper Object in Milvus Tests\nDESCRIPTION: This snippet demonstrates how to create a partition in a collection using the partition_wrap object and verify if it's empty.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nself.partition_wrap.init_partition(collection=collection_name, name=partition_name)\nassert self.partition_wrap.is_empty\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Metadata in Protobuf for Milvus\nDESCRIPTION: Protobuf message definitions for collection-related metadata including partition information, index information, field index mappings, and collection information. These structures represent the metadata stored in etcd.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage PartitionInfo {\n  string partition_name = 1;\n  int64 partitionID = 2;\n  repeated int64 segmentIDs = 3;\n}\n\nmessage IndexInfo {\n  string index_name = 1;\n  int64 indexID = 2;\n  repeated common.KeyValuePair index_params = 3;\n}\n\nmessage FieldIndexInfo{\n  int64 filedID = 1;\n  int64 indexID = 2;\n}\n\nmessage CollectionInfo {\n  int64 ID = 1;\n  schema.CollectionSchema schema = 2;\n  uint64 create_time = 3;\n  repeated int64 partitionIDs = 4;\n  repeated FieldIndexInfo field_indexes = 5;\n  repeated string virtual_channel_names = 6;\n  repeated string physical_channel_names = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Worker Interface in Go\nDESCRIPTION: Interface definition for Worker which handles computation and search/query services for segments. It provides methods for loading/releasing segments, deletion, search, query, and statistics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Worker is the interface definition for querynode worker role.\ntype Worker interface {\n        LoadSegments(context.Context, *querypb.LoadSegmentsRequest) error\n        ReleaseSegments(context.Context, *querypb.ReleaseSegmentsRequest) error\n        Delete(ctx context.Context, req *querypb.DeleteRequest) error\n        Search(ctx context.Context, req *querypb.SearchRequest) (*internalpb.SearchResults, error)\n        Query(ctx context.Context, req *querypb.QueryRequest) (*internalpb.RetrieveResults, error)\n        GetStatistics(ctx context.Context, req *querypb.GetStatisticsRequest) (*internalpb.GetStatisticsResponse, error)\n\n\n        IsHealthy() bool\n        Stop()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DropPartition RPC in Protobuf\nDESCRIPTION: Defines the RPC method for dropping a partition, including the request message structure with partition details and the response status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc DropPartition(DropPartitionRequest) returns (common.Status) {}\n\nmessage DropPartitionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string partition_name = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Loader Interface in Go\nDESCRIPTION: Interface for loading binlogs and spawning segments while ensuring reference count management for collections. This is crucial for segment loading operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\ntype Loader interface {\n    // Load loads binlogs, and spawn segments,\n    // NOTE: make sure the ref count of the corresponding collection will never go down to 0 during this\n    Load(ctx context.Context, collectionID int64, segmentType SegmentType, version int64, infos ...*querypb.SegmentLoadInfo) ([]Segment, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Creation Request Definition in Protobuf\nDESCRIPTION: Message structures for creating collections, including collection schema definition with fields for name, description, autoID flag and field schemas.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CreateCollectionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  // `schema` is the serialized `schema.CollectionSchema`\n  bytes schema = 4;\n}\n\nmessage CollectionSchema {\n  string name = 1;\n  string description = 2;\n  bool autoID = 3;\n  repeated FieldSchema fields = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Package-Level Golang Unit Tests\nDESCRIPTION: This example demonstrates how to run unit tests for a specific package (datanode) and display coverage information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ go test ./internal/datanode -cover\n```\n\n----------------------------------------\n\nTITLE: Creating Clustering Key Collection in Milvus\nDESCRIPTION: Python code to create a collection schema with clustering key support. Demonstrates setting up fields including primary key, clustering key, varchar field, and vector embeddings.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/clustering_compaction.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pymilvus import (FieldSchema, CollectionSchema, DataType, Collection)\n\ndefault_fields = [\n   FieldSchema(name=\"id\", dtype=DataType.INT64, is_primary=True),\n   FieldSchema(name=\"key\", dtype=DataType.INT64, is_clustering_key=True),\n   FieldSchema(name=\"var\", dtype=DataType.VARCHAR, max_length=1000, is_primary=False),\n   FieldSchema(name=\"embeddings\", dtype=DataType.FLOAT_VECTOR, dim=dim)\n]\n\ndefault_schema = CollectionSchema(fields=default_fields, description=\"test clustering-key collection\")\ncoll = Collection(name=\"clustering_test\", schema=default_schema)\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateCollection Message Structures in Go for Milvus\nDESCRIPTION: Defines request and message structures for creating a collection in Milvus. These structures contain collection metadata like name, ID, schema, and channel information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype CreateCollectionRequest struct {\n\tBase                 *commonpb.MsgBase\n\tDbName               string\n\tCollectionName       string\n\tDbID                 UniqueID\n\tCollectionID         UniqueID\n\tSchema               []byte\n\tVirtualChannelNames  []string\n\tPhysicalChannelNames []string\n}\n\ntype CreateCollectionMsg struct {\n\tBaseMsg\n\tmsgpb.CreateCollectionRequest\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Interface and CreateCollectionTask Struct in Go\nDESCRIPTION: Go implementation of the task interface and createCollectionTask struct in Proxy component. The task interface defines the lifecycle methods for tasks, while createCollectionTask implements this interface for collection creation operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211217-milvus_create_collection.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype task interface {\n\tTraceCtx() context.Context\n\tID() UniqueID // return ReqID\n\tSetID(uid UniqueID) // set ReqID\n\tName() string\n\tType() commonpb.MsgType\n\tBeginTs() Timestamp\n\tEndTs() Timestamp\n\tSetTs(ts Timestamp)\n\tOnEnqueue() error\n\tPreExecute(ctx context.Context) error\n\tExecute(ctx context.Context) error\n\tPostExecute(ctx context.Context) error\n\tWaitToFinish() error\n\tNotify(err error)\n}\n\ntype createCollectionTask struct {\n\tCondition\n\t*milvuspb.CreateCollectionRequest\n\tctx       context.Context\n\trootCoord types.RootCoord\n\tresult    *commonpb.Status\n\tschema    *schemapb.CollectionSchema\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateChannels Request and Response Structures in Go\nDESCRIPTION: Defines structures for CreateChannels request and response, including OwnerDescription.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype OwnerDescription struct {\n\tRole string\n\tAddress string\n\t//Token string\n\tDescriptionText string\n}\n\ntype CreateChannelRequest struct {\n\tOwnerDescription OwnerDescription\n\tNumChannels int\n}\n\ntype CreateChannelResponse struct {\n\tChannelNames []string\n}\n```\n\n----------------------------------------\n\nTITLE: Query Node Interface Implementation in Go\nDESCRIPTION: Interface definition for Query Node component that handles segment management and query channel operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap07_query_coordinator.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype QueryNode interface {\n\tComponent\n\tTimeTickProvider\n\n\tAddQueryChannel(ctx context.Context, req *querypb.AddQueryChannelRequest) (*commonpb.Status, error)\n\tRemoveQueryChannel(ctx context.Context, req *querypb.RemoveQueryChannelRequest) (*commonpb.Status, error)\n\tWatchDmChannels(ctx context.Context, req *querypb.WatchDmChannelsRequest) (*commonpb.Status, error)\n\tLoadSegments(ctx context.Context, req *querypb.LoadSegmentsRequest) (*commonpb.Status, error)\n\tReleaseCollection(ctx context.Context, req *querypb.ReleaseCollectionRequest) (*commonpb.Status, error)\n\tReleasePartitions(ctx context.Context, req *querypb.ReleasePartitionsRequest) (*commonpb.Status, error)\n\tReleaseSegments(ctx context.Context, req *querypb.ReleaseSegmentsRequest) (*commonpb.Status, error)\n\tGetSegmentInfo(ctx context.Context, req *querypb.GetSegmentInfoRequest) (*querypb.GetSegmentInfoResponse, error)\n\tGetMetrics(ctx context.Context, in *milvuspb.GetMetricsRequest, opts ...grpc.CallOption) (*milvuspb.GetMetricsResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Hardware Requirements for Milvus Development\nDESCRIPTION: YAML configuration specifying the recommended hardware resources for building and running Milvus from source code.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- 8GB of RAM\n- 50GB of free disk space\n```\n\n----------------------------------------\n\nTITLE: Defining IndexNode CreateIndex gRPC Service\nDESCRIPTION: Proto definition for the CreateIndex RPC in the IndexNode service, including the CreateIndexRequest message structure.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_6\n\nLANGUAGE: proto\nCODE:\n```\nservice IndexNode {\n  ...\n\n  rpc CreateIndex(CreateIndexRequest) returns (common.Status){}\n\n  ...\n}\n\nmessage CreateIndexRequest {\n  int64 indexBuildID = 1;\n  string index_name = 2;\n  int64 indexID = 3;\n  int64 version = 4;\n  string meta_path = 5;\n  repeated string data_paths = 6;\n  repeated common.KeyValuePair type_params = 7;\n  repeated common.KeyValuePair index_params = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual Clustering Compaction\nDESCRIPTION: Python code showing how to manually trigger clustering compaction, check its state, and wait for completion.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/clustering_compaction.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncoll.compact(is_clustering=True)\ncoll.get_compaction_state(is_clustering=True)\ncoll.wait_for_compaction_completed(is_clustering=True)\n```\n\n----------------------------------------\n\nTITLE: Adding default_value to FieldSchema in Protocol Buffers\nDESCRIPTION: Extends the FieldSchema message by adding a new field for default_value that supports scalar fields. This modification enables specifying default values at the schema level.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230405-default_value.md#2025-04-10_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage FieldSchema {\n  ...\n  ScalarField default_value = 11; // default_value only support scalars for now\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DropCollection Request Protocol in MilvusService\nDESCRIPTION: Protocol definition for the DropCollection request in the MilvusService. This defines the gRPC service method and message structure for dropping a collection.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice MilvusService {\n    ...\n\n    rpc DropCollection(DropCollectionRequest) returns (common.Status) {}\n\n    ...\n}\n\nmessage DropCollectionRequest {\n  // Not useful for now\n  common.MsgBase base = 1;\n  // Not useful for now\n  string db_name = 2;\n  // Required, the collection name in milvus\n  string collection_name = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Proxy Structure in Go\nDESCRIPTION: Defines the Proxy struct that handles client requests and coordinates with other Milvus components. It contains client connections to other coordinators, message streams, task schedulers, and resource allocators.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Proxy struct {\n\tctx    context.Context\n\tcancel func()\n\twg     sync.WaitGroup\n\n\tinitParams *internalpb.InitParams\n\tip         string\n\tport       int\n\n\tstateCode commonpb.StateCode\n\n\trootCoordClient  RootCoordClient\n\tindexCoordClient IndexCoordClient\n\tdataCoordClient  DataCoordClient\n\tqueryCoordClient QueryCoordClient\n\n\tsched *TaskScheduler\n\ttick  *timeTick\n\n\tidAllocator  *allocator.IDAllocator\n\ttsoAllocator *allocator.TimestampAllocator\n\tsegAssigner  *SegIDAssigner\n\n\tmanipulationMsgStream msgstream.MsgStream\n\tqueryMsgStream        msgstream.MsgStream\n\tmsFactory             msgstream.Factory\n\n\t// Add callback functions at different stages\n\tstartCallbacks []func()\n\tcloseCallbacks []func()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetPartitionStatistics Structures in Go\nDESCRIPTION: Structures for requesting and responding with partition statistics. Includes request structure with database, collection, and partition IDs and response structure containing key-value pairs of statistics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype GetPartitionStatisticsRequest struct {\n\tBase         *commonpb.MsgBase\n\tDbID         UniqueID\n\tCollectionID UniqueID\n\tPartitionID  UniqueID\n}\n\ntype GetPartitionStatisticsResponse struct {\n\tStats  []*commonpb.KeyValuePair\n\tStatus *commonpb.Status\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payload Reader and Writer Interfaces in C++ for Milvus\nDESCRIPTION: This code snippet defines the C++ interface for payload reading and writing in Milvus. It includes type definitions, writer functions for various data types, reader functions, and utility functions for memory management and buffer handling.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap08_binlog.md#2025-04-10_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\ntypedef void* CPayloadWriter\ntypedef struct CBuffer {\n  char* data;\n  int length;\n} CBuffer\n\ntypedef struct CStatus {\n  int error_code;\n  const char* error_msg;\n} CStatus\n\n\n// C++ interface\n// writer\nCPayloadWriter NewPayloadWriter(int columnType);\nCStatus AddBooleanToPayload(CPayloadWriter payloadWriter, bool *values, int length);\nCStatus AddInt8ToPayload(CPayloadWriter payloadWriter, int8_t *values, int length);\nCStatus AddInt16ToPayload(CPayloadWriter payloadWriter, int16_t *values, int length);\nCStatus AddInt32ToPayload(CPayloadWriter payloadWriter, int32_t *values, int length);\nCStatus AddInt64ToPayload(CPayloadWriter payloadWriter, int64_t *values, int length);\nCStatus AddFloatToPayload(CPayloadWriter payloadWriter, float *values, int length);\nCStatus AddDoubleToPayload(CPayloadWriter payloadWriter, double *values, int length);\nCStatus AddOneStringToPayload(CPayloadWriter payloadWriter, char *cstr, int str_size);\nCStatus AddBinaryVectorToPayload(CPayloadWriter payloadWriter, uint8_t *values, int dimension, int length);\nCStatus AddFloatVectorToPayload(CPayloadWriter payloadWriter, float *values, int dimension, int length);\n\nCStatus FinishPayloadWriter(CPayloadWriter payloadWriter);\nCBuffer GetPayloadBufferFromWriter(CPayloadWriter payloadWriter);\nint GetPayloadLengthFromWriter(CPayloadWriter payloadWriter);\nCStatus ReleasePayloadWriter(CPayloadWriter handler);\n\n// reader\nCPayloadReader NewPayloadReader(int columnType, uint8_t *buffer, int64_t buf_size);\nCStatus GetBoolFromPayload(CPayloadReader payloadReader, bool **values, int *length);\nCStatus GetInt8FromPayload(CPayloadReader payloadReader, int8_t **values, int *length);\nCStatus GetInt16FromPayload(CPayloadReader payloadReader, int16_t **values, int *length);\nCStatus GetInt32FromPayload(CPayloadReader payloadReader, int32_t **values, int *length);\nCStatus GetInt64FromPayload(CPayloadReader payloadReader, int64_t **values, int *length);\nCStatus GetFloatFromPayload(CPayloadReader payloadReader, float **values, int *length);\nCStatus GetDoubleFromPayload(CPayloadReader payloadReader, double **values, int *length);\nCStatus GetOneStringFromPayload(CPayloadReader payloadReader, int idx, char **cstr, int *str_size);\nCStatus GetBinaryVectorFromPayload(CPayloadReader payloadReader, uint8_t **values, int *dimension, int *length);\nCStatus GetFloatVectorFromPayload(CPayloadReader payloadReader, float **values, int *dimension, int *length);\n\nint GetPayloadLengthFromReader(CPayloadReader payloadReader);\nCStatus ReleasePayloadReader(CPayloadReader payloadReader);\n```\n\n----------------------------------------\n\nTITLE: Git Repository Sync Commands\nDESCRIPTION: Shell commands for syncing a forked repository with the upstream Milvus repository and creating a new feature branch\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream git@github.com:milvus-io/milvus.git\ngit fetch upstream\ngit checkout upstream/master -b my-topic-branch\n```\n\n----------------------------------------\n\nTITLE: Defining Task Interface in Go for Milvus Request Processing\nDESCRIPTION: Interface definition for task objects that represent encapsulated requests. Each task implements methods for execution control, status management, and lifecycle operations from queuing to completion.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype task interface {\n  TraceCtx() context.Context\n  ID() UniqueID       // return ReqID\n  SetID(uid UniqueID) // set ReqID\n  Name() string\n  Type() commonpb.MsgType\n  BeginTs() Timestamp\n  EndTs() Timestamp\n  SetTs(ts Timestamp)\n  OnEnqueue() error\n  PreExecute(ctx context.Context) error\n  Execute(ctx context.Context) error\n  PostExecute(ctx context.Context) error\n  WaitToFinish() error\n  Notify(err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Segment Index Information in Protobuf for Milvus\nDESCRIPTION: Protobuf message definition for segment index metadata in Milvus. Contains identifiers for segment, field, index, and build operations, along with an index enablement flag.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage SegmentIndexInfo {\n  int64 segmentID = 1;\n  int64 fieldID = 2;\n  int64 indexID = 3;\n  int64 buildID = 4;\n  bool enable_index = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetSegmentStates Structures in Go\nDESCRIPTION: Structures for requesting and responding with segment state information. Includes request structure, segment state enum definition, segment state information structure, and response structure containing the state of multiple segments.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype GetSegmentStatesRequest struct {\n\tBase                 *commonpb.MsgBase\n\tSegmentIDs           []int64\n}\n\ntype SegmentState int32\n\nconst (\n\tSegmentState_SegmentStateNone SegmentState = 0\n\tSegmentState_NotExist         SegmentState = 1\n\tSegmentState_Growing          SegmentState = 2\n\tSegmentState_Sealed           SegmentState = 3\n\tSegmentState_Flushed          SegmentState = 4\n\tSegmentState_Flushing         SegmentState = 5\n\tSegmentState_Dropped          SegmentState = 6\n)\n\ntype SegmentStateInfo struct {\n\tSegmentID     UniqueID\n\tState         commonpb.SegmentState\n\tStartPosition *msgpb.MsgPosition\n\tEndPosition   *msgpb.MsgPosition\n\tStatus        *commonpb.Status\n}\n\ntype GetSegmentStatesResponse struct {\n\tStatus *commonpb.Status\n\tStates []*SegmentStateInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Segment ID Assignment Structures in Go\nDESCRIPTION: Structures related to segment ID assignment requests and responses. Includes SegmentIDRequest for requesting segment IDs, AssignSegmentIDRequest for coordinating requests, and response structures containing the assigned segment IDs.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype SegmentIDRequest struct {\n\tCount         uint32\n\tChannelName   string\n\tCollectionID  UniqueID\n\tPartitionID   UniqueID\n}\n\ntype AssignSegmentIDRequest struct {\n\tNodeID               int64\n\tPeerRole             string\n\tSegmentIDRequests    []*SegmentIDRequest\n}\n\ntype SegIDAssignment struct {\n\tSegID         UniqueID\n\tChannelName   string\n\tCount         uint32\n\tCollectionID  UniqueID\n\tPartitionID   UniqueID\n\tExpireTime    uint64\n\tStatus        *commonpb.Status\n}\n\ntype AssignSegmentIDResponse struct {\n\tSegIDAssignments []*SegmentIDAssignment\n\tStatus           *commonpb.Status\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Milvus Go SDK with go get\nDESCRIPTION: Command to install the latest version of the Milvus Go SDK and its dependencies using the go get package manager.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/client/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/milvus-io/milvus/client/v2\n```\n\n----------------------------------------\n\nTITLE: Index Parameters Configuration in Go for Milvus\nDESCRIPTION: Shows how to set up index parameters for Milvus collections, specifying index types and configurations for vector fields.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nindexParams := hp.TNewIndexParams(schema).\n    TWithFieldIndex(map[string]index.Index{\n        common.DefaultVectorFieldName: index.NewIVFSQIndex(\n            &index.IVFSQConfig{\n                MetricType: entity.L2,\n                NList:     128,\n            },\n        ),\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining SegmentStatistics Structures in Go\nDESCRIPTION: Structures for segment statistics updates. Includes SegmentStatisticsUpdates for individual segment metrics, SegmentStatistics for combining multiple segment stats, and SegmentStatisticsMsg which extends BaseMsg with SegmentStatistics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype SegmentStatisticsUpdates struct {\n\tSegmentID     UniqueID\n\tMemorySize    int64\n\tNumRows       int64\n\tCreateTime    uint64\n\tEndTime       uint64\n\tStartPosition *msgpb.MsgPosition\n\tEndPosition   *msgpb.MsgPosition\n}\n\ntype SegmentStatistics struct {\n\tBase                 *commonpb.MsgBase\n\tSegStats             []*SegmentStatisticsUpdates\n}\n\ntype SegmentStatisticsMsg struct {\n\tBaseMsg\n\tSegmentStatistics\n}\n\n```\n\n----------------------------------------\n\nTITLE: SegmentSealed Interface Definition\nDESCRIPTION: Defines the core interfaces of SegmentSealed including LoadIndex, LoadFieldData, DropIndex, and DropFieldData operations. These interfaces handle index and field data management operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/segment_sealed.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. `LoadIndex(loadIndexInfo)`: load the index. indexInfo contains:\n    1. `FieldId`\n    2. `IndexParams`: index parameters in KV structure KV\n    3. `VecIndex`: vector index\n2. `LoadFieldData(loadFieldDataInfo)`: load column data, could be either scalar column or vector column\n    1. Note: indexes and vector data for the same column may coexist. Indexes are prioritized in the search\n3. `DropIndex(fieldId)`: drop and release an existing index of a specified field\n4. `DropFieldData(fieldId)`: drop and release existing data for a specified field\n```\n\n----------------------------------------\n\nTITLE: Defining GetPartitionStatistics gRPC Method in Protobuf\nDESCRIPTION: Defines the GetPartitionStatistics gRPC method for retrieving partition statistics. It takes a GetPartitionStatisticsRequest and returns a GetPartitionStatisticsResponse.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_16\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc GetPartitionStatistics(GetPartitionStatisticsRequest) returns (GetPartitionStatisticsResponse) {}\n```\n\n----------------------------------------\n\nTITLE: IndexNode Interface Definition in Go\nDESCRIPTION: Interface definition for Index Node service that handles actual index building operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap03_index_service.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype IndexNode interface {\n\tComponent\n\tTimeTickProvider\n\tBuildIndex(ctx context.Context, req *indexpb.BuildIndexRequest) (*commonpb.Status, error)\n\tDropIndex(ctx context.Context, req *indexpb.DropIndexRequest) (*commonpb.Status, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Collection in Milvus using Java\nDESCRIPTION: Demonstrates how to drop (delete) a collection from Milvus. This operation removes the entire collection and its data.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.param.collection.DropCollectionParam;\n\nfinal DropCollectionParam dropParam = DropCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build();\n\nmilvusClient.dropCollection(dropParam);\n```\n\n----------------------------------------\n\nTITLE: Running C++ Unit Tests and Generating Coverage Reports\nDESCRIPTION: This command runs C++ unit tests and generates code coverage reports using the project's Makefile.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ make codecov-cpp\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Task Interface in RootCoord Component\nDESCRIPTION: Go implementation of reqTask interface and CreateCollectionReqTask struct in RootCoord component. These are used to process collection creation requests received from the Proxy component.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211217-milvus_create_collection.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype reqTask interface {\n\tCtx() context.Context\n\tType() commonpb.MsgType\n\tExecute(ctx context.Context) error\n\tCore() *Core\n}\n\ntype CreateCollectionReqTask struct {\n\tbaseReqTask\n\tReq *milvuspb.CreateCollectionRequest\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HNSW Index Parameters in Python for Milvus\nDESCRIPTION: This code snippet illustrates how to set the building and search parameters for the HNSW index type in Milvus using Python. It includes the index type, metric type, 'M', and 'efConstruction' parameters for building, and adds 'ef' for searching.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# HNSW\n{\n    \"index_type\": \"HNSW\",\n    \"metric_type\": \"L2\",      # one of L2, IP\n\n    #Special for HNSW\n    \"M\": 16,              # int. 4~64\n    \"efConstruction\": 40  # int. 8~512\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# HNSW\n\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n    #Special for HNSW\n    \"ef\": 64          # int. top_k~32768\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Coordinator Interface in Go\nDESCRIPTION: Main interface definition for Query Coordinator component that handles collection management, partitions, and query channels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap07_query_coordinator.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype QueryCoord interface {\n\tComponent\n\tTimeTickProvider\n\n\tShowCollections(ctx context.Context, req *querypb.ShowCollectionsRequest) (*querypb.ShowCollectionsResponse, error)\n\tLoadCollection(ctx context.Context, req *querypb.LoadCollectionRequest) (*commonpb.Status, error)\n\tReleaseCollection(ctx context.Context, req *querypb.ReleaseCollectionRequest) (*commonpb.Status, error)\n\tShowPartitions(ctx context.Context, req *querypb.ShowPartitionsRequest) (*querypb.ShowPartitionsResponse, error)\n\tLoadPartitions(ctx context.Context, req *querypb.LoadPartitionsRequest) (*commonpb.Status, error)\n\tReleasePartitions(ctx context.Context, req *querypb.ReleasePartitionsRequest) (*commonpb.Status, error)\n\tCreateQueryChannel(ctx context.Context) (*querypb.CreateQueryChannelResponse, error)\n\tGetPartitionStates(ctx context.Context, req *querypb.GetPartitionStatesRequest) (*querypb.GetPartitionStatesResponse, error)\n\tGetSegmentInfo(ctx context.Context, req *querypb.GetSegmentInfoRequest) (*querypb.GetSegmentInfoResponse, error)\n\tGetMetrics(ctx context.Context, req *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InsertRequest Message in Protobuf\nDESCRIPTION: Defines the InsertRequest message structure used in the Insert method. It includes fields for base message, database name, collection name, partition name, row data, and hash keys.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_23\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage InsertRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string partition_name = 4;\n  repeated common.Blob row_data = 5;\n  repeated uint32 hash_keys = 6;\n}\n\nmessage Blob {\n  bytes value = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RootCoord CreateIndex gRPC Service\nDESCRIPTION: Proto definition for the CreateIndex RPC in the RootCoord service.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nservice RootCoord {\n  ...\n\n   rpc CreateIndex(milvus.CreateIndexRequest) returns (common.Status) {}\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: BuildIndex Request/Response Structures in Go\nDESCRIPTION: Data structures for index building operations including index parameters and build status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap03_index_service.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype KeyValuePair struct {\n\tKey   string\n\tValue string\n}\n\ntype BuildIndexRequest struct {\n\tIndexBuildID UniqueID\n\tIndexName    string\n\tIndexID      UniqueID\n\tDataPaths    []string\n\tTypeParams   []*commonpb.KeyValuePair\n\tIndexParams  []*commonpb.KeyValuePair\n}\n\ntype BuildIndexResponse struct {\n\tStatus       *commonpb.Status\n\tIndexBuildID UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Code Style Check Commands\nDESCRIPTION: Commands for installing clang-format and checking C++ code style\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install clang-format\n$ make cppcheck\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCollection Service and Request in Protocol Buffers\nDESCRIPTION: Protocol buffer definition for CreateCollection service and request structure. It defines the MilvusService with CreateCollection RPC and the request message containing collection name, schema, and configuration options.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211217-milvus_create_collection.md#2025-04-10_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice MilvusService {\n    ...\n\n    rpc CreateCollection(CreateCollectionRequest) returns (common.Status) {}\n\n    ...\n}\n\nmessage CreateCollectionRequest {\n  // Not useful for now\n  common.MsgBase base = 1;\n  // Not useful for now\n  string db_name = 2;\n  // The unique collection name in milvus.(Required)\n  string collection_name = 3;\n  // The serialized `schema.CollectionSchema`(Required)\n  bytes schema = 4;\n  // Once set, no modification is allowed (Optional)\n  // https://github.com/milvus-io/milvus/issues/6690\n  int32 shards_num = 5;\n}\n\nmessage CollectionSchema {\n  string name = 1;\n  string description = 2;\n  bool autoID = 3; // deprecated later, keep compatible with c++ part now\n  repeated FieldSchema fields = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetRecoveryInfo Structures in Go\nDESCRIPTION: Structures for requesting and responding with recovery information for a collection or partition. Includes request structure, VchannelInfo structure for channel recovery data, SegmentBinlogs structure for segment binlog data, and response structure.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype GetRecoveryInfoRequest struct {\n\tBase                 *commonpb.MsgBase\n\tCollectionID         int64\n\tPartitionID          int64\n}\n\n\ntype VchannelInfo struct {\n\tCollectionID         int64\n\tChannelName          string\n\tSeekPosition         *msgpb.MsgPosition\n\tUnflushedSegments    []*SegmentInfo\n\tFlushedSegments      []int64\n}\n\ntype SegmentBinlogs struct {\n\tSegmentID            int64\n\tFieldBinlogs         []*FieldBinlog\n}\n\ntype GetRecoveryInfoResponse struct {\n\tStatus               *commonpb.Status\n\tChannels             []*VchannelInfo\n\tBinlogs              []*SegmentBinlogs\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Delete gRPC Interface in Go\nDESCRIPTION: gRPC interface definition for the Delete operation, which is used by Delegators to forward delete operations to Workers.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nDelete(context.Context, *querypb.DeleteRequest) (*commonpb.Status, error)\n```\n\n----------------------------------------\n\nTITLE: Defining ProxyMeta in Protobuf for Milvus\nDESCRIPTION: Protobuf message definition for proxy metadata in Milvus. It contains the proxy's identifier, address information, and result channel names for message routing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ProxyMeta {\n  uint64 id = 1;\n  common.Address address = 2;\n  repeated string result_channel_names = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateIndexTask in Go\nDESCRIPTION: Go implementation of the CreateIndexTask struct, which encapsulates the CreateIndex request and provides methods for task execution.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype task interface {\n\tTraceCtx() context.Context\n\tID() UniqueID       // return ReqID\n\tSetID(uid UniqueID) // set ReqID\n\tName() string\n\tType() commonpb.MsgType\n\tBeginTs() Timestamp\n\tEndTs() Timestamp\n\tSetTs(ts Timestamp)\n\tOnEnqueue() error\n\tPreExecute(ctx context.Context) error\n\tExecute(ctx context.Context) error\n\tPostExecute(ctx context.Context) error\n\tWaitToFinish() error\n\tNotify(err error)\n}\n\ntype createIndexTask struct {\n\tCondition\n\t*milvuspb.CreateIndexRequest\n\tctx       context.Context\n\trootCoord types.RootCoord\n\tresult    *commonpb.Status\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DropCollection Message Structures in Go for Milvus\nDESCRIPTION: Defines request and message structures for dropping a collection in Milvus. These structures contain collection identifiers needed to locate and remove the collection.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype DropCollectionRequest struct {\n\tBase           *commonpb.MsgBase\n\tDbName         string\n\tCollectionName string\n\tDbID           UniqueID\n\tCollectionID   UniqueID\n}\n\ntype DropCollectionMsg struct {\n\tBaseMsg\n\tDropCollectionRequest\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure Pattern in Go for Milvus Client\nDESCRIPTION: Demonstrates the standard pattern for writing test cases using the framework, including context setup, collection preparation, data insertion, test execution, and result validation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestYourFeature(t *testing.T) {\n    // 1. Setup context and client\n    ctx := hp.CreateContext(t, time.Second*common.DefaultTimeout)\n    mc := createDefaultMilvusClient(ctx, t)\n\n    // 2. Prepare collection\n    prepare, schema := hp.CollPrepare.CreateCollection(\n        ctx, t, mc,\n        hp.NewCreateCollectionParams(hp.Int64Vec),\n        hp.TNewFieldsOption(),\n        hp.TNewSchemaOption(),\n    )\n\n    // 3. Insert test data\n    prepare.InsertData(ctx, t, mc,\n        hp.NewInsertParams(schema),\n        hp.TNewDataOption(),\n    )\n\n    // 4. Execute test operations\n    // ... your test logic here ...\n\n    // 5. Validate results\n    require.NoError(t, err)\n    require.Equal(t, expected, actual)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReleasePartitions RPC in Protobuf\nDESCRIPTION: Defines the RPC method for releasing partitions, including the request message structure with partition details and the response status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_15\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc ReleasePartitions(ReleasePartitionsRequest) returns (common.Status) {}\n\nmessage ReleasePartitionsRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  repeated string partition_names = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the Protocol Generation Script for Local Development\nDESCRIPTION: Modification to the generate_proto.sh script to use local protocol buffer definitions instead of the submodule version, enabling generation of service code with the modified definitions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/how_to_develop_with_local_milvus_proto.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# scripts/generate_proto.sh\n\n# line 28\n# API_PROTO_DIR=$ROOT_DIR/cmake_build/thirdparty/milvus-proto/proto\nAPI_PROTO_DIR=/home/silverxia/workspace/milvus-proto/proto\n```\n\n----------------------------------------\n\nTITLE: Defining IndexCoord Interface in Go\nDESCRIPTION: Main interface definition for Index Coordinator service that handles index building, dropping, and state management operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap03_index_service.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype IndexCoord interface {\n\tComponent\n\tTimeTickProvider\n\tBuildIndex(ctx context.Context, req *indexpb.BuildIndexRequest) (*indexpb.BuildIndexResponse, error)\n\tDropIndex(ctx context.Context, req *indexpb.DropIndexRequest) (*commonpb.Status, error)\n\tGetIndexStates(ctx context.Context, req *indexpb.GetIndexStatesRequest) (*indexpb.GetIndexStatesResponse, error)\n\tGetIndexFilePaths(ctx context.Context, req *indexpb.GetIndexFilePathsRequest) (*indexpb.GetIndexFilePathsResponse, error)\n\tGetMetrics(ctx context.Context, req *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus Clustering Compaction\nDESCRIPTION: YAML configuration to enable clustering compaction in Milvus. Sets basic parameters for automatic background compaction and related features.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/clustering_compaction.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndataCoord.compaction.clustering.enable=true\ndataCoord.compaction.clustering.autoEnable=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Allocator in Go\nDESCRIPTION: Defines the TimestampAllocator struct and its methods for allocating and managing timestamps in a distributed system.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype TimestampAllocator struct {\n\tAllocator\n\n\trootCoordAddress string\n\trootCoordClient  types.RootCoord\n\n\tcountPerRPC uint32\n\tlastTsBegin Timestamp\n\tlastTsEnd   Timestamp\n\tPeerID      UniqueID\n}\n\nfunc (ta *TimestampAllocator) Start() error\nfunc (ta *TimestampAllocator) AllocOne() (UniqueID, error)\nfunc (ta *TimestampAllocator) Alloc(count uint32) (UniqueID, UniqueID, error)\nfunc (ta *TimestampAllocator) ClearCache()\n\nfunc NewTimestampAllocator(ctx context.Context, masterAddr string) (*TimestampAllocator, error)\n```\n\n----------------------------------------\n\nTITLE: Defining GetIndexStatesRequest Message in Protobuf\nDESCRIPTION: Defines the GetIndexStatesRequest message structure used in the GetIndexStates method. It includes fields for base message, database name, collection name, field name, and index name.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_31\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetIndexStatesRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string field_name = 4;\n  string index_name = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateIndex gRPC Service in MilvusService\nDESCRIPTION: Proto definition for the CreateIndex RPC in the MilvusService, including the CreateIndexRequest message structure.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice MilvusService {\n    ...\n\n    rpc CreateIndex(CreateIndexRequest) returns (common.Status) {}\n\n    ...\n}\n\nmessage CreateIndexRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string field_name = 4;\n  int64 dbID = 5;\n  int64 collectionID = 6;\n  int64 fieldID = 7;\n  repeated common.KeyValuePair extra_params = 8;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgStream Interface and Factories in Go\nDESCRIPTION: Defines MsgStream interface for producing and consuming messages, along with Factory interface and implementations for Pulsar and RMS.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype MsgStream interface {\n\tStart()\n\tClose()\n\tChan() <-chan *MsgPack\n\tAsProducer(channels []string)\n\tAsConsumer(channels []string, subName string)\n\tSetRepackFunc(repackFunc RepackFunc)\n\tComputeProduceChannelIndexes(tsMsgs []TsMsg) [][]int32\n\tGetProduceChannels() []string\n\tProduce(*MsgPack) error\n\tBroadcast(*MsgPack) error\n\tBroadcastMark(*MsgPack) (map[string][]MessageID, error)\n\tConsume() *MsgPack\n\tSeek(offset []*MsgPosition) error\n}\n\ntype Factory interface {\n\tInit(params *paramtable.ComponentParam) error\n\tNewMsgStream(ctx context.Context) (MsgStream, error)\n\tNewTtMsgStream(ctx context.Context) (MsgStream, error)\n}\n\ntype PmsFactory struct {\n\tdispatcherFactory ProtoUDFactory\n\tPulsarAddress  string\n\tReceiveBufSize int64\n\tPulsarBufSize  int64\n}\n\ntype RmsFactory struct {\n\tdispatcherFactory ProtoUDFactory\n\tReceiveBufSize int64\n\tRmqBufSize     int64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InsertMsg Structures in Go\nDESCRIPTION: Structures for insert messages containing data to be inserted. Includes InsertRequest with collection, partition, and row data information, and InsertMsg which extends BaseMsg with the InsertRequest.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype InsertRequest struct {\n\tBase           *commonpb.MsgBase\n\tDbName         string\n\tCollectionName string\n\tPartitionName  string\n\tDbID           UniqueID\n\tCollectionID   UniqueID\n\tPartitionID    UniqueID\n\tSegmentID      UniqueID\n\tChannelID      string\n\tTimestamps     []uint64\n\tRowIDs         []int64\n\tRowData        []*commonpb.Blob\n}\n\ntype InsertMsg struct {\n\tBaseMsg\n\tInsertRequest\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RootCoord Service in Protocol Buffers\nDESCRIPTION: Protocol buffer definition for the RootCoord service that includes the CreateCollection RPC. This service is responsible for handling collection creation requests from the Proxy.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211217-milvus_create_collection.md#2025-04-10_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nservice RootCoord {\n    ...\n\n    rpc CreateCollection(milvus.CreateCollectionRequest) returns (common.Status){}\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for Milvus Development\nDESCRIPTION: JSON configuration for VSCode to integrate C++ and Go development environments for Milvus, including environment variables and Go-specific settings.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"go.toolsEnvVars\": {\n        \"PKG_CONFIG_PATH\": \"${env:PKG_CONFIG_PATH}:${workspaceFolder}/internal/core/output/lib/pkgconfig:${workspaceFolder}/internal/core/output/lib64/pkgconfig\",\n        \"LD_LIBRARY_PATH\": \"${env:LD_LIBRARY_PATH}:${workspaceFolder}/internal/core/output/lib:${workspaceFolder}/internal/core/output/lib64\",\n        \"RPATH\": \"${env:RPATH}:${workspaceFolder}/internal/core/output/lib:${workspaceFolder}/internal/core/output/lib64\"\n    },\n    \"go.testEnvVars\": {\n        \"PKG_CONFIG_PATH\": \"${env:PKG_CONFIG_PATH}:${workspaceFolder}/internal/core/output/lib/pkgconfig:${workspaceFolder}/internal/core/output/lib64/pkgconfig\",\n        \"LD_LIBRARY_PATH\": \"${env:LD_LIBRARY_PATH}:${workspaceFolder}/internal/core/output/lib:${workspaceFolder}/internal/core/output/lib64\",\n        \"RPATH\": \"${env:RPATH}:${workspaceFolder}/internal/core/output/lib:${workspaceFolder}/internal/core/output/lib64\"\n    },\n    \"go.buildFlags\": [\n        \"-ldflags=-r=/Users/zilliz/workspace/milvus/internal/core/output/lib\"\n    ],\n    \"terminal.integrated.env.linux\": {\n        \"PKG_CONFIG_PATH\": \"${env:PKG_CONFIG_PATH}:${workspaceFolder}/internal/core/output/lib/pkgconfig:${workspaceFolder}/internal/core/output/lib64/pkgconfig\",\n        \"LD_LIBRARY_PATH\": \"${env:LD_LIBRARY_PATH}:${workspaceFolder}/internal/core/output/lib:${workspaceFolder}/internal/core/output/lib64\",\n        \"RPATH\": \"${env:RPATH}:${workspaceFolder}/internal/core/output/lib:${workspaceFolder}/internal/core/output/lib64\"\n    },\n    \"go.useLanguageServer\": true,\n    \"gopls\": {\n        \"formatting.gofumpt\": true\n    },\n    \"go.formatTool\": \"gofumpt\",\n    \"go.lintTool\": \"golangci-lint\",\n    \"go.testTags\": \"test,dynamic\",\n    \"go.testTimeout\": \"10m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataCoord Interface in Go\nDESCRIPTION: Interface definition for DataCoord which provides segment management, binlog operations, statistics collection, and coordination capabilities for the Milvus data service. It extends the Component and TimeTickProvider interfaces.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype DataCoord interface {\n\tComponent\n\tTimeTickProvider\n\n  // Flush notifies DataCoord to flush all current growing segments of specified Collection\n\tFlush(ctx context.Context, req *datapb.FlushRequest) (*datapb.FlushResponse, error)\n\t// AssignSegmentID applies allocations for specified Coolection/Partition and related Channel Name(Virtial Channel)\n\tAssignSegmentID(ctx context.Context, req *datapb.AssignSegmentIDRequest) (*datapb.AssignSegmentIDResponse, error)\n  // GetSegmentStates requests segment state information\n\tGetSegmentStates(ctx context.Context, req *datapb.GetSegmentStatesRequest) (*datapb.GetSegmentStatesResponse, error)\n\t// GetInsertBinlogPaths requests binlog paths for specified segment\n\tGetInsertBinlogPaths(ctx context.Context, req *datapb.GetInsertBinlogPathsRequest) (*datapb.GetInsertBinlogPathsResponse, error)\n  // GetSegmentInfoChannel legacy API, returns segment info statistics channel\n\tGetSegmentInfoChannel(ctx context.Context) (*milvuspb.StringResponse, error)\n  // GetCollectionStatistics requests collection statistics\n\tGetCollectionStatistics(ctx context.Context, req *datapb.GetCollectionStatisticsRequest) (*datapb.GetCollectionStatisticsResponse, error)\n  // GetParititonStatistics requests partition statistics\n\tGetPartitionStatistics(ctx context.Context, req *datapb.GetPartitionStatisticsRequest) (*datapb.GetPartitionStatisticsResponse, error)\n  // GetSegmentInfo requests segment info\n\tGetSegmentInfo(ctx context.Context, req *datapb.GetSegmentInfoRequest) (*datapb.GetSegmentInfoResponse, error)\n  // GetRecoveryInfo request segment recovery info of collection/partition\n\tGetRecoveryInfo(ctx context.Context, req *datapb.GetRecoveryInfoRequest) (*datapb.GetRecoveryInfoResponse, error)\n\t// SaveBinlogPaths updates segments binlogs(including insert binlogs, stats logs and delta logs)\n\tSaveBinlogPaths(ctx context.Context, req *datapb.SaveBinlogPathsRequest) (*commonpb.Status, error)\n\t// GetFlushedSegments returns flushed segment list of requested collection/parition\n\tGetFlushedSegments(ctx context.Context, req *datapb.GetFlushedSegmentsRequest) (*datapb.GetFlushedSegmentsResponse, error)\n  // GetMetrics gets the metrics about DataCoord\n\tGetMetrics(ctx context.Context, req *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)\n  // CompleteCompaction completes a compaction with the result\n\tCompleteCompaction(ctx context.Context, req *datapb.CompactionResult) (*commonpb.Status, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CreatePartition Message Structures in Go for Milvus\nDESCRIPTION: Defines request and message structures for creating a partition in Milvus. Contains identifiers for the database, collection, and the new partition to be created.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype CreatePartitionRequest struct {\n\tBase           *commonpb.MsgBase\n\tDbName         string\n\tCollectionName string\n\tPartitionName  string\n\tDbID           UniqueID\n\tCollectionID   UniqueID\n\tPartitionID    UniqueID\n}\n\ntype CreatePartitionMsg struct {\n\tBaseMsg\n\tCreatePartitionRequest\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Data Coordinator Protocol Buffer with New TestObject Field\nDESCRIPTION: Example of modifying a service API definition in data_coord.proto to include the newly created TestObject. Shows how to integrate new message types into existing service definitions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/how_to_develop_with_local_milvus_proto.md#2025-04-10_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\n// data_coord.proto\nmessage SyncSegmentsRequest {\n  int64 planID = 1;\n  int64 compacted_to = 2;\n  int64 num_of_rows = 3;\n  repeated int64 compacted_from = 4;\n  repeated FieldBinlog stats_logs = 5;\n  string channel_name = 6;\n  int64 partition_id = 7;\n  int64 collection_id = 8;\n  common.TestObject obj = 9; // added field\n}\n```\n\n----------------------------------------\n\nTITLE: Field Schema Definition in Protobuf\nDESCRIPTION: Structure defining field properties including ID, name, primary key flag, data type, and parameters for type and indexing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage FieldSchema {\n  int64 fieldID = 1;\n  string name = 2;\n  bool is_primary_key = 3;\n  string description = 4;\n  DataType data_type = 5;\n  repeated common.KeyValuePair type_params = 6;\n  repeated common.KeyValuePair index_params = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateIndexRequest Message in Protobuf\nDESCRIPTION: Defines the CreateIndexRequest message structure used in the CreateIndex method. It includes fields for base message, database name, collection name, field name, and extra parameters.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_26\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage CreateIndexRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string field_name = 4;\n  repeated common.KeyValuePair extra_params = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task Interface in Go\nDESCRIPTION: Defines the task interface that represents operations to be executed by the Proxy. Tasks have timestamps, unique IDs, and execution hooks for different stages of processing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype task interface {\n\tTraceCtx() context.Context\n\tID() UniqueID       // return ReqID\n\tSetID(uid UniqueID) // set ReqID\n\tName() string\n\tType() commonpb.MsgType\n\tBeginTs() Timestamp\n\tEndTs() Timestamp\n\tSetTs(ts Timestamp)\n\tOnEnqueue() error\n\tPreExecute(ctx context.Context) error\n\tExecute(ctx context.Context) error\n\tPostExecute(ctx context.Context) error\n\tWaitToFinish() error\n\tNotify(err error)\n}\n```\n\n----------------------------------------\n\nTITLE: GetIndexStates Request/Response Structures in Go\nDESCRIPTION: Data structures for retrieving index states including state constants and index information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap03_index_service.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype GetIndexStatesRequest struct {\n\tIndexBuildIDs []UniqueID\n}\n\nconst (\n\tIndexState_IndexStateNone IndexState = 0\n\tIndexState_Unissued       IndexState = 1\n\tIndexState_InProgress     IndexState = 2\n\tIndexState_Finished       IndexState = 3\n\tIndexState_Failed         IndexState = 4\n\tIndexState_Deleted        IndexState = 5\n)\n\ntype IndexInfo struct {\n\tState        commonpb.IndexState\n\tIndexBuildID UniqueID\n\tIndexID      UniqueID\n\tIndexName    string\n\tReason       string\n}\n\ntype GetIndexStatesResponse struct {\n\tStatus *commonpb.Status\n\tStates []*IndexInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Milvus Client Connection in Java\nDESCRIPTION: Shows how to properly close the Milvus client connection after finishing operations. This helps release resources and is a good practice for proper application cleanup.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nmilvusClient.close();\n```\n\n----------------------------------------\n\nTITLE: Formatting C++ Code with Clang in Milvus Core Directory\nDESCRIPTION: Shell command to run clang-format on C++ code in the milvus/internal/core directory. Requires clang-format-12 to be installed via apt.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/scripts_and_tools.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./run_clang_format.sh .\n```\n\n----------------------------------------\n\nTITLE: Defining FlushSegmentsRequest Structure in Go\nDESCRIPTION: Request structure for flushing segments. Contains base message information, database ID, collection ID, and a list of segment IDs to flush.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype FlushSegmentsRequest struct {\n\tBase         *commonpb.MsgBase\n\tDbID         UniqueID\n\tCollectionID UniqueID\n\tSegmentIDs   []int64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MsgBase Structure in Go\nDESCRIPTION: Base message structure containing common fields used in Milvus messages, including message type, ID, timestamp, and source ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MsgBase struct {\n\tMsgType   MsgType\n\tMsgID\t    UniqueID\n\tTimestamp Timestamp\n\tSourceID  UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MetaKv Interface in Go\nDESCRIPTION: Extends the TxnKV interface with methods specific to metadata operations, including version comparison and swapping.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype MetaKv interface {\n\tTxnKV\n\tGetPath(key string) string\n\tLoadWithPrefix(key string) ([]string, []string, error)\n\tCompareVersionAndSwap(key string, version int64, target string) error\n    WalkWithPrefix(prefix string, paginationSize int, fn func([]byte, []byte) error) error\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Drop Request Definition in Protobuf\nDESCRIPTION: Message structure for dropping collections, containing database and collection name fields.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DropCollectionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetIndexStates gRPC Method in Protobuf\nDESCRIPTION: Defines the GetIndexStates gRPC method for getting index build progress information. It takes a GetIndexStatesRequest and returns a GetIndexStatesResponse.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_30\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc GetIndexStates(GetIndexStatesRequest) returns (GetIndexStatesRequest){}\n```\n\n----------------------------------------\n\nTITLE: Using default values in Python with Milvus client\nDESCRIPTION: Demonstrates how to define a collection schema with a default value for a float field and insert data where the default value is applied. Shows the practical implementation of the proposed feature.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230405-default_value.md#2025-04-10_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n    # create collection\n    nb = 3000\n    fields = [\n        FieldSchema(name=\"int64\", dtype=DataType.INT64, is_primary=True),\n         # restrict at most one value to be passed in as the default value\n        FieldSchema(name=\"float\", dtype=DataType.FLOAT, default_value=1.0)\n    ]\n    schema = CollectionSchema(\n        fields=fields, description=\"collection\")\n\n    collection = Collection(name=\"hello_milvus\", schema=default_schema)\n\n    #  insert data\n    collection.insert(\n        [\n            [i for i in range(nb)],\n            # will use the default_value\n            [],\n        ]\n    )\n```\n\n----------------------------------------\n\nTITLE: Verifying GCC and Make Installation\nDESCRIPTION: Bash commands to check the versions of GCC and Make, which are required for Milvus development.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcc --version\nmake --version\n```\n\n----------------------------------------\n\nTITLE: Defining GetSegmentInfo Structures in Go\nDESCRIPTION: Structures for requesting and responding with segment information. Includes request structure with segment IDs, segment info structure containing detailed segment metadata, and response structure containing multiple segment infos.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype GetSegmentInfoRequest  struct{\n\tBase       *commonpb.MsgBase\n\tSegmentIDs []UniqueID\n}\n\ntype SegmentInfo struct {\n\tID                   int64\n\tCollectionID         int64\n\tPartitionID          int64\n\tInsertChannel        string\n\tNumOfRows            int64\n\tState                commonpb.SegmentState\n\tDmlPosition          *msgpb.MsgPosition\n\tMaxRowNum            int64\n\tLastExpireTime       uint64\n\tStartPosition        *msgpb.MsgPosition\n  DmlPosition          *msgpb.MsgPosition\n  Binlogs              []*FieldBinlog\n}\n\ntype GetSegmentInfoResponse  struct{\n\tStatus *commonpb.Status\n\tinfos  []SegmentInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Descriptor Event Format for Milvus Binlog\nDESCRIPTION: Defines the descriptor event format which must appear as the first event in all column files. It includes collection ID, partition ID, segment ID, field ID, timestamps, and payload data type, along with extra information in JSON format.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap08_binlog.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n+=====================================+=====================================================================+\n| event  | Timestamp         0 : 8    | create timestamp                                                    |\n| header +----------------------------+---------------------------------------------------------------------+\n|        | TypeCode          8 : 1    | event type code                                                     |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | EventLength       9 : 4    | length of event, including header and data                          |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | NextPosition     13 : 4    | offset of next event from the start of file                         |\n+=====================================+=====================================================================+\n| event  | CollectionID     17 : 8    | collection id                                                       |\n| data   +----------------------------+---------------------------------------------------------------------+\n|        | PartitionID      25 : 8    | partition id (schema column does not need)                          |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | SegmentID        33 : 8    | segment id (schema column does not need)                            |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | FieldID          41 : 8    | field id (schema column does not need)                              |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | StartTimestamp   49 : 8    | minimum timestamp allocated by master of all events in this file    |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | EndTimestamp     57 : 8    | maximum timestamp allocated by master of all events in this file    |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | PayloadDataType  65 : 4    | data type of payload                                                |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | PostHeaderLengths n : n    | header lengths for all event types                                  |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | ExtraLength      69 : 4    | length of extra information                                         |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | ExtraBytes       73 : n    | extra information in json format                                    |\n+=====================================+=====================================================================|\n```\n\n----------------------------------------\n\nTITLE: Defining Node Registration Types in Go\nDESCRIPTION: Data structures for node registration including address, request and response types.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Address struct {\n\tIp   string\n\tPort int64\n}\n\ntype RegisterNodeRequest struct {\n\tBase    *commonpb.MsgBase\n\tAddress string\n\tPort    int64\n}\n\ntype InitParams struct {\n\tNodeID      UniqueID\n\tStartParams []*commonpb.KeyValuePair\n}\n\ntype RegisterNodeResponse struct {\n\tInitParams *internalpb.InitParams\n\tStatus     *commonpb.Status\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePartition RPC in Protobuf\nDESCRIPTION: Defines the RPC method for creating a partition, including the request message structure with partition details and the response status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_11\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc CreatePartition(CreatePartitionRequest) returns (common.Status) {}\n\nmessage CreatePartitionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string partition_name = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShowCollections RPC in Protobuf\nDESCRIPTION: Defines the RPC method for listing all collections, including the response message structure with status and collection names.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc ShowCollections(ShowCollectionsRequest) returns (ShowCollectionsResponse) {}\n\nmessage ShowCollectionsResponse {\n  common.Status status = 1;\n  repeated string collection_names = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetPartitionStatisticsResponse Message in Protobuf\nDESCRIPTION: Defines the GetPartitionStatisticsResponse message structure returned by the GetPartitionStatistics method. It includes fields for status and statistics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_18\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetPartitionStatisticsResponse {\n  common.Status status = 1;\n  repeated common.KeyValuePair stats = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Conan Package Manager\nDESCRIPTION: Pip command to install Conan, a C++ package manager used by Milvus, specifying the required version.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install conan==1.64.1\n```\n\n----------------------------------------\n\nTITLE: Defining HasPartition RPC in Protobuf\nDESCRIPTION: Defines the RPC method for checking partition existence, including the request message structure with partition details and the response message structure with status and boolean result.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_13\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc HasPartition(HasPartitionRequest) returns (BoolResponse) {}\n\nmessage HasPartitionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string partition_name = 4;\n}\n\nmessage BoolResponse {\n  common.Status status = 1;\n  bool value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Sealed Segment Data Organization\nDESCRIPTION: Explains the data organization principles in sealed segments, including segment division, primary key ordering, and timestamp ordering between segments.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/timetravel.md#2025-04-10_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Data is divided into multiple segments.\n2. Data in one segment is ordered by primary key.\n3. Data between Segments is in timestamp order. That is, the timestamp of every entity in the previous segment must be less than the timestamp of the first entity in the next segment.\n```\n\n----------------------------------------\n\nTITLE: Implementing Unmarshal Interface and Factories in Go\nDESCRIPTION: Defines UnmarshalFunc, UnmarshalDispatcher interface, and factory interfaces for Proto and Mem implementations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype UnmarshalFunc func(interface{}) (TsMsg, error)\n\ntype UnmarshalDispatcher interface {\n\tUnmarshal(input interface{}, msgType commonpb.MsgType) (TsMsg, error)\n\tAddMsgTemplate(msgType commonpb.MsgType, unmarshalFunc UnmarshalFunc)\n}\n\ntype UnmarshalDispatcherFactory interface {\n\t\tNewUnmarshalDispatcher() *UnmarshalDispatcher\n}\n\ntype ProtoUDFactory struct {}\nfunc (pudf *ProtoUDFactory) NewUnmarshalDispatcher() *ProtoUnmarshalDispatcher\n\n// TODO\ntype MemUDFactory struct {}\nfunc (mudf *MemUDFactory) NewUnmarshalDispatcher() *UnmarshalDispatcher\n```\n\n----------------------------------------\n\nTITLE: Defining Segment Interface in Go\nDESCRIPTION: Interface for segment operations including property access, index management, data insertion/deletion, and search/query functionality. It provides methods for all segment-level operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ntype Segment interface {\n    // Properties\n    ID() int64\n    Collection() int64\n    Partition() int64\n    Channel() string\n    Version() int64\n    StartPosition() *internalpb.MsgPosition\n    Type() SegmentType\n\n    // Index related\n    AddIndex(fieldID int64, index *IndexedFieldInfo)\n    GetIndex(fieldID int64) *IndexedFieldInfo\n    HaveIndex(fieldID int64) bool\n\n    // Insert related\n    Insert(entityIDs []int64, timestamps []Timestamp, record *segcorepb.InsertRecord) error\n    Delete(entityIDs []storage.PrimaryKey, timestamps []typeutil.Timestamp) error\n\n    // Query related\n    Search(searchReq *searchRequest) (*SearchResult, error)\n    Retrieve(plan *RetrievePlan) (*segcorepb.RetrieveResults, error)\n}\n\nfunc NewSegment(collection *Collection,\n    segmentID int64,\n    partitionID int64,\n    collectionID int64,\n    channel string,\n    segmentType SegmentType,\n    version int64,\n    startPosition *internalpb.MsgPosition) (*Segment, error)\nfunc DeleteSegment(segment *Segment)\n```\n\n----------------------------------------\n\nTITLE: Defining Base Message Structure in Protobuf\nDESCRIPTION: Base message structure used in all Milvus RPC requests. Contains message type, ID, timestamp and source ID fields.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage MsgBase {\n  MsgType msg_type = 1;\n  int64  msgID = 2;\n  uint64 timestamp = 3;\n  int64 sourceID = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RHNSW_PQ Building Parameters in Python\nDESCRIPTION: Configuration for building RHNSW_PQ index with parameters like M (max node degree), efConstruction (search scope), and PQM (product quantization dimension).\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"index_type\": \"RHNSW_PQ\",\n    \"metric_type\": \"L2\",\n\n    #Special for RHNSW_PQ\n    \"M\": 16,               # int. 4~64\n    \"efConstruction\": 40,  # int. 8~512\n    \"PQM\": 8,              # int. CPU only. PQM = dim (mod m)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Single Milvus Integration Test Case\nDESCRIPTION: This example shows how to run a single integration test case. It sets up the environment, changes to the test case directory, and executes the test with specific parameters.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/integration/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# mq, etcd, minio ready before\ncd [milvus-folder]\nsource scripts/setenv.sh\ncd tests/integration/[testcase-folder]/\ngo test -run \"$testCaseName^\" -testify.m \"$subTestifyCaseName^\" -race -v\n```\n\n----------------------------------------\n\nTITLE: Specifying Amazon Linux 2023 Builder for Milvus\nDESCRIPTION: Commands to set the OS_NAME environment variable to use the amazonlinux2023 builder image instead of the default ubuntu20.04 when building Milvus with the builder script.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OS_NAME=amazonlinux2023\nbuild/builder.sh make\n```\n\n----------------------------------------\n\nTITLE: Defining ReleaseCollection RPC in Protobuf\nDESCRIPTION: Defines the RPC method for releasing a collection, including the request message structure with collection details and the response status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_7\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc ReleaseCollection(ReleaseCollectionRequest) returns (common.Status) {}\n\nmessage ReleaseCollectionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining INSERT_EVENT Data Format for Milvus Binlog\nDESCRIPTION: Specifies the structure of INSERT_EVENT data part in Milvus Binlog, which includes a fixed part with start and end timestamps, and a variable part containing payload in parquet format.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap08_binlog.md#2025-04-10_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n+================================================+==========================================================+\n| event  | fixed  |  StartTimestamp      x : 8   | min timestamp in this event                              |\n| data   | part   +------------------------------+----------------------------------------------------------+\n|        |        |  EndTimestamp      x+8 : 8   | max timestamp in this event                              |\n|        +--------+------------------------------+----------------------------------------------------------+\n|        |variable|  parquet payload             | payload in parquet format                                |\n|        |part    |                              |                                                          |\n+================================================+==========================================================\n```\n\n----------------------------------------\n\nTITLE: Defining ShowPartitionsResponse Message in Protobuf\nDESCRIPTION: Defines the ShowPartitionsResponse message structure returned by the ShowPartitions method. It includes fields for status, partition names, and partition IDs.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_21\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ShowPartitionsResponse {\n  common.Status status = 1;\n  repeated string partition_names = 2;\n  repeated int64 partitionIDs = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PipelineManager Interface in Go for Milvus\nDESCRIPTION: PipelineManager struct definition and associated methods for managing operation pipelines in Milvus. It provides functionality to add, get, remove, and manage pipelines associated with collections and channels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_9\n\nLANGUAGE: Go\nCODE:\n```\ntype PipelineManager struct {\n}\n\nfunc (m *PipelineManager) Num() int\nfunc (m *PipelineManager) Add(collectionID UniqueID, dmlChannels []string) error\nfunc (m *PipelineManager) Get(collectionID UniqueID, channel Channel) (*Pipeline, error)\nfunc (m *PipelineManager) Remove(channels []Channel)\nfunc (m *PipelineManager) Close()\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelsMgr Interface for Channel Management in Milvus\nDESCRIPTION: Interface for managing DmChannels, DqRequestChannel, DqResultChannel, and their corresponding MsgStream objects. It provides methods to create, retrieve, and manage streams for different collections.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype channelsMgr interface {\n   getChannels(collectionID UniqueID) ([]pChan, error)\n   getVChannels(collectionID UniqueID) ([]vChan, error)\n   createDQLStream(collectionID UniqueID) error\n   getDQLStream(collectionID UniqueID) (msgstream.MsgStream, error)\n   removeDQLStream(collectionID UniqueID) error\n   removeAllDQLStream() error\n   createDMLMsgStream(collectionID UniqueID) error\n   getDMLStream(collectionID UniqueID) (msgstream.MsgStream, error)\n   removeDMLStream(collectionID UniqueID) error\n   removeAllDMLStream() error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DescribeIndexResponse Message in Protobuf\nDESCRIPTION: Defines the DescribeIndexResponse message structure returned by the DescribeIndex method. It includes fields for status and index descriptions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_29\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DescribeIndexResponse {\n  common.Status status = 1;\n  repeated IndexDescription index_descriptions = 2;\n}\n\nmessage IndexDescription {\n  string index_name = 1;\n  int64 indexID = 2;\n  repeated common.KeyValuePair params = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Milvus with Docker Compose\nDESCRIPTION: Command to install Milvus using Docker Compose with the previously downloaded docker-compose.yml file.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose -f docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Checking Status of Milvus Dev Containers\nDESCRIPTION: Command to check the running state of Milvus development containers, showing container names, commands, states, and exposed ports.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose -f docker-compose-devcontainer.yml ps\n\n      Name                    Command                  State                                      Ports\n---------------------------------------------------------------------------------------------------------------------------------------\nmilvus_builder_1   /tini -- autouseradd --use ...   Up\nmilvus_etcd_1      etcd -advertise-client-url ...   Up             2379/tcp, 2380/tcp\nmilvus_jaeger_1    /go/bin/all-in-one-linux         Up             14250/tcp, 14268/tcp, 16686/tcp, 5775/udp, 5778/tcp, 6831/udp,\n                                                                   6832/udp\nmilvus_minio_1     /usr/bin/docker-entrypoint ...   Up (healthy)   9000/tcp\nmilvus_pulsar_1    bin/pulsar standalone --no ...   Up\n```\n\n----------------------------------------\n\nTITLE: Defining InsertResponse Message in Protobuf\nDESCRIPTION: Defines the InsertResponse message structure returned by the Insert method. It includes fields for status, row ID begin, and row ID end.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_24\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage InsertResponse {\n  common.Status status = 1;\n  int64 rowID_begin = 2;\n  int64 rowID_end = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Types and Structures for Milvus in Go\nDESCRIPTION: Defines various message types, MsgPosition, MsgPack, and TsMsg interface for Milvus message stream implementation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype MsgType uint32\nconst (\n\tMsgType_Undefined MsgType = 0\n\t// DEFINITION REQUESTS: COLLECTION\n\tMsgType_CreateCollection   MsgType = 100\n\tMsgType_DropCollection     MsgType = 101\n\t// ... (other message types)\n)\n\ntype MsgPosition struct{\n\tChannelName string\n\tMsgID       []byte\n\tMsgGroup    string\n\tTimestamp   uint64\n}\n\ntype MsgPack struct {\n\tBeginTs        Timestamp\n\tEndTs          Timestamp\n\tMsgs           []TsMsg\n\tStartPositions []*MsgPosition\n\tEndPositions   []*MsgPosition\n}\n\ntype TsMsg interface {\n\tTraceCtx() context.Context\n\tSetTraceCtx(ctx context.Context)\n\tID() UniqueID\n\tBeginTs() Timestamp\n\tEndTs() Timestamp\n\tType() MsgType\n\tSourceID() int64\n\tHashKeys() []uint32\n\tMarshal(TsMsg) (MarshalType, error)\n\tUnmarshal(MarshalType) (TsMsg, error)\n\tPosition() *MsgPosition\n\tSetPosition(*MsgPosition)\n}\n\ntype RepackFunc func(msgs []TsMsg, hashKeys [][]int32) (map[int32]*MsgPack, error)\n```\n\n----------------------------------------\n\nTITLE: Defining RootCoord Core Structure in Go for Milvus\nDESCRIPTION: Core structure of RootCoord that manages metadata, ID/TSO allocation, message streams, client connections, and service interactions. It coordinates collection, partition, and index operations in Milvus.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Core struct {\n\tMetaTable *metaTable\n\t//id allocator\n\tIDAllocator       func(count uint32) (typeutil.UniqueID, typeutil.UniqueID, error)\n\tIDAllocatorUpdate func() error\n\n\t//tso allocator\n\tTSOAllocator       func(count uint32) (typeutil.Timestamp, error)\n\tTSOAllocatorUpdate func() error\n\n\t//inner members\n\tctx     context.Context\n\tcancel  context.CancelFunc\n\tetcdCli *clientv3.Client\n\tkvBase  *etcdkv.etcdKV\n\n\t//setMsgStreams, send time tick into dd channel and time tick channel\n\tSendTimeTick func(t typeutil.Timestamp) error\n\n\t//setMsgStreams, send create collection into dd channel\n\tSendDdCreateCollectionReq func(ctx context.Context, req *msgpb.CreateCollectionRequest, channelNames []string) error\n\n\t//setMsgStreams, send drop collection into dd channel, and notify the proxy to delete this collection\n\tSendDdDropCollectionReq func(ctx context.Context, req *msgpb.DropCollectionRequest, channelNames []string) error\n\n\t//setMsgStreams, send create partition into dd channel\n\tSendDdCreatePartitionReq func(ctx context.Context, req *msgpb.CreatePartitionRequest, channelNames []string) error\n\n\t//setMsgStreams, send drop partition into dd channel\n\tSendDdDropPartitionReq func(ctx context.Context, req *msgpb.DropPartitionRequest, channelNames []string) error\n\n\t// if RootCoord create segment, DataCoord will put segment msg into this channel\n\tDataCoordSegmentChan <-chan *ms.MsgPack\n\n\t// if segment flush completed, DataNode would put segment msg into this channel\n\tDataNodeFlushedSegmentChan <-chan *ms.MsgPack\n\n\t//get binlog file path from data service,\n\tCallGetBinlogFilePathsService func(segID typeutil.UniqueID, fieldID typeutil.UniqueID) ([]string, error)\n\tCallGetNumRowsService         func(segID typeutil.UniqueID, isFromFlushedChan bool) (int64, error)\n\n\t//call index builder's client to build index, return build id\n\tCallBuildIndexService func(ctx context.Context, binlog []string, field *schemapb.FieldSchema, idxInfo *etcdpb.IndexInfo) (typeutil.UniqueID, error)\n\tCallDropIndexService  func(ctx context.Context, indexID typeutil.UniqueID) error\n\n\tNewProxyClient func(sess *sessionutil.Session) (types.Proxy, error)\n\n\t//query service interface, notify query service to release collection\n\tCallReleaseCollectionService func(ctx context.Context, ts typeutil.Timestamp, dbID typeutil.UniqueID, collectionID typeutil.UniqueID) error\n\n\t//dd request scheduler\n\tddReqQueue chan reqTask //dd request will be push into this chan\n\n\t//dml channels\n\tdmlChannels *dmlChannels\n\n\t//Proxy manager\n\tproxyManager *proxyManager\n\n\t// proxy clients\n\tproxyClientManager *proxyClientManager\n\n\t// channel timetick\n\tchanTimeTick *timetickSync\n\n\t//time tick loop\n\tlastTimeTick typeutil.Timestamp\n\n\t//states code\n\tstateCode atomic.Value\n\n\t//call once\n\tinitOnce  sync.Once\n\tstartOnce sync.Once\n\t//isInit    atomic.Value\n\n\tsession     *sessionutil.Session\n\tsessCloseCh <-chan bool\n\n\tmsFactory ms.Factory\n}\n```\n\n----------------------------------------\n\nTITLE: Defining channelsTimeTicker Interface in Go\nDESCRIPTION: This snippet defines the interface for channelsTimeTicker, which is responsible for collecting synchronization timestamp information of physical channels. It includes methods for starting, closing, adding/removing channels, and retrieving timestamp statistics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype channelsTimeTicker interface {\n   start() error\n   close() error\n   addPChan(pchan pChan) error\n   removePChan(pchan pChan) error\n   getLastTick(pchan pChan) (Timestamp, error)\n   getMinTsStatistics() (map[pChan]Timestamp, error)\n}\n```\n\n----------------------------------------\n\nTITLE: TimeTick Statistics Interface in Go\nDESCRIPTION: Defines the statistics and monitoring interfaces for the time tick component. It implements ActiveComponent interfaces for system monitoring and health checks.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// ActiveComponent interfaces\nfunc (tt *timeTick) ID() String\nfunc (tt *timeTick) Status() Status\nfunc (tt *timeTick) Clean() Status\nfunc (tt *timeTick) Restart() Status\nfunc (tt *timeTick) heartbeat()\n\n// protobuf\nmessage TimeTickHeartbeat {\n  string id\n  uint64 last_tick\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreateIndex gRPC Method in Protobuf\nDESCRIPTION: Defines the CreateIndex gRPC method for creating an index for a collection. It takes a CreateIndexRequest and returns a common.Status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_25\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc CreateIndex(CreateIndexRequest) returns (common.Status){}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Daemon Status in Shell\nDESCRIPTION: This command is used to verify if the Docker daemon is running. It displays information about the Docker installation and its current status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ docker info\n```\n\n----------------------------------------\n\nTITLE: External Segment Interface Methods\nDESCRIPTION: Core external methods for segment operations including row counting, schema retrieval, memory usage calculation, search operations and result processing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/segment_interface.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nget_row_count()\nget_schema()\nGetMemoryUsageInBytes()\nSearch(plan, placeholderGroup, timestamp) -> QueryResult\nFillTargetEntry(plan, &queryResult)\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Replica Structure in Go for Milvus\nDESCRIPTION: Defines the collectionReplica struct, which maintains in-memory copies of persistent collections across query nodes. It tracks collection metadata, partitions, segments, and tSafe values for data consistency.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap07_query_coordinator.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype collectionReplica struct {\n\ttSafes map[UniqueID]tSafer // map[collectionID]tSafer\n\n\tmu          sync.RWMutex // guards all\n\tcollections map[UniqueID]*Collection\n\tpartitions  map[UniqueID]*Partition\n\tsegments    map[UniqueID]*Segment\n\n\texcludedSegments map[UniqueID][]*datapb.SegmentInfo // map[collectionID]segmentIDs\n}\n```\n\n----------------------------------------\n\nTITLE: GetIndexFilePaths Request/Response Structures in Go\nDESCRIPTION: Data structures for retrieving index file paths and related information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap03_index_service.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype GetIndexFilePathsRequest struct {\n\tIndexBuildIDs []UniqueID\n}\n\ntype IndexFilePathInfo struct {\n\tStatus         *commonpb.Status\n\tIndexBuildID   UniqueID\n\tIndexFilePaths []string\n}\n\ntype GetIndexFilePathsResponse struct {\n\tStatus    *commonpb.Status\n\tFilePaths []*IndexFilePathInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DescribeIndex gRPC Method in Protobuf\nDESCRIPTION: Defines the DescribeIndex gRPC method for getting detailed index information. It takes a DescribeIndexRequest and returns a common.Status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_27\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc DescribeIndex(DescribeIndexRequest) returns (common.Status){}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Sync Service Structure in Go for Milvus\nDESCRIPTION: Defines the dataSyncService struct, which manages data synchronization between query nodes in Milvus. It maintains flow graphs for collections and partitions, and interfaces with streaming and tSafe replicas.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap07_query_coordinator.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype dataSyncService struct {\n\tctx    context.Context\n\n\tmu                   sync.Mutex                                   // guards FlowGraphs\n\tcollectionFlowGraphs map[UniqueID]map[Channel]*queryNodeFlowGraph // map[collectionID]flowGraphs\n\tpartitionFlowGraphs  map[UniqueID]map[Channel]*queryNodeFlowGraph // map[partitionID]flowGraphs\n\n\tstreamingReplica ReplicaInterface\n\ttSafeReplica     TSafeReplicaInterface\n\tmsFactory        msgstream.Factory\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing channelsTimeTicker Algorithm in Go\nDESCRIPTION: This snippet outlines the algorithm used by channelsTimeTicker to update minTsStatistics and currents based on the relationship between now, minTsStatistics, currents, and pChanStats. It involves getting a timestamp from RootCoordinator and iterating through each pChan in currents.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nnow = get a timestamp from RootCoordinator\nFor each pChan in currents, do\n\tcurrent = currents[pChan]\n\tif pChan not exists in pChanStats, then\n\t\tminTsStatistics[pChan] = current\n\t\tcurrents[pChan] = now\n  else：\n\t\tminTs = pChanStats[pChan].minTs\n\t\tmaxTs = pChanStats[pChan].maxTs\n\t\tif minTs > current，then\n\t\t\tminTsStatistics[pChan] = min(minTs, now)\n      next:= min(now + sendTimeTickMsgInterval, maxTs)\n      currents[pChan] = next\n```\n\n----------------------------------------\n\nTITLE: Message Base Structure Definition\nDESCRIPTION: Base message structure containing common fields for message type, ID, timestamp and source ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MsgBase struct {\n\tMsgType   MsgType\n\tMsgID\t    UniqueID\n\tTimestamp Timestamp\n\tSourceID  UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DropIndex gRPC Method in Protobuf\nDESCRIPTION: Defines the DropIndex gRPC method for dropping an index for a collection. It takes a DropIndexRequest and returns a common.Status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_33\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc DropIndex(DropIndexRequest) returns (common.Status){}\n```\n\n----------------------------------------\n\nTITLE: Downloading Milvus Standalone Docker Compose File\nDESCRIPTION: Command to download the docker-compose.yml file for Milvus standalone installation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://raw.githubusercontent.com/milvus-io/milvus/master/deployments/docker/standalone/docker-compose.yml -O docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Milvus Segment Interface Structure\nDESCRIPTION: Lists the main interfaces and implementations for Milvus segments, including both Growing and Sealed segment types. The structure shows the hierarchy from public interfaces to internal implementations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/segment_overview.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. `SegmentInterface`\n2. `SegmentGrowing` & `CreateGrowingSegment`\n3. `SegmentSealed` & `CreateSealedSegment`\n\nOther internal functions are hidden as implementation details in the following classes:\n\n1. `SegmentInternalInterface`\n2. `SegmentGrowingImpl`\n3. `SegmentSealedImpl`\n```\n\n----------------------------------------\n\nTITLE: Defining Field Schema in Go for Milvus\nDESCRIPTION: This code snippet defines the structure for a field schema in Milvus using Go. It includes properties such as field ID, name, primary key flag, description, data type, and parameters for type and index.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype FieldSchema struct {\n\tFieldID      int64\n\tName         string\n\tIsPrimaryKey bool\n\tDescription  string\n\tDataType     DataType\n\tTypeParams   []*commonpb.KeyValuePair\n\tIndexParams  []*commonpb.KeyValuePair\n\tAutoID       bool\n}\n```\n\n----------------------------------------\n\nTITLE: Growing Segment Time Travel Algorithm\nDESCRIPTION: Describes the three-step process for implementing time travel in growing segments, focusing on ascending time order insertion, binary search for timestamp location, and vector search interface integration.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/timetravel.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. When inserting, ensure that the inserted data is in ascending time order.\n2. Find the location of timestamp with binary search and record it as vec_count.\n3. Call vector_search interface and rest is handled inside segment, no need to handle bitmask generated by DSL.\n```\n\n----------------------------------------\n\nTITLE: Defining ShowPartitions gRPC Method in Protobuf\nDESCRIPTION: Defines the ShowPartitions gRPC method for retrieving partition descriptions. It takes a ShowPartitionsRequest and returns a StringListResponse.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_19\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc ShowPartitions(ShowPartitionsRequest) returns (StringListResponse) {}\n```\n\n----------------------------------------\n\nTITLE: Defining GetCollectionStatistics Structures in Go\nDESCRIPTION: Structures for requesting and responding with collection statistics. Includes request structure with database and collection IDs and response structure containing key-value pairs of statistics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype GetCollectionStatisticsRequest struct {\n\tBase         *commonpb.MsgBase\n\tDbID         int64\n\tCollectionID int64\n}\n\ntype GetCollectionStatisticsResponse struct {\n\tStats  []*commonpb.KeyValuePair\n\tStatus *commonpb.Status\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskQueue Interface and Base Implementation in Go\nDESCRIPTION: Defines the TaskQueue interface and baseTaskQueue implementation for managing tasks in the Proxy. The queue maintains unissued and active tasks with locking mechanisms for thread safety.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype TaskQueue interface {\n\tutChan() <-chan int\n\tUTEmpty() bool\n\tutFull() bool\n\taddUnissuedTask(t task) error\n\tFrontUnissuedTask() task\n\tPopUnissuedTask() task\n\tAddActiveTask(t task)\n\tPopActiveTask(ts Timestamp) task\n\tgetTaskByReqID(reqID UniqueID) task\n\tTaskDoneTest(ts Timestamp) bool\n\tEnqueue(t task) error\n}\n\ntype baseTaskQueue struct {\n\tunissuedTasks *list.List\n\tactiveTasks   map[Timestamp]task\n\tutLock        sync.Mutex\n\tatLock        sync.Mutex\n\n\tmaxTaskNum int64\n\n\tutBufChan chan int\n\n\tsched *TaskScheduler\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Format Structure for Milvus Binlog\nDESCRIPTION: Defines the binary structure of event format in Milvus Binlog, including event header (timestamp, type code, event length, next position) and event data (fixed and variable parts).\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap08_binlog.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n+=====================================+=====================================================================+\n| event  | Timestamp         0 : 8    | create timestamp                                                    |\n| header +----------------------------+---------------------------------------------------------------------+\n|        | TypeCode          8 : 1    | event type code                                                     |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | EventLength       9 : 4    | length of event, including header and data                          |\n|        +----------------------------+---------------------------------------------------------------------+\n|        | NextPosition     13 : 4    | offset of next event from the start of file                         |\n+=====================================+=====================================================================+\n| event  | fixed part       17 : x    |                                                                     |\n| data   +----------------------------+---------------------------------------------------------------------+\n|        | variable part              |                                                                     |\n+=====================================+=====================================================================+\n```\n\n----------------------------------------\n\nTITLE: Defining RootCoord Service for Channel TimeTick Updates in Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for the RootCoord service's UpdateChannelTimeTick RPC and the ChannelTimeTickMsg. This service allows Proxy components to report their latest timestamps for each message stream to RootCoord.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211215-milvus_timesync.md#2025-04-10_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nservice RootCoord {\n    ...\n    rpc UpdateChannelTimeTick(internal.ChannelTimeTickMsg) returns (common.Status) {}\n    ... \n}\n\nmessage ChannelTimeTickMsg {\n  common.MsgBase base = 1;\n  repeated string channelNames = 2;\n  repeated uint64 timestamps = 3;\n  uint64 default_timestamp = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Local Benchmark Test\nDESCRIPTION: Command to execute a local benchmark test using a specific test suite configuration\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/benchmark/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd milvus_benchmark/ && python main.py --local --host=* --port=19530 --suite=suites/2_insert_data.yaml\n```\n\n----------------------------------------\n\nTITLE: SegmentSealedImpl Data Structure Definition\nDESCRIPTION: Documents the internal data structures of SegmentSealedImpl including row counts, bitsets, indexes, and field data storage mechanisms.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/segment_sealed.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. `row_count_opt_`:\n   1. Fill row count when loading the first entity\n   2. All the other columns loaded must match the same row count\n3. `xxx_ready_bitset_` & `system_ready_count_`\n   1. Used to record whether the corresponding column is loaded. Bitset corresponds to FieldOffset\n   2. Query is executable if and only if all the following conditions are met:\n      1. system_ready_count_ == 2， which means all the system columns' RowId/Timestamp are loaded\n      2. The scalar columns involved in the query is loaded\n      3. For the vector columns involved in the query, either the original data or the index is loaded\n4. `scalar_indexings_`: store scalar index\n   1. Use StructuredSortedIndex in Knowhere\n5. `primary_key_index_`: store index for pk column\n   1. Use brand new ScalarIndexBase format\n   2. **Note: The functions here may overlap with scalar indexes. It is recommended to replace scalar index with ScalarIndexBase**\n6. `field_datas_`: store original data\n   1. `aligned_vector<char>` format guarantees `int/float` data are aligned\n7. `SealedIndexingRecord vecindexs_`: store vector index\n8. `row_ids_/timestamps_`: RowId/Timestamp data\n9. `TimestampIndex`: Index for Timestamp column\n10. `schema`: schema\n```\n\n----------------------------------------\n\nTITLE: Defining Data Types Enum in Protobuf for Milvus\nDESCRIPTION: This code snippet defines an enumeration of data types supported by Milvus using Protobuf. It includes various integer types, floating-point types, string, and vector types.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nenum DataType {\n  NONE  = 0;\n  BOOL  = 1;\n  INT8  = 2;\n  INT16 = 3;\n  INT32 = 4;\n  INT64 = 5;\n\n  FLOAT  = 10;\n  DOUBLE = 11;\n\n  STRING = 20;\n\n  VECTOR_BINARY = 100;\n  VECTOR_FLOAT  = 101;\n}\n```\n\n----------------------------------------\n\nTITLE: Task Scheduler Statistics Interface in Go\nDESCRIPTION: Defines the statistics and monitoring interfaces for the task scheduler. It implements ActiveComponent interfaces for system monitoring and health checks.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// ActiveComponent interfaces\nfunc (sched *taskScheduler) Id() String\nfunc (sched *taskScheduler) Status() Status\nfunc (sched *taskScheduler) Clean() Status\nfunc (sched *taskScheduler) Restart() Status\nfunc (sched *taskScheduler) heartbeat()\n\n// protobuf\nmessage taskSchedulerHeartbeat {\n\tstring id\n\tuint64 dd_queue_length\n\tuint64 dm_queue_length\n\tuint64 dq_queue_length\n\tuint64 num_dd_done\n\tuint64 num_dm_done\n\tuint64 num_dq_done\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataCoord Flush Service in Protocol Buffers\nDESCRIPTION: This Protocol Buffers snippet defines the Flush service for DataCoord, including FlushRequest and FlushResponse messages used for communication between Proxy and DataCoord.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211109-milvus_flush_collections.md#2025-04-10_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nservice DataCoord {\n  ...\n  rpc Flush(FlushRequest) returns (FlushResponse) {}\n  ...\n}\n\nmessage FlushRequest {\n  common.MsgBase base = 1;\n  int64 dbID = 2;\n  int64 collectionID = 4;\n}\n\nmessage FlushResponse {\n  common.Status status = 1;\n  int64 dbID = 2;\n  int64 collectionID = 3;\n  repeated int64 segmentIDs = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QueryNode ReleaseCollection RPC in Protocol\nDESCRIPTION: Protocol definition for the ReleaseCollection RPC method in the QueryNode service. This defines how QueryCoord communicates with QueryNode to release collection resources.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_8\n\nLANGUAGE: proto\nCODE:\n```\nservice QueryNode {\n    ...\n\n    rpc ReleaseCollection(ReleaseCollectionRequest) returns (common.Status) {}\n\n    ...\n}\n\nmessage ReleaseCollectionRequest {\n    common.MsgBase base = 1;\n    int64 dbID = 2;\n    int64 collectionID = 3;\n    int64 nodeID = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Txn Base Interface in Go\nDESCRIPTION: Extends the BaseKV interface with additional methods for transactional operations on key-value pairs.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype TxnKV interface {\n\tBaseKV\n\n\tMultiSaveAndRemove(saves map[string]string, removals []string) error\n\tMultiRemoveWithPrefix(keys []string) error\n\tMultiSaveAndRemoveWithPrefix(saves map[string]string, removals []string) error\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RHNSW_PQ Search Parameters in Python\nDESCRIPTION: Search parameters configuration for RHNSW_PQ index including topk, query vectors, metric type, and ef (search scope) parameter.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n\n    #Special for RHNSW_PQ\n    \"ef\": 64          # int. top_k~32768\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Chaos Test Scenarios in Bash\nDESCRIPTION: Commands to run multiple chaos test scenarios in a category manually, using the example of network partition chaos for all pods. This involves updating the chaos YAML files and executing the pytest command.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/chaos/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /milvus/tests/python_client/chaos\n\npytest test_chaos.py --host ${Milvus_IP} -v\n```\n\n----------------------------------------\n\nTITLE: Defining SegmentManager Interface in Go\nDESCRIPTION: Interface for managing segments with methods to put, get, and remove segments while handling reference counting for corresponding collections.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ntype SegmentManager interface {\n    // Put puts the given segments in,\n    // and increases the ref count of the corresponding collection,\n    // dup segments will not increase the ref count\n    Put(segmentType SegmentType, segments ...*Segment)\n    Get(segmentID UniqueID) *Segment\n    GetSealed(segmentID UniqueID) *Segment \n    GetGrowing(segmentID UniqueID) *Segment\n    // Remove removes the given segment,\n    // and decreases the ref count of the corresponding collection,\n    // will not decrease the ref count if the given segment not exists\n    Remove(segmentID UniqueID, scope querypb.DataScope)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RHNSW_SQ Search Parameters in Python\nDESCRIPTION: Search parameters configuration for RHNSW_SQ index including topk, query vectors, metric type, and ef parameter for search scope.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n    #Special for RHNSW_SQ\n    \"ef\": 64          # int. top_k~32768\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Invalidation Request in Go\nDESCRIPTION: Request structure for invalidating collection metadata cache.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype InvalidateCollMetaCacheRequest struct {\n\tBase           *commonpb.MsgBase\n\tDbName         string\n\tCollectionName string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Stream Service Client Interface in Go\nDESCRIPTION: Defines the Client interface for Message Stream Service with methods for creating, destroying, and describing channels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Client interface {\n\tCreateChannels(req CreateChannelRequest) (CreateChannelResponse, error)\n\tDestroyChannels(req DestroyChannelRequest) error\n\tDescribeChannels(req DescribeChannelRequest) (DescribeChannelResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Parameter Table in Go\nDESCRIPTION: Defines the GlobalParamsTable struct that stores configuration parameters for the Proxy, including network settings, message channels, and operational constraints.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype GlobalParamsTable struct {\n\tparamtable.BaseTable\n\n\tNetworkPort    int\n\tIP             string\n\tNetworkAddress string\n\n\tMasterAddress string\n\tPulsarAddress string\n\tRocksmqPath   string\n\n\tRocksmqRetentionTimeInMinutes int64\n\tRocksmqRetentionSizeInMB \t  int64\n\n\tProxyID                            UniqueID\n\tTimeTickInterval                   time.Duration\n\tInsertChannelNames                 []string\n\tDeleteChannelNames                 []string\n\tK2SChannelNames                    []string\n\tSearchChannelNames                 []string\n\tSearchResultChannelNames           []string\n\tProxySubName                       string\n\tProxyTimeTickChannelNames          []string\n\tDataDefinitionChannelNames         []string\n\tMsgStreamTimeTickBufSize           int64\n\tMaxNameLength                      int64\n\tMaxFieldNum                        int64\n\tMaxDimension                       int64\n\tDefaultPartitionName               string\n\tDefaultIndexName                   string\n}\n\nvar Params ParamTable\n```\n\n----------------------------------------\n\nTITLE: Defining SnapShotKV Interface in Go\nDESCRIPTION: Defines the SnapShotKV interface for snapshot-based key-value operations, including timestamp-aware save and load methods.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype SnapShotKV interface {\n\tSave(key string, value string, ts typeutil.Timestamp) error\n\tLoad(key string, ts typeutil.Timestamp) (string, error)\n\tMultiSave(kvs map[string]string, ts typeutil.Timestamp, additions ...func(ts typeutil.Timestamp) (string, string, error)) error\n\tLoadWithPrefix(key string, ts typeutil.Timestamp) ([]string, []string, error)\n\tMultiSaveAndRemoveWithPrefix(saves map[string]string, removals []string, ts typeutil.Timestamp, additions ...func(ts typeutil.Timestamp) (string, string, error)) error\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Query Task Queue in Go\nDESCRIPTION: Implements a specialized task queue for data query operations. It handles search and query operations with consideration for result visibility relative to insert operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype dqTaskQueue struct {\n\tbaseTaskQueue\n}\nfunc (queue *dqTaskQueue) Enqueue(task *task) error\n\nfunc newDqTaskQueue() *dqTaskQueue\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionManager Interface in Go\nDESCRIPTION: Interface for managing collections with an LRU cache. It retrieves collections from QueryCoord if not in cache, reducing coordination overhead.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\ntype CollectionManager interface {\n    // Get returns collection within a LRU cache,\n    // it will pull the collection from QueryCoord if it's not in the cache,\n    // returns error if failed to pull\n    Get(collectionID int64) (*Collection, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Base Structure in Go\nDESCRIPTION: Basic message structure containing message type, ID, timestamp and source ID fields.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MsgBase struct {\n\tMsgType   MsgType\n\tMsgID     UniqueID\n\tTimestamp uint64\n\tSourceID  UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing mqMsgStream Structure in Go\nDESCRIPTION: Defines the mqMsgStream structure for managing message streams with various properties and synchronization primitives.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype mqMsgStream struct {\n\tctx              context.Context\n\tclient           mqclient.Client\n\tproducers        map[string]mqclient.Producer\n\tproducerChannels []string\n\tconsumers        map[string]mqclient.Consumer\n\tconsumerChannels []string\n\trepackFunc       RepackFunc\n\tunmarshal        UnmarshalDispatcher\n\treceiveBuf       chan *MsgPack\n\twait             *sync.WaitGroup\n\tstreamCancel     func()\n\tbufSize          int64\n\tproducerLock     *sync.Mutex\n\tconsumerLock     *sync.Mutex\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DataCoord GetInsertBinlogPaths gRPC Service\nDESCRIPTION: Proto definition for the GetInsertBinlogPaths RPC in the DataCoord service, including request and response message structures.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\nservice DataCoord {\n    ...\n\n    rpc GetInsertBinlogPaths(GetInsertBinlogPathsRequest) returns (GetInsertBinlogPathsResponse) {}\n\n    ...\n}\n\nmessage GetInsertBinlogPathsRequest {\n  common.MsgBase base = 1;\n  int64 segmentID = 2;\n}\n\nmessage GetInsertBinlogPathsResponse {\n  repeated int64 fieldIDs = 1;\n  repeated internal.StringList paths = 2;\n  common.Status status = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RocksMQ Structures and Methods in Go\nDESCRIPTION: Defines structures and methods for RocksMQ, a RocksDB-based messaging/streaming library, including message types and operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype ProducerMessage struct {\n\tpayload []byte\n}\n\ntype ConsumerMessage struct {\n\tmsgID\tUniqueID\n\tpayload []byte\n}\n\ntype IDAllocator interface {\n\tAlloc(count uint32) (UniqueID, UniqueID, error)\n\tAllocOne() (UniqueID, error)\n\tUpdateID() error\n}\n\ntype RocksMQ struct {\n\tstore\t\t*gorocksdb.DB\n\tkv\t\t\tkv.Base\n\tidAllocator IDAllocator\n\tproduceMu\tsync.Mutex\n\tconsumeMu\tsync.Mutex\n}\n\nfunc (rmq *RocksMQ) CreateChannel(channelName string) error\nfunc (rmq *RocksMQ) DestroyChannel(channelName string) error\nfunc (rmq *RocksMQ) CreateConsumerGroup(groupName string) error\nfunc (rmq *RocksMQ) DestroyConsumerGroup(groupName string) error\nfunc (rmq *RocksMQ) Produce(channelName string, messages []ProducerMessage) error\nfunc (rmq *RocksMQ) Consume(groupName string, channelName string, n int) ([]ConsumerMessage, error)\nfunc (rmq *RocksMQ) Seek(groupName string, channelName string, msgID MessageID) error\n\nfunc NewRocksMQ(name string, idAllocator IDAllocator) (*RocksMQ, error)\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory KV Store in Go\nDESCRIPTION: Implements the TxnKV interface using an in-memory btree structure, providing methods for key-value operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype MemoryKV struct {\n\tsync.RWMutex\n\ttree *btree.BTree\n}\n\nfunc (s memoryKVItem) Less(than btree.Item) bool\nfunc (kv *MemoryKV) Load(key string) (string, error)\nfunc (kv *MemoryKV) LoadRange(key, endKey string, limit int) ([]string, []string, error)\nfunc (kv *MemoryKV) Save(key, value string) error\nfunc (kv *MemoryKV) Remove(key string) error\nfunc (kv *MemoryKV) MultiLoad(keys []string) ([]string, error)\nfunc (kv *MemoryKV) MultiSave(kvs map[string]string) error\nfunc (kv *MemoryKV) MultiRemove(keys []string) error\nfunc (kv *MemoryKV) MultiSaveAndRemove(saves map[string]string, removals []string) error\nfunc (kv *MemoryKV) LoadWithPrefix(key string) ([]string, []string, error)\nfunc (kv *MemoryKV) Close()\nfunc (kv *MemoryKV) MultiRemoveWithPrefix(keys []string) error\nfunc (kv *MemoryKV) MultiSaveAndRemoveWithPrefix(saves map[string]string, removals []string) error\n```\n\n----------------------------------------\n\nTITLE: Defining timetickSync Structure in Go for Milvus Time Synchronization\nDESCRIPTION: Defines the timetickSync struct which handles time synchronization across Milvus components. It maintains proxy time tick information, provides channels for sending time tick messages, and manages DDL (Data Definition Language) timestamp information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype timetickSync struct {\n\tcore          *Core\n\tlock          sync.Mutex\n\tproxyTimeTick map[typeutil.UniqueID]*channelTimeTickMsg\n\tsendChan      chan map[typeutil.UniqueID]*channelTimeTickMsg\n\n\t// record ddl timetick info\n\tddlLock  sync.RWMutex\n\tddlMinTs typeutil.Timestamp\n\tddlTsSet map[typeutil.Timestamp]struct{}\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Milvus Code Review Process\nDESCRIPTION: Detailed documentation explaining the code review process, requirements for PR approval, reviewer responsibilities, and best practices for conducting code reviews in the Milvus project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CODE_REVIEW.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Milvus Code Review Guide\n\nAll PRs are checked in automatically by the sre-robot, with the following conditions:\n\n1. DCO check passed\n2. All test passed and code coverage check passed, with a `ci-passed` label\n   - Notes: If there is a `[skip e2e]` tag in the commit message, it skips running e2e tests automatically,\n     but it still runs UT tests and code checkers.\n3. Reviewer passed, with a `/lgtm` label\n4. Approver passed, with a `/approve` label\n\nGenerally speaking, reviewer is volunteered and can be anyone in the community who is familiar with the packages the PR modifies.\nReviewers are responsible for the logic correctness, error handling, unit test coverage and code readability.\nWhile Approver focuses on overall design, code readability, and ensuring the PR follows code of\nconduct(Such as meaningful title and commit message, marked with correct labels, meaningful comments). Currently,\nall Approvers are listed under OWNERS_ALIASES file.\n```\n\n----------------------------------------\n\nTITLE: timetickSync API Functions for Milvus Time Synchronization\nDESCRIPTION: Provides the function signatures for interacting with the timetickSync component, including methods for updating time ticks, managing proxies, and sending channel time ticks. These functions ensure time synchronization across the distributed system.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc newTimeTickSync(core *Core) *timetickSync\n\nfunc (t *timetickSync) UpdateTimeTick(in *internalpb.ChannelTimeTickMsg) error\nfunc (t *timetickSync) DelProxy(sess *sessionutil.Session)\nfunc (t *timetickSync) GetProxy(sess []*sessionutil.Session)\nfunc (t *timetickSync) StartWatch()\nfunc (t *timetickSync) SendChannelTimeTick(chanName string, ts typeutil.Timestamp) error\nfunc (t *timetickSync) GetProxyNum()\nfunc (t *timetickSync) GetChanNum() int\n```\n\n----------------------------------------\n\nTITLE: Defining DataNodeTtMsg in Protocol Buffers\nDESCRIPTION: This Protocol Buffers snippet defines the DataNodeTtMsg structure used by DataNode to report timestamps to DataCoord when consuming packages from MsgStream.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211109-milvus_flush_collections.md#2025-04-10_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\nmessage DataNodeTtMsg {\n  common.MsgBase base = 1;\n  string channel_name = 2;\n  uint64 timestamp = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VchannelInfo and WatchDmChannelsRequest in Protocol Buffers\nDESCRIPTION: This code snippet defines two Protocol Buffer messages: VchannelInfo and WatchDmChannelsRequest. VchannelInfo contains details about a vchannel including collection ID, channel name, seek position, and segment information. WatchDmChannelsRequest is used to request watching multiple vchannels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20210604-datanode_flowgraph_recovery_design.md#2025-04-10_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nmessage VchannelInfo {\n  int64 collectionID = 1;\n  string channelName = 2;\n  msgpb.MsgPosition seek_position = 3;\n  repeated SegmentInfo unflushedSegments = 4;\n  repeated int64 flushedSegments = 5;\n}\n\nmessage WatchDmChannelsRequest {\n  common.MsgBase base = 1;\n  repeated VchannelInfo vchannels = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskQueue Interface in Go for Milvus TaskScheduler\nDESCRIPTION: Interface definition for taskQueue that manages unissued and active tasks. It provides methods for task queue management, including adding, retrieving, and processing tasks based on their status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype taskQueue interface {\n  utChan() <-chan int\n  utEmpty() bool\n  utFull() bool\n  addUnissuedTask(t task) error\n  FrontUnissuedTask() task\n  PopUnissuedTask() task\n  AddActiveTask(t task)\n  PopActiveTask(tID UniqueID) task\n  getTaskByReqID(reqID UniqueID) task\n  TaskDoneTest(ts Timestamp) bool\n  Enqueue(t task) error\n\tsetMaxTaskNum(num int64)\n\tgetMaxTaskNum() int64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Graph Components in Go\nDESCRIPTION: Defines structures and interfaces for the Time Ticked Flow Graph, including states, messages, nodes, and the graph itself.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype flowGraphStates struct {\n\tstartTick         Timestamp\n\tnumActiveTasks    map[string]int32\n\tnumCompletedTasks map[string]int64\n}\n\ntype Msg interface {\n\tTimeTick() Timestamp\n}\n\ntype Node interface {\n\tName() string\n\tMaxQueueLength() int32\n\tMaxParallelism() int32\n\tOperate(ctx context.Context, in []Msg) ([]Msg, context.Context)\n\tIsInputNode() bool\n\tClose()\n}\n\ntype BaseNode struct {\n\tmaxQueueLength int32\n\tmaxParallelism int32\n}\n\ntype TimeTickedFlowGraph struct {\n\tctx     context.Context\n\tnodeCtx map[NodeName]*nodeCtx\n}\n\nfunc NewTimeTickedFlowGraph(ctx context.Context) *TimeTickedFlowGraph\n```\n\n----------------------------------------\n\nTITLE: Implementing TimeTick Mechanism in Go\nDESCRIPTION: Implements the timeTick struct that manages system-wide time synchronization. It periodically sends time tick messages and synchronizes with the global timestamp allocator.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype timeTick struct {\n\tlastTick Timestamp\n\tcurrentTick Timestamp\n\twallTick Timestamp\n\ttickStep Timestamp\n\tsyncInterval Timestamp\n\n\ttsAllocator *TimestampAllocator\n\tscheduler *taskScheduler\n\tttStream *MessageStream\n\n\tctx context.Context\n}\n\nfunc (tt *timeTick) Start() error\nfunc (tt *timeTick) synchronize() error\n\nfunc newTimeTick(ctx context.Context, tickStep Timestamp, syncInterval Timestamp, tsAllocator *TimestampAllocator, scheduler *taskScheduler, ttStream *MessageStream) *timeTick\n```\n\n----------------------------------------\n\nTITLE: Defining IndexCoord BuildIndex gRPC Service\nDESCRIPTION: Proto definition for the BuildIndex RPC in the IndexCoord service, including request and response message structures.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\nservice IndexCoord {\n  ...\n\n  rpc BuildIndex(BuildIndexRequest) returns (BuildIndexResponse){}\n\n  ...\n}\n\nmessage BuildIndexRequest {\n  int64 indexBuildID = 1;\n  string index_name = 2;\n  int64 indexID = 3;\n  repeated string data_paths = 5;\n  repeated common.KeyValuePair type_params = 6;\n  repeated common.KeyValuePair index_params = 7;\n}\n\nmessage BuildIndexResponse {\n  common.Status status = 1;\n  int64 indexBuildID = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expression Grammar in EBNF for Milvus\nDESCRIPTION: This grammar definition in EBNF describes the syntax for expressions in Milvus. It includes logical expressions, comparison operations, term expressions, and arithmetic operations with their respective operators.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-query_boolean_expr.md#2025-04-10_snippet_0\n\nLANGUAGE: haskell\nCODE:\n```\nExpr :=\n    LogicalExpr | NIL\n\nLogicalExpr :=\n    LogicalExpr BinaryLogicalOp LogicalExpr\n  | UnaryLogicalOp LogicalExpr\n  | \"(\" LogicalExpr \")\"\n  | SingleExpr\n\nBinaryLogicalOp :=\n    \"&&\" | \"and\"\n  | \"||\" | \"or\"\n\nUnaryLogicalOp :=\n    \"not\"\n\nSingleExpr :=\n    TermExpr\n  | CompareExpr\n\nTermExpr :=\n    IDENTIFIER \"in\" ConstantArray\n\nConstantArray :=\n    \"[\" ConstantExpr { \",\" ConstantExpr } \"]\"\n\nConstantExpr :=\n    Constant\n  | ConstantExpr BinaryArithOp ConstantExpr\n  | UnaryArithOp ConstantExpr\n\nConstant :=\n    INTEGER\n  | FLOAT_NUMBER\n\nUnaryArithOp :=\n    \"+\"\n  | \"-\"\n\nBinaryArithOp :=\n    \"+\"\n  | \"-\"\n  | \"*\"\n  | \"/\"\n  | \"%\"\n  | \"**\"\n\nCompareExpr :=\n    IDENTIFIER CmpOp IDENTIFIER\n  | IDENTIFIER CmpOp ConstantExpr\n  | ConstantExpr CmpOp IDENTIFIER\n  | ConstantExpr CmpOpRestricted IDENTIFIER CmpOpRestricted ConstantExpr\n\nCmpOpRestricted :=\n    \"<\"\n  | \"<=\"\n\nCmpOp :=\n    \">\"\n  | \">=\"\n  | \"<\"\n  | \"<=\"\n  | \"==\"\n  | \"!=\"\n\nINTEGER := 整数\nFLOAT_NUM := 浮点数\nIDENTIFIER := 列名\n```\n\n----------------------------------------\n\nTITLE: Implementing DropPartition Message Structures in Go for Milvus\nDESCRIPTION: Defines request and message structures for dropping a partition in Milvus. Contains identifiers needed to locate and remove the specified partition from a collection.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype DropPartitionRequest struct {\n\tBase           *commonpb.MsgBase\n\tDbName         string\n\tCollectionName string\n\tPartitionName  string\n\tDbID           UniqueID\n\tCollectionID   UniqueID\n\tPartitionID    UniqueID\n}\n\ntype DropPartitionMsg struct {\n\tBaseMsg\n\tDropPartitionRequest\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KV Base Interface in Go\nDESCRIPTION: Defines the BaseKV interface with methods for basic key-value operations such as load, save, and remove.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype BaseKV interface {\n\tLoad(key string) (string, error)\n\tMultiLoad(keys []string) ([]string, error)\n\tLoadWithPrefix(key string) ([]string, []string, error)\n\tSave(key, value string) error\n\tMultiSave(kvs map[string]string) error\n\tRemove(key string) error\n\tMultiRemove(keys []string) error\n\tRemoveWithPrefix(key string) error\n\n\tClose()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FlushAndDropRequest Message Structure in Protobuf\nDESCRIPTION: Defines a protobuf message structure for FlushAndDrop RPC that operates at vchannel scope. It includes fields for message base, channel ID, collection ID, and segment binlog paths. This structure is part of Plan 2 for enhancing the DropCollection process.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211224-drop_collection_release_resources.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage FlushAndDropRequest {\n  common.MsgBase base = 1;\n  string channelID = 2;\n  int64 collectionID = 3;\n  repeated SegmentBinlogPaths segment_binlog_paths = 6;\n}\n\nmessage SegmentBinlogPaths {\n  int64 segmentID = 1;\n  CheckPoint checkPoint = 2;\n  repeated FieldBinlog field2BinlogPaths = 2;\n  repeated FieldBinlog field2StatslogPaths = 3;\n  repeated DeltaLogInfo deltalogs = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Definition Task Queue in Go\nDESCRIPTION: Implements a specialized task queue for data definition operations (like creating collections). It enforces timestamp ordering for collection creation and other metadata operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype ddTaskQueue struct {\n\tbaseTaskQueue\n\tlock sync.Mutex\n}\nfunc (queue *ddTaskQueue) Enqueue(task *task) error\n\nfunc newDdTaskQueue() *ddTaskQueue\n```\n\n----------------------------------------\n\nTITLE: Defining Timestamp Structure in Go\nDESCRIPTION: Defines the structure for timestamps using a 64-bit integer, split into physical and logical components for Hybrid Logical Clock implementation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype timestamp struct {\n\tphysical uint64 // 18-63 bits\n\tlogical uint64  // 0-17 bits\n}\n\ntype Timestamp uint64\n```\n\n----------------------------------------\n\nTITLE: Defining Component State Structures in Go\nDESCRIPTION: Defines structures for representing component states, including state codes, component info, and overall component states.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype StateCode = int\n\nconst (\n\tINITIALIZING StateCode = 0\n\tHEALTHY      StateCode = 1\n\tABNORMAL     StateCode = 2\n)\n\ntype ComponentInfo struct {\n\tNodeID    UniqueID\n\tRole      string\n\tStateCode StateCode\n\tExtraInfo []*commonpb.KeyValuePair\n}\n\ntype ComponentStates struct {\n\tState                *ComponentInfo\n\tSubcomponentStates   []*ComponentInfo\n\tStatus               *commonpb.Status\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IndexCoord GetIndexStates gRPC Service\nDESCRIPTION: Proto definition for the GetIndexStates RPC in the IndexCoord service, including request and response message structures and related enums.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_8\n\nLANGUAGE: proto\nCODE:\n```\nservice IndexCoord {\n  ...\n\n  rpc GetIndexStates(GetIndexStatesRequest) returns (GetIndexStatesResponse) {}\n\n  ...\n}\n\nmessage GetIndexStatesRequest {\n  repeated int64 indexBuildIDs = 1;\n}\n\nmessage GetIndexStatesResponse {\n  common.Status status = 1;\n  repeated IndexInfo states = 2;\n}\n\nmessage IndexInfo {\n  common.IndexState state = 1;\n  int64 indexBuildID = 2;\n  int64 indexID = 3;\n  string index_name = 4;\n  string reason = 5;\n}\n\nenum IndexState {\n    IndexStateNone = 0;\n    Unissued = 1;\n    InProgress = 2;\n    Finished = 3;\n    Failed = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MinIO KV Store in Go\nDESCRIPTION: Implements the KV interface using MinIO as the backend storage, providing methods for key-value operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ntype MinIOKV struct {\n\tctx         context.Context\n\tminioClient *minio.Client\n\tbucketName  string\n}\n\nfunc (kv *MinIOKV) LoadWithPrefix(key string) ([]string, []string, error)\nfunc (kv *MinIOKV) Load(key string) (string, error)\nfunc (kv *MinIOKV) MultiLoad(keys []string) ([]string, error)\nfunc (kv *MinIOKV) Save(key, value string) error\nfunc (kv *MinIOKV) MultiSave(kvs map[string]string) error\nfunc (kv *MinIOKV) RemoveWithPrefix(key string) error\nfunc (kv *MinIOKV) Remove(key string) error\nfunc (kv *MinIOKV) MultiRemove(keys []string) error\nfunc (kv *MinIOKV) Close()\n```\n\n----------------------------------------\n\nTITLE: Defining BaseMsg Structure in Go for Milvus Message Processing\nDESCRIPTION: BaseMsg structure serves as the foundation for all messages in Milvus, containing context, timestamps, hash values, and message position information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype BaseMsg struct {\n\tCtx            context.Context\n\tBeginTimestamp Timestamp\n\tEndTimestamp   Timestamp\n\tHashValues     []uint32\n\tMsgPosition    *MsgPosition\n}\n```\n\n----------------------------------------\n\nTITLE: Data Insertion Options Configuration in Go\nDESCRIPTION: Demonstrates how to configure data insertion options using the fluent interface pattern, specifying data characteristics such as record count, dimensions, and text language.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ninsertOption := hp.TNewDataOption().\n    TWithNb(1000).           // Number of records\n    TWithDim(128).           // Vector dimension\n    TWithStart(100).         // Starting ID\n    TWithMaxLen(256).        // Maximum length\n    TWithTextLang(\"en\")      // Text language\n```\n\n----------------------------------------\n\nTITLE: Implementing DestroyChannels Request Structure in Go\nDESCRIPTION: Defines the structure for DestroyChannels request with a list of channel names.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype DestroyChannelRequest struct {\n\tChannelNames []string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Timestamp Oracle in Go\nDESCRIPTION: Defines the timestampOracle struct and its methods for initializing, resetting, and updating timestamps in a distributed system.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype timestampOracle struct {\n\tkey   string\n\ttxnkv kv.TxnKV\n\n\tsaveInterval  time.Duration\n\tmaxResetTSGap func() time.Duration\n\n\tTSO           unsafe.Pointer\n\tlastSavedTime atomic.Value\n}\n\nfunc (t *timestampOracle) InitTimestamp() error\nfunc (t *timestampOracle) ResetUserTimestamp(tso uint64) error\nfunc (t *timestampOracle) UpdateTimestamp() error\nfunc (t *timestampOracle) ResetTimestamp()\n```\n\n----------------------------------------\n\nTITLE: Defining Global Parameter Table in Go\nDESCRIPTION: Defines the BaseTable struct and its methods for loading and parsing global parameters from various sources.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype BaseTable struct {\n\tparams *memkv.MemoryKV\n}\n\nfunc (gp *BaseTable) Init()\nfunc (gp *BaseTable) LoadFromKVPair(kvPairs []*commonpb.KeyValuePair) error\nfunc (gp *BaseTable) Load(key string) (string, error)\nfunc (gp *BaseTable) LoadRange(key, endKey string, limit int) ([]string, []string, error)\nfunc (gp *BaseTable) LoadYaml(fileName string) error\nfunc (gp *BaseTable) ParseFloat(key string) float64\nfunc (gp *BaseTable) ParseInt64(key string) int64\nfunc (gp *BaseTable) ParseInt32(key string) int32\nfunc (gp *BaseTable) ParseInt(key string) int\nfunc (gp *BaseTable) WriteNodeIDList() []UniqueID\nfunc (gp *BaseTable) DataNodeIDList() []UniqueID\nfunc (gp *BaseTable) ProxyIDList() []UniqueID\nfunc (gp *BaseTable) QueryNodeIDList() []UniqueID\n```\n\n----------------------------------------\n\nTITLE: Defining New Parameter Option Types in Go\nDESCRIPTION: Shows how to define new option types for extending the test framework with additional parameters and configurations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// In helper/data_helper.go\ntype YourNewOption struct {\n    newParam1 string\n    newParam2 int\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Index Request Rate in Milvus Index Coordinator with PromQL\nDESCRIPTION: This query calculates the average number of index building requests received per second by index coord within the past two minutes. It uses the milvus_indexcoord_indexreq_count metric and groups results by status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_66\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(increase(milvus_indexcoord_indexreq_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (status)\n```\n\n----------------------------------------\n\nTITLE: Example YAML Configuration for Global Parameter Table\nDESCRIPTION: Provides an example YAML configuration that can be loaded into the Global Parameter Table.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\netcd:\n  address: localhost\n  port: 2379\n  rootpath: milvus/etcd\n```\n\n----------------------------------------\n\nTITLE: Defining metaTable Structure in Go for Milvus Metadata Management\nDESCRIPTION: Defines the metaTable struct which maintains metadata both in memory and etcdKV, ensuring consistency across both storage locations. The struct includes maps for collections, partitions, segments, and indexes with various lookup capabilities.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype metaTable struct {\n\ttxn             kv.TxnKV                                                        // client of a reliable txnkv service, i.e. etcd client\n\tsnapshot        kv.SnapShotKV                                                   // client of a reliable snapshotkv service, i.e. etcd client\n\tcollID2Meta     map[typeutil.UniqueID]pb.CollectionInfo                         // collection_id -> meta\n\tcollName2ID     map[string]typeutil.UniqueID                                    // collection name to collection id\n\tcollAlias2ID    map[string]typeutil.UniqueID                                    // collection alias to collection id\n\tpartID2SegID    map[typeutil.UniqueID]map[typeutil.UniqueID]bool                // partition_id -> segment_id -> bool\n\tsegID2IndexMeta map[typeutil.UniqueID]map[typeutil.UniqueID]pb.SegmentIndexInfo // collection_id/index_id/partition_id/segment_id -> meta\n\tindexID2Meta    map[typeutil.UniqueID]pb.IndexInfo                              // collection_id/index_id -> meta\n\n\tproxyLock  sync.RWMutex\n\tddLock     sync.RWMutex\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Method Implementation in Go\nDESCRIPTION: Shows how to implement parameter setting methods using the fluent interface pattern, allowing for chainable configuration of options.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (opt *YourNewOption) TWithNewParam1(value string) *YourNewOption {\n    opt.newParam1 = value\n    return opt\n}\n\nfunc (opt *YourNewOption) TWithNewParam2(value int) *YourNewOption {\n    opt.newParam2 = value\n    return opt\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Partition Properties in Milvus Tests\nDESCRIPTION: This snippet demonstrates how to validate partition properties after creation, including name, description, emptiness status, and entity count using check_task and check_items parameters.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# create partition\npartition_w = self.init_partition_wrap(collection_w, partition_name, check_task=CheckTasks.check_partition_property, check_items={\"name\": partition_name, \"description\": description, \"is_empty\": True, \"num_entities\": 0})\n```\n\n----------------------------------------\n\nTITLE: Defining Allocator and ID Allocator in Go\nDESCRIPTION: Defines the Allocator struct and its methods, as well as the IDAllocator which extends the base Allocator.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Allocator struct {\n\tCtx        context.Context\n\tCancelFunc context.CancelFunc\n\n\twg sync.WaitGroup\n\n\tReqs      chan Request\n\tToDoReqs  []Request\n\tCanDoReqs []Request\n\tSyncReqs  []Request\n\n\tTChan         TickerChan\n\tForceSyncChan chan Request\n\n\tSyncFunc    func() bool\n\tProcessFunc func(req Request) error\n\n\tCheckSyncFunc func(timeout bool) bool\n\tPickCanDoFunc func()\n\tSyncErr       error\n\tRole          string\n}\n\ntype IDAllocator struct {\n\tAllocator\n\n\trootCoordAddress string\n\trootCoord types.RootCoord\n\n\tcountPerRPC uint32\n\n\tidStart UniqueID\n\tidEnd   UniqueID\n\n\tPeerID UniqueID\n}\n\nfunc NewIDAllocator(ctx context.Context, masterAddr string) (*IDAllocator, error)\n```\n\n----------------------------------------\n\nTITLE: Defining System Component Interface in Go\nDESCRIPTION: Defines the Component interface with methods for initialization, start, stop, and retrieving component states and statistics channels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Component interface {\n\tInit() error\n\tStart() error\n\tStop() error\n\tGetComponentStates(ctx context.Context) (*milvuspb.ComponentStates, error)\n\tGetStatisticsChannel(ctx context.Context) (*milvuspb.StringResponse, error)\n\tRegister() error\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing New Milvus Integration Test Suite in Go\nDESCRIPTION: This Go code snippet demonstrates the recommended structure for adding a new integration test suite using the testify/suite package and MiniClusterSuite. It includes optional setup and teardown methods.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/integration/README.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    // ...\n    \"github.com/milvus-io/milvus/tests/integration\"\n)\n\ntype NewSuite struct {\n    integration.MiniClusterSuite\n}\n\n\n// Setups and teardowns, optional if no custom logic needed\n// example to suite setup & teardown, same logic applies to test setup&teardown\n\nfunc (s *NewSuite) SetupSuite() {\n    s.MiniClusterSuite.SetupSuite()\n    // customized setup\n}\n\nfunc (s *NewSuite) TearDownSuite() {\n    s.MiniClusterSuite.TearDownSuite()\n    // customized teardown\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Insert Vector Count Rate in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average number of vectors inserted per second by each proxy within the past two minutes using the milvus_proxy_insert_vectors_count metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_insert_vectors_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Session Interface in Go\nDESCRIPTION: Defines the Session struct and related constants, along with methods for initialization, getting sessions, and watching services.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tDefaultServiceRoot = \"session/\"\n\tDefaultIDKey       = \"id\"\n\tDefaultRetryTimes  = 30\n\tDefaultTTL         = 60\n)\n\ntype Session struct {\n\tctx        context.Context\n\tServerID   int64  `json:\"ServerID,omitempty\"`\n\tServerName string `json:\"ServerName,omitempty\"`\n\tAddress    string `json:\"Address,omitempty\"`\n\tExclusive  bool   `json:\"Exclusive,omitempty\"`\n}\n\nfunc NewSession(ctx context.Context, metaRoot string, etcdEndpoints []string) *Session {}\n\nfunc (s *Session) Init(serverName, address string, exclusive bool) <-chan bool {}\n\nfunc (s *Session) GetSessions(prefix string) (map[string]*Session, int64, error) {}\n\nfunc (s *Session) WatchServices(prefix string, revision int64) (eventChannel <-chan *SessionEvent) {}\n```\n\n----------------------------------------\n\nTITLE: Defining etcd Key-Value Pairs in Go for Milvus Metadata Storage\nDESCRIPTION: Definition of key-value pair patterns used in etcd for storing various metadata entities in Milvus. Each key follows a hierarchical pattern representing the entity type and its identifiers.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n\"proxy/$proxyId\" string -> proxyMetaBlob string\n\"collection/$collectionId\" string -> collectionInfoBlob string\n\"partition/$collectionId/$partitionId\" string -> partitionInfoBlob string\n\"index/$collectionId/$indexId\" string -> IndexInfoBlob string\n\"segment-index/$collectionId/$indexId/$partitionId/$segmentId\" -> segmentIndexInfoBlog string\n```\n\n----------------------------------------\n\nTITLE: Named Arguments Implementation\nDESCRIPTION: Shows two approaches to implementing named arguments using strong types, including a more intuitive named argument syntax.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/NamedType/README.md#2025-04-10_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nusing FirstName = NamedType<std::string, struct FirstNameTag>;\nusing LastName = NamedType<std::string, struct LastNameTag>;\n\nstatic const FirstName::argument firstName;\nstatic const LastName::argument lastName;\n\nvoid displayName(FirstName const& theFirstName, LastName const& theLastName);\n\n// Call site\ndisplayName(firstName = \"John\", lastName = \"Doe\");\n```\n\n----------------------------------------\n\nTITLE: Replacing Go Module References to Use Local Protocol Buffer Definitions\nDESCRIPTION: Go commands to replace the remote milvus-proto repository with the local version, allowing for immediate testing of new definitions without waiting for upstream changes.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/how_to_develop_with_local_milvus_proto.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# go mod edit -replace github.com/milvus-io/milvus-proto/go-api/v2=/home/silverxia/workspace/milvus-proto/go-api \n# cd pkg\n// set pkg module as well\n# go mod edit -replace github.com/milvus-io/milvus-proto/go-api/v2=/home/silverxia/workspace/milvus-proto/go-api\n# cd ..\n```\n\n----------------------------------------\n\nTITLE: Defining WatchKV Interface in Go\nDESCRIPTION: Extends the MetaKv interface with methods for watching key changes, including prefix and revision-based watching.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype WatchKV interface {\n\tMetaKv\n\tWatch(key string) clientv3.WatchChan\n\tWatchWithPrefix(key string) clientv3.WatchChan\n\tWatchWithRevision(key string, revision int64) clientv3.WatchChan\n}\n```\n\n----------------------------------------\n\nTITLE: metaTable API Functions for Milvus Metadata Management\nDESCRIPTION: Provides the function signatures for interacting with the metaTable, including methods for creating, retrieving, and modifying collection metadata, partitions, segments, and indexes. These functions maintain consistency between in-memory and persistent storage.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nfunc NewMetaTable(kv kv.SnapShotKV) (*metaTable, error)\n\nfunc (mt *metaTable) AddCollection(coll *pb.CollectionInfo, part *pb.PartitionInfo, idx []*pb.IndexInfo, ddOpStr func(ts typeutil.Timestamp) (string, error)) (typeutil.Timestamp, error)\nfunc (mt *metaTable) DeleteCollection(collID typeutil.UniqueID, ddOpStr func(ts typeutil.Timestamp) (string, error)) (typeutil.Timestamp, error)\nfunc (mt *metaTable) HasCollection(collID typeutil.UniqueID, ts typeutil.Timestamp) bool\nfunc (mt *metaTable) GetCollectionByID(collectionID typeutil.UniqueID, ts typeutil.Timestamp) (*pb.CollectionInfo, error)\nfunc (mt *metaTable) GetCollectionByName(collectionName string, ts typeutil.Timestamp) (*pb.CollectionInfo, error)\nfunc (mt *metaTable) GetCollectionBySegmentID(segID typeutil.UniqueID) (*pb.CollectionInfo, error)\nfunc (mt *metaTable) ListCollections(ts typeutil.Timestamp) (map[string]typeutil.UniqueID, error)\nfunc (mt *metaTable) ListCollectionVirtualChannels() []string\nfunc (mt *metaTable) ListCollectionPhysicalChannels() []string\nfunc (mt *metaTable) AddPartition(collID typeutil.UniqueID, partitionName string, partitionID typeutil.UniqueID, ddOpStr func(ts typeutil.Timestamp) (string, error)) (typeutil.Timestamp, error)\nfunc (mt *metaTable) GetPartitionByName(collID typeutil.UniqueID, partitionName string, ts typeutil.Timestamp) (pb.PartitionInfo, error)\nfunc (mt *metaTable) HasPartition(collID typeutil.UniqueID, partitionName string, ts typeutil.Timestamp) bool\nfunc (mt *metaTable) DeletePartition(collID typeutil.UniqueID, partitionName string, ddOpStr func(ts typeutil.Timestamp) (string, error)) (typeutil.Timestamp, typeutil.UniqueID, error)\nfunc (mt *metaTable) GetPartitionByID(collID typeutil.UniqueID, partitionID typeutil.UniqueID, ts typeutil.Timestamp) (pb.PartitionInfo, error)\nfunc (mt *metaTable) AddSegment(segInfos []*datapb.SegmentInfo, msgStartPos string, msgEndPos string) (typeutil.Timestamp, error)\nfunc (mt *metaTable) AddIndex(segIdxInfos []*pb.SegmentIndexInfo, msgStartPos string, msgEndPos string) (typeutil.Timestamp, error)\nfunc (mt *metaTable) DropIndex(collName, fieldName, indexName string) (typeutil.Timestamp, typeutil.UniqueID, bool, error)\nfunc (mt *metaTable) GetSegmentIndexInfoByID(segID typeutil.UniqueID, filedID int64, idxName string) (pb.SegmentIndexInfo, error)\nfunc (mt *metaTable) GetFieldSchema(collName string, fieldName string) (schemapb.FieldSchema, error)\nfunc (mt *metaTable) IsSegmentIndexed(segID typeutil.UniqueID, fieldSchema *schemapb.FieldSchema, indexParams []*commonpb.KeyValuePair) bool\nfunc (mt *metaTable) GetNotIndexedSegments(collName string, fieldName string, idxInfo *pb.IndexInfo) ([]typeutil.UniqueID, schemapb.FieldSchema, error)\nfunc (mt *metaTable) GetIndexByName(collName, indexName string) (pb.CollectionInfo, []pb.IndexInfo, error)\nfunc (mt *metaTable) GetIndexByID(indexID typeutil.UniqueID) (*pb.IndexInfo, error)\nfunc (mt *metaTable) AddFlushedSegment(segID typeutil.UniqueID) error\n```\n\n----------------------------------------\n\nTITLE: Strong Type with Inherited Operators\nDESCRIPTION: Demonstrates how to inherit operators from the underlying type using skills like Addable and Printable.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/NamedType/README.md#2025-04-10_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nusing Meter = NamedType<double, MeterTag, Addable, Printable>\n```\n\n----------------------------------------\n\nTITLE: Defining Flush Service and Messages in Protocol Buffers\nDESCRIPTION: This snippet defines the Flush service and related message structures using Protocol Buffers. It includes the FlushRequest and FlushResponse messages used for communication between components.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211109-milvus_flush_collections.md#2025-04-10_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice MilvusService {\n  ...\n  rpc Flush(FlushRequest) returns (FlushResponse) {}\n  ...\n}\n\nmessage FlushRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  repeated string collection_names = 3;\n}\n\nmessage FlushResponse{\n  common.Status status = 1;\n  string db_name = 2;\n  map<string, schema.LongArray> coll_segIDs = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Milvus Binary from Docker Image\nDESCRIPTION: Creates a temporary Milvus container and extracts the binary files from it for standalone installation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/binary/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -d --name milvus milvusdb/milvus:v2.5.8 /bin/bash\n$ docker cp milvus:/milvus .\n```\n\n----------------------------------------\n\nTITLE: Defining ReleaseDQLMessageStreamRequest Message Protocol\nDESCRIPTION: Protocol definition for the ReleaseDQLMessageStreamRequest message. This defines the structure for notifying Proxy to stop processing messages for a specific collection.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_7\n\nLANGUAGE: proto\nCODE:\n```\nmessage ReleaseDQLMessageStreamRequest {\n    common.MsgBase base = 1;\n    int64 dbID = 2;\n    int64 collectionID = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Directory Structure in Milvus Go Client Test Framework\nDESCRIPTION: Displays the organization of directories and files in the test framework, showing the logical separation of test cases, helpers, and utilities.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/go_client/\n├── testcases/           # Main test cases\n│   ├── helper/          # Helper functions and utilities\n│   │   ├── helper.go\n│   │   ├── data_helper.go\n│   │   └── collection_helper.go\n│   ├── search_test.go   # Search functionality tests\n│   ├── index_test.go    # Index management tests\n│   └── ...\n├── common/             # Common utilities and constants\n└── base/               # Base infrastructure code\n```\n\n----------------------------------------\n\nTITLE: Deleting Entities in Milvus using Java\nDESCRIPTION: Shows how to delete data from a Milvus collection based on a condition. This example deletes entities where book_id is between 0 and 10.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.param.dml.DeleteParam;\n\nfinal String DELETE_EXPR = \"book_id in [0, 10]\";\n\nfinal DeleteParam deleteParam = DeleteParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withExpr(DELETE_EXPR)\n    .build();\n\nR<MutationResult> respDelete = milvusClient.delete(deleteParam);\n```\n\n----------------------------------------\n\nTITLE: Collection Creation Parameters Configuration in Go\nDESCRIPTION: Shows how to customize collection creation parameters using the fluent interface pattern, including analyzer settings and schema options.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfieldsOption := hp.TNewFieldsOption().\n    TWithEnableAnalyzer(true).\n    TWithAnalyzerParams(map[string]any{\n        \"tokenizer\": \"standard\",\n    })\n\nschemaOption := hp.TNewSchemaOption().\n    TWithEnableDynamicField(true).\n    TWithDescription(\"Custom schema\").\n    TWithAutoID(false)\n```\n\n----------------------------------------\n\nTITLE: Defining SaveBinlogPaths Structures in Go\nDESCRIPTION: Structure for updating segment binlog paths. Includes SegmentStartPosition for segment starting positions and SaveBinlogPathsRequest for saving binlog paths for fields, checkpoints, and segment start positions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype SegmentStartPosition struct {\n\tStartPosition        *msgpb.MsgPosition\n\tSegmentID            int64\n}\n\ntype SaveBinlogPathsRequest struct {\n\tBase                 *commonpb.MsgBase\n\tSegmentID            int64\n\tCollectionID         int64\n\tField2BinlogPaths    []*ID2PathList\n\tCheckPoints          []*CheckPoint\n\tStartPositions       []*SegmentStartPosition\n\tFlushed              bool\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RocksDB KV Store in Go\nDESCRIPTION: Implements the TxnKV interface using RocksDB as the backend storage, providing methods for key-value operations including transactional operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_20\n\nLANGUAGE: go\nCODE:\n```\ntype RocksdbKV struct {\n\topts         *gorocksdb.Options\n\tdb           *gorocksdb.DB\n\twriteOptions *gorocksdb.WriteOptions\n\treadOptions  *gorocksdb.ReadOptions\n\tname         string\n}\n\nfunc (kv *RocksdbKV) Close()\nfunc (kv *RocksdbKV) GetName() string\nfunc (kv *RocksdbKV) Load(key string) (string, error)\nfunc (kv *RocksdbKV) LoadWithPrefix(key string) ([]string, []string, error)\nfunc (kv *RocksdbKV) MultiLoad(keys []string) ([]string, error)\nfunc (kv *RocksdbKV) Save(key, value string) error\nfunc (kv *RocksdbKV) MultiSave(kvs map[string]string) error\nfunc (kv *RocksdbKV) RemoveWithPrefix(key string) error\nfunc (kv *RocksdbKV) Remove(key string) error\nfunc (kv *RocksdbKV) MultiRemove(keys []string) error\nfunc (kv *RocksdbKV) MultiSaveAndRemove(saves map[string]string, removals []string) error\nfunc (kv *RocksdbKV) MultiRemoveWithPrefix(keys []string) error\nfunc (kv *RocksdbKV) MultiSaveAndRemoveWithPrefix(saves map[string]string, removals []string) error\n```\n\n----------------------------------------\n\nTITLE: Defining FlushTask Interface and Struct in Go\nDESCRIPTION: This Go code defines the task interface and FlushTask struct used by the Proxy to handle Flush requests. It includes methods for task execution and management.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211109-milvus_flush_collections.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype task interface {\n\tTraceCtx() context.Context\n\tID() UniqueID       // return ReqID\n\tSetID(uid UniqueID) // set ReqID\n\tName() string\n\tType() commonpb.MsgType\n\tBeginTs() Timestamp\n\tEndTs() Timestamp\n\tSetTs(ts Timestamp)\n\tOnEnqueue() error\n\tPreExecute(ctx context.Context) error\n\tExecute(ctx context.Context) error\n\tPostExecute(ctx context.Context) error\n\tWaitToFinish() error\n\tNotify(err error)\n}\n\ntype FlushTask struct {\n\tCondition\n\t*milvuspb.FlushRequest\n\tctx       context.Context\n\tdataCoord types.DataCoord\n\tresult    *milvuspb.FlushResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Reinstalling LLVM for Compilation Issues\nDESCRIPTION: Commands to reinstall LLVM and set up environment variables to resolve compilation errors.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nbrew reinstall llvm@15\nexport LDFLAGS=\"-L/opt/homebrew/opt/llvm@15/lib\"\nexport CPPFLAGS=\"-I/opt/homebrew/opt/llvm@15/include\"\n```\n\n----------------------------------------\n\nTITLE: Defining FlushSegments Service in Protocol Buffers\nDESCRIPTION: This Protocol Buffers snippet defines the FlushSegments service used by DataCoord to notify DataNode to write segments into persistent storage.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211109-milvus_flush_collections.md#2025-04-10_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\nservice DataNode {\n  ...\n  rpc FlushSegments(FlushSegmentsRequest) returns(common.Status) {}\n  ...\n}\n\nmessage FlushSegmentsRequest {\n  common.MsgBase base = 1;\n  int64 dbID = 2;\n  int64 collectionID = 3;\n  repeated int64 segmentIDs = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Disk ANN Support in CMake\nDESCRIPTION: Conditionally adds a preprocessor definition for Disk ANN support when the BUILD_DISK_ANN option is enabled.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif ( BUILD_DISK_ANN STREQUAL \"ON\" )\n    ADD_DEFINITIONS(-DBUILD_DISK_ANN=${BUILD_DISK_ANN})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Loading a Collection in Milvus using Java\nDESCRIPTION: Demonstrates how to load a collection into memory for search and query operations. This is required before performing searches on a collection.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.param.LoadCollectionParam;\n\nfinal LoadCollectionParam loadCollectionParam = LoadCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build();\nmilvusClient.loadCollection(loadCollectionParam);\n```\n\n----------------------------------------\n\nTITLE: Search Parameters Configuration in Go for Milvus\nDESCRIPTION: Illustrates how to configure search parameters for Milvus, including result limits, consistency level, filtering, and algorithm-specific parameters.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nsearchOpt := client.NewSearchOption(schema.CollectionName, 100, vectors).\n    WithOffset(0).\n    WithLimit(100).\n    WithConsistencyLevel(entity.ClStrong).\n    WithFilter(\"int64 >= 100\").\n    WithOutputFields([]string{\"*\"}).\n    WithSearchParams(map[string]any{\n        \"nprobe\": 16,\n        \"ef\":     64,\n    })\n```\n\n----------------------------------------\n\nTITLE: Internal Segment Interface Methods\nDESCRIPTION: Internal functions for managing segment data, chunk operations, and search functionality. Includes methods for data access, index management, and vector search operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/segment_interface.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nnum_chunk()\nsize_per_chunk()\nget_active_count(Timestamp)\nchunk_data(FieldOffset, chunk_id) -> Span<T>\nchunk_scalar_index(FieldOffset, chunk_id) -> const StructuredIndex<T>&\nnum_chunk_index\ndebug()\nvector_search(vec_count, query..., timestamp, bitset, output)\nbulk_subscript(FieldOffset|SystemField, seg_offsets..., output)\nsearch_ids(IdArray, timestamp) -> pair<IdArray, SegOffsets>\ncheck_search(Plan)\n```\n\n----------------------------------------\n\nTITLE: Creating a Clean-All Custom Target in CMake\nDESCRIPTION: Defines a custom target named 'Clean-All' that will run the clean command for the build tool.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target( Clean-All COMMAND ${CMAKE_BUILD_TOOL} clean )\n```\n\n----------------------------------------\n\nTITLE: Listing Request Types Handled by Proxy in Milvus\nDESCRIPTION: This snippet lists the various types of Data Definition Requests (DdRequests) that the Proxy forwards to the Root Coordinator in Milvus. These requests include operations for managing collections, partitions, and indexes.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n    - CreateCollection\n    - DropCollection\n    - HasCollection\n    - DescribeCollection\n    - ShowCollections\n    - CreatePartition\n    - DropPartition\n    - HasPartition\n    - ShowPartitions\n    - CreateIndex\n    - DropIndex\n    - DescribeIndex\n    - GetIndexBuildProgress\n    - GetIndexState\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for Brew Issues\nDESCRIPTION: Git configuration commands to resolve Brew-related issues during installation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit config --global http.postBuffer 1M\ngit config --global user.email xxx\ngit config --global user.name xxx\n```\n\n----------------------------------------\n\nTITLE: Parsing Hybrid Timestamp in Go\nDESCRIPTION: This Go function parses a hybrid timestamp into its physical (UTC time) and logical components. It extracts the physical part by bit-shifting and converts it to a time.Time object.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211214-milvus_hybrid_ts.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tlogicalBits     = 18\n\tlogicalBitsMask = (1 << logicalBits) - 1\n)\n\n// ParseTS parses the ts to (physical,logical).\nfunc ParseTS(ts uint64) (time.Time, uint64) {\n\tlogical := ts & logicalBitsMask\n\tphysical := ts >> logicalBits\n\tphysicalTime := time.Unix(int64(physical/1000), int64(physical)%1000*time.Millisecond.Nanoseconds())\n\treturn physicalTime, logical\n}\n```\n\n----------------------------------------\n\nTITLE: Registering WAL Builder Implementation in Go\nDESCRIPTION: Example of how to register a new WAL OpenerBuilder implementation with the registry. This snippet shows the basic pattern for adding custom WAL implementations to the system.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/streamingnode/server/wal/RAEDME.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/milvus-io/milvus/pkg/streaming/walimpls/registry\"\n\nvar _ OpenerBuilderImpls = b{};\nregistry.RegisterBuilder(b{})\n```\n\n----------------------------------------\n\nTITLE: Running Milvus E2E Tests with Docker Compose\nDESCRIPTION: Commands to run E2E tests against a running Milvus instance, including getting the Milvus service IP and executing pytest in a Docker container.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nMILVUS_SERVICE_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker compose ps -q builder))\ncd tests/docker\ndocker compose run --rm pytest /bin/bash -c \"pytest --host ${MILVUS_SERVICE_IP}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Collection in Milvus using Java Client\nDESCRIPTION: Shows how to create a new collection in Milvus with defined schema and fields. It defines a vector field with 8 dimensions and a primary key field, then creates a collection with those specifications.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.grpc.*;\nimport io.milvus.param.*;\n\n// Prepare schema\nfinal FieldType fieldType1 = FieldType.newBuilder()\n    .withName(\"book_id\")\n    .withDataType(DataType.Int64)\n    .withPrimaryKey(true)\n    .withAutoID(false)\n    .build();\n\nfinal FieldType fieldType2 = FieldType.newBuilder()\n    .withName(\"book_intro\")\n    .withDataType(DataType.FloatVector)\n    .withDimension(8)\n    .build();\n\nfinal CreateCollectionParam createCollectionParam = CreateCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withDescription(\"Test book search\")\n    .withShardsNum(2)\n    .addFieldType(fieldType1)\n    .addFieldType(fieldType2)\n    .build();\n\n// Create collection\nmilvusClient.createCollection(createCollectionParam);\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Expression Plan Nodes in C++\nDESCRIPTION: Definition of physical plan nodes for scalar expressions, including TermExpr, RangeExpr, CompareExpr, LogicalBinaryExpr, and LogicalUnaryExpr. These nodes support various operations like range queries, comparisons, and logical operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/visitor.md#2025-04-10_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n// ${internal/core}/src/query/Expr.h\nTermExpr // support operation like `col in [1, 2, 3]`\nRangeExpr // support constant compare with data column like `a >= 5` `1 < b < 2`\nCompareExpr // support compare with different columns, like `a < b`\nLogicalBinaryExpr // support and/or\nLogicalUnaryExpr // support not\n```\n\n----------------------------------------\n\nTITLE: Milvus Core Library Configuration\nDESCRIPTION: Creates the shared library target for milvus_core and configures its object files from various submodules.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(milvus_core SHARED\n    $<TARGET_OBJECTS:milvus_pb>\n    $<TARGET_OBJECTS:milvus_log>\n    $<TARGET_OBJECTS:milvus_config>\n    $<TARGET_OBJECTS:milvus_common>\n    $<TARGET_OBJECTS:milvus_monitor>\n    $<TARGET_OBJECTS:milvus_storage>\n    $<TARGET_OBJECTS:milvus_index>\n    $<TARGET_OBJECTS:milvus_query>\n    $<TARGET_OBJECTS:milvus_segcore>\n    $<TARGET_OBJECTS:milvus_indexbuilder>\n    $<TARGET_OBJECTS:milvus_clustering>\n    $<TARGET_OBJECTS:milvus_exec>\n    $<TARGET_OBJECTS:milvus_bitset>\n    $<TARGET_OBJECTS:milvus_futures>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining PChanStatistics Structure and DmTaskQueue Method in Milvus\nDESCRIPTION: PChanStatistics structure and getPChanStatsInfo method for providing timestamp information to channelsTimeTicker. This enables tracking of minimum and maximum timestamps for all incomplete tasks on a physical channel.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype pChanStatistics struct {\n\tminTs Timestamp\n\tmaxTs Timestamp\n}\n\nfunc (queue *DmTaskQueue) getPChanStatsInfo() (map[pChan]*pChanStatistics, error)\n```\n\n----------------------------------------\n\nTITLE: Defining RootCoord DropCollection RPC in Protocol\nDESCRIPTION: Protocol definition for the DropCollection RPC method in the RootCoord service. This defines how the Proxy communicates with the RootCoord to drop a collection.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_2\n\nLANGUAGE: proto\nCODE:\n```\nservice RootCoord {\n  ...\n\n   rpc DropCollection(milvus.DropCollectionRequest) returns (common.Status) {}\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: ProtoBuf IndexMeta Message Definition\nDESCRIPTION: Definition of the IndexMeta protocol buffer message that stores detailed information about an index task, including state, file paths, and execution metadata. This structure is persisted in etcd.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20210731-index_design.md#2025-04-10_snippet_1\n\nLANGUAGE: ProtoBuf\nCODE:\n```\nmessage IndexMeta {\n  int64 indexBuildID = 1;\n  common.IndexState state = 2;\n  string fail_reason = 3;\n  BuildIndexRequest req = 4;\n  repeated string index_file_paths = 5;\n  bool mark_deleted = 6;\n  int64 nodeID = 7;\n  int64 version = 8;\n  bool recycled = 9;\n}\n```\n\n----------------------------------------\n\nTITLE: Test Suite Configuration Example\nDESCRIPTION: YAML configuration example for defining insert performance test parameters\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/benchmark/README.md#2025-04-10_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninsert_performance:\n  collections:\n     -\n       milvus:\n         db_config.primary_path: /test/milvus/db_data_2/cluster/sift_1m_128_l2\n         wal_enable: true\n       collection_name: sift_1m_128_l2\n       ni_per: 50000\n       build_index: false\n       index_type: ivf_sq8\n       index_param:\n         nlist: 1024\n```\n\n----------------------------------------\n\nTITLE: Starting Milvus for E2E Testing with Cluster Mode\nDESCRIPTION: Command to start a Milvus cluster for E2E testing using the builder container.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nbuild/builder.sh /bin/bash -c \"./scripts/start_cluster.sh && cat\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Milvus Server in Java\nDESCRIPTION: Demonstrates how to establish a connection to a Milvus server using the Java client. This code creates a MilvusClient instance by specifying the connection parameters.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.client.MilvusClientConfig;\nimport io.milvus.client.MilvusServiceClient;\n\n// Connect to a Milvus server\nfinal MilvusClientConfig milvusClientConfig = MilvusClientConfig.newBuilder()\n    .withHost(\"127.0.0.1\")\n    .withPort(19530)\n    .build();\nfinal MilvusServiceClient milvusClient = new MilvusServiceClient(milvusClientConfig);\n```\n\n----------------------------------------\n\nTITLE: Defining Vector Search Plan Nodes in C++\nDESCRIPTION: Definition of physical plan nodes for vector search operations, including FloatVectorANNS for float vector search and BinaryVectorANNS for binary vector search.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/visitor.md#2025-04-10_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// ${internal/core}/src/query/PlanNode.h\nFloatVectorANNS // FloatVector search execution node\nBinaryVectorANNS // BinaryVector search execution node\n```\n\n----------------------------------------\n\nTITLE: Creating Milvus Storage Library in CMake\nDESCRIPTION: Creates an object library named milvus_storage using the collected source files. This library can be linked into other targets that require Milvus storage functionality.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/CMakeLists.txt#2025-04-10_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(milvus_storage OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Installing KinD Environment and Running Tests\nDESCRIPTION: Shell commands for deploying KinD environment and executing CI regression tests with various options\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ./e2e-k8s.sh\n$ ./e2e-k8s.sh --skip-cleanup\n$ ./e2e-k8s.sh --skip-cleanup --skip-test --manual\n$ ./e2e-k8s.sh --help\n$ kind export logs .\n```\n\n----------------------------------------\n\nTITLE: Defining PChanStatInfo Structure for Timestamp Tracking in Milvus\nDESCRIPTION: Data structure that maintains timestamp statistics for physical channels. It tracks minimum and maximum timestamps plus a set of all timestamps for tasks in the DmQueue associated with a specific channel.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Timestamp = uint64\ntype pChan = string\n\ntype pChanStatInfo struct {\n   maxTs Timestamp\n   minTs Timestamp\n  tsSet map[Timestamp] struct{}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DropCollectionRequest Message for MsgStream\nDESCRIPTION: Protocol definition for the DropCollectionRequest message that is sent to the MsgStream. This message notifies other components about collection deletion.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\nmessage DropCollectionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collectionName = 3;\n  int64 dbID = 4;\n  int64 collectionID = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SaveBinlogPaths RPC Protocol\nDESCRIPTION: Protocol buffer definitions for SaveBinlogPaths RPC service and related message structures used in DataCoord interactions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20210521-datanode_recovery_design.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc SaveBinlogPaths(SaveBinlogPathsRequest) returns (common.Status){}\nmessage ID2PathList {\n    int64 ID = 1;\n    repeated string Paths = 2;\n}\n\nmessage CheckPoint {\n    int64 segmentID = 1;\n    msgpb.MsgPosition position = 2;\n    int64 num_of_rows = 3;\n}\n\nmessage SaveBinlogPathsRequest {\n    common.MsgBase base = 1;\n    int64 segmentID = 2;\n    int64 collectionID = 3;\n    repeated ID2PathList field2BinlogPaths = 4;\n    repeated CheckPoint checkPoints = 7;\n    repeated SegmentStartPosition start_positions = 6;\n    bool flushed = 7;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Python Path for Local Testing\nDESCRIPTION: Command to set the PYTHONPATH environment variable for local testing of milvus_benchmark\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/benchmark/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport PYTHONPATH=/your/project/path/milvus_benchmark\n```\n\n----------------------------------------\n\nTITLE: Building Milvus from Source\nDESCRIPTION: Make command to build the Milvus project, with an option to skip third-party dependency checks.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake\n# Or to skip 3rd-party dependency checks:\nmake SKIP_3RDPARTY=1\n```\n\n----------------------------------------\n\nTITLE: Creating an Index in Milvus using Java\nDESCRIPTION: Shows how to create an index on a vector field to accelerate search operations. This example creates an IVF_FLAT index with L2 distance metric on the 'book_intro' field.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.milvus.param.IndexParam;\nimport io.milvus.common.indexParams.IvfFlatParam;\n\nfinal IndexParam indexParam = IndexParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withFieldName(\"book_intro\")\n    .withIndexType(IndexType.IVF_FLAT)\n    .withMetricType(MetricType.L2)\n    .withExtraParam(new IvfFlatParam().withNlist(16384))\n    .withSyncMode(Boolean.TRUE)\n    .build();\nmilvusClient.createIndex(indexParam);\n```\n\n----------------------------------------\n\nTITLE: Storing JSON Records in Parquet Format for Milvus\nDESCRIPTION: Example of how JSON records are stored in a Parquet file format, demonstrating the separation of dense and sparse data. The dense data (id) is stored in a separate column, while the sparse data is serialized as BSON and stored in a binary column.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/json_storage.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\"id\": 1, \"attr1\": \"value1\", \"attr2\": 100},\n    {\"id\": 2, \"attr1\": \"value2\", \"attr3\": true},\n    {\"id\": 3, \"attr1\": \"value3\", \"attr4\": \"extra\", \"attr5\": 3.14}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus Index Builder Library in CMake\nDESCRIPTION: Sets up the Milvus index builder component by recursively adding source files and creating an object library target. The library is built with collected source files from the current directory tree.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/indexbuilder/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_indexbuilder OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Implementing reqTask Interface and DropCollectionReqTask in RootCoord\nDESCRIPTION: Go implementation of the reqTask interface and DropCollectionReqTask structure in the RootCoord component. These define how the DropCollection request is processed within RootCoord.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype reqTask interface {\n\tCtx() context.Context\n\tType() commonpb.MsgType\n\tExecute(ctx context.Context) error\n\tCore() *Core\n}\n\ntype DropCollectionReqTask struct {\n\tbaseReqTask\n\tReq *milvuspb.DropCollectionRequest\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Proxy InvalidateCollectionMetaCache RPC in Protocol\nDESCRIPTION: Protocol definition for the InvalidateCollectionMetaCache RPC method in the Proxy service. This defines how RootCoord notifies Proxy to invalidate collection metadata cache.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_6\n\nLANGUAGE: proto\nCODE:\n```\nservice Proxy {\n    ...\n\n    rpc InvalidateCollectionMetaCache(InvalidateCollMetaCacheRequest) returns (common.Status) {}\n\n    ...\n}\n\nmessage InvalidateCollMetaCacheRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Channel Checkpoint Rule\nDESCRIPTION: Defines the rule for updating channel checkpoints to ensure data integrity in case of Datanode crashes during the update process.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230918-datanode_remove_datacoord_dependency.md#2025-04-10_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n**Note:** Segments meta shall be updated *BEFORE* changing the channel checkpoint in case of datanode crashing during the prodedure. Under this premise, reconsuming from the old checkpoint shall recover all the data and duplidated entries will be discarded by segment checkpoints.\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus Segcore Library Build in CMake\nDESCRIPTION: Sets up the Milvus segcore library build configuration, adding source files recursively and configuring debug-specific sorting checks. The CHECK_SORTED flag is enabled only in Debug builds.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/segcore/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_segcore OBJECT ${SOURCE_FILES})\n\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(CHECK_SORTED ON)\nelse()\n    set(CHECK_SORTED OFF)\nendif()\n\nadd_definitions(-DCHECK_SORTED=${CHECK_SORTED})\n```\n\n----------------------------------------\n\nTITLE: Running Single Test Task for Milvus Deployment\nDESCRIPTION: This bash command demonstrates how to run a single test task for Milvus deployment. It takes parameters for deployment mode, task type, and root password.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/deploy/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bash test.sh -m ${Mode} -t ${Task} -p ${Password}\n# Mode, the mode of milvus deploy. standalone or cluster\"\n# Task, the task type of test. reinstall or upgrade\n# Password, the password of root\"\n```\n\n----------------------------------------\n\nTITLE: Creating Collection in Milvus\nDESCRIPTION: Create a new collection with specified name and vector dimension.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclient.create_collection(\n    collection_name=\"demo_collection\",\n    dimension=768,  # The vectors we will use in this demo have 768 dimensions\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Event Type Codes for Milvus Binlog\nDESCRIPTION: Lists the different event type codes used in Milvus Binlog, including DESCRIPTOR_EVENT, INSERT_EVENT, DELETE_EVENT, and various collection and partition management events.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap08_binlog.md#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nDESCRIPTOR_EVENT\nINSERT_EVENT\nDELETE_EVENT\nCREATE_COLLECTION_EVENT\nDROP_COLLECTION_EVENT\nCREATE_PARTITION_EVENT\nDROP_PARTITION_EVENT\nINDEX_FILE_EVENT\n```\n\n----------------------------------------\n\nTITLE: Querying Decode Search Result Latency (p99) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the 99th percentile of the latency of decoding search and query results by proxy within the past two minutes using the milvus_proxy_sq_decode_result_latency_bucket metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_8\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, query_type, pod, node_id) (rate(milvus_proxy_sq_decode_result_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCollectionRequest Message for MsgStream Notifications\nDESCRIPTION: Protocol buffer definition for the CreateCollectionRequest message used in MsgStream notifications. This message contains all metadata about the created collection and is broadcast to other Milvus components.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211217-milvus_create_collection.md#2025-04-10_snippet_4\n\nLANGUAGE: proto\nCODE:\n```\nmessage CreateCollectionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collectionName = 3;\n  string partitionName = 4;\n  int64 dbID = 5;\n  int64 collectionID = 6;\n  int64 partitionID = 7;\n  // `schema` is the serialized `schema.CollectionSchema`\n  bytes schema = 8;\n  repeated string virtualChannelNames = 9;\n  repeated string physicalChannelNames = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetSegmentInfo Service in Protocol Buffers\nDESCRIPTION: This Protocol Buffers snippet defines the GetSegmentInfo service and related message structures. It's used by the SDK to check the status of sealed segments periodically.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211109-milvus_flush_collections.md#2025-04-10_snippet_3\n\nLANGUAGE: proto\nCODE:\n```\nservice DataCoord {\n  ...\n  rpc GetSegmentInfo(GetSegmentInfoRequest) returns (GetSegmentInfoResponse) {}\n  ...\n}\n\nmessage GetSegmentInfoRequest {\n  common.MsgBase base =ություններին  repeated int64 segmentIDs = 2;\n}\n\nmessage GetSegmentInfoResponse {\n  common.Status status = 1;\n  repeated SegmentInfo infos = 2;\n}\n\nmessage SegmentInfo {\n  int64 ID = 1;\n  int64 collectionID = 2;\n  int64 partitionID = 3;\n  string insert_channel = 4;\n  int64 num_of_rows = 5;\n  common.SegmentState state = 6;\n  msgpb.MsgPosition dml_position = 7;\n  int64 max_row_num = 8;\n  uint64 last_expire_time = 9;\n  msgpb.MsgPosition start_position = 10;\n}\n\nenum SegmentState {\n    SegmentStateNone = 0;\n    NotExist = 1;\n    Growing = 2;\n    Sealed = 3;\n    Flushed = 4;\n    Flushing = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Segment Status in Datacoord\nDESCRIPTION: Describes the strategy for Datacoord to refresh segment meta and channel checkpoint periodically, providing recent targets for QueryCoord.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230918-datanode_remove_datacoord_dependency.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n**Note:** `Datacoord` reloads from metastore periodically.\nOptimization 1: reload channel checkpoint first, then reload segment meta if newly read revision is greater than in-memory one.\nOptimization 2: After `L0 segment` is implemented, datacoord shall refresh growing segments only.\n```\n\n----------------------------------------\n\nTITLE: Calculating DQL Request Rate in Milvus with PromQL\nDESCRIPTION: This query calculates the rate of DQL requests received per second by each proxy within the past two minutes. It uses the 'milvus_proxy_dql_req_count' metric and groups results by function name, status, pod, and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_21\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_dql_req_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by(function_name, status, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Search Performance Metrics in PromQL\nDESCRIPTION: Queries measuring search request rates, latencies and queue times. Includes p99 and average latencies for different search stages.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_37\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_querynode_sq_req_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (query_type, status, pod, node_id)\n\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_querynode_sq_req_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n\nsum(increase(milvus_querynode_sq_req_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id, query_type) / sum(increase(milvus_querynode_sq_req_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id, query_type)\n```\n\n----------------------------------------\n\nTITLE: Configuring NSG Building Parameters in Python\nDESCRIPTION: Configuration for building NSG index with parameters for search length, out degree, candidate pool size, and number of nearest neighbors.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"index_type\": \"NSG\",\n    \"metric_type\": \"L2\",\n\n    #Special for RHNSW_SQ\n    \"search_length\": 60,         # int. 10~300\n    \"out_degree\": 30,            # int. 5~300\n    \"candidate_pool_size\": 300,  # int. 50~1000\n    \"knng\": 50                   # int. 5~300\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Interface and DropCollectionTask Structure in Proxy\nDESCRIPTION: Go implementation of the task interface and DropCollectionTask structure in the Proxy component. The task interface defines the methods for executing tasks, and DropCollectionTask implements this interface for collection dropping operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype task interface {\n\tTraceCtx() context.Context\n\tID() UniqueID       // return ReqID\n\tSetID(uid UniqueID) // set ReqID\n\tName() string\n\tType() commonpb.MsgType\n\tBeginTs() Timestamp\n\tEndTs() Timestamp\n\tSetTs(ts Timestamp)\n\tOnEnqueue() error\n\tPreExecute(ctx context.Context) error\n\tExecute(ctx context.Context) error\n\tPostExecute(ctx context.Context) error\n\tWaitToFinish() error\n\tNotify(err error)\n}\n\ntype DropCollectionTask struct {\n\tCondition\n\t*milvuspb.DropCollectionRequest\n\tctx       context.Context\n\trootCoord types.RootCoord\n\tresult    *commonpb.Status\n\tchMgr     channelsMgr\n\tchTicker  channelsTimeTicker\n}\n```\n\n----------------------------------------\n\nTITLE: Building Milvus Clustering Library in CMake\nDESCRIPTION: This CMake script creates an object library for the Milvus clustering module. It recursively adds all source files from the current directory using a custom CMake function and defines the milvus_clustering target.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/clustering/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_clustering OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Defining Fetch RPC Interface in Protocol Buffers\nDESCRIPTION: New RPC interface definition for QueryNode to efficiently fetch vectors by primary keys. This interface is designed to be more efficient than the existing Query interface for primary key-based retrieval.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230403-search_by_pk.md#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc Fetch(FetchRequest) returns (FetchResponse) {}\n```\n\n----------------------------------------\n\nTITLE: Defining RootCoord Service for Timestamp Allocation in Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for the RootCoord service, including the AllocTimestamp RPC and associated request/response messages. This service is responsible for allocating timestamps in the Milvus 2.0 system.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211215-milvus_timesync.md#2025-04-10_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\nservice RootCoord {\n    ...\n    rpc AllocTimestamp(AllocTimestampRequest) returns (AllocTimestampResponse) {}\n    ...\n}\n\nmessage AllocTimestampRequest {\n  common.MsgBase base = 1;\n  uint32 count = 3;\n}\n\nmessage AllocTimestampResponse {\n    common.Status status = 1;\n    uint64 timestamp = 2;\n    uint32 count = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing FieldData structure in Protocol Buffers\nDESCRIPTION: Shows the FieldData message structure to illustrate where field values are stored, containing either scalar or vector data. This structure is relevant for understanding how default values are applied.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230405-default_value.md#2025-04-10_snippet_1\n\nLANGUAGE: proto\nCODE:\n```\nmessage FieldData {\n  ...\n  oneof field {\n    ScalarField scalars = 3;\n    VectorField vectors = 4;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Build Options for Knowhere in Milvus\nDESCRIPTION: Sets various build options for Knowhere based on Milvus build configurations. This includes options for disk ANN, cardinal indexing, and GPU support.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/knowhere/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif ( BUILD_DISK_ANN STREQUAL \"ON\" )\n    set(WITH_DISKANN ON CACHE BOOL \"\" FORCE )\nelse ()\n    set(WITH_DISKANN OFF CACHE BOOL \"\" FORCE )\nendif ()\n\nif ( INDEX_ENGINE STREQUAL \"cardinal\" )\n    set(WITH_CARDINAL ON CACHE BOOL \"\" FORCE )\nelse ()\n    set(WITH_CARDINAL OFF CACHE BOOL \"\" FORCE )\nendif()\n\nif ( MILVUS_GPU_VERSION STREQUAL \"ON\" )\n    set(WITH_CUVS ON CACHE BOOL \"\" FORCE )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Calculating Search Group Size in Milvus Query Nodes (PromQL)\nDESCRIPTION: These queries calculate the 99th percentile and average search group size for query nodes over the past 2 minutes. They use histogram quantiles and rate functions on the 'milvus_querynode_search_group_size' metrics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_41\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_querynode_search_group_size_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_querynode_search_group_size_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_querynode_search_group_size_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Setting IVF_SQ8_HYBRID Index Parameters in Python for Milvus\nDESCRIPTION: This code snippet demonstrates how to set the building and search parameters for the IVF_SQ8_HYBRID index type in Milvus using Python. It includes the index type, metric type, and the 'nlist' parameter for building, and adds 'nprobe' for searching.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# IVF_SQ8_HYBRID\n{\n    \"index_type\": \"IVF_SQ8_HYBRID\",\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n  \t#Special for IVF_SQ8_HYBRID\n    \"nlist\": 100      # int. 1~65536\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# IVF_SQ8_HYBRID\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n    #Special for IVF_SQ8_HYBRID\n    \"nprobe\": 8       # int. 1~nlist(cpu), 1~min[2048, nlist](gpu)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QueryCoord ReleaseCollection RPC in Protocol\nDESCRIPTION: Protocol definition for the ReleaseCollection RPC method in the QueryCoord service. This defines how RootCoord communicates with QueryCoord to release collection resources.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211115-milvus_drop_collection.md#2025-04-10_snippet_5\n\nLANGUAGE: proto\nCODE:\n```\nservice QueryCoord {\n    ...\n\n    rpc ReleaseCollection(ReleaseCollectionRequest) returns (common.Status) {}\n\n    ...\n}\n\nmessage ReleaseCollectionRequest {\n  common.MsgBase base = 1;\n  int64 dbID = 2;\n  int64 collectionID = 3;\n  int64 nodeID = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Knowhere Include Directory for Milvus Build\nDESCRIPTION: Retrieves compilation options for Knowhere and sets the include directory path for use in the Milvus project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/knowhere/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# get prometheus COMPILE_OPTIONS\nget_property( var DIRECTORY \"${knowhere_SOURCE_DIR}\" PROPERTY COMPILE_OPTIONS )\nmessage( STATUS \"knowhere src compile options: ${var}\" )\n\nset( KNOWHERE_INCLUDE_DIR ${knowhere_SOURCE_DIR}/include CACHE INTERNAL \"Path to knowhere include directory\" )\n```\n\n----------------------------------------\n\nTITLE: Go Meta Struct Definition\nDESCRIPTION: Definition of the Meta struct used by IndexCoord to record index state information, including indexMeta and revision fields. The revision field tracks changes in etcd.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20210731-index_design.md#2025-04-10_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Meta struct {\n        indexMeta *indexpb.IndexMeta\n        revision  int64\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WatchDmChannels Protocol\nDESCRIPTION: Protocol buffer definitions for WatchDmChannels request messages used in managing vchannel information and DataNode operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20210521-datanode_recovery_design.md#2025-04-10_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage VchannelInfo {\n  int64 collectionID = 1;\n  string channelName = 2;\n  msgpb.MsgPosition seek_position = 3;\n  repeated SegmentInfo unflushedSegments = 4;\n  repeated int64 flushedSegments = 5;\n}\n\nmessage WatchDmChannelsRequest {\n  common.MsgBase base = 1;\n  repeated VchannelInfo vchannels = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Running C++ Code Format Check with Make\nDESCRIPTION: Make command to check C++ code format, including verification of clang-format execution, license information, and cpplint.py standards compliance.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/scripts_and_tools.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake cppcheck\n```\n\n----------------------------------------\n\nTITLE: Configuring x86_64 Platform Sources\nDESCRIPTION: Adds x86_64 specific source files and sets compiler flags for AVX2 and AVX512 optimizations when building on x86_64 architecture.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/bitset/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"x86_64\")\\n    list(APPEND BITSET_SRCS\\n        detail/platform/x86/avx2-inst.cpp\\n        detail/platform/x86/avx512-inst.cpp\\n        detail/platform/x86/instruction_set.cpp\\n    )\\n\\n    set_source_files_properties(detail/platform/x86/avx512-inst.cpp PROPERTIES COMPILE_FLAGS \"-mavx512f -mavx512bw -mavx512vl -mavx512dq -mavx512cd -mbmi\")\\n    set_source_files_properties(detail/platform/x86/avx2-inst.cpp PROPERTIES COMPILE_FLAGS \"-mavx2 -mavx -mfma -mbmi\")\n```\n\n----------------------------------------\n\nTITLE: Measuring Search Top_K in Milvus Query Nodes (PromQL)\nDESCRIPTION: These queries calculate the 99th percentile and average Top_K of search requests executed by query nodes over the past 2 minutes. They use the 'milvus_querynode_search_topk' metrics with histogram quantiles and rate functions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_44\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_querynode_search_topk_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_querynode_search_topk_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_querynode_search_topk_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Sealed Segment Time Travel Algorithm\nDESCRIPTION: Details the three-step algorithm for implementing time travel in sealed segments, including vec_count determination, bitset mask calculation, and DSL result combination.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/timetravel.md#2025-04-10_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Use get_active_count interface, find the last segment containing a legal ts, and return the last element position of this segment as vec_count.\n2. Calculate the bitset mask with a timestamp. Due to the above properties, all the entities of the previous segment meet the conditions, and all the subsequent segments do not meet the conditions. Only the \"last segment\" needs to be calculated.\n3. the calculated results of Bitset and DSL are combined and sent to vector search interface.\n```\n\n----------------------------------------\n\nTITLE: Defining RootCoord SegmentFlushCompleted gRPC Service\nDESCRIPTION: Proto definition for the SegmentFlushCompleted RPC in the RootCoord service, including related message structures.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20211227-milvus_create_index.md#2025-04-10_snippet_7\n\nLANGUAGE: proto\nCODE:\n```\nservice RootCoord {\n  ...\n\n  rpc SegmentFlushCompleted(data.SegmentFlushCompletedMsg) returns (common.Status) {}\n\n  ...\n}\n\nmessage SegmentFlushCompletedMsg {\n  common.MsgBase base = 1;\n  SegmentInfo segment = 2;\n}\n\nmessage SegmentInfo {\n  int64 ID = 1;\n  int64 collectionID = 2;\n  int64 partitionID = 3;\n  string insert_channel = 4;\n  int64 num_of_rows = 5;\n  common.SegmentState state = 6;\n  int64 max_row_num = 7;\n  uint64 last_expire_time = 8;\n  msgpb.MsgPosition start_position = 9;\n  msgpb.MsgPosition dml_position = 10;\n  repeated FieldBinlog binlogs = 11;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Milvus Index Library with CMake\nDESCRIPTION: Creates an object library named milvus_index by recursively including all source files from the current directory. Uses a custom CMake function to gather source files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/index/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_index OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Server ConfigMap\nDESCRIPTION: Kubernetes ConfigMap for defining server configuration in cluster mode\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/benchmark/README.md#2025-04-10_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: server-cluster-8c16m\n  namespace: qa\ndata:\n  config.yaml: |\n    server:\n      server_tag: \"8c16m\"\n    milvus:\n      deploy_mode: \"cluster\"\n```\n\n----------------------------------------\n\nTITLE: Defining globalMetaCache Interface in Go\nDESCRIPTION: This snippet defines the interface for globalMetaCache, which is responsible for caching meta-information of Collection and Partition. It includes methods for retrieving collection and partition IDs, getting partition maps and collection schemas, and removing collection and partition information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20220105-proxy.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype Cache interface {\n   GetCollectionID(ctx context.Context, collectionName string) (typeutil.UniqueID, error)\n   GetPartitionID(ctx context.Context, collectionName string, partitionName string) (typeutil.UniqueID, error)\n   GetPartitions(ctx context.Context, collectionName string) (map[string]typeutil.UniqueID, error)\n   GetCollectionSchema(ctx context.Context, collectionName string) (*schemapb.CollectionSchema, error)\n   RemoveCollection(ctx context.Context, collectionName string)\n   RemovePartition(ctx context.Context, collectionName string, partitionName string)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Registration JSON Structure\nDESCRIPTION: Defines the JSON structure used for session registration in etcd, including ServerID, ServerName, Address, and Exclusive flag.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ServerID\": \"ServerID\",\n  \"ServerName\": \"ServerName\",\n  \"Address\": \"ip:port\",\n  \"Exclusive\": \"Exclusive\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Milvus Query Library in CMake\nDESCRIPTION: This snippet adds all source files in the current directory and its subdirectories to the build, then creates an object library named 'milvus_query' using these source files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/query/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_query OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Analyzing Search Group Top_K in Milvus Query Nodes (PromQL)\nDESCRIPTION: These queries calculate the 99th percentile and average Top_K of combined search requests executed by query nodes over the past 2 minutes. They use the 'milvus_querynode_search_group_topk' metrics with histogram quantiles and rate functions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_45\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_querynode_search_group_topk_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_querynode_search_group_topk_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_querynode_search_group_topk_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: SegmentSealedImpl Function Definition\nDESCRIPTION: Describes the internal functions of SegmentSealedImpl, including row count updates and timestamp masking functionality.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/segment_sealed.md#2025-04-10_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Most functions are the implementation of the corresponding functions of the segment interface, which will not be repeated here.\n2. `update_row_count`: Used to update the row_count field.\n3. `mask_with_timestamps`: Use Timestamp column to update search bitmask, used to support Time Travel function.\n```\n\n----------------------------------------\n\nTITLE: Implementing DescribeChannels Request and Response Structures in Go\nDESCRIPTION: Defines structures for DescribeChannels request and response, including ChannelDescription.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap04_message_stream.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype DescribeChannelRequest struct {\n\tChannelNames []string\n}\n\ntype ChannelDescription struct {\n\tChannelName string\n\tOwner OwnerDescription\n}\n\ntype DescribeChannelResponse struct {\n\tDescriptions []ChannelDescription\n}\n```\n\n----------------------------------------\n\nTITLE: Building Milvus Monitor as an Object Library in CMake\nDESCRIPTION: CMake commands that recursively add source files from the current directory and create an object library named 'milvus_monitor' from those source files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/monitor/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_monitor OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage in CMake for Milvus\nDESCRIPTION: Sets up Azure Blob storage support if AZURE_BUILD_DIR is defined. It adds necessary include directories, source files, and configures an imported shared library for Azure Blob chunk manager.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (DEFINED AZURE_BUILD_DIR)\n    add_definitions(-DAZURE_BUILD_DIR)\n    include_directories(azure-blob-storage)\n    include_directories(\"${AZURE_BUILD_DIR}/vcpkg_installed/${VCPKG_TARGET_TRIPLET}/include\")\n    set(SOURCE_FILES ${SOURCE_FILES} azure/AzureChunkManager.cpp)\n    add_library(azure_blob_chunk_manager SHARED IMPORTED)\n    set_target_properties(azure_blob_chunk_manager\n        PROPERTIES\n        IMPORTED_GLOBAL TRUE\n        IMPORTED_LOCATION \"${AZURE_BUILD_DIR}/libblob-chunk-manager${CMAKE_SHARED_LIBRARY_SUFFIX}\"\n    )\n    get_target_property(AZURE_IMPORTED_LOCATION azure_blob_chunk_manager IMPORTED_LOCATION)\n    get_target_property(AZURE_INTERFACE_INCLUDE_DIRECTORIES azure_blob_chunk_manager INTERFACE_INCLUDE_DIRECTORIES)\n    message(\"AZURE_IMPORTED_LOCATION: ${AZURE_IMPORTED_LOCATION}\")\n    message(\"AZURE_INTERFACE_INCLUDE_DIRECTORIES: ${AZURE_INTERFACE_INCLUDE_DIRECTORIES}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteRequest Message in Protobuf\nDESCRIPTION: Protobuf message definition for DeleteRequest which includes necessary fields for deletion operations like collection ID, partition ID, segment ID, primary keys, and timestamps.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230418-querynode_v2.md#2025-04-10_snippet_3\n\nLANGUAGE: Protobuf\nCODE:\n```\nmessage DeleteRequest {\n  common.MsgBase base = 1;\n  int64 collection_id = 2;\n  int64 partition_id = 3;\n  string vchannel_name = 4;\n  int64 segment_id = 5;\n  schema.IDs primary_keys = 6;\n  repeated uint64 timestamps = 7; \n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimeTickProvider Interface in Go\nDESCRIPTION: Defines the TimeTickProvider interface for components that need to process timetick messages to align timetick.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype TimeTickProvider interface {\n\tGetTimeTickChannel(ctx context.Context) (*milvuspb.StringResponse, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files and Creating Milvus Config Library in CMake\nDESCRIPTION: This snippet adds all source files in the current directory recursively and creates an object library named 'milvus_config' using those source files. It's part of the build process for the Milvus project's configuration component.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/config/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_config OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Querying DDL Request Latency in Milvus (PromQL)\nDESCRIPTION: PromQL queries to measure DDL request latency metrics including p99 and average latency over 2-minute windows for root coordinator DDL requests.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_32\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, function_name) (rate(milvus_rootcoord_ddl_req_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_rootcoord_ddl_req_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (function_name) / sum(increase(milvus_rootcoord_ddl_req_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (function_name)\n```\n\n----------------------------------------\n\nTITLE: Implementing K-Way Merge Algorithm for Search Results in Golang\nDESCRIPTION: This code snippet demonstrates the K-Way Merge Algorithm used by the Proxy to reduce multiple search results. It iterates through the top-k results, selecting the highest scoring result from each of the n ways in each iteration.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/proxy-reduce.md#2025-04-10_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nn = 4\nmultiple_results = [[topk results 1], [topk results 2], [topk results 3], [topk results 4]]\nlocs = [0, 0, 0, 0]\ntopk_results = []\nfor i -> topk:\n\tscore = min_score\n\tchoice = -1\n\tfor j -> n:\n\t\tchoiceOffset = locs[j]\n\t\tif choiceOffset > topk:\n\t\t\t// all result from this way has been got, got from other way\n\t\t\tcontinue\n\t\tscore_this_way = multiple_results[j][choiceOffset]\n\t\tif score_this_way > score:\n\t\t\tchoice = j\n\t\t\tscore = score_this_way\n\tif choice != -1:\n\t\t// update location\n\t\tlocs[choice]++\n\t\ttopk_results = append(topk_results, choice)\n```\n\n----------------------------------------\n\nTITLE: Describing Boolean Expression Rules in Milvus\nDESCRIPTION: A reference to the documentation for Boolean Expression Rules in Milvus, which provides details on expression usage.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/Search.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSee details of expression usage at [Boolean Expression Rules](https://milvus.io/docs/v2.0.0/boolean.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring Tantivy Library Properties\nDESCRIPTION: Sets up the Tantivy binding as an imported static library with appropriate properties and debug options.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/tantivy/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(tantivy_binding STATIC IMPORTED)\nadd_dependencies(tantivy_binding\n        install_tantivy_target\n        )\n\nset_target_properties(tantivy_binding\n        PROPERTIES\n        IMPORTED_GLOBAL TRUE\n        IMPORTED_LOCATION \"${TANTIVY_LIB_DIR}/${TANTIVY_NAME}\"\n        INTERFACE_INCLUDE_DIRECTORIES \"${CMAKE_INSTALL_PREFIX}/include\")\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n        add_compile_options(-fno-stack-protector -fno-omit-frame-pointer -fno-var-tracking -fsanitize=address)\n        add_link_options(-fno-stack-protector -fno-omit-frame-pointer -fno-var-tracking -fsanitize=address)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenDAL Storage in CMake for Milvus\nDESCRIPTION: Sets up OpenDAL storage support if USE_OPENDAL is set. It adds the OpenDAL include directory and includes the OpenDAL chunk manager source file.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_OPENDAL)\n    include_directories(${OPENDAL_INCLUDE_DIR})\n    set(SOURCE_FILES ${SOURCE_FILES} opendal/OpenDALChunkManager.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining GetCollectionStatistics RPC in Protobuf\nDESCRIPTION: Defines the RPC method for retrieving collection statistics, including the request message structure with collection details and the response message structure with status and statistics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc GetCollectionStatistics(GetCollectionStatisticsRequest) returns (GetCollectionStatisticsResponse) {}\n\nmessage GetCollectionStatisticsRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n}\n\nmessage GetCollectionStatisticsResponse {\n  common.Status status = 1;\n  repeated common.KeyValuePair stats = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Etcd KV Store in Go\nDESCRIPTION: Implements the TxnKV interface using Etcd as the backend storage, providing methods for key-value operations and watching.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_a_basic_components.md#2025-04-10_snippet_17\n\nLANGUAGE: go\nCODE:\n```\ntype etcdKV struct {\n\tclient   *clientv3.Client\n\trootPath string\n}\n\nfunc (kv *etcdKV) Close()\nfunc (kv *etcdKV) GetPath(key string) string\nfunc (kv *etcdKV) LoadWithPrefix(key string) ([]string, []string, error)\nfunc (kv *etcdKV) Load(key string) (string, error)\nfunc (kv *etcdKV) GetCount(key string) (int64, error)\nfunc (kv *etcdKV) MultiLoad(keys []string) ([]string, error)\nfunc (kv *etcdKV) Save(key, value string) error\nfunc (kv *etcdKV) MultiSave(kvs map[string]string) error\nfunc (kv *etcdKV) RemoveWithPrefix(prefix string) error\nfunc (kv *etcdKV) Remove(key string) error\nfunc (kv *etcdKV) MultiRemove(keys []string) error\nfunc (kv *etcdKV) MultiSaveAndRemove(saves map[string]string, removals []string) error\nfunc (kv *etcdKV) Watch(key string) clientv3.WatchChan\nfunc (kv *etcdKV) WatchWithPrefix(key string) clientv3.WatchChan\nfunc (kv *etcdKV) WatchWithRevision(key string, revision int64) clientv3.WatchChan\n\nfunc NewEtcdKV(etcdAddr string, rootPath string) *etcdKV\n```\n\n----------------------------------------\n\nTITLE: Executing PyTest Test Cases\nDESCRIPTION: Command to run specific test files using pytest framework\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python3 -W ignore -m pytest <test_file_name>\n```\n\n----------------------------------------\n\nTITLE: Querying Sync Timetick Latency (PromQL)\nDESCRIPTION: PromQL queries to measure the time taken by root coordinator to sync timestamps to PChannel, including p99 and average latency over 2-minute windows.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_33\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le) (rate(milvus_rootcoord_sync_timetick_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_rootcoord_sync_timetick_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) / sum(increase(milvus_rootcoord_sync_timetick_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m]))\n```\n\n----------------------------------------\n\nTITLE: Using WAL in Milvus Streaming Node\nDESCRIPTION: Example demonstrating how to use the WAL system in a Milvus streaming node. Shows the process of getting a builder, creating an opener, and opening a WAL instance with channel information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/streamingnode/server/wal/RAEDME.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/milvus-io/milvus/internal/streamingnode/server/wal/registry\"\n\nname := \"your builder name\"\nvar yourCh *options.PChannelInfo\n\nopener, err := registry.MustGetBuilder(name).Build()\nif err != nil {\n    panic(err)\n}\nctx := context.Background()\nlogger, err := opener.Open(ctx, wal.OpenOption{\n    Channel: yourCh  \n})\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Codes Enum in Protocol Buffers for Milvus\nDESCRIPTION: A comprehensive enumeration of error codes used throughout the Milvus system. The enum starts with a Success code (0) and includes various error categories such as connection failures, permission issues, collection-related errors, index problems, resource constraints, and internal errors.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_d_error_code.md#2025-04-10_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nenum ErrorCode {\n    Success = 0;\n    UnexpectedError = 1;\n    ConnectFailed = 2;\n    PermissionDenied = 3;\n    CollectionNotExists = 4;\n    IllegalArgument = 5;\n    IllegalDimension = 7;\n    IllegalIndexType = 8;\n    IllegalCollectionName = 9;\n    IllegalTOPK = 10;\n    IllegalRowRecord = 11;\n    IllegalVectorID = 12;\n    IllegalSearchResult = 13;\n    FileNotFound = 14;\n    MetaFailed = 15;\n    CacheFailed = 16;\n    CannotCreateFolder = 17;\n    CannotCreateFile = 18;\n    CannotDeleteFolder = 19;\n    CannotDeleteFile = 20;\n    BuildIndexError = 21;\n    IllegalNLIST = 22;\n    IllegalMetricType = 23;\n    OutOfMemory = 24;\n    IndexNotExist = 25;\n    EmptyCollection = 26;\n\n    // internal error code.\n    DDRequestRace = 1000;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Jemalloc Source URL in CMake\nDESCRIPTION: Determines the source URL for Jemalloc, either from an environment variable or a default GitHub release URL.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/jemalloc/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (DEFINED ENV{MILVUS_JEMALLOC_URL})\n    set(JEMALLOC_SOURCE_URL \"$ENV{MILVUS_JEMALLOC_URL}\")\nelse ()\n    set(JEMALLOC_SOURCE_URL\n            \"https://github.com/jemalloc/jemalloc/releases/download/${MILVUS_JEMALLOC_BUILD_VERSION}/jemalloc-${MILVUS_JEMALLOC_BUILD_VERSION}.tar.bz2\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Native Storage Library in Milvus\nDESCRIPTION: Defines an object library named 'gcp-native-storage' that includes GcpNativeChunkManager.cpp and GcpNativeClientManager.cpp. This library likely implements GCP-specific storage management functionalities for Milvus.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/gcp-native-storage/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(gcp-native-storage OBJECT GcpNativeChunkManager.cpp GcpNativeClientManager.cpp)\n```\n\n----------------------------------------\n\nTITLE: Collection Load Request Definition in Protobuf\nDESCRIPTION: Message structure for loading collections into memory, containing database and collection name fields.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage LoadCollectionRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Existence Check Response in Protobuf\nDESCRIPTION: Boolean response structure for checking collection existence, including status and value fields.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BoolResponse {\n  common.Status status = 1;\n  bool value = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Jemalloc Library in CMake\nDESCRIPTION: Adds Jemalloc as an imported shared library target in CMake, setting its properties and dependencies.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/jemalloc/CMakeLists.txt#2025-04-10_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(jemalloc SHARED IMPORTED)\nset_target_properties(jemalloc\n        PROPERTIES INTERFACE_LINK_LIBRARIES Threads::Threads\n        IMPORTED_LOCATION \"${JEMALLOC_PREFIX}/${CMAKE_INSTALL_LIBDIR}/libjemalloc.so\"\n        INTERFACE_INCLUDE_DIRECTORIES \"${JEMALLOC_PREFIX}/jemalloc/include\")\nadd_dependencies(jemalloc jemalloc_ep)\n```\n\n----------------------------------------\n\nTITLE: Calculating ID Allocation Rate (PromQL)\nDESCRIPTION: PromQL query to measure the rate of ID allocation by root coordinator over a 2-minute window.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_34\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_rootcoord_id_alloc_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120)\n```\n\n----------------------------------------\n\nTITLE: Starting Third-party Components for Milvus Integration Tests\nDESCRIPTION: This command starts the necessary third-party components for Milvus integration tests using Docker Compose.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/integration/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd [milvus-folder]/deployments/docker/dev && docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Querying Search Latency (p99) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the 99th percentile of the latency of receiving search and query requests by each proxy within the past two minutes using the milvus_proxy_sq_latency_bucket metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_2\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, query_type, pod, node_id) (rate(milvus_proxy_sq_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\n----------------------------------------\n\nTITLE: Adding RocksDB Package Configuration in CMake for Milvus\nDESCRIPTION: This command adds RocksDB to the package configuration for the Milvus project. It ensures that the necessary RocksDB dependencies are included in the build process.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/rocksdb/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmilvus_add_pkg_config(\"rocksdb\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Boost Bitset Extension in CMake\nDESCRIPTION: This CMake snippet finds the required Boost package and creates a library called boost_bitset_ext from the dynamic_bitset_ext.cpp source file. The library likely extends Boost's dynamic_bitset functionality for use in the Milvus project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/boost_ext/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Boost REQUIRED)\nadd_library(boost_bitset_ext dynamic_bitset_ext.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining GetPartitionStatisticsRequest Message in Protobuf\nDESCRIPTION: Defines the GetPartitionStatisticsRequest message structure used in the GetPartitionStatistics method. It includes fields for base message, database name, collection name, and partition name.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_17\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetPartitionStatisticsRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string partition_name = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Status Response Definition in Protobuf\nDESCRIPTION: Common status response structure used across multiple RPCs, containing error code and reason fields.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage Status {\nErrorCode error_code = 1;\n  string reason = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RocksDB Headers in Milvus Project\nDESCRIPTION: This CMake command installs the RocksDB header files from the Conan package to the specified installation directory. It ensures that the RocksDB headers are available for inclusion in the Milvus project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/rocksdb/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY \"${CONAN_INCLUDE_DIRS_ROCKSDB}/rocksdb/\" DESTINATION \"${CMAKE_INSTALL_PREFIX}/include/rocksdb/\")\n```\n\n----------------------------------------\n\nTITLE: Counting Data Nodes Managed by Milvus Data Coordinator (PromQL)\nDESCRIPTION: This query counts the number of data nodes managed by the data coordinator. It sums the 'milvus_datacoord_datanode_num' metric, grouping by the Kubernetes instance.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_47\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_datacoord_datanode_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\n----------------------------------------\n\nTITLE: Setting SimdJSON Include Directory in CMake\nDESCRIPTION: This snippet sets the include directory path for the SimdJSON library. It uses the source directory of the fetched SimdJSON content and caches it as an internal variable for use in the project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/simdjson/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset( SIMDJSON_INCLUDE_DIR ${simdjson_SOURCE_DIR}/include CACHE INTERNAL \"Path to simdjson include directory\" )\n```\n\n----------------------------------------\n\nTITLE: Querying Reduce Search Result Latency (p99) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the 99th percentile of the latency of aggregating search and query results by proxy within the past two minutes using the milvus_proxy_sq_reduce_result_latency_bucket metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_6\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, query_type, pod, node_id) (rate(milvus_proxy_sq_reduce_result_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\n----------------------------------------\n\nTITLE: Adding Librdkafka Package Configuration in CMake for Milvus\nDESCRIPTION: This snippet adds the rdkafka package configuration to the Milvus project using a custom CMake function.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/rdkafka/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmilvus_add_pkg_config(\"rdkafka\")\n```\n\n----------------------------------------\n\nTITLE: Configuring FetchContent for Dependency Management\nDESCRIPTION: Sets up FetchContent, a CMake module for fetching and managing external dependencies. It specifies the base directory for downloaded content and enables verbose output.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(FetchContent)\nset(FETCHCONTENT_BASE_DIR  ${MILVUS_BINARY_DIR}/3rdparty_download)\nset(FETCHCONTENT_QUIET     OFF)\n```\n\n----------------------------------------\n\nTITLE: Defining LoadPartitions RPC in Protobuf\nDESCRIPTION: Defines the RPC method for loading partitions, including the request message structure with partition details and the response status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc LoadPartitions(LoadPartitionsRequest) returns (common.Status) {}\n\nmessage LoadPartitionsRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  repeated string partition_names = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: DropIndex Request Structure in Go\nDESCRIPTION: Simple request structure for dropping an index by its ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap03_index_service.md#2025-04-10_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype DropIndexRequest struct {\n\tIndexID      UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Milvus Cluster\nDESCRIPTION: Commands to start the Milvus cluster after third-party services are running, using a provided script that handles the cluster initialization.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ cd [milvus project path]\n$ ./scripts/start_cluster.sh\n```\n\n----------------------------------------\n\nTITLE: Counting Segments in Milvus Data Coordinator (PromQL)\nDESCRIPTION: This query counts the number of segments of all types recorded in metadata by the data coordinator. It sums the 'milvus_datacoord_segment_num' metric, grouping by segment state.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_48\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_datacoord_segment_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (segment_state)\n```\n\n----------------------------------------\n\nTITLE: Required Environment Specifications for Milvus Cluster\nDESCRIPTION: Defines the recommended operating system and software versions required for compiling and running Milvus cluster, including OS, Go, CMake, and GCC versions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOS: Ubuntu 20.04\ngo：1.21\ncmake: >=3.18\ngcc： 7.5\n```\n\n----------------------------------------\n\nTITLE: Querying Reduce Search Result Latency (average) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average latency of aggregating search and query results by proxy within the past two minutes using sum and count metrics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_7\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_sq_reduce_result_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, query_type) / sum(increase(milvus_proxy_sq_reduce_result_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, query_type)\n```\n\n----------------------------------------\n\nTITLE: Starting Third-Party Services for Milvus\nDESCRIPTION: Commands to start the required third-party services for Milvus using Docker Compose, supporting both the legacy and new Docker Compose command formats.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ cd [milvus project path]/deployments/docker/cluster\n$ docker-compose up -d\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Setting Tantivy Library Paths and Environment\nDESCRIPTION: Defines installation directories, library names, and sets up cargo environment variables.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/tantivy/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(TANTIVY_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\nset(TANTIVY_INCLUDE_DIR \"${CMAKE_INSTALL_PREFIX}/include\")\nset(TANTIVY_NAME \"libtantivy_binding${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n\nset(LIB_FILE \"${CMAKE_CURRENT_BINARY_DIR}/${TARGET_DIR}/${TANTIVY_NAME}\")\nset(LIB_HEADER_FOLDER \"${CMAKE_CURRENT_SOURCE_DIR}/tantivy-binding/include\")\n\nset(HOME_VAR $ENV{HOME})\nset(PATH_VAR $ENV{PATH})\nset(ENV{PATH} ${HOME_VAR}/.cargo/bin:${PATH_VAR})\n```\n\n----------------------------------------\n\nTITLE: Defining ShowPartitionsRequest Message in Protobuf\nDESCRIPTION: Defines the ShowPartitionsRequest message structure used in the ShowPartitions method. It includes fields for base message, database name, collection name, and collection ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_20\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage ShowPartitionsRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  int64 collectionID = 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Node Implementation Interface Methods in Go\nDESCRIPTION: Defines the interface methods for NodeImpl, which is likely the underlying implementation of the Proxy. These methods handle initialization, startup, shutdown, and client configuration.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap05_proxy.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (node *NodeImpl) Init() error\nfunc (node *NodeImpl) Start() error\nfunc (node *NodeImpl) Stop() error\nfunc (node *NodeImpl) AddStartCallback(callbacks ...func())\nfunc (node *NodeImpl) waitForServiceReady(ctx context.Context, service Component, serviceName string) error\nfunc (node *NodeImpl) lastTick() Timestamp\nfunc (node *NodeImpl) AddCloseCallback(callbacks ...func())\nfunc (node *NodeImpl) SetRootCoordClient(cli RootCoordClient)\nfunc (node *NodeImpl) SetIndexCoordClient(cli IndexCoordClient)\nfunc (node *NodeImpl) SetDataCoordClient(cli DataCoordClient)\nfunc (node *NodeImpl) SetProxyCoordClient(cli ProxyCoordClient)\nfunc (node *NodeImpl) SetQueryCoordClient(cli QueryCoordClient)\n\nfunc NewProxyImpl(ctx context.Context, factory msgstream.Factory) (*NodeImpl, error)\n```\n\n----------------------------------------\n\nTITLE: Installing Docker Compose\nDESCRIPTION: Commands to download, install, and verify Docker Compose, which is required for managing the containerized services that Milvus depends on.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo curl -L \"https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n$ sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n$ docker-compose --version\n$ docker compose --version\n```\n\n----------------------------------------\n\nTITLE: Calculating Stored Rows in Milvus Data Coordinator (PromQL)\nDESCRIPTION: This query calculates the total number of rows of valid and flushed data in the data coordinator. It sums the 'milvus_datacoord_stored_rows_num' metric, grouping by the Kubernetes instance.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_50\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_datacoord_stored_rows_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\n----------------------------------------\n\nTITLE: Adding a TestObject Message in Protocol Buffer Definition\nDESCRIPTION: Example of adding a new common message named TestObject inside common.proto with an int64 value field. This represents a simple modification to message definitions in the protocol buffer files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/how_to_develop_with_local_milvus_proto.md#2025-04-10_snippet_0\n\nLANGUAGE: proto\nCODE:\n```\n// common.proto\nmessage TestObject {\n    int64 value = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating DML Request Latency in Milvus with PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of successfully receiving DML requests by each proxy in the past two minutes. It uses the 'milvus_proxy_dml_req_latency' metric and groups results by function name, pod, and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_25\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, function_name, pod, node_id) (rate(milvus_proxy_dml_req_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_dml_req_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (function_name, pod, node_id) / sum(increase(milvus_proxy_dml_req_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (function_name, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Running All Unit Tests\nDESCRIPTION: Command to run all unit tests for Milvus, including both Go and C++ test cases, to verify that the compiled code functions correctly.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ make unittest\n```\n\n----------------------------------------\n\nTITLE: Configuring Tantivy Cargo Build Settings\nDESCRIPTION: Sets up Cargo build configuration including features and build type (Debug/Release) settings for Tantivy.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/tantivy/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TANTIVY_FEATURES_LIST \"\" CACHE STRING \"List of Cargo features to enable\")\nstring(REPLACE \";\" \",\" TANTIVY_FEATURES \"${TANTIVY_FEATURES_LIST}\")\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(CARGO_CMD cargo build)\n    set(TARGET_DIR \"debug\")\nelse ()\n    set(CARGO_CMD cargo build --release)\n    set(TARGET_DIR \"release\")\nendif ()\n\nif (TANTIVY_FEATURES)\n    set(CARGO_CMD ${CARGO_CMD} --features ${TANTIVY_FEATURES})\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Defining Insert gRPC Method in Protobuf\nDESCRIPTION: Defines the Insert gRPC method for inserting a batch of rows into a collection or partition. It takes an InsertRequest and returns an InsertResponse.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_22\n\nLANGUAGE: protobuf\nCODE:\n```\nrpc Insert(InsertRequest) returns (InsertResponse){}\n```\n\n----------------------------------------\n\nTITLE: Running Tests Commands for Milvus Go Client\nDESCRIPTION: Provides examples of command-line commands for running tests, including running all tests, specific tests, and using the gotestsum tool for improved test output.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Run all tests\ngo test ./testcases/...\n\n# Run specific test\ngo test -run TestYourFeature ./testcases/\n\n# Run with verbose output\ngo test -v ./testcases/...\n\n# gotestsum\nRecommend you to use gotestsum https://github.com/gotestyourself/gotestsum\n\n# Run all default cases\ngotestsum --format testname --hide-summary=output -v ./testcases/... --addr=127.0.0.1:19530 -timeout=30m\n\n# Run a specified file\ngotestsum --format testname --hide-summary=output ./testcases/collection_test.go ./testcases/main_test.go --addr=127.0.0.1:19530\n\n# Run L3 rg cases\ngotestsum --format testname --hide-summary=output -v ./testcases/advcases/... --addr=127.0.0.1:19530 -timeout=30m -tags=rg\n\n# Run advanced rg cases and default cases\n# rg cases conflicts with default cases, so -p=1 is required\ngotestsum --format testname --hide-summary=output -v ./testcases/... --addr=127.0.0.1:19530 -timeout=30m -tags=rg -p 1\n```\n\n----------------------------------------\n\nTITLE: Adding GCP-specific test files in CMake\nDESCRIPTION: Conditionally adds Google Cloud Platform specific test files and definitions when GCP native support is enabled.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_GCP_NATIVE)\n    add_definitions(-DENABLE_GCP_NATIVE)\n    set(MILVUS_TEST_FILES\n                ${MILVUS_TEST_FILES}\n                test_gcp_native_chunk_manager.cpp\n                )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Sync Time in Milvus Data Coordinator (PromQL)\nDESCRIPTION: These queries calculate the average, maximum, and minimum epoch time synced by the data coordinator in each physical channel. They use the 'milvus_datacoord_consumer_datanode_tt_lag_ms' metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_52\n\nLANGUAGE: promql\nCODE:\n```\navg(milvus_datacoord_consumer_datanode_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\nLANGUAGE: promql\nCODE:\n```\nmax(milvus_datacoord_consumer_datanode_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\nLANGUAGE: promql\nCODE:\n```\nmin(milvus_datacoord_consumer_datanode_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\n----------------------------------------\n\nTITLE: Generated Go Struct with Updated TestObject Field\nDESCRIPTION: The resulting Go struct definition for SyncSegmentsRequest after protocol buffer generation, showing the newly added TestObject field integrated into the existing structure.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/how_to_develop_with_local_milvus_proto.md#2025-04-10_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ntype SyncSegmentsRequest struct {\n    PlanID               int64                `protobuf:\"varint,1,opt,name=planID,proto3\" json:\"planID,omitempty\"`\n    CompactedTo          int64                `protobuf:\"varint,2,opt,name=compacted_to,json=compactedTo,proto3\" json:\"compacted_to,omitempty\"`\n    NumOfRows            int64                `protobuf:\"varint,3,opt,name=num_of_rows,json=numOfRows,proto3\" json:\"num_of_rows,omitempty\"`\n    CompactedFrom        []int64              `protobuf:\"varint,4,rep,packed,name=compacted_from,json=compactedFrom,proto3\" json:\"compacted_from,omitempty\"`\n    StatsLogs            []*FieldBinlog       `protobuf:\"bytes,5,rep,name=stats_logs,json=statsLogs,proto3\" json:\"stats_logs,omitempty\"`\n    ChannelName          string               `protobuf:\"bytes,6,opt,name=channel_name,json=channelName,proto3\" json:\"channel_name,omitempty\"`\n    PartitionId          int64                `protobuf:\"varint,7,opt,name=partition_id,json=partitionId,proto3\" json:\"partition_id,omitempty\"`\n    CollectionId         int64                `protobuf:\"varint,8,opt,name=collection_id,json=collectionId,proto3\" json:\"collection_id,omitempty\"`\n    Obj                  *commonpb.TestObject `protobuf:\"bytes,9,opt,name=obj,proto3\" json:\"obj,omitempty\"`\n    XXX_NoUnkeyedLiteral struct{}             `json:\"-\"`\n    XXX_unrecognized     []byte               `json:\"-\"`\n    XXX_sizecache        int32                `json:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Proxy Nodes in Milvus with PromQL\nDESCRIPTION: This query calculates the number of proxies created in Milvus. It uses the 'milvus_rootcoord_proxy_num' metric and groups results by app_kubernetes_io_instance.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_29\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_rootcoord_proxy_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\n----------------------------------------\n\nTITLE: Setting up include directories for Milvus unit tests in CMake\nDESCRIPTION: Configures include directories for the Milvus unit test build by adding paths to the main source code, third-party libraries, and external dependencies.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_HOME_DIRECTORY}/src)\ninclude_directories(${CMAKE_HOME_DIRECTORY}/src/thirdparty)\ninclude_directories(\n    ${KNOWHERE_INCLUDE_DIR}\n    ${SIMDJSON_INCLUDE_DIR}\n    ${TANTIVY_INCLUDE_DIR}\n    ${CONAN_INCLUDE_DIRS}\n    ${MILVUS_STORAGE_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories in CMake\nDESCRIPTION: Adds the thirdparty and src subdirectories to the build process. The comment notes that add_subdirectory(src) must come after appending coverage flags.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Warning: add_subdirectory(src) must be after append_flags(\"-ftest-coverage\"),\n# otherwise cpp code coverage tool will miss src folder\nadd_subdirectory( thirdparty )\nadd_subdirectory( src )\n```\n\n----------------------------------------\n\nTITLE: Defining GetIndexStatesResponse Message in Protobuf\nDESCRIPTION: Defines the GetIndexStatesResponse message structure returned by the GetIndexStates method. It includes fields for status and index state.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_32\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetIndexStatesResponse {\n  common.Status status = 1;\n  common.IndexState state = 2;\n}\n\nenum IndexState {\n  IndexStateNone = 0;\n  Unissued = 1;\n  InProgress = 2;\n  Finished = 3;\n  Failed = 4;\n  Deleted = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for Parameter Options in Go\nDESCRIPTION: Demonstrates how to create a constructor function for new parameter option types, providing default values for the parameters.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/go_client/README.md#2025-04-10_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc TNewYourOption() *YourNewOption {\n    return &YourNewOption{\n        newParam1: \"default\",\n        newParam2: 0,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining test YAML path constant for Milvus segcore tests\nDESCRIPTION: Adds a compiler definition for the path to the test YAML configuration file used by segcore tests.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DMILVUS_TEST_SEGCORE_YAML_PATH=\"${CMAKE_SOURCE_DIR}/unittest/test_utils/test_segcore.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Querying Msg Rows Consume Rate in Milvus Data Node with PromQL\nDESCRIPTION: This query calculates the number of rows of streaming messages consumed per second by each data node within the past two minutes. It uses the milvus_datanode_msg_rows_count metric and groups results by message type, pod, and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_54\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(increase(milvus_datanode_msg_rows_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (msg_type, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Building Local Protocol Buffer Definitions with make\nDESCRIPTION: Shell commands to build the local milvus-proto repository after modifications, demonstrating the compilation process for protocol buffer definitions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/how_to_develop_with_local_milvus_proto.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# make all\n...\nInstalling only the local directory...\n-- Install configuration: \"\"\nmake[1]: Leaving directory '/home/silverxia/workspace/milvus-proto/cmake-build'\n~/workspace/milvus-proto\nusing protoc-gen-go: /home/silverxia/go/bin/protoc-gen-go\n~/workspace/milvus-proto/proto ~/workspace/milvus-proto\nlibprotoc 3.21.4\n~/workspace/milvus-proto\n```\n\n----------------------------------------\n\nTITLE: Calculating Root Coordinator Sync Time in Milvus with PromQL\nDESCRIPTION: These queries calculate the average, maximum, and minimum epoch time synced by each root coordinator in each physical channel. It uses the 'milvus_rootcoord_produce_tt_lag_ms' metric and groups results by app_kubernetes_io_instance.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_30\n\nLANGUAGE: promql\nCODE:\n```\navg(milvus_rootcoord_produce_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\nmax(milvus_rootcoord_produce_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\nmin(milvus_rootcoord_produce_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\n----------------------------------------\n\nTITLE: Adding benchmark testing subdirectory in CMake\nDESCRIPTION: Adds the benchmark testing subdirectory to the build configuration.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(bench)\n```\n\n----------------------------------------\n\nTITLE: Defining DropIndexRequest Message in Protobuf\nDESCRIPTION: Defines the DropIndexRequest message structure used in the DropIndex method. It includes fields for base message, database name, collection name, field name, and index name.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/appendix_b_api_reference.md#2025-04-10_snippet_34\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DropIndexRequest {\n  common.MsgBase base = 1;\n  string db_name = 2;\n  string collection_name = 3;\n  string field_name = 4;\n  string index_name = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Partition Initialization Method Signature in Milvus API Wrapper\nDESCRIPTION: This code demonstrates the method signature for initializing a partition, showing the parameters including collection, name, description, and test-specific parameters like check_task and check_items.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef init_partition(self, collection, name, description=\"\", check_task=None, check_items=None, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Building OpenBLAS from Source\nDESCRIPTION: Alternative approach to install OpenBLAS by building it from source code, providing more control over the build configuration and optimization flags.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://github.com/xianyi/OpenBLAS/archive/v0.3.9.tar.gz && \\\n$ tar zxvf v0.3.9.tar.gz && cd OpenBLAS-0.3.9 && \\\n$ make TARGET=CORE2 DYNAMIC_ARCH=1 DYNAMIC_OLDER=1 USE_THREAD=0 USE_OPENMP=0 FC=gfortran CC=gcc COMMON_OPT=\"-O3 -g -fPIC\" FCOMMON_OPT=\"-O3 -g -fPIC -frecursive\" NMAX=\"NUM_THREADS=128\" LIBPREFIX=\"libopenblas\" INTERFACE64=0 NO_STATIC=1 && \\\n$ make PREFIX=/usr install\n```\n\n----------------------------------------\n\nTITLE: Calculating Flush Data Size Rate in Milvus Data Node using PromQL\nDESCRIPTION: This query computes the size of each flushed message recorded per second by each data node within the past two minutes. It utilizes the milvus_datanode_flushed_data_size metric and groups results by message type, pod, and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_55\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(increase(milvus_datanode_flushed_data_size{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (msg_type, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring feature-specific definitions in Milvus\nDESCRIPTION: Sets conditional compilation definitions based on build options. Enables GPU support, dynamic SIMD instructions, and OpenDAL storage backend when the corresponding options are enabled.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DELPP_THREAD_SAFE)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nmessage( STATUS \"Building using CMake version: ${CMAKE_VERSION}\" )\n\nif ( MILVUS_GPU_VERSION )\n    add_definitions(-DMILVUS_GPU_VERSION)\nendif ()\n\nif ( USE_DYNAMIC_SIMD )\n    add_definitions(-DUSE_DYNAMIC_SIMD)\nendif()\n\nif (USE_OPENDAL) \n    add_definitions(-DUSE_OPENDAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Querying Query Coordinator Metrics (PromQL)\nDESCRIPTION: PromQL queries for monitoring query coordinator performance including load requests, release requests, and task latencies.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_35\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le) (rate(milvus_querycoord_load_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_querycoord_load_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) / sum(increase(milvus_querycoord_load_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m]))\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Analysis\nDESCRIPTION: Command to generate code coverage reports for both Go and C++ code, which helps identify untested portions of the codebase.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ make codecov\n```\n\n----------------------------------------\n\nTITLE: Setting IVF_FLAT Index Parameters in Python for Milvus\nDESCRIPTION: This code snippet demonstrates how to set the building and search parameters for the IVF_FLAT index type in Milvus using Python. It includes the index type, metric type, and the 'nlist' parameter for building, and adds 'nprobe' for searching.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# IVF_FLAT\n{\n    \"index_type\": \"IVF_FLAT\",\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n    #Special for IVF_FLAT\n    \"nlist\": 100     # int. 1~65536\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# IVF_FLAT\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n    #Special for IVF_FLAT\n    \"nprobe\": 8       # int. 1~nlist(cpu), 1~min[2048, nlist](gpu)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Python Test Dependencies\nDESCRIPTION: Command to install required Python packages for running PyMilvus tests\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting up platform-specific configurations for Milvus in CMake\nDESCRIPTION: Detects the operating system and configures appropriate build flags. Special handling is provided for Apple/Darwin, Linux, and MSYS environments with an error for unsupported platforms.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif ( APPLE )\n    message(STATUS \"==============Darwin Environment==============\")\nelseif (${CMAKE_SYSTEM_NAME} MATCHES \"Linux\")\n    message(STATUS \"==============Linux Environment===============\")\n    set(LINUX TRUE)\nelseif ( MSYS )\n    message( STATUS \"==============MSYS Environment===============\" )\nelse ()\n    message(FATAL_ERROR \"Unsupported platform!\" )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Counting Consumer Number in Milvus Data Node with PromQL\nDESCRIPTION: This query sums up the number of consumers created on each data node. It uses the milvus_datanode_consumer_num metric and groups results by pod and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_56\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(milvus_datanode_consumer_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files in CMake for Milvus Storage\nDESCRIPTION: Adds source files from the current directory to the build process. This is typically used to include all .cpp files in the current directory for compilation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_source_at_current_directory()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Search Group NQ in Milvus Query Nodes (PromQL)\nDESCRIPTION: These queries calculate the 99th percentile and average NQ of combined search requests executed by query nodes over the past 2 minutes. They use the 'milvus_querynode_search_group_nq' metrics with histogram quantiles and rate functions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_43\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_querynode_search_group_nq_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_querynode_search_group_nq_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_querynode_search_group_nq_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Setting compiler flags for macOS in Milvus build\nDESCRIPTION: Appends macOS-specific compiler flags, including position-independent code, thread safety settings, OpenMP support, and several warning suppressions required for compiling on Apple platforms.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif ( APPLE )\n    append_flags( CMAKE_CXX_FLAGS\n            FLAGS\n            \"-fPIC\"\n            \"-DELPP_THREAD_SAFE\"\n            \"-fopenmp\"\n            \"-pedantic\"\n            \"-Wall\"\n            \"-D_DARWIN_C_SOURCE\"\n            \"-Wno-gnu-zero-variadic-macro-arguments\"\n            \"-Wno-variadic-macros\"\n            \"-Wno-reorder-ctor\"\n            \"-DBOOST_STACKTRACE_GNU_SOURCE_NOT_REQUIRED=1\"\n            )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting BIN_IVF_FLAT Index Parameters in Python for Milvus\nDESCRIPTION: This code snippet shows how to set the building and search parameters for the BIN_IVF_FLAT index type in Milvus using Python. It specifies the index type, metric type (jaccard, hamming, or tanimoto), and the 'nlist' and 'nprobe' parameters.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# BIN_IVF_FLAT\n{\n    \"index_type\": \"BIN_IVF_FLAT\",\n    \"metric_type\": \"jaccard\",  # one of jaccard, hamming, tanimoto\n\n    #Special for BIN_IVF_FLAT\n    \"nlist\": 100           # int. 1~65536\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# BIN_IVF_FLAT\n{\n    \"topk\": top_k,\n    \"query\": queries,\n\n  \t#Special for BIN_IVF_FLAT\n    \"metric_type\": \"jaccard\",  # one of jaccard, hamming, tanimoto\n    \"nprobe\": 8            # int. 1~nlist(cpu), 1~min[2048, nlist](gpu)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Milvus Benchmarks in CMake\nDESCRIPTION: Specifies the source files for the general benchmarks and the index builder benchmark. This allows CMake to know which files to compile for each executable.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/bench/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(bench_srcs\n    bench_naive.cpp\n    bench_search.cpp\n)\n\nset(indexbuilder_bench_srcs\n        bench_indexbuilder.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Measuring Sync Time in Milvus Data Node with PromQL\nDESCRIPTION: These queries calculate the average, maximum, and minimum number of epoch time synced by each data node in all physical topics. They use the milvus_datanode_produce_tt_lag_ms metric and group results by pod and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_58\n\nLANGUAGE: PromQL\nCODE:\n```\navg(milvus_datanode_produce_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\nmax(milvus_datanode_produce_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\nmin(milvus_datanode_produce_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Native Storage in CMake for Milvus\nDESCRIPTION: Conditionally enables GCP native storage support by adding a compiler definition and including the gcp-native-storage subdirectory if ENABLE_GCP_NATIVE is set.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_GCP_NATIVE)\n    add_definitions(-DENABLE_GCP_NATIVE)\n    add_subdirectory(gcp-native-storage)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Counting Flowgraph Objects in Milvus Data Nodes (PromQL)\nDESCRIPTION: This query counts the number of flowgraph objects corresponding to each data node. It sums the 'milvus_datanode_flowgraph_num' metric, grouping by pod and node_id. Each shard in a collection corresponds to a flowgraph object.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_53\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_datanode_flowgraph_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Milvus Java Client via Maven\nDESCRIPTION: Shows how to add the Milvus Java client dependency to a Maven project by including it in the pom.xml file. This is a prerequisite for using the Java client with Milvus.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/java_client/README.md#2025-04-10_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.milvus</groupId>\n    <artifactId>milvus-sdk-java</artifactId>\n    <version>2.2.4</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting IVF_PQ Index Parameters in Python for Milvus\nDESCRIPTION: This code snippet illustrates how to set the building and search parameters for the IVF_PQ index type in Milvus using Python. It includes the index type, metric type, 'nlist', and 'm' parameters for building, and adds 'nprobe' for searching.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# IVF_PQ\n{\n    \"index_type\": \"IVF_PQ\",\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n\t\t#Special for IVF_PQ\n    \"nlist\": 100,     # int. 1~65536\n    \"m\": 8\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# IVF_PQ\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n    #Special for IVF_PQ\n    \"nprobe\": 8       # int. 1~nlist(cpu), 1~min[2048, nlist](gpu)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Milvus Tests with Authentication\nDESCRIPTION: This snippet demonstrates how to install required dependencies and execute Milvus test cases using pytest. It specifies parameters for the endpoint, MinIO host, and test selection criteria.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/restful_client_v2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\npytest testcases -m L0 -n 6 -v --endpoint http://127.0.0.1:19530 --minio_host 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Verifying Docker Compose Version in Shell\nDESCRIPTION: This command checks the installed version of Docker Compose. It displays the version of Docker Compose, docker-py, CPython, and OpenSSL.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose version\n\ndocker compose version 1.25.5, build 8a1c60f6\ndocker-py version: 4.1.0\nCPython version: 3.7.5\nOpenSSL version: OpenSSL 1.1.1f  31 Mar 2020\n```\n\n----------------------------------------\n\nTITLE: Measuring Save Data Latency in Milvus Data Node using PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of the time used to write a buffer into the storage layer by each data node within the past two minutes. They use the milvus_datanode_save_latency metric and its related histogram buckets.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_61\n\nLANGUAGE: PromQL\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_datanode_save_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n\nsum(increase(milvus_datanode_save_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_datanode_save_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files and Building Object Library for Milvus Execution Engine in CMake\nDESCRIPTION: This snippet recursively adds all source files from the current directory and creates an OBJECT library named milvus_exec. The custom function add_source_at_current_directory_recursively() is used to collect all source files, which are then stored in the SOURCE_FILES variable.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/exec/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_exec OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Calculating Encode Buffer Latency in Milvus Data Node with PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of the time used to encode a buffer by each data node within the past two minutes. They use the milvus_datanode_encode_buffer_latency metric and its related histogram buckets.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_60\n\nLANGUAGE: PromQL\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_datanode_encode_buffer_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n\nsum(increase(milvus_datanode_encode_buffer_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_datanode_encode_buffer_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Test Build with CMake\nDESCRIPTION: Sets up a CMake project for Azure Blob storage testing, creating an executable that links against Azure SDK libraries and Google Test framework. The test executable combines the test file with the Azure Blob chunk manager implementation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/azure-blob-storage/test/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(azure-blob-test)\n\nadd_executable(azure-blob-test test_azure_blob_chunk_manager.cpp ../AzureBlobChunkManager.cpp)\nfind_package(GTest CONFIG REQUIRED)\ntarget_link_libraries(azure-blob-test PRIVATE Azure::azure-identity Azure::azure-storage-blobs GTest::gtest blob-chunk-manager)\n```\n\n----------------------------------------\n\nTITLE: Setting ANNOY Index Parameters in Python for Milvus\nDESCRIPTION: This code snippet shows how to set the building and search parameters for the ANNOY index type in Milvus using Python. It specifies the index type, metric type, and the 'n_trees' parameter for building, and adds 'search_k' for searching.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# ANNOY\n{\n    \"index_type\": \"ANNOY\",\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n    #Special for ANNOY\n    \"n_trees\": 8      # int. 1~1024\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n# ANNOY\n{\n    \"topk\": top_k,\n    \"query\": queries,\n    \"metric_type\": \"L2\",  # one of L2, IP\n\n  \t#Special for ANNOY\n    \"search_k\": -1    # int. {-1} U [top_k, n*n_trees], n represents vectors count.\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting NAS for Test Data\nDESCRIPTION: Command to mount network storage for accessing test datasets like SIFT/deep\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/benchmark/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mount -t cifs -o username=test,vers=1.0 //172.16.70.249/test /test\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Storage Blobs and Identity Dependencies\nDESCRIPTION: Finds and links the required Azure Storage Blobs and Azure Identity C++ packages. It also sets compiler flags for the project, including warnings and position-independent code.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/azure-blob-storage/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(azure-storage-blobs-cpp CONFIG REQUIRED)\nfind_package(azure-identity-cpp CONFIG REQUIRED)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wno-unused-parameter -Wno-return-type -Wno-pedantic -fPIC\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Flush Operate Rate in Milvus Data Node with PromQL\nDESCRIPTION: This query calculates the number of times each data node flushes a buffer per second within the past two minutes. It uses the milvus_datanode_flush_buffer_op_count metric and groups results by status, pod, and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_62\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(increase(milvus_datanode_flush_buffer_op_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (status, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus Futures Library Build in CMake\nDESCRIPTION: CMake commands to build the milvus_futures library as an OBJECT library by recursively collecting source files from the current directory.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/futures/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_futures OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Calculating Index Task Rate in Milvus Index Node using PromQL\nDESCRIPTION: This query calculates the average number of index building tasks received by each index node per second within the past two minutes. It uses the milvus_indexnode_index_task_count metric and groups results by status, pod, and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_69\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(increase(milvus_indexnode_index_task_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (status, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting MacOS Development Issues\nDESCRIPTION: Commands to resolve common MacOS development issues such as library not found errors and outdated Xcode tools.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /Library/Developer/CommandLineTools\nsudo xcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Configuring RHNSW_SQ Building Parameters in Python\nDESCRIPTION: Configuration for building RHNSW_SQ index with parameters for maximum node degree (M) and construction search scope (efConstruction).\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap02_schema.md#2025-04-10_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"index_type\": \"RHNSW_SQ\",\n    \"metric_type\": \"L2\",      # one of L2, IP\n\n    #Special for RHNSW_SQ\n    \"M\": 16,              # int. 4~64\n    \"efConstruction\": 40  # int. 8~512\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for E2E Test Script\nDESCRIPTION: This command shows how to access the help information for the e2e-k8s.sh script, providing guidance on its usage and available options.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ./e2e-k8s.sh --help\n```\n\n----------------------------------------\n\nTITLE: Running Milvus Executable with Library Path\nDESCRIPTION: Bash command to set the LD_LIBRARY_PATH and run the Milvus executable from the build directory.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nLD_LIBRARY_PATH=./internal/core/output/lib:lib:$LD_LIBRARY_PATH ./bin/milvus\n```\n\n----------------------------------------\n\nTITLE: Measuring Autoflush Operate Rate in Milvus Data Node using PromQL\nDESCRIPTION: This query calculates the number of times each data node auto-flushes a buffer per second within the past two minutes. It uses the milvus_datanode_autoflush_buffer_op_count metric and groups results by status, pod, and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_63\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(increase(milvus_datanode_autoflush_buffer_op_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (status, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf Library for Milvus\nDESCRIPTION: CMake configuration that finds the Protobuf package dependency and creates an OBJECT library named 'milvus_pb' from recursively gathered source files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/pb/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Protobuf REQUIRED)\n\nadd_source_at_current_directory_recursively()\nadd_library(milvus_pb OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Measuring Load Field Latency in Milvus Index Node with PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of the time used by each index node to load segment field data each time within the past two minutes. They use the milvus_indexnode_load_field_latency metric and its related histogram buckets.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_70\n\nLANGUAGE: PromQL\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_load_field_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n\nsum(increase(milvus_indexnode_load_field_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_indexnode_load_field_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Filtering Message Packs for Flowgraph Recovery in Go\nDESCRIPTION: This pseudocode demonstrates the algorithm for filtering message packs during flowgraph recovery. It iterates through message packs, applying filters based on segment positions and a recovery time threshold.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20210604-datanode_flowgraph_recovery_design.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst filter_threshold = recovery_time\n// mp means msgPack\nfor mp := seeking(p1) {\n    if mp.position.endtime < filter_threshold {\n        if mp.position < p3 {\n            filter s3\n        }\n        if mp.position < p2 {\n            filter s2\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RegisterNode Request/Response Structures in Go\nDESCRIPTION: Data structures for node registration including message base, address, and initialization parameters.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap03_index_service.md#2025-04-10_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype MsgBase struct {\n\tMsgType   MsgType\n\tMsgID     UniqueID\n\tTimestamp uint64\n\tSourceID  UniqueID\n}\n\ntype Address struct {\n\tIp   string\n\tPort int64\n}\n\ntype RegisterNodeRequest struct {\n\tBase    *commonpb.MsgBase\n\tAddress *commonpb.Address\n}\n\ntype InitParams struct {\n\tNodeID      UniqueID\n\tStartParams []*commonpb.KeyValuePair\n}\n\ntype RegisterNodeResponse struct {\n\tInitParams *internalpb.InitParams\n\tStatus     *commonpb.Status\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Compilation Dependencies for Milvus\nDESCRIPTION: Commands to install the necessary development libraries and tools for compiling Milvus, including setting up Go modules and required protobuf generators.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt install -y g++ gcc make libssl-dev zlib1g-dev libboost-regex-dev \\\n    libboost-program-options-dev libboost-system-dev libboost-filesystem-dev \\\n    libboost-serialization-dev python3-dev libboost-python-dev libcurl4-openssl-dev gfortran libtbb-dev\n$ export GO111MODULE=on\n$ go get github.com/golang/protobuf/protoc-gen-go@v1.3.2\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting etcd Service\nDESCRIPTION: Downloads, extracts, and starts the etcd service with specific client URL configurations and data directory settings.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/binary/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://github.com/etcd-io/etcd/releases/download/v3.5.0/etcd-v3.5.0-linux-amd64.tar.gz\n$ tar zxvf etcd-v3.5.0-linux-amd64.tar.gz\n$ cd etcd-v3.5.0-linux-amd64\n$ ./etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd\n```\n\n----------------------------------------\n\nTITLE: Measuring Compaction Latency in Milvus Data Node using PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of the time each data node takes to execute a compaction task within the past two minutes. They use the milvus_datanode_compaction_latency metric and its related histogram buckets.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_65\n\nLANGUAGE: PromQL\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_datanode_compaction_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n\nsum(increase(milvus_datanode_compaction_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_datanode_compaction_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Adding Azure-specific test files in CMake\nDESCRIPTION: Conditionally adds Azure-specific test files and include directories when the Azure build directory is defined.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (DEFINED AZURE_BUILD_DIR)\n    set(MILVUS_TEST_FILES\n                ${MILVUS_TEST_FILES}\n                test_azure_chunk_manager.cpp\n            #need update aws-sdk-cpp, see more from https://github.com/aws/aws-sdk-cpp/issues/2119\n                #test_remote_chunk_manager.cpp\n                )\n    include_directories(\"${AZURE_BUILD_DIR}/vcpkg_installed/${VCPKG_TARGET_TRIPLET}/include\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Downloading Milvus Installation Scripts\nDESCRIPTION: Commands to download the requirements.txt and save_image.py files needed for the Milvus offline installation process.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://raw.githubusercontent.com/milvus-io/milvus/master/deployments/offline/requirements.txt\n$ wget https://raw.githubusercontent.com/milvus-io/milvus/master/deployments/offline/save_image.py\n```\n\n----------------------------------------\n\nTITLE: Implementing DataNode and DataSyncService Structures\nDESCRIPTION: Go struct definitions for DataNode and DataSyncService types, showing their composition and relationships in managing flowgraphs and channels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20210521-datanode_recovery_design.md#2025-04-10_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype DataNode struct {\n    ...\n    vchan2Sync map[string]*dataSyncService\n    vchan2FlushCh map[string]chan<- *flushMsg\n\n    clearSignal chan UniqueID\n    ...\n}\n\ntype dataSyncService struct {\n\tctx          context.Context\n\tfg           *flowgraph.TimeTickedFlowGraph\n\tflushChan    <-chan *flushMsg\n\treplica      Replica\n\tidAllocator  allocatorInterface\n\tmsFactory    msgstream.Factory\n\tcollectionID UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: NotifyBuildIndex Request Structure in Go\nDESCRIPTION: Request structure for notifying about index build completion with file paths.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap03_index_service.md#2025-04-10_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype NotifyBuildIndexRequest struct {\n\tStatus         *commonpb.Status\n\tIndexBuildID   UniqueID\n\tIndexFilePaths []string\n\tNodeID         UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Code Specifications\nDESCRIPTION: Command to run code verifiers that check if the source code adheres to the project's coding standards and specifications.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ make verifiers\n```\n\n----------------------------------------\n\nTITLE: Running Code Verification with Make\nDESCRIPTION: Make command that includes the functionality of cppcheck and additional verification steps.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/scripts_and_tools.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake verifier\n```\n\n----------------------------------------\n\nTITLE: Counting Index Task in Milvus Index Coordinator using PromQL\nDESCRIPTION: This query sums up the count of all indexing tasks recorded by index coord in index metadata. It uses the milvus_indexcoord_indextask_count metric and groups results by index task status.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_67\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(milvus_indexcoord_indextask_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (index_task_status)\n```\n\n----------------------------------------\n\nTITLE: Adding conditional test files for disk ANN in CMake\nDESCRIPTION: Conditionally adds disk ANN test files when the BUILD_DISK_ANN option is enabled, with a note about AWS SDK dependency issues.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif ( BUILD_DISK_ANN STREQUAL \"ON\" )\n    set(MILVUS_TEST_FILES\n            ${MILVUS_TEST_FILES}\n            #need update aws-sdk-cpp, see more from https://github.com/aws/aws-sdk-cpp/issues/1757\n            #test_minio_chunk_manager.cpp\n            )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Milvus with Docker Compose\nDESCRIPTION: Command to uninstall Milvus when installed using Docker Compose.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose -f docker-compose.yml down\n```\n\n----------------------------------------\n\nTITLE: Installing Clang-Format-12 Package\nDESCRIPTION: APT command to install the clang-format-12 package, which is required for code formatting.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/scripts_and_tools.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\napt install clang-format-12\n```\n\n----------------------------------------\n\nTITLE: Defining Request Task Interface in Go for Milvus\nDESCRIPTION: Interface for task scheduling in RootCoord that wraps data definition requests. Each request is wrapped as a task implementing methods for execution context, type identification, execution, notification, and completion tracking.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap06_root_coordinator.md#2025-04-10_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype reqTask interface {\n\tCtx() context.Context\n\tType() commonpb.MsgType\n\tExecute(ctx context.Context) error\n\tWaitToFinish() error\n\tNotify(err error)\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Milvus\nDESCRIPTION: Command to compile the Milvus source code into executable binaries after all prerequisites have been met.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ make milvus\n```\n\n----------------------------------------\n\nTITLE: Loading Saved Docker Images\nDESCRIPTION: Command to load the previously saved Docker images into the local Docker environment.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ for image in $(find . -type f -wholename \"./images/*.tar.gz\") ; do gunzip -c $image | docker load; done;\n```\n\n----------------------------------------\n\nTITLE: Counting Index Node Number in Milvus Index Coordinator with PromQL\nDESCRIPTION: This query sums up the number of index nodes managed by index coord. It uses the milvus_indexcoord_indexnode_num metric and groups results by app_kubernetes_io_instance.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_68\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(milvus_indexcoord_indexnode_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Milvus Benchmarks in CMake\nDESCRIPTION: Sets up include directories for the Milvus project and unit tests. This ensures that the compiler can find necessary header files during compilation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/bench/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_HOME_DIRECTORY}/src)\ninclude_directories(${CMAKE_HOME_DIRECTORY}/unittest)\n```\n\n----------------------------------------\n\nTITLE: Exporting Milvus Logs with Custom Namespace and Directory\nDESCRIPTION: Command to export Milvus logs from a specific namespace and store them in a custom directory. This example uses the 'milvus' namespace and stores logs in ./logs.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/export-log/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./export-milvus-log.sh -i my-release -n milvus -d ./logs\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on Ubuntu\nDESCRIPTION: Command to install OpenSSL package on Ubuntu systems using apt package manager.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/tls_proxy.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install openssl\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Schema and Structure in Go for Milvus\nDESCRIPTION: Defines the FieldSchema, CollectionSchema, and Collection structs. These structures represent the schema and metadata of collections in Milvus, including field definitions, collection properties, and runtime information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap07_query_coordinator.md#2025-04-10_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype FieldSchema struct {\n\tFieldID      int64\n\tName         string\n\tIsPrimaryKey bool\n\tDescription  string\n\tDataType     DataType\n\tTypeParams   []*commonpb.KeyValuePair\n\tIndexParams  []*commonpb.KeyValuePair\n}\n\ntype CollectionSchema struct {\n\tName        string\n\tDescription string\n\tAutoID      bool\n\tFields      []*FieldSchema\n}\n\ntype Collection struct {\n\tcollectionPtr C.CCollection\n\tid            UniqueID\n\tpartitionIDs  []UniqueID\n\tschema        *schemapb.CollectionSchema\n\tvChannels     []Channel\n\tpChannels     []Channel\n\tloadType      loadType\n\n\treleaseMu          sync.RWMutex\n\treleasedPartitions map[UniqueID]struct{}\n\treleaseTime        Timestamp\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Unit Tests Only\nDESCRIPTION: Command to run only the Go language unit tests, useful when focusing on testing changes to Go components of Milvus.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ make test-go\n```\n\n----------------------------------------\n\nTITLE: Querying Decode Field Latency for Milvus Index Nodes in PromQL\nDESCRIPTION: These PromQL queries calculate the 99th percentile and average latency for decoding field data in Milvus index nodes over a 2-minute period. The queries filter by instance, app name, and namespace, and group results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_71\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_decode_field_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_indexnode_decode_field_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_indexnode_decode_field_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Adding Jemalloc as External Project in CMake\nDESCRIPTION: Configures Jemalloc as an external project in CMake, setting up its download, build, and install process.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/jemalloc/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nExternalProject_Add(\n        jemalloc_ep\n        PREFIX ${CMAKE_BINARY_DIR}/3rdparty_download/jemalloc-subbuild\n        URL ${JEMALLOC_SOURCE_URL}\n        PATCH_COMMAND touch doc/jemalloc.3 doc/jemalloc.html\n        CONFIGURE_COMMAND ${JEMALLOC_CONFIGURE_COMMAND}\n        BUILD_IN_SOURCE 1\n        BUILD_COMMAND ${JEMALLOC_BUILD_COMMAND}\n        BUILD_BYPRODUCTS \"${JEMALLOC_STATIC_LIB}\"\n        INSTALL_COMMAND ${MAKE} install)\n```\n\n----------------------------------------\n\nTITLE: Basic Milvus Migration Command\nDESCRIPTION: Basic command to migrate Milvus instance specifying the instance name, source version, and target version.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/migrate-meta/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./migrate.sh -i my-release -s 2.1.1 -t 2.2.0\n```\n\n----------------------------------------\n\nTITLE: Defining Partition Structure in Go for Milvus\nDESCRIPTION: Defines the Partition struct, which represents a partition within a collection in Milvus. It contains the collection ID, partition ID, and a list of segment IDs belonging to the partition.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap07_query_coordinator.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Partition struct {\n\tcollectionID UniqueID\n\tpartitionID  UniqueID\n\tsegmentIDs   []UniqueID\n}\n```\n\n----------------------------------------\n\nTITLE: Running C++ Unit Tests Only\nDESCRIPTION: Command to run only the C++ language unit tests, useful when focusing on testing changes to C++ components of Milvus.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ make test-cpp\n```\n\n----------------------------------------\n\nTITLE: Querying Build Index Latency for Milvus Index Nodes in PromQL\nDESCRIPTION: These PromQL queries calculate the 99th percentile and average latency for building indexes in Milvus index nodes over a 2-minute period. The queries filter by instance, app name, and namespace, and group results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_72\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_build_index_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_indexnode_build_index_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_indexnode_build_index_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Librdkafka Include Files in CMake for Milvus\nDESCRIPTION: This command installs the Librdkafka include files to the specified destination directory. It uses Conan-provided include directories as the source.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/rdkafka/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(DIRECTORY \"${CONAN_INCLUDE_DIRS_LIBRDKAFKA}/librdkafka/\" DESTINATION \"${CMAKE_INSTALL_PREFIX}/include/librdkafka/\")\n```\n\n----------------------------------------\n\nTITLE: Milvus Migration with Cleanup\nDESCRIPTION: Migration command that automatically removes the migration pod after completion.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/migrate-meta/README.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./migrate.sh -i my-release -n milvus -s 2.1.1 -t 2.2.0 -w milvusdb/milvus:master-20221016-15878781 -d true\n```\n\n----------------------------------------\n\nTITLE: Defining GetInsertBinlogPaths Structures in Go\nDESCRIPTION: Structures for requesting and responding with insert binlog paths for a specific segment. Includes request structure with segment ID and response structure containing field IDs and corresponding binlog paths.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype GetInsertBinlogPathsRequest struct {\n\tBase      *commonpb.MsgBase\n\tSegmentID UniqueID\n}\n\ntype GetInsertBinlogPathsResponse struct {\n\tFieldIDs []int64\n\tPaths    []*internalpb.StringList\n\tStatus   *commonpb.Status\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Manifests for Milvus Cluster\nDESCRIPTION: Command to generate Kubernetes manifests for Milvus cluster installation using Helm.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ helm template my-release milvus/milvus > milvus_manifest.yaml\n```\n\n----------------------------------------\n\nTITLE: Modifying Milvus Configuration for External Services (Bash and YAML)\nDESCRIPTION: Edit the Milvus configuration file to use external etcd and MinIO services instead of embedded ones. This step is optional and requires modifying the YAML configuration file.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/deb/README.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo vim /etc/milvus/configs/milvus.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\netcd:\n  endpoints: etcd-ip:2379\n  ...\n  use:\n    embed: false\nminio:\n  address: minio-ip\n  ...\ncommon:\n  storageType: remote\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Azure Blob Storage in Milvus\nDESCRIPTION: Sets up the CMake project for Azure Blob Storage, including version requirements, module paths, and vcpkg integration. It also configures the C++ standard and adds custom module paths.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/azure-blob-storage/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 3.12)\nset(CMAKE_CXX_STANDARD 17)\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules\")\nmessage(\"${CMAKE_CURRENT_SOURCE_DIR}\")\ninclude(AzureVcpkg)\naz_vcpkg_integrate()\n\nproject(azure-blob-storage)\n```\n\n----------------------------------------\n\nTITLE: Data Node Component Architecture Documentation\nDESCRIPTION: Markdown documentation describing the DataNode component's purpose and dependencies, including its interactions with KV store, message streams, Root Coordinator and Data Coordinator.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/datanode/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Data Node\n\nDataNode is the component to write insert and delete messages into persistent blob storage, for example MinIO or S3.\n\n## Dependency\n\n- KV store: a kv store that persists messages into blob storage.\n- Message stream: receive messages and publish imformation\n- Root Coordinator: get the latest unique IDs.\n- Data Coordinator: get the flush information and which message stream to subscribe.\n```\n\n----------------------------------------\n\nTITLE: Defining DataNode Interface in Go\nDESCRIPTION: Interface definition for DataNode which handles data operations like watching channels, flushing segments, getting metrics, and compaction. It extends the Component interface.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype DataNode interface {\n\tComponent\n\n  /// WatchDmChannels watches the channels about data manipulation.\n\tWatchDmChannels(ctx context.Context, req *datapb.WatchDmChannelsRequest) (*commonpb.Status, error)\n\t// FlushSegments notifies DataNode to flush the segments req provids. The flush tasks are async to this rpc, DataNode will flush the segments in the background.\n\tFlushSegments(ctx context.Context, req *datapb.FlushSegmentsRequest) (*commonpb.Status, error)\n  // GetMetrics gets the metrics about DataNode.\n\tGetMetrics(ctx context.Context, req *milvuspb.GetMetricsRequest) (*milvuspb.GetMetricsResponse, error)\n\t// Compaction will add a compaction task according to the request plan\n\tCompaction(ctx context.Context, req *datapb.CompactionPlan) (*commonpb.Status, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling and Saving Docker Images for Docker Compose Installation\nDESCRIPTION: Commands to install required Python packages and save Docker images specified in the docker-compose.yml file.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ pip3 install -r requirements.txt\n$ python3 save_image.py --manifest docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Exporting Milvus Logs (Helm Installation)\nDESCRIPTION: Command to export logs from a Milvus instance installed using Helm. This exports logs for the Milvus component only, storing them in the default ./milvus-log directory.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/export-log/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./export-milvus-log.sh -i my-release\n```\n\n----------------------------------------\n\nTITLE: Querying Mutation Send Latency (average) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average latency of sending insertion or deletion requests by each proxy within the past two minutes using sum and count metrics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_14\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_mutation_send_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, msg_type) / sum(increase(milvus_proxy_mutation_send_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, msg_type)\n```\n\n----------------------------------------\n\nTITLE: Creating main test executable target in CMake\nDESCRIPTION: Creates the main Milvus unit test executable target by compiling all test files and linking with required libraries, then sets up installation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(all_tests\n        ${MILVUS_TEST_FILES}\n        )\n\ntarget_link_libraries(all_tests\n        gtest\n        milvus_core\n        knowhere\n        milvus-storage\n        )\n\ninstall(TARGETS all_tests DESTINATION unittest)\n```\n\n----------------------------------------\n\nTITLE: Defining WatchDmChannelRequest Structure in Go\nDESCRIPTION: Request structure for watching data manipulation channels. Contains base message information and a list of virtual channel information.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_13\n\nLANGUAGE: go\nCODE:\n```\ntype WatchDmChannelRequest struct {\n\tBase         *commonpb.MsgBase\n\tVchannels    []*VchannelInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting MinIO Service\nDESCRIPTION: Downloads MinIO binary, sets execution permissions, and starts the MinIO server with a specified data directory.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/binary/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://dl.min.io/server/minio/release/linux-amd64/minio\n$ chmod +x minio\n$ ./minio server /minio\n```\n\n----------------------------------------\n\nTITLE: Exporting Milvus, etcd, MinIO, and Pulsar Logs\nDESCRIPTION: Command to export logs for Milvus and its dependencies (etcd, MinIO, and Pulsar) from a specific namespace and store them in a custom directory.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/export-log/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./export-milvus-log.sh -i my-release -n milvus -d ./logs -e -m -p\n```\n\n----------------------------------------\n\nTITLE: Calculating DQL Request Latency in Milvus with PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of successfully receiving DQL requests by each proxy in the past two minutes. It uses the 'milvus_proxy_dql_req_latency' metric and groups results by function name, pod, and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_24\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, function_name, pod, node_id) (rate(milvus_proxy_dql_req_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_dql_req_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (function_name, pod, node_id) / sum(increase(milvus_proxy_dql_req_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (function_name, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking 'all_bench' Executable in CMake for Milvus\nDESCRIPTION: Defines the 'all_bench' executable, specifies its source files, and links it with required libraries including milvus_core, knowhere, pthread, and benchmark_main.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/bench/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(all_bench ${bench_srcs})\ntarget_link_libraries(all_bench\n        milvus_core\n        knowhere\n        pthread\n        )\n\ntarget_link_libraries(all_bench benchmark_main)\n```\n\n----------------------------------------\n\nTITLE: Defining DataNodeTtMsg Structure in Go\nDESCRIPTION: Message structure for DataNode time ticks. Contains base message information, channel name, and timestamp for time tick synchronization.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/developer_guides/chap09_data_coord.md#2025-04-10_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nmessage DataNodeTtMsg {\n    Base        *commonpb.MsgBase\n    ChannelName string\n    Timestamp   uint64\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Search NQ in Milvus Query Nodes (PromQL)\nDESCRIPTION: These queries calculate the 99th percentile and average number of queries (NQ) for search requests in query nodes over the past 2 minutes. They use the same metrics and approach as the search group size queries.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_42\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_querynode_search_group_size_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_querynode_search_group_size_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_querynode_search_group_size_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Exporting Milvus and Kafka Logs\nDESCRIPTION: Command to export logs for Milvus and Kafka from a specific namespace and store them in a custom directory.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/export-log/README.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./export-milvus-log.sh -i my-release -n milvus -d ./logs -k\n```\n\n----------------------------------------\n\nTITLE: Querying Cache Update Latency (p99) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the 99th percentile of cache update latency by proxy within the past two minutes using the milvus_proxy_cache_update_latency_bucket metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_16\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_proxy_cache_update_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\n----------------------------------------\n\nTITLE: Including Third-Party Dependencies as Subdirectories\nDESCRIPTION: Adds various third-party libraries as subdirectories to the CMake project. This includes libraries like Knowhere, Boost, RocksDB, RdKafka, SimdJSON, and others. It also conditionally includes OpenDAL and Jemalloc based on specific conditions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(knowhere)\n\nadd_subdirectory(boost_ext)\nadd_subdirectory(rocksdb)\nadd_subdirectory(rdkafka)\nadd_subdirectory(simdjson)\nif (USE_OPENDAL)\n    add_subdirectory(opendal)\nendif()\nadd_subdirectory(tantivy)\n\nif (LINUX)\n    add_subdirectory(jemalloc)\nendif()\n\nadd_subdirectory(milvus-storage)\n```\n\n----------------------------------------\n\nTITLE: Milvus Python Client TLS Connection\nDESCRIPTION: Python code example showing how to connect to a TLS-enabled Milvus server using the Python SDK with client certificates.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/tls_proxy.md#2025-04-10_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pymilvus import connections\n\n_HOST = '127.0.0.1'\n_PORT = '19530'\n\nprint(f\"\\nCreate connection...\")\nconnections.connect(host=_HOST, port=_PORT, secure=True, client_pem_path=\"cert/client.pem\",\n                        client_key_path=\"cert/client.key\",\n                        ca_pem_path=\"cert/ca.pem\", server_name=\"localhost\")\nprint(f\"\\nList connections:\")\nprint(connections.list_connections())\n```\n\n----------------------------------------\n\nTITLE: Counting Collections in Milvus Data Coordinator (PromQL)\nDESCRIPTION: This query counts the number of collections recorded in metadata by the data coordinator. It sums the 'milvus_datacoord_collection_num' metric, grouping by the Kubernetes instance.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_49\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_datacoord_collection_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (app_kubernetes_io_instance)\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for Milvus Deployment Testing\nDESCRIPTION: This code snippet shows the directory structure of the Milvus deployment testing project, including directories for cluster and standalone deployments, scripts, and configuration files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/deploy/README.md#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md\n├── cluster # dir to deploy cluster\n│   ├── logs # dir to save logs\n│   └──docker-compose.yml\n├── standalone # dir to deploy standalone\n│   ├── logs # dir to save logs\n│   └──docker-compose.yml\n├── scripts\n│   ├── action_after_upgrade.py\n│   ├── action_before_upgrade.py\n│   ├── action_reinstall.py\n│   └── utils.py\n├── cluster-values.yaml # config for helm deployment\n├── test.sh # script to run a single task\n└── run.sh # script to run all tasks\n```\n\n----------------------------------------\n\nTITLE: Querying Cache Update Latency (average) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average cache update latency by proxy within the past two minutes using the milvus_proxy_cache_update_latency_sum and milvus_proxy_cache_update_latency_count metrics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_17\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_cache_update_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id) / sum(increase(milvus_proxy_cache_update_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Version Requirements for Milvus Dependencies\nDESCRIPTION: This code snippet specifies the exact version numbers for various dependencies used in the Milvus project including GTest, YamlCPP, OpenTracing, Protobuf, libunwind, gperftools, and jemalloc. These version specifications ensure consistent builds and compatibility across development environments.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/versions.txt#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGTEST_VERSION=1.8.1\nYAMLCPP_VERSION=0.6.3\nOPENTRACING_VERSION=v1.5.1\nPROTOBUF_VERSION=3.9.0\nLIBUNWIND_VERSION=1.6.2\nGPERFTOOLS_VERSION=2.9.1\nMILVUS_JEMALLOC_BUILD_VERSION=5.2.1\n```\n\n----------------------------------------\n\nTITLE: Building Milvus Common Library in CMake\nDESCRIPTION: This snippet adds all source files in the current directory and its subdirectories to the project, then creates an object library named 'milvus_common' using these source files. This approach allows for efficient compilation of the common components used across the Milvus project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/common/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_common OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Queue Length Metrics in PromQL\nDESCRIPTION: Queries for monitoring queue lengths of read tasks in query nodes. Tracks both unsolved and ready-to-execute tasks.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_38\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_querynode_read_task_unsolved_len{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n\nsum(milvus_querynode_read_task_ready_len{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Executing Automated Chaos Test Script in Bash\nDESCRIPTION: Command to run an automated chaos test script. This script installs Milvus with specified replicas and runs the chosen chaos test scenario.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/chaos/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /milvus/tests/python_client/chaos\n# in this step, script will install milvus with replicas_num and run testcase\nbash chaos_test.sh ${pod} ${chaos_type} ${chaos_task} ${replicas_num}\n# example: bash chaos_test.sh querynode pod_kill chaos-test 2\n```\n\n----------------------------------------\n\nTITLE: Querying Wait Search Result Latency (average) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average latency between sending search/query requests and receiving results by proxy within the past two minutes using sum and count metrics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_5\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_sq_wait_result_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, query_type) / sum(increase(milvus_proxy_sq_wait_result_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, query_type)\n```\n\n----------------------------------------\n\nTITLE: Configuring Knowhere Version and Repository for Milvus Build\nDESCRIPTION: Sets up the Knowhere version and Git repository URL for fetching the library. It also configures package information and clears include directories.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/knowhere/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmilvus_add_pkg_config(\"knowhere\")\nset_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES \"\")\nset( KNOWHERE_VERSION 810a0c8d )\nset( GIT_REPOSITORY  \"https://github.com/zilliztech/knowhere.git\")\nmessage(STATUS \"Knowhere repo: ${GIT_REPOSITORY}\")\nmessage(STATUS \"Knowhere version: ${KNOWHERE_VERSION}\")\n\nmessage(STATUS \"Building knowhere-${KNOWHERE_SOURCE_VER} from source\")\nmessage(STATUS ${CMAKE_BUILD_TYPE})\n```\n\n----------------------------------------\n\nTITLE: Setting up clang-tidy targets in Milvus\nDESCRIPTION: Creates two custom targets for static code analysis: 'clang-tidy' attempts to fix warnings automatically, while 'check-clang-tidy' verifies code quality without making changes. Both targets use the clang-tidy tool through a Python script.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif ( ${CLANG_TIDY_FOUND} )\n    # runs clang-tidy and attempts to fix any warning automatically\n    add_custom_target( clang-tidy\n        ${PYTHON_EXECUTABLE}    ${BUILD_SUPPORT_DIR}/run_clang_tidy.py\n                                --clang_tidy_binary ${CLANG_TIDY_BIN}\n                                --exclude_globs     ${LINT_EXCLUSIONS_FILE}\n                                --compile_commands  ${CMAKE_BINARY_DIR}/compile_commands.json\n                                --source_dir        ${CMAKE_CURRENT_SOURCE_DIR}/src\n                                --fix\n                                ${MILVUS_LINT_QUIET} )\n\n    # runs clang-tidy and exits with a non-zero exit code if any errors are found.\n    add_custom_target( check-clang-tidy\n        ${PYTHON_EXECUTABLE}    ${BUILD_SUPPORT_DIR}/run_clang_tidy.py\n                                --clang_tidy_binary ${CLANG_TIDY_BIN}\n                                --exclude_globs     ${LINT_EXCLUSIONS_FILE}\n                                --compile_commands  ${CMAKE_BINARY_DIR}/compile_commands.json\n                                --source_dir        ${CMAKE_CURRENT_SOURCE_DIR}/src\n                                ${MILVUS_LINT_QUIET} )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Calculating Stored Rows Rate in Milvus Data Coordinator (PromQL)\nDESCRIPTION: This query calculates the average number of rows flushed per second over the past 2 minutes. It uses the 'milvus_datacoord_stored_rows_count' metric and calculates the increase over 120 seconds.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_51\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_datacoord_stored_rows_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Running Full Milvus Integration Test Suite\nDESCRIPTION: These commands compile Milvus and run the full integration test suite. The 'make milvus' command is required to prepare the C++ build.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/integration/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd [milvus-folder]\nmake milvus # milvus needs to be compiled to make cpp build ready\n./scripts/run_intergration_test.sh\n```\n\n----------------------------------------\n\nTITLE: Querying Wait Search Result Latency (p99) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the 99th percentile of the latency between sending search/query requests and receiving results by proxy within the past two minutes using milvus_proxy_sq_wait_result_latency_bucket metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_4\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, query_type, pod, node_id) (rate(milvus_proxy_sq_wait_result_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\n----------------------------------------\n\nTITLE: Fetching and Configuring Knowhere Library for Milvus Build\nDESCRIPTION: Uses FetchContent to download and configure the Knowhere library. It sets up the source and binary directories, and adds Knowhere as a subdirectory to the build process.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/knowhere/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset( CMAKE_PREFIX_PATH ${CONAN_BOOST_ROOT} )\nFetchContent_Declare(\n        knowhere\n        GIT_REPOSITORY  ${GIT_REPOSITORY}\n        GIT_TAG         ${KNOWHERE_VERSION}\n        SOURCE_DIR      ${CMAKE_CURRENT_BINARY_DIR}/knowhere-src\n        BINARY_DIR      ${CMAKE_CURRENT_BINARY_DIR}/knowhere-build\n        DOWNLOAD_DIR    ${THIRDPARTY_DOWNLOAD_PATH} )\n\nFetchContent_GetProperties( knowhere )\nif ( NOT knowhere_POPULATED )\n    FetchContent_Populate( knowhere )\n\n    # Adding the following target:\n    # knowhere\n    add_subdirectory( ${knowhere_SOURCE_DIR}\n                      ${knowhere_BINARY_DIR} )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing MilvusClient\nDESCRIPTION: Import statement to access the MilvusClient class from pymilvus package.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom pymilvus import MilvusClient\n```\n\n----------------------------------------\n\nTITLE: Calculating Flush Request Rate in Milvus Data Node with PromQL\nDESCRIPTION: This query calculates the number of times each data node receives a buffer flush request per second within the past two minutes. It uses the milvus_datanode_flush_req_count metric and groups results by status, pod, and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_64\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(increase(milvus_datanode_flush_req_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (status, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Manifests for Milvus Standalone\nDESCRIPTION: Command to generate Kubernetes manifests for Milvus standalone installation using Helm.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ helm template my-release milvus/milvus --set cluster.enabled=false --set pulsar.enabled=false --set minio.mode=standalone --set etcd.replicaCount=1 > milvus_manifest.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying Search Latency (average) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average latency of receiving search and query requests by each proxy within the past two minutes using the milvus_proxy_sq_latency_sum and milvus_proxy_sq_latency_count metrics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_3\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_sq_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, query_type) / sum(increase(milvus_proxy_sq_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, query_type)\n```\n\n----------------------------------------\n\nTITLE: Fetching SimdJSON Library with CMake FetchContent\nDESCRIPTION: This snippet declares and fetches the SimdJSON library using CMake's FetchContent module. It specifies the library version, source URL, and MD5 hash for verification. The library is then made available for use in the project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/simdjson/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(\n    simdjson\n    URL https://github.com/simdjson/simdjson/archive/refs/tags/v3.12.2.tar.gz\n    URL_HASH MD5=79dcf1a542c6a5e6fe7214f6b1a38303\n)\nFetchContent_MakeAvailable(simdjson)\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Avatar in HTML\nDESCRIPTION: This HTML snippet creates a clickable avatar image for a GitHub contributor. It uses an anchor tag to link to the contributor's profile and an embedded image tag to display their avatar.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/NavanshGoel\"><img src=\"https://avatars.githubusercontent.com/u/74401713?v=4\" width=\"30px\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Calculating DDL Request Rate for Root Coordinator in Milvus with PromQL\nDESCRIPTION: This query calculates the status and number of DDL requests per second within the past two minutes for the root coordinator. It uses the 'milvus_rootcoord_ddl_req_count' metric and groups results by status and function_name.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_31\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_rootcoord_ddl_req_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (status, function_name)\n```\n\n----------------------------------------\n\nTITLE: Detailed Milvus Configuration Settings\nDESCRIPTION: Complete YAML configuration for Milvus clustering compaction, including timing parameters, thresholds, and performance settings.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/clustering_compaction.md#2025-04-10_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndataCoord:\n  compaction:\n    clustering:\n      enable: true # Enable clustering compaction\n      autoEnable: true # Enable auto background clustering compaction\n      triggerInterval: 600 # clustering compaction trigger interval in seconds\n      minInterval: 3600 # The minimum interval between clustering compaction executions of one collection, to avoid redundant compaction\n      maxInterval: 259200 # If a collection haven't been clustering compacted for longer than maxInterval, force compact\n      newDataSizeThreshold: 512m # If new data size is large than newDataSizeThreshold, execute clustering compaction\n      timeout: 7200\n     \nqueryNode:\n  enableSegmentPrune: true # use partition stats to prune data in search/query on shard delegator\n\ndatanode:\n  clusteringCompaction:\n    memoryBufferRatio: 0.1 # The ratio of memory buffer of clustering compaction. Data larger than threshold will be flushed to storage.\n    workPoolSize: 8  # worker pool size for one clustering compaction task\ncommon:\n  usePartitionKeyAsClusteringKey: true # if true, do clustering compaction and segment prune on partition key field\n```\n\n----------------------------------------\n\nTITLE: Querying Mutation Request Latency (p99) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the 99th percentile of the overall latency of receiving insertion or deletion requests by each proxy within the past two minutes using the milvus_proxy_mutation_latency_bucket metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_11\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, msg_type, pod, node_id) (rate(milvus_proxy_mutation_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\n----------------------------------------\n\nTITLE: Creating and Installing Blob Chunk Manager Library\nDESCRIPTION: Defines and configures the blob-chunk-manager shared library, linking it with Azure Storage and Identity libraries. It also specifies installation instructions for the library.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/azure-blob-storage/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(blob-chunk-manager SHARED AzureBlobChunkManager.cpp)\ntarget_link_libraries(blob-chunk-manager PUBLIC Azure::azure-identity Azure::azure-storage-blobs)\n# should be link directly into libmilvus_core in future.\ninstall(TARGETS blob-chunk-manager DESTINATION \"${CMAKE_INSTALL_LIBDIR}\")\n```\n\n----------------------------------------\n\nTITLE: HTML Avatar Links Gallery\nDESCRIPTION: A series of HTML anchor tags containing 30x30 pixel GitHub avatar images that link to contributor profiles. Each link follows the same pattern using GitHub's avatar CDN URLs.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/jaime0815\"><img src=\"https://avatars.githubusercontent.com/u/4024711?v=4\" width=\"30px\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Collection Statistics Metrics in PromQL\nDESCRIPTION: Queries for tracking loaded collections, partitions and segments across query nodes. These metrics help monitor memory usage and data distribution.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_36\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_querynode_collection_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n\nsum(milvus_querynode_partition_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n\nsum(milvus_querynode_segment_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Checking OpenSSL Installation\nDESCRIPTION: Command to verify if OpenSSL is installed on the system by checking its version.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/tls_proxy.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenssl version\n```\n\n----------------------------------------\n\nTITLE: Querying Mutation Request Latency (average) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average overall latency of receiving insertion or deletion requests by each proxy within the past two minutes using sum and count metrics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_12\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_mutation_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, msg_type) / sum(increase(milvus_proxy_mutation_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, msg_type)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake and C++ Standard for GCP Native Storage in Milvus\nDESCRIPTION: Sets the minimum required CMake version to 3.12 and specifies C++17 as the C++ standard for the project. This ensures compatibility with modern C++ features and CMake functionalities.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/gcp-native-storage/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required (VERSION 3.12)\nset(CMAKE_CXX_STANDARD 17)\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Avatar Links in HTML\nDESCRIPTION: HTML markup for displaying contributor avatars as clickable links. Each avatar is shown as a 30x30 pixel image that links to the contributor's GitHub profile.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_12\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/richzw\"><img src=\"https://avatars.githubusercontent.com/u/1590890?v=4\" width=\"30px\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Querying Parallel Read Task Count in Milvus Query Nodes (PromQL)\nDESCRIPTION: This query sums the number of concurrent read requests currently executed in each query node. It uses the 'milvus_querynode_read_task_concurrency' metric and groups results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_39\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_querynode_read_task_concurrency{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Directory and Files\nDESCRIPTION: Commands to create a new directory for certificates and generate required configuration files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/tls_proxy.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir cert && cd cert\ntouch openssl.cnf gen.sh\n```\n\n----------------------------------------\n\nTITLE: Querying Message Stream Object Count Statistics in Prometheus for Milvus\nDESCRIPTION: PromQL queries to calculate the average, maximum, and minimum number of msgstream objects created by each proxy on its corresponding physical topic within the past two minutes.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_10\n\nLANGUAGE: promql\nCODE:\n```\navg(milvus_proxy_msgstream_obj_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\nmax(milvus_proxy_msgstream_obj_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\nmin(milvus_proxy_msgstream_obj_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Base Bitset Sources\nDESCRIPTION: Defines the base source files required for the bitset library implementation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/bitset/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(BITSET_SRCS\\n    detail/platform/dynamic.cpp\\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Avatars in Markdown\nDESCRIPTION: This snippet shows how to create a grid of linked contributor avatars using Markdown syntax. It includes an initial badge showing the total number of contributors, followed by individual avatar images with links.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README_CN.md#2025-04-10_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<br><!-- Do not remove start of hero-bot -->\n<img src=\"https://img.shields.io/badge/all--contributors-437-orange\"><br>\n<a href=\"https://github.com/0xflotus\"><img src=\"https://avatars.githubusercontent.com/u/26602940?v=4\" width=\"30px\" /></a>\n<a href=\"https://github.com/ABNER-1\"><img src=\"https://avatars.githubusercontent.com/u/24547351?v=4\" width=\"30px\" /></a>\n<a href=\"https://github.com/Abhijnan-Bajpai\"><img src=\"https://avatars.githubusercontent.com/u/57059194?v=4\" width=\"30px\" /></a>\n// ... additional contributors ...\n```\n\n----------------------------------------\n\nTITLE: Estimating CPU Usage for Milvus Query Nodes (PromQL)\nDESCRIPTION: This query estimates the CPU usage for each query node using the scheduler's data. It sums the 'milvus_querynode_estimate_cpu_usage' metric, grouping by pod and node_id. A value of 100 indicates full usage of a virtual CPU.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_40\n\nLANGUAGE: promql\nCODE:\n```\nsum(milvus_querynode_estimate_cpu_usage{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Generating Mockery Implementations\nDESCRIPTION: This command updates all mockery implemented types, which is recommended when interface definitions change.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmake generate-mockery\n```\n\n----------------------------------------\n\nTITLE: Querying Proxy Sync Time in Milvus with PromQL\nDESCRIPTION: This query calculates the average, maximum, and minimum epoch time synced by each proxy in its corresponding physical channel. It uses the 'milvus_proxy_tt_lag_ms' metric and groups results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_18\n\nLANGUAGE: promql\nCODE:\n```\navg(milvus_proxy_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\nmax(milvus_proxy_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\nmin(milvus_proxy_tt_lag_ms{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Milvus Headers and Libraries in CMake\nDESCRIPTION: Configures the installation of Milvus header files and libraries. Selectively installs C interface header files from various modules including storage, segcore, expression functions, indexbuilder, clustering, common, and monitor.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Install storage\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/storage/\n        DESTINATION include/storage\n        FILES_MATCHING PATTERN \"*_c.h\"\n)\n\n# Install segcore\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/segcore/\n        DESTINATION include/segcore\n        FILES_MATCHING PATTERN \"*_c.h\"\n)\n\n# Install exec/expression/function\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/exec/expression/function/\n        DESTINATION include/exec/expression/function\n        FILES_MATCHING PATTERN \"*_c.h\"\n)\n\n# Install indexbuilder\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/indexbuilder/\n        DESTINATION include/indexbuilder\n        FILES_MATCHING PATTERN \"*_c.h\"\n)\n\n# Install clustering\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/clustering/\n        DESTINATION include/clustering\n        FILES_MATCHING PATTERN \"*_c.h\"\n)\n\n# Install common\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/common/\n        DESTINATION include/common\n        FILES_MATCHING PATTERN \"*_c.h\"\n)\n\n# Install monitor\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/monitor/\n        DESTINATION include/monitor\n        FILES_MATCHING PATTERN \"*_c.h\"\n)\n\ninstall(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/src/futures/\n        DESTINATION include/futures\n        FILES_MATCHING PATTERN \"*.h\"\n)\n\ninstall(DIRECTORY ${CMAKE_BINARY_DIR}/lib/\n        DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Contributor Avatars with HTML\nDESCRIPTION: HTML markup for displaying a grid of contributor avatars, each wrapped in an anchor tag linking to their GitHub profile. Images are consistently sized at 30x30 pixels using the width attribute.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README_CN.md#2025-04-10_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/PwzXxm\"><img src=\"https://avatars.githubusercontent.com/u/6563846?v=4\" width=\"30px\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Calculating Evicted Read Requests Rate in Milvus Query Nodes (PromQL)\nDESCRIPTION: This query calculates the rate of evicted read requests per second for each query node over the past 2 minutes. It uses the 'milvus_querynode_read_evicted_count' metric and calculates the increase over 120 seconds.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_46\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_querynode_read_evicted_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenBLAS Library using APT\nDESCRIPTION: Command to install the OpenBLAS linear algebra library using Ubuntu's package manager, which is a dependency for Milvus vector operations.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install -y libopenblas-dev\n```\n\n----------------------------------------\n\nTITLE: Calculating DML Request Rate in Milvus with PromQL\nDESCRIPTION: This query calculates the rate of DML requests received per second by each proxy within the past two minutes. It uses the 'milvus_proxy_dml_req_count' metric and groups results by function name, status, pod, and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_22\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_dml_req_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by(function_name, status, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Ignore Patterns for Milvus Build and Generated Files\nDESCRIPTION: Specifies patterns to exclude build directories, third-party dependencies, generated gRPC/protobuf files, test directories and output folders from Git version control. This helps keep the repository clean of temporary and generated files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/build-support/lint_exclusions.txt#2025-04-10_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n*cmake-build-*\n*cmake_build*\n*/build/*\n*thirdparty*\n*src/grpc*\n*output*\n*unittest*\n*bench*\n*src/pb*\n```\n\n----------------------------------------\n\nTITLE: Stopping Milvus Development Container Environment\nDESCRIPTION: Command to stop and remove the Milvus development container environment.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/devcontainer.sh down\n```\n\n----------------------------------------\n\nTITLE: Calculating Producer Number in Milvus Data Node using PromQL\nDESCRIPTION: This query sums up the number of producers created on each data node. It utilizes the milvus_datanode_producer_num metric and groups results by pod and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_57\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(milvus_datanode_producer_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Milvus Project\nDESCRIPTION: This code snippet specifies the required Python packages and their versions for the Milvus project. It includes dependencies for testing, data processing, machine learning, and various other functionalities specific to the Milvus ecosystem.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n--extra-index-url https://test.pypi.org/simple/\npytest-cov==2.8.1\nrequests==2.26.0\nscikit-learn==1.1.3\ntimeout_decorator==0.5.0\nujson==5.5.0\npytest==8.3.4\npytest-asyncio==0.24.0\npytest-assume==2.4.3\npytest-timeout==1.3.3\npytest-repeat==0.8.0\nallure-pytest==2.7.0\npytest-print==0.2.1\npytest-level==0.1.1\npytest-xdist==2.5.0\n\npytest-rerunfailures==14.0\npytest_tagging==1.6.0\nndg-httpsclient\npyopenssl\npyasn1\npytest-html==3.1.1\ndelayed-assert==0.3.5\nkubernetes==17.17.0\nPyYAML==6.0\npytest-sugar==0.9.5\npytest-parallel\npytest-random-order\n\n# pymilvus\npymilvus==2.6.0rc93\npymilvus[bulk_writer]==2.6.0rc93\n\n\n# for customize config test\npython-benedict==0.24.3\ntimeout-decorator==0.5.0\n\n# for bulk insert test\nminio==7.1.5\nnpy-append-array==0.9.15\nFaker==19.2.0\n\n# for benchmark\nh5py==3.8.0\n\n# for log\nloguru==0.7.0\n\n# util\npsutil==5.9.4\npandas==1.5.3\nnumpy==1.26.4\ntenacity==8.1.0\nrich==13.7.0\n# for standby test\netcd-sdk-python==0.0.6\ndeepdiff==6.7.1\n\n# for test result analyzer\nprettytable==3.8.0\npyarrow==14.0.1\nfastparquet==2023.7.0\n\n# for bf16 datatype\nml-dtypes==0.2.0\n\n# for full text search\ntantivy==0.22.0\nbm25s==0.2.0\njieba==0.42.1\nUnidecode==1.3.8\n\n\n# for perf test\nlocust==2.25.0\n\n# for supporting higher python version\ntyping_extensions==4.12.2\n\n# for env configuration\npython-dotenv<=2.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Go Code Coverage Only\nDESCRIPTION: Command to generate code coverage reports specifically for Go code, useful when focusing on coverage of Go components.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ make codecov-go\n```\n\n----------------------------------------\n\nTITLE: Calculating DDL Request Rate in Milvus with PromQL\nDESCRIPTION: This query calculates the rate of DDL requests received per second by each proxy within the past two minutes. It uses the 'milvus_proxy_ddl_req_count' metric and groups results by function name, status, pod, and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_23\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_ddl_req_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by(function_name, status, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Milvus Project\nDESCRIPTION: This code snippet specifies the required Python packages and their versions for the Milvus project. It includes dependencies for testing, data processing, machine learning, and various other functionalities specific to the Milvus ecosystem.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n--extra-index-url https://test.pypi.org/simple/\npytest-cov==2.8.1\nrequests==2.26.0\nscikit-learn==1.1.3\ntimeout_decorator==0.5.0\nujson==5.5.0\npytest==8.3.4\npytest-asyncio==0.24.0\npytest-assume==2.4.3\npytest-timeout==1.3.3\npytest-repeat==0.8.0\nallure-pytest==2.7.0\npytest-print==0.2.1\npytest-level==0.1.1\npytest-xdist==2.5.0\n\npytest-rerunfailures==14.0\npytest_tagging==1.6.0\nndg-httpsclient\npyopenssl\npyasn1\npytest-html==3.1.1\ndelayed-assert==0.3.5\nkubernetes==17.17.0\nPyYAML==6.0\npytest-sugar==0.9.5\npytest-parallel\npytest-random-order\n\n# pymilvus\npymilvus==2.6.0rc93\npymilvus[bulk_writer]==2.6.0rc93\n\n\n# for customize config test\npython-benedict==0.24.3\ntimeout-decorator==0.5.0\n\n# for bulk insert test\nminio==7.1.5\nnpy-append-array==0.9.15\nFaker==19.2.0\n\n# for benchmark\nh5py==3.8.0\n\n# for log\nloguru==0.7.0\n\n# util\npsutil==5.9.4\npandas==1.5.3\nnumpy==1.26.4\ntenacity==8.1.0\nrich==13.7.0\n# for standby test\netcd-sdk-python==0.0.6\ndeepdiff==6.7.1\n\n# for test result analyzer\nprettytable==3.8.0\npyarrow==14.0.1\nfastparquet==2023.7.0\n\n# for bf16 datatype\nml-dtypes==0.2.0\n\n# for full text search\ntantivy==0.22.0\nbm25s==0.2.0\njieba==0.42.1\nUnidecode==1.3.8\n\n\n# for perf test\nlocust==2.25.0\n\n# for supporting higher python version\ntyping_extensions==4.12.2\n\n# for env configuration\npython-dotenv<=2.0.0\n```\n\n----------------------------------------\n\nTITLE: Building Milvus Deb Package in Docker Container (Bash)\nDESCRIPTION: Start a Milvus Docker container and build the Deb package using the build_deb.sh script. Replace VERSION, MAINTAINER, and DEBEMAIL with appropriate values.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/deb/README.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -v .:/deb -ti --entrypoint /bin/bash milvusdb/milvus:v$VERSION\n# in the container\ncd /deb\nbash build_deb.sh $VERSION $VERSION $MAINTAINER $DEBEMAIL\n```\n\n----------------------------------------\n\nTITLE: Counting Unflushed Segment Number in Milvus Data Node using PromQL\nDESCRIPTION: This query sums up the number of unflushed segments created on each data node. It uses the milvus_datanode_unflushed_segment_num metric and groups results by pod and node ID.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_59\n\nLANGUAGE: PromQL\nCODE:\n```\nsum(milvus_datanode_unflushed_segment_num{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Strong Typing with Generic Types and Lambdas\nDESCRIPTION: Demonstrates how to use strong typing with generic types and lambda functions using the Comparator template.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/NamedType/README.md#2025-04-10_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate<typename Function>\nusing Comparator = NamedType<Function, struct ComparatorTag>;\n\ntemplate <typename Function>\nvoid performAction(Comparator<Function> comp)\n{\n    comp.get()();\n}\n\nperformAction(make_named<Comparator>([](){ std::cout << \"compare\\n\"; }));\n```\n\n----------------------------------------\n\nTITLE: Calculating DDL Request Latency in Milvus with PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of successfully receiving DDL requests by each proxy in the past two minutes. It uses the 'milvus_proxy_ddl_req_latency' metric and groups results by function name, pod, and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_26\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, function_name, pod, node_id) (rate(milvus_proxy_ddl_req_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_ddl_req_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (function_name, pod, node_id) / sum(increase(milvus_proxy_ddl_req_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (function_name, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Test Dependencies for Milvus\nDESCRIPTION: Specifies required Python packages and their versions for test result analysis. Includes prettytable for formatting tabular data, pyarrow for Apache Arrow integration, and fastparquet for Parquet file handling.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/chaos/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\nprettytable==3.8.0\npyarrow==14.0.1\nfastparquet==2023.7.0\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Milvus (Bash)\nDESCRIPTION: Remove the Milvus package from the system using dpkg.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/deb/README.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg -P milvus\n```\n\n----------------------------------------\n\nTITLE: Running Milvus Unit Tests in Development Container\nDESCRIPTION: Command to execute Milvus unit tests inside the development container after accessing the container shell.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake unittest\n```\n\n----------------------------------------\n\nTITLE: Milvus Apache License Header\nDESCRIPTION: Standard Apache 2.0 license header with Zilliz copyright notice used to declare licensing terms for Milvus source files. Specifies usage permissions and conditions under the Apache License version 2.0.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/build-support/cmake_license.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Copyright (C) 2019-2020 Zilliz. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n# with the License. You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software distributed under the License\n# is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n# or implied. See the License for the specific language governing permissions and limitations under the License\n```\n\n----------------------------------------\n\nTITLE: Generating Go Files from Protocol Buffers\nDESCRIPTION: Command to generate Go source files from protocol buffer definitions, which is a prerequisite step before compiling Milvus.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ make check-proto-product\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Milvus\nDESCRIPTION: Specifies required Python packages and their versions for the Milvus project. Includes core dependencies like pymilvus, testing frameworks (pytest), data processing libraries (numpy, scikit-learn), and utilities for storage and API interactions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/restful_client_v2/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: requirements\nCODE:\n```\n--extra-index-url https://test.pypi.org/simple/\nrequests==2.32.0\nurllib3==1.26.19\npytest==7.2.0\npyyaml==6.0\nnumpy==1.24.3\nallure-pytest>=2.8.18\nFaker==19.2.0\npymilvus==2.5.0rc108\nscikit-learn~=1.5.0\npytest-xdist==2.5.0\nminio==7.1.14\ntenacity==8.1.0\n# for bf16 datatype\nml-dtypes==0.2.0\n```\n\n----------------------------------------\n\nTITLE: DCO Git Command Example\nDESCRIPTION: Git command for automatically adding DCO sign-off to commit messages\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git commit -s -m 'This is my commit message'\n```\n\n----------------------------------------\n\nTITLE: Starting Milvus Development Container Environment\nDESCRIPTION: Command to start the Milvus development container environment which includes builder, etcd, Jaeger, MinIO, and Pulsar services required for Milvus development and testing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ./scripts/devcontainer.sh up\n\nCreating network \"milvus-dev\" with the default driver\nCreating milvus_jaeger_1  ... done\nCreating milvus_minio_1   ... done\nCreating milvus_pulsar_1  ... done\nCreating milvus_etcd_1    ... done\nCreating milvus_builder_1 ... done\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus test files list in CMake\nDESCRIPTION: Defines a comprehensive list of test source files for the Milvus unit test suite, including tests for various components like chunk management, indexing, and query processing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# TODO: better to use ls/find pattern\nset(MILVUS_TEST_FILES\n        init_gtest.cpp\n        test_packed_c.cpp\n        test_arrow_fs_c.cpp\n        test_column_groups_c.cpp\n        test_always_true_expr.cpp\n        test_array_bitmap_index.cpp\n        test_array_inverted_index.cpp\n        test_bf.cpp\n        test_bf_sparse.cpp\n        test_binary.cpp\n        test_binlog_index.cpp\n        test_bitmap_index.cpp\n        test_bool_index.cpp\n        test_c_api.cpp\n        test_chunk_cache.cpp\n        test_chunk.cpp\n        test_chunk_vector.cpp\n        test_common.cpp\n        test_concurrent_vector.cpp\n        test_c_stream_reduce.cpp\n        test_c_tokenizer.cpp\n        test_loading.cpp\n        test_data_codec.cpp\n        test_delete_record.cpp\n        test_disk_file_manager_test.cpp\n        test_exec.cpp\n        test_expr.cpp\n        test_expr_materialized_view.cpp\n        test_float16.cpp\n        test_function.cpp\n        test_futures.cpp\n        test_group_by.cpp\n        test_iterative_filter.cpp\n        test_growing.cpp\n        test_growing_index.cpp\n        test_hybrid_index.cpp\n        test_index_c_api.cpp\n        test_indexing.cpp\n        test_index_wrapper.cpp\n        test_init.cpp\n        test_integer_overflow.cpp\n        test_inverted_index.cpp\n        test_local_chunk_manager.cpp\n        test_mmap_chunk_manager.cpp\n        test_monitor.cpp\n        test_offset_ordered_array.cpp\n        test_offset_ordered_map.cpp\n        test_plan_proto.cpp\n        test_query.cpp\n        test_range_search_sort.cpp\n        test_reduce_c.cpp\n        test_reduce.cpp\n        test_regex_query.cpp\n        test_regex_query_util.cpp\n        test_relational.cpp\n        test_retrieve.cpp\n        test_scalar_index.cpp\n        test_sealed.cpp\n        test_segcore.cpp\n        test_similarity_corelation.cpp\n        test_span.cpp\n        test_storage.cpp\n        test_string_expr.cpp\n        test_text_match.cpp\n        test_timestamp_index.cpp\n        test_tracer.cpp\n        test_utils.cpp\n        test_chunked_segment.cpp\n        test_chunked_column.cpp\n        test_rust_result.cpp\n        test_cached_search_iterator.cpp\n        test_random_sample.cpp\n        test_json_index.cpp\n        test_json_key_stats_index.cpp\n        )\n```\n\n----------------------------------------\n\nTITLE: Running C++ Code Coverage Only\nDESCRIPTION: Command to generate code coverage reports specifically for C++ code, useful when focusing on coverage of C++ components.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/scripts/README.md#2025-04-10_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ make codecov-cpp\n```\n\n----------------------------------------\n\nTITLE: Running All Test Tasks for Milvus Deployment\nDESCRIPTION: This bash command shows how to run all test tasks for Milvus deployment. It requires the root password as a parameter.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/deploy/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bash run.sh -p ${Password}\n# Password, the password of root\"\n```\n\n----------------------------------------\n\nTITLE: Adding New Mockery Generation Commands\nDESCRIPTION: This Makefile snippet shows how to add new entries for generating mockery types for new interfaces.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_9\n\nLANGUAGE: Makefile\nCODE:\n```\ngenerate-mockery-xxx: getdeps\n    # ...\n    # other mockery generation commands\n    # use mockery under $(INSTALL_PATH) to unify mockery binary version\n    $(INSTALL_PATH)/mockery --name=NewInterface ...\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Contributor Avatars in HTML\nDESCRIPTION: HTML markup displaying 30x30 pixel avatar images linked to GitHub profiles of project contributors. Each contributor is represented by an anchor tag containing their avatar image from GitHub's avatar service.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_10\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/chinalu\"><img src=\"https://avatars.githubusercontent.com/u/167307?v=4\" width=\"30px\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Creating bitset test executable target in CMake\nDESCRIPTION: Creates a specialized bitset test executable target by compiling the bitset test file and linking with required libraries, then sets up installation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(bitset_test \n        test_bitset.cpp\n)\ntarget_link_libraries(bitset_test \n        milvus_bitset \n        gtest \n        ${CONAN_LIBS}\n)\ninstall(TARGETS bitset_test DESTINATION unittest)\n```\n\n----------------------------------------\n\nTITLE: Checking CPU SIMD Instruction Set Support in Linux\nDESCRIPTION: Command to verify CPU support for SIMD extension instruction sets required by Milvus for index building and vector similarity search operations. This checks for SSE4.2, AVX, AVX2, and AVX512 support using the lscpu command.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nlscpu | grep -e sse4_2 -e avx -e avx2 -e avx512\n```\n\n----------------------------------------\n\nTITLE: Setting Test Log Path Environment Variable\nDESCRIPTION: Command to configure the path for test logs output\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ export CI_LOG_PATH=/tmp/ci_logs/test/\n```\n\n----------------------------------------\n\nTITLE: Installing lcov for C++ Code Coverage\nDESCRIPTION: This command installs lcov, a tool required for generating C++ code coverage reports.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install lcov\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Avatar and Profile Link in HTML\nDESCRIPTION: This snippet shows the HTML structure used to display a single contributor's avatar and link to their GitHub profile. It uses an anchor tag with an embedded image tag, setting the image width to 30 pixels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README_CN.md#2025-04-10_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/sarah-inkeep\"><img src=\"https://avatars.githubusercontent.com/u/129242944?v=4\" width=\"30px\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Adding conditional test files for Cardinal index engine in CMake\nDESCRIPTION: Conditionally adds kmeans clustering test files when the Cardinal index engine is selected.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif ( INDEX_ENGINE STREQUAL \"cardinal\" )\n    set(MILVUS_TEST_FILES\n        ${MILVUS_TEST_FILES}\n        test_kmeans_clustering.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Milvus in Development Container\nDESCRIPTION: Command to compile the Milvus project inside the development container after accessing the container shell.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake milvus\n```\n\n----------------------------------------\n\nTITLE: Creating Partition Objects Example\nDESCRIPTION: Python code example showing how to create and verify partition objects in test cases\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# create partition  -Call the default initialization method\npartition_w = self.init_partition_wrap()\nassert partition_w.is_empty\n```\n\n----------------------------------------\n\nTITLE: Exporting Milvus Logs (Operator Installation)\nDESCRIPTION: Command to export logs from a Milvus instance installed using the Milvus operator. The -o flag is required to indicate operator-based installation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/export-log/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./export-milvus-log.sh -i my-release -o\n```\n\n----------------------------------------\n\nTITLE: Displaying Contributor Avatar with GitHub Profile Link in HTML\nDESCRIPTION: This snippet shows the HTML structure used to display a contributor's avatar and link to their GitHub profile. It uses an anchor tag with an embedded image element. The image width is set to 30 pixels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README_CN.md#2025-04-10_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/jiaoew1991\"><img src=\"https://avatars.githubusercontent.com/u/2297455?v=4\" width=\"30px\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Configuring AddressSanitizer for Linux builds in CMake\nDESCRIPTION: Sets up AddressSanitizer compiler and linker options for Linux builds when the USE_ASAN option is enabled, and creates a specialized index builder test target.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif (LINUX)\n    message( STATUS \"Building Milvus Unit Test on Linux\")\n    option(USE_ASAN \"Whether to use AddressSanitizer\" OFF)\n    if ( USE_ASAN )\n        message( STATUS \"Building Milvus using AddressSanitizer\")\n        add_compile_options(-fno-stack-protector -fno-omit-frame-pointer -fno-var-tracking -fsanitize=address)\n        add_link_options(-fno-stack-protector -fno-omit-frame-pointer -fno-var-tracking -fsanitize=address)\n    endif()\n\n    # check if memory leak exists in index builder\n    set(INDEX_BUILDER_TEST_FILES\n            test_index_wrapper.cpp\n            test_scalar_index_creator.cpp\n            test_index_c_api.cpp\n            )\n\n    add_executable(index_builder_test\n            ${INDEX_BUILDER_TEST_FILES}\n            )\n\n    target_link_libraries(index_builder_test\n            gtest\n            milvus_core\n            knowhere\n            milvus-storage\n            )\n    install(TARGETS index_builder_test DESTINATION unittest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Milvus Builder Container\nDESCRIPTION: Command to execute an interactive bash shell in the Milvus builder container, allowing direct access to the development environment for compilation and testing.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -ti milvus_builder_1 bash\n```\n\n----------------------------------------\n\nTITLE: Testing Error Cases for Partition Creation in Milvus\nDESCRIPTION: This code shows how to test error scenarios by passing invalid parameters to the partition creation method and checking for expected error messages and codes.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# create partition with collection is None\nself.partition_wrap.init_partition(collection=None, name=partition_name, check_task=CheckTasks.err_res, check_items={ct.err_code: 1, ct.err_msg: \"'NoneType' object has no attribute\"})\n```\n\n----------------------------------------\n\nTITLE: Exporting Milvus Logs for the Last 24 Hours\nDESCRIPTION: Command to export Milvus logs for only the latest 24 hours. This uses the -s parameter to specify the time range.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/export-log/README.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./export-milvus-log.sh -i my-release -s 24h\n```\n\n----------------------------------------\n\nTITLE: HTML Comparison Table Structure for Milvus Versions\nDESCRIPTION: HTML table structure comparing features and capabilities between Milvus 1.x and 2.x versions. The table includes detailed comparisons of architecture, scalability, durability, availability, data consistency, supported data types, operations, features, index types, and SDKs.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/milvus20vs1x.md#2025-04-10_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"comparison\">\n<thead>\n\t<tr>\n\t\t<th>&nbsp;</th>\n\t\t<th>Milvus 1.x</th>\n\t\t<th>Milvus 2.x</th>\n\t</tr>\n\t<tr>\n\t\t<th>Architecture</th>\n\t\t<td>Shared storage</td>\n\t\t<td>Cloud native</td>\n\t</tr>\n</thead>\n<tbody>\n\t<tr>\n\t\t<th>Scalability</th>\n\t\t<td>1 to 32 read nodes with only one write node</td>\n\t\t<td>500+ nodes</td>\n\t</tr>\n<!-- Additional table rows omitted for brevity -->\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking 'indexbuilder_bench' Executable in CMake for Milvus\nDESCRIPTION: Defines the 'indexbuilder_bench' executable, specifies its source files, and links it with required libraries including milvus_core, knowhere, pthread, and benchmark_main.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/bench/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(indexbuilder_bench ${indexbuilder_bench_srcs})\ntarget_link_libraries(indexbuilder_bench\n        milvus_core\n        knowhere\n        pthread\n        )\n\ntarget_link_libraries(indexbuilder_bench benchmark_main)\n```\n\n----------------------------------------\n\nTITLE: Starting Milvus for E2E Testing with Standalone Mode\nDESCRIPTION: Commands to start a Milvus standalone instance for E2E testing, including setting up dependencies with Docker Compose and starting the Milvus service.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/README.md#2025-04-10_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd deployments/docker/dev\ndocker compose up -d\ncd ../../../\nbuild/builder.sh /bin/bash -c \"export ROCKSMQ_PATH='/tmp/milvus/rdb_data' && ./scripts/start_standalone.sh && cat\"\n```\n\n----------------------------------------\n\nTITLE: Sample Test Case for Dropped Collection Scenario in Milvus\nDESCRIPTION: This test case verifies that creating a partition against a dropped collection properly raises an exception. It demonstrates the structure of test methods including setup, execution, and verification.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@pytest.mark.tags(CaseLabel.L1)\n@pytest.mark.parametrize(\"partition_name\", [cf.gen_unique_str(prefix)])\ndef test_partition_dropped_collection(self, partition_name):\n    \"\"\"\n    target: verify create partition against a dropped collection\n    method: 1. create collection1\n            2. drop collection1\n            3. create partition in collection1\n    expected: raise exception\n    \"\"\"\n    # create collection\n    collection_w = self.init_collection_wrap()\n    # drop collection\n    collection_w.drop()\n    # create partition failed\n    self.partition_wrap.init_partition(collection_w.collection, partition_name, check_task=CheckTasks.err_res, check_items={ct.err_code: 4, ct.err_msg: \"collection not found\"})\n```\n\n----------------------------------------\n\nTITLE: Milvus Migration with Custom Namespace\nDESCRIPTION: Migration command for Milvus instances installed in a non-default Kubernetes namespace.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/migrate-meta/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./migrate.sh -i my-release -n milvus -s 2.1.1 -t 2.2.0\n```\n\n----------------------------------------\n\nTITLE: Golang Code Style Check Commands\nDESCRIPTION: Make commands for running static code analysis and formatting Go code\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ make static-check\n$ make fmt\n```\n\n----------------------------------------\n\nTITLE: Include Directories Configuration\nDESCRIPTION: Sets up include directories for various dependencies including Knowhere, SimdJSON, Tantivy, and other Milvus components.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${MILVUS_ENGINE_SRC})\ninclude_directories(${MILVUS_THIRDPARTY_SRC})\ninclude_directories(\n    ${KNOWHERE_INCLUDE_DIR}\n    ${SIMDJSON_INCLUDE_DIR}\n    ${TANTIVY_INCLUDE_DIR}\n    ${CONAN_INCLUDE_DIRS}\n    ${MILVUS_STORAGE_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Milvus Deb Package on Ubuntu (Bash)\nDESCRIPTION: Update package lists, install the Milvus Deb package, and resolve any dependencies using apt-get.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/deb/README.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo dpkg -i milvus_$VERSION-1_amd64.deb # This package is in the milvus-deb directory\nsudo apt-get -f install\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citations for Milvus Research Papers\nDESCRIPTION: Academic citation entries in BibTeX format for referencing Milvus and Manu papers in research publications. Includes the original 2021 Milvus system paper and the 2022 Manu cloud-native database paper.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_8\n\nLANGUAGE: bibtex\nCODE:\n```\n@inproceedings{2021milvus,\n  title={Milvus: A Purpose-Built Vector Data Management System},\n  author={Wang, Jianguo and Yi, Xiaomeng and Guo, Rentong and Jin, Hai and Xu, Peng and Li, Shengjun and Wang, Xiangyu and Guo, Xiangzhou and Li, Chengming and Xu, Xiaohai and others},\n  booktitle={Proceedings of the 2021 International Conference on Management of Data},\n  pages={2614--2627},\n  year={2021}\n}\n\n@article{2022manu,\n  title={Manu: a cloud native vector database management system},\n  author={Guo, Rentong and Luan, Xiaofan and Xiang, Long and Yan, Xiao and Yi, Xiaomeng and Luo, Jigao and Cheng, Qianya and Xu, Weizhi and Luo, Jiarui and Liu, Frank and others},\n  journal={Proceedings of the VLDB Endowment},\n  volume={15},\n  number={12},\n  pages={3548--3561},\n  year={2022},\n  publisher={VLDB Endowment}\n}\n```\n\n----------------------------------------\n\nTITLE: Milvus Migration Rollback and Retry\nDESCRIPTION: Commands to rollback a failed migration and retry with specified image versions.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/migrate-meta/README.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./migrate.sh -i my-release -n milvus -s 2.1.1 -t 2.2.0 -r by-dev -o rollback -w <milvus-2-1-1-image>\n./migrate.sh -i my-release -n milvus -s 2.1.1 -t 2.2.0 -r by-dev -o migrate -w <milvus-2-2-0-image>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Golang Unit Tests\nDESCRIPTION: This command shows how to run a subset of unit tests, focusing on tests named \"SegmentReplica\" and sub-tests named \"segmentFlushed\".\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ go test ./internal/datanode -run SegmentReplica/segmentFlushed\n```\n\n----------------------------------------\n\nTITLE: Creating Milvus Bitset Library Target\nDESCRIPTION: Defines the final library target using the configured source files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/bitset/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(milvus_bitset OBJECT ${BITSET_SRCS})\n```\n\n----------------------------------------\n\nTITLE: Downloading Milvus Cluster Docker Compose File\nDESCRIPTION: Command to download the docker-compose.yml file for Milvus cluster installation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ wget https://raw.githubusercontent.com/milvus-io/milvus/master/deployments/docker/cluster/docker-compose.yml -O docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Avatar Links in HTML\nDESCRIPTION: HTML markup that creates linked avatar images for Milvus project contributors. Each entry contains an anchor tag linking to a GitHub profile with an embedded avatar image sized to 30x30 pixels.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/README.md#2025-04-10_snippet_13\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://github.com/xige-16\"><img src=\"https://avatars.githubusercontent.com/u/20124155?v=4\" width=\"30px\" /></a>\n```\n\n----------------------------------------\n\nTITLE: Milvus Migration with Custom Storage Class\nDESCRIPTION: Migration command specifying a custom storage class for the migration PVC.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/migrate-meta/README.md#2025-04-10_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n./migrate.sh -i my-release -n milvus -s 2.1.4 -t 2.2.0 -c <special-storage-class>\n```\n\n----------------------------------------\n\nTITLE: Installing Milvus Dependencies\nDESCRIPTION: Bash command to run the dependency installation script for Milvus from the repository root.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/install_deps.sh\n```\n\n----------------------------------------\n\nTITLE: Installing NuGet Package for Microsoft Attestation Client\nDESCRIPTION: Checks for the NuGet executable and installs the Microsoft.Attestation.Client package if found. This step is crucial for managing .NET dependencies in the project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/azure-blob-storage/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_program(NUGET_EXE NAMES nuget)\n\nif(NOT NUGET_EXE)\n    message(FATAL \"CMake could not find the nuget command line tool. Please install it from https://www.nuget.org/downloads!\")\nelse()\n    exec_program(${NUGET_EXE}\n        ARGS install \"Microsoft.Attestation.Client\" -Version 0.1.181 -ExcludeVersion -OutputDirectory ${CMAKE_BINARY_DIR}/packages)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Milvus Migration with Custom Rootpath\nDESCRIPTION: Migration command specifying a custom rootpath for Milvus meta storage.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/migrate-meta/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./migrate.sh -i my-release -n milvus -s 2.1.1 -t 2.2.0 -r by-dev\n```\n\n----------------------------------------\n\nTITLE: Milvus CI/CD Command Reference Table\nDESCRIPTION: A markdown table listing available CI/CD commands and their descriptions, including commands for running E2E tests on CPU and rerunning unit tests.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/COMMAND_HELP.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|  Command                 |    Description                                                             |\n| -------------------------|----------------------------------------------------------------------------|\n|  /run-cpu-e2e           |  Trigger Jenkins Job for e2e tests based on cpu.                                         |\n| rerun ut    |  Trigger failed github workflow jobs, including code checker & unit tests.  |\n```\n\n----------------------------------------\n\nTITLE: Querying Search Vector Count Rate in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average number of vectors queried per second by each proxy within the past two minutes using the milvus_proxy_search_vectors_count metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_0\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_search_vectors_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Running Pre-submission Verification Tests\nDESCRIPTION: Make command to run all pre-submission verification tests for Milvus.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake verifiers\n```\n\n----------------------------------------\n\nTITLE: Conditional Unit Test Directory Addition\nDESCRIPTION: Adds the test subdirectory to the build if the BUILD_UNIT_TEST option is set to 'ON'. This allows for optional inclusion of unit tests in the build process.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/storage/azure-blob-storage/CMakeLists.txt#2025-04-10_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif ( BUILD_UNIT_TEST STREQUAL \"ON\" )\n    add_subdirectory(test)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Milvus Migration with External Etcd\nDESCRIPTION: Migration command specifying an external etcd service endpoint.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/migrate-meta/README.md#2025-04-10_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./migrate.sh -i my-release -n milvus -s 2.1.4 -t 2.2.0 -e <etcd-svc-ip:etcd-svc-port>\n```\n\n----------------------------------------\n\nTITLE: Running a Single Go Test Case\nDESCRIPTION: Bash command to run a specific Go test case in Milvus, with an example for TestSearchTask in the proxy package.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsource scripts/setenv.sh && go test -v ./internal/proxy/ -test.run TestSearchTask\n\n# For Mac with M1 chip:\nsource scripts/setenv.sh && go test -tags=dynamic -v ./internal/proxy/ -test.run TestSearchTask\n```\n\n----------------------------------------\n\nTITLE: Querying Decode Search Result Latency (average) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average latency of decoding search and query results by proxy within the past two minutes using sum and count metrics.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_9\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_sq_decode_result_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, query_type) / sum(increase(milvus_proxy_sq_decode_resultlatency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id, query_type)\n```\n\n----------------------------------------\n\nTITLE: Load Test Header\nDESCRIPTION: Markdown heading indicating load test documentation section\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/load/README.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Load Test\n```\n\n----------------------------------------\n\nTITLE: Building Milvus Log Library in CMake\nDESCRIPTION: Configures the Milvus log library by adding source files recursively and creating an object library. This setup allows for flexible inclusion of the log functionality in the larger Milvus project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/log/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_source_at_current_directory_recursively()\nadd_library(milvus_log OBJECT ${SOURCE_FILES})\n```\n\n----------------------------------------\n\nTITLE: Milvus Migration with Custom Image\nDESCRIPTION: Migration command using a custom Milvus image tag for the upgrade process.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/migrate-meta/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./migrate.sh -i my-release -n milvus -s 2.1.1 -t 2.2.0 -r by-dev -w milvusdb/milvus:master-20221016-15878781\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Milvus\nDESCRIPTION: Steps to run E2E tests using Python SDK and pytest.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncd tests/python_client\npip install -r requirements.txt\npytest --tags=L0 -n auto\n```\n\n----------------------------------------\n\nTITLE: Querying Mutation Send Latency (p99) in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the 99th percentile of the latency of sending insertion or deletion requests by each proxy within the past two minutes using the milvus_proxy_mutation_send_latency_bucket metric.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_13\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, msg_type, pod, node_id) (rate(milvus_proxy_mutation_send_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Strong Types in C++\nDESCRIPTION: Demonstrates how to create strong types for width and height measurements using the NamedType template class.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/NamedType/README.md#2025-04-10_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nusing Width = NamedType<double, struct WidthTag>;\nusing Height = NamedType<double, struct HeightTag>;\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Compiler Flags for Milvus Build\nDESCRIPTION: Appends specific compiler flags to CMAKE_CXX_FLAGS for optimizing the build process. These flags enable optimizations, position-independent code, OpenMP support, and suppress certain warnings.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nappend_flags(CMAKE_CXX_FLAGS FLAGS \"-O3 -fPIC -Wno-error -fopenmp -Wno-macro-redefined\")\n```\n\n----------------------------------------\n\nTITLE: Installing Milvus Dependencies\nDESCRIPTION: Installs required system libraries for Milvus including OpenBLAS, OpenMP, and Intel TBB.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/binary/README.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo apt-get install libopenblas-dev\n$ sudo apt-get install libgomp1\n$ sudo apt-get install libtbb2\n```\n\n----------------------------------------\n\nTITLE: Installing git-hooks Utility via Go\nDESCRIPTION: Commands to install the git-hooks utility using Go. Sets GO111MODULE environment variable to \"on\" and uses go get to install git-hooks from GitHub.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/githooks/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport GO111MODULE=\"on\"\ngo get -u github.com/git-hooks/git-hooks\n```\n\n----------------------------------------\n\nTITLE: Querying Cache Hit Rate in Prometheus for Milvus\nDESCRIPTION: PromQL query to calculate the average cache hit rate of operations including GeCollectionID, GetCollectionInfo, and GetCollectionSchema per second within the past two minutes.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_15\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_cache_hit_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\", cache_state=\"hit\"}[2m])/120) by(cache_name, pod, node_id) / sum(increase(milvus_proxy_cache_hit_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by(cache_name, pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Build Targets\nDESCRIPTION: Defines custom CMake targets for building and installing Tantivy bindings, including cargo compilation and file installation commands.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/tantivy/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(OUTPUT ls_cargo\n        COMMENT \"ls cargo\"\n        COMMAND ls ${HOME_VAR}/.cargo/bin/\n        )\nadd_custom_target(ls_cargo_target DEPENDS ls_cargo)\n\nadd_custom_command(OUTPUT compile_tantivy\n        COMMENT \"Compiling tantivy binding\"\n        COMMAND CARGO_TARGET_DIR=${CMAKE_CURRENT_BINARY_DIR} ${CARGO_CMD}\n        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/tantivy-binding)\nadd_custom_target(tantivy_binding_target DEPENDS compile_tantivy ls_cargo_target)\n\nset(INSTALL_COMMAND\n        cp ${LIB_HEADER_FOLDER}/tantivy-binding.h ${TANTIVY_INCLUDE_DIR}/ &&\n        cp ${CMAKE_CURRENT_SOURCE_DIR}/*.h ${TANTIVY_INCLUDE_DIR}/ &&\n        cp ${LIB_FILE} ${TANTIVY_LIB_DIR}/)\nadd_custom_command(OUTPUT install_tantivy\n        COMMENT \"Install tantivy target ${LIB_FILE} to ${TANTIVY_LIB_DIR}\"\n        COMMAND ${INSTALL_COMMAND}\n        )\nadd_custom_target(install_tantivy_target DEPENDS install_tantivy tantivy_binding_target)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Third-Party Build Logging Options\nDESCRIPTION: Configures logging options for third-party builds based on the KNOWHERE_VERBOSE_THIRDPARTY_BUILD flag. If verbose logging is not enabled, it sets up logging for configure, build, install, and download steps.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (NOT KNOWHERE_VERBOSE_THIRDPARTY_BUILD)\n    set(EP_LOG_OPTIONS LOG_CONFIGURE 1 LOG_BUILD 1 LOG_INSTALL 1 LOG_DOWNLOAD 1)\nelse ()\n    set(EP_LOG_OPTIONS)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: OpenSSL Configuration File\nDESCRIPTION: Comprehensive OpenSSL configuration file that defines certificate properties, policies, and extensions for generating SSL certificates.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/tls_proxy.md#2025-04-10_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n#\n# OpenSSL example configuration file.\n# This is mostly being used for generation of certificate requests.\n#\n\n# This definition stops the following lines choking if HOME isn't\n# defined.\nHOME\t\t\t= .\nRANDFILE\t\t= $ENV::HOME/.rnd\n\n# Extra OBJECT IDENTIFIER info:\n#oid_file\t\t= $ENV::HOME/.oid\noid_section\t\t= new_oids\n\n# To use this configuration file with the \"-extfile\" option of the\n# \"openssl x509\" utility, name here the section containing the\n# X.509v3 extensions to use:\n# extensions\t\t= \n# (Alternatively, use a configuration file that has only\n# X.509v3 extensions in its main [= default] section.)\n\n[ new_oids ]\n\n# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.\n# Add a simple OID like this:\n# testoid1=1.2.3.4\n# Or use config file substitution like this:\n# testoid2=${testoid1}.5.6\n\n# Policies used by the TSA examples.\ntsa_policy1 = 1.2.3.4.1\ntsa_policy2 = 1.2.3.4.5.6\ntsa_policy3 = 1.2.3.4.5.7\n\n####################################################################\n[ ca ]\ndefault_ca\t= CA_default\t\t# The default ca section\n\n####################################################################\n[ CA_default ]\n\ndir\t\t= ./demoCA\t\t# Where everything is kept\ncerts\t\t= $dir/certs\t\t# Where the issued certs are kept\ncrl_dir\t\t= $dir/crl\t\t# Where the issued crl are kept\ndatabase\t= $dir/index.txt\t# database index file.\n#unique_subject\t= no\t\t\t# Set to 'no' to allow creation of\n\t\t\t\t\t# several certificates with same subject.\nnew_certs_dir\t= $dir/newcerts\t\t# default place for new certs.\n\ncertificate\t= $dir/cacert.pem \t# The CA certificate\nserial\t\t= $dir/serial \t\t# The current serial number\ncrlnumber\t= $dir/crlnumber\t# the current crl number\n\t\t\t\t\t# must be commented out to leave a V1 CRL\ncrl\t\t= $dir/crl.pem \t\t# The current CRL\nprivate_key\t= $dir/private/cakey.pem# The private key\nRANDFILE\t= $dir/private/.rand\t# private random number file\n\nx509_extensions\t= usr_cert\t\t# The extensions to add to the cert\n\n# Comment out the following two lines for the \"traditional\"\n# (and highly broken) format.\nname_opt \t= ca_default\t\t# Subject Name options\ncert_opt \t= ca_default\t\t# Certificate field options\n\n# Extension copying option: use with caution.\ncopy_extensions = copy\n\n# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs\n# so this is commented out by default to leave a V1 CRL.\n# crlnumber must also be commented out to leave a V1 CRL.\n# crl_extensions\t= crl_ext\n\ndefault_days\t= 365\t\t\t# how long to certify for\ndefault_crl_days= 30\t\t\t# how long before next CRL\ndefault_md\t= default\t\t# use public key default MD\npreserve\t= no\t\t\t# keep passed DN ordering\n\n# A few difference way of specifying how similar the request should look\n# For type CA, the listed attributes must be the same, and the optional\n# and supplied fields are just that :-)\npolicy\t\t= policy_match\n\n# For the CA policy\n[ policy_match ]\ncountryName\t\t= match\nstateOrProvinceName\t= match\norganizationName\t= match\norganizationalUnitName\t= optional\ncommonName\t\t= supplied\nemailAddress\t\t= optional\n\n# For the 'anything' policy\n# At this point in time, you must list all acceptable 'object'\n# types.\n[ policy_anything ]\ncountryName\t\t= optional\nstateOrProvinceName\t= optional\nlocalityName\t\t= optional\norganizationName\t= optional\norganizationalUnitName\t= optional\ncommonName\t\t= supplied\nemailAddress\t\t= optional\n\n####################################################################\n[ req ]\ndefault_bits\t\t= 2048\ndefault_keyfile \t= privkey.pem\ndistinguished_name\t= req_distinguished_name\nattributes\t\t= req_attributes\nx509_extensions\t= v3_ca\t# The extensions to add to the self signed cert\n\n# Passwords for private keys if not present they will be prompted for\n# input_password = secret\n# output_password = secret\n\n# This sets a mask for permitted string types. There are several options. \n# default: PrintableString, T61String, BMPString.\n# pkix\t : PrintableString, BMPString (PKIX recommendation before 2004)\n# utf8only: only UTF8Strings (PKIX recommendation after 2004).\n# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).\n# MASK:XXXX a literal mask value.\n# WARNING: ancient versions of Netscape crash on BMPStrings or UTF8Strings.\nstring_mask = utf8only\n\nreq_extensions = v3_req # The extensions to add to a certificate request\n\n[ req_distinguished_name ]\ncountryName\t\t\t= Country Name (2 letter code)\ncountryName_default\t\t= AU\ncountryName_min\t\t\t= 2\ncountryName_max\t\t\t= 2\n\nstateOrProvinceName\t\t= State or Province Name (full name)\nstateOrProvinceName_default\t= Some-State\n\nlocalityName\t\t\t= Locality Name (eg, city)\n\n0.organizationName\t\t= Organization Name (eg, company)\n0.organizationName_default\t= Internet Widgits Pty Ltd\n\n# we can do this but it is not needed normally :-)\n#1.organizationName\t\t= Second Organization Name (eg, company)\n#1.organizationName_default\t= World Wide Web Pty Ltd\n\norganizationalUnitName\t\t= Organizational Unit Name (eg, section)\n#organizationalUnitName_default\t=\n\ncommonName\t\t\t= Common Name (e.g. server FQDN or YOUR name)\ncommonName_max\t\t\t= 64\n\nemailAddress\t\t\t= Email Address\nemailAddress_max\t\t= 64\n\n# SET-ex3\t\t\t= SET extension number 3\n\n[ req_attributes ]\nchallengePassword\t\t= A challenge password\nchallengePassword_min\t\t= 4\nchallengePassword_max\t\t= 20\n\nunstructuredName\t\t= An optional company name\n\n[ usr_cert ]\n\n# These extensions are added when 'ca' signs a request.\n\n# This goes against PKIX guidelines but some CAs do it and some software\n# requires this to avoid interpreting an end user certificate as a CA.\n\nbasicConstraints=CA:FALSE\n\n# Here are some examples of the usage of nsCertType. If it is omitted\n# the certificate can be used for anything *except* object signing.\n\n# This is OK for an SSL server.\n# nsCertType\t\t\t= server\n\n# For an object signing certificate this would be used.\n# nsCertType = objsign\n\n# For normal client use this is typical\n# nsCertType = client, email\n\n# and for everything including object signing:\n# nsCertType = client, email, objsign\n\n# This is typical in keyUsage for a client certificate.\n# keyUsage = nonRepudiation, digitalSignature, keyEncipherment\n\n# This will be displayed in Netscape's comment listbox.\nnsComment\t\t\t= \"OpenSSL Generated Certificate\"\n\n# PKIX recommendations harmless if included in all certificates.\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid,issuer\n\n# This stuff is for subjectAltName and issuerAltname.\n# Import the email address.\n# subjectAltName=email:copy\n# An alternative to produce certificates that aren't\n# deprecated according to PKIX.\n# subjectAltName=email:move\n\n# Copy subject details\n# issuerAltName=issuer:copy\n\n#nsCaRevocationUrl\t\t= http://www.domain.dom/ca-crl.pem\n#nsBaseUrl\n#nsRevocationUrl\n#nsRenewalUrl\n#nsCaPolicyUrl\n#nsSslServerName\n\n# This is required for TSA certificates.\n# extendedKeyUsage = critical,timeStamping\n\n[ v3_req ]\n\n# Extensions to add to a certificate request\n\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\n\n[ v3_ca ]\n\n\n# Extensions for a typical CA\n\n\n# PKIX recommendation.\n\nsubjectKeyIdentifier=hash\n\nauthorityKeyIdentifier=keyid:always,issuer\n\n# This is what PKIX recommends but some broken software chokes on critical\n# extensions.\n#basicConstraints = critical,CA:true\n# So we do this instead.\nbasicConstraints = CA:true\n\n# Key usage: this is typical for a CA certificate. However since it will\n# prevent it being used as an test self-signed certificate it is best\n# left out by default.\n# keyUsage = cRLSign, keyCertSign\n\n# Some might want this also\n# nsCertType = sslCA, emailCA\n\n# Include email address in subject alt name: another PKIX recommendation\n# subjectAltName=email:copy\n# Copy issuer details\n# issuerAltName=issuer:copy\n\n# DER hex encoding of an extension: beware experts only!\n# obj=DER:02:03\n# Where 'obj' is a standard or added object\n# You can even override a supported extension:\n# basicConstraints= critical, DER:30:03:01:01:FF\n\n[ crl_ext ]\n\n# CRL extensions.\n# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.\n\n# issuerAltName=issuer:copy\nauthorityKeyIdentifier=keyid:always\n\n[ proxy_cert_ext ]\n# These extensions should be added when creating a proxy certificate\n\n# This goes against PKIX guidelines but some CAs do it and some software\n# requires this to avoid interpreting an end user certificate as a CA.\n\nbasicConstraints=CA:FALSE\n\n# Here are some examples of the usage of nsCertType. If it is omitted\n# the certificate can be used for anything *except* object signing.\n\n# This is OK for an SSL server.\n# nsCertType\t\t\t= server\n\n# For an object signing certificate this would be used.\n# nsCertType = objsign\n\n# For normal client use this is typical\n# nsCertType = client, email\n\n# and for everything including object signing:\n# nsCertType = client, email, objsign\n\n# This is typical in keyUsage for a client certificate.\n# keyUsage = nonRepudiation, digitalSignature, keyEncipherment\n\n# This will be displayed in Netscape's comment listbox.\nnsComment\t\t\t= \"OpenSSL Generated Certificate\"\n\n# PKIX recommendations harmless if included in all certificates.\nsubjectKeyIdentifier=hash\nauthorityKeyIdentifier=keyid,issuer\n\n# This stuff is for subjectAltName and issuerAltname.\n# Import the email address.\n# subjectAltName=email:copy\n# An alternative to produce certificates that aren't\n# deprecated according to PKIX.\n# subjectAltName=email:move\n```\n\n----------------------------------------\n\nTITLE: Installing Git Hooks in Repository\nDESCRIPTION: Command to install the git hooks in the local repository. This sets up the hooks to be used with the current project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/githooks/README.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit hooks install\n```\n\n----------------------------------------\n\nTITLE: Calculating Apply PK Latency in Milvus with PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of primary key application by each proxy within the past two minutes. It uses the 'milvus_proxy_apply_pk_latency' metric and groups results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_19\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_proxy_apply_pk_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_apply_pk_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id) / sum(increase(milvus_proxy_apply_pk_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building OpenDAL from Source with CMake\nDESCRIPTION: This script configures and builds the OpenDAL library from source for the Milvus project. It sets the Git repository and tag, configures the Cargo build command based on the build type, fetches the source code, and creates a CMake custom target that builds the C bindings for OpenDAL. The script also sets up OpenDAL as an imported library with the proper include directories.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/opendal/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmessage(STATUS \"Building (vendored) opendal from source\")\n\nset(GIT_REPOSITORY  \"https://github.com/apache/opendal.git\")\nset(GIT_TAG \"v0.43.0-rc.2\")\n\nif (CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(CARGO_CMD cargo +1.83 build --verbose)\n    set(TARGET_DIR \"debug\")\nelse ()\n    set(CARGO_CMD cargo +1.83 build --release --verbose)\n    set(TARGET_DIR \"release\")\nendif ()\n\nset(SOURCE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/src\")\n\nFetchContent_Declare(\n        opendal\n        GIT_REPOSITORY  ${GIT_REPOSITORY}\n        GIT_TAG         ${GIT_TAG}\n        GIT_SHALLOW     TRUE\n        SOURCE_DIR      ${SOURCE_DIR}\n        DOWNLOAD_DIR    ${THIRDPARTY_DOWNLOAD_PATH})\n\nFetchContent_GetProperties(opendal)\nif ( NOT opendal_POPULATED )\n    FetchContent_Populate(opendal)\nendif()\n\nset(OPENDAL_LIB_DIR \"${SOURCE_DIR}/target/${TARGET_DIR}\" CACHE INTERNAL \"opendal lib dir\")\nset(OPENDAL_INCLUDE_DIR \"${SOURCE_DIR}/bindings/c/include\" CACHE INTERNAL \"opendal include dir\")\nset(OPENDAL_LIB \"libopendal_c${CMAKE_STATIC_LIBRARY_SUFFIX}\" CACHE INTERNAL \"opendal lib\")\n\nadd_custom_target(build_opendal\n    COMMAND ${CARGO_CMD}\n    WORKING_DIRECTORY ${SOURCE_DIR}/bindings/c\n)\n\nadd_library(opendal STATIC IMPORTED)\nadd_dependencies(opendal build_opendal)\nset_target_properties(opendal\n    PROPERTIES\n    IMPORTED_GLOBAL TRUE\n    IMPORTED_LOCATION \"${OPENDAL_LIB_DIR}/${OPENDAL_LIB}\"\n    INTERFACE_INCLUDE_DIRECTORIES \"${OPENDAL_INCLUDE_DIR}\")\n\nget_target_property(OPENDAL_IMPORTED_LOCATION opendal IMPORTED_LOCATION)\nget_target_property(OPENDAL_INTERFACE_INCLUDE_DIRECTORIES opendal INTERFACE_INCLUDE_DIRECTORIES)\nmessage(\"OPENDAL_IMPORTED_LOCATION: ${OPENDAL_IMPORTED_LOCATION}\")\nmessage(\"OPENDAL_INTERFACE_INCLUDE_DIRECTORIES: ${OPENDAL_INTERFACE_INCLUDE_DIRECTORIES}\")\n```\n\n----------------------------------------\n\nTITLE: Detecting AArch64 Architecture in CMake\nDESCRIPTION: Defines a macro to check if the target architecture is AArch64 (64-bit ARM) using symbol existence check.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/jemalloc/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(detect_aarch64_target_arch)\n  check_symbol_exists(__aarch64__ \"\" __AARCH64)\nendmacro()\ndetect_aarch64_target_arch()\n```\n\n----------------------------------------\n\nTITLE: Running Milvus Unit Tests\nDESCRIPTION: Bash commands to set up the Docker environment and run Milvus unit tests, including separate commands for C++ and Go tests.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd deployments/docker/dev\ndocker compose up -d\ncd ../../../\nmake unittest\n\n# To run only C++ tests:\nmake test-cpp\n\n# To run only Go tests:\nmake test-go\n```\n\n----------------------------------------\n\nTITLE: Generating Antlr4 Parser Code in Go\nDESCRIPTION: Command to generate the parser code using Go's generate feature. The generated code will be placed in the 'generated' directory after execution.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/parser/planparserv2/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo generate\n```\n\n----------------------------------------\n\nTITLE: Calculating Apply Timestamp Latency in Milvus with PromQL\nDESCRIPTION: These queries calculate the 99th percentile and average latency of timestamp application by each proxy within the past two minutes. It uses the 'milvus_proxy_apply_timestamp_latency' metric and groups results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_20\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_proxy_apply_timestamp_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_apply_timestamp_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id) / sum(increase(milvus_proxy_apply_timestamp_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by (pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring Jemalloc Build Options in CMake\nDESCRIPTION: Sets up Jemalloc build configuration options, including prefix, library directory, and platform-specific settings like AArch64 page size.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/jemalloc/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(JEMALLOC_PREFIX \"${CMAKE_INSTALL_PREFIX}\")\nset(JEMALLOC_LIB_DIR \"${JEMALLOC_PREFIX}/lib\")\nset(JEMALLOC_STATIC_LIB \"${JEMALLOC_LIB_DIR}/libjemalloc_pic${CMAKE_STATIC_LIBRARY_SUFFIX}\")\nset(JEMALLOC_CONFIGURE_COMMAND ./configure \"AR=${CMAKE_AR}\" \"CC=${CMAKE_C_COMPILER}\")\n\nif (CMAKE_OSX_SYSROOT)\n    list(APPEND JEMALLOC_CONFIGURE_COMMAND \"SDKROOT=${CMAKE_OSX_SYSROOT}\")\nendif ()\n\nif (DEFINED __AARCH64)\n    list(APPEND JEMALLOC_CONFIGURE_COMMAND \"--with-lg-page=16\")\nendif ()\n\nlist(APPEND\n        JEMALLOC_CONFIGURE_COMMAND\n        \"--prefix=${JEMALLOC_PREFIX}\"\n        \"--libdir=${JEMALLOC_LIB_DIR}\"\n        \"--enable-prof\")\nif (CMAKE_BUILD_TYPE EQUAL \"DEBUG\")\n    list(APPEND JEMALLOC_CONFIGURE_COMMAND \"--enable-debug\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Test Targets\nDESCRIPTION: Sets up optional test executables and their dependencies when BUILD_TANTIVY_WITH_UT is enabled.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/tantivy/CMakeLists.txt#2025-04-10_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_TANTIVY_WITH_UT \"compile tantivy with ut\" OFF)\n\nif (BUILD_TANTIVY_WITH_UT)\n    message(STATUS \"compile tantivy with ut\")\n\n    add_executable(test_tantivy test.cpp)\n    target_link_libraries(test_tantivy\n            tantivy_binding\n            boost_filesystem\n            dl\n            )\n\n    add_executable(bench_tantivy bench.cpp)\n    target_link_libraries(bench_tantivy\n            tantivy_binding\n            boost_filesystem\n            dl\n            )\n\n    add_executable(ffi_demo ffi_demo.cpp)\n    target_link_libraries(ffi_demo\n            tantivy_binding\n            dl\n            )\n\n    add_executable(tokenizer_demo tokenizer_demo.cpp)\n    target_link_libraries(tokenizer_demo\n            tantivy_binding\n            dl\n            )\n\n    add_executable(text_demo text_demo.cpp)\n    target_link_libraries(text_demo\n            tantivy_binding\n            dl\n        )\n\n    add_executable(jieba_demo jieba_demo.cpp)\n    target_link_libraries(jieba_demo\n            tantivy_binding\n            dl\n        )\nelse ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Generating Code Coverage Reports\nDESCRIPTION: Make commands to generate code coverage reports for both Go and C++ code in Milvus.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/DEVELOPMENT.md#2025-04-10_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake codecov\n\n# For Go coverage only:\nmake codecov-go\n\n# For C++ coverage only:\nmake codecov-cpp\n```\n\n----------------------------------------\n\nTITLE: Cloning Milvus Repository and Preparing Build Environment (Bash)\nDESCRIPTION: Clone the Milvus repository and prepare the build environment by copying the deb directory.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/deb/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/milvus-io/milvus.git\ncp -r milvus/build/deb .\ncd deb\n```\n\n----------------------------------------\n\nTITLE: Calculating Insert/Delete Request Byte Rate in Milvus with PromQL\nDESCRIPTION: This query calculates the number of bytes of insert and delete requests received per second by proxy within the past two minutes. It uses the 'milvus_proxy_receive_bytes_count' metric and groups results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_27\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_receive_bytes_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Initializing Apache 2.0 License Header in C/C++\nDESCRIPTION: Standard license header comment block declaring Zilliz copyright and Apache 2.0 license terms for Milvus project source files. Specifies conditions for use, distribution and modification of the code.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/build-support/cpp_license.txt#2025-04-10_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// Copyright (C) 2019-2020 Zilliz. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n// with the License. You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software distributed under the License\n// is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n// or implied. See the License for the specific language governing permissions and limitations under the License\n```\n\n----------------------------------------\n\nTITLE: Configuring Milvus Storage Build in CMake\nDESCRIPTION: Sets up Milvus Storage version, Git repository, and build options. It uses CMake's FetchContent to download and build the library, with options for Azure File System support.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/milvus-storage/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmilvus_add_pkg_config(\"milvus-storage\")\nset_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES \"\")\nset( milvus-storage_VERSION 6cf3724 )\nset( GIT_REPOSITORY  \"https://github.com/milvus-io/milvus-storage.git\")\nmessage(STATUS \"milvus-storage repo: ${GIT_REPOSITORY}\")\nmessage(STATUS \"milvus-storage version: ${milvus-storage_VERSION}\")\n\nmessage(STATUS \"Building milvus-storage-${milvus-storage_SOURCE_VER} from source\")\nmessage(STATUS ${CMAKE_BUILD_TYPE})\n\nif ( ENABLE_AZURE_FS STREQUAL \"ON\" )\n    set(WITH_AZURE_FS ON CACHE BOOL \"\" FORCE )\nelse ()\n    set(WITH_AZURE_FS OFF CACHE BOOL \"\" FORCE )\nendif ()\n\nset( CMAKE_PREFIX_PATH ${CONAN_BOOST_ROOT} )\nFetchContent_Declare(\n        milvus-storage\n        GIT_REPOSITORY  ${GIT_REPOSITORY}\n        GIT_TAG         ${milvus-storage_VERSION}\n        SOURCE_DIR      ${CMAKE_CURRENT_BINARY_DIR}/milvus-storage-src\n        BINARY_DIR      ${CMAKE_CURRENT_BINARY_DIR}/milvus-storage-build\n        SOURCE_SUBDIR   cpp\n        DOWNLOAD_DIR    ${THIRDPARTY_DOWNLOAD_PATH} )\n\nFetchContent_GetProperties( milvus-storage )\nif ( NOT milvus-storage_POPULATED )\n    FetchContent_Populate( milvus-storage )\n\n    # Adding the following target:\n    # milvus-storage\n    add_subdirectory( ${milvus-storage_SOURCE_DIR}/cpp\n                      ${milvus-storage_BINARY_DIR} )\nendif()\n\nset( MILVUS_STORAGE_INCLUDE_DIR ${milvus-storage_SOURCE_DIR}/cpp/include CACHE INTERNAL \"Path to milvus-storage include directory\" )\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for Milvus in Kubernetes\nDESCRIPTION: This shell script executes the E2E tests for Milvus in a Kubernetes environment. It navigates to the tests/scripts directory and runs the e2e-k8s.sh script.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/README.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd tests/scripts\n$ ./e2e-k8s.sh\n```\n\n----------------------------------------\n\nTITLE: Checking Milvus Service Status (Bash)\nDESCRIPTION: Verify the status of the Milvus service using systemctl.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/build/deb/README.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl status milvus\n```\n\n----------------------------------------\n\nTITLE: Calculating Send Byte Rate in Milvus with PromQL\nDESCRIPTION: This query calculates the number of bytes per second sent back to the client while each proxy is responding to search and query requests within the past two minutes. It uses the 'milvus_proxy_send_bytes_count' metric and groups results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_28\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_proxy_send_bytes_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])/120) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: GPU Version Project Configuration\nDESCRIPTION: Configures the project build based on whether GPU support is enabled. If GPU support is on, includes CUDA as a project language.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/CMakeLists.txt#2025-04-10_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(MILVUS_GPU_VERSION STREQUAL \"ON\")\n    project(core CXX C CUDA)\nelse()\n    project(core CXX C)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up code linting with cpplint in Milvus\nDESCRIPTION: Configures the 'lint' target using cpplint to perform static code analysis. The target runs the cpplint Python script on the source directory, with options for excluding specific files and controlling verbosity.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(lint\n    ${PYTHON_EXECUTABLE}    ${BUILD_SUPPORT_DIR}/run_cpplint.py\n                            --cpplint_binary    ${CPPLINT_BIN}\n                            --exclude_globs     ${LINT_EXCLUSIONS_FILE}\n                            --source_dir            ${CMAKE_CURRENT_SOURCE_DIR}/src\n                            ${MILVUS_LINT_QUIET}\n                            )\n```\n\n----------------------------------------\n\nTITLE: Running Single Chaos Test Scenario in Bash\nDESCRIPTION: Commands to run a single chaos test scenario manually, using the example of killing a query node pod. This involves updating the chaos YAML file and executing the pytest command.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/chaos/README.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /milvus/tests/python_client/chaos\n\npytest test_chaos.py --host ${Milvus_IP} -v\n```\n\n----------------------------------------\n\nTITLE: Starting Milvus Standalone Service\nDESCRIPTION: Sets up the library path and starts the Milvus standalone service using the binary files.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/binary/README.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cd milvus\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/lib\n$ ./bin/milvus run standalone\n```\n\n----------------------------------------\n\nTITLE: Querying Encode Index Latency for Milvus Index Nodes in PromQL\nDESCRIPTION: These PromQL queries calculate the 99th percentile and average latency for encoding index files in Milvus index nodes over a 2-minute period. The queries filter by instance, app name, and namespace, and group results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_73\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_encode_index_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_indexnode_encode_index_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_indexnode_encode_index_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Library Linking Configuration\nDESCRIPTION: Configures linking targets for the core library with conditional inclusion of storage backends (OpenDAL, Azure, GCP).\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/CMakeLists.txt#2025-04-10_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(LINK_TARGETS \n    boost_bitset_ext\n    simdjson\n    tantivy_binding\n    knowhere\n    milvus-storage\n    ${OpenMP_CXX_FLAGS}\n    ${CONAN_LIBS})\n\nif(USE_OPENDAL)\n    set(LINK_TARGETS ${LINK_TARGETS} opendal)\nendif()\n\nif(DEFINED AZURE_BUILD_DIR)\n    set(LINK_TARGETS ${LINK_TARGETS} azure_blob_chunk_manager)\nendif()\n\nif (ENABLE_GCP_NATIVE)\n    set(LINK_TARGETS ${LINK_TARGETS} gcp-native-storage)\nendif()\n\ntarget_link_libraries(milvus_core ${LINK_TARGETS})\n```\n\n----------------------------------------\n\nTITLE: Embedded Milvus Configuration\nDESCRIPTION: Adds an option for embedded Milvus mode and sets corresponding compile definitions when enabled.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption( EMBEDDED_MILVUS \"Enable embedded Milvus\" OFF )\nif ( EMBEDDED_MILVUS )\n    add_compile_definitions( EMBEDDED_MILVUS )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PyTest Default Parameters\nDESCRIPTION: Example configuration in pytest.ini for setting default test parameters including host and report output\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naddopts = --host *.*.*.*  --html=/tmp/ci_logs/report.html\n```\n\n----------------------------------------\n\nTITLE: Certificate Generation Shell Script\nDESCRIPTION: Shell script to generate CA, server and client certificates for SSL/TLS authentication. Sets up basic certificate properties and generates necessary key files and certificates.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/tls_proxy.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env sh\n# your variables\nCountry=\"CN\"\nState=\"Shanghai\"\nLocation=\"Shanghai\"\nOrganization=\"milvus\"\nOrganizationUnit=\"milvus\"\nCommonName=\"localhost\"\n\necho \"generate ca.key\"\nopenssl genpkey -algorithm RSA -out ca.key\n\necho \"generate ca.pem\"\nopenssl req -new -x509 -key ca.key -out ca.pem -days 3650 -subj \"/C=$Country/ST=$State/L=$Location/O=$Organization/OU=$OrganizationUnit/CN=$CommonName\"\n\necho \"generate server SAN certificate\"\nopenssl genpkey -algorithm RSA -out server.key\nopenssl req -new -nodes -key server.key -out server.csr -days 3650 -subj \"/C=$Country/O=$Organization/OU=$OrganizationUnit/CN=$CommonName\" -config ./openssl.cnf -extensions v3_req\nopenssl x509 -req -days 3650 -in server.csr -out server.pem -CA ca.pem -CAkey ca.key -CAcreateserial -extfile ./openssl.cnf -extensions v3_req\n\necho \"generate client SAN certificate\"\nopenssl genpkey -algorithm RSA -out client.key\nopenssl req -new -nodes -key client.key -out client.csr -days 3650 -subj \"/C=$Country/O=$Organization/OU=$OrganizationUnit/CN=$CommonName\" -config ./openssl.cnf -extensions v3_req\nopenssl x509 -req -days 3650 -in client.csr -out client.pem -CA ca.pem -CAkey ca.key -CAcreateserial -extfile ./openssl.cnf -extensions v3_req\n```\n\n----------------------------------------\n\nTITLE: Querying Save Index Latency for Milvus Index Nodes in PromQL\nDESCRIPTION: These PromQL queries calculate the 99th percentile and average latency for saving index files in Milvus index nodes over a 2-minute period. The queries filter by instance, app name, and namespace, and group results by pod and node_id.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/monitor/grafana/README.md#2025-04-10_snippet_74\n\nLANGUAGE: promql\nCODE:\n```\nhistogram_quantile(0.99, sum by (le, pod, node_id) (rate(milvus_indexnode_save_index_latency_bucket{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])))\n```\n\nLANGUAGE: promql\nCODE:\n```\nsum(increase(milvus_indexnode_save_index_latency_sum{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id) / sum(increase(milvus_indexnode_save_index_latency_count{app_kubernetes_io_instance=~\"$instance\", app_kubernetes_io_name=\"$app_name\", namespace=\"$namespace\"}[2m])) by(pod, node_id)\n```\n\n----------------------------------------\n\nTITLE: Configuring ARM Platform Sources\nDESCRIPTION: Adds ARM-specific source files when building on ARM architecture, targeting AWS Graviton processors.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/src/bitset/CMakeLists.txt#2025-04-10_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nelseif (${CMAKE_SYSTEM_PROCESSOR} MATCHES \"arm*\")\\n    list(APPEND BITSET_SRCS\\n        detail/platform/arm/neon-inst.cpp\\n        detail/platform/arm/sve-inst.cpp\\n        detail/platform/arm/instruction_set.cpp\\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Dependencies for Milvus\nDESCRIPTION: Detailed list of Python package dependencies with specific version requirements. Includes core packages like grpcio for communication, data science packages like pandas and scikit-learn, and infrastructure tools like kubernetes and pymongo.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/benchmark/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# for local install\n# --extra-index-url https://test.pypi.org/simple/\n# pymilvus==2.0.0rc3.dev8\n\ngrpcio==1.53.2\ngrpcio-testing==1.37.1\ngrpcio-tools==1.37.1\n\npandas==1.1.5\nscipy==1.10.0\nscikit-learn==0.19.1\nh5py==2.7.1\n# influxdb==5.2.2\npyyaml>=5.1\ntableprint==0.8.0\nansicolors==1.1.8\nkubernetes==10.0.1\n# rq==1.2.0\nlocust>=1.3.2\npmongo==4.6.3\napscheduler==3.7.0\n```\n\n----------------------------------------\n\nTITLE: Initializing API Wrappers in Milvus Test Base Class\nDESCRIPTION: This code shows how to initialize the various API wrapper objects in the setup method of the Base class. These wrappers are used to interact with different Milvus components in tests.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/python_client/README.md#2025-04-10_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nself.connection_wrap = ApiConnectionsWrapper()\nself.utility_wrap = ApiUtilityWrapper()\nself.collection_wrap = ApiCollectionWrapper()\nself.partition_wrap = ApiPartitionWrapper()\nself.index_wrap = ApiIndexWrapper()\nself.collection_schema_wrap = ApiCollectionSchemaWrapper()\nself.field_schema_wrap = ApiFieldSchemaWrapper()\n```\n\n----------------------------------------\n\nTITLE: Milvus Server TLS Configuration\nDESCRIPTION: YAML configuration for enabling TLS in Milvus server. Specifies certificate file paths and authentication mode.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/user_guides/tls_proxy.md#2025-04-10_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  serverPemPath: configs/cert/server.pem\n  serverKeyPath: configs/cert/server.key\n  caPemPath: configs/cert/ca.pem\n\ncommon:\n  security:\n    # tlsMode 0 indicates no authentication\n    # tlsMode 1 indicates one-way authentication\n    # tlsMode 2 indicates two-way authentication\n    tlsMode: 2\n```\n\n----------------------------------------\n\nTITLE: Updating Helm Repository for Milvus\nDESCRIPTION: Commands to add and update the Milvus Helm repository for Kubernetes installation.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ helm repo add milvus https://zilliztech.github.io/milvus-helm/\n$ helm repo update\n```\n\n----------------------------------------\n\nTITLE: Setting up clang-format targets in Milvus\nDESCRIPTION: Creates two custom targets for code formatting: 'clang-format' applies formatting changes to source files, while 'check-clang-format' verifies if any files require formatting without making changes. Both targets use clang-format through a Python script.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif ( ${CLANG_FORMAT_FOUND} )\n    # runs clang format and updates files in place.\n    add_custom_target( clang-format\n        ${PYTHON_EXECUTABLE}    ${BUILD_SUPPORT_DIR}/run_clang_format.py\n                                --clang_format_binary   ${CLANG_FORMAT_BIN}\n                                --exclude_globs         ${LINT_EXCLUSIONS_FILE}\n                                --source_dir            ${CMAKE_CURRENT_SOURCE_DIR}/src\n                                --fix\n                                ${MILVUS_LINT_QUIET} )\n\n    # runs clang format and exits with a non-zero exit code if any files need to be reformatted\n    add_custom_target( check-clang-format\n        ${PYTHON_EXECUTABLE}    ${BUILD_SUPPORT_DIR}/run_clang_format.py\n                                --clang_format_binary   ${CLANG_FORMAT_BIN}\n                                --exclude_globs         ${LINT_EXCLUSIONS_FILE}\n                                --source_dir            ${CMAKE_CURRENT_SOURCE_DIR}/src\n                                ${MILVUS_LINT_QUIET} )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Client ConfigMap\nDESCRIPTION: Kubernetes ConfigMap for defining client test configuration\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/benchmark/README.md#2025-04-10_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: client-insert-batch-1000\n  namespace: qa\ndata:\n  config.yaml: |\n    insert_performance:\n      collections:\n        - \n          milvus:\n            wal_enable: true\n          collection_name: sift_1m_128_l2\n          ni_per: 1000\n          build_index: false\n          index_type: ivf_sq8\n          index_param:\n            nlist: 1024\n```\n\n----------------------------------------\n\nTITLE: Referencing Segcore Config YAML File in Milvus\nDESCRIPTION: This snippet shows the file path for the test_segcore.yaml configuration file used in Milvus for SegcoreConfig. It demonstrates where to find the default parameters for the Segcore component.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/segment_growing.md#2025-04-10_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n${milvus}/internal/core/unittest/test_utils/test_segcore.yaml\n```\n\n----------------------------------------\n\nTITLE: Pulling and Saving Docker Images for Kubernetes Installation\nDESCRIPTION: Commands to install required Python packages and save Docker images specified in the Kubernetes manifest file.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ pip3 install -r requirements.txt\n$ python3 save_image.py --manifest milvus_manifest.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Test Build in CMake\nDESCRIPTION: Conditionally adds the unittest subdirectory and disables logging for unit tests when the BUILD_UNIT_TEST option is enabled.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Unittest lib\nif ( BUILD_UNIT_TEST STREQUAL \"ON\" )\n    append_flags( CMAKE_CXX_FLAGS FLAGS \"-DELPP_DISABLE_LOGS\")\n    add_subdirectory(unittest)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for Milvus\nDESCRIPTION: Comprehensive list of Python package dependencies with pinned versions required for Milvus development and testing. Includes testing frameworks (pytest and plugins), data processing libraries (numpy, scikit-learn), and the Milvus Python client.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/tests/restful_client/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n--extra-index-url https://test.pypi.org/simple/\nrequests==2.32.0\nurllib3==1.26.19\npytest==7.2.0\npytest-assume==2.4.3\npytest-timeout==1.3.3\npytest-repeat==0.8.0\nallure-pytest==2.7.0\npytest-print==0.2.1\npytest-level==0.1.1\npytest-xdist==2.5.0\npytest-html==3.1.1\npytest-sugar==0.9.5\npytest-parallel\npytest-random-order\nPyYAML==6.0\nnumpy==1.24.3\nallure-pytest>=2.8.18\nFaker==19.2.0\npymilvus==2.4.0rc19\nscikit-learn~=1.5.0\npytest-xdist==2.5.0\ntenacity==8.1.0\n```\n\n----------------------------------------\n\nTITLE: Preventing Multiple Writers with Lease ID Mechanism\nDESCRIPTION: Introduces a lease ID mechanism to prevent multiple Datanodes from updating segment meta simultaneously. The lease ID is bound to each DML channel and recorded in the metastore.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/20230918-datanode_remove_datacoord_dependency.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Note:** Like the \"etcd lease for key\", the ownership of each dml channel is bound to a lease id. This lease id shall be recorded in metastore (etcd/tikv or any other implementation).\nWhen a `DataNode` start to watch a dml channel, it shall read this lease id (via etcd or grpc call). ANY operations on this dml channel shall under a transaction with the lease id is equal to previously read value.\nIf a `datanode` finds the lease id is revoke or updated, it shall close the flowgraph/pipeline and cancel all pending operations instead of panicking.\n```\n\n----------------------------------------\n\nTITLE: Installing Milvus on Kubernetes\nDESCRIPTION: Command to install Milvus on Kubernetes using the previously generated manifest file.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl apply -f milvus_manifest.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting compiler flags for Linux/MSYS in Milvus build\nDESCRIPTION: Appends necessary compiler flags for Linux or MSYS environments, including position-independent code, thread safety settings, and OpenMP support. Adds special flags for AddressSanitizer if enabled and optimization flags for Release builds.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (LINUX OR MSYS)\n    append_flags( CMAKE_CXX_FLAGS\n                  FLAGS\n                  \"-fPIC\"\n                  \"-DELPP_THREAD_SAFE\"\n                  \"-fopenmp\"\n                  \"-Wno-error\"\n                  \"-Wno-all\"\n                  )\n    if (USE_ASAN STREQUAL \"ON\") \n        message( STATUS \"Building Milvus Core Using AddressSanitizer\")\n        add_compile_options(-fno-stack-protector -fno-omit-frame-pointer -fno-var-tracking -fsanitize=address)\n        add_link_options(-fno-stack-protector -fno-omit-frame-pointer -fno-var-tracking -fsanitize=address)\n    endif()\n    if (CMAKE_BUILD_TYPE STREQUAL \"Release\")\n        append_flags( CMAKE_CXX_FLAGS\n                \"-O3\"\n                )\n    endif()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: DCO Commit Message Example\nDESCRIPTION: Example of a git commit message with Developer Certificate of Origin (DCO) sign-off\nSOURCE: https://github.com/milvus-io/milvus/blob/master/CONTRIBUTING.md#2025-04-10_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis is my commit message\n\nSigned-off-by: Random J Developer <random@developer.example.org>\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Milvus from Kubernetes\nDESCRIPTION: Command to uninstall Milvus when installed on Kubernetes.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/README.md#2025-04-10_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl delete -f milvus_manifest.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Flags in CMake for Unit Testing\nDESCRIPTION: Conditionally adds coverage-related compiler flags when both unit testing and code coverage are enabled. Sets the flags for profile-guided optimization and test coverage.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/CMakeLists.txt#2025-04-10_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif ( BUILD_UNIT_TEST STREQUAL \"ON\" AND BUILD_COVERAGE STREQUAL \"ON\" )\n    append_flags( CMAKE_CXX_FLAGS\n                  FLAGS\n                        \"-fprofile-arcs\"\n                        \"-ftest-coverage\"\n                        )\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Implementing Rectangle Class with Strong Types\nDESCRIPTION: Shows how to use strong types in a class constructor to make interfaces more expressive and robust.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/NamedType/README.md#2025-04-10_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass Rectangle\n{\npublic:\n    Rectangle(Width width, Height height) : width_(width.get()), height_(height.get()) {}\n    double getWidth() const { return width_; }\n    double getHeight() const { return height_; }\n\nprivate:\n    double width_;\n    double height_;\n};\n```\n\n----------------------------------------\n\nTITLE: Strong Typing with References\nDESCRIPTION: Shows how to create a strong type that behaves like a reference to an std::string.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/thirdparty/NamedType/README.md#2025-04-10_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nusing FamilyNameRef = NamedType<std:string&, struct FamilyNameRefTag>;\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Milvus\nDESCRIPTION: This snippet defines the exact versions of Python packages required for the Milvus project. It specifies Docker SDK version 5.0.0 and nested-lookup version 0.2.22.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/offline/requirements.txt#2025-04-10_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndocker==5.0.0\nnested-lookup==0.2.22\n```\n\n----------------------------------------\n\nTITLE: Adding platform-specific test files for Linux and macOS in CMake\nDESCRIPTION: Conditionally adds additional test files specific to Linux and macOS platforms, including scalar index creator, string index, and array tests.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/internal/core/unittest/CMakeLists.txt#2025-04-10_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (LINUX OR APPLE)\n    set(MILVUS_TEST_FILES\n            ${MILVUS_TEST_FILES}\n            test_scalar_index_creator.cpp\n            test_string_index.cpp\n            test_array.cpp test_array_expr.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Executing Milvus Rolling Update Script in Shell\nDESCRIPTION: This command runs the rollingUpdate.sh script to update a Milvus installation to version 2.2.3. It specifies the namespace, instance name, operation type, target version, and new image tag.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/deployments/upgrade/README.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh rollingUpdate.sh -n default -i my-release -o update -t 2.2.3 -w 'milvusdb/milvus:v2.2.3'\n```\n\n----------------------------------------\n\nTITLE: Checking Go Code Format with Make\nDESCRIPTION: Make command to check the formatting of Golang code in the Milvus project.\nSOURCE: https://github.com/milvus-io/milvus/blob/master/docs/design_docs/segcore/scripts_and_tools.md#2025-04-10_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake static-check\n```"
  }
]