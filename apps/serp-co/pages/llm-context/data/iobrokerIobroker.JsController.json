[
  {
    "owner": "iobroker",
    "repo": "iobroker.js-controller",
    "content": "TITLE: Subscribing to Foreign States in ioBroker Adapters\nDESCRIPTION: Example showing how to handle errors when subscribing to all states of an adapter. This is used to catch and log subscription errors.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err) {\n  if (err) adapter.log.error('Cannot subscribe object: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting State Values in ioBroker Adapter with Various Overloads (TypeScript)\nDESCRIPTION: Method definitions for writing values to the ioBroker states database. This method handles state values for the adapter with multiple overloads to support different parameter combinations including state values, acknowledgment flags, and user context options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_99\n\nLANGUAGE: typescript\nCODE:\n```\nsetState\\<`T`\\>(`id`, `state`, `callback`?): `T` *extends* `unknown` ? [`SetStatePromise`](../-internal-/type-aliases/SetStatePromise.md) : `void`\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetState\\<`T`\\>(`id`, `state`, `ack`, `callback`?): `T` *extends* `unknown` ? [`SetStatePromise`](../-internal-/type-aliases/SetStatePromise.md) : `void`\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetState\\<`T`\\>(`id`, `state`, `options`?, `callback`?): `T` *extends* `unknown` ? [`SetStatePromise`](../-internal-/type-aliases/SetStatePromise.md) : `void`\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetState\\<`T`\\>(`id`, `state`, `ack`, `options`?, `callback`?): `T` *extends* `unknown` ? [`SetStatePromise`](../-internal-/type-aliases/SetStatePromise.md) : `void`\n```\n\n----------------------------------------\n\nTITLE: Installing ioBroker on Debian-based Systems\nDESCRIPTION: This bash command downloads and executes the ioBroker installation script on Debian-based systems. It provides a quick way to set up ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sLf https://iobroker.net/install.sh | bash -\n```\n\n----------------------------------------\n\nTITLE: Creating an ioBroker Object Structure\nDESCRIPTION: This snippet shows the structure of an object that can be created with setObject(). It demonstrates the required fields common, native, and type, with specific attributes needed for a state object including name, type, and role.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_94\n\nLANGUAGE: js\nCODE:\n```\n{\n    common: {\n         name: 'object name',\n         type: 'number', // string, boolean, object, mixed, array\n         role: 'value'   // see https://github.com/ioBroker/ioBroker/blob/master/doc/SCHEMA.md#state-commonrole\n    },\n    native: {},\n    type: 'state' // channel, device\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Install Logic in TypeScript\nDESCRIPTION: Demonstrates how to implement custom installation logic for an adapter by using the 'install' event. This allows interaction with ioBroker databases during the installation process.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nthis.on('install', () => {\n    this.log.info('Performing installation logic ...')\n    // Perform your installation logic\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving States with getStates in ioBroker Adapter (JavaScript)\nDESCRIPTION: Function to read all states of the current adapter according to a pattern. Returns an object with state IDs as keys and state objects as values. The example demonstrates reading all states using a wildcard pattern.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.getStates('*', function (err, states) {\n    for (var id in states) {\n         adapter.log.debug('\"' + id + '\" = \"' + states[id].val);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Feature Support in ioBroker Adapters\nDESCRIPTION: Pattern for checking if a specific feature is supported before using it. This helps maintain compatibility across different controller versions.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\nif (adapter.supportsFeature && adapter.supportsFeature('ALIAS')) {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Objects in ioBroker Database in TypeScript\nDESCRIPTION: This method creates or overwrites an object in the ioBroker objectDB. It handles various object types and ensures mandatory attributes are present.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_92\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetObject(id: string, obj: Omit<StateObject | DeviceObject | ChannelObject | FolderObject | MetaObject | EnumObject | HostObject | AdapterObject | InstanceObject | UserObject | GroupObject | ScriptObject | ChartObject | ScheduleObject | RepositoryObject | OtherObject | DesignObject, \"_id\" | \"acl\"> & object): Promise<object>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetObject(id: string, obj: Omit<StateObject | DeviceObject | ChannelObject | FolderObject | MetaObject | EnumObject | HostObject | AdapterObject | InstanceObject | UserObject | GroupObject | ScriptObject | ChartObject | ScheduleObject | RepositoryObject | OtherObject | DesignObject, \"_id\" | \"acl\"> & object, callback: SetObjectCallback): void\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign States Asynchronously in ioBroker\nDESCRIPTION: Sets a state value in the states DB for any instance. This asynchronous method returns a promise that resolves when the operation is complete.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nsetForeignStateAsync(id, state, ack, options): SetStatePromise\n```\n\n----------------------------------------\n\nTITLE: Setting State Value Format Example in JavaScript\nDESCRIPTION: Example object structure for setting a state value with optional attributes including value, acknowledgment flag, timestamps, quality, origin, comment, expiration, and last changed time.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    val:    value,\n    ack:    true|false,       // default - false; is command(false) or status(true)\n    ts:     timestampMS,      // default - now\n    q:      qualityAsNumber,  // default - 0 (ok)\n    from:   origin,           // default - this adapter\n    c:      comment,          // default - empty\n    expire: expireInSeconds   // default - 0\n    lc:     timestampMS       // default - automatic calculation\n}\n```\n\n----------------------------------------\n\nTITLE: Error and Change Handling for setStateChanged in ioBroker\nDESCRIPTION: Example callback function to handle errors and detect changes when using setStateChanged. The callback receives any error, the ID of the state, and a notChanged flag indicating whether the value was actually changed.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, id, notChanged) {\n  if (err) adapter.log.error('Cannot set value for \"' + id + '\": ' + err);\n  if (!notChanged) adapter.log.debug('Value was changed');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign States Asynchronously Only When Changed in ioBroker\nDESCRIPTION: Asynchronously writes a value into states DB only if it has changed. Returns a promise that resolves when the operation is complete.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nsetForeignStateChangedAsync(id, state, ack?): SetStateChangedPromise\n```\n\n----------------------------------------\n\nTITLE: Error Handling for setState in ioBroker\nDESCRIPTION: Example callback function to handle errors when setting state values. The callback receives any error and the ID of the state that was attempted to be set.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, id) {\n  if (err) adapter.log.error('Cannot set value for \"' + id + '\": ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Values in TypeScript\nDESCRIPTION: Utility method to decrypt passwords or values using a provided key. Supports both single and two parameter variants.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndecrypt(secretVal: string, value?: string): string\ndecrypt(value: string): string\n```\n\n----------------------------------------\n\nTITLE: Sending Asynchronous Messages to Adapters in TypeScript\nDESCRIPTION: The sendToAsync method provides Promise-based communication with other adapter instances. It allows sending messages to specific instances or all instances of a particular adapter type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nsendToAsync(instanceName: unknown, command: unknown, message?: unknown, options?: unknown): any {\n    // Async version of sendTo\n    // As we have a special case (first arg can be error or result, we need to promisify manually)\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Multiple Adapter States\nDESCRIPTION: Example demonstrating how to read all states of an adapter using a wildcard pattern and logging the values.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.getStates('*', function (err, states) {\n    for (var id in states) {\n         adapter.log.debug('\"' + id + '\" = \"' + states[id].val);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign Objects with Callback API\nDESCRIPTION: Shows the callback-based API for setting foreign objects\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nsetForeignObject<T extends string>(id: T, obj: SettableObjectWorker<ObjectIdToObjectType<T, \"write\">>, callback?: SetObjectCallback): void\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Unsubscription from Foreign States in TypeScript\nDESCRIPTION: Asynchronously unsubscribes from changes to states that may not belong to this adapter. Takes a pattern and optional options, returns a Promise.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_113\n\nLANGUAGE: TypeScript\nCODE:\n```\nunsubscribeForeignStatesAsync(pattern: string | string[], options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Foreign States in TypeScript\nDESCRIPTION: Unsubscribes from state changes for a given pattern. The pattern must match the one used for subscription. Accepts optional options and callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_112\n\nLANGUAGE: TypeScript\nCODE:\n```\nunsubscribeForeignStates(pattern: string | string[], callback?: ErrorCallback): void\nunsubscribeForeignStates(pattern: string | string[], options: unknown, callback?: ErrorCallback): void\n```\n\n----------------------------------------\n\nTITLE: Example of State Object Structure in ioBroker\nDESCRIPTION: Demonstrates the object structure that can be used when setting states, showing various properties like value, acknowledgment flag, timestamp, and more.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    val:    value,\n    ack:    true|false,       // default - false; is command(false) or status(true)\n    ts:     timestampMS,      // default - now\n    q:      qualityAsNumber,  // default - 0 (ok)\n    from:   origin,           // default - this adapter\n    c:      comment,          // default - empty\n    expire: expireInSeconds   // default - 0\n    lc:     timestampMS       // default - automatic calculation\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Encrypted Configuration in ioBroker Adapter API\nDESCRIPTION: Method to securely read encrypted parameters from the adapter configuration. Supports both callback-based and Promise-based patterns depending on whether a callback is provided.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\ngetEncryptedConfig(attribute, callback?): Promise<string | void | string[]>\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign States with Acknowledgment and Options in ioBroker\nDESCRIPTION: Writes a value into states DB with both acknowledgment flag and options. This is the most complete overload with all possible parameters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nsetForeignStateChanged(id, state, ack, options, callback?): void\n```\n\n----------------------------------------\n\nTITLE: Setting User Password Asynchronously in ioBroker Adapter (TypeScript)\nDESCRIPTION: Method signature for setting a new password for a given user asynchronously. This method accepts a username, password, and optional configuration, and returns a Promise that resolves when the password is successfully set.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\nsetPasswordAsync(`user`, `password`, `options`?): `Promise`\\<`void`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining StateCommon Interface in TypeScript\nDESCRIPTION: The `StateCommon` interface extends the `ObjectCommon` and includes properties for defining the characteristics of states in ioBroker. It allows setting aliases, smart names, custom settings, and history attributes. The interface provides flexibility in configuring states, defining default values, and making them conditional based on other states. This code is dependent on TypeScript and requires the type definitions located in `types-dev/objects.d.ts`.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/StateCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\ninterface StateCommon extends ObjectCommon {\n    alias?: Record<string, any>;\n    color?: string;\n    custom?: Record<string, any>;\n    def?: any;\n    defAck?: boolean;\n    desc?: StringOrTranslated;\n    dontDelete?: true;\n    expert?: true;\n    habpanel?: any;\n    history?: any;\n    icon?: string;\n    material?: any;\n    max?: number;\n    min?: number;\n    mobile?: any;\n    name: StringOrTranslated;\n    read: boolean;\n    role: string;\n    smartName?: null | string | false | object & object;\n    states?: string | string[] | Record<string, string>;\n    step?: number;\n    type: CommonType;\n    unit?: string;\n    workingID?: string;\n    write: boolean;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects with Pattern and Enums\nDESCRIPTION: Example showing how to get objects matching a pattern with specific type and enum resolution. Returns object data including common properties, native data and enum assignments.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.getForeignObjects('hm-rega.0.*', 'state', ['rooms', 'functions'], function (err, objs) {\n  if (err) adapter.log.error('Cannot get object: ' + err);\n  // objs look like:\n  // {\n  //    \"hm-rega.0.ABC0000.1.STATE\": {\n  //        common: {...},\n  //        native: {},\n  //        type: 'state',\n  //        enums: {\n  //           'enums.rooms.livingroom': 'Living room',\n  //           'enums.functions.light': 'Light'\n  //       }\n  //    },\n  //    \"hm-rega.0.ABC0000.2.STATE\": {\n  //        common: {...},\n  //        native: {},\n  //        type: 'state',\n  //        enums: {\n  //           'enums.rooms.sleepingroom': 'Sleeping room',\n  //           'enums.functions.window': 'Windows'\n  //       }\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to Hosts in TypeScript\nDESCRIPTION: The sendToHost method enables communication with specific hosts or all hosts in the ioBroker system. It supports various commands for system operations like executing commands or retrieving logs.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nsendToHost(hostName: null | string, message: any, callback?: MessageCallback | MessageCallbackInfo): void\nsendToHost(hostName: null | string, command: string, message: any, callback?: MessageCallback | MessageCallbackInfo): void\n```\n\n----------------------------------------\n\nTITLE: Using setPassword with callback for error handling in JavaScript\nDESCRIPTION: Example showing how to use the setPassword method with a callback function that handles errors. This is used when changing a user's password in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err) {\n  if (err) adapter.log.error('Cannot set password: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading State Values with Error Handling\nDESCRIPTION: Example showing how to read state values with error handling in the callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, state) {\n  if (err) adapter.log.error('Cannot read value: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Directories with readDir() in ioBroker\nDESCRIPTION: This code demonstrates how to read the content of a directory from the DB for a given adapter and path. The function returns an array of files and directories with their metadata including stats, access control list, and timestamps.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.readDir('vis-2.0', '/main/', function (err, filesOrDirs) {\n  // All enums\n  if (err) adapter.log.error('Cannot read directory: ' + err);\n  if (filesOrDirs) {\n     for (var f = 0; f < filesOrDirs.length; f++) {\n        adapter.log.debug('Directory main has the following files and dirs: ' + filesOrDirs[f].file + '[dir - ' + filesOrDirs[f].isDir + ']');\n     }\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign States Only When Changed in ioBroker\nDESCRIPTION: Writes a value into states DB for any instance, but only if the state has changed. This method has multiple overloads to accommodate different parameter combinations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nsetForeignStateChanged(id, state, callback?): void\n```\n\n----------------------------------------\n\nTITLE: Configuring tsconfig.json for ioBroker Types\nDESCRIPTION: This example shows how to add the ioBroker type definitions to your TypeScript project by configuring the 'types' array in the tsconfig.json file. This method includes both Node.js types and ioBroker-specific types.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/types-public/README.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n\t\"types\": [\"node\", \"@iobroker/types\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Objects with Type Filtering and Enum Resolution (JavaScript)\nDESCRIPTION: Example demonstrating how to retrieve multiple objects matching a pattern with specific type filtering and enum resolution. This allows getting objects with their associated room and function information.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_50\n\nLANGUAGE: js\nCODE:\n```\nadapter.getForeignObjects('hm-rega.0.*', 'state', ['rooms', 'functions'], function (err, objs) {\n  if (err) adapter.log.error('Cannot get object: ' + err);\n  // objs look like:\n  // {\n  //    \"hm-rega.0.ABC0000.1.STATE\": {\n  //        common: {...},\n  //        native: {},\n  //        type: 'state',\n  //        enums: {\n  //           'enums.rooms.livingroom': 'Living room',\n  //           'enums.functions.light': 'Light'\n  //       }\n  //    },\n  //    \"hm-rega.0.ABC0000.2.STATE\": {\n  //        common: {...},\n  //        native: {},\n  //        type: 'state',\n  //        enums: {\n  //           'enums.rooms.sleepingroom': 'Sleeping room',\n  //           'enums.functions.window': 'Windows'\n  //       }\n  //    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting States with delForeignState in ioBroker\nDESCRIPTION: Deletes a state of any adapter without removing the associated object. No error is returned if the state does not exist. Requires the full state ID including the adapter namespace.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err) {}\n```\n\n----------------------------------------\n\nTITLE: Error Handling when Getting Objects in ioBroker\nDESCRIPTION: Example of error handling when getting objects using the getForeignObject method. It demonstrates logging an error message if the object retrieval fails.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, obj) {\n  if (err) adapter.log.error('Cannot get object: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting State Values with Object Format in ioBroker\nDESCRIPTION: Example of using the state parameter as an object with various attributes when setting state values. This format allows specifying additional properties like acknowledgment flag, timestamp, quality, origin, comment, expiration, and last change timestamp.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    val:    value,\n    ack:    true|false,       // default - false; is command(false) or status(true)\n    ts:     timestampMS,      // default - now\n    q:      qualityAsNumber,  // default - 0 (ok)\n    from:   origin,           // default - this adapter\n    c:      comment,          // default - empty\n    expire: expireInSeconds   // default - 0\n    lc:     timestampMS       // default - automatic calculation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstanceCommon TypeScript Interface\nDESCRIPTION: Interface definition that extends AdapterCommon and specifies configuration properties for ioBroker instances. Includes properties for admin UI, operation modes, security, and runtime behavior.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InstanceCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InstanceCommon extends AdapterCommon {\n    adminColumns?: string | (string | CustomAdminColumn)[];\n    adminTab?: {\n        \"fa-icon\"?: string;\n        icon?: string;\n        ignoreConfigUpdate?: boolean;\n        link?: string;\n        name?: StringOrTranslated;\n        order?: number;\n        singleton?: boolean;\n    };\n    adminUI?: AdminUi;\n    allowInit?: boolean;\n    automaticUpgrade?: AutoUpgradePolicy;\n    availableModes?: InstanceMode[];\n    blockedVersions?: string[];\n    blockly?: boolean;\n    color?: string;\n    compact?: boolean;\n    compactGroup?: number;\n    connectionType?: ConnectionType;\n    custom?: undefined;\n    dataFolder?: string;\n    dataSource?: \"push\" | \"poll\" | \"assumption\";\n    dependencies?: Dependencies;\n    desc?: StringOrTranslated;\n    docs?: Partial<Record<Languages, string | string[]>>;\n    dontDelete?: true;\n    enabled: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File from DB in ioBroker\nDESCRIPTION: This code demonstrates the callback pattern for reading a file from the database for a specific adapter. It shows handling of the error response and accessing the file content.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_69\n\nLANGUAGE: js\nCODE:\n```\nfunction (err, data) {\n    // data is utf8 or binary Buffer depends on the file extension.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign States with Acknowledgment Flag in ioBroker\nDESCRIPTION: Writes a value into states DB with an acknowledgment flag indicating whether it's a command (false) or status (true). This is an overload that supports the ack parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nsetForeignStateChanged(id, state, ack, callback?): void\n```\n\n----------------------------------------\n\nTITLE: Getting Channel Objects in TypeScript\nDESCRIPTION: Method overloads for retrieving channel objects, with options for filtering by parent device and including additional options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ngetChannels(callback: GetObjectsCallback3<ChannelObject>): void\ngetChannels(parentDevice: string, callback: GetObjectsCallback3<ChannelObject>): void\ngetChannels(parentDevice: string, options: unknown, callback: GetObjectsCallback3<ChannelObject>): void\n```\n\n----------------------------------------\n\nTITLE: State Management Method Definitions in TypeScript\nDESCRIPTION: TypeScript definitions for state management methods including getStatesOf and getStatesOfAsync with various parameter combinations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\ngetStatesOfAsync(): Promise<StateObject[]>;\ngetStatesOfAsync(parentDevice: string, parentChannel?: string): Promise<StateObject[]>;\ngetStatesOfAsync(parentDevice: string, parentChannel: string, options?: unknown): Promise<StateObject[]>;\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign States with Options in ioBroker\nDESCRIPTION: Writes a value into states DB with additional options for customization. This overload allows passing user context or other options to the operation.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nsetForeignStateChanged(id, state, options, callback?): void\n```\n\n----------------------------------------\n\nTITLE: Deleting Objects with delForeignObject in ioBroker\nDESCRIPTION: Deletes an object belonging to any adapter. The full ID with namespace must be specified. The corresponding state will be deleted too if the object has type \"state\". Supports optional user context and recursive deletion.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err) {\n  if (err) adapter.log.error('Cannot delete object: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channels Using Promises in ioBroker Adapter API\nDESCRIPTION: Promise-based implementations of getChannelsOf that return channel objects. Can retrieve all channels or channels for a specific parent device with optional parameters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\ngetChannelsOfAsync(): Promise<ChannelObject[]>\ngetChannelsOfAsync(parentDevice, options?): Promise<ChannelObject[]>\n```\n\n----------------------------------------\n\nTITLE: Setting Object in TypeScript\nDESCRIPTION: The setObject function provides both synchronous and asynchronous operations to set objects within storage. It accepts parameters such as 'id', 'obj', optional settings, and a callback, facilitating flexible data management.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetObject<T>(id: T, obj: SettableObjectWorker<ObjectIdToObjectType<T, \"read\">>, options?, callback?): void | Promise<undefined | object>\n```\n\n----------------------------------------\n\nTITLE: Define Adapter Properties in TypeScript\nDESCRIPTION: This snippet declares various optional and required properties for configuring ioBroker adapter instances. It includes settings like memory limits, runtime parameters, and administrative options. These properties facilitate the customization and management of adapters in the ioBroker environment.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InstanceCommon.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/* Example TypeScript properties for an ioBroker adapter */\nexport interface AdapterCommon {\n    materializeTab?: boolean; // Whether the admin tab is materialized. Required for Admin 3+\n    memoryLimitMB?: number; // Optional memory limit for the instance\n    messagebox?: true; // Deprecated in favor of supportedMessages in controller v5\n    messages?: MessageRule[]; // Conditional messages by upgrade or installation\n    mode: InstanceMode; // When and how an instance should be started\n    name: string; // Name of the adapter excluding 'ioBroker.' prefix\n    news?: { [version: string]: Translated }; // News per version for localization\n    noConfig?: true; // Denotes absence of configuration dialog\n    nodeProcessParams?: string[]; // Arguments for the adapter process, disabling compact mode\n    nogit?: true; // Denotes manual GitHub installation isn\\'t possible\n    noIntro?: true; // Instances not shown in admin overview, useful for icons\n    nondeletable?: true; // Adapter cannot be manually deleted or updated\n    noRepository?: true; // Indicates absence in official ioBroker repositories\n    onlyWWW?: boolean; // Whether the adapter only contains HTML files\n    os?: 'linux' | 'darwin' | 'win32' | ('linux' | 'darwin' | 'win32')[]; // Supported OSes\n    osDependencies?: {\n        darwin: string[]; // Dependencies for OSX\n        linux: string[]; // Dependencies for Linux\n        win32: string[]; // Dependencies for Windows\n    }; // Native dependencies for adapters\n    platform: 'Javascript/Node.js'; // Platform specification\n    plugins?: { [pluginName: string]: Record<string, any> }; // Plugins like Sentry\n    preserveSettings?: string | string[]; // Attributes in instance not to be deleted\n    readme?: string; // URL of the ReadMe file\n    restartAdapters?: string[]; // Adapters to restart after install or update\n    restartSchedule?: string; // CRON to restart daemon adapters\n    role?: string; // Role of the object\n    runAsCompactMode?: boolean; // If compact mode is active\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All States in ioBroker Adapter\nDESCRIPTION: Pattern for subscribing to all states that belong to the current adapter instance. This is a common pattern used in ioBroker adapters to monitor state changes.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.subscribeStates('*'); // subscribe for all states of this adapter\n```\n\n----------------------------------------\n\nTITLE: Error Handling with getState Callback in ioBroker (JavaScript)\nDESCRIPTION: Example callback function for the getState method showing how to handle errors when reading values from the states database.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, state) {\n  if (err) adapter.log.error('Cannot read value: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Files with readFile() in ioBroker\nDESCRIPTION: This code shows how to read the content of a file from the DB for a given adapter and file name. The function returns either a UTF-8 string or binary Buffer depending on the file extension.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.readFile('vis-2.0', '/main/vis-views.json', function (err, data) {\n  // All enums\n  if (err) adapter.log.error('Cannot read file: ' + err);\n  adapter.log.info('Content of file is: ' + data);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Interval with Automatic Cleanup in TypeScript\nDESCRIPTION: This method sets an interval that is automatically cleared during the unload process. It works similarly to setInterval but with additional cleanup functionality.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_91\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetInterval<TCallback extends TimeoutCallback>(cb: TCallback, timeout: number, ...args: Parameters<TCallback>): undefined | Interval\n```\n\n----------------------------------------\n\nTITLE: Deleting a File Asynchronously in TypeScript\nDESCRIPTION: Asynchronously deletes a given file using a Promise-based approach.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ndelFileAsync(adapterName: null | string, path: string, options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Event Handler Method Type Definitions in TypeScript\nDESCRIPTION: TypeScript method definitions for core event handlers like stateChange, objectChange, fileChange and ready events in the adapter class.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\non(event: 'stateChange', listener: StateChangeHandler): this;\non(event: 'objectChange', listener: ObjectChangeHandler): this;\non(event: 'fileChange', listener: FileChangeHandler): this;\non(event: 'ready', listener: ReadyHandler): this;\n```\n\n----------------------------------------\n\nTITLE: Defining Adapter Dependencies in io-package.json\nDESCRIPTION: Shows how to specify adapter dependencies with version constraints in io-package.json. Can define either specific version ranges or just adapter presence requirements.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": [\n      {\n        \"js-controller\": \">=2.0.0\"\n      }\n    ],\n```\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": [\n      \"web\"\n    ],\n```\n\n----------------------------------------\n\nTITLE: Configuring RAM Limits in ioBroker JSON\nDESCRIPTION: This snippet shows how to configure RAM limits for adapter start warnings and errors in the iobroker.json file. It sets thresholds for warning and error messages when available RAM is low.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"system\": {\n        \"memLimitWarn\": 100,\n        \"memLimitWarnComment\": \"If the available RAM is below this threshold on adapter start, a warning will be logged.\",\n        \"memLimitError\": 50,\n        \"memLimitErrorComment\": \"If the available RAM is below this threshold on adapter start, an error will be logged.\"\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: State Subscription Example\nDESCRIPTION: Example showing how to subscribe to state changes for a specific adapter instance.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.subscribeForeignStates('adapterName.X.*');\n```\n\n----------------------------------------\n\nTITLE: Error Handling Example for setForeignObject\nDESCRIPTION: Shows how to handle errors when writing foreign objects in ioBroker\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, obj) {\n  // obj is {id: id}\n  if (err) adapter.log.error('Cannot write object: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Visual Views File Example in ioBroker\nDESCRIPTION: Example of using the readFile method to retrieve a JSON file from the vis-2.0 adapter. It demonstrates error handling and logging the content of the retrieved file.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_70\n\nLANGUAGE: js\nCODE:\n```\nadapter.readFile('vis-2.0', '/main/vis-views.json', function (err, data) {\n  // All enums\n  if (err) adapter.log.error('Cannot read file: ' + err);\n  adapter.log.info('Content of file is: ' + data);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign Objects with Promise API\nDESCRIPTION: Demonstrates using the Promise-based API to set foreign objects asynchronously\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nsetForeignObjectAsync<T extends string>(id: T, obj: SettableObjectWorker<ObjectIdToObjectType<T, \"write\">>, options?: unknown): SetObjectPromise\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devices Using Promises in ioBroker Adapter API\nDESCRIPTION: Promise-based implementation for retrieving all devices in the adapter instance. Returns a promise that resolves to an array of DeviceObject instances.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\ngetDevicesAsync(options?): Promise<DeviceObject[]>\n```\n\n----------------------------------------\n\nTITLE: Port Finding Helper Function Usage\nDESCRIPTION: Example showing how to use the getPort helper function to find the next available TCP port starting from a given number.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.getPort(8081, function (port) {\n    adapter.log.debug('Following port is free: ' + port);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing and Importing Node Modules in TypeScript\nDESCRIPTION: Shows how to install a node module using the adapter's installNodeModule method and then import it using importNodeModule. It also demonstrates how to handle the default export of a module.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await adapter.installNodeModule('axios', { version: '1.0.0' });\n\nif (result.success) {\n    // successfully installed\n}\n\nconst module = await adapter.importNodeModule('axios');\n\nconst module = (await adapter.importNodeModule('axios')).default;\n// now we can call axios specific methods\nconst result = await module.get('https://www.iobroker.net/');\n```\n\n----------------------------------------\n\nTITLE: Value Formatting in TypeScript\nDESCRIPTION: Method overloads for formatting numeric or string values with optional decimal places and format parameters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nformatValue(value: string | number, format?: string): string\nformatValue(value: string | number, decimals: number, format?: string): string\n```\n\n----------------------------------------\n\nTITLE: Finding ioBroker Objects Example\nDESCRIPTION: Example showing how to find an object by name and handle the results.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.findForeignObject('Some name', function (err, id, name) {\n    if (err) adapter.log.error('Cannot get object: ' + err);\n    adapter.log.debug('ID of object with name \"' + name + '\" is \"' + id + '\"');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File-based Logging in iobroker.json\nDESCRIPTION: JSON configuration for file-based logging in iobroker.json. This snippet shows the detailed configuration options for file logging, including retention period, file naming, and size limits.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"log\": {\n    \"level\": \"info\",\n    \"maxDays\": 7,\n    \"noStdout\": true,\n    \"transport\": {\n      \"file1\": {\n        \"type\": \"file\",\n        \"enabled\": true,\n        \"filename\": \"log/iobroker\",\n        \"fileext\": \".log\",\n        \"maxsize\": null,\n        \"maxFiles\": null\n      },\n    },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling Callback Example in JavaScript\nDESCRIPTION: Example callback function for handling errors when setting state values. The function logs an error message if the state cannot be set.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, id) {\n  if (err) adapter.log.error('Cannot set value for \"' + id + '\": ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logger Interface Methods\nDESCRIPTION: The `Logger` interface defines methods for logging messages at different verbosity levels such as debug, info, warn, error, and silly. This is crucial for managing log outputs and streamlining debugging processes within the application. Depending on the log level, different severity messages can be logged, providing flexibility and control over logging behavior.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/Logger.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlevel: LogLevel\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndebug(message: string): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nerror(message: string): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninfo(message: string): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsilly(message: string): void\n```\n\nLANGUAGE: typescript\nCODE:\n```\nwarn(message: string): void\n```\n\n----------------------------------------\n\nTITLE: Checking Object Existence in TypeScript\nDESCRIPTION: Method to check if an object exists for a given ID. Takes an object ID and optional user context as parameters and returns a Promise with a boolean result.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nforeignObjectExists(id: string, options?: null | Record<string, any>): Promise<boolean | void>\n```\n\n----------------------------------------\n\nTITLE: Callback Pattern for sendTo Method in ioBroker\nDESCRIPTION: Callback function pattern used with the sendTo method for inter-adapter communication. It shows how to handle the result received from the target adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_71\n\nLANGUAGE: js\nCODE:\n```\nfunction (result) {\n  // result is target adapter specific and can vary from adapter to adapter\n  if (!result) adapter.log.error('No response received');\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Files to Database in ioBroker Adapter (JavaScript)\nDESCRIPTION: Shows how to write file content to the database using the writeFile method. The example demonstrates writing a JSON file for the vis-2.0 adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.writeFile('vis-2.0', '/main/vis-views.json', data, function (err) {\n  err && adapter.log.error('Cannot write file: ' + err);\n});\n```\n\n----------------------------------------\n\nTITLE: Monitoring ioBroker Logs (Linux)\nDESCRIPTION: This command allows you to watch the ioBroker log file in real-time on Linux systems, useful for monitoring and troubleshooting.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\niobroker logs --watch\n```\n\n----------------------------------------\n\nTITLE: Deleting a Device Asynchronously in TypeScript\nDESCRIPTION: Asynchronously deletes a device, its channels and states using a Promise-based approach.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteDeviceAsync(deviceName: string, options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Renaming Objects Asynchronously in TypeScript\nDESCRIPTION: This renameAsync function facilitates the renaming of an object in storage via a promise-based asynchronous execution. It requires identifiers for both the old and new object names, along with mandatory options for configuration.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nrenameAsync(id, oldName, newName, options): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectACL Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines access control properties for ioBroker objects. It includes owner and group ownership definitions as well as Linux-style numeric permissions.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectACL.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectACL {\n    owner: string;      // Full name of the user who owns this object\n    ownerGroup: string; // Full name of the group who owns this object\n    object: number;     // Linux-type permissions defining access\n}\n```\n\n----------------------------------------\n\nTITLE: Using getPort to Find Free TCP Port in ioBroker Adapter (JavaScript)\nDESCRIPTION: Helper function that finds the first free TCP port starting with a given one. The function takes a port number to start the search and a callback function that receives the free port as a parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.getPort(8081, function (port) {\n    adapter.log.debug('Following port is free: ' + port);\n});\n```\n\n----------------------------------------\n\nTITLE: AdapterObject Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of adapter objects in ioBroker. It extends BaseObject and includes properties for adapter ID, type, common settings, native properties, instance objects, and notifications.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AdapterObject extends BaseObject {\n    _id: Adapter;\n    type: \"adapter\";\n    common: AdapterCommon;\n    protectedNative?: string[];\n    encryptedNative?: string[];\n    notifications?: Notification[];\n    instanceObjects: (StateObject | DeviceObject | ChannelObject | FolderObject | MetaObject)[];\n    objects: AnyObject[];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting State in Redis Database in TypeScript\nDESCRIPTION: Sets a state in the Redis database. Returns a promise that resolves with the state ID.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetState(id: string, state: SettableState | StateValue): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for database connection options. Includes properties for host, port, password, sentinel configuration, logging options, and data directory paths. This interface is extended by RedisConnectionOptions to provide Redis-specific connection settings.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ConnectionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ConnectionOptions {\n    backup?: BackupOptions;\n    dataDir: string;\n    enhancedLogging?: boolean;\n    host: string | string[];\n    options: Record<string, any>;\n    pass?: string;\n    port: number | number[];\n    sentinelName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ioBroker Controller in Background (Linux)\nDESCRIPTION: This command starts the ioBroker controller as a background process on Linux systems. It's typically used for running ioBroker as a service.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\niobroker start\n```\n\n----------------------------------------\n\nTITLE: Retrieving Channels in ioBroker Adapter API with TypeScript\nDESCRIPTION: Various overloads of the getChannelsOf method to retrieve channel objects, either all channels or those belonging to a specific parent device. Supports callback-based pattern with optional parameters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ngetChannelsOf(callback): void\ngetChannelsOf(parentDevice, callback): void\ngetChannelsOf(parentDevice, options, callback): void\n```\n\n----------------------------------------\n\nTITLE: Managing Node Modules in TypeScript\nDESCRIPTION: Demonstrates how to uninstall a node module, list installed modules, and get the adapter-scoped package identifier using the adapter methods.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await adapter.uninstallNodeModule('axios');\n\nif (result.success) {\n    // successfully uninstalled\n}\n\nconst installedNodeModules = await adapter.listInstalledNodeModules();\n\nadapter.log.info(`Installed modules are: ${installedNodeModules.join(', ')}`);\n\n// e.g. @iobroker-javascript.0/axios\nconst packageIdentifier = adapter.getAdapterScopedPackageIdentifier('axios');\n```\n\n----------------------------------------\n\nTITLE: Designating Primary Host in TypeScript\nDESCRIPTION: The setPrimaryHost attempts to designate the current node as the primary host, expiring after a specific duration given in milliseconds. If successful, it returns 1; otherwise, 0 if the lock couldn't be established.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetPrimaryHost(ms): Promise<number>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalSubscribeOptions Interface Properties\nDESCRIPTION: This snippet defines the properties of the InternalSubscribeOptions interface, including an optional callback function of type ErrorCallback, optional options of a record type, and a required pattern of type Pattern. It is utilized in the ioBroker.js-controller framework for managing subscription options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalSubscribeOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalSubscribeOptions {\n    /**\n     * optional callback: ErrorCallback\n     */\n    callback?: ErrorCallback;\n\n    /**\n     * optional options: null | Record<string, any>\n     */\n    options?: null | Record<string, any>;\n\n    /**\n     * pattern: Pattern\n     */\n    pattern: Pattern;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Enums in ioBroker Adapter API with TypeScript\nDESCRIPTION: Methods to retrieve enum objects with their members. Can return all enums or filter by enum name. Includes example code demonstrating usage with callbacks.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\ngetEnum(callback): void\ngetEnum(name, callback): void\ngetEnum(name, options, callback): void\n```\n\n----------------------------------------\n\nTITLE: Setting Alias Properties using ioBroker CLI\nDESCRIPTION: These commands show how to set alias properties using the ioBroker command-line interface. They demonstrate setting the target ID, read function, and write function for an alias.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\niobroker object set alias.0.aliasName common.alias.id=state.id.of.target\niobroker object set alias.0.aliasName common.alias.read=\"read-func\"\niobroker object set alias.0.aliasName common.alias.write=\"write-func\"\n```\n\n----------------------------------------\n\nTITLE: Defining StatesSettings Interface in TypeScript\nDESCRIPTION: This snippet defines the StatesSettings interface with various optional and required properties for managing states, connections, and namespaces in the ioBroker js-controller adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/StatesSettings.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface StatesSettings {\n    autoConnect?: boolean;\n    change?: ChangeFunction;\n    changeUser?: UserChangeFunction;\n    connected?(): void;\n    connection: ConnectionOptions;\n    disconnected?(): void;\n    hostname?: string;\n    logger?: InternalLogger;\n    metaNamespace?: string;\n    namespace?: string;\n    namespaceLog?: string;\n    namespaceMsg?: string;\n    namespaceSession?: string;\n    redisNamespace?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating User Permissions in TypeScript\nDESCRIPTION: Function to calculate user permissions based on user name and command permissions. It returns a Promise with the PermissionSet or void. This function is used internally in ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncalculatePermissions(user: string, commandsPermissions: CommandsPermissions, callback?: CalculatePermissionsCallback): Promise<void | PermissionSet>\n```\n\n----------------------------------------\n\nTITLE: Defining SupportedMessages Interface in TypeScript\nDESCRIPTION: This code snippet defines the SupportedMessages interface with optional properties for various message types supported by an ioBroker adapter. It includes custom messages, notifications, stopInstance signal, device manager support, and getHistory messages.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SupportedMessages.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface SupportedMessages {\n    custom?: boolean;\n    notifications?: boolean;\n    stopInstance?: number | boolean;\n    deviceManager?: boolean;\n    getHistory?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Enhanced Logging for Objects Database\nDESCRIPTION: JSON configuration snippet for enabling enhanced logging of redis protocol messages in the objects database through iobroker.json configuration.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"objects\": {\n  ...\n  \"enhancedLogging\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Async Host Communication in TypeScript\nDESCRIPTION: Promise-based version of the sendToHost method for communicating with ioBroker hosts. Returns a Promise that resolves with the message response.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nsendToHostAsync(hostName: string, message: any): Promise<undefined | Message>\nsendToHostAsync(hostName: string, command: string, message: any): Promise<undefined | Message>\n```\n\n----------------------------------------\n\nTITLE: TypeScript DeviceObject Interface Definition\nDESCRIPTION: TypeScript interface defining the structure of device objects in ioBroker. Extends BaseObject and includes required _id, common, native, and type properties along with optional properties for ACL, enums, timestamps and user metadata.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/DeviceObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DeviceObject extends BaseObject {\n    _id: string;\n    type: \"device\";\n    common: DeviceCommon;\n    native: Record<string, any>;\n    acl?: ObjectACL;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    user?: string;\n    ts?: number;\n    nonEdit?: NonEditable;\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from State Changes in ioBroker Adapter (JavaScript)\nDESCRIPTION: Demonstrates how to unsubscribe from state changes using the unsubscribeStates method. The pattern must match the original subscription pattern exactly.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.unsubscribeStates('abc*'); // This will not work\nadapter.unsubscribeStates('*');    // Valid unsubscribe\n```\n\n----------------------------------------\n\nTITLE: Defining Message Interface in TypeScript\nDESCRIPTION: TypeScript interface that extends SendableMessage to define the structure of messages passed between ioBroker adapter instances. Includes properties for message ID, callback info, command execution, source identification, and message payload.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/Message.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Message extends SendableMessage {\n    _id: number;\n    callback?: MessageCallbackInfo;\n    command: string;\n    from: string;\n    message: any;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Alias in ioBroker JSON\nDESCRIPTION: This JSON snippet shows how to create an alias object in ioBroker. It defines the alias properties including the target state ID, read/write functions for value conversion, and other metadata.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    _id: \"alias.0.aliasName\",\n    common: {\n        name: 'Test AliasC',\n        type: 'number',\n        role: 'state',\n        min: -10,\n        max: 10,\n        alias: {\n            id: 'state.id.of.target',\n            read: 'val * 10 + 1',\n            write: '(val - 1) / 10'\n        }\n    },\n    native: {},\n    type: 'state'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SystemConfigObject Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SystemConfigObject that extends BaseObject. Contains properties for system configuration including ID, ACL, common settings, enums, and other metadata.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SystemConfigObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SystemConfigObject extends BaseObject {\n    _id: string;\n    type: \"config\";\n    common: SystemConfigCommon;\n    native: Record<string, any>;\n    enums?: Record<string, string | Translated>;\n    acl?: ObjectACL;\n    from?: string;\n    user?: string;\n    ts?: number;\n    nonEdit?: NonEditable;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Install Flag in TypeScript\nDESCRIPTION: Defines an optional 'install' boolean property. When true, the adapter will be executed once additionally after installation, emitting an 'install' event for one-time installation code execution.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninstall?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Log Method in TypeScript\nDESCRIPTION: Method to log messages with error level severity. Takes a message string as parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Log.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nerror(msg: string): void\n```\n\n----------------------------------------\n\nTITLE: Object View Callback Implementation\nDESCRIPTION: Example callback function for processing object view results. Shows how to iterate through returned document rows and handle empty results or errors.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, doc) {\n    if (doc && doc.rows) {\n         for (var i = 0; i < doc.rows.length; i++) {\n             var id  = doc.rows[i].id;\n              var obj = doc.rows[i].value;\n              adapter.log.info('Found ' + id + ': ' + JSON.stringify(obj));\n         }\n                 if (!doc.rows.length) adapter.log.info('No objects found.');\n     } else {\n         adapter.log.info('No objects found: ' + err);\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Messages to UI Clients in TypeScript\nDESCRIPTION: The sendToUI method allows sending messages to active UI clients. It takes options including clientId and data to be sent to the user interface.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nsendToUI(options: SendToUserInterfaceClientOptions): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Example of Error Handling in ioBroker Callback\nDESCRIPTION: Shows how to properly handle errors in callback functions when setting state values, with logging of the error message.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, id) {\n  if (err) adapter.log.error('Cannot set value for \"' + id + '\": ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Alias with Separate Read/Write IDs in ioBroker JSON\nDESCRIPTION: This JSON snippet demonstrates how to create an alias object with separate read and write IDs in ioBroker. It's useful for devices with different states for reading and writing.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    _id: \"alias.0.aliasName\",\n    common: {\n        name: 'Test AliasC',\n        type: 'number',\n        role: 'state',\n        min: -10,\n        max: 10,\n        alias: {\n            id: {\n                read: 'state.id.to.read.from',\n                write: 'state.id.to.write.to'\n            }\n            read: 'val * 10 + 1',\n            write: '(val - 1) / 10'\n        }\n    },\n    native: {},\n    type: 'state'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HostObject Interface in TypeScript\nDESCRIPTION: This snippet defines the HostObject interface, which extends BaseObject. It specifies the structure for host objects in ioBroker, including properties like _id, common, native, and type. The interface is part of the @iobroker/js-controller-adapter package.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/HostObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HostObject extends BaseObject {\n    _id: `system.host.${string}`;\n    type: \"host\";\n    common: HostCommon;\n    native: HostNative;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Debug Log Method in TypeScript\nDESCRIPTION: Method to log messages with debug level severity. Takes a message string as parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Log.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndebug(msg: string): void\n```\n\n----------------------------------------\n\nTITLE: Defining Materialize Style Flag in TypeScript\nDESCRIPTION: Defines a required 'materialize' boolean property to indicate if the admin configuration dialog is written in materialized style, required for Admin 3+.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nmaterialize: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining InternalCreateStateOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the options used when creating states internally in the ioBroker adapter. Includes properties for parent device/channel references, state name, common properties, native data, and callback functions.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalCreateStateOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalCreateStateOptions {\n    parentDevice: string;\n    parentChannel: string;\n    stateName: string;\n    common: Partial<StateCommon>;\n    _native: Record<string, any>;\n    options?: null | Record<string, any>;\n    callback?: SetObjectCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstanceMode Type in TypeScript\nDESCRIPTION: TypeScript type alias that defines the possible operational modes for an ioBroker adapter instance. The modes include 'none', 'daemon', 'schedule', 'once', and 'extension'.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/InstanceMode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstanceMode = \"none\" | \"daemon\" | \"schedule\" | \"once\" | \"extension\"\n```\n\n----------------------------------------\n\nTITLE: Using setObjectNotExists callback with error handling in JavaScript\nDESCRIPTION: Example showing how to use the setObjectNotExists method with a callback function that includes error handling. The callback receives error information and the object ID if successful.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, obj) {\n  // obj is {id: id}\n  if (err) adapter.log.error('Cannot write object: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Maintenance Mode Configuration\nDESCRIPTION: Shows how to configure maintenance mode options for cleaning invalid database entries. Used with specific adapter methods for DB sanitization.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    user: 'system.user.admin',\n    maintenance: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Feature Detection Implementation\nDESCRIPTION: Demonstrates how to check for feature support in an adapter using the supportsFeature method and direct property checking.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nif (adapter.supportsFeature && adapter.supportsFeature('NAME')) {\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (adapter.getObjectView) {\n    // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof adapter.getObjectView === 'function') {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Info Log Method in TypeScript\nDESCRIPTION: Method to log messages with info level severity, which is the default output level for all adapters. Takes a message string as parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Log.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ninfo(msg: string): void\n```\n\n----------------------------------------\n\nTITLE: Touch Object Metadata in Redis\nDESCRIPTION: Method to update the timestamp or metadata of a specific object in the Redis database. Supports both callback and promise-based approaches.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ntouch(id: string, name: string, options: CallOptions, callback: ErrorCallback): void\ntouchAsync(id: string, name: string, options: CallOptions): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Starting ioBroker Controller in Foreground (Linux/Windows)\nDESCRIPTION: This command starts the ioBroker controller in the foreground, allowing you to see console output directly. It's useful for debugging and development.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode node_modules/iobroker.js-controller/controller.js\n```\n\n----------------------------------------\n\nTITLE: Defining MessagingControllerOptions Interface\nDESCRIPTION: This code snippet defines the `MessagingControllerOptions` interface in TypeScript. This interface is used to pass configuration options to the messaging controller, including the adapter instance and optional subscribe/unsubscribe callbacks.  It provides a structured way to configure the messaging controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/MessagingControllerOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * # Interface: MessagingControllerOptions\n */\n\n/**\n * ## Properties\n */\n\n/**\n * ### adapter\n *\n * > **adapter**: [`AdapterClass`](../../classes/AdapterClass.md)\n *\n * The adapter using this messaging controller\n *\n * #### Defined in\n *\n * [adapter/src/lib/adapter/userInterfaceMessagingController.ts:19](https://github.com/ioBroker/ioBroker.js-controller/blob/16f7418df1bc6d07b232fa81310bbbd4fbe2a36c/packages/adapter/src/lib/adapter/userInterfaceMessagingController.ts#L19)\n */\n\n/**\n * ### subscribeCallback?\n *\n * > `optional` **subscribeCallback**: [`UserInterfaceClientSubscribeHandler`](../type-aliases/UserInterfaceClientSubscribeHandler.md)\n *\n * Callback to call if successfully subscribed\n *\n * #### Defined in\n *\n * [adapter/src/lib/adapter/userInterfaceMessagingController.ts:21](https://github.com/ioBroker/ioBroker.js-controller/blob/16f7418df1bc6d07b232fa81310bbbd4fbe2a36c/packages/adapter/src/lib/adapter/userInterfaceMessagingController.ts#L21)\n */\n\n/**\n * ### unsubscribeCallback?\n *\n * > `optional` **unsubscribeCallback**: [`UserInterfaceClientUnsubscribeHandler`](../type-aliases/UserInterfaceClientUnsubscribeHandler.md)\n *\n * Callback to call if successfully unsubscribed\n *\n * #### Defined in\n *\n * [adapter/src/lib/adapter/userInterfaceMessagingController.ts:23](https://github.com/ioBroker/ioBroker.js-controller/blob/16f7418df1bc6d07b232fa81310bbbd4fbe2a36c/packages/adapter/src/lib/adapter/userInterfaceMessagingController.ts#L23)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dependencies for Installed Adapters in TypeScript\nDESCRIPTION: Defines an optional 'ifInstalledDependencies' property, similar to 'dependencies', but only checked if the specified adapter is already installed. It uses an index signature to allow any adapter name as a key with a string version as the value.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nifInstalledDependencies?: {\n    [adapterName: string]: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelObject Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for channel objects in ioBroker that extends BaseObject. Includes properties for object ID, common settings, native data, and other metadata fields like ACL, enums, timestamps and user information.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ChannelObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChannelObject extends BaseObject {\n    _id: string;\n    acl?: ObjectACL;\n    common: ChannelCommon;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type: \"channel\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdapterOptionsConfig Interface in TypeScript\nDESCRIPTION: The AdapterOptionsConfig interface defines configuration options for ioBroker adapters. It includes a log object property with a level field of type LogLevel to control logging verbosity in the adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterOptionsConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AdapterOptionsConfig {\n    log: {\n        level: LogLevel\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous User Permissions Calculation in TypeScript\nDESCRIPTION: Internal function to asynchronously determine user permissions. It takes user, commandsPermissions, and optional options as parameters and returns a Promise with PermissionSet.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncalculatePermissionsAsync(user: string, commandsPermissions: CommandsPermissions, options?: unknown): Promise<PermissionSet>\n```\n\n----------------------------------------\n\nTITLE: Defining CommonType Type Alias in TypeScript\nDESCRIPTION: Defines the CommonType type alias as a union of string literals representing common data types used in ioBroker objects. It includes 'number', 'string', 'boolean', 'array', 'object', and 'mixed'.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/CommonType.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CommonType = \"number\" | \"string\" | \"boolean\" | \"array\" | \"object\" | \"mixed\";\n```\n\n----------------------------------------\n\nTITLE: Declaring getKeys TypeScript Method\nDESCRIPTION: Method signature for retrieving keys from Redis storage with pattern matching.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetKeys(\n  pattern: string,\n  options?: null | CallOptions,\n  callback?: GetKeysCallback,\n  dontModify?: boolean\n): Promise<undefined | string[]>\n```\n\n----------------------------------------\n\nTITLE: Defining InstanceObject Interface in TypeScript\nDESCRIPTION: This code defines the InstanceObject interface for ioBroker, extending BaseObject and omitting the 'type' property from AdapterObject. It specifies the structure and properties of instance objects in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InstanceObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InstanceObject extends Omit<AdapterObject, \"type\">, BaseObject {\n  _id: `system.adapter.${string}.${number}`;\n  type: \"instance\";\n  common: InstanceCommon;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserObject Interface in TypeScript\nDESCRIPTION: Definition of the UserObject interface which extends BaseObject. This interface represents user objects in the ioBroker system with a specific ID pattern and type. It includes properties for user-specific data with strict typing.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/UserObject.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UserObject extends BaseObject {\n    _id: `system.user.${string}`;\n    type: \"user\";\n    common: UserCommon;\n}\n```\n\n----------------------------------------\n\nTITLE: SystemConfigCommon Interface Definition in TypeScript\nDESCRIPTION: Interface extending ObjectCommon that defines system-wide configuration properties for ioBroker including repository settings, locale preferences, and system behavior controls.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SystemConfigCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SystemConfigCommon extends ObjectCommon {\n  activeRepo: string[];\n  adapterAutoUpgrade?: {\n    defaultPolicy: AutoUpgradePolicy;\n    repositories: { [repoName: string]: boolean };\n  };\n  city?: string;\n  country?: string;\n  currency?: string;\n  dateFormat: string;\n  defaultHistory: string;\n  defaultLogLevel?: LogLevel;\n  defaultNewAcl: {\n    file: number;\n    object: number;\n    owner: `system.user.${string}`;\n    ownerGroup: `system.group.${string}`;\n    state: number;\n  };\n  diag: \"none\" | \"extended\" | \"no-city\";\n  expertMode?: boolean;\n  firstDayOfWeek?: \"monday\" | \"sunday\";\n  isFloatComma: boolean;\n  language: Languages;\n  latitude?: number;\n  longitude?: number;\n  licenseConfirmed: boolean;\n  siteName?: string;\n  tempUnit?: \"°C\" | \"°F\";\n  custom?: undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Adapter Instance for Debugging in Node.js\nDESCRIPTION: This command demonstrates how to manually start an adapter instance via the command line for debugging purposes. It executes the adapter's main JavaScript file with additional logging options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnode node_modules/iobroker.adaptername/main.js --force --logs\n```\n\n----------------------------------------\n\nTITLE: Defining InternalSendToHostOptions Interface in TypeScript\nDESCRIPTION: This interface defines the structure for options when sending messages to hosts in ioBroker. It includes hostName (which can be null to send to all hosts), command, message, and an optional callback property.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalSendToHostOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalSendToHostOptions {\n    hostName: null | string;\n    command: string;\n    message: any;\n    callback?: MessageCallback | MessageCallbackInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe Log Method TypeScript Definition\nDESCRIPTION: Method definition for unsubscribing from log events for a specific ID. Takes an ID string and optional error callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nunsubscribeLog(id: string, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: ObjectsSettings Interface Definition\nDESCRIPTION: Defines the structure for the ObjectsSettings interface in TypeScript.  This interface is used to configure the object database, particularly in Redis-based setups. It includes properties for connection, logging, ACL, and change management.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Interface: ObjectsSettings\n */\n```\n\n----------------------------------------\n\nTITLE: Reading Object with Callback Pattern (JavaScript)\nDESCRIPTION: Example of using the getForeignObject method with callback to retrieve an object from the database. The callback provides error handling for when the object cannot be retrieved.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_49\n\nLANGUAGE: js\nCODE:\n```\nfunction (err, obj) {\n  if (err) adapter.log.error('Cannot get object: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: File Management Methods in TypeScript\nDESCRIPTION: Core file management methods including checking, deleting, and modifying file permissions.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncheckFile(id: string, name: string, options: CallOptions, flag: any, callback?: CheckFileCallback): Promise<undefined | void | CallOptions>\n\ndelFile(id: string, name: string, options: CallOptions, callback: ErrorCallback): void\n\nchmodFile(id: string, name: string, options: null | CallOptions, callback: ChownFileCallback): void\n```\n\n----------------------------------------\n\nTITLE: Validating User Password in JavaScript\nDESCRIPTION: Callback function that validates a user's password. Returns a boolean result indicating if the password is valid.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (result) {\n  if (result) adapter.log.debug('User is valid');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ACLObject Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of access control list objects in ioBroker. It includes owner information, group ownership, and numeric permission flags for objects, states, and files.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ACLObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ACLObject {\n    owner: string;\n    ownerGroup: string;\n    object: number;\n    state: number;\n    file: number;\n}\n```\n\n----------------------------------------\n\nTITLE: EnumCommon Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for EnumCommon that extends ObjectCommon. It includes properties for managing enum members and common object attributes like name, description, icon, and role. The interface is used to type enum objects in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/EnumCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface EnumCommon extends ObjectCommon {\n    color?: string;\n    custom?: undefined;\n    desc?: StringOrTranslated;\n    dontDelete?: true;\n    expert?: true;\n    icon?: string;\n    members?: string[];\n    name: StringOrTranslated;\n    role?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition that creates a Pattern type alias which can be either a string or array of strings. This is used in the validator module of the ioBroker JS Controller adapter for pattern matching functionality.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Pattern.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPattern: string | string[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devices in ioBroker Adapter API with TypeScript\nDESCRIPTION: Methods to retrieve device objects from an ioBroker adapter instance. Supports callback-based pattern with optional parameters for filtering.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\ngetDevices(callback): void\ngetDevices(options, callback): void\n```\n\n----------------------------------------\n\nTITLE: Redis Database Setup Command Example\nDESCRIPTION: Command line interaction example showing the setup process for configuring Redis as the database backend for ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nType of objects DB [file, redis], default [file]:\nHost of objects DB(file), default[127.0.0.1]:\nPort of objects DB(file), default[9001]:\nType of states DB [file, redis], default [file]: redis\nHost of states DB (redis), default[127.0.0.1]:\nPort of states DB (redis), default[6379]:\nData directory (file), default[../../../iobroker-data/]:\nHost name of this machine [FastPC]:\ncreating conf/iobroker.json\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for ScriptCommon Interface in TypeScript\nDESCRIPTION: This TypeScript definition outlines properties available for scripts in the ioBroker framework, detailing attributes such as script sources, engine specifications, and optional UI decorations. Dependencies include the ObjectCommon interface from which several properties are inherited. Developers can adjust parameters like 'engineType', 'enabled', and 'source' to configure script execution and appearance. Certain constraints apply, especially regarding the optionality of properties.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ScriptCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"interface ScriptCommon extends ObjectCommon {\\n    color?: string; // UI color attribute\\n    compiled?: string; // Compilation output\\n    custom?: undefined;\\n    debug: boolean;\\n    declarations?: string; // Generated declarations for TypeScript\\n    desc?: StringOrTranslated; // Object description\\n    dontDelete?: true; // Flag for deletion protection\\n    enabled: boolean;\\n    engine: string; // Executor instance id\\n    engineType: \\\"TypeScript/ts\\\" | \\\"Blockly\\\" | \\\"Rules\\\" | \\\"Javascript/js\\\"; // Script type\\n    expert?: true; // Expert mode visibility\\n    icon?: string;\\n    name: string; // Object name\\n    role?: string;\\n    source: string; // Script source code\\n    sourceHash?: string; // Change detection hash\\n    verbose: boolean;\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining InternalSetObjectOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the InternalSetObjectOptions interface with properties for id, obj, options, and callback. The obj property allows various object types with omitted '_id' and 'acl' fields.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalSetObjectOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalSetObjectOptions {\n    id: string;\n    options?: null | Record<string, any>;\n    obj: Omit<StateObject, \"_id\" | \"acl\"> & object | Omit<DeviceObject, \"_id\" | \"acl\"> & object | Omit<ChannelObject, \"_id\" | \"acl\"> & object | Omit<FolderObject, \"_id\" | \"acl\"> & object | Omit<MetaObject, \"_id\" | \"acl\"> & object | Omit<EnumObject, \"_id\" | \"acl\"> & object | Omit<HostObject, \"_id\" | \"acl\"> & object | Omit<AdapterObject, \"_id\" | \"acl\"> & object | Omit<InstanceObject, \"_id\" | \"acl\"> & object | Omit<UserObject, \"_id\" | \"acl\"> & object | Omit<GroupObject, \"_id\" | \"acl\"> & object | Omit<ScriptObject, \"_id\" | \"acl\"> & object | Omit<ChartObject, \"_id\" | \"acl\"> & object | Omit<ScheduleObject, \"_id\" | \"acl\"> & object | Omit<RepositoryObject, \"_id\" | \"acl\"> & object | Omit<OtherObject, \"_id\" | \"acl\"> & object | Omit<DesignObject, \"_id\" | \"acl\"> & object;\n    callback?: SetObjectCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StateValue Type Alias in ioBroker\nDESCRIPTION: This snippet defines a type alias called `StateValue` in TypeScript. It allows a state to hold a string, number, boolean, or null.  This type is used in ioBroker's state management to represent the possible values that a state can have.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/StateValue.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Type Alias: StateValue\n *\n * > **StateValue**: `string` | `number` | `boolean` | `null`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Mode Property in TypeScript\nDESCRIPTION: Defines a required 'mode' property to specify the running mode of the adapter instance, such as 'none', 'daemon', 'schedule', 'once', or 'extension'.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nmode: InstanceMode;\n```\n\n----------------------------------------\n\nTITLE: Changing File Access Rights in JavaScript\nDESCRIPTION: Function to update file access rights. Takes adapter name, file path, options object with mode, and a callback function. Returns processed files with new permissions.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.chmodFile('vis-2.0', '/main/vis-views.json', {mode: 0x644}, function (err, processed) {\n  if (err) adapter.log.error('Cannot read file: ' + err);\n  adapter.log.info('New files: ' + JSON.stringify(processed));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AdapterOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the AdapterOptions interface, which includes various properties and methods for configuring and controlling an ioBroker adapter. It specifies options like compact mode, instance numbers, event handlers, and operational flags.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AdapterOptions {\n    compact?: boolean;\n    compactInstance?: number;\n    config?: AdapterOptionsConfig;\n    dirname?: string;\n    error?: ErrorHandler;\n    fileChange?: FileChangeHandler;\n    install?: ReadyHandler;\n    instance?: number;\n    logTransporter?: boolean;\n    message?: MessageHandler;\n    name: string;\n    objectChange?: ObjectChangeHandler;\n    objects?: boolean;\n    ready?: ReadyHandler;\n    reconnect?: () => MaybePromise;\n    stateChange?: StateChangeHandler;\n    states?: boolean;\n    strictObjectChecks?: boolean;\n    subscribable?: boolean;\n    subscribesChange?: (subs: Record<string, object>) => void;\n    systemConfig?: boolean;\n    uiClientSubscribe?: UserInterfaceClientSubscribeHandler;\n    uiClientUnsubscribe?: UserInterfaceClientUnsubscribeHandler;\n    unload?: UnloadHandler;\n    useFormatDate?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Foreign State with Change Detection in TypeScript\nDESCRIPTION: This method sets a foreign state value with change detection. It has multiple overloads to handle different parameter combinations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_90\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetForeignStateChangedAsync(id: string, state: State | SettableState | StateValue, options?: unknown): SetStateChangedPromise\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetForeignStateChangedAsync(id: string, state: State | SettableState | StateValue, ack: boolean, options: unknown): SetStateChangedPromise\n```\n\n----------------------------------------\n\nTITLE: Defining FindObjectCallback Type Alias in TypeScript\nDESCRIPTION: Defines the FindObjectCallback type alias which represents a callback function used when finding objects in the ioBroker system. The callback takes optional error, id, and name parameters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/FindObjectCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**FindObjectCallback**: (`err`?, `id`?, `name`?) => `void`\n```\n\n----------------------------------------\n\nTITLE: Asynchronous User Subscription in Redis\nDESCRIPTION: Promise-based method for subscribing to user patterns with call configuration options. Provides a more modern async approach to event subscription.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribeUserAsync(pattern: string | string[], options: CallOptions): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Write File to Redis Object Storage\nDESCRIPTION: Methods for writing file data to a specific object in Redis with support for optional configuration and error handling. Provides both callback and promise-based implementations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nwriteFile(id: string, name: string, data: any, callback?: ErrorCallback): Promise<void>\nwriteFile(id: string, name: string, data: any, options?: WriteFileOptions, callback?: ErrorCallback): Promise<void>\nwriteFileAsync(id: string, name: string, data: any, options?: WriteFileOptions): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetObjectViewOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for internal object view options in ioBroker. Contains properties for design, search, params, options and an optional callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetObjectViewOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalGetObjectViewOptions {\n    callback?: GetObjectViewCallback<AnyObject>;\n    design: string;\n    options?: null | Record<string, any>;\n    params: GetObjectViewParams;\n    search: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalDelStateOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the required and optional properties for deleting states in ioBroker. It includes an ID string, optional callback for error handling, and optional configuration options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalDelStateOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalDelStateOptions {\n    id: string;\n    options?: null | Record<string, any>;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalDelObjectOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalDelObjectOptions interface with properties for id, options, and callback. It is used internally for delete object operations in the ioBroker.js-controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalDelObjectOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalDelObjectOptions {\n    id: string;\n    options?: null | DelObjectOptions;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Adapter Name Property in TypeScript\nDESCRIPTION: Defines a required 'name' property to specify the name of the adapter without the leading 'ioBroker.' prefix.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining InternalSendToOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the required and optional properties for internal message sending between ioBroker adapters. Properties include instanceName, command, message, callback, and options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalSendToOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalSendToOptions {\n    instanceName: string;\n    command: string;\n    message: any;\n    callback?: MessageCallback | MessageCallbackInfo;\n    options?: SendToOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Callback Function for File Processing\nDESCRIPTION: Callback function signature for processing files that returns a list of processed files with new groups.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, processedFiles) {\n    list of processed files with new groups\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to State Changes in Redis Database in TypeScript\nDESCRIPTION: Subscribes to state changes matching the given pattern in the Redis database.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nsubscribe(pattern: string, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalAddStateToEnumOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of options when adding states to enums in ioBroker. It includes properties for enum name, state location details, and callback handling.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalAddStateToEnumOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalAddStateToEnumOptions {\n    enumName: string;\n    addTo: string;\n    parentDevice: string;\n    parentChannel: string;\n    stateName: string;\n    options?: null | Record<string, any>;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Directory with Callback in TypeScript\nDESCRIPTION: Provides a synchronous readDir function to read the contents of a directory using a callback function. It allows error handling through a predefined callback interface. The method requires an object identifier, a directory name, optional settings, and a callback to handle the results.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadDir(id, name, options, callback): void\n```\n\n----------------------------------------\n\nTITLE: Defining MetaCommon Interface in TypeScript\nDESCRIPTION: Typescript interface specifying metadata properties for ioBroker objects, including optional attributes like color, description, icon, and name with type constraints\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/MetaCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MetaCommon extends ObjectCommon {\n  type: \"meta.user\" | \"meta.folder\";\n  custom?: undefined;\n  name: StringOrTranslated;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting State from Redis Database in TypeScript\nDESCRIPTION: Deletes a state from the Redis database. Returns a promise that resolves with the deleted state ID or undefined.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ndelState(id: string, callback?: DeleteStateCallback): Promise<undefined | string | void>\n```\n\n----------------------------------------\n\nTITLE: Reading Directory Asynchronously in TypeScript\nDESCRIPTION: Defines an asynchronous method readDirAsync to access directory contents, which returns a promise. It requires the directory identifier, name, and optional settings. Parameters include 'id' and 'name' for specifying which directory to read and an optional 'options' parameter for additional configurations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadDirAsync(id, name, options?): ReadDirPromise\n```\n\n----------------------------------------\n\nTITLE: Defining InternalCreateDeviceOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the structure for creating device objects in ioBroker. It includes properties for device name, common settings, native settings, options, and an optional callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalCreateDeviceOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalCreateDeviceOptions {\n    deviceName: string;\n    common?: Partial<DeviceCommon>;\n    _native?: null | Record<string, any>;\n    options: unknown;\n    callback?: SetObjectCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HostNative Interface in TypeScript\nDESCRIPTION: The HostNative interface organizes information related to system hardware, operating system, and process details in a structured data format. Required dependencies include TypeScript and appropriate typing modules. Key properties include 'hardware' for CPU details excluding 'times', 'os' for system attributes such as architecture and platform, and 'process' for environment specifics. The description of each property indicates where in the source file they are defined. Expected output would be correct typing for JavaScript objects conforming to this interface.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/HostNative.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface HostNative {\n  hardware: {\n    cpus: Omit<CpuInfo, 'times'> & Partial<Pick<CpuInfo, 'times'>>[];\n    networkInterfaces: Dict<NetworkInterfaceInfo[]>;\n    totalmem: number;\n  };\n  os: {\n    arch: string;\n    endianness: 'BE' | 'LE';\n    hostname: string;\n    platform: Platform;\n    release: string;\n    tmpdir: string;\n    type: string;\n  };\n  process: {\n    env: ProcessEnv;\n    title: string;\n    versions: ProcessVersions;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - InternalGetEnumOptions\nDESCRIPTION: Interface defining the structure for internal enumeration options in ioBroker.js-controller. Contains properties for enum string, optional callback function, and additional options record.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetEnumOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalGetEnumOptions {\n    _enum: string;\n    options?: null | Record<string, any>;\n    callback?: GetEnumCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CustomAdminColumn Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for custom admin columns in ioBroker. Properties include path (required), optional alignment settings, name configuration, object types specification, width settings, edit permissions, and column type definition.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/CustomAdminColumn.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface CustomAdminColumn {\n    path: string;\n    name?: StringOrTranslated;\n    objTypes?: ObjectType | ObjectType[];\n    width?: number;\n    edit?: boolean;\n    type?: CommonType;\n    align?: \"left\" | \"center\" | \"right\";\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe Method TypeScript Definition\nDESCRIPTION: Method definition for subscribing to state changes with pattern matching and optional user context. Takes a pattern string, asUser boolean flag, and optional error callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribe(pattern: string, asUser: boolean, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Releasing Primary Host in TypeScript\nDESCRIPTION: The releasePrimaryHost function ensures the current host is no longer marked as the primary host, returning a promise upon completion. This method is crucial for applications where roles must be dynamically reassigned.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nreleasePrimaryHost(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining UserCommon Interface in TypeScript\nDESCRIPTION: This code snippet defines the UserCommon interface, which extends ObjectCommon. It includes properties specific to user objects in ioBroker, such as name (username), password, and enabled status.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/UserCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserCommon extends ObjectCommon {\n    name: StringOrTranslated;\n    password: string;\n    enabled: boolean;\n    custom?: undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting State from Redis Database in TypeScript\nDESCRIPTION: Retrieves a state from the Redis database. Returns a promise that resolves with the state object or null if not found.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetState(id: string): GetStatePromise\n```\n\n----------------------------------------\n\nTITLE: Defining AliasDetails Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for AliasDetails, containing an optional source property of type AliasDetailsSource and a required targets array of AliasTargetEntry objects.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AliasDetails.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AliasDetails {\n    source?: AliasDetailsSource;\n    targets: AliasTargetEntry[];\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files Asynchronously in TypeScript\nDESCRIPTION: Asynchronously deletes a file specified by path for a given adapter. Takes optional parameters and returns a Promise.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_108\n\nLANGUAGE: TypeScript\nCODE:\n```\nunlinkAsync(adapterName: null | string, path: string, options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Database in TypeScript\nDESCRIPTION: Establishes a connection to the Redis database.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconnectDb(): void\n```\n\n----------------------------------------\n\nTITLE: Defining LogMessage Interface in TypeScript\nDESCRIPTION: This snippet defines the LogMessage interface with properties for unique ID, source instance, severity, timestamp, and message content. It is used to structure log messages in the ioBroker.js-controller system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/LogMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface LogMessage {\n    _id: number;\n    from: string;\n    severity: string;\n    ts: number;\n    message: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MessageCallbackObject Interface in TypeScript\nDESCRIPTION: This code snippet defines the MessageCallbackObject interface with properties for the callback function, timestamp, and an optional timer. It is used internally for message handling in the ioBroker.js-controller adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/MessageCallbackObject.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface MessageCallbackObject {\n    cb: MessageCallback;\n    time: number;\n    timer?: Timeout;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckStatesResult Interface in TypeScript\nDESCRIPTION: This snippet defines the CheckStatesResult interface with two properties: 'ids' as an array of strings, and 'objs' as an array of StateObject. It is located in the _Types.ts file of the adapter package.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/CheckStatesResult.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface CheckStatesResult {\n    ids: string[];\n    objs: StateObject[];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ioBroker Types in TypeScript\nDESCRIPTION: This example demonstrates how to import ioBroker type definitions directly in a TypeScript file using an import statement. This approach can be used as an alternative to the tsconfig.json method.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/types-public/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@iobroker/types';\n```\n\n----------------------------------------\n\nTITLE: Async File Operation Methods in TypeScript\nDESCRIPTION: Asynchronous file system operation method definitions including mkdir and importNodeModule functionality.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nmkdirAsync(adapterName: null | string, path: string, options?: unknown): Promise<void>;\n\nimportNodeModule(moduleName: string): Promise<unknown>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for HostCommon\nDESCRIPTION: TypeScript interface defining common properties for host objects. Extends ObjectCommon interface and includes properties for host identification, network addresses, platform information, and system configuration.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/HostCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HostCommon extends ObjectCommon {\n    address: string[];\n    cmd: string;\n    color?: string;\n    custom?: undefined;\n    desc?: StringOrTranslated;\n    dontDelete?: true;\n    expert?: true;\n    hostname: string;\n    icon?: string;\n    installedVersion: string;\n    name: string;\n    platform: \"Javascript/Node.js\";\n    role?: string;\n    title: string;\n    type: \"js-controller\";\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe User Method TypeScript Definition\nDESCRIPTION: Method definition for subscribing to user events with pattern matching. Takes a pattern string and optional error callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribeUser(pattern: string, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Renaming Objects in TypeScript\nDESCRIPTION: The rename function allows renaming an object in storage, supporting asynchronous or synchronous operation through a callback. It requires object identifiers for the current and new names, with optional settings for additional configurations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nrename(id, oldName, newName, options?, callback?): void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Device Deletion\nDESCRIPTION: TypeScript interface declaration for internal device deletion options in ioBroker. Contains a required deviceName property of type string and an optional callback property for error handling.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalDeleteDeviceOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalDeleteDeviceOptions {\n    deviceName: string;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DatabaseOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the DatabaseOptions interface with various properties for configuring database connections and behavior in ioBroker.js-controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/DatabaseOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DatabaseOptions {\n    type: \"file\" | \"jsonl\" | \"redis\";\n    // type: string;\n    host: string;\n    port: number;\n    connectTimeout: number;\n    writeFileInterval: number;\n    dataDir: string;\n    options: {\n        auth_pass: string;\n        db: number;\n        family: number;\n        retry_max_count: number;\n        retry_max_delay: number;\n        tls?: {\n            ca?: string;\n            cert?: string;\n            key?: string;\n            rejectUnauthorized?: boolean;\n        };\n    };\n    backup: DatabaseBackupOptions;\n    jsonlOptions: JsonlOptions;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectViewPromise Type in TypeScript\nDESCRIPTION: Type alias definition for GetObjectViewPromise that extends Promise with generic type parameter T extending AnyObject. Used for handling object view operations asynchronously in ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectViewPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectViewPromise<T>: Promise<NonNullCallbackReturnTypeOf<GetObjectViewCallback<T>>>\n```\n\n----------------------------------------\n\nTITLE: Error Callback Implementation for State Changes\nDESCRIPTION: Callback function that handles errors when setting state values and logs debug information about value changes.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, id, notChanged) {\n  if (err) adapter.log.error('Cannot set value for \"' + id + '\": ' + err);\n  if (!notChanged) adapter.log.debug('Value was changed');\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe Log Method TypeScript Definition\nDESCRIPTION: Method definition for subscribing to log events for a specific ID. Takes an ID string and optional error callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribeLog(id: string, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: autoConnect Property Definition\nDESCRIPTION: Describes the `autoConnect` property of the `ObjectsSettings` interface. This optional boolean property controls whether the object database automatically connects upon initialization. It's typically used to manage the database connection lifecycle.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **autoConnect**: `boolean`\n */\n```\n\n----------------------------------------\n\nTITLE: ChartObject Interface Definition\nDESCRIPTION: Defines the TypeScript interface for ChartObject which extends BaseObject. Includes properties for chart identification, access control, common configurations, and metadata.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ChartObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChartObject extends BaseObject {\n    _id: string;\n    acl?: ObjectACL;\n    common: ChartCommon;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type: \"chart\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: FileACL Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for file access control lists in ioBroker. Contains properties for owner, ownerGroup and Unix-style permissions.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/FileACL.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface FileACL {\n    owner: string;      // Full name of the user who owns this file\n    ownerGroup: string; // Full name of the group who owns this file\n    permissions: number; // Linux-type permissions defining access to this file\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StateChangeHandler Type Alias in TypeScript\nDESCRIPTION: The StateChangeHandler type alias is defined to represent a function that accepts an id and an object, returning either void or a Promise resolving to void. This is useful for handling state changes in a structured way, allowing for asynchronous operations if needed.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/StateChangeHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n> **StateChangeHandler**: (`id`, `obj`) => `void` | `Promise`<`void`>\n*/\n\nStateChangeHandler: (id: string, obj: State | null | undefined) => void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining the role property in ObjectCommon\nDESCRIPTION: This snippet defines the `role` property within the `ObjectCommon` interface.  The role defines the purpose and expected behavior of the object within the ioBroker system. This property is optional.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectCommon.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * role of the object\n */\nrole?: string;\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe User Method TypeScript Definition\nDESCRIPTION: Method definition for unsubscribing from user events with pattern matching. Takes a pattern string and optional error callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nunsubscribeUser(pattern: string, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Redis View Query Methods\nDESCRIPTION: Type-safe method signatures for querying object views with generic type parameters for design and search criteria.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetObjectView<Design extends string = string, Search extends string = string>(\n  design: Design,\n  search: Search,\n  params?: GetObjectViewParams,\n  options?: null | CallOptions\n): GetObjectViewPromise<InferGetObjectViewItemType<Design, Search>>;\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectListItem Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that extends GetObjectViewItem and includes properties for accessing object data, including id, value and doc fields. It uses generic type T that extends Object.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/GetObjectListItem.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetObjectListItem<T extends Object> {\n    doc: T;       // The same as value\n    id: T[\"_id\"]; // The ID of this object\n    value: T;     // A copy of the object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnloadHandler Type Alias in JavaScript\nDESCRIPTION: Defines a Type Alias for the UnloadHandler function, which takes a callback function as an argument and can return either void or a Promise that resolves to void. The callback must conform to the EmptyCallback type. This type alias is essential for ensuring type safety when working with unload functions in the ioBroker JS controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/UnloadHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype UnloadHandler = (callback: EmptyCallback) => void | Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: State Object Validation Method\nDESCRIPTION: Method to perform strict validation of state objects including existence checks, read-only logic, type checking and min/max validation.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Validator.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nperformStrictObjectCheck(id: string, state: SettableState): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Enabling Compact Mode in iobroker.json\nDESCRIPTION: JSON configuration for enabling compact mode in iobroker.json. This snippet shows how to set the compact mode flag to true in the system configuration section to reduce memory usage by running adapters in the same process.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"system\": {\n    ...\n    \"compact\":true\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: defaultNewAcl Property Definition\nDESCRIPTION: Describes the `defaultNewAcl` property of the `ObjectsSettings` interface. This optional property defines the default Access Control List (ACL) for new objects created in the database. It ensures consistent security policies for new database entries.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **defaultNewAcl**: [`ACLObject`](ACLObject.md)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining RepositoryJsonAdapterContent Interface in TypeScript\nDESCRIPTION: Interface describing the metadata structure for an ioBroker adapter in the repository, including properties like name, version, blocked versions, and optional configuration flags\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/RepositoryJsonAdapterContent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RepositoryJsonAdapterContent {\n  name: string;\n  version: string;\n  blockedVersions: string[];\n  packetName?: string;\n  unsafePerm?: boolean;\n  [other: string]: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalAdapterJsonConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalAdapterJsonConfig interface, which extends IoBrokerJson and includes additional properties for adapter configuration. It specifies various settings such as console output, instance number, and forcing disabled adapters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalAdapterJsonConfig.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalAdapterJsonConfig extends IoBrokerJson {\n    consoleOutput?: boolean;\n    forceIfDisabled?: boolean;\n    instance?: number;\n    isInstall?: boolean;\n    // ... other inherited properties\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectChangeHandler Type in TypeScript\nDESCRIPTION: Type definition for a callback function that handles object changes. Takes an ID string and an object parameter, and returns void or a Promise<void>.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ObjectChangeHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nObjectChangeHandler: (id: string, obj: Object | null | undefined) => void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Reading Files Asynchronously in TypeScript\nDESCRIPTION: Provides a readFileAsync function that reads file contents asynchronously, returning a promise. Essential parameters include the file's 'id' and 'name', along with optional 'options' for further customization.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadFile(id, name, options?): ReadFilePromise\n```\n\n----------------------------------------\n\nTITLE: Defining MessageHandler Type in TypeScript\nDESCRIPTION: TypeScript type alias defining a message handler function that accepts a Message object parameter and returns void or a Promise<void>. This handler is used for processing adapter messages in ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/MessageHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMessageHandler: (obj) => void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Activating Redis Sets in TypeScript\nDESCRIPTION: Method to activate the usage of Redis sets, returning a Promise that resolves when complete.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nactivateSets(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Command Permissions Object in JavaScript\nDESCRIPTION: Defines a static object that describes access rights for various commands in ioBroker. Each command is associated with a type and operation.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar commandsPermissions = {\n   getObject:          {type: 'object',    operation: 'read'},\n   getObjects:         {type: 'object',    operation: 'list'},\n   getObjectView:      {type: 'object',    operation: 'list'},\n   setObject:          {type: 'object',    operation: 'write'},\n   subscribeObjects:   {type: 'object',    operation: 'read'},\n   unsubscribeObjects: {type: 'object',    operation: 'read'},\n   subscribeFiles:     {type: 'object',    operation: 'read'},\n   unsubscribeFiles:   {type: 'object',    operation: 'read'},\n\n   getStates:          {type: 'state',     operation: 'list'},\n   getState:           {type: 'state',     operation: 'read'},\n   setState:           {type: 'state',     operation: 'write'},\n   getStateHistory:    {type: 'state',     operation: 'read'},\n   subscribe:          {type: 'state',     operation: 'read'},\n   unsubscribe:        {type: 'state',     operation: 'read'},\n   getVersion:         {type: '',          operation: ''},\n\n   httpGet:            {type: 'other',     operation: 'http'},\n   sendTo:             {type: 'other',     operation: 'sendto'},\n   sendToHost:         {type: 'other',     operation: 'sendto'},\n\n   readFile:           {type: 'file',      operation: 'read'},\n   readFile64:         {type: 'file',      operation: 'read'},\n   writeFile:          {type: 'file',      operation: 'write'},\n   writeFile64:        {type: 'file',      operation: 'write'},\n   unlink:             {type: 'file',      operation: 'delete'},\n   rename:             {type: 'file',      operation: 'write'},\n   mkdir:              {type: 'file',      operation: 'write'},\n   readDir:            {type: 'file',      operation: 'list'},\n   chmodFile:          {type: 'file',      operation: 'write'},\n   chownFile:          {type: 'file',      operation: 'write'},\n\n   authEnabled:        {type: '',          operation: ''},\n   disconnect:         {type: '',          operation: ''},\n   listPermissions:    {type: '',          operation: ''},\n   getUserPermissions: {type: 'object',    operation: 'read'}\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - PartialEnumObject\nDESCRIPTION: TypeScript interface definition for PartialEnumObject that extends Partial<Omit<EnumObject, 'common'>>. Contains optional properties for ID, ACL, common settings, enums, timestamps, and other metadata fields used in ioBroker enum objects.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialEnumObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialEnumObject extends Partial<Omit<EnumObject, \"common\">> {\n    _id?: string;\n    acl?: ObjectACL;\n    common?: Partial<EnumCommon>;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native?: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type?: \"enum\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interface OtherCommon in TypeScript\nDESCRIPTION: This TypeScript interface defines an object structure used within the ioBroker project. It extends the ObjectCommon interface and includes additional optional properties such as color, custom, and role. These properties can define UI elements, control configuration, or dictate behavior. Key inputs include optional strings for UI representation and flags for deletability and visibility. This structure is crucial for consistent object representation across different capabilities.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/OtherCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\ninterface OtherCommon extends ObjectCommon {\n  color?: string;\n  custom?: undefined;\n  desc?: StringOrTranslated;\n  dontDelete?: true;\n  expert?: true;\n  icon?: string;\n  name: StringOrTranslated;\n  role?: string;\n  [propName: string]: any;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining InternalCheckGroupOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for internal group checking options. It contains properties for user, group, optional callback function, and additional options for configuration.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalCheckGroupOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalCheckGroupOptions {\n    user: string;\n    group: string;\n    options?: null | Record<string, any>;\n    callback?: CheckGroupCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Settings in iobroker.json\nDESCRIPTION: JSON configuration for setting log level in iobroker.json. This snippet shows how to set the default log level for js-controller in the configuration file.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"log\": {\n    \"level\": \"info\",\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: hostname Property Definition\nDESCRIPTION: Describes the `hostname` property of the `ObjectsSettings` interface. This optional property specifies the hostname of the Redis server. It is used to determine the server to connect to for database operations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **hostname**: `string`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining GetHistoryResult Type in TypeScript\nDESCRIPTION: Type alias definition that combines State interface with an object array to represent historical state data results.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetHistoryResult.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nGetHistoryResult: [State] & object[]\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectListCallback Generic Type in TypeScript\nDESCRIPTION: Type definition for a callback function that handles object list retrieval results. Takes generic type T extending Object and accepts optional error and result parameters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectListCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectListCallback<T>: (err?: Error | null, result?: { rows?: GetObjectListItem<T>[] }) => void\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Unsubscription from Foreign Objects in TypeScript\nDESCRIPTION: Asynchronously unsubscribes from changes to objects that may not belong to this adapter. Takes a pattern and optional options, returns a Promise.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_111\n\nLANGUAGE: TypeScript\nCODE:\n```\nunsubscribeForeignObjectsAsync(pattern: string | string[], options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Redis Object Pattern Search Methods\nDESCRIPTION: Method signatures for searching objects using pattern matching, supporting both async/await and callback patterns.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetObjectsByPattern(pattern: string, options): Promise<void | AnyObject[]>;\n\ngetObjectsByPattern(pattern: string, options, callback): void;\n```\n\n----------------------------------------\n\nTITLE: Deprecated Device Creation Methods in TypeScript\nDESCRIPTION: Set of deprecated methods for creating device objects in ioBroker. Includes multiple overloaded signatures with varying parameters. Replaced by extendObject method.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDevice(deviceName: string, callback?: SetObjectCallback): void;\ncreateDevice(deviceName: string, common: Partial<DeviceCommon>, callback?: SetObjectCallback): void;\ncreateDevice(deviceName: string, common: Partial<DeviceCommon>, native: Record<string, any>, callback?: SetObjectCallback): void;\ncreateDevice(deviceName: string, common: Partial<DeviceCommon>, native: Record<string, any>, options: unknown, callback?: SetObjectCallback): void;\n```\n\n----------------------------------------\n\nTITLE: Defining LogLevel Type Alias in TypeScript\nDESCRIPTION: Defines a union type for logging levels that can be one of: 'silly', 'debug', 'info', 'warn', or 'error'. This type is used to ensure type safety when specifying log levels in the ioBroker.js-controller system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/LogLevel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype LogLevel = \"silly\" | \"debug\" | \"info\" | \"warn\" | \"error\"\n```\n\n----------------------------------------\n\nTITLE: Defining ClientHandler Interface Properties in TypeScript\nDESCRIPTION: Interface definition specifying required properties for client handling including session ID (sid), subscriber name (from), and client type (type). Used in the user interface messaging controller of ioBroker.js-controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ClientHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ClientHandler {\n    sid: string;    // The session id of the client connection\n    from: string;   // Name of the subscriber\n    type: string;   // Individual type which can be specified\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetUserGroupsOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetUserGroupsOptions interface, which includes a user property of type 'system.user.${string}' and allows for additional string-keyed properties of any type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/GetUserGroupsOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetUserGroupsOptions {\n    [other: string]: any;\n    user: `system.user.${string}`;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing With Async Pattern in TypeScript\nDESCRIPTION: The subscribeAsync function enables pattern-based subscriptions through an asynchronous promise mechanism, offering flexibility in listening to and handling specific patterns.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nsubscribeAsync(pattern, options?): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Logging in iobroker.json\nDESCRIPTION: JSON configuration for syslog-based logging in iobroker.json. This snippet shows the detailed configuration options for sending logs to a syslog server, including host, protocol, and facility settings.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"log\": {\n    ...\n    \"transport\": {\n      ...\n      \"syslog1\": {\n        \"type\": \"syslog\",\n        \"enabled\": false,\n        \"host\": \"localhost\",\n        \"host_comment\": \"The host running syslogd, defaults to localhost.\",\n        \"port_comment\": \"The port on the host that syslog is running on, defaults to syslogd's default port(514/UDP).\",\n        \"protocol\": \"udp4\",\n        \"protocol_comment\": \"The network protocol to log over (e.g. tcp4, udp4, unix, unix-connect, etc).\",\n        \"path_comment\": \"The path to the syslog dgram socket (i.e. /dev/log or /var/run/syslog for OS X).\",\n        \"facility_comment\": \"Syslog facility to use (Default: local0).\",\n        \"localhost\": \"iobroker\",\n        \"localhost_comment\": \"Host to indicate that log messages are coming from (Default: localhost).\",\n        \"sysLogType_comment\": \"The type of the syslog protocol to use (Default: BSD).\",\n        \"app_name_comment\": \"The name of the application (Default: process.title).\",\n        \"eol_comment\": \"The end of line character to be added to the end of the message (Default: Message without modifications).\"\n      }\n    }\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - PartialGroupObject\nDESCRIPTION: Defines a TypeScript interface for partial group objects in ioBroker. The interface extends Partial<Omit<GroupObject, 'common'>> and includes properties for object identification, access control, common settings, and metadata.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialGroupObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialGroupObject extends Partial<Omit<GroupObject, 'common'>> {\n    _id?: `system.group.${string}`;\n    acl?: ObjectACL;\n    common?: Partial<GroupCommon>;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native?: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type?: \"group\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetStateCallback Type in TypeScript\nDESCRIPTION: Defines a callback function type for state setting operations that accepts optional error and ID parameters and returns void. Used for handling state changes in ioBroker adapters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/SetStateCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSetStateCallback: (err?: Error | null, id?: string) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Callback Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias named Callback that represents a function which accepts variable arguments and returns either void or a Promise<void>. This allows for both synchronous and asynchronous callback implementations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Callback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCallback: (...args: any[]) => void | Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Unsubscription from Objects in Current Instance in TypeScript\nDESCRIPTION: Asynchronously unsubscribes from object changes in the current instance. Takes a pattern and optional options, returns a Promise.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_115\n\nLANGUAGE: TypeScript\nCODE:\n```\nunsubscribeObjectsAsync(pattern: string, options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectType Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition specifying all valid object types in ioBroker system. This type alias is used to enforce type safety when working with ioBroker objects.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ObjectType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ObjectType = \"state\" | \"channel\" | \"device\" | \"folder\" | \"enum\" | \"adapter\" | \"config\" | \"group\" | \"host\" | \"instance\" | \"meta\" | \"script\" | \"user\" | \"chart\" | \"schedule\" | \"design\"\n```\n\n----------------------------------------\n\nTITLE: Defining the name property in ObjectCommon\nDESCRIPTION: This snippet defines the `name` property within the `ObjectCommon` interface. The `name` property holds the name of the object, which can be either a simple string or an object containing translations for different languages. It's a mandatory property.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectCommon.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * The name of this object as a simple string or an object with translations\n */\nname: StringOrTranslated;\n```\n\n----------------------------------------\n\nTITLE: Object Structure Example - Result\nDESCRIPTION: Example showing the resulting object structure after extension, with updated properties and removed null values.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  common: {\n    desc: 'New description',\n    min: 0,\n    max: 100\n  },\n  type: 'state',\n  native: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DelObjectOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for DelObjectOptions which specifies options when deleting objects in ioBroker. It includes a recursive property that determines whether child objects should also be deleted, and allows for additional properties through indexable signature.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/DelObjectOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DelObjectOptions {\n    recursive?: boolean;\n    [other: string]: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetEnumsCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles enum retrieval results. The callback accepts an optional error parameter and an optional result parameter, returning void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetEnumsCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetEnumsCallback: (err?: Error | null, result?) => void\n```\n\n----------------------------------------\n\nTITLE: ID Validation Method\nDESCRIPTION: Method to validate IDs for ioBroker adapters with support for foreign IDs and custom validation options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Validator.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvalidateId(id: any, isForeignId: boolean, options?: null | ValidateIdOptions): asserts id is string\n```\n\n----------------------------------------\n\nTITLE: Defining GetHistoryCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles history data retrieval results. The callback accepts an error parameter, optional result object, step number, and session ID.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetHistoryCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetHistoryCallback: (err: Error | null, result?: GetHistoryResult, step?: number, sessionId?: number) => void\n```\n\n----------------------------------------\n\nTITLE: Date Formatting in TypeScript\nDESCRIPTION: Method overloads for formatting dates with optional duration and format parameters. Converts date objects or timestamps to formatted strings.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nformatDate(dateObj: string | number | Date, format?: string): string\nformatDate(dateObj: string | number | Date, isDuration: string | boolean, format?: string): string\n```\n\n----------------------------------------\n\nTITLE: Setting Write File Interval for Objects Database\nDESCRIPTION: JSON configuration for customizing the persistence interval of file databases in milliseconds. Available from js-controller 3.0 onwards.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"objects\": {\n  ...\n  \"writeFileInterval\": 60000\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - PartialFolderObject Properties\nDESCRIPTION: Interface definition specifying optional properties for a partial folder object including ID, ACL, common attributes, enums, metadata and type information.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialFolderObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialFolderObject extends Partial<Omit<FolderObject, \"common\">> {\n    _id?: string;\n    acl?: ObjectACL;\n    common?: Partial<OtherCommon>;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native?: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type?: \"folder\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TimeoutCallback Type Alias in TypeScript\nDESCRIPTION: Defines a type alias `TimeoutCallback` which represents a function that takes a variable number of arguments of any type and returns void. This type is used for defining callback functions that are executed when a timeout occurs.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/TimeoutCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * > **TimeoutCallback**: (...`args`) => `void`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining CheckFileCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles file checking results. Takes a boolean indicating check failure status, optional call options, and optional file existence options. Returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/CheckFileCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nCheckFileCallback: (checkFailed, options?, fileOptions?) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Object Operation Permissions Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines access control properties for ioBroker objects. It includes boolean flags for list, read, write, create, and delete operations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectOperationPermissions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectOperationPermissions {\n    list: boolean;    // Whether a user may enumerate objects of this type\n    read: boolean;    // Whether a user may read objects of this type\n    write: boolean;   // Whether a user may write objects of this type\n    create: boolean;  // Whether a user may create objects of this type\n    delete: boolean;  // Whether a user may delete objects of this type\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FolderObject Interface in TypeScript\nDESCRIPTION: Interface definition for FolderObject that extends BaseObject. This interface represents folder objects in ioBroker with a specific 'folder' type and required properties. It includes inheritance of base properties from BaseObject and overrides the type and common properties.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/FolderObject.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FolderObject extends BaseObject {\n    _id: string;\n    acl?: ObjectACL;\n    common: OtherCommon;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type: \"folder\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalFormatDateOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalFormatDateOptions interface with three properties: dateObj for the date to be formatted, isDuration to indicate if it's a duration, and an optional _format string.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalFormatDateOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalFormatDateOptions {\n    dateObj: string | number | Date;\n    isDuration: boolean;\n    _format?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Warn Log Method in TypeScript\nDESCRIPTION: Method to log messages with warning level severity. Takes a message string as parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Log.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nwarn(msg: string): void\n```\n\n----------------------------------------\n\nTITLE: ID Fixing Utility\nDESCRIPTION: Utility method to add namespace to IDs if missing and handle ID object to string conversion.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Validator.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfixId(id: string | IdObject, isPattern: boolean = false): string\n```\n\n----------------------------------------\n\nTITLE: Defining GetEnumCallback Type Alias in TypeScript\nDESCRIPTION: Type definition for a callback function that handles enum operations. The callback accepts optional error, enums record, and requested enum parameters and returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetEnumCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetEnumCallback: (err?: Error | null, enums?: Record<string, EnumObject>, requestedEnum?: string) => void\n```\n\n----------------------------------------\n\nTITLE: Redis Object Query Method Signatures\nDESCRIPTION: TypeScript interface declarations for various object query methods including getObject, getObjects, getObjectView with support for both callback and promise-based patterns.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetObjects(keys: string[], options?): Promise<AnyObject[]>;\n\ngetObjects(keys: string[], callback): void;\n\ngetObjects(keys: string[], options, callback, dontModify?): void;\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Adapter Main File in JSON\nDESCRIPTION: Shows how to configure the main file for a TypeScript adapter in the package.json file, allowing direct execution of TypeScript files without compilation.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"src/main.ts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IdObject Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for IdObject with optional properties for device, channel and state identifiers. Used in ioBroker.js-controller to structure object identifiers.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/IdObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IdObject {\n    device?: string;\n    channel?: string;\n    state?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CheckGroupCallback Type Alias in TypeScript\nDESCRIPTION: This code defines a type alias for a callback function that receives a boolean result parameter and returns void. It is used for handling the result of checking group operations in the ioBroker.js-controller adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/CheckGroupCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**CheckGroupCallback**: (`result`) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Dependencies type alias as an array of objects or strings, representing the format for local and global dependencies in the ioBroker.js-controller project.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nDependencies: object[] | string[]\n```\n\n----------------------------------------\n\nTITLE: Defining Database Backup Configuration Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines configuration options for database backups including disabled flag, number of backup files to retain, retention period in hours, backup frequency in minutes, and backup storage path.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/DatabaseBackupOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DatabaseBackupOptions {\n    disabled: boolean;\n    files: number;      // Minimal number of backup files\n    hours: number;      // Retention period in hours\n    period: number;     // Backup frequency in minutes\n    path: string;       // Absolute path to backup directory\n    \"// files\": string;\n    \"// hours\": string;\n    \"// period\": string;\n    \"// path\": string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Quality Enumeration in TypeScript\nDESCRIPTION: Enumeration defining state quality values for ioBroker states. It maps numeric values to specific quality states including good/bad status, connection problems, device errors, and substitute values.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/enumerations/STATE_QUALITY.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum STATE_QUALITY {\n    GOOD = 0,                            // The default value for a state\n    BAD = 1,                             // General problem\n    CONNECTION_PROBLEM = 2,              // The instance cannot establish a connection\n    SUBSTITUTE_FROM_CONTROLLER = 16,     // Substitute value from controller. Do not set this in adapters\n    SUBSTITUTE_INITIAL_VALUE = 32,       // Quality for default values\n    SUBSTITUTE_DEVICE_INSTANCE_VALUE = 64, // Substitute value from instance or device\n    SUBSTITUTE_SENSOR_VALUE = 128,       // Substitute value from a sensor\n    GENERAL_INSTANCE_PROBLEM = 17,       // General problem by instance\n    GENERAL_DEVICE_PROBLEM = 65,         // General problem by device\n    GENERAL_SENSOR_PROBLEM = 129,        // General problem by sensor\n    INSTANCE_NOT_CONNECTED = 18,         // The instance is not connected\n    DEVICE_NOT_CONNECTED = 66,           // The device is not connected\n    SENSOR_NOT_CONNECTED = 130,          // The sensor is not connected\n    DEVICE_ERROR_REPORT = 68,            // The device has reported an error\n    SENSOR_ERROR_REPORT = 132            // The sensor has reported an error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GroupObject Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for group objects in ioBroker. Extends BaseObject and defines the structure for group configuration including ID format, common properties, and type specification.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/GroupObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GroupObject extends BaseObject {\n    _id: `system.group.${string}`;\n    type: \"group\";\n    common: GroupCommon;\n    native: Record<string, any>;\n    acl?: ObjectACL;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    ts?: number;\n    user?: string;\n    nonEdit?: NonEditable;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetStateChangedResult Interface in TypeScript\nDESCRIPTION: Interface that represents the outcome of a state change operation, providing details about the state modification\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SetStateChangedResult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SetStateChangedResult {\n  id: string;\n  notChanged: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Object Management Methods in TypeScript\nDESCRIPTION: Methods for managing objects in the Redis database including deletion and permission modifications.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndelObject(id: string, callback: ErrorCallback): void\ndelObject(id: string, options: null | CallOptions, callback: ErrorCallback): void\ndelObject(id: string, options?: null | CallOptions): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Type Alias in TypeScript\nDESCRIPTION: This snippet defines the Channel type alias, which can be either 'script.js.common', 'script.js.global', or a string followed by a number and '.info'.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Channel.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Channel = `script.js.${\"common\" | \"global\"}` | `${string}.${number}.info`\n```\n\n----------------------------------------\n\nTITLE: Defining BackupOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the BackupOptions interface with properties for configuring backup settings. It includes options for disabling backups, specifying minimum file count, backup frequency in hours and minutes, and the backup path.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/BackupOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface BackupOptions {\n    disabled: boolean;\n    files: number;\n    hours: number;\n    path: string;\n    period: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OptionalCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition that creates an OptionalCallback type alias which can be either undefined or a Callback type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/OptionalCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nOptionalCallback: undefined | Callback\n```\n\n----------------------------------------\n\nTITLE: Subscribe to Primary Host Events in Redis\nDESCRIPTION: Async method to subscribe and listen for expired events related to the primary host. Used for tracking host-related status and expirations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribePrimaryHost(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Building ioBroker.js-controller Project\nDESCRIPTION: Command to build the project using npm run build, which utilizes lerna to build all packages in the correct order.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining ValidateIdOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the ValidateIdOptions interface with two optional properties: maintenance and user. The maintenance property is a boolean used for accessing invalid IDs in maintenance mode, while the user property is a string used for checking access rights.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ValidateIdOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ValidateIdOptions {\n    maintenance?: boolean;\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AtLeastOne Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named AtLeastOne that takes three type parameters: T, Req, and Opt. It creates a type that requires at least one property from Req to be present, while all other properties are optional.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/AtLeastOne.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AtLeastOne<T, Req = { [K in keyof T]-?: T[K] }, Opt = { [K in keyof T]?: T[K] }> = { [K in keyof Req]: Omit<Opt, K> & { [P in K]: Req[P] } }[keyof Req];\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Type PartialObjectWorker in TypeScript\nDESCRIPTION: A TypeScript type alias that defines PartialObjectWorker<T> as a conditional type. It checks if T extends AnyObject, and if so, returns AnyPartialObject & object, otherwise it returns never.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/PartialObjectWorker.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPartialObjectWorker<T>: T extends AnyObject ? AnyPartialObject & object : never\n```\n\n----------------------------------------\n\nTITLE: Defining ChownFileResult Interface in TypeScript\nDESCRIPTION: This snippet defines the ChownFileResult interface, which contains properties for file metadata, access rights, and timestamps returned by the chownFile operation. It includes the path, file name, directory status, file system stats, access control list, and creation/modification dates.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ChownFileResult.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ChownFileResult {\n    path: string;\n    file: string;\n    stats: Stats;\n    isDir: boolean;\n    acl: FileACL;\n    modifiedAt: number;\n    createdAt: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Objects Asynchronously in TypeScript\nDESCRIPTION: The rmAsync method deletes an object asynchronously, returning a promise that resolves with either void or a list of results. It needs the object's id and name, along with options for advanced settings.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nrmAsync(id, name, options): Promise<void | RmResult[]>\n```\n\n----------------------------------------\n\nTITLE: AdminUi Interface Definition in TypeScript\nDESCRIPTION: Defines the AdminUi interface which specifies UI types for the admin interface. It includes required config property and optional custom and tab properties, each specifying the rendering technology to be used.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdminUi.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface AdminUi {\n    config: \"json\" | \"none\" | \"materialize\" | \"html\";\n    custom?: \"json\";\n    tab?: \"json\" | \"materialize\" | \"html\";\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading OS Packages via Controller in TypeScript\nDESCRIPTION: Shows how to upgrade operating system packages using the controller's upgradeOsPackages method. It specifies the package name, version, and whether to restart the controller after the upgrade.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsendToHostAsync('system.host.test', 'upgradeOsPackages', {\n    packages: [{\n      // the package name\n      name: 'google-chrome-stable',\n      // the optional version\n      version: '120.0.6099.199-1' \n    }],\n    // if the controller should be restarted afterwards\n    restart: true,\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - PartialDeviceObject\nDESCRIPTION: Interface definition for a partial device object that extends Partial<Omit<DeviceObject, 'common'>>. It includes properties for object identification, access control, common settings, enumerations, native data, timestamps and user information.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialDeviceObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialDeviceObject extends Partial<Omit<DeviceObject, \"common\">> {\n    _id?: string;\n    acl?: ObjectACL;\n    common?: Partial<DeviceCommon>;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native?: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type?: \"device\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MaybePromise Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias called MaybePromise that can be either a Promise<void> or void. This type is useful for functions that may execute synchronously or asynchronously.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/MaybePromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MaybePromise = Promise<void> | void\n```\n\n----------------------------------------\n\nTITLE: Removing Object with Callback in TypeScript\nDESCRIPTION: The rm function removes an object from storage using a callback to handle completion. It takes the object's id, name, options for extra parameters, and a callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nrm(id, name, options, callback): void\n```\n\n----------------------------------------\n\nTITLE: MessageRule Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of message rules for ioBroker notifications. Includes properties for title, text, severity level, buttons, conditions, and optional link elements.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/MessageRule.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MessageRule {\n    title: Translated;\n    text: Translated;\n    link?: string;\n    linkText?: Translated;\n    level: \"info\" | \"warn\" | \"error\";\n    buttons?: (\"agree\" | \"cancel\" | \"ok\")[];\n    condition: {\n        operand: \"and\" | \"or\";\n        rules: string[];\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Welcome Screen Type Definition\nDESCRIPTION: TypeScript interface property definition for optional welcomeScreen array that was used to define pages shown on web index page. This property is deprecated in favor of localLinks.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InstanceCommon.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional welcomeScreen: WelcomeScreenEntry[]\n```\n\n----------------------------------------\n\nTITLE: GetObjectViewParams Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining optional parameters for adapter.getObjectView method. Includes startkey and endkey for defining the range of objects to return, and include_docs flag to specify if full documents should be included.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/GetObjectViewParams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GetObjectViewParams {\n    startkey?: string;     // First id to include in the return list\n    endkey?: string;       // Last id to include in the return list\n    include_docs?: boolean; // Whether docs should be included in the return list\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe Method TypeScript Definition\nDESCRIPTION: Method definition for unsubscribing from state changes. Has two overloads - one with asUser flag and one without. Takes pattern string and optional callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nunsubscribe(pattern: string, asUser: boolean, callback?: ErrorCallback): Promise<void>\nunsubscribe(pattern: string, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Object Type Alias in TypeScript\nDESCRIPTION: This snippet defines the Object type alias which extends AnyObject and the standard object type. It includes 'common' and 'native' properties that are Records with string keys and any values.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Object.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Object = AnyObject & object;\n\ntype declaration {\n  common: Record<string, any>;\n  native: Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DbStatus Interface in TypeScript\nDESCRIPTION: This code snippet defines the DbStatus interface with two properties: 'server' of type boolean and 'type' of type string. The interface is likely used to represent the status of a database server in the ioBroker.js-controller project.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/DbStatus.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface DbStatus {\n    type: string;\n    server: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for PartialRepositoryObject\nDESCRIPTION: Defines a TypeScript interface for repository configuration objects. Includes properties for object ID, access control, common settings, enums, native configuration, and metadata fields like timestamps and user information.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialRepositoryObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialRepositoryObject extends Partial<Omit<RepositoryObject, \"common\">> {\n    _id?: \"system.repositories\";\n    acl?: ObjectACL;\n    common?: Partial<RepositoryCommon>;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native?: {\n        oldRepositories?: {\n            [repoName: string]: RepositoryInformation\n        };\n        repositories: {\n            [repoName: string]: RepositoryInformation\n        };\n    };\n    nonEdit?: NonEditable;\n    ts?: number;\n    type?: \"config\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Language Type Alias in TypeScript\nDESCRIPTION: Type definition that specifies the supported language codes in ioBroker system. Includes common languages like English, German, Russian, Portuguese, Dutch, French, Italian, Spanish, Polish, Ukrainian and Chinese (Simplified).\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Languages.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Languages = \"en\" | \"de\" | \"ru\" | \"pt\" | \"nl\" | \"fr\" | \"it\" | \"es\" | \"pl\" | \"uk\" | \"zh-cn\"\n```\n\n----------------------------------------\n\nTITLE: Defining EnumList Type Alias in TypeScript\nDESCRIPTION: Type definition that specifies EnumList as either a single string or an array of strings, used for handling enumerations in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/EnumList.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nEnumList: string | string[]\n```\n\n----------------------------------------\n\nTITLE: Defining addChannelToEnum Method in TypeScript\nDESCRIPTION: This method adds a channel to an enum in ioBroker. It has two overloads with different parameter lists.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\naddChannelToEnum(enumName: string, addTo: string, parentDevice: string, channelName: string, callback?: ErrorCallback): void;\n\naddChannelToEnum(enumName: string, addTo: string, parentDevice: string, channelName: string, options: unknown, callback?: ErrorCallback): void;\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetStateOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for internal state retrieval options in ioBroker. Includes required ID property, optional callback function, and optional additional configuration options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetStateOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalGetStateOptions {\n    id: string;\n    options?: null | Record<string, any>;\n    callback?: GetStateCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional No Config Flag in TypeScript\nDESCRIPTION: Defines an optional 'noConfig' boolean property. When true, no configuration dialog will be shown for the adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nnoConfig?: true;\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectsPromiseTyped Generic Type in TypeScript\nDESCRIPTION: TypeScript type alias definition for GetObjectsPromiseTyped that represents a Promise returning non-null objects. The type is generic, accepting a type parameter T that extends ObjectType, and returns a Promise containing the non-null callback return type of GetObjectsCallbackTyped.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectsPromiseTyped.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectsPromiseTyped<T>: Promise<NonNullCallbackReturnTypeOf<GetObjectsCallbackTyped<T>>>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for PartialChannelObject\nDESCRIPTION: Interface definition that extends Partial<Omit<ChannelObject, 'common'>> and defines properties for channel objects. Includes optional properties for ID, ACL, common settings, enums, timestamps, and other metadata.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialChannelObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialChannelObject extends Partial<Omit<ChannelObject, \"common\">> {\n    _id?: string;\n    acl?: ObjectACL;\n    common?: Partial<ChannelCommon>;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native?: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type?: \"channel\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AutoUpgradePolicy Type Alias in TypeScript\nDESCRIPTION: Defines a string union type for auto-upgrade policies in ioBroker, allowing for none, patch, minor, or major version upgrade settings.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/AutoUpgradePolicy.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype AutoUpgradePolicy = \"none\" | \"patch\" | \"minor\" | \"major\"\n```\n\n----------------------------------------\n\nTITLE: Defining InternalDeleteChannelOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the required properties for deleting a channel in an ioBroker adapter. It requires a parent device name, channel name, and accepts an optional error callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalDeleteChannelOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalDeleteChannelOptions {\n    parentDevice: string;\n    channelName: string;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetStatePromise Type Alias in TypeScript\nDESCRIPTION: Type definition that creates an alias GetStatePromise representing a Promise that resolves with the return type of GetStateCallback\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetStatePromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetStatePromise: Promise<CallbackReturnTypeOf<GetStateCallback>>\n```\n\n----------------------------------------\n\nTITLE: HeartbeatTimer Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface defining the HeartbeatTimer structure with two properties: a timer of type Timeout and a heartbeat interval of type number. This interface is used for managing periodic heartbeat functionality in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/HeartbeatTimer.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HeartbeatTimer {\n    timer: Timeout;\n    heartbeat: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Protocol Version in TypeScript\nDESCRIPTION: Defines the setProtocolVersion method for configuring protocol versions on the database, returning a void promise. It requires a version identifier in either string or numeric form.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetProtocolVersion(version): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetObjectsOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for InternalGetObjectsOptions used in ioBroker JS Controller adapter. It specifies the structure for object retrieval options including pattern matching, type filtering, enum lists, general options and callback handling.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetObjectsOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalGetObjectsOptions {\n    pattern: Pattern;\n    type?: string;\n    enums?: EnumList;\n    options?: null | Record<string, any>;\n    callback?: GetObjectsCallbackTyped<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Log Transporter Flag in TypeScript\nDESCRIPTION: Defines an optional 'logTransporter' boolean property to indicate if the adapter receives logs from other hosts and adapters for storage or processing.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nlogTransporter?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Error Handling in State Retrieval\nDESCRIPTION: Example showing error handling when retrieving state values through getForeignState callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, state) {\n  if (err) adapter.log.error('Cannot read value: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Interface definition for SendToUserInterfaceClientOptions\nDESCRIPTION: Defines the `SendToUserInterfaceClientOptions` interface. This interface specifies the structure for sending data to a user interface client in ioBroker. It includes optional `clientId` for specific client targeting and a `data` property for the data to be sent.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SendToUserInterfaceClientOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * # Interface: SendToUserInterfaceClientOptions\n */\n```\n\n----------------------------------------\n\nTITLE: Declaring extendObjectAsync TypeScript Method\nDESCRIPTION: Async method signature for extending objects with promises instead of callbacks.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nextendObjectAsync(\n  id: string,\n  obj: Partial<AnyObject>,\n  options?: ExtendObjectOptions\n): Promise<undefined | object>\n```\n\n----------------------------------------\n\nTITLE: Defining CheckFileRightsCallback Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles the result of file rights checking operations. The function accepts an error parameter, options as a record of string keys to any values, and an optional additional parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/CheckFileRightsCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **CheckFileRightsCallback**: (`err`, `options`, `opt`?) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining EnumObject Interface in TypeScript\nDESCRIPTION: Defines the EnumObject interface which extends BaseObject. It includes properties for ID, common attributes, ACL, enums, and other metadata specific to enum objects in ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/EnumObject.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface EnumObject extends BaseObject {\n    _id: string;\n    acl?: ObjectACL;\n    common: EnumCommon;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type: \"enum\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectCallback Type Alias in TypeScript\nDESCRIPTION: This code defines a generic type alias for a callback function used to retrieve objects in ioBroker. It specifies the structure of the callback, including error handling and the retrieved object type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype GetObjectCallback<T extends string = string> = (err?: Error | null, obj?: ObjectIdToObjectType<T> | null) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining SecondParameterOf Utility Type in TypeScript\nDESCRIPTION: A type alias that extracts the type of the second parameter from a function type T. It uses conditional types to check if T extends a function type with at least two parameters, and if so, returns the type of the second parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/SecondParameterOf.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSecondParameterOf<T>: T extends (arg0, arg1, ...args) => any ? R : never\n```\n\n----------------------------------------\n\nTITLE: Defining MessageCallback Type Alias in TypeScript for ioBroker\nDESCRIPTION: A TypeScript type definition for a callback function that handles message responses in ioBroker.js-controller. The function accepts an optional response parameter which can be either a Message object or an Error, providing backward compatibility.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/MessageCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**MessageCallback**: (`response`?) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetPortOptions Interface in TypeScript\nDESCRIPTION: Interface definition for port configuration options in ioBroker JS Controller. Contains properties for port number, optional host, and an optional callback function that receives a port number parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetPortOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalGetPortOptions {\n    port: number;\n    host?: string;\n    callback?: (port: number) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Callback Function for getStates in ioBroker (JavaScript)\nDESCRIPTION: The callback function signature for the getStates method, which receives an error object and states object. The states object contains state IDs as keys and state values with acknowledgment flags.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, states) {}, where states is an object like {\"ID1\": {\"val\": 1, \"ack\": true}, \"ID2\": {\"val\": 2, \"ack\": false}, ...}\n```\n\n----------------------------------------\n\nTITLE: Handling Callback Response in setObject Method\nDESCRIPTION: This code snippet demonstrates the callback pattern for handling responses from the setObject method. The callback receives error and object parameters, and logs an error if one occurs.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_93\n\nLANGUAGE: js\nCODE:\n```\nfunction (err, obj) {\n  // obj is {id: id}\n  if (err) adapter.log.error('Cannot write object: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalSetStateOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for internal state setting options in ioBroker. It includes properties for ID, state value, acknowledgment flag, options object, and callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalSetStateOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalSetStateOptions {\n    id: string | IdObject;\n    state: SettableState | StateValue;\n    ack?: boolean;\n    options?: null | Partial<GetUserGroupsOptions>;\n    callback?: SetStateCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserInterfaceSubscribeInfo Interface in TypeScript\nDESCRIPTION: This code snippet defines the UserInterfaceSubscribeInfo interface with two properties: clientId for client identification and message for subscription details.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/UserInterfaceSubscribeInfo.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UserInterfaceSubscribeInfo {\n    clientId: string;\n    message: Message;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Certificates Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for SSL/TLS certificate configuration with properties for private key, public certificate, and optional CA certificates chain.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/Certificates.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Certificates {\n    key: string;      // private key file\n    cert: string;     // public certificate\n    ca?: string;     // chained CA certificates\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReadFileCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles file read operations. The callback accepts optional parameters for error handling (err), file data (as Buffer or string), and MIME type information.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ReadFileCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nReadFileCallback: (err?: NodeJS.ErrnoException | null, data?: Buffer | string, mimeType?: string) => void\n```\n\n----------------------------------------\n\nTITLE: Defining GetUserGroupCallbackNoError Type in TypeScript\nDESCRIPTION: Type definition for a callback function that handles user group information. Takes a user string, array of groups, and object permissions as parameters with no error handling.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetUserGroupCallbackNoError.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetUserGroupCallbackNoError: (user: string, groups: string[], acl: ObjectPermissions) => void\n```\n\n----------------------------------------\n\nTITLE: Defining AliasTargetEntry Interface in TypeScript\nDESCRIPTION: This snippet defines the AliasTargetEntry interface with various properties including alias, id, pattern, type, min, max, and unit. It specifies the types and optional nature of each property.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AliasTargetEntry.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AliasTargetEntry {\n    alias: undefined | object;\n    id: string;\n    pattern: string;\n    type?: CommonType;\n    max?: number;\n    min?: number;\n    unit?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Session Options\nDESCRIPTION: TypeScript interface definition specifying required properties for internal session retrieval operations: an id string and a callback function for handling the session data.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetSessionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalGetSessionOptions {\n    id: string;\n    callback: GetSessionCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Object List Callback Implementation\nDESCRIPTION: Example callback function showing how to process object list results. Demonstrates iterating through returned rows and handling errors.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, res) {\n    if (res && res.rows) {\n         for (var i = 0; i < res.rows.length; i++) {\n             var id  = res.rows[i].id;\n             var obj = res.rows[i].value;\n             adapter.log.info('Found ' + id + ': ' + JSON.stringify(obj));\n         }\n         if (!res.rows.length) adapter.log.info('No objects found.');\n    } else {\n        adapter.log.info('No objects found: ' + err);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectsPromise Type in TypeScript\nDESCRIPTION: TypeScript type alias declaration that represents a Promise which resolves to the non-null return type of the GetObjectsCallback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectsPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectsPromise: Promise<NonNullCallbackReturnTypeOf<GetObjectsCallback>>\n```\n\n----------------------------------------\n\nTITLE: Upgrading Controller UI via sendToHost in TypeScript\nDESCRIPTION: Demonstrates how to upgrade the controller UI using sendToHostAsync function. It specifies the version to upgrade to and the admin instance to use for the web server configuration.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsendToHostAsync('system.host.test', 'upgradeController', { version: '5.0.5', adminInstance: 0 });\n```\n\n----------------------------------------\n\nTITLE: Defining PartialStateObject Interface in TypeScript\nDESCRIPTION: Interface definition for partial state objects that extends Partial<Omit<StateObject>>. Includes optional properties for ID, ACL, common settings, enums, timestamps, and other metadata fields.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialStateObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialStateObject extends Partial<Omit<StateObject, 'common' | 'acl'>> {\n    _id?: string;                    // The ID of this object\n    acl?: Partial<StateACL>;         // Optional ACL settings\n    common?: Partial<StateCommon>;    // Optional common settings\n    enums?: Record<string, string | Translated>; // Optional enums\n    from?: string;                   // Optional source\n    native?: Record<string, any>;     // Optional native settings\n    nonEdit?: NonEditable;           // Properties only editable with password\n    ts?: number;                     // Optional timestamp\n    type?: \"state\";                  // Object type\n    user?: string;                   // User who created/updated object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining StateACL Interface in TypeScript\nDESCRIPTION: Interface that extends ObjectACL to represent access control for state objects, including properties for owner, group, and Linux-style permissions\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/StateACL.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StateACL extends ObjectACL {\n  state: number; // Linux-type permissions for state access\n  object: number; // Linux-type permissions for object access\n  owner: string; // User owning the object (e.g., \"system.user.admin\")\n  ownerGroup: string; // Group owning the object (e.g., \"system.group.administrator\")\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Executable Capabilities in TypeScript\nDESCRIPTION: Method to set capabilities for executable files on Linux systems. Allows configuring effective, permitted, and inherited capability modes.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nsetExecutableCapabilities(execPath: string, capabilities: string[], modeEffective?: boolean, modePermitted?: boolean, modeInherited?: boolean): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining SendToAllClientOptions Type Alias in TypeScript\nDESCRIPTION: This code defines the SendToAllClientOptions type alias as an Omit type that excludes the 'clientId' property from the SendToClientOptions interface. This enables sending messages to all clients without specifying individual client IDs.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/SendToAllClientOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**SendToAllClientOptions**: `Omit`\\<[`SendToClientOptions`](../interfaces/SendToClientOptions.md), `\"clientId\"`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining GetCertificatesCallback Type in TypeScript\nDESCRIPTION: Type definition for a callback function that handles certificate retrieval. Takes optional error, certificates object, and Let's Encrypt usage flag parameters. Returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetCertificatesCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetCertificatesCallback: (err?: Error | null, certs?: Certificates, useLetsEncryptCert?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - PartialOtherObject\nDESCRIPTION: Defines a TypeScript interface for partial other objects, extending from Partial<Omit<OtherObject, 'common'>>. Includes properties for object ID, ACL, common settings, enums, timestamps, and other metadata.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialOtherObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialOtherObject extends Partial<Omit<OtherObject, \"common\">> {\n    _id?: string;                 // The ID of this object\n    acl?: ObjectACL;              // Access control settings\n    common?: Partial<OtherCommon>; // Common object properties\n    enums?: Record<string, string | Translated>;\n    from?: string;                // Source information\n    native?: Record<string, any>;  // Native settings\n    nonEdit?: NonEditable;        // Properties requiring password to edit\n    ts?: number;                  // Timestamp\n    type?: \"config\" | \"chart\";    // Object type\n    user?: string;                // User who created/updated object\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalSetPasswordOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure for password setting operations. It includes required user and password fields, along with optional options object and error callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalSetPasswordOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalSetPasswordOptions {\n    user: string;\n    pw: string;\n    options?: null | Record<string, any>;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: States Callback Function Structure\nDESCRIPTION: Example showing the structure of the callback function when reading multiple states, including the return format with values and acknowledgment flags.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, states) {}, where states is an object like {\"ID1\": {\"val\": 1, \"ack\": true}, \"ID2\": {\"val\": 2, \"ack\": false}, ...}\n```\n\n----------------------------------------\n\nTITLE: Defining GetStatesPromise Type in TypeScript\nDESCRIPTION: TypeScript type alias definition that creates a Promise type wrapping the non-null return value of a GetStatesCallback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetStatesPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetStatesPromise: Promise<NonNullCallbackReturnTypeOf<GetStatesCallback>>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Notification Interface Definition\nDESCRIPTION: Interface definition for handling notifications in ioBroker JS Controller. Includes properties for scope identification, translated name and description, and an array of notification categories. Each adapter can define its own scopes with unique categories.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/Notification.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Notification {\n    scope: string;\n    name: Translated;\n    description: Translated;\n    categories: NotificationCategory[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtendObjectOptions Interface in TypeScript\nDESCRIPTION: This code defines the ExtendObjectOptions interface which is used when extending objects in the ioBroker system. It includes an optional 'preserve' property that specifies which properties of the original object should be preserved during extension, and allows for additional string-indexed properties of unknown type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ExtendObjectOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n## Indexable\n\n \\[`other`: `string`\\]: `unknown`\n\n## Properties\n\n### preserve?\n\n> `optional` **preserve**: [`ExtendObjectOptionsPreserve`](ExtendObjectOptionsPreserve.md)\n\nWhich properties of the original object should be preserved\n\n#### Defined in\n\n[types-dev/index.d.ts:364](https://github.com/ioBroker/ioBroker.js-controller/blob/16f7418df1bc6d07b232fa81310bbbd4fbe2a36c/packages/types-dev/index.d.ts#L364)\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Icon Property in TypeScript\nDESCRIPTION: Defines an optional 'icon' property for adapter objects, specifying the filename of a local icon shown for installed adapters. The icon should be located in the 'admin' directory.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nicon?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Local Links Property in TypeScript\nDESCRIPTION: Defines an optional 'localLinks' property as a dictionary of links to web services provided by the adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nlocalLinks?: Record<string, string | LocalLink>;\n```\n\n----------------------------------------\n\nTITLE: Defining LogMessageInternal Type Alias in TypeScript\nDESCRIPTION: Type alias definition that creates LogMessageInternal by omitting the '_id' property from the LogMessage interface. This represents the internal structure of log messages in the Redis states implementation.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/LogMessageInternal.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**LogMessageInternal**: `Omit`\\<[`LogMessage`](../interfaces/LogMessage.md), `\"_id\"`\\>\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectsDatabaseOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the ObjectsDatabaseOptions interface in TypeScript. It extends the DatabaseOptions interface and includes properties such as backup options, connection timeout, and various database configuration parameters. Each property is properly documented with types and inheritance information from the DatabaseOptions interface.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsDatabaseOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectsDatabaseOptions extends DatabaseOptions {\n    /**\n     * type: string\n     * Inherited from DatabaseOptions.type\n     */\n    type: string;\n    /**\n     * backup: DatabaseBackupOptions\n     * Inherited from DatabaseOptions.backup\n     */\n    backup: DatabaseBackupOptions;\n    /**\n     * connectTimeout: number\n     * Inherited from DatabaseOptions.connectTimeout\n     */\n    connectTimeout: number;\n    /**\n     * dataDir: string\n     * Inherited from DatabaseOptions.dataDir\n     */\n    dataDir: string;\n    /**\n     * host: string\n     * Inherited from DatabaseOptions.host\n     */\n    host: string;\n    /**\n     * jsonlOptions: JsonlOptions\n     * Inherited from DatabaseOptions.jsonlOptions\n     */\n    jsonlOptions: JsonlOptions;\n    /**\n     * noFileCache: boolean\n     */\n    noFileCache: boolean;\n    /**\n     * options: object with various database connection options\n     */\n    options: {\n        auth_pass: string;\n        db: number;\n        family: number;\n        retry_max_count: number;\n        retry_max_delay: number;\n        /**\n         * Optional tls: object\n         */\n        tls?: {\n            ca?: string;\n            cert?: string;\n            key?: string;\n            rejectUnauthorized?: boolean;\n        };\n    };\n    /**\n     * port: number\n     * Inherited from DatabaseOptions.port\n     */\n    port: number;\n    /**\n     * type: 'file' | 'jsonl' | 'redis'\n     */\n    type: 'file' | 'jsonl' | 'redis';\n    /**\n     * writeFileInterval: number\n     * Inherited from DatabaseOptions.writeFileInterval\n     */\n    writeFileInterval: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Connection Interface\nDESCRIPTION: TypeScript interface for Redis connection configuration with optional and required properties for host, port, authentication, and additional connection settings\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/RedisConnectionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RedisConnectionOptions extends ConnectionOptions {\n  host: string | string[];\n  port: number | number[];\n  pass?: string;\n  options: Record<string, any>;\n  dataDir: string;\n  redisNamespace?: string;\n  sentinelName?: string;\n  backup?: BackupOptions;\n  enhancedLogging?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Enum Objects in ioBroker with JavaScript\nDESCRIPTION: Example showing the result structure when getting enum objects with the getEnums method. The result contains nested objects representing room and function enums with their member IDs.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, enums) {\n  // requestEnum is _enum\n  if (err) adapter.log.error('Cannot get object: ' + err);\n  // Result is like\n  // {\n  //    \"enum.rooms\": {\n  //       \"enum.rooms.livingroom\": {\n  //           common: {\n  //              members: ['ID1', 'ID2']\n  //           }\n  //       },\n  //       \"enum.rooms.sleepingroom\": {\n  //           common: {\n  //              members: ['ID3', 'ID4']\n  //           }\n  //       }\n  //    },\n  //    \"enum.functions\": {\n  //       \"enum.rooms.light\": {\n  //           common: {\n  //              members: ['ID1', 'ID6']\n  //           }\n  //       },\n  //       \"enum.rooms.weather\": {\n  //           common: {\n  //              members: ['ID4', 'ID7']\n  //           }\n  //       }\n  //    }\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetObjectPromise Type in TypeScript\nDESCRIPTION: Type alias definition that represents a Promise returning the non-null callback return type of SetObjectCallback. Used for handling asynchronous object setting operations in ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/SetObjectPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSetObjectPromise: Promise<NonNullCallbackReturnTypeOf<SetObjectCallback>>\n```\n\n----------------------------------------\n\nTITLE: Defining addStateToEnum Method in TypeScript\nDESCRIPTION: This method adds a state to an enum in ioBroker. It has two overloads with different parameter lists.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\naddStateToEnum(enumName: string, addTo: string, parentDevice: string, parentChannel: string, stateName: string, callback?: ErrorCallback): void;\n\naddStateToEnum(enumName: string, addTo: string, parentDevice: string, parentChannel: string, stateName: string, options: unknown, callback?: ErrorCallback): void;\n```\n\n----------------------------------------\n\nTITLE: Defining the desc property in ObjectCommon\nDESCRIPTION: This snippet defines the `desc` property within the `ObjectCommon` interface. The `desc` property represents the description of the object. It is an optional property and can be either a simple string or a translated string.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectCommon.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Description of this object\n */\ndesc?: StringOrTranslated;\n```\n\n----------------------------------------\n\nTITLE: Defining InternalUpdateConfigOptions Interface in TypeScript\nDESCRIPTION: This TypeScript interface, `InternalUpdateConfigOptions`, is used to define the structure of options for updating an adapter's configuration. It contains a single property, `newConfig`, which is a record (object) where keys are strings and values can be of any type. This allows for flexible configuration updates within the ioBroker ecosystem.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalUpdateConfigOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * @iobroker/js-controller-adapter ../../README.md\n * Docs\n *\n ***\n *\n * @iobroker/js-controller-adapter ../../globals.md / <internal> ../README.md / InternalUpdateConfigOptions\n *\n * # Interface: InternalUpdateConfigOptions\n *\n * ## Properties\n *\n * ### newConfig\n *\n * > **newConfig**: `Record`<`string`, `any`>\n *\n * #### Defined in\n *\n * [adapter/src/lib/_Types.ts:347](https://github.com/ioBroker/ioBroker.js-controller/blob/16f7418df1bc6d07b232fa81310bbbd4fbe2a36c/packages/adapter/src/lib/_Types.ts#L347)\n```\n\n----------------------------------------\n\nTITLE: Defining InternalCheckPasswordOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the required properties for password checking operations. It includes user credentials, optional configuration, and a callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalCheckPasswordOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalCheckPasswordOptions {\n    user: string;\n    pw: string;\n    options?: null | Record<string, any>;\n    callback: CheckPasswordCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional JavaScript Rules Property in TypeScript\nDESCRIPTION: Defines an optional 'javascriptRules' property to specify rules blocks for JavaScript rules, including name, type, URL, and translations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\njavascriptRules?: {\n    i18n?: boolean | Record<string, string> | Record<string, Record<Languages, string>>;\n    name: string;\n    type?: \"module\";\n    url: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining UserInterfaceClientUnsubscribeReason Type Alias in TypeScript\nDESCRIPTION: Creates a union type combining ClientUnsubscribeReason and a specific 'timeout' reason, used for tracking client unsubscribe events\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/UserInterfaceClientUnsubscribeReason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nUserInterfaceClientUnsubscribeReason: ClientUnsubscribeReason | \"timeout\"\n```\n\n----------------------------------------\n\nTITLE: Initializing StateRedisClient in TypeScript\nDESCRIPTION: Creates a new instance of StateRedisClient with the provided settings.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew StateRedisClient(settings: StatesSettings): StateRedisClient\n```\n\n----------------------------------------\n\nTITLE: Defining IoBJson Interface in TypeScript\nDESCRIPTION: This code snippet defines the IoBJson interface, which represents the global configuration for ioBroker. It includes various properties for system settings, database options, logging, and more.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/IoBJson.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IoBJson {\n    dataDir: string;\n    dnsResolution: \"verbatim\" | \"ipv4first\";\n    log: {\n        level: LogLevel;\n        maxDays: number;\n        noStdout: boolean;\n        transport: Record<string, any>;\n    };\n    multihostService: {\n        enabled: boolean;\n        password: string;\n        persist: boolean;\n        secure: boolean;\n    };\n    objects: ObjectsDatabaseOptions;\n    states: StatesDatabaseOptions;\n    plugins: {\n        [pluginName: string]: object;\n    };\n    system: {\n        allowShellCommands: boolean;\n        checkDiskInterval: number;\n        compact: boolean;\n        hostname: string;\n        instanceStartInterval: number;\n        memLimitError: number;\n        memLimitWarn: number;\n        memoryLimitMB: number;\n        statisticsInterval: number;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a State Asynchronously in TypeScript (Deprecated)\nDESCRIPTION: Asynchronously deletes a state that was created with createState. This method is deprecated and delObject should be used instead.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteStateAsync(stateName: string, options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining GroupCommon Interface in TypeScript\nDESCRIPTION: TypeScript interface that extends ObjectCommon to define the structure of group objects in ioBroker. Includes properties for access control, members, and common object attributes.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/GroupCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface GroupCommon extends ObjectCommon {\n    acl: Omit<PermissionSet, \"user\" | \"groups\">;\n    members: `system.user.${string}`[];\n    name: StringOrTranslated;\n    enabled?: boolean;\n    custom?: undefined;\n    color?: string;\n    desc?: StringOrTranslated;\n    dontDelete?: true;\n    expert?: true;\n    icon?: string;\n    role?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - InternalGetObjectOptions\nDESCRIPTION: Defines the structure for internal object retrieval options with three properties: a required 'id' string, required 'options' of unknown type, and an optional callback function for handling the retrieved object.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetObjectOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalGetObjectOptions {\n    id: string;\n    options: unknown;\n    callback?: GetObjectCallback<any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalInstallNodeModuleOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the InternalInstallNodeModuleOptions interface, which extends InstallNodeModuleOptions. It includes properties for specifying the npm module name or URL and version for installation.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalInstallNodeModuleOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalInstallNodeModuleOptions extends InstallNodeModuleOptions {\n    moduleNameOrUrl: string;\n    version: string;\n}\n```\n\n----------------------------------------\n\nTITLE: change Property Definition\nDESCRIPTION: Describes the `change` property of the `ObjectsSettings` interface. This optional property defines a function (`ChangeFunction`) to be called when an object changes in the database.  It allows for real-time updates or notifications when object data is modified.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **change**: [`ChangeFunction`](../type-aliases/ChangeFunction.md)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Messages Array in TypeScript\nDESCRIPTION: Defines an optional 'messages' property as an array of MessageRule objects, specifying messages to be shown during upgrade or installation if conditions are met.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nmessages?: MessageRule[];\n```\n\n----------------------------------------\n\nTITLE: Defining ErrnoCallback Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for a callback function that handles Node.js errno exceptions. This callback accepts an optional ErrnoException parameter and returns void, commonly used in Node.js-style error-first callback patterns.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ErrnoCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**ErrnoCallback**: (`err`?) => `void`\n```\n\n----------------------------------------\n\nTITLE: Setting Default ACL in TypeScript\nDESCRIPTION: The setDefaultAcl function asynchronizes setting new default access control lists, returning a promise upon execution. Acceptable parameters include a structure for ACL configurations or null for resetting defaults.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetDefaultAcl(defaultNewAcl): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining UserInterfaceClientSubscribeReturnType Interface in TypeScript\nDESCRIPTION: This code snippet defines the UserInterfaceClientSubscribeReturnType interface with properties for subscription acceptance, optional heartbeat interval, and error information.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/UserInterfaceClientSubscribeReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface UserInterfaceClientSubscribeReturnType {\n    accepted: boolean;\n    heartbeat?: number;\n    error?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Delayed Promise Resolution in TypeScript\nDESCRIPTION: Creates a Promise that resolves after specified timeout. Will not fulfill during adapter shutdown.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndelay(timeout: number): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: NonEditable Interface Definition in TypeScript\nDESCRIPTION: Interface defining the structure for password-protected object properties in ioBroker. Includes properties for password management (password and passHash) and protected fields (common and native).\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/NonEditable.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NonEditable {\n    password?: string;         // Password needed to edit non-editable information\n    passHash?: string;         // Hashed version of current password\n    common?: Record<string, any>; // Protected common properties\n    native?: Record<string, any>; // Protected native properties\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Main File Path in TypeScript\nDESCRIPTION: Defines an optional 'main' property to specify the path to the start file of the adapter, which should match the 'main' field in package.json.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nmain?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining InternalSetSessionOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the structure for session options in ioBroker adapters. It includes required properties for session ID, time-to-live (TTL), data storage as key-value pairs, and an optional error callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalSetSessionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalSetSessionOptions {\n    id: string;\n    ttl: number;\n    data: Record<string, any>;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DesignObject Interface in TypeScript\nDESCRIPTION: This snippet defines the DesignObject interface, which extends Omit<BaseObject, 'common'>. It includes properties for the object's ID, type, language, common properties, and views. The interface is used to type design documents in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/DesignObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DesignObject extends Omit<BaseObject, 'common'> {\n    _id: `_design/${string}`;\n    type: \"design\";\n    language: \"javascript\";\n    common?: OtherCommon;\n    views: Record<string, object>;\n}\n```\n\n----------------------------------------\n\nTITLE: Processed Files Callback\nDESCRIPTION: Callback function structure for returning list of processed files with their new group assignments.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, processedFiles) {\n    list of processed files with new groups\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional News Property in TypeScript\nDESCRIPTION: Defines an optional 'news' property as an object containing version-specific news in multiple languages.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nnews?: {\n    [version: string]: Translated;\n};\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Foreign Objects in TypeScript\nDESCRIPTION: Unsubscribes from changes to objects across all instances. Accepts a pattern and optional callback or options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_110\n\nLANGUAGE: TypeScript\nCODE:\n```\nunsubscribeForeignObjects(pattern: string | string[], callback?: ErrorCallback): void\nunsubscribeForeignObjects(pattern: string | string[], options: unknown, callback?: ErrorCallback): void\n```\n\n----------------------------------------\n\nTITLE: Defining the expert property in ObjectCommon\nDESCRIPTION: This snippet defines the `expert` property within the `ObjectCommon` interface. If set to `true`, the object is only visible when expert mode is enabled in the admin interface. This property is optional.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectCommon.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * When set to true, this object is only visible when expert mode is turned on in admin\n */\nexpert?: true;\n```\n\n----------------------------------------\n\nTITLE: SendableMessage Interface Definition\nDESCRIPTION: Defines the `SendableMessage` interface in TypeScript, outlining its properties: `callback` (optional MessageCallbackInfo), `command` (string), `from` (string), and `message` (any). This interface is intended for messages that can be sent between different parts of the ioBroker system, potentially requiring a callback response.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SendableMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Callback information. This is set when the source expects a response\n */\ncallback?: MessageCallbackInfo;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The command to be executed\n */\ncommand: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The source of this message\n */\nfrom: string;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The message payload\n */\nmessage: any;\n```\n\n----------------------------------------\n\nTITLE: Change File Owner Implementation\nDESCRIPTION: Example showing how to use chownFile to update file owner and ownerGroup with error handling and logging.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.chownFile('vis-2.0', '/main/vis-views.json', {owner: 'newOwner', ownerGroup: 'newgroup'}, function (err, processed) {\n  if (err) adapter.log.error('Cannot read file: ' + err);\n  adapter.log.info('New files: ' + JSON.stringify(processed));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Channel Enum Options\nDESCRIPTION: TypeScript interface that specifies the required and optional properties for adding a channel to an enum in ioBroker. Properties include enum name, add to location, parent device, channel name, options, and an optional callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalAddChannelToEnumOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalAddChannelToEnumOptions {\n    enumName: string;\n    addTo: string;\n    parentDevice: string;\n    channelName: string;\n    options?: null | Record<string, any>;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationContextData Interface in TypeScript\nDESCRIPTION: Interface definition for notification context data that allows indexable properties mapping adapter names or types to unknown values. Used to provide additional context for notifications that can be processed by various adapter types.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/NotificationContextData.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[adapterNameOrAdapterType: string]: unknown\n```\n\n----------------------------------------\n\nTITLE: Defining clientId property in SendToClientOptions\nDESCRIPTION: This snippet defines the clientId property of the SendToClientOptions interface, which specifies the ID of the client to whom the message will be sent. If omitted, the message is sent to all clients. This is crucial for targeted messaging in the user interface.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SendToClientOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n > **clientId**: `string`\n\n ID of the client to send the message to, will send to all if omitted\n */\nclientId: string;\n```\n\n----------------------------------------\n\nTITLE: Defining InternalStopParameters Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalStopParameters interface, which extends StopParameters. It includes properties for exit code, pause status, scheduling, reason for stopping, and alive state update control.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalStopParameters.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalStopParameters extends StopParameters {\n    exitCode?: number;\n    isPause?: boolean;\n    isScheduled?: boolean;\n    reason?: string;\n    updateAliveState?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional No Intro Flag in TypeScript\nDESCRIPTION: Defines an optional 'noIntro' boolean property. When true, instances of this adapter will not be shown in the admin overview screen, useful for icon sets and widgets.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nnoIntro?: true;\n```\n\n----------------------------------------\n\nTITLE: Implementing addStateToEnumAsync Method in TypeScript\nDESCRIPTION: This is an asynchronous version of addStateToEnum that returns a Promise.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\naddStateToEnumAsync(enumName: string, addTo: string, parentDevice: string, parentChannel: string, stateName: string, options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalCalculatePermissionsOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for permission calculation options in ioBroker. It includes properties for user identification, command permissions, optional callback function, and additional configuration options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalCalculatePermissionsOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalCalculatePermissionsOptions {\n    user: string;\n    commandsPermissions: CommandsPermissions;\n    options?: null | Record<string, any>;\n    callback?: CalculatePermissionsCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining data property in SendToClientOptions\nDESCRIPTION: This snippet defines the data property of the SendToClientOptions interface, which holds the unknown type of data that will be sent to the specified client. This allows for flexible data structures in message transmissions.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SendToClientOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n > **data**: `unknown`\n\n Data to send to the client\n */\ndata: unknown;\n```\n\n----------------------------------------\n\nTITLE: Checking Group Membership in JavaScript\nDESCRIPTION: Callback function that checks if a user exists and is in a specified group. This is used internally and not typically needed by adapter developers.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (result) {\n  if (result) adapter.log.debug('User exists and in the group');\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for Delete State From Enum Options\nDESCRIPTION: Interface defining the structure of options when deleting a state from an enum in ioBroker. Includes required properties for enum name, parent device/channel, state name and optional callback and options parameters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalDeleteStateFromEnumOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalDeleteStateFromEnumOptions {\n    callback?: ErrorCallback;\n    enumName: string;\n    options?: null | Record<string, any>;\n    parentChannel: string;\n    parentDevice: string;\n    stateName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectViewItem Interface in TypeScript\nDESCRIPTION: This code snippet defines the GetObjectViewItem interface with a generic type parameter T extending AnyObject. It includes two properties: id for the object's ID and value for a copy of the object from the database.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/GetObjectViewItem.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface GetObjectViewItem<T extends AnyObject> {\n    id: T[\"_id\"];\n    value: T;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the dontDelete property in ObjectCommon\nDESCRIPTION: This snippet defines the `dontDelete` property within the `ObjectCommon` interface. If set to `true`, it prevents the object from being deleted. This property is optional.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectCommon.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * When set to true, this object may not be deleted\n */\ndontDelete?: true;\n```\n\n----------------------------------------\n\nTITLE: Defining GenericCallback Type Alias in TypeScript\nDESCRIPTION: Defines a generic callback function type that follows the error-first pattern common in Node.js. The callback accepts an optional error parameter and an optional result parameter of generic type T.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GenericCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GenericCallback<T> = (err?: Error | null, result?: T) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining states property in SendToClientOptions\nDESCRIPTION: This snippet defines the states property of the SendToClientOptions interface, which is associated with the StateRedisClient class. This property is crucial for managing state data in the messaging system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SendToClientOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n > **states**: [`StateRedisClient`](../classes/StateRedisClient.md)\n\n The states db\n */\nstates: StateRedisClient;\n```\n\n----------------------------------------\n\nTITLE: Defining webPreSettings property in TypeScript interface\nDESCRIPTION: Property definition for webPreSettings which is used by the webServer adapter to create a customized info.js file with essential settings for index.html before socket connection is established.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **webPreSettings**: `Record`\\<`string`, `any`\\>\n```\n\n----------------------------------------\n\nTITLE: Creating State Objects in TypeScript\nDESCRIPTION: Method to create state objects asynchronously with parent device and channel structure. Marked as deprecated in favor of extendObject.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ncreateStateAsync(parentDevice: string, parentChannel: string, stateName: string, roleOrCommon: string | Partial<StateCommon>, native?: Record<string, any>): SetObjectPromise\n```\n\n----------------------------------------\n\nTITLE: Defining LocalLink Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition for LocalLink object that specifies properties for adapter web interfaces including cloud links, descriptions, icons, and display settings.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/LocalLink.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nLocalLink: object {\n  cloud?: string;     // Link for free cloud\n  color?: string;     // Color of the link\n  description?: StringOrTranslated;  // Multi-language description\n  icon?: string;      // Icon path\n  intro?: boolean;    // Show on intro tab flag\n  link: string;       // Web service link\n  name?: StringOrTranslated;  // Multi-language name\n  order?: number;     // Sorting order\n  pro?: string;       // Pro-cloud link\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RmResult Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of the result returned by a file removal operation (`rm`). It includes properties for the file or directory name (`file`) and the path to the parent directory (`path`). The interface is used to provide structured information about the outcome of the removal operation.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/RmResult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RmResult {\n  file: string;\n  path: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing calculatePermissions Method in TypeScript\nDESCRIPTION: This method calculates user permissions based on their groups and access rights. It's mainly used internally in ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ncalculatePermissions(user: string, commandsPermissions: CommandsPermissions, options?: Record<string, any>, callback?: CalculatePermissionsCallback): Promise<void | PermissionSet>\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectListPromise Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that represents a Promise returning a non-null callback result type from GetObjectListCallback with Object parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectListPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectListPromise: Promise<NonNullCallbackReturnTypeOf<GetObjectListCallback<Object>>>\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of ioBroker.js-controller\nDESCRIPTION: Command to install the latest nightly release of js-controller for testing code changes in a running environment.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i iobroker.js-controller@dev\n```\n\n----------------------------------------\n\nTITLE: Defining InternalReportDeprecationOption Interface in TypeScript\nDESCRIPTION: Interface definition for handling deprecation reporting options in ioBroker. Contains properties for the deprecation message and an optional version field indicating when the deprecation will become an error.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalReportDeprecationOption.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalReportDeprecationOption {\n    version?: string;        // Version in which this warning will throw an error instead\n    deprecationMessage: string;  // The log line to report\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Keywords Array in TypeScript\nDESCRIPTION: Defines an optional 'keywords' property as an array of strings, used for search functionality in the admin interface. The term 'ioBroker' should not be included.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nkeywords?: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Materialize Tab Flag in TypeScript\nDESCRIPTION: Defines an optional 'materializeTab' boolean property to indicate if the admin tab is written in materialized style, required for Admin 3+.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nmaterializeTab?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Deleting a Device in JavaScript (Deprecated)\nDESCRIPTION: Deletes a device with all its channels and states. This method is deprecated and delObject should be used instead.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err) {\n  if (err) adapter.log.error('Cannot delete device: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetObjectCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles the result of setting an object in ioBroker. The callback accepts an optional error parameter and an optional object parameter with an id property.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/SetObjectCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSetObjectCallback: (err?: Error | null, obj?: { id?: string }) => void\n```\n\n----------------------------------------\n\nTITLE: RmResult.file Property Definition\nDESCRIPTION: This property, `file`, within the `RmResult` interface, represents the name of the deleted file or directory. It is a string that contains the name of the item that was removed from the file system. It provides specific identification of the deleted resource.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/RmResult.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The name of the deleted file or directory\n */\nfile: string;\n```\n\n----------------------------------------\n\nTITLE: Subscribe User Patterns in Redis\nDESCRIPTION: Method with multiple overloads for subscribing to user patterns with optional callback and configuration options. Supports both synchronous and asynchronous subscription mechanisms.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribeUser(pattern: string | string[], callback?: ErrorCallback): void\nsubscribeUser(pattern: string | string[], options?: CallOptions, callback?: ErrorCallback): void\n```\n\n----------------------------------------\n\nTITLE: Defining GetEnumsPromise Type in TypeScript\nDESCRIPTION: TypeScript type alias defining GetEnumsPromise as a Promise that resolves to the non-null return type of GetEnumsCallback. Located in types-dev/index.d.ts.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetEnumsPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetEnumsPromise: Promise<NonNullCallbackReturnTypeOf<GetEnumsCallback>>\n```\n\n----------------------------------------\n\nTITLE: changeUser Property Definition\nDESCRIPTION: Describes the `changeUser` property of the `ObjectsSettings` interface. This optional property defines a function (`ChangeFunction`) to be called when a user changes in the database. It enables real-time tracking and handling of user-related data modifications.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **changeUser**: [`ChangeFunction`](../type-aliases/ChangeFunction.md)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining PartialMetaObject Interface in TypeScript\nDESCRIPTION: TypeScript interface that extends Partial<Omit<MetaObject, 'common'>> to define the structure of metadata objects. Includes properties for object ID, ACL, enums, native data, timestamps, and user information.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialMetaObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialMetaObject extends Partial<Omit<MetaObject, 'common'>> {\n    _id?: string;\n    acl?: ObjectACL;\n    common?: Partial<MetaCommon>;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native?: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type?: \"meta\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeleteStateCallback Type in TypeScript\nDESCRIPTION: Type definition for a callback function used when deleting states in ioBroker. The callback accepts optional error and ID parameters and returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/DeleteStateCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nDeleteStateCallback: (err?: Error | null, id?: string) => void\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectPromise Generic Type in TypeScript\nDESCRIPTION: Type alias definition for GetObjectPromise that extends Promise with a generic parameter T (defaulting to string). It composes the return type using CallbackReturnTypeOf and GetObjectCallback types.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectPromise<T extends string = string>: Promise<CallbackReturnTypeOf<GetObjectCallback<T>>>\n```\n\n----------------------------------------\n\nTITLE: Redis System Utility Methods\nDESCRIPTION: Helper methods for system operations like getting primary host, protocol version and locale support checks.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngetPrimaryHost(): Promise<null | string>;\n\ngetProtocolVersion(): Promise<null | string>;\n\nisSystemLocaleSupported(): Promise<boolean>;\n```\n\n----------------------------------------\n\nTITLE: Error Callback Handler in JavaScript\nDESCRIPTION: Callback function that handles errors and logs them via the adapter's logging system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, obj) {\n    // obj is {\"id\": id}\n    if (err) adapter.log.error(err);\n}\n```\n\n----------------------------------------\n\nTITLE: Access Control Object Structure in JavaScript\nDESCRIPTION: Illustrates the structure of an access control object for an admin user in ioBroker. It shows permissions for various operations on files, objects, states, and other resources.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (acl) {\n  // Access control object for admin looks like:\n  // {\n  //    file: {\n  //         read:       true,\n  //         write:      true,\n  //         'delete':   true,\n  //         create:     true,\n  //         list:       true\n  //     },\n  //     object: {\n  //         read:       true,\n  //         write:      true,\n  //         'delete':   true,\n  //         list:       true\n  //     },\n  //     state: {\n  //         read:       true,\n  //         write:      true,\n  //         'delete':   true,\n  //         create:     true,\n  //         list:       true\n  //     },\n  //     user: 'admin',\n  //     users:  {\n  //         read:       true,\n  //         write:      true,\n  //         create:     true,\n  //         'delete':   true,\n  //         list:       true\n  //     },\n  //     other: {\n  //         execute:    true,\n  //         http:       true,\n  //         sendto:     true\n  //     },\n  //     groups: ['administrator'] // can be more than one\n  // }\n}\n```\n\n----------------------------------------\n\nTITLE: RmResult.path Property Definition\nDESCRIPTION: The `path` property within the `RmResult` interface specifies the parent directory of the deleted file or directory. This string indicates the location from which the file or directory was removed. It helps to identify the context of the deleted resource.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/RmResult.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The parent directory of the deleted file or directory\n */\npath: string;\n```\n\n----------------------------------------\n\nTITLE: Subscribing with Pattern and Callback in TypeScript\nDESCRIPTION: The subscribe function provides a way to listen to specific patterns via a callback function in a synchronous manner, leveraging either raw patterns or optional configurations to handle events effectively.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nsubscribe(pattern, options?, callback?): void\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetDevicesOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalGetDevicesOptions interface with two properties: an optional 'options' of type Record<string, any> or null, and a required 'callback' of type GetObjectsCallback3<DeviceObject>.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetDevicesOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetDevicesOptions {\n    options?: null | Record<string, any>;\n    callback: GetObjectsCallback3<DeviceObject>;\n}\n```\n\n----------------------------------------\n\nTITLE: redisNamespace Property Definition\nDESCRIPTION: Describes the `redisNamespace` property of the `ObjectsSettings` interface. This optional property defines the namespace used within Redis to store objects. It helps to isolate ioBroker's data within the Redis database if other applications are using the same Redis instance.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **redisNamespace**: `string`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelCommon Interface in TypeScript\nDESCRIPTION: This code snippet defines the ChannelCommon interface, which extends ObjectCommon. It includes properties for channel configuration in ioBroker, such as color, custom settings, description, and various flags for object behavior.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ChannelCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ChannelCommon extends ObjectCommon {\n    color?: string;\n    custom?: undefined;\n    desc?: StringOrTranslated;\n    dontDelete?: true;\n    expert?: true;\n    icon?: string;\n    name: StringOrTranslated;\n    role?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Type Alias in TypeScript\nDESCRIPTION: Type alias that defines the format for ioBroker adapter instance identifiers. The pattern follows 'system.adapter.[adapterName].[instanceNumber]' format.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Instance.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nInstance: `system.adapter.${string}.${number}`\n```\n\n----------------------------------------\n\nTITLE: Declaring extendObject TypeScript Method\nDESCRIPTION: TypeScript method signature for extending an object in Redis storage with type parameters and optional callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nextendObject<T extends string>(\n  id: T,\n  obj: PartialObjectWorker<ObjectIdToObjectType<T, \"write\">>,\n  options?: null | ExtendObjectOptions,\n  callback?: ExtendObjectCallback\n): void | Promise<undefined | object>\n```\n\n----------------------------------------\n\nTITLE: Object Structure Example - Original State\nDESCRIPTION: Example of an existing object structure before extension, showing common, type and native properties.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  common: {\n    name: 'Adapter name',\n    desc: 'Description'\n  },\n  type: 'state',\n  native: {\n    unused: 'text'\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing ObjectsInRedisClient in TypeScript\nDESCRIPTION: Constructor for initializing a new ObjectsInRedisClient instance with settings parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ObjectsInRedisClient(settings: ObjectsSettings): ObjectsInRedisClient\n```\n\n----------------------------------------\n\nTITLE: disconnected Property Definition\nDESCRIPTION: Describes the `disconnected` property of the `ObjectsSettings` interface. This optional property is a function to be called when the connection to the object database is lost or closed. It can be used to handle disconnection events, such as attempting to reconnect.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **disconnected**: () => `void`\n */\n```\n\n----------------------------------------\n\nTITLE: Unsubscribe Message Method TypeScript Definition\nDESCRIPTION: Method definition for unsubscribing from message events for a specific ID. Takes an ID string and optional error callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nunsubscribeMessage(id: string, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetCertificatesOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalGetCertificatesOptions interface with optional properties for public, private, and chained certificate names, as well as a callback function.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetCertificatesOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetCertificatesOptions {\n    publicName?: string;\n    privateName?: string;\n    chainedName?: string;\n    callback?: GetCertificatesCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LicenseInformationWithPayment Interface in TypeScript\nDESCRIPTION: This snippet defines the LicenseInformationWithPayment interface with properties for license, link, and type. It specifies the structure for license information, particularly for paid or commercial licenses.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/LicenseInformationWithPayment.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface LicenseInformationWithPayment {\n    license?: string;\n    link: string;\n    type: PaidLicenseType;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SetStateChangedCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles state changes in ioBroker. The callback accepts optional error, ID and notChanged parameters and returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/SetStateChangedCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSetStateChangedCallback: (err?: Error | null, id?: string, notChanged?: boolean) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Meta Type Alias in TypeScript for ioBroker JS Controller\nDESCRIPTION: This code snippet defines the Meta type alias using a union of string literal types. It represents different patterns for metadata identifiers in the ioBroker system, including combinations of strings, numbers, and specific keywords.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Meta.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Meta = `${string}.${number}` | `${string}.${'meta' | 'admin'}` | `${string}.meta.${string}` | `${string}.${number}.meta.${string}`\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetAdapterObjectsOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalGetAdapterObjectsOptions interface with an optional callback property. The callback function takes a Record of string keys and AdapterScopedObject values as its parameter and returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetAdapterObjectsOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetAdapterObjectsOptions {\n    callback?: (objects: Record<string, AdapterScopedObject>) => void;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribe Message Method TypeScript Definition\nDESCRIPTION: Method definition for subscribing to message events for a specific ID. Takes an ID string and optional error callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/StateRedisClient.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribeMessage(id: string, callback?: ErrorCallback): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Validate Meta Object in Redis\nDESCRIPTION: Asynchronous method to validate if a given ID represents a valid meta-object, throwing an error if the validation fails.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nvalidateMetaObject(id: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectsCallback3 Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that accepts an optional error parameter and an optional array of results extending BaseObject. Used for handling object retrieval operations in ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectsCallback3.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectsCallback3<T>: (err?: Error | null, result?: T[]) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Optional No Git Flag in TypeScript\nDESCRIPTION: Defines an optional 'nogit' boolean property. When true, manual installation from GitHub is not possible for this adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nnogit?: true;\n```\n\n----------------------------------------\n\nTITLE: Initializing Validator Class Constructor\nDESCRIPTION: Constructor for creating a new Validator instance with required database connections and namespace configurations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Validator.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Validator(objects, states, namespaceLog, logger, namespace, namespaceRegExp): Validator\n```\n\n----------------------------------------\n\nTITLE: Defining ReadFilePromise Type in TypeScript\nDESCRIPTION: Type definition for ReadFilePromise which represents a Promise that resolves to an object containing file content as string or Buffer, with an optional MIME type property.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ReadFilePromise.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ReadFilePromise**: `Promise`\\<`object`\\>\n\n## Type declaration\n\n### file\n\n> **file**: `string` \\| `Buffer`\n\n### mimeType?\n\n> `optional` **mimeType**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining GetKeysCallback Type Alias in TypeScript\nDESCRIPTION: Defines the GetKeysCallback type alias as a function that takes optional error and list parameters, and returns void. This callback is likely used for asynchronous operations involving key retrieval in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetKeysCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype GetKeysCallback = (err?: Error | null, list?: string[]) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetUserIDOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalGetUserIDOptions interface with a single property 'username' of type string. It is used for internal operations to retrieve user IDs.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetUserIDOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetUserIDOptions {\n    username: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectIdToObjectType Type Alias in TypeScript\nDESCRIPTION: A TypeScript type alias that maps object ID string patterns to their corresponding object types using conditional typing. It determines which object interface to use based on the namespace prefix of the ID string.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ObjectIdToObjectType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**ObjectIdToObjectType**\\<`T`, `Read`\\>: `T` *extends* [`State`](State.md) ? [`StateObject`](../interfaces/StateObject.md) : `T` *extends* [`Instance`](Instance.md) ? [`InstanceObject`](../interfaces/InstanceObject.md) : `T` *extends* [`Adapter`](Adapter.md) ? [`AdapterObject`](../interfaces/AdapterObject.md) : `T` *extends* [`Channel`](Channel.md) ? [`ChannelObject`](../interfaces/ChannelObject.md) : `T` *extends* [`Meta`](Meta.md) ? [`MetaObject`](../interfaces/MetaObject.md) : `T` *extends* [`Misc`](Misc.md) ? [`AdapterScopedObject`](AdapterScopedObject.md) : `T` *extends* [`ScriptOrChannel`](ScriptOrChannel.md) ? [`ScriptObject`](../interfaces/ScriptObject.md) \\| [`ChannelObject`](../interfaces/ChannelObject.md) : `T` *extends* [`Enum`](Enum.md) ? [`EnumObject`](../interfaces/EnumObject.md) : `T` *extends* [`Group`](Group.md) ? [`GroupObject`](../interfaces/GroupObject.md) : `T` *extends* [`User`](User.md) ? [`UserObject`](../interfaces/UserObject.md) : ... *extends* ... ? ... : ...\n```\n\n----------------------------------------\n\nTITLE: Implementing addChannelToEnumAsync Method in TypeScript\nDESCRIPTION: This is an asynchronous version of addChannelToEnum that returns a Promise.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\naddChannelToEnumAsync(enumName: string, addTo: string, parentDevice: string, channelName: string, options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalSetStateChangedOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalSetStateChangedOptions interface, which extends InternalSetStateOptions. It includes properties for id, state, ack, options, and a callback specific to state changes. This interface is used for setting changed states in ioBroker adapters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalSetStateChangedOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalSetStateChangedOptions extends InternalSetStateOptions {\n    id: string | IdObject;\n    state: SettableState | StateValue;\n    ack?: boolean;\n    options?: null | Partial<GetUserGroupsOptions>;\n    callback?: SetStateChangedCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Objects in ioBroker\nDESCRIPTION: Callback function example showing error handling when extending an ioBroker object.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err, obj) {\n    if (err) adapter.log.error(err);\n    // obj is {\"id\": id}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Installation Source in TypeScript\nDESCRIPTION: Defines an optional 'installedFrom' property to specify the source from which the adapter was installed, enabling reinstallation during backup restoration.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ninstalledFrom?: InstalledFrom;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Brand Type Definition\nDESCRIPTION: A generic type definition for creating branded types in TypeScript. The type takes a type parameter B and creates an object type with a unique brand property, used for nominal typing.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Brand.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Brand<B> = { [__brand]: B };\n```\n\n----------------------------------------\n\nTITLE: Defining ReadDirCallback Type in TypeScript\nDESCRIPTION: TypeScript type alias definition for a callback function used in directory reading operations. The callback accepts an optional error parameter of type NodeJS.ErrnoException and an optional entries parameter containing an array of ReadDirResult objects.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ReadDirCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nReadDirCallback: (err?: NodeJS.ErrnoException | null, entries?: ReadDirResult[]) => void\n```\n\n----------------------------------------\n\nTITLE: Defining GetStatesCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function used to retrieve states in ioBroker. Takes optional error and states parameters, where states is a record mapping strings to State objects. Returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetStatesCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetStatesCallback: (err?: Error | null, states?: Record<string, State>) => void\n```\n\n----------------------------------------\n\nTITLE: Initializing Log Class Constructor in TypeScript\nDESCRIPTION: Constructor for the Log class that takes a namespace prefix, log level, and logger instance as parameters. Used to create a new logger with namespace prefixing.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Log.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew Log(namespaceLog: string, level: LogLevel, logger: any): Log\n```\n\n----------------------------------------\n\nTITLE: Defining deprecated wwwDontUpload property in TypeScript interface\nDESCRIPTION: Deprecated property definition for flag that controls whether the www folder will be uploaded into the DB. Alternative is to rename the www folder to something like adminWww.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **wwwDontUpload**: `boolean`\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetEncryptedConfigOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalGetEncryptedConfigOptions interface with two properties: 'attribute' of type string, and an optional 'callback' of type GetEncryptedConfigCallback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetEncryptedConfigOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetEncryptedConfigOptions {\n    attribute: string;\n    callback?: GetEncryptedConfigCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a State from Enum Asynchronously in TypeScript\nDESCRIPTION: Asynchronously removes a state from a specified enum.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteStateFromEnumAsync(enumName: string, parentDevice: string, parentChannel: string, stateName: string, options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetStatesOfOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalGetStatesOfOptions interface with properties for parentDevice, parentChannel, options, and callback. It is used for specifying options when retrieving states of objects in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetStatesOfOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetStatesOfOptions {\n    parentDevice: undefined | null | string;\n    parentChannel: undefined | null | string;\n    options?: null | Record<string, any>;\n    callback: GetObjectsCallback3<StateObject>;\n}\n```\n\n----------------------------------------\n\nTITLE: changeFileUser Property Definition\nDESCRIPTION: Describes the `changeFileUser` property of the `ObjectsSettings` interface. This optional property defines a function (`FileChangeHandler`) to be called when file user changes in the database. It allows for real-time updates or notifications when file user data is modified.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **changeFileUser**: [`FileChangeHandler`](../type-aliases/FileChangeHandler.md)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Installed Version Property in TypeScript\nDESCRIPTION: Defines a required 'installedVersion' property to show which version of the adapter is currently installed.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ninstalledVersion: string;\n```\n\n----------------------------------------\n\nTITLE: Defining State Type Alias in TypeScript\nDESCRIPTION: This snippet defines a TypeScript type alias named `State`. It represents the format of an ioBroker state ID, ensuring type safety when working with state objects.  The string literal specifies a structured format with adapter name, instance number and a state name.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/State.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"/**\n * > **State**: `system.adapter.${string}.${number}.${string}`\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining ReadyHandler Type in TypeScript\nDESCRIPTION: This TypeScript type definition specifies a ReadyHandler as a function that returns either void or a Promise<void>. This is likely used for handling ready events in the ioBroker.js-controller system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ReadyHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ReadyHandler**: () => `void` | `Promise`<`void`>\n```\n\n----------------------------------------\n\nTITLE: Optional clientId property definition\nDESCRIPTION: Defines the optional `clientId` property within the `SendToUserInterfaceClientOptions` interface.  If `clientId` is provided, the data will be sent to the specified UI client. If not provided, the data will be sent to all active clients.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SendToUserInterfaceClientOptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * clientId?\n *\n * `optional` **clientId**: `string`\n *\n * id of the UI client, if not given send to all active clients\n */\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* #### Defined in\n *\n[adapter/src/lib/_Types.ts:317](https://github.com/ioBroker/ioBroker.js-controller/blob/16f7418df1bc6d07b232fa81310bbbd4fbe2a36c/packages/adapter/src/lib/_Types.ts#L317)\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectViewCallback Type in TypeScript\nDESCRIPTION: Type definition for a callback function that handles object view retrieval results. The callback takes optional error and result parameters, where result contains an array of GetObjectViewItem objects. The type is generic, extending from AnyObject type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectViewCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectViewCallback<T>: (err?: Error | null, result?: { rows?: GetObjectViewItem<T>[] }) => void\n```\n\n----------------------------------------\n\nTITLE: Defining InternalDestroySessionOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure for session destruction options. It contains two properties: a required 'id' string and an optional 'callback' function for error handling.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalDestroySessionOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalDestroySessionOptions {\n    id: string;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Session Data in ioBroker Adapter (TypeScript)\nDESCRIPTION: Method definition for saving session data with a specific ID, time-to-live (TTL), and data object. The method can optionally accept a callback for error handling and returns a MaybePromise type that might resolve asynchronously.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_98\n\nLANGUAGE: typescript\nCODE:\n```\nsetSession(`id`, `ttl`, `data`, `callback`?): [`MaybePromise`](../-internal-/type-aliases/MaybePromise.md)\n```\n\n----------------------------------------\n\nTITLE: Defining ExtendObjectOptionsPreserve Interface in TypeScript\nDESCRIPTION: This code snippet defines the ExtendObjectOptionsPreserve interface. It is an indexable type that can contain nested ExtendObjectOptionsPreserve objects, boolean values, or arrays of strings. This structure allows for flexible configuration of object extension options in ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ExtendObjectOptionsPreserve.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ExtendObjectOptionsPreserve {\n    [prop: string]: ExtendObjectOptionsPreserve | boolean | string[];\n}\n```\n\n----------------------------------------\n\nTITLE: namespace Property Definition\nDESCRIPTION: Describes the `namespace` property of the `ObjectsSettings` interface. This optional property specifies the main namespace for objects within the database. Namespaces help logically organize and isolate objects stored in the database.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **namespace**: `string`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeFunction Type Alias in TypeScript\nDESCRIPTION: This snippet defines a ChangeFunction type alias. It represents a function that takes an 'id' string and an 'object' parameter (which can be of type Object or null) and returns void. This function is likely used as a callback for handling changes to objects in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ChangeFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ChangeFunction = (id: string, object: Object | null) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorCallback Type Alias in TypeScript\nDESCRIPTION: Type definition for the ErrorCallback function, which takes an optional Error or null parameter and returns void. This type is used for callback functions that handle error states in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ErrorCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ErrorCallback**: (`err`?) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining StringOrTranslated Type Alias in TypeScript\nDESCRIPTION: Declares a union type that allows either a simple string or a Translated object, with a note that English language must be present for object variants\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/StringOrTranslated.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringOrTranslated = string | Translated;\n```\n\n----------------------------------------\n\nTITLE: Data property definition\nDESCRIPTION: Defines the `data` property within the `SendToUserInterfaceClientOptions` interface. This property represents the data that will be sent to the UI client. Its type is `unknown`, allowing for sending various data types.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/SendToUserInterfaceClientOptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * data\n *\n * **data**: `unknown`\n *\n * data to send to the client\n */\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n* #### Defined in\n *\n[adapter/src/lib/_Types.ts:319](https://github.com/ioBroker/ioBroker.js-controller/blob/16f7418df1bc6d07b232fa81310bbbd4fbe2a36c/packages/adapter/src/lib/_Types.ts#L319)\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining InternalDeleteStateOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalDeleteStateOptions interface with properties for parent device, parent channel, state name, options, and an optional callback. It is used internally for state deletion operations in the ioBroker.js-controller adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalDeleteStateOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalDeleteStateOptions {\n    parentDevice: string;\n    parentChannel: string;\n    stateName: string;\n    options?: null | Record<string, any>;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the icon property in ObjectCommon\nDESCRIPTION: This snippet defines the `icon` property within the `ObjectCommon` interface. It represents the icon associated with the object. The `icon` property is an optional string.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectCommon.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Icon for this object\n */\nicon?: string;\n```\n\n----------------------------------------\n\nTITLE: Checking Set Existence in TypeScript\nDESCRIPTION: The setExists function checks if a set exists in storage and returns a promise with a boolean result. The 'id' parameter uniquely identifies the set in question.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetExists(id): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Foreign File Changes in TypeScript\nDESCRIPTION: Unsubscribes from file changes on a specific instance. Takes an adapter ID, pattern, and optional options. Returns a Promise.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_109\n\nLANGUAGE: TypeScript\nCODE:\n```\nunsubscribeForeignFiles(id: string, pattern: string | string[], options?: unknown): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Type Alias for Object View Item Types\nDESCRIPTION: A complex conditional type that maps system view combinations to corresponding object interface types. It handles different view types like host, adapter, instance, meta, device, channel, state, folder and enum objects.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/InferGetObjectViewItemType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nInferGetObjectViewItemType<Design, View>: Design extends \"system\" ? View extends \"host\" ? HostObject : View extends \"adapter\" ? AdapterObject : View extends \"instance\" ? InstanceObject : View extends \"meta\" ? MetaObject : View extends \"device\" ? DeviceObject : View extends \"channel\" ? ChannelObject : View extends \"state\" ? StateObject : View extends \"folder\" ? FolderObject : View extends \"enum\" ? EnumObject : ... extends ... ? ... : ... : any\n```\n\n----------------------------------------\n\nTITLE: Defining NonNullCallbackReturnTypeOf Type Alias in TypeScript\nDESCRIPTION: A TypeScript type alias that infers the return type from a callback-style API and removes null and undefined values. It uses Exclude and SecondParameterOf utility types to extract and filter the callback return type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/NonNullCallbackReturnTypeOf.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nNonNullCallbackReturnTypeOf<T>: Exclude<SecondParameterOf<T>, null | undefined>\n```\n\n----------------------------------------\n\nTITLE: Defining AnyPartialObject Type Alias in TypeScript\nDESCRIPTION: This code defines a type alias that represents a union of all possible partial object types in the ioBroker system. It allows for flexible type handling when working with various object structures in the ioBroker database.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/AnyPartialObject.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**AnyPartialObject**: [`PartialStateObject`](../interfaces/PartialStateObject.md) | [`PartialChannelObject`](../interfaces/PartialChannelObject.md) | [`PartialDeviceObject`](../interfaces/PartialDeviceObject.md) | [`PartialFolderObject`](../interfaces/PartialFolderObject.md) | [`PartialEnumObject`](../interfaces/PartialEnumObject.md) | [`PartialMetaObject`](../interfaces/PartialMetaObject.md) | [`PartialHostObject`](../interfaces/PartialHostObject.md) | [`PartialAdapterObject`](../interfaces/PartialAdapterObject.md) | [`PartialInstanceObject`](../interfaces/PartialInstanceObject.md) | [`PartialUserObject`](../interfaces/PartialUserObject.md) | [`PartialGroupObject`](../interfaces/PartialGroupObject.md) | [`PartialScriptObject`](../interfaces/PartialScriptObject.md) | [`PartialChartObject`](PartialChartObject.md) | [`PartialScheduleObject`](../interfaces/PartialScheduleObject.md) | [`PartialRepositoryObject`](../interfaces/PartialRepositoryObject.md) | [`PartialSystemConfigObject`](../interfaces/PartialSystemConfigObject.md) | [`PartialOtherObject`](../interfaces/PartialOtherObject.md) | [`PartialDesignObject`](../interfaces/PartialDesignObject.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Type Alias for WelcomeScreenEntry in TypeScript\nDESCRIPTION: This code snippet defines a type alias named WelcomeScreenEntry which can either be a string or an object. This allows enhanced flexibility in the usage of this type throughout the application. The type is defined in the types-dev/objects.d.ts file of the iobroker project.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/WelcomeScreenEntry.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\"type WelcomeScreenEntry = string | object;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Branded Type Alias in TypeScript\nDESCRIPTION: Creates a type alias Branded that combines a generic type T with a Brand of type B. This is used for creating branded types, which are types that are nominally different but structurally identical to their base types.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Branded.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Branded<T, B> = T & Brand<B>\n```\n\n----------------------------------------\n\nTITLE: Callback Function for getPort in ioBroker Adapter (JavaScript)\nDESCRIPTION: The callback function signature for the getPort method, which receives the found free port as its parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (port) {}\n```\n\n----------------------------------------\n\nTITLE: Defining GetObjectsCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles retrieved objects or errors. Takes optional error and objects parameters, and returns void. Objects parameter is a record mapping strings to Object types.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetObjectsCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetObjectsCallback: (err?: Error | null, objects?: Record<string, Object>) => void\n```\n\n----------------------------------------\n\nTITLE: Setting Memory Limit for Adapter Processes in JSON\nDESCRIPTION: Demonstrates how to set a memory limit for all adapter processes in the iobroker.json configuration file. This is useful for low memory situations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n...\n  \"system\": {\n    ...\n    \"memoryLimitMB\": 0,\n    ...\n  },\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Objects in Current Instance in TypeScript\nDESCRIPTION: Unsubscribes from object changes in the current instance. Accepts a pattern, optional options, and callback.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_114\n\nLANGUAGE: TypeScript\nCODE:\n```\nunsubscribeObjects(pattern: Pattern, callback?: ErrorCallback): void\nunsubscribeObjects(pattern: Pattern, options: unknown, callback?: ErrorCallback): void\n```\n\n----------------------------------------\n\nTITLE: UserInterfaceClientUnsubscribeHandler Type Alias in TypeScript\nDESCRIPTION: Defines the UserInterfaceClientUnsubscribeHandler type alias, which represents a function that handles unsubscribe events from a user interface client. It takes UserInterfaceUnsubscribeInfo as input and can return either void or a Promise of void. This handler is used to process unsubscribe requests and perform necessary cleanup operations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/UserInterfaceClientUnsubscribeHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n\n> **UserInterfaceClientUnsubscribeHandler**: (`unsubscribeInfo`) => `void` | `Promise`\\<`void`\\>\n\n## Parameters\n\n• **unsubscribeInfo**: [`UserInterfaceUnsubscribeInfo`](UserInterfaceUnsubscribeInfo.md)\n\n## Returns\n\n`void` | `Promise`\\<`void`\\>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Multilingual Translation Type in TypeScript\nDESCRIPTION: Creates a type alias that allows optional translations for different languages with a required English translation. The type combines a generic object with a record of language-specific string translations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Translated.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Translated = object & { [lang in Languages]?: string }\n```\n\n----------------------------------------\n\nTITLE: Defining ClientUnsubscribeReason Type in TypeScript\nDESCRIPTION: TypeScript type alias declaration that combines MessageUnsubscribeReason with an additional string literal type for client subscription errors.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ClientUnsubscribeReason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ClientUnsubscribeReason = MessageUnsubscribeReason | \"clientSubscribeError\"\n```\n\n----------------------------------------\n\nTITLE: Defining CallbackReturnTypeOf Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias CallbackReturnTypeOf that infers the return type from a callback-style API. It uses a generic type parameter T that extends a function type, and utilizes the SecondParameterOf type to extract the return type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/CallbackReturnTypeOf.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nCallbackReturnTypeOf<T>: SecondParameterOf<T>\n```\n\n----------------------------------------\n\nTITLE: Deprecated Async Device Creation in TypeScript\nDESCRIPTION: Asynchronous device creation methods that return promises. Includes overloads for different parameter combinations. Deprecated in favor of extendObject.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDeviceAsync(deviceName: string, common?: Partial<DeviceCommon>): SetObjectPromise;\ncreateDeviceAsync(deviceName: string, common: Partial<DeviceCommon>, native?: Record<string, any>): SetObjectPromise;\ncreateDeviceAsync(deviceName: string, common: Partial<DeviceCommon>, native: Record<string, any>, options?: unknown): SetObjectPromise;\n```\n\n----------------------------------------\n\nTITLE: Defining FileChangeHandler Type Alias in TypeScript\nDESCRIPTION: Type definition for a callback function that handles file changes. It takes three parameters: id (string), fileName (string), and size (number or null).\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/FileChangeHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**FileChangeHandler**: (`id`, `fileName`, `size`) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining the color property in ObjectCommon\nDESCRIPTION: This snippet defines the `color` property within the `ObjectCommon` interface. The color attribute is a string and intended for use in the UI to visually represent the object. It is an optional property.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectCommon.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"/**\n * Color attribute used in UI\n */\ncolor?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ReadDirResult Interface in TypeScript\nDESCRIPTION: The ReadDirResult interface defines the structure of the results returned from a directory read operation in TypeScript. It includes properties for storing access control lists (acl), timestamps for creation and modification, the file name, a flag indicating whether the entry is a directory, and partial file system statistics. Each property is defined with its type and optional status, helping developers ensure proper data handling in file system operations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ReadDirResult.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ReadDirResult {\n  acl?: EvaluatedFileACL;  // Access rights\n  createdAt?: number;      // Date of creation\n  file: string;            // Name of the file or directory\n  isDir: boolean;          // Whether this is a directory or a file\n  modifiedAt?: number;     // Date of last modification\n  stats: Partial<Stats>;   // File system stats\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorHandler Type Alias in TypeScript\nDESCRIPTION: Definition of the ErrorHandler type alias that accepts an Error parameter and returns a boolean value. This is likely used for error handling and processing in the ioBroker.js-controller framework.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ErrorHandler.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**ErrorHandler**: (`err`) => `boolean`\n```\n\n----------------------------------------\n\nTITLE: Implementing Silly Log Method in TypeScript\nDESCRIPTION: Method to log messages with silly level severity. Takes a message string as parameter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Log.md#2025-04-21_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nsilly(msg: string): void\n```\n\n----------------------------------------\n\nTITLE: Configuring .npmrc File for GitHub Package Registry Authentication\nDESCRIPTION: Example .npmrc file configuration for authenticating with GitHub Package Registry, using an access token with permissions to write packages.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_32\n\nLANGUAGE: text\nCODE:\n```\n//npm.pkg.github.com/:_authToken=<YOUR_TOKEN>\n@org:registry=https://npm.pkg.github.com\n```\n\n----------------------------------------\n\nTITLE: Callback Example for Deleting Objects in ioBroker\nDESCRIPTION: Example callback function to handle errors when deleting objects in ioBroker. This callback logs an error message if the deletion fails.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (err) {\n  if (err) adapter.log.error('Cannot delete object: ' + err);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Interface Client Remove Message Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias 'UserInterfaceClientRemoveMessage', which is created by omitting specific properties from the 'Message' interface and combining it with an object type. This is useful for ensuring type safety when handling user interface messages related to client removal.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/UserInterfaceClientRemoveMessage.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nUserInterfaceClientRemoveMessage: Omit<Message, \"message\" | \"command\"> & object | Omit<Message, \"message\" | \"command\"> & object;\n```\n\n----------------------------------------\n\nTITLE: Defining CommandsPermissionsEntry Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the CommandsPermissionsEntry type alias as an object with two properties: operation (a string) and type (a union of specific string literals). It's used to specify permissions for different types of operations in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/CommandsPermissionsEntry.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CommandsPermissionsEntry = {\n    operation: string;\n    type: \"object\" | \"state\" | \"\" | \"other\" | \"file\";\n};\n```\n\n----------------------------------------\n\nTITLE: Object Extension Example\nDESCRIPTION: Example of an object structure used to extend/modify an existing object, showing property updates and deletions.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  common: {\n    desc: 'New description',\n    min: 0,\n    max: 100\n  },\n  native: {\n    unused: null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UserChangeFunction\nDESCRIPTION: This snippet defines the UserChangeFunction type alias. It specifies a function that takes an id (a string) and a state (which can be a State object or null), and returns void. It's defined in the TypeScript definition file for interacting with the states in Redis through the js-controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/UserChangeFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport type UserChangeFunction = (id: string, state: State | null) => void;\n```\n\n----------------------------------------\n\nTITLE: Declaring IoBrokerJson Type Alias in TypeScript\nDESCRIPTION: Type alias definition for IoBrokerJson that references the IoBJson interface, representing the ioBroker global configuration type structure.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/IoBrokerJson.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nIoBrokerJson: IoBJson\n```\n\n----------------------------------------\n\nTITLE: Defining SetStateChangedPromise Type Alias in TypeScript\nDESCRIPTION: Type definition for SetStateChangedPromise, which is a Promise that resolves with the non-null return type of a SetStateChangedCallback. This type is used in the ioBroker.js-controller for handling asynchronous state change operations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/SetStateChangedPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**SetStateChangedPromise**: `Promise`\\<[`NonNullCallbackReturnTypeOf`](NonNullCallbackReturnTypeOf.md)\\<[`SetStateChangedCallback`](SetStateChangedCallback.md)\\>\\>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for Channel Deletion from Enum\nDESCRIPTION: TypeScript interface that defines the required properties and optional parameters for deleting a channel from an enum in ioBroker. It includes enum name, channel details, parent device reference, optional callback, and additional options.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalDeleteChannelFromEnumOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface InternalDeleteChannelFromEnumOptions {\n    enumName: string;\n    channelName: string;\n    parentDevice: string;\n    options?: null | Record<string, any>;\n    callback?: ErrorCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for ioBroker.js-controller\nDESCRIPTION: Command to execute the test suite, which runs TypeScript tests using ts-node without requiring a separate build step.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetHistoryOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalGetHistoryOptions interface with three properties: id (string), options (optional GetHistoryOptions), and callback (GetHistoryCallback).\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetHistoryOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetHistoryOptions {\n    id: string;\n    options?: null | GetHistoryOptions;\n    callback: GetHistoryCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AdapterScopedObject Union Type in TypeScript\nDESCRIPTION: Defines a type alias AdapterScopedObject that combines four object types commonly used in ioBroker adapter scopes: FolderObject, DeviceObject, ChannelObject, and StateObject.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/AdapterScopedObject.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AdapterScopedObject = FolderObject | DeviceObject | ChannelObject | StateObject;\n```\n\n----------------------------------------\n\nTITLE: Configuring Hostname in JSON\nDESCRIPTION: Shows how to set a specific hostname for ioBroker in the iobroker.json configuration file before the first start of ioBroker.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"system\": {\n    ...\n    \"hostname\":\"local\",\n    ...\n  },\n```\n\n----------------------------------------\n\nTITLE: connection Property Definition\nDESCRIPTION: Describes the `connection` property of the `ObjectsSettings` interface. This property holds the Redis connection options as defined by the `RedisConnectionOptions` interface. It specifies how to connect to the Redis database.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * **connection**: [`RedisConnectionOptions`](RedisConnectionOptions.md)\n */\n```\n\n----------------------------------------\n\nTITLE: Defining ExtendObjectCallback Type Alias in TypeScript\nDESCRIPTION: Type definition for a callback function used when extending objects in ioBroker. The callback can receive an optional error parameter, an optional result with id and value properties, and an optional id string.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ExtendObjectCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ExtendObjectCallback**: (`err`?, `result`?, `id`?) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Log Level Property in TypeScript\nDESCRIPTION: Defines an optional 'loglevel' property to set the default log level for the adapter, which can be changed for each instance separately.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nloglevel?: LogLevel;\n```\n\n----------------------------------------\n\nTITLE: Defining AdapterInstanceCommon Interface in TypeScript\nDESCRIPTION: This code snippet defines the AdapterInstanceCommon interface, which extends AdapterCommon and adds properties specific to adapter instances such as host, installedFrom, and logTransporter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InstanceCommon.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AdapterInstanceCommon extends AdapterCommon {\n    host: string;\n    installedFrom?: InstalledFrom;\n    logTransporter?: boolean;\n    // ... other properties\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for NotificationOptions that specifies the structure of notification options, containing a contextData property of type NotificationContextData used by notification processing adapters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/NotificationOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface NotificationOptions {\n    contextData: NotificationContextData\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetChannelsOfOptions Interface in TypeScript\nDESCRIPTION: This interface defines optional properties for getting channels of a device, including a callback function, options object, and parent device identifier.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetChannelsOfOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetChannelsOfOptions {\n    parentDevice?: string;\n    callback?: GetObjectsCallback3<ChannelObject>;\n    options?: null | Record<string, any>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated License Property in TypeScript\nDESCRIPTION: Defines a deprecated 'license' property. Users should use 'common.licenseInformation' instead for license details.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** @deprecated Use 'common.licenseInformation' instead */\nlicense?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Version Ignore Property in TypeScript\nDESCRIPTION: Defines an optional 'ignoreVersion' property to specify a version number of an adapter update that should be ignored.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nignoreVersion?: string;\n```\n\n----------------------------------------\n\nTITLE: Upgrading Adapter with Webserver in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to upgrade an adapter using a webserver. It sends parameters to the js-controller to initiate the upgrade process and set up a status webserver.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsendToHostAsync('system.host.test', 'upgradeAdapterWithWebserver', { \n    version: '1.0.5', \n    adapterName: 'hm-rpc', \n    useHttps: true, \n    port: 8081, \n    certPrivateName: 'defaultPrivate',\n    certPublicName: 'defaultPublic' \n});\n```\n\n----------------------------------------\n\nTITLE: controller Property Definition\nDESCRIPTION: Describes the `controller` property of the `ObjectsSettings` interface. This optional boolean property indicates whether the object database is running in controller mode. The controller mode can influence the behavior of database operations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **controller**: `boolean`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining GetEncryptedConfigCallback Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias for a callback function that handles encrypted configuration data. The callback takes an error parameter and an optional result parameter, which can be a string or an array of strings.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetEncryptedConfigCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype GetEncryptedConfigCallback = (error: Error | null | undefined, result?: string | string[]) => void;\n```\n\n----------------------------------------\n\nTITLE: Setting Up Customer-Specific .npmrc Configuration\nDESCRIPTION: Example .npmrc file to be created on the customer's ioBroker host to allow access to private package registries using a read permission token.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n//npm.pkg.github.com/:_authToken=<YOUR_TOKEN>\n@org:registry=https://npm.pkg.github.com\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetEnumsOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the InternalGetEnumsOptions interface with three optional properties: _enumList, options, and callback. It's used for internal enum operations in the ioBroker.js-controller adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetEnumsOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetEnumsOptions {\n    _enumList?: EnumList;\n    options?: null | Record<string, any>;\n    callback?: GetEnumsCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Messagebox Flag in TypeScript\nDESCRIPTION: Defines a deprecated 'messagebox' property. Users should use 'supportedMessages' instead from controller v5 onwards.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** @deprecated Use supportedMessages up from controller v5 */\nmessagebox?: true;\n```\n\n----------------------------------------\n\nTITLE: Deprecated WWW Upload Control Type Definition\nDESCRIPTION: TypeScript interface property definition for optional wwwDontUpload boolean that controlled whether the www folder would be uploaded to DB. This property is deprecated and www folder should be renamed instead.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InstanceCommon.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noptional wwwDontUpload: boolean\n```\n\n----------------------------------------\n\nTITLE: logger Property Definition\nDESCRIPTION: Describes the `logger` property of the `ObjectsSettings` interface. This property provides an instance of an `InternalLogger` for logging database operations and events. It allows for consistent logging across the object database component.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * **logger**: [`InternalLogger`](../type-aliases/InternalLogger.md)\n */\n```\n\n----------------------------------------\n\nTITLE: Disabling Log File Compression in iobroker.json\nDESCRIPTION: JSON configuration to disable log file compression in iobroker.json. This snippet shows how to turn off automatic log file compression by setting the 'zippedArchive' property to false.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"log\": {\n    ...\n    \"transport\": {\n      \"file1\": {\n        ...\n        \"zippedArchive\": false,\n        ...\n      },\n    },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InternalGetStatesOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InternalGetStatesOptions interface with three properties: pattern for state matching, options for additional configurations, and callback for handling the retrieved states.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InternalGetStatesOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InternalGetStatesOptions {\n    pattern: Pattern;\n    options: Record<string, any>;\n    callback: GetStatesCallback;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstallNodeModuleOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the InstallNodeModuleOptions interface with a single property 'version' of type string. It is extended by the InternalInstallNodeModuleOptions interface.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InstallNodeModuleOptions.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface InstallNodeModuleOptions {\n    version: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LicenseInformationFree Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for free license information in ioBroker adapters. It includes properties for license type, optional license text, and an optional link to license information. The interface is part of the @iobroker/js-controller-adapter package.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/LicenseInformationFree.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface LicenseInformationFree {\n    license?: string;\n    link?: string;\n    type: \"free\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConnectionType Union Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias ConnectionType that represents the possible connection types in ioBroker: either 'local' or 'cloud'.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ConnectionType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nConnectionType: \"local\" | \"cloud\"\n```\n\n----------------------------------------\n\nTITLE: Declaring fileExists TypeScript Method\nDESCRIPTION: Method signature for checking file existence in Redis storage with namespace ID and filename.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfileExists(\n  id: string,\n  name: string,\n  options?: null | CallOptions\n): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Package Registry in package.json for ioBroker Adapters\nDESCRIPTION: Demonstrates how to configure an ioBroker adapter to use GitHub Package Registry by scoping the adapter to an organization and setting the publishConfig in package.json.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@org/vendorAdapter\",\n  \"publishConfig\": {\n    \"registry\": \"https://npm.pkg.github.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Welcome Screen Pro Type Definition\nDESCRIPTION: TypeScript interface property definition for optional welcomeScreenPro array that was used to define pages shown on ioBroker cloud index page. This property is deprecated in favor of localLinks.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/InstanceCommon.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional welcomeScreenPro: WelcomeScreenEntry[]\n```\n\n----------------------------------------\n\nTITLE: Defining MessageUnsubscribeReason Type Alias in TypeScript\nDESCRIPTION: This snippet defines a string literal union type for message unsubscription reasons in the ioBroker system. It specifies that unsubscriptions can happen due to either client request ('client') or connection termination ('disconnect').\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/MessageUnsubscribeReason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**MessageUnsubscribeReason**: `\"client\"` \\| `\"disconnect\"`\n```\n\n----------------------------------------\n\nTITLE: Redis Client Command Example\nDESCRIPTION: Example of using ioredis to interact with the Redis client by setting and retrieving values\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/db-objects-file/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nredis.set(\"foo\", \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Defining Optional No Repository Flag in TypeScript\nDESCRIPTION: Defines an optional 'noRepository' boolean property. When true, it indicates that the adapter is not available in the official ioBroker repositories.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nnoRepository?: true;\n```\n\n----------------------------------------\n\nTITLE: Defining AliasDetailsSource Interface in TypeScript\nDESCRIPTION: Interface definition that specifies optional properties for source aliases including min, max numerical bounds, CommonType type reference, and string unit.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AliasDetailsSource.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface AliasDetailsSource {\n    min?: number;\n    max?: number;\n    type?: CommonType;\n    unit?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: connected Property Definition\nDESCRIPTION: Describes the `connected` property of the `ObjectsSettings` interface. This property is a function that is called when the connection to the object database is established. It can be used to perform tasks immediately after a successful connection.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * **connected**: () => `void`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining LogFunction Type in TypeScript\nDESCRIPTION: Defines a type alias 'LogFunction' representing a logging function that takes a string message parameter and returns void. This is used for standardizing logging function signatures in the ioBroker JS Controller adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/LogFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nLogFunction: (msg) => void\n```\n\n----------------------------------------\n\nTITLE: Defining Optional WWW-Only Flag in TypeScript\nDESCRIPTION: Defines an optional 'onlyWWW' boolean property. When true, it indicates that this 'adapter' only contains HTML files and no main executable.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nonlyWWW?: boolean;\n```\n\n----------------------------------------\n\nTITLE: primaryHostLost Property Definition\nDESCRIPTION: Describes the `primaryHostLost` property of the `ObjectsSettings` interface. This optional property is a function to be called when the primary Redis host is lost (e.g., in a master-slave setup). It can be used to trigger failover or other recovery mechanisms.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **primaryHostLost**: () => `void`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Local Link Property in TypeScript\nDESCRIPTION: Defines a deprecated 'localLink' property. Users should use 'localLinks' instead for specifying web service links.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n/** @deprecated Use localLinks */\nlocalLink?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining GetCertificatesPromiseReturnType Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the GetCertificatesPromiseReturnType type alias as a tuple containing a Certificates object and a boolean value. It is used to represent the return type of a promise that retrieves certificates in the ioBroker.js-controller project.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetCertificatesPromiseReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype GetCertificatesPromiseReturnType = [Certificates, boolean];\n```\n\n----------------------------------------\n\nTITLE: Defining RepositoryJson Interface for ioBroker\nDESCRIPTION: Defines an indexable interface representing repository JSON configuration with adapter-specific content and repository information. Includes a special property _repoInfo for repository metadata.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/RepositoryJson.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RepositoryJson {\n  [adapter: string]: RepositoryJsonAdapterContent | RepoInfo;\n  _repoInfo: RepoInfo;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Client Options Interface in TypeScript\nDESCRIPTION: Interface definition for Redis client configuration options that includes an optional user ID property for database operations and allows for additional string-keyed properties of unknown type.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/Options.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n    [other: string]: unknown;\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Session Type in TypeScript\nDESCRIPTION: Defines a Session type alias that accepts any value type. This is used in the ioBroker.js-controller for handling session-related functionality.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Session.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nSession: any\n```\n\n----------------------------------------\n\nTITLE: Defining InternalLogger Type in TypeScript\nDESCRIPTION: Creates a type alias for InternalLogger that omits the 'level' property from the Logger interface. This type is used for internal logging operations within the ioBroker JS controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/InternalLogger.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nInternalLogger: Omit<Logger, \"level\">\n```\n\n----------------------------------------\n\nTITLE: Defining PaidLicenseType Union Type in TypeScript\nDESCRIPTION: TypeScript type alias defining the possible values for paid license types in ioBroker. The type can be either 'paid', 'commercial', or 'limited'.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/PaidLicenseType.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PaidLicenseType = \"paid\" | \"commercial\" | \"limited\"\n```\n\n----------------------------------------\n\nTITLE: Type Assertion Methods\nDESCRIPTION: Collection of static type assertion methods for validating various data types like strings, numbers, objects, and callbacks.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/Validator.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic assertString(value: unknown, name: string): asserts value is string\nstatic assertNumber(value: unknown, name: string): asserts value is number\nstatic assertObject<T>(value: unknown, name: string): asserts value is T\nstatic assertCallback(value: unknown, name: string): asserts value is Callback\n```\n\n----------------------------------------\n\nTITLE: Defining Interval Type Alias in TypeScript\nDESCRIPTION: Declares a type alias for Interval that can be either a branded number with the 'Interval' brand or null. This provides type safety for interval-related values in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Interval.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Interval = Branded<number, \"Interval\"> | null;\n```\n\n----------------------------------------\n\nTITLE: Defining UserInterfaceUnsubscribeInfoBaseObject Type Alias in TypeScript\nDESCRIPTION: This snippet defines a type alias 'UserInterfaceUnsubscribeInfoBaseObject' that represents an object containing a 'clientId' property. The 'clientId' is a string used to identify the handler for sending information to clients. This type is intended for use within the IoBroker application for managing user interface events.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/UserInterfaceUnsubscribeInfoBaseObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * UserInterfaceUnsubscribeInfoBaseObject: object\n */\n\n/**\n * clientId: string\n * The handler id, which can be used to send information to clients\n */\ntype UserInterfaceUnsubscribeInfoBaseObject = {\n    clientId: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Deprecated State Creation Methods in TypeScript\nDESCRIPTION: Set of deprecated methods for creating state objects under devices/channels in ioBroker. Multiple overloads with varying parameter combinations. Replaced by extendObject.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ncreateState(parentDevice: string, parentChannel: string, stateName: string, callback?: SetObjectCallback): void;\ncreateState(parentDevice: string, parentChannel: string, stateName: string, roleOrCommon: string | Partial<StateCommon>, callback?: SetObjectCallback): void;\ncreateState(parentDevice: string, parentChannel: string, stateName: string, roleOrCommon: string | Partial<StateCommon>, native: Record<string, any>, callback?: SetObjectCallback): void;\ncreateState(parentDevice: string, parentChannel: string, stateName: string, roleOrCommon: string | Partial<StateCommon>, native: Record<string, any>, options: unknown, callback?: SetObjectCallback): void;\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Type Alias in TypeScript\nDESCRIPTION: Creates a type alias named Plugin that represents a Record with string keys and any values. This type is used to define plugin structure in the ioBroker JS controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nPlugin: Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Defining RmCallback Type in TypeScript\nDESCRIPTION: Type definition for a callback function that handles file removal results. Takes optional error and entries parameters, where entries is an array of RmResult interfaces. Returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/RmCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRmCallback: (err?: NodeJS.ErrnoException | null, entries?: RmResult[]) => void\n```\n\n----------------------------------------\n\nTITLE: Defining ReadDirPromise Type Alias in TypeScript\nDESCRIPTION: This type alias defines ReadDirPromise as a Promise that resolves to an array of ReadDirResult objects. It is used for asynchronous directory reading operations in the ioBroker.js-controller.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ReadDirPromise.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ReadDirPromise**: `Promise`\\<[`ReadDirResult`](../interfaces/ReadDirResult.md)[]\\>\n```\n\n----------------------------------------\n\nTITLE: Defining deprecated webservers property in TypeScript interface\nDESCRIPTION: Deprecated property definition for an array of web server instances that should serve content from the adapter's www folder.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **webservers**: `string`[]\n```\n\n----------------------------------------\n\nTITLE: Defining ScriptOrChannel Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias named ScriptOrChannel which represents script identifiers in the format 'script.js.' followed by any string. This type is used for identifying scripts or channels in the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ScriptOrChannel.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**ScriptOrChannel**: `script.js.${string}`\n```\n\n----------------------------------------\n\nTITLE: Defining NotificationCategory Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition for notification categories in ioBroker. It specifies the structure for notification objects with properties for category identification, human-readable names and descriptions, severity levels, message limits, and pattern matching via regex arrays.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/NotificationCategory.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype NotificationCategory = object;\n\n## Type declaration\n\n### category\n\ncategory: \"memIssues\" | \"fsIoErrors\" | \"noDiskSpace\" | \"accessErrors\" | \"nonExistingFileErrors\" | \"remoteHostErrors\" | \"restartLoop\" | \"fileToJsonl\" | \"automaticAdapterUpgradeFailed\" | \"automaticAdapterUpgradeSuccessful\" | \"blockedVersions\" | \"databaseErrors\" | \"securityIssues\" | \"packageUpdates\" | \"systemRebootRequired\" | \"diskSpaceIssues\" | string & object;\n\n### description\n\ndescription: Translated;\n\n### limit\n\nlimit: number;\n\n### name\n\nname: Translated;\n\n### regex\n\nregex: string[];\n\n### severity\n\nseverity: \"info\" | \"notify\" | \"alert\";\n```\n\n----------------------------------------\n\nTITLE: Defining deprecated welcomeScreenPro property in TypeScript interface\nDESCRIPTION: Deprecated property definition for a list of pages that should be shown on the ioBroker cloud index page. Replaced by localLinks.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **welcomeScreenPro**: [`WelcomeScreenEntry`](../type-aliases/WelcomeScreenEntry.md)[]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vendor Repository Metadata for ioBroker Adapters\nDESCRIPTION: JSON configuration for a vendor-specific repository that defines the relationship between the adapter name and the actual npm package name, allowing js-controller to create the necessary aliases.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vendorAdapter\": {\n    \"version\": \"1.0.0\",\n    \"name\": \"vendorAdapter\",\n    \"packetName\": \"@org/vendorAdapter\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ioBroker Adapter Variable Definition\nDESCRIPTION: Defines the Adapter variable as a polyfill for the AdapterClass, enabling instantiation without the 'new' keyword. This is achieved by assigning the AdapterClass type to the Adapter variable.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/variables/Adapter.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst **Adapter**: *typeof* [`AdapterClass`](../classes/AdapterClass.md)\n```\n\n----------------------------------------\n\nTITLE: Defining ChownObjectCallback Type Alias in TypeScript\nDESCRIPTION: Type definition for a callback function used after changing ownership of objects. The callback receives an optional error parameter and an optional array of Object instances.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ChownObjectCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n**ChownObjectCallback**: (`err`?: `NodeJS.ErrnoException` | `null`, `list`?: [`Object`](Object.md)[]) => `void`\n```\n\n----------------------------------------\n\nTITLE: Defining ChownFileCallback Type in TypeScript\nDESCRIPTION: TypeScript type definition for a callback function that handles file ownership change results. The callback accepts an optional error parameter and an optional array of processed file results.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/ChownFileCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nChownFileCallback: (err?: NodeJS.ErrnoException | null, processed?: ChownFileResult[]) => void\n```\n\n----------------------------------------\n\nTITLE: Defining CalculatePermissionsCallback Type in TypeScript\nDESCRIPTION: This code snippet defines the CalculatePermissionsCallback type alias. It represents a function that takes a PermissionSet object as its argument and returns void. This type is likely used for callbacks related to permission calculations in the ioBroker.js-controller adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/CalculatePermissionsCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CalculatePermissionsCallback = (result: PermissionSet) => void;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition - PartialSystemConfigObject\nDESCRIPTION: Interface extending Partial<Omit<SystemConfigObject, 'common'>> with properties for system configuration including object ID, ACL, common settings, enums, metadata and timestamps.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/PartialSystemConfigObject.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface PartialSystemConfigObject extends Partial<Omit<SystemConfigObject, 'common'>> {\n    _id?: string;\n    acl?: ObjectACL;\n    common?: Partial<SystemConfigCommon>;\n    enums?: Record<string, string | Translated>;\n    from?: string;\n    native?: Record<string, any>;\n    nonEdit?: NonEditable;\n    ts?: number;\n    type?: \"config\";\n    user?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstalledFrom Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition that creates a branded type for the installation source of ioBroker adapters and instances. Uses string as the base type with a 'InstalledFrom' brand identifier.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/InstalledFrom.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype InstalledFrom = Branded<string, \"InstalledFrom\">\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named Enum. It represents a string that starts with 'enum.' followed by any string content. This type is likely used for naming or identifying enumerations within the ioBroker system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Enum.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Enum = `enum.${string}`;\n```\n\n----------------------------------------\n\nTITLE: Defining StopParameters Interface in TypeScript\nDESCRIPTION: This code snippet defines the StopParameters interface with optional properties for exitCode and reason. It is extended by the InternalStopParameters interface.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/StopParameters.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface StopParameters {\n    exitCode?: number;\n    reason?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Response Interface for Controller Upgrade in TypeScript\nDESCRIPTION: Defines the interface for the server response during the controller upgrade process. It includes properties for the upgrade status, stderr and stdout logs, and success indicator.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ServerResponse {\n    /** If the update is still running */\n    running: boolean;\n    /** Stderr log during the upgrade */\n    stderr: string[];\n    /** Stdout log during the upgrade */\n    stdout: string[];\n    /** If installation process succeeded */\n    success?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification System Schema in JSON\nDESCRIPTION: Example JSON configuration for the ioBroker notification system, demonstrating how to define notification scopes, categories, and localized messages. This configuration shows the system scope with memory issues category as an example.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notifications\": [\n    {\n      \"scope\": \"system\",\n      \"name\": {\n        \"en\": \"System Notifications\",\n        \"de\": \"System-Benachrichtigungen\",\n        \"ru\": \"Системные уведомления\",\n        \"pt\": \"Notificações do sistema\",\n        \"nl\": \"Systeemmeldingen\",\n        \"fr\": \"Notifications système\",\n        \"it\": \"Notifiche di sistema\",\n        \"es\": \"Notificaciones del sistema\",\n        \"pl\": \"Powiadomienia systemowe\",\n        \"zh-cn\": \"系统通知\"\n      },\n      \"description\": {\n        \"en\": \"These notifications are collected by the ioBroker system and point to issues you should check and fix.\",\n        \"de\": \"Diese Benachrichtigungen werden vom ioBroker-System erfasst und weisen auf Probleme hin, die überprüft und behoben werden sollten.\",\n        \"ru\": \"Эти уведомления собираются системой ioBroker и указывают на проблемы, которые вы должны проверить и исправить.\",\n        \"pt\": \"Essas notificações são coletadas pelo sistema ioBroker e apontam para problemas que você deve verificar e corrigir.\",\n        \"nl\": \"Deze meldingen worden verzameld door het ioBroker-systeem en wijzen op problemen die u moet controleren en oplossen.\",\n        \"fr\": \"Ces notifications sont collectées par le système ioBroker et indiquent des problèmes que vous devez vérifier et résoudre.\",\n        \"it\": \"Queste notifiche vengono raccolte dal sistema ioBroker e indicano problemi che dovresti controllare e correggere.\",\n        \"es\": \"Estas notificaciones son recopiladas por el sistema ioBroker y señalan problemas que debe verificar y solucionar.\",\n        \"pl\": \"Te powiadomienia są zbierane przez system ioBroker i wskazują problemy, które należy sprawdzić i naprawić.\",\n        \"zh-cn\": \"这些通知由ioBroker系统收集，并指出您应检查并修复的问题\"\n      },\n      \"categories\": [\n        {\n          \"category\": \"memIssues\",\n          \"name\": {\n            \"en\": \"Issues with RAM availability\",\n            \"de\": \"Probleme mit der Arbeitsspeicher-Verfügbarkeit\",\n            \"ru\": \"Проблемы с доступностью оперативной памяти\",\n            \"pt\": \"Problemas com disponibilidade de RAM\",\n            \"nl\": \"Problemen met de beschikbaarheid van RAM\",\n            \"fr\": \"Problèmes de disponibilité de la RAM\",\n            \"it\": \"Problemi con la disponibilità della RAM\",\n            \"es\": \"Problemas con la disponibilidad de RAM\",\n            \"pl\": \"Problemy z dostępnością pamięci RAM\",\n            \"zh-cn\": \"RAM可用性问题\"\n          },\n          \"severity\": \"alert\",\n          \"description\": {\n            \"en\": \"Your system is running out of memory. Please check the number of running adapters and processes or if single processes need too many memory.\",\n            \"de\": \"Es steht nicht genug Arbeitsspeicher zur Verfügung. Die Anzahl der laufenden Adapter und Prozesse sollte geprüft werden, oder ob einzelne Prozesse zuviel Speicher benötigen.\",\n            \"ru\": \"В вашей системе не хватает памяти. Пожалуйста, проверьте количество работающих адаптеров и процессов, или если отдельным процессам требуется слишком много памяти.\",\n            \"pt\": \"Seu sistema está ficando sem memória. Verifique o número de adaptadores e processos em execução ou se processos únicos precisam de muita memória.\",\n            \"nl\": \"Uw systeem heeft onvoldoende geheugen. Controleer het aantal actieve adapters en processen of als afzonderlijke processen te veel geheugen nodig hebben.\",\n            \"fr\": \"Votre système manque de mémoire. Veuillez vérifier le nombre d'adaptateurs et de processus en cours d'exécution ou si des processus uniques nécessitent trop de mémoire.\",\n            \"it\": \"Il tuo sistema sta esaurendo la memoria. Controllare il numero di adattatori e processi in esecuzione o se i singoli processi richiedono troppa memoria.\",\n            \"es\": \"Su sistema se está quedando sin memoria. Verifique el número de adaptadores y procesos en ejecución o si los procesos individuales necesitan demasiada memoria.\",\n            \"pl\": \"W Twoim systemie kończy się pamięć. Sprawdź liczbę działających adapterów i procesów lub czy pojedyncze procesy wymagają zbyt dużej ilości pamięci.\",\n            \"zh-cn\": \"您的系统内存不足。请检查正在运行的适配器和进程的数量，或者单个进程是否需要太多内存。\"\n          },\n          \"regex\": [\n            \"^Exception-Code: ENOMEM\",\n            \"buffer allocation failed\"\n          ],\n          \"limit\": 10\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Object Asynchronously in TypeScript\nDESCRIPTION: The marked deprecated setObjectAsync allows asynchronous setting of objects within storage, favoring the updated setObject without a callback. It highlights the transition in strategic API utilization and returns a corresponding promise.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/classes/ObjectsInRedisClient.md#2025-04-21_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetObjectAsync(id, obj, options?): Promise<undefined | object>\n```\n\n----------------------------------------\n\nTITLE: Defining GetSessionCallback Type in TypeScript\nDESCRIPTION: TypeScript type alias definition for a callback function that handles session information. The callback takes a Session object parameter and returns void.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/GetSessionCallback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nGetSessionCallback: (session) => void\n```\n\n----------------------------------------\n\nTITLE: Defining PartialChartObject Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named PartialChartObject that references the ChartObject interface. It's defined in the objects.d.ts file within the types-dev package.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/PartialChartObject.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype PartialChartObject = ChartObject\n```\n\n----------------------------------------\n\nTITLE: Deleting Channels in TypeScript\nDESCRIPTION: Deprecated methods for deleting channels and their underlying structure. Replaced by delObject method.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteChannel(channelName: string, callback?: ErrorCallback): void\ndeleteChannel(channelName: string, options?: unknown, callback?: ErrorCallback): void\ndeleteChannel(parentDevice: string, channelName: string, options?: unknown, callback?: ErrorCallback): void\n```\n\n----------------------------------------\n\nTITLE: Defining deprecated welcomeScreen property in TypeScript interface\nDESCRIPTION: Deprecated property definition for a list of pages that should be shown on the web index page. Replaced by localLinks.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **welcomeScreen**: [`WelcomeScreenEntry`](../type-aliases/WelcomeScreenEntry.md)[]\n```\n\n----------------------------------------\n\nTITLE: Defining Optional License Information Property in TypeScript\nDESCRIPTION: Defines an optional 'licenseInformation' property to represent detailed license information for the adapter.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nlicenseInformation?: LicenseInformation;\n```\n\n----------------------------------------\n\nTITLE: metaNamespace Property Definition\nDESCRIPTION: Describes the `metaNamespace` property of the `ObjectsSettings` interface. This optional property defines the namespace for metadata within the object database. Namespaces help organize and separate metadata related to different parts of the system.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/ObjectsSettings.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * `optional` **metaNamespace**: `string`\n */\n```\n\n----------------------------------------\n\nTITLE: Defining Misc Type Alias in TypeScript\nDESCRIPTION: Creates a type alias for ioBroker system paths that can either be system host paths with dynamic segments or userdata paths. The type enforces specific string patterns for object identifiers.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/Misc.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Misc = `system.host.${string}.${string}` | `0_userdata.0.${string}`\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Non-deletable Flag in TypeScript\nDESCRIPTION: Defines an optional 'nondeletable' boolean property. When true, this adapter cannot be deleted or updated manually.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/interfaces/AdapterCommon.md#2025-04-21_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nnondeletable?: true;\n```\n\n----------------------------------------\n\nTITLE: Changing File Ownership in JavaScript\nDESCRIPTION: Function to update file owner and group. Takes adapter name, file path, options object with owner and ownerGroup, and a callback function. Returns processed files with new ownership.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/classes/AdapterClass.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nadapter.chownFile('vis-2.0', '/main/vis-views.json', {owner: 'newOwner', ownerGroup: 'newgroup'}, function (err, processed) {\n  if (err) adapter.log.error('Cannot read file: ' + err);\n  adapter.log.info('New files: ' + JSON.stringify(processed));\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for ioBroker.js-controller\nDESCRIPTION: Command to install project dependencies using npm with ignore-scripts flag to prevent preinstall script execution, as it requires the project to be built first.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --ignore-scripts\n```\n\n----------------------------------------\n\nTITLE: Defining CheckStateCommand Type in TypeScript\nDESCRIPTION: Defines a union type for state manipulation commands in ioBroker, including getState, setState, and delState operations.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/CheckStateCommand.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckStateCommand = \"getState\" | \"setState\" | \"delState\"\n```\n\n----------------------------------------\n\nTITLE: Defining LicenseInformation Type Alias in TypeScript\nDESCRIPTION: Type alias declaration that combines two possible license information interfaces - LicenseInformationFree and LicenseInformationWithPayment. Used to specify the licensing details for ioBroker adapters.\nSOURCE: https://github.com/iobroker/iobroker.js-controller/blob/master/packages/controller/doc/-internal-/type-aliases/LicenseInformation.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nLicenseInformation: LicenseInformationFree | LicenseInformationWithPayment\n```"
  }
]