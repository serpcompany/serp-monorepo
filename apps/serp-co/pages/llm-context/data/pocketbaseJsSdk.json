[
  {
    "owner": "pocketbase",
    "repo": "js-sdk",
    "content": "TITLE: Querying Records with RecordService in JavaScript\nDESCRIPTION: Demonstrates various CRUD operations using the RecordService, including fetching, creating, updating, and deleting records.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns a paginated records list.\n🔓 pb.collection(collectionIdOrName).getList(page = 1, perPage = 30, options = {});\n\n// Returns a list with all records batch fetched at once\n// (by default 200 items per request; to change it set the `batch` param).\n🔓 pb.collection(collectionIdOrName).getFullList(options = {});\n\n// Returns the first found record matching the specified filter.\n🔓 pb.collection(collectionIdOrName).getFirstListItem(filter, options = {});\n\n// Returns a single record by its id.\n🔓 pb.collection(collectionIdOrName).getOne(recordId, options = {});\n\n// Creates (aka. register) a new record.\n🔓 pb.collection(collectionIdOrName).create(bodyParams = {}, options = {});\n\n// Updates an existing record by its id.\n🔓 pb.collection(collectionIdOrName).update(recordId, bodyParams = {}, options = {});\n\n// Deletes a single record by its id.\n🔓 pb.collection(collectionIdOrName).delete(recordId, options = {});\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users with RecordService in JavaScript\nDESCRIPTION: Illustrates various authentication methods for auth-type collections, including password, OTP, OAuth2, and email verification processes.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns all available application auth methods.\n🔓 pb.collection(collectionIdOrName).listAuthMethods(options = {});\n\n// Authenticates a record with their username/email and password.\n🔓 pb.collection(collectionIdOrName).authWithPassword(usernameOrEmail, password, options = {});\n\n// Authenticates a record with an OTP.\n🔓 pb.collection(collectionIdOrName).authWithOTP(otpId, password, options = {});\n\n// Authenticates a record with OAuth2 provider without custom redirects, deeplinks or even page reload.\n🔓 pb.collection(collectionIdOrName).authWithOAuth2(authConfig);\n\n// Authenticates a record with OAuth2 code.\n🔓 pb.collection(collectionIdOrName).authWithOAuth2Code(provider, code, codeVerifier, redirectUrl, createData = {}, options = {});\n\n// Refreshes the current authenticated record and auth token.\n🔐 pb.collection(collectionIdOrName).authRefresh(options = {});\n\n// Sends a record OTP email request.\n🔓 pb.collection(collectionIdOrName).requestOTP(email, options = {});\n\n// Sends a record password reset email.\n🔓 pb.collection(collectionIdOrName).requestPasswordReset(email, options = {});\n\n// Confirms a record password reset request.\n🔓 pb.collection(collectionIdOrName).confirmPasswordReset(resetToken, newPassword, newPasswordConfirm, options = {});\n\n// Sends a record verification email request.\n🔓 pb.collection(collectionIdOrName).requestVerification(email, options = {});\n\n// Confirms a record email verification request.\n🔓 pb.collection(collectionIdOrName).confirmVerification(verificationToken, options = {});\n\n// Sends a record email change request to the provider email.\n🔐 pb.collection(collectionIdOrName).requestEmailChange(newEmail, options = {});\n\n// Confirms record new email address.\n🔓 pb.collection(collectionIdOrName).confirmEmailChange(emailChangeToken, userPassword, options = {});\n\n// Lists all linked external auth providers for the specified record.\n🔐 pb.collection(collectionIdOrName).listExternalAuths(recordId, options = {});\n\n// Unlinks a single external auth provider relation from the specified record.\n🔐 pb.collection(collectionIdOrName).unlinkExternalAuth(recordId, provider, options = {});\n\n// Impersonate authenticates with the specified recordId and returns a new client with the received auth token in a memory store.\n🔐 pb.collection(collectionIdOrName).impersonate(recordId, duration, options = {});\n```\n\n----------------------------------------\n\nTITLE: Basic PocketBase SDK Usage Example\nDESCRIPTION: Provides a basic example of using the PocketBase SDK to authenticate a user and retrieve records from a collection with filtering.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport PocketBase from 'pocketbase';\n\nconst pb = new PocketBase('http://127.0.0.1:8090');\n\n...\n\n// authenticate as auth collection record\nconst userData = await pb.collection('users').authWithPassword('test@example.com', '123456');\n\n// list and filter \"example\" collection records\nconst result = await pb.collection('example').getList(1, 20, {\n    filter: 'status = true && created > \"2022-08-01 10:00:00\"'\n});\n\n// and much more...\n```\n\n----------------------------------------\n\nTITLE: Managing Realtime Subscriptions in JavaScript\nDESCRIPTION: Shows how to subscribe to and unsubscribe from realtime changes for specific topics or record IDs using the RecordService.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n// Subscribe to realtime changes to the specified topic (\"*\" or recordId).\n//\n// It is safe to subscribe multiple times to the same topic.\n//\n// You can use the returned UnsubscribeFunc to remove a single registered subscription.\n// If you want to remove all subscriptions related to the topic use unsubscribe(topic).\n🔓 pb.collection(collectionIdOrName).subscribe(topic, callback, options = {});\n\n// Unsubscribe from all registered subscriptions to the specified topic (\"*\" or recordId).\n// If topic is not set, then it will remove all registered collection subscriptions.\n🔓 pb.collection(collectionIdOrName).unsubscribe([topic]);\n```\n\n----------------------------------------\n\nTITLE: Initializing PocketBase Client in JavaScript\nDESCRIPTION: Creates a new instance of the PocketBase client with optional base URL and auth store parameters.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nconst pb = new PocketBase(baseURL = '/', authStore = LocalAuthStore);\n```\n\n----------------------------------------\n\nTITLE: Using BatchService for Multiple Operations in JavaScript\nDESCRIPTION: Demonstrates how to use the BatchService to perform multiple create, update, delete, or upsert operations in a single request.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// create a new batch instance\nconst batch = pb.createBatch();\n\n// register create/update/delete/upsert requests to the created batch\nbatch.collection('example1').create({ ... });\nbatch.collection('example2').update('RECORD_ID', { ... });\nbatch.collection('example3').delete('RECORD_ID');\nbatch.collection('example4').upsert({ ... });\n\n// send the batch request\nconst result = await batch.send()\n```\n\n----------------------------------------\n\nTITLE: Importing PocketBase in Node.js\nDESCRIPTION: Demonstrates how to import the PocketBase SDK in Node.js using either ES modules (default) or CommonJS modules.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Using ES modules (default)\nimport PocketBase from 'pocketbase'\n\n// OR if you are using CommonJS modules\nconst PocketBase = require('pocketbase/cjs')\n```\n\n----------------------------------------\n\nTITLE: Sending Batch/Transactional Requests with PocketBase JS SDK\nDESCRIPTION: Example demonstrating how to use the batch API to send multiple operations (create, update, delete, upsert) in a single transaction. This feature was introduced in version 0.22.0 and works with PocketBase v0.23.0+.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst batch = pb.createBatch();\n\nbatch.collection(\"example1\").create({ ... });\nbatch.collection(\"example2\").update(\"RECORD_ID\", { ... });\nbatch.collection(\"example3\").delete(\"RECORD_ID\");\nbatch.collection(\"example4\").upsert({ ... });\n\nconst result = await batch.send();\n```\n\n----------------------------------------\n\nTITLE: Using AuthStore Change Listeners\nDESCRIPTION: Demonstrates how to register listeners for changes in the authentication store, allowing your application to react to auth state changes.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// triggered everytime on store change\nconst removeListener1 = pb.authStore.onChange((token, record) => {\n    console.log('New store data 1:', token, record)\n});\n\n// triggered once right after registration and everytime on store change\nconst removeListener2 = pb.authStore.onChange((token, record) => {\n    console.log('New store data 2:', token, record)\n}, true);\n\n// (optional) removes the attached listeners\nremoveListener1();\nremoveListener2();\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Definitions in PocketBase JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to specify custom TypeScript definitions for Record models using generics in the PocketBase SDK. It also shows an alternative approach using type assertion for defining a global typed PocketBase instance.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Task {\n  // type the collection fields you want to use...\n  id:   string;\n  name: string;\n}\n\npb.collection('tasks').getList<Task>(1, 20) // -> results in Promise<ListResult<Task>>\npb.collection('tasks').getOne<Task>(\"RECORD_ID\")  // -> results in Promise<Task>\n```\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Task {\n  id:   string;\n  name: string;\n}\n\ninterface Post {\n  id:     string;\n  title:  string;\n  active: boolean;\n}\n\ninterface TypedPocketBase extends PocketBase {\n  collection(idOrName: string): RecordService // default fallback for any other collection\n  collection(idOrName: 'tasks'): RecordService<Task>\n  collection(idOrName: 'posts'): RecordService<Post>\n}\n\n...\n\nconst pb = new PocketBase(\"http://127.0.0.1:8090\") as TypedPocketBase;\n\npb.collection('tasks').getOne(\"RECORD_ID\") // -> results in Promise<Task>\npb.collection('posts').getOne(\"RECORD_ID\") // -> results in Promise<Post>\n```\n\n----------------------------------------\n\nTITLE: Implementing Send Hooks in PocketBase JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to use the beforeSend and afterSend hooks in the PocketBase SDK. These hooks allow for global modification of request data and customization of the response.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst pb = new PocketBase('http://127.0.0.1:8090');\n\npb.beforeSend = function (url, options) {\n    // For list of the possible request options properties check\n    // https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n    options.headers = Object.assign({}, options.headers, {\n        'X-Custom-Header': 'example',\n    });\n\n    return { url, options };\n};\n\n// use the created client as usual...\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst pb = new PocketBase('http://127.0.0.1:8090');\n\npb.afterSend = function (response, data) {\n    // do something with the response state\n    console.log(response.status);\n\n    return Object.assign(data, {\n        // extend the data...\n        \"additionalField\": 123,\n    });\n};\n\n// use the created client as usual...\n```\n\n----------------------------------------\n\nTITLE: Integrating PocketBase with Next.js SSR in JavaScript\nDESCRIPTION: Demonstrates how to create a PocketBase client for use in Next.js getServerSideProps functions, including loading auth data from a cookie and refreshing the auth state.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nimport PocketBase from 'pocketbase';\n\n// you can place this helper in a separate file so that it can be reused\nasync function initPocketBase(req, res) {\n  const pb = new PocketBase('http://127.0.0.1:8090');\n\n  // load the store data from the request cookie string\n  pb.authStore.loadFromCookie(req?.headers?.cookie || '');\n\n  // send back the default 'pb_auth' cookie to the client with the latest store state\n  pb.authStore.onChange(() => {\n    res?.setHeader('set-cookie', pb.authStore.exportToCookie());\n  });\n\n  try {\n      // get an up-to-date auth store state by verifying and refreshing the loaded auth record (if any)\n      pb.authStore.isValid && await pb.collection('users').authRefresh();\n  } catch (_) {\n      // clear the auth store on failed refresh\n      pb.authStore.clear();\n  }\n\n  return pb\n}\n\nexport async function getServerSideProps({ req, res }) {\n  const pb = await initPocketBase(req, res)\n\n  // fetch example records...\n  const result = await pb.collection('example').getList(1, 30);\n\n  return {\n    props: {\n      // ...\n    },\n  }\n}\n\nexport default function Home() {\n  return (\n    <div>Hello world!</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PocketBase AuthStore from Cookie in JavaScript\nDESCRIPTION: Demonstrates how to load PocketBase AuthStore data from a cookie string and export it back to a cookie. These methods are useful for SSR integrations.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// update the store with the parsed data from the cookie string\npb.authStore.loadFromCookie('pb_auth=...');\n\n// exports the store data as cookie, with option to extend the default SameSite, Secure, HttpOnly, Path and Expires attributes\npb.authStore.exportToCookie({ httpOnly: false }); // Output: 'pb_auth=...'\n```\n\n----------------------------------------\n\nTITLE: Typed PocketBase Collection Usage in TypeScript\nDESCRIPTION: Illustrates how to use TypeScript generics with RecordService to achieve typed collections in PocketBase.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Task {\n  id:   string;\n  name: string;\n}\n\ninterface Post {\n  id:     string;\n  title:  string;\n  active: boolean;\n}\n\ninterface TypedPocketBase extends PocketBase {\n  collection(idOrName: string): RecordService // default fallback for any other collection\n  collection(idOrName: 'tasks'): RecordService<Task>\n  collection(idOrName: 'posts'): RecordService<Post>\n}\n\n...\n\nconst pb = new PocketBase(\"http://127.0.0.1:8090\") as TypedPocketBase;\n\n// the same as pb.collection('tasks').getOne<Task>(\"RECORD_ID\")\nawait pb.collection('tasks').getOne(\"RECORD_ID\") // -> results in Task\n\n// the same as pb.collection('posts').getOne<Post>(\"RECORD_ID\")\nawait pb.collection('posts').getOne(\"RECORD_ID\") // -> results in Post\n```\n\n----------------------------------------\n\nTITLE: File Upload with PocketBase Using Plain Object\nDESCRIPTION: Shows how to upload files to PocketBase using a plain object with File/Blob properties. The SDK will automatically convert this to FormData.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = {\n  'title':    'lorem ipsum...',\n  'document': new File(...),\n};\n\nawait pb.collection('example').create(data);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Auth Store\nDESCRIPTION: Shows how to create a custom authentication store by extending the BaseAuthStore class, allowing for custom business logic when handling authentication.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport PocketBase, { BaseAuthStore } from 'pocketbase';\n\nclass CustomAuthStore extends BaseAuthStore {\n    save(token, model) {\n        super.save(token, model);\n\n        // your custom business logic...\n    }\n}\n\nconst pb = new PocketBase('http://127.0.0.1:8090', new CustomAuthStore());\n```\n\n----------------------------------------\n\nTITLE: Integrating PocketBase with SvelteKit SSR in JavaScript\nDESCRIPTION: Shows how to create a PocketBase client in a SvelteKit hook handle, load auth data from a cookie, refresh the auth state, and export it back to a cookie in the response.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// src/hooks.server.js\nimport PocketBase from 'pocketbase';\n\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n    event.locals.pb = new PocketBase('http://127.0.0.1:8090');\n\n    // load the store data from the request cookie string\n    event.locals.pb.authStore.loadFromCookie(event.request.headers.get('cookie') || '');\n\n    try {\n        // get an up-to-date auth store state by verifying and refreshing the loaded auth model (if any)\n        event.locals.pb.authStore.isValid && await event.locals.pb.collection('users').authRefresh();\n    } catch (_) {\n        // clear the auth store on failed refresh\n        event.locals.pb.authStore.clear();\n    }\n\n    const response = await resolve(event);\n\n    // send back the default 'pb_auth' cookie to the client with the latest store state\n    response.headers.append('set-cookie', event.locals.pb.authStore.exportToCookie());\n\n    return response;\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with OAuth2 in JavaScript\nDESCRIPTION: Demonstrates how to use the simplified authWithOAuth2() method to authenticate with OAuth2 providers in PocketBase v0.15.0+. This method uses a popup window and realtime subscription for authentication.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst authData = await pb.collection('users').authWithOAuth2({\n  provider: 'google'\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Settings with SettingsService in JavaScript\nDESCRIPTION: Demonstrates operations related to app settings, including retrieving all settings, updating settings, testing S3 storage connections, sending test emails, and generating Apple OAuth2 client secrets.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns a map with all available app settings.\n🔐 pb.settings.getAll(options = {});\n\n// Bulk updates app settings.\n🔐 pb.settings.update(bodyParams = {}, options = {});\n\n// Performs a S3 storage connection test.\n🔐 pb.settings.testS3(filesystem = \"storage\", options = {});\n\n// Sends a test email (verification, password-reset, email-change).\n🔐 pb.settings.testEmail(collectionIdOrName, toEmail, template, options = {});\n\n// Generates a new Apple OAuth2 client secret.\n🔐 pb.settings.generateAppleClientSecret(clientId, teamId, keyId, privateKey, duration, options = {});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Auto Cancellation in PocketBase JavaScript SDK\nDESCRIPTION: This snippet demonstrates the auto cancellation feature of the PocketBase SDK. It shows how duplicate requests are automatically cancelled, and how to modify this behavior using the requestKey parameter or by globally disabling auto cancellation.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npb.collection('example').getList(1, 20) // cancelled\npb.collection('example').getList(2, 20) // cancelled\npb.collection('example').getList(3, 20) // executed\n```\n\nLANGUAGE: javascript\nCODE:\n```\npb.collection('example').getList(1, 20);                        // cancelled\npb.collection('example').getList(1, 20);                        // executed\npb.collection('example').getList(1, 20, { requestKey: \"test\" }) // cancelled\npb.collection('example').getList(1, 20, { requestKey: \"test\" }) // executed\npb.collection('example').getList(1, 20, { requestKey: null })   // executed\npb.collection('example').getList(1, 20, { requestKey: null })   // executed\n\n// globally disable auto cancellation\npb.autoCancellation(false);\n\npb.collection('example').getList(1, 20); // executed\npb.collection('example').getList(1, 20); // executed\npb.collection('example').getList(1, 20); // executed\n```\n\n----------------------------------------\n\nTITLE: Handling Multi-factor Authentication (MFA) in PocketBase JS SDK\nDESCRIPTION: Example demonstrating how to handle Multi-factor Authentication flows when enabled. This feature was introduced in version 0.22.0 and requires PocketBase v0.23.0+.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await pb.collection(\"users\").authWithPassword(\"test@example.com\", \"1234567890\");\n} catch (err) {\n  const mfaId = err.response?.mfaId;\n  if (!mfaId) {\n    throw err; // not mfa -> rethrow\n  }\n\n  // the user needs to authenticate again with another auth method, for example OTP\n  const result = await pb.collection(\"users\").requestOTP(\"test@example.com\");\n  // ... show a modal for users to check their email and to enter the received code ...\n  await pb.collection(\"users\").authWithOTP(result.otpId, \"EMAIL_CODE\", { \"mfaId\": mfaId });\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Files with FileService in JavaScript\nDESCRIPTION: Shows how to generate file URLs and request private file access tokens using the FileService.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// Builds and returns an absolute record file url for the provided filename.\n🔓 pb.files.getURL(record, filename, options = {});\n\n// Requests a new private file access token for the current authenticated record.\n🔐 pb.files.getToken(options = {});\n```\n\n----------------------------------------\n\nTITLE: Using PocketBase in SvelteKit Server-Side Actions in JavaScript\nDESCRIPTION: Demonstrates how to use the PocketBase instance created in the hook handle within a server-side action in SvelteKit.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// src/routes/login/+server.js\n/**\n * Creates a `POST /login` server-side endpoint\n *\n * @type {import('./$types').RequestHandler}\n */\nexport async function POST({ request, locals }) {\n    const { email, password } = await request.json();\n\n    const { token, record } = await locals.pb.collection('users').authWithPassword(email, password);\n\n    return new Response('Success...');\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload with PocketBase Using FormData\nDESCRIPTION: Demonstrates how to upload files to PocketBase by manually creating a FormData object and setting the desired fields and files.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// the standard way to create multipart/form-data body\nconst data = new FormData();\ndata.set('title', 'lorem ipsum...')\ndata.set('document', new File(...))\n\nawait pb.collection('example').create(data);\n```\n\n----------------------------------------\n\nTITLE: Collection API Migration Examples\nDESCRIPTION: Shows the migration path from old records API to new collection-based API structure. Demonstrates how to update existing code to use the new pb.collection() methods.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npb.records.getFullList('example');                => pb.collection('example').getFullList();\npb.records.getList('example');                    => pb.collection('example').getList();\npb.records.getOne('example', 'RECORD_ID');        => pb.collection('example').getOne('RECORD_ID');\n(no old equivalent)                               => pb.collection('example').getFirstListItem(filter);\npb.records.create('example', {...});              => pb.collection('example').create({...});\npb.records.update('example', 'RECORD_ID', {...}); => pb.collection('example').update('RECORD_ID', {...});\npb.records.delete('example', 'RECORD_ID');        => pb.collection('example').delete('RECORD_ID');\n```\n\n----------------------------------------\n\nTITLE: Using RealtimeService for PocketBase Subscriptions in JavaScript\nDESCRIPTION: Methods for managing realtime subscriptions including subscribe, unsubscribe, and connection status checking. This service is primarily used for custom realtime actions, while record-specific subscriptions are handled via pb.collection().\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// Initialize the realtime connection (if not already) and register the subscription listener.\n//\n// You can subscribe to the `PB_CONNECT` event if you want to listen to the realtime connection connect/reconnect events.\n🔓 pb.realtime.subscribe(topic, callback, options = {});\n\n// Unsubscribe from all subscription listeners with the specified topic.\n🔓 pb.realtime.unsubscribe(topic?);\n\n// Unsubscribe from all subscription listeners starting with the specified topic prefix.\n🔓 pb.realtime.unsubscribeByPrefix(topicPrefix);\n\n// Unsubscribe from all subscriptions matching the specified topic and listener function.\n🔓 pb.realtime.unsubscribeByTopicAndListener(topic, callback);\n\n// Getter that checks whether the realtime connection has been established.\npb.realtime.isConnected\n\n// An optional hook that is invoked when the realtime client disconnects\n// either when unsubscribing from all subscriptions or when the connection\n// was interrupted or closed by the server.\n//\n// Note that the realtime client autoreconnect on its own and this hook is\n// useful only for the cases where you want to apply a special behavior on\n// server error or after closing the realtime connection.\npb.realtime.onDisconnect = function(activeSubscriptions)\n```\n\n----------------------------------------\n\nTITLE: Integrating PocketBase with Nuxt 3 SSR in JavaScript\nDESCRIPTION: Demonstrates how to create a PocketBase client in a Nuxt 3 plugin, load auth data from a cookie, refresh the auth state, and provide it to the nuxtApp instance.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// plugins/pocketbase.js\nimport PocketBase from 'pocketbase';\n\nexport default defineNuxtPlugin(async () => {\n  const pb = new PocketBase('http://127.0.0.1:8090');\n\n  const cookie = useCookie('pb_auth', {\n    path:     '/',\n    secure:   true,\n    sameSite: 'strict',\n    httpOnly: false, // change to \"true\" if you want only server-side access\n    maxAge:   604800,\n  })\n\n  // load the store data from the cookie value\n  pb.authStore.save(cookie.value?.token, cookie.value?.record);\n\n  // send back the default 'pb_auth' cookie to the client with the latest store state\n  pb.authStore.onChange(() => {\n    cookie.value = {\n      token: pb.authStore.token,\n      record: pb.authStore.record,\n    };\n  });\n\n  try {\n      // get an up-to-date auth store state by verifying and refreshing the loaded auth model (if any)\n      pb.authStore.isValid && await pb.collection('users').authRefresh();\n  } catch (_) {\n      // clear the auth store on failed refresh\n      pb.authStore.clear();\n  }\n\n  return {\n    provide: { pb }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using AsyncAuthStore with React Native\nDESCRIPTION: Demonstrates how to use AsyncAuthStore with React Native's AsyncStorage for persisting authentication state in React Native applications.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport PocketBase, { AsyncAuthStore } from 'pocketbase';\n\nconst store = new AsyncAuthStore({\n    save:    async (serialized) => AsyncStorage.setItem('pb_auth', serialized),\n    initial: AsyncStorage.getItem('pb_auth'),\n});\n\nconst pb = new PocketBase('http://127.0.0.1:8090', store)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with OTP (Email Code) in PocketBase JS SDK\nDESCRIPTION: Example showing how to authenticate using One-Time Password (email code). This feature was added in version 0.22.0 and requires PocketBase v0.23.0+.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = await pb.collection(\"users\").requestOTP(\"test@example.com\");\n\n// ... show a modal for users to check their email and to enter the received code ...\n\nawait pb.collection(\"users\").authWithOTP(result.otpId, \"EMAIL_CODE\");\n```\n\n----------------------------------------\n\nTITLE: Integrating PocketBase with Astro SSR in TypeScript\nDESCRIPTION: Demonstrates how to create a PocketBase client in an Astro middleware, load auth data from a cookie, refresh the auth state, and export it back to a cookie in the response.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// src/middleware/index.ts\nimport PocketBase from 'pocketbase';\n\nimport { defineMiddleware } from 'astro/middleware';\n\nexport const onRequest = defineMiddleware(async ({ locals, request }: any, next: () => any) => {\n    locals.pb = new PocketBase('http://127.0.0.1:8090');\n\n    // load the store data from the request cookie string\n    locals.pb.authStore.loadFromCookie(request.headers.get('cookie') || '');\n\n    try {\n        // get an up-to-date auth store state by verifying and refreshing the loaded auth record (if any)\n        locals.pb.authStore.isValid && await locals.pb.collection('users').authRefresh();\n    } catch (_) {\n        // clear the auth store on failed refresh\n        locals.pb.authStore.clear();\n    }\n\n    const response = await next();\n\n    // send back the default 'pb_auth' cookie to the client with the latest store state\n    response.headers.append('set-cookie', locals.pb.authStore.exportToCookie());\n\n    return response;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Filter Parameters with PocketBase\nDESCRIPTION: Demonstrates how to use the pb.filter() helper method to generate a filter string with placeholder parameters securely, preventing string injection attacks.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst records = await pb.collection(\"example\").getList(1, 20, {\n  // the same as: \"title ~ 'te\\\\'st' && (totalA = 123 || totalB = 123)\"\n  filter: pb.filter(\"title ~ {:title} && (totalA = {:num} || totalB = {:num})\", { title: \"te'st\", num: 123 })\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Collection with Filters in JavaScript\nDESCRIPTION: Shows how to subscribe to a collection with additional parameters like filter, expand, and fields in PocketBase v0.20.0+.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npb.collection(\"example\").subscribe(\"*\", (e) => {\n  ...\n}, { filter: \"someField > 10\" });\n```\n\n----------------------------------------\n\nTITLE: Using Custom Request Options in PocketBase JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to use custom request options in the PocketBase SDK. It shows how to add custom headers, fetch options, and even a custom fetch implementation for a single request.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npb.collection('example').getList(1, 20, {\n    expand:          'someRel',\n    otherQueryParam: '123',\n\n    // custom headers\n    headers: {\n        'X-Custom-Header': 'example',\n    },\n\n    // custom fetch options\n    keepalive: false,\n    cache:     'no-store',\n\n    // or custom fetch implementation\n    fetch: async (url, config) => { ... },\n})\n```\n\n----------------------------------------\n\nTITLE: Admin Authentication with Auto Refresh in JavaScript\nDESCRIPTION: Shows how to use the autoRefreshThreshold option for automatic token refresh or reauthentication when authenticating as an admin in PocketBase.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait pb.admins.authWithPassword(\"test@example.com\", \"1234567890\", {\n  // This will trigger auto refresh or auto reauthentication in case\n  // the token has expired or is going to expire in the next 30 minutes.\n  autoRefreshThreshold: 30 * 60\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Collections with CollectionService in JavaScript\nDESCRIPTION: Illustrates various operations on collections, including listing, creating, updating, deleting, and importing collections.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns a paginated collections list.\n🔐 pb.collections.getList(page = 1, perPage = 30, options = {});\n\n// Returns a list with all collections batch fetched at once\n// (by default 200 items per request; to change it set the `batch` query param).\n🔐 pb.collections.getFullList(options = {});\n\n// Returns the first found collection matching the specified filter.\n🔐 pb.collections.getFirstListItem(filter, options = {});\n\n// Returns a single collection by its id or name.\n🔐 pb.collections.getOne(idOrName, options = {});\n\n// Creates (aka. register) a new collection.\n🔐 pb.collections.create(bodyParams = {}, options = {});\n\n// Updates an existing collection by its id or name.\n🔐 pb.collections.update(idOrName, bodyParams = {}, options = {});\n\n// Deletes a single collection by its id or name.\n🔐 pb.collections.delete(idOrName, options = {});\n\n// Deletes all records associated with the specified collection.\n🔐 pb.collections.truncate(idOrName, options = {});\n\n// Imports the provided collections.\n🔐 pb.collections.import(collections, deleteMissing = false, options = {});\n\n// Returns type indexed map with scaffolded collection models populated with their default field values.\n🔐 pb.collections.getScaffolds(options = {});\n```\n\n----------------------------------------\n\nTITLE: User Impersonation with PocketBase JS SDK\nDESCRIPTION: Example showing how superusers can impersonate other users by generating a temporary auth token. This feature was added in version 0.22.0 and requires PocketBase v0.23.0+.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// authenticate as superusers (with v0.23.0 admins is converted to a special system auth collection \"_superusers\"):\nawait pb.collection(\"_superusers\").authWithPassword(\"test@example.com\", \"1234567890\");\n\n// impersonate\nconst impersonateClient = pb.collection(\"users\").impersonate(\"USER_RECORD_ID\", 3600 /* optional token duration in seconds */)\n\n// log the impersonate token and user data\nconsole.log(impersonateClient.authStore.token);\nconsole.log(impersonateClient.authStore.record);\n\n// send requests as the impersonated user\nimpersonateClient.collection(\"example\").getFullList();\n```\n\n----------------------------------------\n\nTITLE: Defining PocketBase Types for SvelteKit in TypeScript\nDESCRIPTION: Shows how to add PocketBase type definitions to the global App.Locals interface for proper type detection in SvelteKit.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// src/app.d.ts\nimport PocketBase from 'pocketbase';\n\ndeclare global {\n    declare namespace App {\n        interface Locals {\n            pb: PocketBase\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Backups with BackupService in PocketBase JavaScript SDK\nDESCRIPTION: Methods for handling application backups including listing, creating, uploading, downloading, deleting, and restoring backups. These operations require admin authentication as indicated by the lock icon.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns list with all available backup files.\n🔐 pb.backups.getFullList(options = {});\n\n// Initializes a new backup.\n🔐 pb.backups.create(basename = \"\", options = {});\n\n// Upload an existing app data backup.\n🔐 pb.backups.upload({ file: File/Blob }, options = {});\n\n// Deletes a single backup by its name.\n🔐 pb.backups.delete(key, options = {});\n\n// Initializes an app data restore from an existing backup.\n🔐 pb.backups.restore(key, options = {});\n\n// Builds a download url for a single existing backup using a\n// superuser file token and the backup file key.\n🔐 pb.backups.getDownloadURL(token, key);\n```\n\n----------------------------------------\n\nTITLE: Using AsyncAuthStore with React Native in JavaScript\nDESCRIPTION: Demonstrates how to use the AsyncAuthStore class to integrate PocketBase with React Native's AsyncStorage for authentication state management.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport PocketBase, { AsyncAuthStore } from \"pocketbase\";\n\nconst store = new AsyncAuthStore({\n    save:    async (serialized) => AsyncStorage.setItem(\"pb_auth\", serialized),\n    initial: AsyncStorage.getItem(\"pb_auth\"),\n});\n\nconst pb = new PocketBase(\"https://example.com\", store)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with PocketBase SDK Using Promises\nDESCRIPTION: Shows how to handle errors when using the PocketBase SDK with Promise-based syntax or async/await syntax.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npb.collection('example').getList(1, 50).then((result) => {\n  // success...\n  console.log('Result:', result);\n}).catch((error) => {\n  // error...\n  console.log('Error:', error);\n});\n\n// OR if you are using the async/await syntax:\ntry {\n  const result = await pb.collection('example').getList(1, 50);\n  console.log('Result:', result);\n} catch (error) {\n  console.log('Error:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PocketBase SDK via ES Modules in Browser\nDESCRIPTION: Shows how to import the PocketBase SDK in a browser using ES modules. This approach is more modern and allows for better module handling in the browser.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n    import PocketBase from '/path/to/dist/pocketbase.es.mjs'\n\n    const pb = new PocketBase(\"https://example.com\")\n    ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing PocketBase SDK via npm for Node.js\nDESCRIPTION: Shows the npm command to install the PocketBase SDK for use in Node.js applications.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install pocketbase --save\n```\n\n----------------------------------------\n\nTITLE: Realtime Service Migration Examples\nDESCRIPTION: Demonstrates the migration of realtime subscription methods to the new collection-based approach with more general callback form.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\npb.realtime.subscribe('example', callback)           => pb.collection('example').subscribe(\"*\", callback)\npb.realtime.subscribe('example/RECORD_ID', callback) => pb.collection('example').subscribe('RECORD_ID', callback)\npb.realtime.unsubscribe('example')                   => pb.collection('example').unsubscribe(\"*\")\npb.realtime.unsubscribe('example/RECORD_ID')         => pb.collection('example').unsubscribe('RECORD_ID')\n(no old equivalent)                                  => pb.collection('example').unsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Checking API Health with HealthService in PocketBase JavaScript SDK\nDESCRIPTION: Method for checking the health status of the PocketBase API. This operation does not require authentication as indicated by the unlocked icon.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// Checks the health status of the api.\n🔓 pb.health.check(options = {});\n```\n\n----------------------------------------\n\nTITLE: Using Filter Helper in JavaScript\nDESCRIPTION: Demonstrates the use of the pb.filter() helper to construct a filter string with placeholder parameters in PocketBase.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst record = await pb.collection(\"example\").getList(1, 20, {\n  // the same as: \"title ~ 'te\\'st' && (totalA = 123 || totalB = 123)\"\n  filter: pb.filter(\"title ~ {:title} && (totalA = {:num} || totalB = {:num})\", { title: \"te'st\", num: 123 })\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Logs with LogService in JavaScript\nDESCRIPTION: Shows how to retrieve and manage logs using the LogService, including fetching log lists, individual logs, and log statistics.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns a paginated logs list.\n🔐 pb.logs.getList(page = 1, perPage = 30, options = {});\n\n// Returns a single log by its id.\n🔐 pb.logs.getOne(id, options = {});\n\n// Returns logs statistics.\n🔐 pb.logs.getStats(options = {});\n```\n\n----------------------------------------\n\nTITLE: User Authentication Migration Examples\nDESCRIPTION: Shows the migration path for user authentication methods from pb.users to the new collection-based approach.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npb.users.listAuthMethods()                                                 => pb.collection('users').listAuthMethods()\npb.users.authViaEmail(email, password)                                     => pb.collection('users').authWithPassword(usernameOrEmail, password)\npb.users.authViaOAuth2(provider, code, codeVerifier, redirectUrl)          => pb.collection('users').authWithOAuth2(provider, code, codeVerifier, redirectUrl, createData = {})\npb.users.refresh()                                                         => pb.collection('users').authRefresh()\npb.users.requestPasswordReset(email)                                       => pb.collection('users').requestPasswordReset(email)\npb.users.confirmPasswordReset(resetToken, newPassword, newPasswordConfirm) => pb.collection('users').confirmPasswordReset(resetToken, newPassword, newPasswordConfirm)\npb.users.requestVerification(email)                                        => pb.collection('users').requestVerification(email)\npb.users.confirmVerification(verificationToken)                            => pb.collection('users').confirmVerification(verificationToken)\npb.users.requestEmailChange(newEmail)                                      => pb.collection('users').requestEmailChange(newEmail)\npb.users.confirmEmailChange(emailChangeToken, password)                    => pb.collection('users').confirmEmailChange(emailChangeToken, password)\npb.users.listExternalAuths(recordId)                                       => pb.collection('users').listExternalAuths(recordId)\npb.users.unlinkExternalAuth(recordId, provider)                            => pb.collection('users').unlinkExternalAuth(recordId, provider)\n```\n\n----------------------------------------\n\nTITLE: Integrating PocketBase with Nuxt 2 SSR in JavaScript\nDESCRIPTION: Demonstrates how to create a PocketBase client in a Nuxt 2 plugin, load auth data from a cookie, refresh the auth state, and provide it to the $root context.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// plugins/pocketbase.js\nimport PocketBase from  'pocketbase';\n\nexport default async (ctx, inject) => {\n  const pb = new PocketBase('http://127.0.0.1:8090');\n\n  // load the store data from the request cookie string\n  pb.authStore.loadFromCookie(ctx.req?.headers?.cookie || '');\n\n  // send back the default 'pb_auth' cookie to the client with the latest store state\n  pb.authStore.onChange(() => {\n    ctx.res?.setHeader('set-cookie', pb.authStore.exportToCookie());\n  });\n\n  try {\n      // get an up-to-date auth store state by verifying and refreshing the loaded auth record (if any)\n      pb.authStore.isValid && await pb.collection('users').authRefresh();\n  } catch (_) {\n      // clear the auth store on failed refresh\n      pb.authStore.clear();\n  }\n\n  inject('pocketbase', pb);\n};\n```\n\n----------------------------------------\n\nTITLE: Admin Authentication Migration Examples\nDESCRIPTION: Shows the changes in admin authentication methods for consistency with the new collection-based handlers.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\npb.admins.authViaEmail(email, password); => pb.admins.authWithPassword(email, password);\npb.admins.refresh();                     => pb.admins.authRefresh();\n```\n\n----------------------------------------\n\nTITLE: Managing Cron Jobs with CronService in PocketBase JavaScript SDK\nDESCRIPTION: Methods for listing and running cron jobs in a PocketBase application. These operations require administrator authentication as indicated by the lock icon.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns list with all available cron jobs.\n🔐 pb.crons.getFullList(options = {});\n\n// Runs the specified cron job.\n🔐 pb.crons.run(jobId, options = {});\n```\n\n----------------------------------------\n\nTITLE: Using PocketBase in Nuxt 3 Components with JavaScript\nDESCRIPTION: Shows how to use the PocketBase instance provided by the plugin within a Nuxt 3 component.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div>\n    Show: {{ data }}\n  </div>\n</template>\n\n<script setup>\n  const { data } = await useAsyncData(async (nuxtApp) => {\n    // fetch and return all \"example\" records...\n    const records = await nuxtApp.$pb.collection('example').getFullList();\n\n    return structuredClone(records);\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding PocketBase SDK via Browser Script Tag (UMD)\nDESCRIPTION: Demonstrates how to include the PocketBase SDK in a browser via a script tag using the UMD build. This method allows you to create a PocketBase client instance directly in your HTML page.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/path/to/dist/pocketbase.umd.js\"></script>\n<script type=\"text/javascript\">\n    const pb = new PocketBase(\"https://example.com\")\n    ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to PB_CONNECT Event in JavaScript\nDESCRIPTION: Demonstrates how to subscribe to the PB_CONNECT event to listen for realtime connect/reconnect events in PocketBase.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npb.realtime.subscribe(\"PB_CONNECT\", (e) => {\n  console.log(e.clientId);\n})\n```\n\n----------------------------------------\n\nTITLE: Using PocketBase in Astro Component Scripts in TypeScript\nDESCRIPTION: Shows how to use the PocketBase instance created in the middleware within an Astro component script.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// src/pages/index.astro\n---\nconst locals = Astro.locals;\n\nconst userAuth = async () => {\n    const { token, record } = await locals.pb.collection('users').authWithPassword('test@example.com', '123456');\n\n    return new Response('Success...');\n};\n---\n```\n\n----------------------------------------\n\nTITLE: Using the Files Service in JavaScript\nDESCRIPTION: Shows how to use the new pb.files service to get file URLs and request private file access tokens in PocketBase v0.15.0+.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Builds and returns an absolute record file url for the provided filename.\n🔓 pb.files.getUrl(record, filename, queryParams = {});\n\n// Requests a new private file access token for the current auth model (admin or record).\n🔐 pb.files.getToken(queryParams = {});\n```\n\n----------------------------------------\n\nTITLE: Updated Authentication Response Types\nDESCRIPTION: Shows the updated return types for authentication confirmation methods that now return boolean promises instead of tokens.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\npb.admins.confirmPasswordReset(...): Promise<bool>\npb.collection(\"users\").confirmPasswordReset(...): Promise<bool>\npb.collection(\"users\").confirmVerification(...): Promise<bool>\npb.collection(\"users\").confirmEmailChange(...): Promise<bool>\n```\n\n----------------------------------------\n\nTITLE: Using PocketBase in Nuxt 2 Components with JavaScript\nDESCRIPTION: Shows how to use the PocketBase instance provided by the plugin within a Nuxt 2 component.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n<template>\n  <div>\n    Show: {{ items }}\n  </div>\n</template>\n\n<script>\n  export default {\n    async asyncData({ $pocketbase }) {\n      // fetch and return all \"example\" records...\n      const items = await $pocketbase.collection('example').getFullList();\n\n      return { items }\n    }\n  }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading EventSource Polyfill for Realtime Subscriptions\nDESCRIPTION: Demonstrates how to load an EventSource polyfill for Node.js or React Native environments to enable realtime subscriptions functionality.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// for server: npm install eventsource --save\nimport { EventSource } from \"eventsource\";\n\n// for React Native: npm install react-native-sse --save\nimport EventSource from \"react-native-sse\";\n\nglobal.EventSource = EventSource;\n```\n\n----------------------------------------\n\nTITLE: Health Check in JavaScript\nDESCRIPTION: Shows how to use the new pb.health.check() method to check the health status of the API service in PocketBase v0.10.0+.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\npb.health.check()\n```\n\n----------------------------------------\n\nTITLE: Loading Fetch Polyfill for Node.js < 17\nDESCRIPTION: Shows how to load a fetch() polyfill for Node.js versions earlier than 17, which is required for the SDK to work properly.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// npm install cross-fetch --save\nimport 'cross-fetch/polyfill';\n```\n\n----------------------------------------\n\nTITLE: Modifying Request URL in beforeSend Hook\nDESCRIPTION: Demonstrates the updated signature for the pb.beforeSend hook, allowing modification of the request URL in addition to options.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\npb.beforeSend = function (url, options) {\n  ...\n  return { url, options };\n}\n```\n\n----------------------------------------\n\nTITLE: Development Commands for PocketBase JavaScript SDK\nDESCRIPTION: Shell commands for development tasks including running tests, formatting code with prettier, and building for production.\nSOURCE: https://github.com/pocketbase/js-sdk/blob/master/README.md#2025-04-18_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\n# run unit tests\nnpm test\n\n# run prettier\nnpm run format\n\n# build and minify for production\nnpm run build\n```"
  }
]