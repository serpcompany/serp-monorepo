[
  {
    "owner": "safe-global",
    "repo": "safe-docs",
    "content": "TITLE: Approving Safe Transaction Hash in TypeScript\nDESCRIPTION: This snippet demonstrates the use of `protocolKit.approveTransactionHash` function to approve a Safe transaction hash. It shows how to construct a transaction and its hash and how to pass optional parameters such as `from`, `gasLimit`, `gasPrice`, `maxFeePerGas`, `maxPriorityFeePerGas`, and `nonce`. The function requires the Safe protocol-kit and a valid Safe transaction hash as input, and returns a `TransactionResult` upon successful approval.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MetaTransactionData,\n  OperationType,\n  TransactionOptions\n} from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions\n})\nconst safeTransactionHash = await protocolKit.getTransactionHash(\n  safeTransaction\n)\n\nconst options: TransactionOptions = {\n  from: '0x...', // Optional\n  gasLimit: '123', // Optional\n  gasPrice: '123', // Optional\n  maxFeePerGas: '123', // Optional\n  maxPriorityFeePerGas: '123', // Optional\n  nonce: 123 // Optional\n}\n\nconst txResponse = await protocolKit.approveTransactionHash(\n  safeTransactionHash,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Proposing a Safe Transaction (TypeScript)\nDESCRIPTION: Demonstrates creating a transaction proposal using the Protocol Kit and submitting it to the Safe Transaction Service via the API Kit. It defines transaction data (`MetaTransactionData`), creates the transaction object (`protocolKitOwner1.createTransaction`), calculates its hash (`getTransactionHash`), signs the hash (`signHash`), and proposes it using `apiKit.proposeTransaction` with required details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/propose-and-confirm-transactions.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Create transaction\nconst safeTransactionData: MetaTransactionData = {\n  to: '0x',\n  value: '1', // 1 wei\n  data: '0x',\n  operation: OperationType.Call\n}\n\nconst safeTransaction = await protocolKitOwner1.createTransaction({\n  transactions: [safeTransactionData]\n})\n\nconst safeTxHash = await protocolKitOwner1.getTransactionHash(safeTransaction)\nconst signature = await protocolKitOwner1.signHash(safeTxHash)\n\n// Propose transaction to the service\nawait apiKit.proposeTransaction({\n  safeAddress: SAFE_ADDRESS,\n  safeTransactionData: safeTransaction.data,\n  safeTxHash,\n  senderAddress: OWNER_1_ADDRESS,\n  senderSignature: signature.data\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Safe Smart Account with Protocol Kit (TypeScript)\nDESCRIPTION: Demonstrates how to initialize a new Safe Smart Account instance programmatically using the `@safe-global/protocol-kit`. This snippet configures the account with a list of owners (including an AI agent and human signers) and sets a transaction threshold. The Smart Account is deployed on-chain upon the first transaction execution initiated via this instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/human-approval.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nconst AGENT_ADDRESS = // ...\nconst AGENT_PRIVATE_KEY = // ...\nconst HUMAN_SIGNER_1_ADDRESS = // ...\nconst HUMAN_SIGNER_2_ADDRESS = // ...\nconst RPC_URL = 'https://rpc.ankr.com/eth_sepolia'\n\nconst newSafe = await Safe.init({\n  provider: RPC_URL,\n  signer: AGENT_PRIVATE_KEY,\n  safeOptions: {\n    owners: [AGENT_ADDRESS, HUMAN_SIGNER_1_ADDRESS, HUMAN_SIGNER_2_ADDRESS],\n    threshold: 2\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Safe Transaction Using Safe Protocol Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and execute a Safe transaction using the Safe Protocol Kit in TypeScript. It imports necessary types from the Safe Global types-kit and initializes transaction data before creating a Safe transaction instance. Optional transaction execution options such as gas settings and nonce can be provided. Dependencies include '@safe-global/types-kit' and a properly initialized 'protocolKit'. The snippet awaits the transaction execution, returning a transaction response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/executetransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MetaTransactionData,\n  OperationType,\n  TransactionOptions\n} from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions\n})\n\nconst options: TransactionOptions = {\n  from: '0x...', // Optional\n  gasLimit: '123', // Optional\n  gasPrice: '123', // Optional\n  maxFeePerGas: '123', // Optional\n  maxPriorityFeePerGas: '123', // Optional\n  nonce: 123 // Optional\n}\n\nconst txResponse = await protocolKit.executeTransaction(\n  safeTransaction,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing TokenWithdrawModule Safe module in Solidity\nDESCRIPTION: This Solidity contract defines a Safe module allowing token withdrawals by validating EIP-712 signatures from Safe owners. It enables transferring ERC20 tokens from the Safe to arbitrary receiver addresses upon successful signature verification. The contract uses immutable parameters for Safe and token addresses, manages nonces per beneficiary, and interacts with the Safe contract's signature checking and module transaction execution functions. Key parameters include withdrawal amount, receiver address, deadline for signature validity, and collected signatures from Safe owners. The module follows EIP-712 for typed structured data signing to secure authorization.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: LGPL-3.0\npragma solidity ^0.8.0;\nimport \"@safe-global/safe-contracts/contracts/common/Enum.sol\";\nimport \"@safe-global/safe-contracts/contracts/Safe.sol\";\n\n/**\n * @title TokenWithdrawModule\n * @dev This contract implements a Safe module that enables a user with a valid signature to\n *      transfer ERC20 tokens from a Safe contract to a specified receiver.\n */\ncontract TokenWithdrawModule {\n    bytes32 public immutable PERMIT_TYPEHASH =\n        keccak256(\n            \"TokenWithdrawModule(uint256 amount,address beneficiary,uint256 nonce,uint256 deadline)\"\n        );\n    address public immutable safeAddress;\n    address public immutable tokenAddress;\n    mapping(address => uint256) public nonces;\n\n    /**\n     * @dev Constructor function for the contract\n     * @param _tokenAddress address of the ERC20 token contract\n     * @param _safeAddress address of the Safe contract\n     */\n    constructor(address _tokenAddress, address _safeAddress) {\n        tokenAddress = _tokenAddress;\n        safeAddress = _safeAddress;\n    }\n\n    /**\n     * @dev Generates the EIP-712 domain separator for the contract.\n     *\n     * @return The EIP-712 domain separator.\n     */\n    function getDomainSeparator() private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\n                        \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n                    ),\n                    keccak256(bytes(\"TokenWithdrawModule\")),\n                    keccak256(bytes(\"1\")),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n    /**\n     * @dev Transfers the specified amount of tokens to a receiver address. The msg.sender must hold a valid signature.\n     *      The msg.sender address must be used as the `beneficiary` parameter in the EIP-712 structured data for\n     *      signature generation. However, msg.sender can specify a different `receiver` address to receive the tokens\n     *      when withdrawing the tokens.\n     * @param amount amount of tokens to be transferred\n     * @param receiver address to which the tokens will be transferred\n     * @param deadline deadline for the validity of the signature\n     * @param signatures signatures of the Safe owner(s)\n     */\n    function tokenTransfer(\n        uint amount,\n        address receiver,\n        uint256 deadline,\n        bytes memory signatures\n    ) public {\n        require(deadline >= block.timestamp, \"expired deadline\");\n\n        bytes32 signatureData = keccak256(\n            abi.encode(\n                PERMIT_TYPEHASH,\n                amount,\n                msg.sender,\n                nonces[msg.sender]++,\n                deadline\n            )\n        );\n\n        bytes32 hash = keccak256(\n            abi.encodePacked(\"\\x19\\x01\", getDomainSeparator(), signatureData)\n        );\n\n        Safe(payable(safeAddress)).checkSignatures(\n            hash,\n            abi.encodePacked(signatureData),\n            signatures\n        );\n\n        bytes memory data = abi.encodeWithSignature(\n            \"transfer(address,uint256)\",\n            receiver,\n            amount\n        );\n\n        require(\n            Safe(payable(safeAddress)).execTransactionFromModule(\n                tokenAddress,\n                0,\n                data,\n                Enum.Operation.Call\n            ),\n            \"Could not execute token transfer\"\n        );\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using the useSafe hook in a React Component (TypeScript)\nDESCRIPTION: Demonstrates importing and accessing various functions and state properties provided by the `useSafe` hook within a functional React component. This hook requires the component tree to be wrapped by `SafeProvider`. It allows easy access to Safe-related operations like checking connection status, fetching balances, transaction data, and Safe info.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n    \n    function App() {\n      const {\n        isInitialized,\n        connect,\n        disconnect,\n        isOwnerConnected,\n        isSignerConnected,\n        getBalance,\n        getChain,\n        getTransaction,\n        getTransactions,\n        getPendingTransactions,\n        getSafeInfo,\n        getSignerAddress\n      } = useSafe()\n\n      // ...\n    }\n\n    export default App\n```\n\n----------------------------------------\n\nTITLE: Creating a SafeConfig with createConfig and Chain Parameters (TypeScript)\nDESCRIPTION: This snippet shows how to construct a SafeConfig object by calling createConfig from @safe-global/safe-react-hooks, specifying the chain, provider, signer, and safeAddress. This config object can then be used in other hooks or functions, such as getSignerAddress. Dependencies include @safe-global/safe-react-hooks and a compatible Ethereum provider and signer setup; valid values for each property must be supplied.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsigneraddress.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Contract Setup with Solidity\nDESCRIPTION: This Solidity interface method 'setup' initializes the storage of the Safe contract and can only be called once per proxy to prevent unauthorized claiming. It accepts parameters defining the owners, confirmation threshold, optional delegate call data, fallback handler, and payment details for deployment fees. The function must be called with eight parameters: owners (address array), threshold (uint256), to (address), data (bytes), fallbackHandler (address), paymentToken (address), payment (uint256), and paymentReceiver (address). The snippet includes an example contract illustrating the correct calling pattern.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/setup/setup.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function setup(\n        address[] _owners,\n        uint256 _threshold,\n        address to,\n        bytes data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n}\n\ncontract Example {\n  function example() ... {\n      (ISafe safe).setup(\n        [0x..., 0x...],\n        1,\n        0x...,\n        \"0x...\",\n        0x...,\n        0x...,\n        0,\n        0x...\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Approving Safe Transaction Hash with `from` Option\nDESCRIPTION: This snippet shows how to use the optional `from` parameter when calling `approveTransactionHash`.  The `from` parameter specifies the address of the transaction sender.  It uses the `options` object to pass parameters to the function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionResponse = await protocolKit.approveTransactionHash(\n  '0x...',\n  options: {\n    from: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Safe Ownership Status in TypeScript\nDESCRIPTION: This snippet shows how to verify if a specific Ethereum address is an owner of the connected Safe by calling the asynchronous 'isOwner' method of the client. It takes an address string as input and returns a Promise that resolves to a boolean indicating ownership.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/isowner.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst address = '0x...'\n\nconst isOwner = await safeClient.isOwner(address)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit with TypeScript\nDESCRIPTION: This snippet shows how to initialize the Safe protocol kit using the 'Safe.init' method with provider, signer, and safe address. It sets up the SDK instance for subsequent transaction operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/isvalidtransaction.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol Kit - TypeScript\nDESCRIPTION: This snippet initializes the `@safe-global/protocol-kit` using the `Safe.init` method.  It sets up the necessary components for interacting with a Safe, including a provider, a signer, and the Safe's address.  Dependencies include `@safe-global/protocol-kit` and requires a provider, signer and safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initialize Safe Protocol Kit (TypeScript)\nDESCRIPTION: Shows how to initialize the `@safe-global/protocol-kit` library. This involves providing a blockchain provider, a signer, and the Safe account address. The initialized `protocolKit` instance is essential for interacting with Safe accounts, including creating and managing transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/copytransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit Instance (TypeScript)\nDESCRIPTION: Provides the necessary setup code to create an instance of the `@safe-global/protocol-kit`. This instance (`protocolKit`) is required to perform operations like creating and signing Safe transactions. It needs a provider, signer, and the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit Instance in TypeScript\nDESCRIPTION: Shows how to initialize the Safe Protocol Kit using the Safe class by providing the necessary configuration such as the blockchain provider, signer, and the Safe wallet address. This setup is essential before invoking any transaction creation methods like createSwapOwnerTx. The snippet demonstrates a basic setup pattern for obtaining a protocolKit instance used across other transaction examples in this file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createswapownertx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting baseGas\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, highlighting the `baseGas` parameter within the `safeTransactionData` object. This represents the base gas cost of the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData: {\n    operation: OperationType.Call,\n    safeTxGas: '0x...',\n    baseGas: '123',\n    gasPrice: '123',\n    gasToken: '0x...',\n    refundReceiver: '0x...',\n    nonce: '10'\n  },\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Add Owner Transactions Using Owner Address in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Safe transaction to add a new owner to a connected Safe using an owner address. It shows importing types for transaction parameters and optional properties from the @safe-global/protocol-kit and using the protocolKit instance to invoke createAddOwnerTx with the required parameters. Optional gas-related options like safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, and nonce can be included. The expected output is a SafeTransaction promise representing the addition operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createaddownertx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AddOwnerTxParams,\n  SafeTransactionOptionalProps\n} from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst params: AddOwnerTxParams = {\n  ownerAddress: '0x...'\n  threshold: 123 // Optional\n}\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createAddOwnerTx(\n  params,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SafeProvider in React App (main.tsx)\nDESCRIPTION: This code snippet shows how to configure the `SafeProvider` component in a React application using `@safe-global/safe-react-hooks`.  It imports necessary modules, creates a configuration object with chain, provider, signer, and safeAddress, and then renders the `App` component wrapped in the `SafeProvider`, passing the configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useconfirmtransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\n    import { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\n    import { sepolia } from 'viem/chains'\n    import App from './App.tsx'\n\n    const config = createConfig({\n      chain: sepolia,\n      provider,\n      signer,\n      safeAddress: '0x...'\n    })\n\n    const root = document.getElementById('root')\n    \n    ReactDOM.createRoot(root).render(\n      <SafeProvider config={config}>\n        <App />\n      </SafeProvider>\n    )\n```\n\n----------------------------------------\n\nTITLE: Example Setup: Creating Safe Client with @safe-global/sdk-starter-kit in TypeScript\nDESCRIPTION: This snippet shows how to instantiate a Safe client using 'createSafeClient' from the '@safe-global/sdk-starter-kit' package, providing dependencies such as provider, signer, and safeAddress. This setup is essential before calling 'getOwnersWhoApprovedTransaction'. It emphasizes asynchronous initialization and configuration parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getownerswhoapprovedtransaction.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit Instance in TypeScript\nDESCRIPTION: Creates an instance of the `Safe` class (Protocol Kit), which is used for building, signing, and executing Safe transactions on-chain. It requires the blockchain provider URL, a signer (such as a connected wallet or private key), and the specific Safe address you are interacting with. The `onchainAnalytics` parameter is optional for tracking.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKitOwner1 = await Safe.init({\n  provider: RPC_URL,\n  signer: OWNER_1_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS,\n  onchainAnalytics // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling a Module via disableModule in Safe (Solidity)\nDESCRIPTION: Defines the ISafe interface containing the external disableModule function and implements an Example contract that disables a module by calling safe.disableModule(prevModule, module). Requires the Safe contract implementing ISafe to be accessible. The function expects two address parameters: prevModule (previous module in the linked list) and module (address of the module to disable). The snippet demonstrates correct usage for disabling a module by contract call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/disableModule.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function disableModule(address prevModule, address module) external;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).disableModule(0x..., 0x...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Safe Migration Script (TypeScript)\nDESCRIPTION: This is the final, complete `migrate.ts` script, integrating all previous TypeScript snippets. It imports necessary libraries, defines migration methods, takes a method name as a command-line argument, sets up constants (requires filling in placeholders), builds the delegatecall transaction data, initializes the Safe Protocol Kit, creates the Safe transaction, executes it, and waits for confirmation. This script orchestrates the entire Safe migration process for a single-signer Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from \"@safe-global/protocol-kit\";\nimport { MetaTransactionData, OperationType } from \"@safe-global/types-kit\";\nimport { parseAbi, encodeFunctionData, http, createPublicClient } from \"viem\";\n\ntype MigrationMethod =\n  | \"migrateSingleton\"\n  | \"migrateWithFallbackHandler\"\n  | \"migrateL2Singleton\"\n  | \"migrateL2WithFallbackHandler\";\n\nasync function main(migrationMethod: MigrationMethod) {\n  const SAFE_ADDRESS = // ...\n  const OWNER_PRIVATE_KEY = // ...\n  const RPC_URL = // ...\n  const SAFE_MIGRATION_CONTRACT_ADDRESS = // ...\n  const ABI = parseAbi([\n    \"function migrateSingleton() public\",\n    \"function migrateWithFallbackHandler() external\",\n    \"function migrateL2Singleton() public\",\n    \"function migrateL2WithFallbackHandler() external\",\n  ]);\n\n  const calldata = encodeFunctionData({\n    abi: ABI,\n    functionName: migrationMethod,\n  });\n\n  const safeTransactionData: MetaTransactionData = {\n    to: SAFE_MIGRATION_CONTRACT_ADDRESS,\n    value: \"0\",\n    data: calldata,\n    operation: OperationType.DelegateCall,\n  };\n\n  const preExistingSafe = await Safe.init({\n    provider: RPC_URL,\n    signer: OWNER_PRIVATE_KEY,\n    safeAddress: SAFE_ADDRESS,\n  });\n\n  const safeTransaction = await preExistingSafe.createTransaction({\n    transactions: [safeTransactionData],\n  });\n\n  console.log(\n    `Executing migration method [${migrationMethod}] using Safe [${SAFE_ADDRESS}]`\n  );\n\n  const result = await preExistingSafe.executeTransaction(safeTransaction);\n\n  const publicClient = createPublicClient({\n    transport: http(RPC_URL),\n  });\n\n  console.log(`Transaction hash [${result.hash}]`);\n  await publicClient.waitForTransactionReceipt({\n    hash: result.hash as `0x${string}`,\n  });\n}\n\nconst migrationMethod = process.argv.slice(2)[0] as MigrationMethod;\nmain(migrationMethod).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Owner Private Keys and RPC Endpoint in TypeScript\nDESCRIPTION: This TypeScript snippet sets up the Ethereum RPC URL for the Sepolia testnet and declares private key variables corresponding to Safe owner accounts. These private keys are necessary to instantiate signer objects that will be used for generating cryptographic signatures to approve Safe transactions. The snippet outlines placeholder constants for the private keys of five owners, dependent on external key management for providing actual key values.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// https://chainlist.org/?search=sepolia&testnets=true\nconst RPC_URL = 'https://eth-sepolia.public.blastapi.io'\n\n// Initialize signers\nconst OWNER_1_PRIVATE_KEY = // ...\nconst OWNER_2_PRIVATE_KEY = // ...\nconst OWNER_3_PRIVATE_KEY = // ...\nconst OWNER_4_PRIVATE_KEY = // ...\nconst OWNER_5_PRIVATE_KEY = // ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Client with createSafeClient in TypeScript\nDESCRIPTION: This snippet showcases the initialization of a safeClient instance using createSafeClient from the '@safe-global/sdk-starter-kit' package. It illustrates how to supply provider, signer, and safeAddress parameters to configure the client. The resulting safeClient can subsequently be used to interact with Safe services, including fetching the address; the setup process itself is asynchronous and returns a promise for the client instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getaddress.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching transaction confirmations using Safe API Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to asynchronously fetch the list of confirmations for a given Safe multisig transaction by providing its transaction hash. It requires an instance of the SafeApiKit initialized with the target blockchain network's chainId. The method getTransactionConfirmations returns a Promise resolving to the confirmation list, facilitating auditing or verification workflows in Safe multisig environments.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettransactionconfirmations.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeTxHash = '0x...'\n\nconst confirmations = await apiKit.getTransactionConfirmations(safeTxHash)\n```\n\n----------------------------------------\n\nTITLE: Executing a Token Swap on Uniswap\nDESCRIPTION: This comprehensive snippet demonstrates the process of setting up and executing a swap from WETH to USDC on Uniswap V3. It includes creating viem clients, configuring token details, creating pool instances, approving token spending, and executing the swap transaction through the Safe Smart Account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-actions/ai-agent-swaps-on-uniswap.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  FeeAmount,\n  Pool,\n  Route,\n  SwapRouter,\n  CurrencyAmount,\n  TradeType,\n  Percent\n} from \"@uniswap/v3-sdk\";\nimport { Token, SwapOptions } from \"@uniswap/sdk-core\";\nimport JSBI from \"jsbi\";\nimport { OperationType, MetaTransactionData } from \"@safe-global/types-kit\";\n\n// Set up viem clients and accounts\nconst account = privateKeyToAccount(AGENT_PRIVATE_KEY as `0x${string}`);\n\nconst publicClient = createPublicClient({\n  transport: http(RPC_URL!)\n});\nconst walletClient = createWalletClient({\n  transport: http(RPC_URL!)\n});\n\nconst chainId = (await publicClient.getChainId());\n\n// Example Values for WETH/USDC Uniswap Pool on Sepolia:\nconst WETH_ADDRESS = \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\";\nconst USDC_ADDRESS = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nconst USDC_ETH_POOL_ADDRESS = \"0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640\";\nconst SWAP_ROUTER_ADDRESS = \"0xE592427A0AEce92De3Edee1F18E0157C05861564\"; // Uniswap V3 Router\nconst INPUT_AMOUNT = \"100000000000\"; // Amount of ETH to swap to USDC\nconst OUTOUT_AMOUNT = \"0\"; // 0 USDC\n\n// Define token details\nconst USDC = new Token(chainId, USDC_ADDRESS, 6, \"USDC\", \"USD Coin\");\nconst WETH = new Token(chainId, WETH_ADDRESS, 18, \"WETH\", \"Wrapped Ether\");\n\nconst callDataApprove = encodeFunctionData({\n  abi: WETH_ABI,\n  functionName: \"approve\",\n  args: [SWAP_ROUTER_ADDRESS, INPUT_AMOUNT],\n});\n\nconst safeApproveTx: MetaTransactionData = {\n  to: WETH_ADDRESS,\n  value: \"0\",\n  data: callDataApprove,\n  operation: OperationType.Call,\n};\n\nconst options: SwapOptions = {\n  slippageTolerance: new Percent(50, 10_000), // 50 bips, or 0.50%\n  deadline: Math.floor(Date.now() / 1000) + 60 * 20, // 20 minutes from the current Unix time\n  recipient: SAFE_ADDRESS,\n};\n\nconst poolInfo = await fetchPoolData(publicClient, USDC_ETH_POOL_ADDRESS);\n\n// Create the pool object\nconst pool = new Pool(\n  WETH,\n  USDC,\n  FeeAmount.MEDIUM,\n  JSBI.BigInt(poolInfo.sqrtPriceX96.toString()),\n  JSBI.BigInt(poolInfo.liquidity.toString()),\n  poolInfo.tick\n);\n\nconst swapRoute = new Route([pool], WETH, USDC);\n\nconst uncheckedTrade = Trade.createUncheckedTrade({\n  tradeType: TradeType.EXACT_INPUT,\n  route: swapRoute,\n  inputAmount: CurrencyAmount.fromRawAmount(WETH, \n    INPUT_AMOUNT\n  ),\n  outputAmount: CurrencyAmount.fromRawAmount(USDC, OUTOUT_AMOUNT),\n});\n\nconst methodParameters = SwapRouter.swapCallParameters(\n  [uncheckedTrade],\n  options\n);\n\nconst safeSwapTx: MetaTransactionData = {\n  to: SWAP_ROUTER_ADDRESS,\n  value: methodParameters.value,\n  data: methodParameters.calldata,\n  operation: OperationType.Call,\n};\n\nconst safeTx = await preExistingSafe.createTransaction({\n  transactions: [safeApproveTx, safeSwapTx],\n  onlyCalls: true,\n});\n\n// You might need to collect more signatures here, depending on the threshold\n\nconst txResponse = await preExistingSafe.executeTransaction(safeTx);\n  await publicClient.waitForTransactionReceipt({\n  hash: txResponse.hash as `0x${string}`,\n});\n\nconsole.log(`Deposit and approve transaction: [${txResponse.hash}]`);\n```\n\n----------------------------------------\n\nTITLE: Configuring and Providing Safe Context in React (TypeScript)\nDESCRIPTION: Shows the application setup in `main.tsx`, including creating a `SafeProvider` configuration using `createConfig`. This configuration object requires parameters like the blockchain `chain`, `provider`, optional `signer`, and the `safeAddress`. The `SafeProvider` then wraps the root `App` component to make the Safe context available via the `useSafe` hook.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\nimport App from './App.tsx'\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst root = document.getElementById('root')\n\nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pending Transactions - Create Config\nDESCRIPTION: This snippet provides an example of how to create a custom configuration object using the `createConfig` function from the `@safe-global/safe-react-hooks` library.  It sets up the chain, provider, signer, and safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getpendingtransactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Safe Configuration\nDESCRIPTION: Shows how to create a custom Safe configuration using createConfig from Safe React Hooks, specifying chain, provider, signer, and Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsafeinfo.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration Object for SafeProvider (config.ts)\nDESCRIPTION: This code snippet shows how to create a configuration object using the `createConfig` function from `@safe-global/safe-react-hooks`. This configuration object is then used to configure the SafeProvider or passed directly to hooks like `useConfirmTransaction`. It defines the chain, provider, signer, and safeAddress.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useconfirmtransaction.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\n    import { sepolia } from 'viem/chains'\n\n    export const config = createConfig({\n      chain: sepolia,\n      provider,\n      signer,\n      safeAddress: '0x...'\n    })\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol Kit with Undeployed Predicted Safe in TypeScript\nDESCRIPTION: Initializes the Safe Protocol Kit instance for a Safe account that is not yet deployed by using a `predictedSafe` configuration object. This object includes `safeAccountConfig` to specify owners, threshold, optional transaction properties, and `safeDeploymentConfig` with optional deployment parameters like saltNonce and safeVersion. Allows limited functionality by calculating the Safe address deterministically before deployment. Requires provider and signer parameters similar to the deployed flow. Returns a Promise resolving to the Protocol Kit instance initialized with the predicted Safe configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/init.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe, {\n  PredictedSafeProps,\n  SafeAccountConfig,\n  SafeDeploymentConfig\n} from '@safe-global/protocol-kit'\n\nconst safeAccountConfig: SafeAccountConfig = {\n  owners: ['0x...', '0x...', '0x...'],\n  threshold: 2,\n  to: '0x...', // Optional\n  data: '0x', // Optional\n  fallbackHandler: '0x...', // Optional\n  paymentToken: '', // Optional\n  payment: 123, // Optional\n  paymentReceiver: '0x...' // Optional\n}\nconst safeDeploymentConfig: SafeDeploymentConfig = {\n  saltNonce: '123', // Optional\n  safeVersion: '1.4.1', // Optional\n  deploymentType: 'canonical' // Optional\n}\nconst predictedSafe: PredictedSafeProps = {\n  safeAccountConfig,\n  safeDeploymentConfig // Optional\n}\n\nconst protocolKit = await Safe.init({\n  provider,\n  signer,\n  predictedSafe,\n  isL1SafeSingleton: true, // Optional\n  contractNetworks // Optional\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKit = await Safe.init({\n  provider,\n  signer,\n  predictedSafe\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Social Recovery Module (Solidity)\nDESCRIPTION: Presents a Solidity contract, `SocialRecoveryModule`, demonstrating how to implement a module for a Safe account to enable social recovery. It includes functions for adding designated 'friends', allowing friends to approve a recovery process, checking if a threshold of approvals is met, and executing an ownership swap on the Safe via `execTransactionFromModule`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx-full.txt#_snippet_6\n\nLANGUAGE: Solidity\nCODE:\n```\n// Example Social Recovery Module\ncontract SocialRecoveryModule {\n    mapping(address => address[]) public friends;\n    mapping(address => mapping(address => bool)) public recoveryApproved;\n    mapping(address => uint256) public threshold;\n    \n    function addFriend(address safe, address friend) external {\n        require(GnosisSafe(safe).isOwner(msg.sender), \"Not an owner\");\n        friends[safe].push(friend);\n    }\n    \n    function approveRecovery(address safe, address newOwner) external {\n        require(isFriend(safe, msg.sender), \"Not a friend\");\n        recoveryApproved[safe][msg.sender] = true;\n        \n        // Check if threshold reached\n        uint256 approvals = 0;\n        for (uint i = 0; i < friends[safe].length; i++) {\n            if (recoveryApproved[safe][friends[safe][i]]) {\n                approvals++;\n            }\n        }\n        \n        if (approvals >= threshold[safe]) {\n            // Execute recovery by swapping ownership\n            bytes memory data = abi.encodeWithSignature(\n                \"swapOwner(address,address,address)\",\n                address(0x1), // prev owner placeholder\n                GnosisSafe(safe).getOwners()[0], // current owner\n                newOwner // new owner\n            );\n            GnosisSafe(safe).execTransactionFromModule(\n                safe, 0, data, Enum.Operation.Call\n            );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting gasToken\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, highlighting the `gasToken` parameter within the `safeTransactionData` object. This specifies the address of the ERC-20 token used for gas payment refund, if applicable.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData: {\n    operation: OperationType.Call,\n    safeTxGas: '0x...',\n    baseGas: '123',\n    gasPrice: '123',\n    gasToken: '0x...',\n    refundReceiver: '0x...',\n    nonce: '10'\n  },\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Api Kit in TypeScript\nDESCRIPTION: This snippet shows the setup process for using the Safe Api Kit. It imports the `SafeApiKit` class from `@safe-global/api-kit` and creates a new instance, configuring it for a specific blockchain network (Mainnet, chainId: 1n). This `apiKit` instance is then used for subsequent API calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettokenlist.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating Safe with ERC-4337 - Typescript\nDESCRIPTION: This TypeScript snippet illustrates how to integrate a Safe Smart Account with ERC-4337 for account abstraction. It first adds the 4337 module, then creates a user operation to interact with a specified target contract. Requires the `@safe-global/protocol-kit` package and an instance of `SafeSdk`.  The `createUserOp` function generates a user operation, and the `sendUserOperation` function sends it to a bundler for execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx-full.txt#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Using Safe with ERC-4337\nimport { Safe4337Module } from '@safe-global/protocol-kit'\n\n// Add the 4337 module to a Safe\nconst safe4337Module = new Safe4337Module(...)\nawait safeSdk.enableModule(safe4337Module.getAddress())\n\n// Create a user operation\nconst userOp = await safe4337Module.createUserOp({\n  target: '0x...',\n  value: ethers.utils.parseEther('0.1').toString(),\n  data: '0x'\n})\n\n// Submit the user operation to a bundler\nconst userOpHash = await bundler.sendUserOperation(userOp)\n```\n\n----------------------------------------\n\nTITLE: Transactions Parameter: data\nDESCRIPTION: Example showing how to define `data` parameter inside `transactions` array which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing getTransactionHash Interface and Usage in Solidity\nDESCRIPTION: Shows the complete ISafe interface function definition for getTransactionHash and an example implementation. This function generates a unique hash for Safe transactions that can be signed by the Safe owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external view returns (bytes32);\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).getTransactionHash(\n            0x...,\n            0,\n            \"0x...\",\n            Enum.Operation.Call,\n            0,\n            0,\n            0,\n            0x...,\n            payable(0),\n            1\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Safe with Passkey Signer\nDESCRIPTION: This snippet illustrates connecting to a Safe using a passkey as the signer.  The `signer` property is a passkey object. Requires the `provider`, `safeAddress` and the passkey details (`rawId` and `coordinates`). Requires `@safe-global/protocol-kit`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.connect({\n  provider,\n  signer: {\n    rawId: 'abc',\n    coordinates: { x: '123', y: '123' }\n  },\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Executing a Safe Contract Transaction Utility in TypeScript\nDESCRIPTION: This TypeScript function, designed for use in a Hardhat environment, executes a transaction through a Safe contract instance. It sorts wallet signers by their addresses, generates and collects their signatures over the transaction hash, and then sends the transaction to the Safe contract using the execTransaction method. Required dependencies include 'ethers', a Safe contract instance, and signer wallets. Parameters are: signers (the transaction approvers), safe contract instance, destination address, transaction value, call data, and operation type (0: call, 1: delegatecall). It outputs the transaction result or throws on error. All input values must use correct Ethereum-compatible types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"hardhat\";\nimport { Signer, AddressLike, BigNumberish, ZeroAddress } from \"ethers\";\nimport { Safe } from \"../../typechain-types\";\n\n/**\n * Executes a transaction on the Safe contract.\n * @param wallets - The signers of the transaction.\n * @param safe - The Safe contract instance.\n * @param to - The address to send the transaction to.\n * @param value - The value to send with the transaction.\n * @param data - The data to send with the transaction.\n * @param operation - The operation type (0 for call, 1 for delegate call).\n */\nconst execTransaction = async function (\n  wallets: Signer[],\n  safe: Safe,\n  to: AddressLike,\n  value: BigNumberish,\n  data: string,\n  operation: number,\n): Promise<void> {\n  // Get the current nonce of the Safe contract\n  const nonce = await safe.nonce();\n\n  // Get the transaction hash for the Safe transaction\n  const transactionHash = await safe.getTransactionHash(\n    to,\n    value,\n    data,\n    operation,\n    0,\n    0,\n    0,\n    ZeroAddress,\n    ZeroAddress,\n    nonce\n  );\n\n  let signatureBytes = \"0x\";\n  const bytesDataHash = ethers.getBytes(transactionHash);\n\n  // Get the addresses of the signers\n  const addresses = await Promise.all(wallets.map(wallet => wallet.getAddress()));\n  // Sort the signers by their addresses\n  const sorted = wallets.sort((a, b) => {\n    const addressA = addresses[wallets.indexOf(a)];\n    const addressB = addresses[wallets.indexOf(b)];\n    return addressA.localeCompare(addressB, \"en\", { sensitivity: \"base\" });\n  });\n\n  // Sign the transaction hash with each signer\n  for (let i = 0; i < sorted.length; i++) {\n    const flatSig = (await sorted[i].signMessage(bytesDataHash))\n      .replace(/1b$/, \"1f\")\n      .replace(/1c$/, \"20\");\n    signatureBytes += flatSig.slice(2);\n  }\n\n  // Execute the transaction on the Safe contract\n  await safe.execTransaction(\n    to,\n    value,\n    data,\n    operation,\n    0,\n    0,\n    0,\n    ZeroAddress,\n    ZeroAddress,\n    signatureBytes\n  );\n};\n\nexport {\n  execTransaction,\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Safe Address Using safeClient in TypeScript\nDESCRIPTION: This example demonstrates how to call the getAddress method from a pre-configured safeClient object to asynchronously obtain the connected Safe address or a predicted one based on current client configuration. It requires an imported safeClient, which must be initialized in advance, and returns a Promise<string> with the resulting address. Ensure that safeClient is correctly set up with proper provider and signer details before invocation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getaddress.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst safeAddress = await safeClient.getAddress()\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Smart Account with AI Agent as Signer\nDESCRIPTION: Initializes a Safe client with a single signer configuration (the AI agent). This code sets up a 1-out-of-1 Safe where the AI has complete control. The actual contract will be deployed when the first transaction is sent.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/basic-agent-setup.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nconst SIGNER_ADDRESS = // ...\nconst SIGNER_PRIVATE_KEY = // ...\nconst RPC_URL = 'https://rpc.ankr.com/eth_sepolia'\n\nconst safeClient = await Safe.init({\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  predictedSafe: {\n    safeAccountConfig: {\n      owners: [SIGNER_ADDRESS],\n      threshold: 1\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Guard Integration Tests with Hardhat\nDESCRIPTION: Complete TypeScript code for a Hardhat test file (`NoDelegatecallGuard.test.ts`) designed to test a custom Safe Guard contract. The `describe` block sets up the test suite, declares necessary variables (Signers, contract instances), and the `beforeEach` hook handles the deployment and configuration of the Safe master copy, Safe Proxy Factory, a Safe instance (owned by 'alice' with a threshold of 1), and the custom `NoDelegatecallGuard`. It also sets the deployed Guard on the Safe instance. The `it` blocks contain specific test cases to verify the Guard's behavior regarding delegatecalls, regular calls, and the ability to replace the guard.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ethers } from \"hardhat\";\nimport { expect } from \"chai\";\nimport { Signer, ZeroAddress } from \"ethers\";\nimport { Safe, Safe__factory, SafeProxyFactory } from \"../typechain-types\";\nimport { execTransaction } from \"./utils/utils\";\nimport { NoDelegatecallGuard } from \"../typechain-types/contracts/NoDelegatecallGuard\";\n\ndescribe(\"NoDelegatecallGuard\", async function () {\n  let deployer: Signer;\n  let alice: Signer;\n  let masterCopy: Safe;\n  let proxyFactory: SafeProxyFactory;\n  let safeFactory: Safe__factory;\n  let safe: Safe;\n  let exampleGuard: NoDelegatecallGuard;\n  const threshold = 1;\n\n  // Setup signers and deploy contracts before running tests\n  beforeEach(async () => {\n    [deployer, alice] = await ethers.getSigners();\n\n    safeFactory = await ethers.getContractFactory(\"Safe\", deployer);\n    masterCopy = await safeFactory.deploy();\n\n    proxyFactory = await (\n      await ethers.getContractFactory(\"SafeProxyFactory\", deployer) as SafeProxyFactory__factory\n    ).deploy();\n\n    const ownerAddresses = [await alice.getAddress()];\n\n    const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [\n      ownerAddresses,\n      threshold,\n      ZeroAddress,\n      \"0x\",\n      ZeroAddress,\n      ZeroAddress,\n      0,\n      ZeroAddress,\n    ]);\n\n    // Read the safe address by executing the static call to createProxyWithNonce function\n    const safeAddress = await proxyFactory.createProxyWithNonce.staticCall(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    // Create the proxy with nonce\n    await proxyFactory.createProxyWithNonce(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    if (safeAddress === ZeroAddress) {\n      throw new Error(\"Safe address not found\");\n    }\n\n    // Deploy the NoDelegatecallGuard contract\n    exampleGuard = await (\n      await ethers.getContractFactory(\"NoDelegatecallGuard\", deployer) as NoDelegatecallGuard__factory\n    ).deploy();\n\n    safe = await ethers.getContractAt(\"Safe\", safeAddress);\n\n    // Set the guard in the safe\n    const setGuardData = masterCopy.interface.encodeFunctionData(\"setGuard\", [\n      exampleGuard.target,\n    ]);\n\n    // Execute the transaction to set the Guard\n    await execTransaction([alice], safe, safe.target, 0, setGuardData, 0);\n  });\n\n  it(\"Should not allow delegatecall\", async function () {\n    const wallets = [alice];\n\n    await expect(\n      execTransaction(wallets, safe, ZeroAddress, 0, \"0x\", 1)\n    ).to.be.revertedWithCustomError(exampleGuard, \"DelegatecallNotAllowed\");\n  });\n\n  it(\"Should allow call\", async function () {\n    const wallets = [alice];\n\n    expect(await execTransaction(wallets, safe, ZeroAddress, 0, \"0x\", 0));\n  });\n\n  it(\"Should allow to replace the guard\", async function () {\n    const wallets = [alice];\n\n    const setGuardData = masterCopy.interface.encodeFunctionData(\"setGuard\", [\n      ZeroAddress,\n    ]);\n    expect(\n      await execTransaction(\n        wallets,\n        safe,\n        await safe.getAddress(),\n        0,\n        setGuardData,\n        0\n      )\n    );\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a custom transaction from a Safe\nDESCRIPTION: Dispatches a custom transaction to a specified address with provided value and data payload. Optional delegatecall execution is supported via the '--delegate' flag, and an optional nonce can be set. Use this for flexible contract interactions from the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsend_custom <address> <value-wei> <data-hex-str> [--delegate] [--safe-nonce <int>]\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient (TypeScript)\nDESCRIPTION: This snippet illustrates the basic setup required to create a `SafeClient` instance using the `createSafeClient` function from `@safe-global/sdk-starter-kit`. It requires providing a blockchain provider, a signer instance, and the target Safe address. This initialized `safeClient` is typically used as the base for applying extensions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/extend.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Proposing a Transaction with SafeApiKit in TypeScript\nDESCRIPTION: Demonstrates how to propose a new multi-signature transaction using the `apiKit.proposeTransaction` method. It imports necessary types (`ProposeTransactionProps`, `OperationType`, `SafeTransactionData`) and the initialized `apiKit` instance. It constructs the `safeTransactionData` and `config` objects before calling the method. The `origin` parameter is optional.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ProposeTransactionProps } from '@safe-global/api-kit'\nimport { OperationType, SafeTransactionData } from '@safe-global/types-kit'\nimport { apiKit } from './setup.ts'\n\nconst safeTransactionData: SafeTransactionData = {\n  operation: OperationType.Call,\n  safeTxGas: '0x...',\n  baseGas: '123',\n  gasPrice: '123',\n  gasToken: '0x...',\n  refundReceiver: '0x...',\n  nonce: '10'\n}\n\nconst config: ProposeTransactionProps = {\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData,\n  senderAddress: '0x...',\n  senderSignature: '0x...',\n  origin: 'App name' // Optional\n}\n\nawait apiKit.proposeTransaction(config)\n```\n\n----------------------------------------\n\nTITLE: Deploying and Connecting to Safe on Chiado (TypeScript)\nDESCRIPTION: This comprehensive snippet repeats the deployment process for the Gnosis Chiado testnet. It includes creating the deployment transaction using `createSafeDeploymentTransaction()`, sending the transaction and waiting for confirmation using the Chiado client and `waitForTransactionReceipt`, and finally connecting the Protocol Kit instance to the deployed Safe address on Chiado with the `connect()` method. It concludes by verifying the deployment status and address on Chiado.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst chiadoDeploymentTransaction =\n  await protocolKitChiado.createSafeDeploymentTransaction()\n\nconst chiadoClient =\n  await protocolKitChiado.getSafeProvider().getExternalSigner()\n\nconst transactionHashChiado = await chiadoClient!.sendTransaction({\n  to: chiadoDeploymentTransaction.to,\n  value: BigInt(chiadoDeploymentTransaction.value),\n  data: chiadoDeploymentTransaction.data as `0x${string}`,\n  chain: gnosisChiado\n})\n\nawait waitForTransactionReceipt(\n  chiadoClient!,\n  { hash: transactionHashChiado }\n)\n\nconst newProtocolKitChiado = await protocolKitChiado.connect({\n  safeAddress: chiadoPredictedSafeAddress\n})\n\nconst isChiadoSafeDeployed = await newProtocolKitChiado.isSafeDeployed() // True\nconst chiadoDeployedSafeAddress = await newProtocolKitChiado.getAddress()\n```\n\n----------------------------------------\n\nTITLE: Querying a Safe Transaction using getTransaction with safeTxHash - TypeScript\nDESCRIPTION: Demonstrates a call to the getTransaction hook passing a Safe transaction hash (safeTxHash) as the query parameter. This quickly fetches the Safe multisig transaction associated with the provided hash. The snippet requires @safe-global/safe-react-hooks and assumes the getTransaction hook is available within the context.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/gettransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = getTransaction({\n  safeTxHash: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit for Mainnet in TypeScript\nDESCRIPTION: Shows how to import and initialize the `SafeApiKit` from the `@safe-global/api-kit` library. This example configures the kit for the Ethereum Mainnet (chainId: 1n) and exports the instance as `apiKit` for potential use in other modules.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getnextnonce.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Add delegate\nDESCRIPTION: Adds a new delegate address for a specific owner of the Safe, along with a label for identification.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nadd_delegate <address> <label> <owner-address>\n```\n\n----------------------------------------\n\nTITLE: Invoking getOwners via ISafe Interface - Solidity\nDESCRIPTION: This snippet shows how to declare the ISafe interface with the getOwners method and demonstrates calling this method from an Example contract in Solidity. The interface defines getOwners as an external view function returning an array of addresses. To use this, the ISafe interface must be defined or imported, and the contract must have a reference to a valid ISafe instance for the call. The key parameter is the contract implementing ISafe; the output is an address[] of Safe owners. Limitations include requiring the ISafe contract address and proper context for (ISafe safe).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/getOwners.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface ISafe {\n    function getOwners() external view returns (address[]);\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).getOwners();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Safe React Hooks Configuration for Deploying New Safe Account in TypeScript\nDESCRIPTION: Demonstrates configuring createConfig to deploy a new Safe account by specifying safeOptions including owners, threshold, and an optional saltNonce for deterministic safe address generation. The example imports necessary modules, defines chain, provider and signer, and sets multiple owners with a threshold to require multiple signatures. This facilitates Safe deployment with controlled access parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/createconfig.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeOptions: {\n    owners: ['0x...', '0x...', '0x...'],\n    threshold: 2,\n    saltNonce: 123n // Optional\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Enable Guard Transaction - Example in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Safe transaction to enable a Safe Guard using the `createEnableGuardTx` function from the `@safe-global/protocol-kit` library. It takes the guard address and an optional options object as parameters. The `options` object allows setting various transaction parameters such as `safeTxGas`, `baseGas`, `gasPrice`, `gasToken`, `refundReceiver`, and `nonce`.  It's essential to have the `@safe-global/protocol-kit` library installed and the `protocolKit` initialized.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SafeTransactionOptionalProps } from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst guardAddress = '0x...'\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createEnableGuardTx(\n  guardAddress,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Using Spending Limit for AI Agent with Viem and Safe Allowance Module in TypeScript\nDESCRIPTION: This snippet enables an AI agent to spend funds within the allowed limit set on the Safe Smart Account. It uses Viem to create public and wallet clients, reads the current allowance and nonce from the allowance module contract, generates and signs a transfer hash with the agent's private key, simulates the contract call for allowance transfer execution, and finally writes the transaction to the blockchain. Key dependencies are 'viem' and '@safe-global/safe-modules-deployments'. Inputs include agent and Safe account data, ERC20 token address, amount to spend, and private keys. The output is the transaction result of the fund transfer within the allowance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/agent-with-spending-limit.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n  createPublicClient,\\n  http,\\n  encodeFunctionData,\\n  zeroAddress,\\n  createWalletClient,\\n} from 'viem'\\nimport { privateKeyToAccount } from 'viem/accounts'\\nconst ERC20_TOKEN_ADDRESS = '0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238'\\n\\nconst allowanceModule = getAllowanceModuleDeployment({ network: '11155111' })!\\n\\nconst allowanceModuleAddress = allowanceModule.networkAddresses[\\n  '11155111'\\n] as `0x${string}`\\n\\nconst publicClient = createPublicClient({ transport: http(RPC_URL!) })\\n\\n// Read allowance module to get current nonce\\nconst allowance = await publicClient.readContract({\\n  address: allowanceModuleAddress,\\n  abi: allowanceModule.abi,\\n  functionName: 'getTokenAllowance',\\n  args: [safeAddress, AGENT_ADDRESS, ERC20_TOKEN_ADDRESS]\\n})\\n\\nconst amount = 1 // You might want to adapt the amount\\n\\n// generate hash\\nconst hash = await publicClient.readContract({\\n  address: allowanceModuleAddress,\\n  abi: allowanceModule.abi,\\n  functionName: 'generateTransferHash',\\n  args: [\\n    safeAddress,\\n    ERC20_TOKEN_ADDRESS,\\n    AGENT_ADDRESS,\\n    amount,\\n    zeroAddress,\\n    0,\\n    allowance[4] // nonce\\n  ]\\n})\\n\\nconst agentAccount = privateKeyToAccount(\\n  AGENT_PRIVATE_KEY as `0x${string}`\\n)\\nconst signature = await agentAccount.sign({\\n  hash: hash as unknown as `0x${string}`\\n})\\n\\nconst { request } = await publicClient.simulateContract({\\n  address: allowanceModuleAddress,\\n  abi: allowanceModule.abi,\\n  functionName: 'executeAllowanceTransfer',\\n  args: [\\n    safeAddress,\\n    ERC20_TOKEN_ADDRESS,\\n    AGENT_ADDRESS,\\n    amount,\\n    zeroAddress,\\n    0,\\n    AGENT_ADDRESS,\\n    signature\\n  ],\\n  account: agentAccount\\n})\\n\\nconst walletClient = createWalletClient({ transport: http(RPC_URL!) })\\n\\nconst tx = await walletClient.writeContract(request)\\nconsole.log(tx)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit\nDESCRIPTION: This snippet shows how to initialize the Safe Protocol Kit with a provider, signer, and Safe address. The provider is used to interact with the blockchain, the signer is used to sign transactions, and the Safe address specifies the Safe to interact with. This initialization is needed before using any other methods of the Safe Protocol Kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/ismoduleenabled.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Status with TypeScript\nDESCRIPTION: Retrieves detailed information about a Safe account using TypeScript. The code snippet originates from an example file demonstrating the usage of the `GET /api/v1/safes/{address}/` endpoint. It shows how to fetch the Safe's address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Safe and ERC-7579 integration\nDESCRIPTION: Command to install Permissionless.js, viem, and truncate-eth-address packages. Permissionless.js is used to set up and interact with Safe accounts, viem for Ethereum interaction utilities, and truncate-eth-address for formatting Ethereum addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add permissionless@0.2.0 viem@2.21.7 truncate-eth-address@1.0.2\n```\n\n----------------------------------------\n\nTITLE: Creating New SafeClient Instance for Confirmation - TypeScript\nDESCRIPTION: Initializes a new SafeClient instance with the context of another owner who must confirm the transaction. Replace the 'signer' variable with the appropriate private key or signer object for the confirming owner. This instance will be used to confirm pending transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-transactions.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst newSafeClient = await createSafeClient({\n  provider: RPC_URL,\n  signer,\n  safeAddress: '0x...'\n})\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Safe Delegate with custom label in TypeScript\nDESCRIPTION: This example focuses on adding a custom label to the delegate when invoking addSafeDelegate. The label can be used for identification or descriptive purposes and is provided along with the mandatory delegateAddress, delegatorAddress, and signer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafedelegate.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = await apiKit.addSafeDelegate({\n  delegateAddress: '0x...',\n  delegatorAddress: '0x...',\n  label: 'abc',\n  signer\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Guard Address with Protocol Kit (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve the Safe Guard address using the `getGuard()` method from the protocol kit. It imports the protocol kit from a local setup file. The `await` keyword is used to asynchronously fetch the guard address.  The output is a string representing the guard's address or a zero address if no guard is enabled. The code assumes the protocol kit has been initialized.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/getguard.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst guardAddress = await protocolKit.getGuard()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Safe with Provider (URL)\nDESCRIPTION: This code snippet demonstrates connecting to a Safe by specifying the provider as an RPC URL.  The `provider` parameter is set to an RPC URL. Requires the `@safe-global/protocol-kit` library.  The `signer` and `safeAddress` must be correctly configured.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.connect({\n  provider: 'https://eth-sepolia.public.blastapi.io',\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Usage of 'safeTxGas' Parameter - TypeScript\nDESCRIPTION: This snippet shows how to set the optional `safeTxGas` parameter within the `options` object of the `createTransaction` method. This parameter specifies the gas limit for the Safe transaction.  Requires the `createTransaction` method of a configured Safe instance and other necessary parameters within the options object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction(\n  '0x...',\n  options: {\n    safeTxGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests with npm Script in Shell\nDESCRIPTION: This bash snippet shows the command required to execute the test suite using the Hardhat React environment. It instructs users to run 'npx hardhat test' in the project's command line interface to trigger the test runner, which executes all configured test files and outputs results to the console. This snippet depends on having Hardhat properly installed and configured in the project.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nnpx hardhat test\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract API Endpoint - Retrieve Contract Details by Address\nDESCRIPTION: This endpoint returns detailed information for a specific smart contract identified by its address. It highlights the contract's attributes and ABI details. Dependencies include the URL parameter for address and HTTP GET method, with sample cURL command and JSON response demonstrating the contract data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Signatures to Safe Message in TypeScript, Python, and Curl\nDESCRIPTION: This snippet demonstrates signing the pending Safe message by Owner B and submitting that signature to the Safe Transaction Service. The TypeScript snippet signs the message and sends the signature via addMessageSignature. The Python example signs the hash and posts the signature using the transaction service API. The Curl command posts the new signature to the corresponding message's signatures endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/messages.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Sign the message with Owner B\nconst signedMessageOwnerB = await protocolKitOwnerB.signMessage(safeServiceMessage)\n\n// Get Owner B address\nconst ownerBAddress = '0x...'\n\n// Send the message to the Transaction Service with the signature from Owner B\nawait apiKit.addMessageSignature(\n  safeMessageHash,\n  signedMessageOwnerB.getSignature(ownerBAddress)?.data || '0x'\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Sign the message with Owner B\naccount_owner_b = Account.from_key(config.get(\"OWNER_B_PRIVATE_KEY\"))\nowner_b_signature = account_owner_b.signHash(safe_message_hash)\n\n# Send the message to the Transaction Service with the signature from Owner B\ntransaction_service_api.post_message_signature(\n    safe_message_hash,\n    owner_b_signature.signature)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n'https://safe-transaction-sepolia.safe.global/api/v1/messages/0xcf2e6b1e26e6930e14bebf120ffffffffffffffffffffb484a787137201ab0df/signatures/' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"signature\": \"0xc8bff3e71314f8b79f6e31ae38c5efba1194e61e8ba6f35742f73af4ffffffffffffffffffffe5f84088ba29f51c44ddee87af26ca7d71e8f008e3bcfc25f1d31c\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit with Account and Deployment Configuration in TypeScript\nDESCRIPTION: Shows how to initialize the Safe protocol kit by providing a blockchain provider, signer, and predictedSafe configuration object. The predictedSafe object contains detailed SafeAccountConfig specifying owners' addresses, threshold, various optional deployment parameters such as fallbackHandler, payment options, and SafeDeploymentConfig which includes optional saltNonce, Safe version, and deployment type. This setup is required before creating deployment transactions and ensures the Safe smart account is configured correctly at deployment time.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/deployment/createsafedeploymenttransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe, {\n  PredictedSafeProps,\n  SafeAccountConfig,\n  SafeDeploymentConfig\n} from '@safe-global/protocol-kit'\n\nconst safeAccountConfig: SafeAccountConfig = {\n  owners: ['0x...', '0x...', '0x...'],\n  threshold: 2,\n  to: '0x...', // Optional\n  data: '0x', // Optional\n  fallbackHandler: '0x...', // Optional\n  paymentToken: '', // Optional\n  payment: 123, // Optional\n  paymentReceiver: '0x...' // Optional\n}\nconst safeDeploymentConfig: SafeDeploymentConfig = {\n  saltNonce: '123', // Optional\n  safeVersion: '1.4.1', // Optional\n  deploymentType: 'canonical' // Optional\n}\nconst predictedSafe: PredictedSafeProps = {\n  safeAccountConfig,\n  safeDeploymentConfig // Optional\n}\n\nconst protocolKit = await Safe.init({\n  provider,\n  signer,\n  predictedSafe\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Client with Safe SDK in TypeScript\nDESCRIPTION: This snippet shows the setup required to initialize the `safeClient`. It uses the `createSafeClient` function from the `@safe-global/sdk-starter-kit` package, requiring a provider, signer, and the Safe address as parameters. This initialized client is then used in other operations like fetching pending transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getpendingtransactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddresss: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sponsoring UserOperation with Paymaster in TypeScript\nDESCRIPTION: This code snippet sponsors a UserOperation using a Paymaster provided by Pimlico. It calls the `sponsorUserOperation` method, passing the `userOperation`, `entryPoint`, and `sponsorshipPolicyId` as parameters.  It then overwrites the `callGasLimit`, `verificationGasLimit`, `preVerificationGas`, and adds `paymasterAndData` to the `sponsoredUserOperation` with the results of the sponsorship.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nif (usePaymaster) {\n    const sponsorResult = await pimlicoPaymasterClient.sponsorUserOperation({\n      userOperation: sponsoredUserOperation,\n      entryPoint: ENTRYPOINT_ADDRESS_V06,\n      sponsorshipPolicyId: SPONSORSHIP_POLICY_ID\n    })\n\n    sponsoredUserOperation.callGasLimit = sponsorResult.callGasLimit\n    sponsoredUserOperation.verificationGasLimit = sponsorResult.verificationGasLimit\n    sponsoredUserOperation.preVerificationGas = sponsorResult.preVerificationGas\n    sponsoredUserOperation.paymasterAndData = sponsorResult.paymasterAndData\n  }\n```\n\n----------------------------------------\n\nTITLE: Using useUpdateThreshold Hook in a React Component (TypeScript)\nDESCRIPTION: Example React component (`App.tsx`) demonstrating how to import and use the `useUpdateThreshold` hook to initiate a threshold update transaction. It defines the necessary parameters (`UpdateThresholdVariables`) and triggers the `updateThreshold` function on a button click, displaying the result.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdatethreshold.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUpdateThreshold, UpdateThresholdVariables } from '@safe-global/safe-react-hooks'\n    \nfunction App() {\n  const {\n    updateThreshold,\n    data,\n    // ...\n  } = useUpdateThreshold()\n\n  const updateThresholdParams: UpdateThresholdVariables = {\n    threshold: 3\n  }\n\n  return (\n    <>\n      <button onClick={() => updateThreshold(updateThresholdParams)}>\n        Update Threshold\n      </button>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeProvider with Safe React Hooks in TypeScript\nDESCRIPTION: Demonstrates importing necessary modules, creating the Safe configuration object with createConfig, and rendering a React application wrapped with SafeProvider to provide Safe context. Dependencies include React, ReactDOM, @safe-global/safe-react-hooks, and the App component. The configuration object is passed to the SafeProvider, which makes the Safe environment accessible throughout the React component tree.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/createconfig.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport App from './App.tsx'\n\nconst config = createConfig({\n  // ...\n})\n\nconst root = document.getElementById('root')\n\nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeConfig for Transaction Querying using TypeScript\nDESCRIPTION: This snippet shows how to create a SafeConfig object using the createConfig function from @safe-global/safe-react-hooks. The config aggregates chain, provider, signer, and safeAddress to specify the environment and Safe instance for interactions. Dependencies: @safe-global/safe-react-hooks, viem/chains. Inputs are values for chain, provider, signer, and safeAddress. The output is a SafeConfig object for use with related Safe hooks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/gettransactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Status with cURL\nDESCRIPTION: Demonstrates how to retrieve Safe account information using a cURL command.  It sends a GET request to the `/api/v1/safes/{address}/` endpoint to obtain details such as the Safe's address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit for Mainnet in TypeScript\nDESCRIPTION: This snippet demonstrates the creation of a SafeApiKit instance configured for the Ethereum Mainnet with chainId set to 1n, preparing the API client for subsequent message retrieval requests.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmessages.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Confirming a Safe Transaction with a Second Signature (TypeScript)\nDESCRIPTION: Demonstrates how a second owner confirms a pending transaction. It initializes a Protocol Kit instance (`protocolKitOwner2`) for the second owner, gets the transaction hash from the fetched transaction data, signs the hash using `protocolKitOwner2.signHash`, and submits this signature using `apiKit.confirmTransaction`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/propose-and-confirm-transactions.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKitOwner2 = await Safe.init({\n  provider: RPC_URL,\n  signer: OWNER_2_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS\n})\n\nconst safeTxHash = transaction.transactionHash\nconst signature = await protocolKitOwner2.signHash(safeTxHash)\n\n// Confirm the Safe transaction\nconst signatureResponse = await apiKit.confirmTransaction(\n  safeTxHash,\n  signature.data\n)\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction API Request (curl)\nDESCRIPTION: This snippet demonstrates a `curl` command to create a multi-signature transaction.  It targets the Safe API endpoint for multisig transactions.  The `address` path parameter is populated with a specific Safe address.  The request includes standard headers. The output is a newly created transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sign Transaction with Multiple Owners using Safe Protocol Kit (TypeScript)\nDESCRIPTION: This snippet demonstrates how to sequentially sign a transaction for a specific Safe account (`SAFE_2_3_ADDRESS`) using multiple owner accounts (`OWNER_4_ADDRESS`, `OWNER_5_ADDRESS`) via the safe-core-sdk-protocol-kit. It involves connecting the kit with different signers and the target Safe address before signing. Requires an initialized Protocol Kit instance, RPC URL, owner addresses, and the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new transaction object\nlet transactionSafe2_3 = await protocolKit.createTransaction({\n  transactions: [safeTransactionData]\n})\n\n// Connect OWNER_4_ADDRESS and the address of SAFE_2_3_ADDRESS\nprotocolKit = await protocolKit.connect({\n  provider: RPC_URL,\n  signer: OWNER_4_ADDRESS,\n  safeAddress: SAFE_2_3_ADDRESS\n})\n\n// Sign the transactionSafe2_3 with OWNER_4_ADDRESS\n// After this, the transactionSafe2_3 contains the signature from OWNER_4_ADDRESS\ntransactionSafe2_3 = await protocolKit.signTransaction(\n  transactionSafe2_3,\n  SigningMethod.SAFE_SIGNATURE,\n  SAFE_3_4_ADDRESS // Parent Safe address\n)\n\n// Connect OWNER_5_ADDRESS\nprotocolKit = await protocolKit.connect({\n  provider: RPC_URL,\n  signer: OWNER_5_ADDRESS\n})\n\n// Sign the transactionSafe2_3 with OWNER_5_ADDRESS\n// After this, the transactionSafe2_3 contains the signature from OWNER_5_ADDRESS\ntransactionSafe2_3 = await protocolKit.signTransaction(\n  transactionSafe2_3,\n  SigningMethod.SAFE_SIGNATURE,\n  SAFE_3_4_ADDRESS // Parent Safe address\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing Adapters with provider-based Safe Initialization\nDESCRIPTION: This snippet demonstrates replacing deprecated adapter usage with the new provider-based approach for Safe initialization. It supports EIP-1193 compatible providers and raw RPC URLs, with optional signer configurations, streamlining the way providers are supplied to the SDK.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v4.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// old\nconst ethAdapter = new EthersAdapter({ ethers, signerOrProvider })\n// const ethAdapter = new Web3Adapter({ web3, signerAddress })\nawait Safe.create({\n   ethAdapter,\n   safeAddress: '0xSafeAddress'\n   ...\n})\n\n// new\nawait Safe.init({\n   provider: window.ethereum, // Or any compatible EIP-1193 provider\n   signer: '0xSignerAddressOrPrivateKey', // Signer address or private key\n   safeAddress: '0xSafeAddress'\n   ...\n})\n\n// ...or...\nawait Safe.init({\n   provider: 'http://rpc.url', // Or websocket\n   signer: '0xPrivateKey' // Signer private key\n   safeAddress: '0xSafeAddress'\n})\n```\n\n----------------------------------------\n\nTITLE: Create Deployment Transaction\nDESCRIPTION: This TypeScript snippet creates the deployment transaction for a new Safe smart account. It calls the `createSafeDeploymentTransaction` method of the Protocol Kit, which constructs the transaction object needed for deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/safe-deployment.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst deploymentTransaction = await protocolKit.createSafeDeploymentTransaction()\n```\n\n----------------------------------------\n\nTITLE: Creating Passkey Credential\nDESCRIPTION: This snippet creates a passkey credential using the WebAuthn API.  It defines parameters for the relying party (RP_NAME), user information, and other cryptographic parameters, and then uses the `navigator.credentials.create` method to generate the passkey. The returned credential object is then used to create the signer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/passkeys.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst RP_NAME = 'Safe Smart Account'\nconst USER_DISPLAY_NAME = 'User display name'\nconst USER_NAME = 'User name'\n\nconst passkeyCredential = await navigator.credentials.create({\n  publicKey: {\n    pubKeyCredParams: [\n      {\n        alg: -7,\n        type: 'public-key'\n      }\n    ],\n    challenge: crypto.getRandomValues(new Uint8Array(32)),\n    rp: {\n      name: RP_NAME\n    },\n    user: {\n      displayName: USER_DISPLAY_NAME,\n      id: crypto.getRandomValues(new Uint8Array(32)),\n      name: USER_NAME\n    },\n    timeout: 60_000,\n    attestation: 'none'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing UserOperation Calldata Encoding in TypeScript\nDESCRIPTION: Implements the `encodeCallData` function, which likely encodes the execution details for an ERC-4337 UserOperation that will be initiated by the Safe account via its associated module. It uses `viem`'s `encodeFunctionData` to format a call, potentially to the Safe module's `executeUserOp` or a similar function, specifying the target address (`to`), value (`value`), and data (`data`) for the underlying transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Address, encodeFunctionData } from 'viem';\n\nexport const encodeCallData = (params: { to: Address; value: bigint; data: `0x${string}` }) => {\n  // Note: The ABI below might represent a function on the Safe's 4337 Module\n  // or a generic execution function. The surrounding text mentions `executeUserOp`.\n  // This ABI fragment seems generic; a real implementation might target\n  // a specific function like `executeUserOp(address to, uint256 value, bytes data)`.\n  return encodeFunctionData({\n    abi: [\n      {\n        inputs: [\n          {\n            internalType: 'address',\n            name: 'to',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'value',\n            type: 'uint256'\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes'\n          }\n          // Potentially more parameters depending on the actual function (e.g., operation type)\n        ],\n        // Function name depends on the Safe Module implementation (e.g., 'executeUserOp')\n        name: 'executeUserOp', // Example function name\n        outputs: [],\n        stateMutability: 'nonpayable', // Or 'payable' if value can be > 0\n        type: 'function'\n      }\n    ],\n    functionName: 'executeUserOp', // Example function name\n    args: [params.to, params.value, params.data]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe Account and Predicted Safe Properties (TypeScript)\nDESCRIPTION: Defines the desired configuration for the Safe account (`safeAccountConfig`), including the list of initial owners' addresses and the minimum threshold of owners required to approve transactions. It then wraps this configuration in a `predictedSafe` object, which is used by the Protocol Kit to determine the deterministic address the Safe will have before it is actually deployed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeAccountConfig: SafeAccountConfig = {\n  owners: ['0x...', '0x...', '0x...'],\n  threshold: 2\n  // ...\n}\n\nconst predictedSafe: PredictedSafeProps = {\n  safeAccountConfig\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit with Optional Transaction Service URL - TypeScript\nDESCRIPTION: This snippet demonstrates instantiating the SafeApiKit by providing both the chainId and an optional txServiceUrl. The module '@safe-global/api-kit' is imported, and the API instance is created using an object with configuration parameters. Dependencies include Node.js, the SafeApiKit library, and a supported network chain. The chainId parameter specifies the Ethereum network, while txServiceUrl allows overriding the default transaction service. The expected output is a configured SafeApiKit instance ready for API calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/constructor.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nconst chainId = 1n\n\nconst txServiceUrl = 'https://...'\n\nconst apiKit = new SafeApiKit({\n  chainId,\n  txServiceUrl // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Importing Safe Client and Fetching Owners in TypeScript\nDESCRIPTION: This snippet illustrates importing the safeClient from a setup module, defining a transaction hash, and calling 'getOwnersWhoApprovedTransaction' to retrieve the list of owners who approved that transaction. It demonstrates the typical usage pattern and required parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getownerswhoapprovedtransaction.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst safeTxHash = '0x...'\n\nconst owners = safeClient.getOwnersWhoApprovedTransaction(safeTxHash)\n```\n\n----------------------------------------\n\nTITLE: Usage of 'operation' Parameter - TypeScript\nDESCRIPTION: This snippet demonstrates setting the optional `operation` parameter within the `transactions` object, specifically illustrating how to set it to `0` for a `Call`. The `operation` parameter defaults to `0`. Requires the `createTransaction` method and valid values for the other parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x',\n    operation: 0\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Monerium SDK Client and Starting Authentication Flow in TypeScript\nDESCRIPTION: Shows how to instantiate the Monerium SDK client and initiate user authentication linked to their Safe account by redirecting to Monerium login, including signature verification setup using the Safe SDK.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/monerium.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { MoneriumClient } from '@monerium/sdk'\n\n// Instantiate Monerium SDK client with credentials\nconst monerium = new MoneriumClient({\n  clientId: 'a1b2c3-x7y8y9',\n  environment: 'sandbox'\n})\n\n// Initiate authentication flow, redirecting users to Monerium login page\nawait monerium.authorize({\n  address: safeAddress,\n  signature: '0x',\n  redirectUrl: 'http://localhost:3000/return',\n  chainId: 11155111\n})\n\n```\n\n----------------------------------------\n\nTITLE: Initialising Safe Protocol Kit with Provider and Signer in JavaScript\nDESCRIPTION: This code snippet showcases the initialization of the Safe protocol kit using the `Safe.init` method, which requires configuration parameters such as `provider`, `signer`, and `safeAddress`. It prepares the `protocolKit` object to enable interactions with the Safe protocol, including fetching owners and managing transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getowners.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'operation' parameter in Solidity\nDESCRIPTION: Shows usage of the getTransactionHash function focusing on the 'operation' parameter which specifies the operation type (Call or DelegateCall) for the Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Safe Protocol Kit using the `Safe.init` method. It requires a provider, a signer, and the Safe address. The resulting `protocolKit` instance is then exported for use in other modules.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getbalance.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Module Transactions via TypeScript\nDESCRIPTION: This code (referenced from '../examples/gnosis-chain/-v1-safes-{address}-module-transactions--get.ts') demonstrates how to perform a GET request to fetch module transactions for a specific Safe address using TypeScript. The example expects dependencies such as an HTTP client (e.g., axios or fetch), and the relevant Safe address. The expected response is a paginated object listing transactions, while parameters such as address, module, operation, and block_number can be controlled via query parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_37\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Disable Guard Safe Transaction in TypeScript\nDESCRIPTION: This snippet demonstrates calling the createDisableGuardTx method from the protocol kit to build a Safe transaction that disables a specified Safe Guard contract. It shows how to pass an optional options object configuring gas limits, gas price, gas token, refund receiver, and nonce to tailor the transaction execution costs and ordering. The snippet requires the protocolKit instance imported from a setup module and the SafeTransactionOptionalProps type for typing the options.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createdisableguardtx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SafeTransactionOptionalProps } from '@safe-global/protocol-kit'  \nimport { protocolKit } from './setup.ts'  \n\nconst guardAddress = '0x...'  \n\nconst options: SafeTransactionOptionalProps = {  \n  safeTxGas: '123', // Optional  \n  baseGas: '123', // Optional  \n  gasPrice: '123', // Optional  \n  gasToken: '0x...', // Optional  \n  refundReceiver: '0x...', // Optional  \n  nonce: 123 // Optional  \n}  \n\nconst safeTransaction = await protocolKit.createDisableGuardTx(  \n  guardAddress,  \n  options // Optional  \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit in TypeScript\nDESCRIPTION: This snippet shows the initialization of the Safe protocol kit using the `Safe.init` method. It requires `provider`, `signer`, and `safeAddress` to be passed as parameters.  The setup is necessary to use the `approveTransactionHash` function and other methods from the kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Signer Credentials and RPC URL in TypeScript\nDESCRIPTION: Declares constant placeholders for the signer's address, private key, and the RPC URL endpoint used to connect to the Sepolia Ethereum test network. The signer is required for transaction ownership and signing. This snippet needs actual values to function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst SIGNER_ADDRESS = // ...\nconst SIGNER_PRIVATE_KEY = // ...\nconst RPC_URL = 'https://rpc.ankr.com/eth_sepolia'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Safe Transaction Variables in TypeScript\nDESCRIPTION: Defines constant variables that hold key information needed for interacting with the Safe and executing transactions. This includes the Safe address, owner addresses and private keys, and the RPC URL for connecting to the blockchain. These placeholders must be replaced with actual values for your specific setup.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst SAFE_ADDRESS = // ...\n\nconst OWNER_1_ADDRESS = // ...\nconst OWNER_1_PRIVATE_KEY = // ...\n\nconst OWNER_2_PRIVATE_KEY = // ...\n\nconst RPC_URL = 'https://eth-sepolia.public.blastapi.io'\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Messages Using SafeApiKit in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the getMessage method of the SafeApiKit to asynchronously retrieve a Safe message given its hash string. It requires an initialized SafeApiKit instance which is configured with a chainId representing the target blockchain network. The input parameter is the messageHash of type string, and the output is a Promise resolving to a SafeMessage object. This is used to fetch transaction or message data securely from the Safe API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmessage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst messageHash = '0x...'\n\nconst message = await apiKit.getMessage(messageHash)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe{Global} API Kit with Custom Service (TypeScript)\nDESCRIPTION: Creates an instance of `SafeApiKit` configured to use a custom Safe Transaction Service endpoint. This requires specifying both the correct `chainId` and the `txServiceUrl` pointing to the custom service instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/propose-and-confirm-transactions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKit = new SafeApiKit({\n  chainId: 1n, // set the correct chainId\n  txServiceUrl: 'https://url-to-your-custom-service'\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Balances using cURL\nDESCRIPTION: Shows how to use cURL to send a GET request to the `/api/v2/safes/{address}/balances/` endpoint. This retrieves paginated Ether and ERC20 token balances for the specified Safe address (example: `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). Accepts and expects JSON content. Query parameters like `trusted`, `exclude_spam`, `limit`, and `offset` can be appended to the URL to filter and paginate results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Global Protocol Kit in TypeScript\nDESCRIPTION: This snippet shows how to initialize the protocol kit from the '@safe-global/protocol-kit' library using configuration parameters including an Ethereum provider, signer, and Safe contract address. The initialized 'protocolKit' instance is a prerequisite for creating and hashing Safe transactions as shown in other snippets. It encapsulates setup details needed to interact with Safe transactions securely.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/gettransactionhash.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Transfers\nDESCRIPTION: Provides an example JSON response structure returned by the 'List Transfers' endpoint (`/api/v1/safes/{address}/transfers/`). The response includes pagination fields (`count`, `next`, `previous`) and a `results` array containing transfer objects, each detailing properties like type, execution date, block number, transaction hash, addresses, value, and token information (if applicable).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max Fee Per Gas (`maxFeePerGas`) in `safeClient.send` in TypeScript\nDESCRIPTION: Illustrates how to optionally set the maximum fee per gas (`maxFeePerGas`) for EIP-1559 transactions when using `safeClient.send`. This defines the absolute maximum price per gas unit the sender is willing to pay.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  transactions,\n  maxFeePerGas: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Confirming Pending Safe Transactions in TypeScript\nDESCRIPTION: Defines a React component that retrieves pending transactions from Safe and confirms them via useConfirmTransaction hook, enabling multi-owner confirmation for transactions requiring multiple signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/react-hooks/guides/send-transactions.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction ConfirmPendingTransactions() {\n  const { getPendingTransactions } = useSafe()\n  const { data = [] } = getPendingTransactions()\n  const { confirmTransaction } = useConfirmTransaction()\n\n  return (\n    <>\n      {data.length > 0 && data.map(tx => (\n        <>\n          {tx.safeTxHash}\n          <button onClick={() => confirmTransaction({\n            safeTxHash: tx.safeTxHash\n          })} />\n        </>\n      ))}\n    </>\n  )\n}\n\nexport default ConfirmPendingTransactions\n```\n\n----------------------------------------\n\nTITLE: Fetching User Operation with curl\nDESCRIPTION: This snippet shows how to retrieve a UserOperation from the Safe Transaction Service API using a curl command. It sends a GET request to a specific endpoint with the UserOperation hash and includes headers for specifying the content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_55\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction Data with Protocol Kit in TypeScript\nDESCRIPTION: Defines the parameters for the transaction you want the Safe to execute using the `MetaTransactionData` type. This object specifies the recipient (`to`), value (`value`), calldata (`data`), and operation type (`operation`). This data is then passed to `protocolKit.createTransaction` to generate a `SafeTransaction` object suitable for the Safe's multi-signature execution flow.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeTransactionData: MetaTransactionData = {\n  to: '0x',\n  value: '1', // 1 wei\n  data: '0x',\n  operation: OperationType.Call\n}\n\nconst safeTransaction = await protocolKitOwner1.createTransaction({\n  transactions: [safeTransactionData]\n})\n```\n\n----------------------------------------\n\nTITLE: Running Development Builds on Emulators\nDESCRIPTION: These commands launch the local development build of the React Native application on Android and iOS emulators, respectively. These commands allow developers to test and debug the application on emulators before deploying to physical devices.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo run:android\nnpx expo run:ios\n```\n\n----------------------------------------\n\nTITLE: Adding a Safe Delegate with delegate address in TypeScript\nDESCRIPTION: This snippet highlights calling addSafeDelegate with the required delegateAddress, delegatorAddress, label, and signer properties. It emphasizes that safeAddress is optional, and delegateAddress is critical for successful execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafedelegate.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = await apiKit.addSafeDelegate({\n  delegateAddress: '0x...',\n  delegatorAddress: '0x...',\n  label: 'abc',\n  signer\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit in TypeScript\nDESCRIPTION: This snippet shows how to set up and initialize the `SafeApiKit`. It imports the necessary class and creates a new instance, configuring it with the target blockchain's `chainId`. This `apiKit` instance is then used for interacting with the Safe API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/confirmsafeoperation.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Signing a Safe User Operation with Safe4337Pack in TypeScript\nDESCRIPTION: Signs a SafeOperation object with the connected signer using the signSafeOperation() method. The resulting signedSafeOperation includes the cryptographic signature to be verified by the Safe4337Module before processing the batched transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst signedSafeOperation = await safe4337Pack.signSafeOperation(identifiedSafeOperation)\n```\n\n----------------------------------------\n\nTITLE: Setting Spending Limit for AI Agent using Safe Allowance Module in TypeScript\nDESCRIPTION: This snippet details setting a daily spending limit for an AI agent on a Safe Smart Account using the Allowance module. It initializes the Safe instance, encodes function calls to add a delegate and set a token allowance with reset intervals, and creates and executes a meta transaction bundle. Dependencies include '@safe-global/protocol-kit', '@safe-global/safe-modules-deployments', and '@safe-global/types-kit'. Key parameters include the agent address, ERC20 token address, allowance amount, reset time (in minutes), and reset base. The output is the execution transaction response completing the allowance configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/agent-with-spending-limit.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getAllowanceModuleDeployment } from '@safe-global/safe-modules-deployments'\\nimport Safe from '@safe-global/protocol-kit'\\nimport { getAllowanceModuleDeployment } from '@safe-global/safe-modules-deployments'\\nimport { OperationType, MetaTransactionData } from '@safe-global/types-kit'\\n\\nconst ERC20_TOKEN_ADDRESS = '0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238'\\nconst preExistingSafe = await Safe.init({\\n  provider: RPC_URL,\\n  signer: OWNER_1_PRIVATE_KEY,\\n  safeAddress: safeAddress\\n})\\n\\nconst allowanceModule = getAllowanceModuleDeployment({ network: '11155111' })!\\n\\nconst allowanceModuleAddress = allowanceModule.networkAddresses['11155111']\\n\\nconst callData1 = encodeFunctionData({\\n  abi: allowanceModule.abi,\\n  functionName: 'addDelegate',\\n  args: [AGENT_ADDRESS]\\n})\\n// agent can spend 1 USDC per day:\\nconst callData2 = encodeFunctionData({\\n  abi: allowanceModule.abi,\\n  functionName: 'setAllowance',\\n  args: [\\n    AGENT_ADDRESS, // delegate\\n    ERC20_TOKEN_ADDRESS, // token\\n    1_000_000, // allowance amount (1 USDC)\\n    1_440, // reset time in minutes (1440 mins = 1 day)\\n    0 // reset base (fine to set zero)\\n  ]\\n})\\n\\nconst safeTransactionData1: MetaTransactionData = {\\n  to: allowanceModuleAddress,\\n  value: '0',\\n  data: callData1,\\n  operation: OperationType.Call\\n}\\n\\nconst safeTransactionData2: MetaTransactionData = {\\n  to: allowanceModuleAddress,\\n  value: '0',\\n  data: callData2,\\n  operation: OperationType.Call\\n}\\n\\nconst safeTransaction = await preExistingSafe.createTransaction({\\n  transactions: [safeTransactionData1, safeTransactionData2],\\n  onlyCalls: true\\n})\\n\\nconst txResponse = await preExistingSafe.executeTransaction(safeTransaction)\\nconsole.log(txResponse)\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates API Request (GET)\nDESCRIPTION: This snippet demonstrates a GET request to retrieve a list of delegates. It is part of the delegate listing API call. The request uses `curl` and specifies the `Accept` and `content-type` headers for JSON.  It retrieves data from the specified endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a transaction to disable a Safe Module in TypeScript\nDESCRIPTION: Example showing how to create a transaction to disable a Safe Module using the createDisableModuleTx function with various optional parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SafeTransactionOptionalProps } from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst moduleAddress = '0x...'\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createDisableModuleTx(\n  moduleAddress,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Safenet Transaction Flow with Mermaid\nDESCRIPTION: This Mermaid diagram visually represents the first two phases of a Safenet transaction. It uses sequence diagrams to illustrate the interaction between different components such as the Processor, Relayer, Liquidity Provider, Entry Point, Settlement Engine, Guard, Account, and Target. The diagram depicts cosignature, execution, fund transfers, and transaction execution steps, providing a clear overview of the process.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/safenet/safenet-transaction.mdx#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n box MVP Processor\n actor P as Processor\n actor R as Relayer\n actor LP as Liquidity Provider\n end\n participant E as Entry Point\n participant S as Settlement Engine\n participant G as Guard\n participant A as Account\n participant T as Target\n \n P->>R: cosignature\n R->>+E: executeSafenetAction()\n LP-->>A: transferFrom(Liquidity Provider, Account)\n E->>A: execTransaction()\n E->>G: checkSafeTransaction()\n G-->>P: ecrecover()\n A->>T: CALL\n deactivate E\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies - TypeScript\nDESCRIPTION: This command installs the necessary dependencies for using the Safe{Core} SDK in a TypeScript project. It includes ethers, @safe-global/api-kit, @safe-global/protocol-kit, and @safe-global/types-kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add ethers @safe-global/api-kit @safe-global/protocol-kit @safe-global/types-kit\n```\n\n----------------------------------------\n\nTITLE: Passing `ownerAddress` to `getSafesByOwner` in TypeScript\nDESCRIPTION: Highlights the `ownerAddress` parameter within a call to `apiKit.getSafesByOwner`. This parameter is a string representing the Ethereum address whose owned Safes are to be queried.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafesbyowner.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst decodedData = await apiKit.getSafesByOwner(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Owner to Module (TypeScript)\nDESCRIPTION: This snippet illustrates how to interact with the `OwnableExecutor` module directly to add a new owner to the smart account. It encodes the function call data, creates a user operation, sends it, waits for the transaction receipt, and updates the UI. It depends on the smart account client and viem libraries.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst addOwner = async () => {\n  setLoading(true)\n  console.log('Adding owner...')\n\n  // The addOwner function is part of the OwnableExecutorModule. We encode the function data using the viem library:\n  const addOwnerData = encodeFunctionData({\n    abi: parseAbi(['function addOwner(address)']),\n    functionName: 'addOwner',\n    args: ['0x0000000000000000000000000000000000000002'] // We add 0x2 as the new owner just as an example.\n  })\n\n  // We use the smart account client to send the user operation: In this call, our smart account calls the `addOwner`\n  // function at the `ownableExecutorModule` with the new owner's address.\n  const userOp = await smartAccountClient?.sendUserOperation({\n    calls: [\n      {\n        to: ownableExecutorModule,\n        value: parseEther('0'),\n        data: addOwnerData\n      }\n    ]\n  })\n\n  console.log('User operation:', userOp, '\\nwaiting for tx receipt...')\n\n  // Again, we wait for the transaction to be settled:\n  const receipt = await pimlicoClient.waitForUserOperationReceipt({\n    hash: userOp as `0x${string}`\n  })\n\n  console.log('Owner added, tx receipt:', receipt)\n  setOwnerIsAdded(true)\n  setLoading(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Propose Signed Safe Transaction using Safe API Kit (TypeScript)\nDESCRIPTION: This snippet outlines the process of submitting a fully signed Safe transaction to the off-chain Safe Transaction Service API using the `safe-service-client` (`SafeApiKit`). This service stores the transaction and its signatures. It requires retrieving one of the owner's signatures, calculating the transaction hash, initializing the API Kit with the correct chain ID, and calling the `proposeTransaction` method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the signature from OWNER_1_ADDRESS\nconst signatureOwner1 = safeTransaction.getSignature(OWNER_1_ADDRESS) as EthSafeSignature\n\n// Get the transaction hash of the safeTransaction\nconst safeTransactionHash = await protocolKit.getTransactionHash(safeTransaction)\n\n// Instantiate the API Kit\n// Use the chainId where you have the Safe account deployed\nconst apiKit = new SafeApiKit({ chainId })\n\n// Propose the transaction\nawait apiKit.proposeTransaction({\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe4337Pack with Sponsored Verifying Paymaster in TypeScript\nDESCRIPTION: Initializes Safe4337Pack to use a sponsored verifying paymaster that covers transaction fees without the Safe having prior funds. When using Pimlico as the provider, a sponsorship policy ID can be optionally specified to configure the sponsoring strategy. The paymaster URL, address, and token must be provided.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safe4337Pack = await Safe4337Pack.init({\n  // ...\n  paymasterOptions: {\n    isSponsored: true,\n    paymasterUrl: `https://api.pimlico.io/v2/11155111/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`,\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    sponsorshipPolicyId // Optional value to set the sponsorship policy id from Pimlico\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Global API Kit Using npm in Bash\nDESCRIPTION: Installs the @safe-global/api-kit package into a project using the npm package manager. Running this command adds the API Kit as a dependency required for interacting with the Safe Transaction Service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/overview.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @safe-global/api-kit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Transactions with getAllTransactions in TypeScript\nDESCRIPTION: Example of retrieving all transactions for a Safe account using the Safe API Kit. The method accepts a Safe address and optional configuration options to filter transactions by executed status, queue position, and trust level.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getalltransactions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AllTransactionsOptions } from '@safe-global/api-kit'\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\n\nconst config: AllTransactionsOptions = {\n  executed: true, // Optional\n  queued: true, // Optional\n  trusted: true // Optional\n}\n\nconst allTxs = await apiKit.getAllTransactions(\n  safeAddress,\n  config // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Using useUpdateOwners Hook in React with TypeScript\nDESCRIPTION: Shows how to import and use the useUpdateOwners hook from @safe-global/safe-react-hooks in a React functional component. The snippet extracts add, remove, and swap functions to update Safe owners. It requires a SafeProvider context wrapping the component, with a Safe already deployed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUpdateOwners } from '@safe-global/safe-react-hooks'\n\nfunction App() {\n  const { add, remove, swap } = useUpdateOwners()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript setup of SafeApiKit with chain ID\nDESCRIPTION: This code snippet shows initializing an instance of SafeApiKit by specifying the chain ID for the mainnet. It is needed as a prerequisite before performing transaction estimations. Dependencies include the '@safe-global/api-kit' library. Inputs are the configuration object with chainId; the output is an apiKit instance ready for API calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/estimatesafetransaction.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Safe-Global SDK Client Instance (TypeScript)\nDESCRIPTION: This snippet shows how to import the createSafeClient function from '@safe-global/sdk-starter-kit' and create an instance of the safeClient with provider, signer, and safeAddress parameters. This setup is necessary before invoking methods like isDeployed() for Safe deployment checks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/isdeployed.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Owner Removal in React Component with Safe React Hooks\nDESCRIPTION: A complete React component example that demonstrates how to import and use the useUpdateOwners hook to remove an owner from a Safe wallet. It shows how to initialize the hook, set up parameters, and trigger the owner removal process.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/remove.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUpdateOwners, RemoveOwnerVariables } from '@safe-global/safe-react-hooks'\n\nfunction RemoveOwner() {\n  const { remove } = useUpdateOwners()\n  const {\n    removeOwner,\n    data,\n    // ...\n  } = remove\n\n  const removeOwnerParams: RemoveOwnerVariables = {\n    ownerAddress: '0x...',\n    threshold: 1 // Optional\n  }\n\n  return (\n    <>\n      <button onClick={() => removeOwner(removeOwnerParams)}>\n        Remove Owner\n      </button>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default RemoveOwner\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol Kit for Safe in TypeScript\nDESCRIPTION: Shows how to initialize the Safe Protocol Kit instance in TypeScript, a prerequisite for signing operations. Requires the '@safe-global/protocol-kit' library and user-provided values for provider, signer, and the target Safe address. Returns a Protocol Kit instance that can be used for message signing and other safe operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/signmessage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions with `safeClient.send` in TypeScript\nDESCRIPTION: Demonstrates using the `safeClient.send` method to propose or execute one or multiple transactions. It shows the structure of the `transactions` array and optional parameters like `from`, `gasLimit`, `gasPrice`, `maxFeePerGas`, `maxPriorityFeePerGas`, and `nonce`. Requires an initialized `safeClient` (see setup example).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst transactions = [{\n  to: '0x...',\n  data: '0x...',\n  value: '0',\n  operation: 1 // Optional\n},\n{\n  to: '0x...',\n  data: '0x...',\n  value: '0',\n  operation: 1 // Optional\n}]\n\nconst txResult = await safeClient.send({\n  transactions,\n  from: '0x...', // Optional\n  gasLimit: '123', // Optional\n  gasPrice: '123', // Optional\n  maxFeePerGas: '123', // Optional\n  maxPriorityFeePerGas: '123', // Optional\n  nonce: 123 // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Sign Message - Safe Transaction Service API - bash curl\nDESCRIPTION: Demonstrates how to send a POST request using `curl` to add a signature for a specific message hash via the Safe Transaction Service API. It targets the `/api/v1/messages/{message_hash}/signatures/` endpoint and requires the message hash as a path parameter and appropriate content headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_15\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X POST https://safe-transaction-gnosis-chain.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe User Operation with Multiple Transactions in TypeScript\nDESCRIPTION: Demonstrates building an array of transaction objects (each containing 'to', 'data', and 'value' fields) and creating a Safe user operation using the createTransaction() method. This returns a SafeOperation object containing transaction data and owner signatures required for ERC-4337 transaction execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Define the transactions to execute\nconst transaction1 = { to, data, value }\nconst transaction2 = { to, data, value }\n\n// Build the transaction array\nconst transactions = [transaction1, transaction2]\n\n// Create the SafeOperation with all the transactions\nconst safeOperation = await safe4337Pack.createTransaction({ transactions })\n```\n\n----------------------------------------\n\nTITLE: Encoding MultiSend Transactions in TypeScript\nDESCRIPTION: Provides functions to encode an array of internal Safe transactions (`InternalTx`) into a single calldata payload for the `multiSend` function of the Gnosis Safe MultiSend library. `encodeInternalTransaction` packs the operation type, target address, value, data length, and data for each transaction, and `encodeMultiSend` concatenates these packed transactions and encodes the final call to `multiSend`. Requires `viem` for `encodePacked` and `encodeFunctionData`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Address, encodeFunctionData, encodePacked } from 'viem';\n\ntype InternalTx = {\n  to: Address\n  data: `0x${string}`\n  value: bigint\n  operation: 0 | 1 // 0 for CALL, 1 for DELEGATECALL\n}\n\nconst encodeMultiSend = (txs: InternalTx[]): `0x${string}` => {\n  const data: `0x${string}` = `0x${txs.map((tx) => encodeInternalTransaction(tx)).join('')}`\n\n  return encodeFunctionData({\n    abi: [\n      {\n        inputs: [{ internalType: 'bytes', name: 'transactions', type: 'bytes' }],\n        name: 'multiSend',\n        outputs: [],\n        stateMutability: 'payable',\n        type: 'function'\n      }\n    ],\n    functionName: 'multiSend',\n    args: [data]\n  })\n}\n\nconst encodeInternalTransaction = (tx: InternalTx): string => {\n  const encoded = encodePacked(\n    ['uint8', 'address', 'uint256', 'uint256', 'bytes'],\n    [tx.operation, tx.to, tx.value, BigInt(tx.data.slice(2).length / 2), tx.data],\n  )\n  return encoded.slice(2) // Remove '0x' prefix for concatenation\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction for Fallback Handler (Example)\nDESCRIPTION: This snippet demonstrates how to create a Safe transaction to enable a fallback handler. It utilizes the `createEnableFallbackHandlerTx` function from the Safe Protocol Kit, taking the fallback handler's address and optional configuration parameters as inputs. The output is a Safe transaction object, which can then be signed and executed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SafeTransactionOptionalProps } from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst fallbackHandlerAddress = '0x...'\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createEnableFallbackHandlerTx(\n  fallbackHandlerAddress,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Sending ERC-20 Tokens from Safe to Recipient\nDESCRIPTION: Initiates transfer of specified ERC-20 tokens from a Safe account to another address. Requires Safe address, network URL, recipient address, token contract address, and token amount in wei. Optional parameters support private key input, nonce setting, and automation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/unattended-commands.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsafe-cli send-erc20 [OPTIONS] SAFE_ADDRESS NODE_URL TO TOKEN_ADDRESS AMOUNT\n\n╭─ Arguments ────────────────────────────────────────────────────────────────────────────────╮\n│ *    safe_address      CHECKSUMADDRESS  The address of the Safe. [required]                │\n│ *    node_url          TEXT             Ethereum node url. [required]                      │\n│ *    to                CHECKSUMADDRESS  The address of destination. [required]             │\n│ *    token_address      CHECKSUMADDRESS  Erc20 token address. [required]                   │\n│ *    amount             INTEGER          Amount of erc20 tokens in wei to send. [required] │\n╰────────────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Options ──────────────────────────────────────────────────────────────────────────────────╮\n│ --private-key                         TEXT     List of private keys of signers.            │\n│ --safe-nonce                          INTEGER  Force nonce for tx_sender                   │\n│ --interactive    --non-interactive             Enable/disable interactive mode.          │\n╰────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Adding Signature to Safe Message (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `addMessageSignature` method from the Safe API Kit to add a signature to an existing Safe message. It requires a Safe message hash and a signature as input. The Safe API Kit instance (`apiKit`) should be initialized beforehand.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addmessagesignature.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\n    const safeMessageHash = '0x...'\n    \n    const signature = '0x...'\n\n    await apiKit.addMessageSignature(safeMessageHash, signature)\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates Using Safe Transaction Service API in TypeScript and bash\nDESCRIPTION: Shows how to retrieve a paginated list of delegates from the Safe Transaction Service via a GET request. Dependencies include the REST API endpoint /api/v2/delegates/. Parameters allow filtering by safe address, delegate, delegator, label, with pagination support through limit and offset. The snippet includes an example of a TypeScript import comment and a curl command demonstrating request headers. The expected JSON response contains pagination details and an array of delegates with properties such as safe address, delegate, delegator, and label.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v2-delegates--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Pimlico Paymaster Client for Sponsoring User Operations in TypeScript\nDESCRIPTION: Initializes a Pimlico Paymaster client to manage sponsorship of user operations, facilitating interaction with the Paymaster API v2.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst paymasterClient = createPimlicoPaymasterClient({\n  transport: http(`https://api.pimlico.io/v2/${chainName}/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`),\n  entryPoint: ENTRYPOINT_ADDRESS_V06\n})\n\n```\n\n----------------------------------------\n\nTITLE: EstimateFeeFunctionProps Type Definition\nDESCRIPTION: Defines the `EstimateFeeFunctionProps` type, which provides the structure to handle user operation gas estimations before and after estimation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nEstimateFeeFunctionProps = {\n  userOperation: UserOperation\n  bundlerUrl: string\n  entryPoint: string\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Storage with getStorageAt in Solidity\nDESCRIPTION: Defines the ISafe interface specifying the getStorageAt method, which reads a segment of storage from the contract at a specified offset and length and returns it as bytes. Includes a sample contract Example calling getStorageAt with offset 0 and length 1. To use, import the interface, ensure external view context, and pass desired offset (start position in storage, as uint256) and length (number of 32-byte storage slots to read, as uint256). Returns a bytes array of the raw storage data. Limitations include requiring ISafe-compliant contracts and matching storage layouts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/utilities/getStorageAt.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function getStorageAt(uint256 offset, uint256 length) external view returns (bytes);\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).getStorageAt(0, 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using addSafeDelegate - TypeScript\nDESCRIPTION: This snippet details the updated parameter object properties for the `addSafeDelegate` method. The method now accepts a configuration object with `safeAddress`, `delegateAddress`, `delegatorAddress`, `label`, and `signer` parameters. It adds a safe delegate based on the provided configuration. Requires the Safe API Kit to be initialized.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v1.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// old\nconst delegateConfig: SafeDelegateConfig = {\n  safe,\n  delegate,\n  label,\n  signer\n}\nawait safeService.addSafeDelegate(delegateConfig)\n\n// new\nconst delegateConfig: AddSafeDelegateProps = {\n  safeAddress, // Optional\n  delegateAddress,\n  delegatorAddress,\n  label,\n  signer\n}\nawait apiKit.addSafeDelegate(delegateConfig)\n```\n\n----------------------------------------\n\nTITLE: Extending Safe Client with Operations\nDESCRIPTION: This snippet shows how to extend a Safe client with the `safeOperations` module. It defines bundler and paymaster options to be passed to the `safeOperations` function, enabling features like transaction bundling and paymaster sponsorship.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient, safeOperations } from '@safe-global/sdk-starter-kit'\n\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst bundlerOptions: BundlerOptions = {\n  bundlerUrl: 'https://...'\n}\n\nconst paymasterOptions: PaymasterOptions = {\n  isSponsored: true, // Optional\n  paymasterUrl: 'https://...', // Optional\n  sponsorshipPolicyId: 'abc', // Optional\n  paymasterAddress: '0x...', // Optional\n  paymasterTokenAddress: '0x...', // Optional\n  amountToApprove: 123n // Optional\n}\n\nexport const safeOperationsClient = await safeClient.extend(\n  safeOperations(bundlerOptions, paymasterOptions)\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying saltNonce in safeOptions for createSafeClient (TypeScript)\nDESCRIPTION: Details the `safeOptions.saltNonce` parameter (type `string` or `bigint`) used in `createSafeClient` for new Safe deployment. This value influences the deterministic generation of the Safe's address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/constructor.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeOptions: {\n    owners: ['0x...', '0x...', '0x...'],\n    threshold: 2,\n    saltNonce: 123n // highlight-line\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Safe Operations (JSON)\nDESCRIPTION: Illustrates the JSON response structure returned by the List Safe Operations endpoint. The response includes pagination details (`count`, `next`, `previous`) and a `results` array containing Safe Operation objects, each with fields like `created`, `modified`, `safeOperationHash`, `moduleAddress`, `confirmations`, `preparedSignature`, and a nested `userOperation` object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit in TypeScript\nDESCRIPTION: This snippet illustrates how to initialize the Safe Protocol Kit by importing the Safe class from '@safe-global/protocol-kit' and setting it up with parameters like provider, signer, and safeAddress. This initialization is a prerequisite for creating and executing Safe transactions. The snippet exports 'protocolKit' for use in transaction execution and creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/executetransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Safe with Provider (window.ethereum)\nDESCRIPTION: This code snippet connects to a Safe using an injected provider, such as MetaMask.  It uses `window.ethereum` as the provider.  Requires a browser environment with an injected provider, and the `@safe-global/protocol-kit` library. The `signer` and `safeAddress` must be correctly configured.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.connect({\n  provider: window.ethereum,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Usage of 'nonce' Parameter - TypeScript\nDESCRIPTION: This code snippet shows how to set the optional `nonce` parameter within the `options` object. The `nonce` parameter sets the transaction's nonce. It requires `createTransaction` method and the use of an options object that allows the custom nonce to be applied. The safe address must be valid.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction(\n  '0x...',\n  options: {\n    nonce: 123\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Safe4337Pack from Relay Kit in TypeScript\nDESCRIPTION: Imports the Safe4337Pack class from the @safe-global/relay-kit package. This class facilitates the creation, signing, and submission of Safe user operations according to the ERC-4337 standard. No external dependencies beyond the relay-kit package are needed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Safe4337Pack } from '@safe-global/relay-kit'\n```\n\n----------------------------------------\n\nTITLE: Calling createChangeThresholdTx (parameter refundReceiver)\nDESCRIPTION: This TypeScript snippet shows how to pass the optional `refundReceiver` parameter to the `createChangeThresholdTx` function. The function sets the address of the gas payment receiver or `0x0000000000000000000000000000000000000000` if there is no payment. The method returns a Safe transaction object that will update the threshold in the safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createchangethresholdtx.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createChangeThresholdTx(\n  threshold: 3,\n  {\n    refundReceiver: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with PrivyProvider\nDESCRIPTION: This snippet shows how to wrap a React application with the `PrivyProvider` component. This provider initializes Privy's context and makes the `usePrivy` and `useWallets` hooks available to the application. The `config` prop allows customization of embedded wallets.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/privy.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<PrivyProvider\n    appId={PRIVY_APP_ID}\n    config={{\n      embeddedWallets: { \n        createOnLogin: 'users-without-wallets' // defaults to 'off'\n      }\n    }}\n  >\n    <App />\n  </PrivyProvider>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Configuration with getTransaction Hook - TypeScript\nDESCRIPTION: Illustrates how to call getTransaction with both a safeTxHash and a custom configuration object (config) instead of relying on default context from SafeProvider. The configuration is created separately using createConfig which includes chain info, provider, signer, and safe address to customize the hook's network context and signer settings. This approach is useful when working outside of default SafeProvider contexts or needing specific chain/signer setup.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/gettransaction.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = getTransaction({\n  safeTxHash: '0x...',\n  config\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript usage of estimateSafeTransaction with @safe-global/api-kit\nDESCRIPTION: This snippet demonstrates importing the SafeMultisigTransactionEstimate type and using the apiKit instance to estimate the gas for a Safe transaction. It covers the setup of the transaction object with recipient, value, data, and optional operation, and then calls the estimate method. Dependencies include @safe-global/api-kit and a configured apiKit instance. Inputs include Safe address and transaction details; output is a promise resolving to the estimated gas response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/estimatesafetransaction.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SafeMultisigTransactionEstimate } from '@safe-global/api-kit'\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\n\nconst safeTransaction: SafeMultisigTransactionEstimate = {\n  to: '0x...'\n  value: '0'\n  data: '0x'\n  operation: 0 // Optional\n}\n\nconst estimateTx = await apiKit.estimateSafeTransaction(\n  safeAddress,\n  safeTransaction\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Nonce with Protocol Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve the Safe nonce using the `getNonce()` method of the Safe Protocol Kit. It assumes that the protocol kit has already been initialized and provides the nonce as a number.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getnonce.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst nonce = await protocolKit.getNonce()\n```\n\n----------------------------------------\n\nTITLE: Creating and Hashing Safe Transactions Using Safe Global Protocol Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to construct a Safe transaction with specified details (recipient address, value, data, and operation type) and then retrieve its transaction hash asynchronously. It uses dependencies from '@safe-global/types-kit' for transaction types and the protocol kit instance initialized elsewhere. Key parameters include the 'transactions' array consisting of MetaTransactionData objects. The final output is a promise resolving to the transaction hash string.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/gettransactionhash.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MetaTransactionData,\n  OperationType\n} from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions\n})\n\nconst safeTransactionHash = await protocolKit.getTransactionHash(safeTransaction)\n```\n\n----------------------------------------\n\nTITLE: API endpoint for GET /api/v1/user-operations/{user_operation_hash}/\nDESCRIPTION: This code snippet demonstrates the GET request setup using cURL to retrieve user operation details by hash, including headers and sample URL with specific hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Confirming Safe Transaction with Another Owner's Signature in TypeScript\nDESCRIPTION: Shows how a second owner (or any subsequent owner) confirms a pending transaction. They initialize their own `Protocol Kit` instance, retrieve the transaction hash, sign it with their key, and submit their signature to the Safe Transaction Service using `apiKit.confirmTransaction`. This adds their approval to the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKitOwner2 = await Safe.init({\n  provider: RPC_URL,\n  signer: OWNER_2_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS\n})\n\nconst safeTxHash = transaction.transactionHash\nconst signature = await protocolKitOwner2.signHash(safeTxHash)\n\n// Confirm the Safe transaction\nconst signatureResponse = await apiKit.confirmTransaction(\n  safeTxHash,\n  signature.data\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring ChangedThreshold Event in Solidity\nDESCRIPTION: Defines a Solidity event named ChangedThreshold that triggers when the threshold value for required confirmations in a contract is changed. It takes a single uint256 parameter representing the new threshold value. This event helps off-chain applications and listeners detect changes in contract state related to confirmation thresholds. Dependencies include a Solidity environment and a smart contract context where multi-signature or threshold confirmation logic exists.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/ChangedThreshold.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent ChangedThreshold(uint256 threshold);\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Client (TypeScript)\nDESCRIPTION: This snippet shows how to create an instance of the `safeClient` using the `createSafeClient` function from the `@safe-global/sdk-starter-kit`. This client is necessary for performing Safe operations. It requires a valid Ethereum provider, signer, and the address of the target Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createswapownertransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n    \nexport const safeClient = await createSafeClient({\n  provider, // An EIP-1193 provider\n  signer,   // A Signer (e.g., ethers.Signer, viem.Account)\n  safeAddress: '0x...' // The address of the Safe Account\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Message Signatures with Protocol Kit - TypeScript\nDESCRIPTION: This snippet shows how to add multiple owner signatures to a Safe message using the Protocol Kit's addMessageSignature method. Prerequisites include the Protocol Kit instance (apiKit), a valid safeMessageHash, and the signature construction utility buildSignatureBytes. The method accepts the message hash and encoded signatures, requiring valid EthSafeSignature objects for each owner. The input is the message hash and each owner's encoded signature; no value is returned, but the signature is submitted to the Safe Transaction Service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/messages.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the signature from OWNER_2_ADDRESS\nconst signatureOwner2 = safeMessage.getSignature(OWNER_2_ADDRESS) as EthSafeSignature\n\n// Add signature from OWNER_2_ADDRESS\nawait apiKit.addMessageSignature(\n  safeMessageHash,\n  buildSignatureBytes([signatureOwner2])\n)\n\n// Add signature from the owner SAFE_1_1_ADDRESS\nawait apiKit.addMessageSignature(\n  safeMessageHash,\n  buildSignatureBytes([signatureSafe1_1])\n)\n\n// Add signature from the owner SAFE_2_3_ADDRESS\nawait apiKit.addMessageSignature(\n  safeMessageHash,\n  buildSignatureBytes([signatureSafe2_3])\n)\n```\n\n----------------------------------------\n\nTITLE: Providing Transaction Data (`data`) in `safeClient.send` in TypeScript\nDESCRIPTION: Shows how to include encoded transaction data (`data`) within the `transactions` array for `safeClient.send`. This is typically used for interacting with smart contracts and should be a hex string.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction to Remove Owner and Change Threshold (TypeScript)\nDESCRIPTION: Illustrates how to remove an owner and simultaneously update the Safe's signature threshold by providing both the `ownerAddress` and the optional `threshold` parameter in the function call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx({\n  ownerAddress: '0x...', // The address of the owner to remove\n  threshold: 1 // The new threshold\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Operations by Address with Safe Global API Kit - TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use the getSafeOperationsByAddress method from the Safe Global API Kit to retrieve a list of Safe operations for a specified Safe account address. It imports required types and a configured API Kit instance, constructs an options object for advanced filtering (by execution and confirmation status, ordering, pagination, and offset), and invokes the API method. This code requires installation of @safe-global/api-kit and a configured apiKit instance. It expects safeAddress as a string and an options object, and returns a Promise resolving to GetSafeOperationListResponse, representing the paginated operation list. All parameters are optional except safeAddress. Limitations: The provided safeModuleVersion is compatible only with Entrypoint v0.6. For Entrypoint v0.7, relay-kit Safe4337Pack should be used.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationsbyaddress.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetSafeOperationListProps } from '@safe-global/api-kit'\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\nconst options: GetSafeOperationListOptions = {      \n  executed: false, // Optional,\n  hasConfirmations: true, // Optional,\n  ordering: 'created', // Optional      \n  limit: '10', // Optional\n  offset: '50' // Optional\n}\n\nconst safeOperationsResponse = await apiKit.getSafeOperationsByAddress(safeAddress, options)\n```\n\n----------------------------------------\n\nTITLE: Constructing UserOperation for ExecuteUserOp in TypeScript\nDESCRIPTION: This code snippet constructs a UserOperation object, including the necessary parameters for the `executeUserOp` function. It defines the input data, operation type, and recipient address. The `executeUserOp` method executes a user operation on the Safe contract. It takes parameters like the destination address, value, data, and operation type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n          functionName: 'executeUserOp',\n          args: [params.to, params.value, params.data, 0]\n        })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Address using protocolKit in TypeScript\nDESCRIPTION: This snippet demonstrates calling the asynchronous `getAddress()` method on a pre-initialized `protocolKit` instance to retrieve the address of the connected Safe smart account. It requires importing the configured `protocolKit` from a setup file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getaddress.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst safeAddress = await protocolKit.getAddress()\n```\n\n----------------------------------------\n\nTITLE: Create Pimlico Paymaster Client with V2 API and Extend with Paymaster Actions\nDESCRIPTION: Initializes a separate Pimlico API v2 client for interacting with the Pimlico Verifying Paymaster endpoint, allowing sponsorship requests and gas management for user operations. The client is extended with paymaster-specific functions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PIMLICO_API_V2 = `https://api.pimlico.io/v2/gnosis/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`\n\nconst pimlicoPaymasterClient = createClient({\n  transport: http(PIMLICO_API_V2),\n  chain: gnosis\n}).extend(pimlicoPaymasterActions(ENTRYPOINT_ADDRESS_V06))\n```\n\n----------------------------------------\n\nTITLE: Generating an on-chain identifier in TypeScript\nDESCRIPTION: Function to create a Safe on-chain identifier by hashing input parameters and concatenating them according to the specified format. It utilizes keccak256 hashing and hex manipulation to produce the identifier, which aids in tracking Safe deployments and transactions on-chain.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onchain-tracking.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction generateOnChainIdentifier({\n  project,\n  platform = 'Web',\n  tool,\n  toolVersion\n}: OnChainIdentifierParamsType): string {\n  const identifierPrefix = '5afe' // Safe identifier prefix\n  const identifierVersion = '00' // First version\n  const projectHash = generateHash(project, 20) // Take the last 20 bytes\n  const platformHash = generateHash(platform, 3) // Take the last 3 bytes\n  const toolHash = generateHash(tool, 3) // Take the last 3 bytes\n  const toolVersionHash = generateHash(toolVersion, 3) // Take the last 3 bytes\n\n  return `${identifierPrefix}${identifierVersion}${projectHash}${platformHash}${toolHash}${toolVersionHash}`\n}\n\nfunction generateHash(input: string, size: number): string {\n  const fullHash = keccak256(toHex(input))\n  return toHex(fullHash.slice(-size)).replace('0x', '') // Take the last X bytes\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Threshold using protocolKit (TypeScript)\nDESCRIPTION: Demonstrates how to retrieve the current threshold of a Safe using the `protocolKit` instance. This method is asynchronous and returns a promise that resolves with the threshold value (the minimum number of required confirmations for a transaction). It depends on a previously initialized `protocolKit` instance connected to a specific Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getthreshold.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst threshold = await protocolKit.getThreshold()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Safe Contract Compilation with TypeScript\nDESCRIPTION: A TypeScript configuration file for Hardhat setting the Solidity compiler version to 0.8.28, enabling unlimited contract bytecode size in the local network to handle large Safe contracts, and configuring the dependency compiler plugin to include the SafeProxyFactory contract required by Safe modules. This config enables successful compilation of Safe contracts in a development environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HardhatUserConfig } from \"hardhat/config\";\nimport \"@nomicfoundation/hardhat-toolbox\";\nimport \"hardhat-dependency-compiler\";\n\nconst config: HardhatUserConfig = {\n  solidity: \"0.8.28\",\n  networks: {\n    hardhat: {\n      allowUnlimitedContractSize: true,\n    },\n  },\n  dependencyCompiler: {\n    paths: [\n      \"@safe-global/safe-contracts/contracts/proxies/SafeProxyFactory.sol\",\n    ],\n  },\n};\n\nexport default config;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Safe and Owner Details (TypeScript)\nDESCRIPTION: Defines constant variables for the RPC URL (connecting to the Sepolia testnet in this example), the target Safe address, and the address and private keys for the owners involved in the transaction process. These placeholder values must be replaced with actual configuration details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/propose-and-confirm-transactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// https://chainlist.org/?search=sepolia&testnets=true\nconst RPC_URL = 'https://eth-sepolia.public.blastapi.io'\n\nconst SAFE_ADDRESS = // ...\n\nconst OWNER_1_ADDRESS = // ...\nconst OWNER_1_PRIVATE_KEY = // ...\n\nconst OWNER_2_PRIVATE_KEY = // ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Multisig Transaction via API (Bash/cURL)\nDESCRIPTION: Shows how to use cURL to make a GET request to retrieve details of a specific multisig transaction using its Safe transaction hash (`safe_tx_hash`) as a path parameter. The request targets the Safe Transaction Service API and returns a JSON object with comprehensive transaction details, including confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Account Status with curl\nDESCRIPTION: Example of retrieving detailed Safe account information using curl. This command calls the transaction service API endpoint to get account configuration details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sending Off-Chain Messages with Safe SDK in TypeScript\nDESCRIPTION: Example of sending an off-chain message using the offchainMessageClient. The message can be a simple string or EIP712 typed data and will be processed based on the Safe account's threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages/sendoffchainmessage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { offchainMessageClient } from './setup.ts'\n\nconst messageResult = await offchainMessageClient.sendOffChainMessage({\n  message: 'I am the owner of this Safe'\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operation Confirmations with Pagination\nDESCRIPTION: This snippet demonstrates how to fetch confirmations for a Safe operation using the `getSafeOperationConfirmations` method, including optional parameters for pagination (`limit` and `offset`).  It uses the `@safe-global/api-kit` library and assumes the `apiKit` object is already initialized. The `safeOperationHash` is the unique identifier of the Safe operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationconfirmations.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ListOptions } from '@safe-global/api-kit'\nimport { apiKit } from './setup.ts'\n\nconst safeOperationHash = '0x...'\n\nconst config: ListOptions = {\n  limit: '3', // Optional\n  offset: '2' // Optional\n}\n\nconst confirmationsResponse = await apiKit.getSafeOperationConfirmations(\n  safeOperationHash,\n  config\n)\n```\n\n----------------------------------------\n\nTITLE: Validating On-chain Message Signature with isValidSignature - Protocol Kit - TypeScript\nDESCRIPTION: This example checks an on-chain message signature by calling protocolKit.isValidSignature with the message hash and '0x' as parameters. Dependencies include hashSafeMessage from '@safe-global/protocol-kit' and an initialized protocolKit instance. It returns a boolean indicating if the message hash is found in the Safe contract. The method expects the message hash as input and requires on-chain storage of the hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/messages.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashSafeMessage } from '@safe-global/protocol-kit'\n\nconst messageHash = hashSafeMessage(MESSAGE)\n\nconst isValid = await protocolKit.isValidSignature(messageHash, '0x')\n```\n\n----------------------------------------\n\nTITLE: Creating a SendTransaction React Hook Component in TypeScript\nDESCRIPTION: Implements a React component that uses the useSendTransaction hook to create and trigger the sending of a Safe transaction upon button click. It prepares transaction parameters and initiates transfer when clicked.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/react-hooks/guides/send-transactions.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction SendTransaction() {\n  const { sendTransaction } = useSendTransaction()\n\n  const sendTransactionParams: SendTransactionVariables = {\n    transactions\n  }\n\n  return (\n    <button onClick={() => sendTransaction(sendTransactionParams)}>\n      Send Transaction\n    </button>\n  )\n}\n\nexport default SendTransaction\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit (TypeScript)\nDESCRIPTION: Initializes an instance of the Safe Protocol Kit SDK for interacting with the specified Safe Smart Account. The `Safe.init` function requires the blockchain provider endpoint (`provider: RPC_URL`), the owner's private key for signing (`signer: OWNER_PRIVATE_KEY`), and the address of the Safe to be migrated (`safeAddress: SAFE_ADDRESS`). This returns a `preExistingSafe` object used for subsequent transaction creation and execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n  // Initialize the Protocol Kit\n  const preExistingSafe = await Safe.init({\n    provider: RPC_URL,\n    signer: OWNER_PRIVATE_KEY,\n    safeAddress: SAFE_ADDRESS,\n  });\n```\n\n----------------------------------------\n\nTITLE: Calling createChangeThresholdTx (parameter threshold)\nDESCRIPTION: This TypeScript snippet shows an example call to `createChangeThresholdTx` when only the `threshold` parameter is passed. The function sets the new threshold of the Safe. The method returns a Safe transaction object that will update the threshold in the safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createchangethresholdtx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createChangeThresholdTx({\n  threshold: 3\n})\n```\n\n----------------------------------------\n\nTITLE: Build Contract Signature for Safe Account\nDESCRIPTION: This TypeScript code demonstrates how to build a contract signature for a Safe account using the `buildContractSignature` method. It takes an array of signatures from the child Safe account (`transactionSafe1_1.signatures.values()`) and the child Safe address (`SAFE_1_1_ADDRESS`) as input, then adds the generated signature to the initial Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Build the contract signature of SAFE_1_1_ADDRESS\n  const signatureSafe1_1 = await buildContractSignature(\n    Array.from(transactionSafe1_1.signatures.values()),\n    SAFE_1_1_ADDRESS\n  )\n\n  // Add the signatureSafe1_1 to safeTransaction\n  // After this, the safeTransaction contains the signature from OWNER_1_ADDRESS, OWNER_2_ADDRESS and SAFE_1_1_ADDRESS\n  safeTransaction.addSignature(signatureSafe1_1)\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction: Python\nDESCRIPTION: This snippet executes the Safe transaction using the owner's private key. The executed transaction is then processed on the blockchain. It depends on the safe_tx_from_tx_service object and the owner's private key.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nresult = safe_tx_from_tx_service.execute(config.get(\"OWNER_A_PRIVATE_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Calling getSafesByModule with SafeApiKit in TypeScript\nDESCRIPTION: Demonstrates how to call the `getSafesByModule` function using an existing `apiKit` instance. It shows defining a module address and asynchronously fetching the list of Safe addresses where the module is enabled. This snippet requires an `apiKit` instance to be initialized.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafesbymodule.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst moduleAddress = '0x...'\n\nconst safes = await getSafesByModule(moduleAddress)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pending Safe Transactions with API Kit in TypeScript\nDESCRIPTION: Fetches a list of transactions that have been proposed but have not yet reached the required signature threshold for a given Safe address from the Safe Transaction Service. This allows other owners to view and subsequently confirm transactions that require their signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pendingTransactions = (await apiKit.getPendingTransactions(safeAddress)).results\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request to Safe Transaction Service API Using curl in Bash\nDESCRIPTION: This snippet shows a curl command that performs a GET request to fetch all transactions from the Safe Transaction Service API for a specified Safe address. It specifies HTTP headers for Accept and content-type as application/json to indicate the data format. This snippet requires network connectivity and a valid Safe address input to run correctly and outputs the raw HTTP response from the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_22\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Nonce with Safe SDK in TypeScript\nDESCRIPTION: This example demonstrates how to get the current nonce (transaction count) of a connected Safe using the Safe SDK. It imports a pre-configured safeClient and uses the getNonce method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getnonce.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst nonce = await safeClient.getNonce()\n```\n\n----------------------------------------\n\nTITLE: Confirming Safe Multisig Transaction via API using Bash\nDESCRIPTION: Demonstrates how to add a confirmation signature to a pending Safe multisig transaction using a curl command. It sends a POST request to the `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` endpoint. The request body should contain the signature details (represented as an empty JSON object `-d '{}'` in this simplified example; actual signature data is required). This endpoint adds a new confirmation from a Safe owner.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-optimism.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Checking Signature Validity using isValidSignature - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `isValidSignature` function from the `@safe-global/protocol-kit` library to validate a signature against a Safe message hash. It requires the `@safe-global/protocol-kit` and `@safe-global/types-kit` libraries. It takes the message hash and signature as input, and returns a boolean indicating the signature's validity. The hash is typically generated by calling `hashSafeMessage` on a raw message.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/isvalidsignature.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashSafeMessage } from '@safe-global/protocol-kit'\nimport { EIP712TypedData } from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst rawMessage: string | EIP712TypedData = 'Example message'\nconst messageHash = hashSafeMessage(rawMessage)\nconst safeMessageHash = await protocolKit.getSafeMessageHash(messageHash)\n\nconst signature = '0x...'\n\nconst isValidSignature = await protocolKit.isValidSignature(\n  safeMessageHash,\n  signature\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Fully Signed Safe Transaction with Protocol Kit in TypeScript\nDESCRIPTION: Executes a transaction on-chain after it has accumulated the required number of signatures from the Safe owners. The code fetches the transaction data, including all collected signatures, from the Safe Transaction Service using `apiKit.getTransaction`. It then passes this transaction object to the `protocolKit.executeTransaction` method, which broadcasts the transaction to the blockchain.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeTransaction = await apiKit.getTransaction(safeTxHash)\nconst executeTxResponse = await protocolKitOwner1.executeTransaction(safeTransaction)\n```\n\n----------------------------------------\n\nTITLE: Prepare and Sign Safe Transaction (1Balance)\nDESCRIPTION: Use the initialized Relay Kit to create a Safe transaction object from the transaction data and options. Then, sign this transaction object using the Safe Protocol Kit with the Safe owner's signer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await relayKit.createTransaction({\n    transactions,\n    options\n})\n\nconst signedSafeTransaction = await protocolKit.signTransaction(safeTransaction)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Safe Client\nDESCRIPTION: Shows how to initialize a Safe client using the SDK starter kit. The client requires a provider, signer, and Safe address to connect to an existing Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createaddownertransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Example isOwner Usage - TypeScript\nDESCRIPTION: This code snippet demonstrates the use of `isOwner` function. It takes an address as an argument (in this case, a placeholder address). It is used to verify if the provided address is an owner of the connected Safe. It relies on the `protocolKit` which is initialized in the example provided.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/isowner.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst isOwner = await protocolKit.isOwner(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Installing relay-kit Dependency in Bash\nDESCRIPTION: Installs the relay-kit package required to use Safe4337Pack in your project. This package is essential for enabling ERC-4337 user operation capabilities in Safe accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/relay-kit\n```\n\n----------------------------------------\n\nTITLE: Sample SafeOperation Response JSON Schema\nDESCRIPTION: Demonstrates the structure of the JSON object returned by the API, including fields such as 'created', 'modified', 'safeOperationHash', 'confirmations', and nested properties like 'userOperation', showing detailed metadata of a SafeOperation and associated confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Operations by Address with Parameter as Object - TypeScript\nDESCRIPTION: This snippet demonstrates calling getSafeOperationsByAddress using a parameters object, specifying the Safe address directly. It is functionally similar to the main usage example but highlights the use of object notation for passing parameters. Requires a configured apiKit instance and Safe address string. It returns a Promise with the operations list. Dependency: @safe-global/api-kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationsbyaddress.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getSafeOperationsByAddress({\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Receiving and Executing Transactions with Agent Two in TypeScript\nDESCRIPTION: Shows how a second AI agent can retrieve pending transactions from the Safe Transaction Service, inspect them, and execute them. This demonstrates the approval workflow in a multi-agent Safe Smart Account setup.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/multi-agent-setup.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst SAFE_ADDRESS = '0x...' // The address of the Smart Account from step one\n\n// Initialize the Safe object with the same address, but a different signer\nconst existingSafe = await Safe.init({\n  provider: RPC_URL,\n  signer: AGENT_2_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS\n})\n\n// Get pending transactions that need a signature\nconst pendingTransactions = await apiKit.getPendingTransactions(SAFE_ADDRESS)\n// We assume there is only one pending transaction\nconst transaction = pendingTransactions.results[0]\n\n// Here, your AI agent could check this transaction.\n\n// As only one more signater is required, AI agent two can execute the transaction:\nexistingSafe.executeTransaction(transaction)\n```\n\n----------------------------------------\n\nTITLE: Using nonce option in createEnableGuardTx in TypeScript\nDESCRIPTION: This snippet shows how to use the `nonce` option when calling `createEnableGuardTx`.  `nonce` is a number representing the transaction nonce. It is part of an `options` object passed to the `createEnableGuardTx` function.  This code assumes that the `protocolKit` is initialized and that the `options` object is properly structured. The `options` parameter is optional, and other optional parameters are available to configure the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableGuardTx(\n  '0x...',\n  options: {\n    nonce: 123\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using the signTypedData Method with Required Parameters\nDESCRIPTION: This focused snippet shows how to call the signTypedData method with just the required eip712Data parameter. The method returns a Promise that resolves to a SafeSignature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtypeddata.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await protocolKit.signTypedData(\n  eip712Data\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operation Confirmations\nDESCRIPTION: This snippet demonstrates how to fetch confirmations for a Safe operation using the `getSafeOperationConfirmations` method without any pagination. It assumes that the apiKit object is already initialized and a safeOperationHash is defined.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationconfirmations.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst confirmationsResponse = await apiKit.getSafeOperationConfirmations(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting Protocol Kit to Deployed Sepolia Safe (TypeScript)\nDESCRIPTION: After successfully deploying the Safe on Sepolia, this code re-initializes the Protocol Kit instance to operate in the context of the *newly deployed* Safe contract. It uses the `connect()` method, providing the predicted Safe address which is now the actual deployed address. It then verifies the connection and deployment status by calling `isSafeDeployed()` and retrieving the connected address with `getAddress()`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst newProtocolKitSepolia = await protocolKitSepolia.connect({\n  safeAddress: sepoliaPredictedSafeAddress\n})\n\nconst isSepoliaSafeDeployed = await newProtocolKitSepolia.isSafeDeployed() // True\nconst sepoliaDeployedSafeAddress = await newProtocolKitSepolia.getAddress()\n```\n\n----------------------------------------\n\nTITLE: Connecting to Safe with Address Signer\nDESCRIPTION: This snippet shows how to connect to a Safe using an address as the signer. The `signer` property is set to an Ethereum address (string). It requires a `provider` and a `safeAddress` to be specified. The `@safe-global/protocol-kit` library is needed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.connect({\n  provider,\n  signer: '0x...',\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Disable Fallback Handler Transaction with Protocol Kit (TypeScript)\nDESCRIPTION: This code demonstrates how to create a Safe transaction that disables the fallback handler using the Protocol Kit in TypeScript. It initializes transaction options, including gas values and recipient, and invokes createDisableFallbackHandlerTx, returning a Promise with the constructed transaction. Dependencies include @safe-global/protocol-kit and a properly initialized protocolKit instance; expected inputs are optional transaction parameters like safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, and nonce. Outputs a SafeTransaction object for execution; ensure network provider and signer are correctly set to broadcast the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createdisablefallbackhandlertx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SafeTransactionOptionalProps } from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createDisableFallbackHandlerTx(\n  options // Optional\n)\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Client with SDK for Connected Safe (TypeScript)\nDESCRIPTION: This snippet shows how to instantiate a Safe client using `createSafeClient`, providing the provider, signer, and Safe address. It sets up the environment necessary for executing transactions such as removing an owner. Dependencies include the Safe SDK starter kit. Inputs are provider details, signer, and Safe address; output is a Promise resolving to a configured Safe client instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createremoveownertransaction.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: feeEstimator.postEstimateUserOperationGas Parameter\nDESCRIPTION: Example showing how to define `feeEstimator.postEstimateUserOperationGas` parameter which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions,\n  feeEstimator: {\n    postEstimateUserOperationGas\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit (v1 vs v2) - JavaScript\nDESCRIPTION: Demonstrates how to initialize the SafeApiKit in v1 using txServiceUrl and in v2 using chainId. It also shows how to specify a custom Transaction Service URL in v2. ethAdapter is assumed to be defined elsewhere.  In v2, providing only the chainId will be sufficient if a Safe Transaction Service is running for that chain. If a custom service or a chain not supported by Safe Transaction Service is needed, txServiceUrl should be used.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v2.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// old:\nimport SafeApiKit from '@safe-global/api-kit'\n\nconst apiKit = new SafeApiKit({\n  txServiceUrl: 'https://your-transaction-service-url',\n  ethAdapter\n})\n\n// new:\nimport SafeApiKit from '@safe-global/api-kit'\n\nconst chainId: bigint = 1n\nconst apiKit = new SafeApiKit({\n  chainId\n})\n\n// or set a custom Transaction Service\nconst apiKit = new SafeApiKit({\n  chainId,\n  txServiceUrl: 'https://your-transaction-service-url'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample cURL request for Token Details by Address\nDESCRIPTION: This snippet offers a cURL command to request detailed token information from the API by providing the token's address. It includes headers to specify JSON format and is used for retrieving data such as token type, name, symbol, decimals, logo, and trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Usage of 'baseGas' Parameter - TypeScript\nDESCRIPTION: This code snippet shows how to set the optional `baseGas` parameter, which specifies the gas costs for the data used to trigger the Safe transaction, using the `options` object. Requires the `createTransaction` method of a configured Safe instance and other necessary parameters within the options object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction(\n  '0x...',\n  options: {\n    baseGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Predicting Safe Addresses using Protocol Kit (TypeScript)\nDESCRIPTION: Calls the `getAddress()` method on each initialized Protocol Kit instance (`protocolKitSepolia` and `protocolKitChiado`). This method calculates and returns the deterministic address that the Safe will occupy on its respective network based on the configuration provided during initialization. This step allows verifying that the predicted addresses are identical across all target chains before proceeding with the actual deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst sepoliaPredictedSafeAddress = await protocolKitSepolia.getAddress()\nconst chiadoPredictedSafeAddress = await protocolKitChiado.getAddress()\n```\n\n----------------------------------------\n\nTITLE: Creating LoginWithPasskey Component - TSX\nDESCRIPTION: This TSX snippet directs adding user authentication UI code from the passkeys tutorial sample into LoginWithPasskey.tsx. The React component presents a modal for registering a new passkey or logging in with an existing one. Dependencies include Material UI and internal passkey utilities. Accepts state and dispatch props for passkey management and emits callbacks upon successful login or creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n// from ../../../../examples/passkeys/components/LoginWithPasskey.tsx\n```\n\n----------------------------------------\n\nTITLE: Unit Testing ERC1271 Fallback Handler with Hardhat in TypeScript\nDESCRIPTION: This snippet defines a comprehensive suite of unit tests for the ERC1271FallbackHandler smart contract, written in TypeScript using Hardhat and Chai. It sets up test accounts and deploys Safe, SafeProxyFactory, and ERC1271FallbackHandler contracts, creates a proxy Safe contract, and runs several test cases to assert correct behavior of signature validation, including rejection of direct calls, invalid signatures, and acceptance of valid EIP712 typed data signatures. Dependencies include Hardhat, ethers, chai, and project-specific typechain-generated contract bindings. Key inputs include signer addresses and signature data, while outputs are assertions on signature validation results and expected reverts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ethers } from \"hardhat\";\nimport { expect } from \"chai\";\nimport { Signer, ZeroAddress } from \"ethers\";\nimport { Safe, Safe__factory, SafeProxyFactory } from \"../typechain-types\";\nimport { ERC1271FallbackHandler } from \"../typechain-types/contracts/ERC1271FallbackHandler\";\n\ndescribe(\"ERC1271FallbackHandler.test\", async function () {\n  let deployer: Signer;\n  let alice: Signer;\n  let masterCopy: Safe;\n  let proxyFactory: SafeProxyFactory;\n  let safeFactory: Safe__factory;\n  let safe: Safe;\n  let exampleFallbackHandler: ERC1271FallbackHandler;\n  const threshold = 1;\n\n  const EIP712_SAFE_MESSAGE_TYPE = {\n    // \"SafeMessage(bytes message)\"\n    SafeMessage: [{ type: \"bytes\", name: \"message\" }],\n  };\n\n  // Setup signers and deploy contracts before running tests\n  beforeEach(async () => {\n    [deployer, alice] = await ethers.getSigners();\n\n    safeFactory = await ethers.getContractFactory(\"Safe\", deployer);\n\n    // Deploy the ERC1271FallbackHandler contract\n    exampleFallbackHandler = await (\n      await ethers.getContractFactory(\"ERC1271FallbackHandler\", deployer)\n    ).deploy();\n\n    masterCopy = await safeFactory.deploy();\n\n    proxyFactory = await (\n      await ethers.getContractFactory(\"SafeProxyFactory\", deployer)\n    ).deploy();\n\n    const ownerAddresses = [await alice.getAddress()];\n\n    const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [\n      ownerAddresses,\n      threshold,\n      ZeroAddress,\n      \"0x\",\n      exampleFallbackHandler.target,\n      ZeroAddress,\n      0,\n      ZeroAddress,\n    ]);\n\n    // Read the safe address by executing the static call to createProxyWithNonce function\n    const safeAddress = await proxyFactory.createProxyWithNonce.staticCall(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    // Create the proxy with nonce\n    await proxyFactory.createProxyWithNonce(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    if (safeAddress === ZeroAddress) {\n      throw new Error(\"Safe address not found\");\n    }\n\n    safe = await ethers.getContractAt(\"Safe\", safeAddress);\n  });\n\n  it(\"should revert if called directly\", async () => {\n    const dataHash = ethers.keccak256(\"0xbaddad\");\n    await expect(\n      exampleFallbackHandler.isValidSignature.staticCall(dataHash, \"0x\")\n    ).to.be.reverted;\n  });\n\n  it(\"should revert if message was not signed\", async () => {\n    const validator = await ethers.getContractAt(\n      \"ERC1271FallbackHandler\",\n      safe.target\n    );\n    const dataHash = ethers.keccak256(\"0xbaddad\");\n    await expect(\n      validator.isValidSignature.staticCall(dataHash, \"0x\")\n    ).to.be.revertedWith(\"Hash not approved\");\n  });\n\n  it(\"should revert if signature is not valid\", async () => {\n    const validator = await ethers.getContractAt(\n      \"ERC1271FallbackHandler\",\n      safe.target\n    );\n    const dataHash = ethers.keccak256(\"0xbaddad\");\n    await expect(\n      validator.isValidSignature.staticCall(dataHash, \"0xdeaddeaddeaddead\")\n    ).to.be.reverted;\n  });\n\n  it(\"should return magic value if enough owners signed and allow a mix different signature types\", async () => {\n    const validator = await ethers.getContractAt(\n      \"ERC1271FallbackHandler\",\n      safe.target\n    );\n\n    const validatorAddress = await validator.getAddress();\n    const dataHash = ethers.keccak256(\"0xbaddad\");\n    const typedDataSig = {\n      signer: await alice.getAddress(),\n      data: await alice.signTypedData(\n        {\n          verifyingContract: validatorAddress,\n          chainId: (await ethers.provider.getNetwork()).chainId,\n        },\n        EIP712_SAFE_MESSAGE_TYPE,\n        { message: dataHash }\n      ),\n    };\n\n    expect(\n      await validator.isValidSignature.staticCall(dataHash, typedDataSig.data)\n    ).to.be.eq(\"0x1626ba7e\");\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: cURL Request to Get All Transactions for a Safe\nDESCRIPTION: A bash cURL command example for making a GET request to the Safe Transaction Service API endpoint `/api/v1/safes/{address}/all-transactions/`. It retrieves all transactions for the specified Safe address (`0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`) hosted on the Linea network, requesting a JSON response (`Accept: application/json`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Using apiKit.getToken to Fetch ERC-20 Token Info in TypeScript\nDESCRIPTION: Demonstrates how to use the `getToken` method from an initialized `SafeApiKit` instance (`apiKit`) to retrieve information for a specific ERC-20 token address. This example assumes `apiKit` has been previously set up (as shown in the setup snippet) and requires the target token address as a string input. It returns a promise that resolves to the token information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettoken.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst tokenAddress = '0x...'\n\nconst token = await apiKit.getToken(tokenAddress)\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit for Ethereum Mainnet in TypeScript\nDESCRIPTION: This snippet shows the initialization of the SafeApiKit client instance specifying the Ethereum mainnet chain ID (1n). This setup is necessary before invoking API methods like getMessage. The SafeApiKit must be imported from '@safe-global/api-kit' and instantiated with a configuration object containing the chainId property as a BigInt. This configuration enables the API client to connect to the appropriate network environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmessage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Importing and Using getSafeCreationInfo Method in TypeScript\nDESCRIPTION: This snippet demonstrates importing the SafeApiKit, initializing it with mainnet chain ID, and invoking getSafeCreationInfo with a Safe address to retrieve its creation information. Dependencies include SafeApiKit from '@safe-global/api-kit'. The expected input is a Safe address string, and the output is a Promise resolving to a SafeCreationInfoResponse object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafecreationinfo.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n  // Mainnet\n})\n\nconst safeAddress = '0x...'\n\nconst safeCreationInfo = await apiKit.getSafeCreationInfo(safeAddress)\n```\n\n----------------------------------------\n\nTITLE: Usage of 'gasPrice' Parameter - TypeScript\nDESCRIPTION: This snippet shows how to set the optional `gasPrice` parameter, specifying the price in wei per unit of gas. The example shows the use of the `options` object with the `createTransaction` function.  It requires the `createTransaction` method of a configured Safe instance and other necessary parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction(\n  '0x...',\n  options: {\n    gasPrice: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating `getSafeOperationsByAddress` Method Signature in TypeScript\nDESCRIPTION: Illustrates the change in the `getSafeOperationsByAddress` method signature from v2 to v3. The `safeAddress` parameter is now extracted, and the `GetSafeOperationListProps` type is renamed to `GetSafeOperationListOptions`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v3.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSafeOperationsByAddress(props: GetSafeOperationListProps)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSafeOperationsBySafeAddress(safeAddress, options: GetSafeOperationListOptions)\n```\n\n----------------------------------------\n\nTITLE: Using removeSafeDelegate with Safe API Kit (Typescript)\nDESCRIPTION: Demonstrates how to use the `removeSafeDelegate` function of `@safe-global/api-kit` to remove a delegate, including necessary configuration and setup of the API client. Requires `@safe-global/api-kit`, a signer, and setup of the `SafeApiKit` instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/removesafedelegate.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeleteSafeDelegateProps } from '@safe-global/api-kit'\nimport { apiKit } from './setup.ts'\n\nconst config: DeleteSafeDelegateProps = {\n  delegateAddress: '0x...',\n  delegatorAddress: '0x...',\n  signer\n}\n\nawait apiKit.removeSafeDelegate(config)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Create a Signer from a Private Key Using VIEM\nDESCRIPTION: Generates a signer object for blockchain account operations from a raw private key. This signer represents the owner of the Safe account and is essential for signing transactions and deploying accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PRIVATE_KEY = '0x...'\n\nconst signer = privateKeyToAccount(PRIVATE_KEY as Hash)\n```\n\n----------------------------------------\n\nTITLE: Execute Deployment Transaction\nDESCRIPTION: This TypeScript snippet executes the deployment transaction to deploy a new Safe smart account. It retrieves an external signer from the protocol kit, then constructs and sends a transaction. Finally, it waits for the transaction receipt.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/safe-deployment.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = await protocolKit.getSafeProvider().getExternalSigner()\n\nconst transactionHash = await client.sendTransaction({\n  to: deploymentTransaction.to,\n  value: BigInt(deploymentTransaction.value),\n  data: deploymentTransaction.data as `0x${string}`,\n  chain: sepolia\n})\n\nconst transactionReceipt = await client.waitForTransactionReceipt({\n  hash: transactionHash\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Signed Message for a Safe Account via Safe Transaction API - TypeScript and Bash\nDESCRIPTION: This snippet describes how to create and add a new message to a Safe account using a POST request. The message can be either a string (which uses EIP191 encoding to produce its hash) or an EIP712 object, where the service calculates the hash internally. Raw hashes cannot be submitted directly. The required parameter is the Safe address in the path, and the request body contains the message details in JSON. Expected success returns HTTP 201 Created with an empty response body. Example usage is provided with a curl command and TypeScript snippet reference.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\nLANGUAGE: js\nCODE:\n```\n// from ../examples/optimism/-v1-safes-{address}-messages--post.ts\n```\n\n----------------------------------------\n\nTITLE: Confirming Pending Safe Transactions - TypeScript\nDESCRIPTION: Fetches all pending Safe transactions and iterates through them to confirm the specific transaction identified by 'safeTxHash'. Confirms are performed by calling the 'confirm' method. Intended for multi-signature setups where other owners must approve before execution. Ensure proper error checking and permission management.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-transactions.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst pendingTransactions = await newSafeClient.getPendingTransactions()\n\nfor (const transaction of pendingTransactions.results) {\n  if (transaction.safeTxHash !== safeTxHash) {\n    return\n  }\n\n  const txResult = await safeClient.confirm({ safeTxHash })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit with Chain ID in TypeScript\nDESCRIPTION: This snippet illustrates how to create an instance of the SafeApiKit class, configured for the Ethereum mainnet (chainId 1n), which is a prerequisite for calling the addMessage function. It establishes the SDK context with the appropriate network settings.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addmessage.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying the safeAddress for createSafeClient in TypeScript\nDESCRIPTION: Illustrates the optional `safeAddress` parameter (type `HexAddress`) used with `createSafeClient`. This parameter is provided when connecting the client to an existing Safe account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/constructor.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...' // highlight-line\n})\n```\n\n----------------------------------------\n\nTITLE: Bash cURL command to retrieve multisig transactions from API\nDESCRIPTION: This cURL command performs a GET request to the API endpoint for fetching multisig transactions of a specific Safe address. It sets headers to accept JSON responses and demonstrates how to construct the API call with the necessary URL, facilitating quick testing and integration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Calling UserOperation Calldata Encoding Function in TypeScript\nDESCRIPTION: Demonstrates calling the `encodeCallData` function to generate the `callData` field for an ERC-4337 UserOperation. This specific example encodes a simple transaction targeting the Safe account itself (`sender`) with no value and empty data, effectively just incrementing the Safe's nonce upon execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume sender address is defined\n// Assume encodeCallData is imported\n\nconst callData: `0x${string}` = encodeCallData({\n  to: sender, // Target address for the execution from the Safe\n  data: '0x',  // Calldata for the target interaction\n  value: 0n    // Value to send in the interaction\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operation Confirmations with Limit\nDESCRIPTION: This snippet demonstrates how to fetch confirmations for a Safe operation using the `getSafeOperationConfirmations` method with the limit parameter. It shows how to specify the number of results to return per page.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationconfirmations.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst confirmationsResponse = await apiKit.getSafeOperationConfirmations(\n  '0x...',\n  {\n    limit: 10\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing a Safe Transaction Hash with Protocol Kit\nDESCRIPTION: This snippet demonstrates how to prepare a Safe transaction, generate its transaction hash, and sign the hash using the protocol kit. It requires importing relevant types and functions, creating a transaction object, generating the hash, and then signing it. Dependencies include @safe-global/types-kit and the custom protocol setup file './setup.ts'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signhash.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  MetaTransactionData,\n  OperationType\n} from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions\n})\nconst safeTransactionHash = await protocolKit.getTransactionHash(\n  safeTransaction\n)\n\nconst signature = await protocolKit.signHash(safeTransactionHash)\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing EIP-712 Transactions with Safe Protocol Kit\nDESCRIPTION: This snippet demonstrates how to create a Safe transaction and sign it using the EIP-712 standard with the Protocol Kit. It imports necessary types, defines transactions, creates EIP-712 data, and signs it with the specified method version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtypeddata.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MetaTransactionData,\n  OperationType\n} from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\nconst eip712Data = await protocolKit.createTransaction({\n  transactions\n})\n\nconst methodVersion = 'v4'\n\nconst signature = await protocolKit.signTypedData(\n  eip712Data,\n  methodVersion // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'baseGas' parameter in Solidity\nDESCRIPTION: Shows usage of the getTransactionHash function focusing on the 'baseGas' parameter which specifies gas costs for data used to trigger the Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Client (TypeScript)\nDESCRIPTION: This snippet demonstrates how to create and export a `safeClient` instance using the `createSafeClient` function from the `@safe-global/sdk-starter-kit`. This client is necessary for interacting with Safe smart contracts, requiring a provider, signer, and the Safe's address as inputs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getthreshold.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting baseGas Option for Remove Owner Transaction (TypeScript)\nDESCRIPTION: Demonstrates how to use the optional `options` object with `createRemoveOwnerTx` to set the `baseGas` parameter. This value accounts for the gas cost associated with the transaction data itself.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx(\n  {\n    ownerAddress: '0x...'\n  },\n  {\n    baseGas: '123' // Optional: Gas cost for transaction data\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Safe Operation using cURL\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Safe Transaction Service API using cURL to retrieve a specific Safe Operation by its hash. It includes required headers for content negotiation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n     \n```\n\n----------------------------------------\n\nTITLE: Adding Signatures: Curl\nDESCRIPTION: This Curl command posts a signature to the Safe transaction service to add it to the multisig transaction.  It requires the transaction hash and the signature as parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n'https://safe-transaction-sepolia.safe.global/api/v1/multisig-transactions/0x56b2931ffffffffff303bbaadf3ba29b5c2baafdf1a5ffffffffff62674941b6/confirmations/' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"signature\": \"0x8c41aaa029db2942a1574c3ec9442b80764e953f21f994edb641d33ffffffffffa55ffffffffffefcaea5b3360bd4c789803fe289b2ad467fc9b3bedb479dad20\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting up SafeProvider for useUpdateThreshold (TypeScript)\nDESCRIPTION: Example entry point (`main.tsx`) demonstrating how to configure and wrap the application with `SafeProvider` from `@safe-global/safe-react-hooks`. This provides the necessary Safe context (chain, provider, signer, Safe address) required by hooks like `useUpdateThreshold`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdatethreshold.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\nimport App from './App.tsx'\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst root = document.getElementById('root')\n    \nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up the Off-Chain Message Client in TypeScript\nDESCRIPTION: Configuration setup for the offchainMessageClient using the Safe SDK starter kit. This involves creating a Safe client with provider, signer, and Safe address, then extending it with off-chain message capabilities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages/sendoffchainmessage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient, offChainMessages } from '@safe-global/sdk-starter-kit'\n\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nexport const offchainMessageClient = safeClient.extend(offChainMessages())\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending an Add Owner Transaction in Safe SDK\nDESCRIPTION: Example showing how to create a transaction to add a new owner to a Safe and then send it. The transaction specifies the owner address to add and optionally sets a new threshold value.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createaddownertransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst transaction = await safeClient.createAddOwnerTransaction({\n  ownerAddress: '0x...',\n  threshold: 2\n})\n\nconst txResult = await safeClient.send({\n  transactions: [transaction]\n})\n```\n\n----------------------------------------\n\nTITLE: Generating a Stripe Crypto Onramp Session Client Secret Using TypeScript Fetch API\nDESCRIPTION: This TypeScript snippet demonstrates how to generate a Stripe crypto onramp session by making a POST request to the Stripe API from the backend using the fetch API. It requires the private Stripe secret key for authorization and optionally accepts parameters like the user's Ethereum wallet address. The response contains a client_secret which is used to initialize the Stripe onramp widget on the frontend securely. This backend call ensures the private key is not exposed to clients.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/stripe.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst stripeSessionResponse = await fetch(\n  'https://api.stripe.com/v1/crypto/onramp_sessions',\n  {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization:\n        'Bearer sk_test_51...Eg7o' // your private key for Stripe\n    },\n    // optional parameters, for example the users' Safe address\n    body: 'wallet_addresses[ethereum]=0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d'\n  }\n)\n\nconst decodedResponse = await stripeSessionResponse.json()\nconst clientSecret = decodedResponse['client_secret']\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Deployment Transaction Using Protocol Kit in TypeScript\nDESCRIPTION: Demonstrates how to create a deployment transaction for a new Safe account by invoking the createSafeDeploymentTransaction method from an already initialized protocol kit instance. Assumes the protocol kit is imported and initialized from the setup script. Returns a promise resolving to a transaction object that can be executed to deploy the new Safe account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/deployment/createsafedeploymenttransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst transaction = await protocolKit.createSafeDeploymentTransaction()\n```\n\n----------------------------------------\n\nTITLE: Getting Pending Transaction: Python\nDESCRIPTION: This snippet retrieves a pending Safe transaction from the transaction service using its hash. This allows other owners to add signatures to the transaction. It requires an instance of the TransactionServiceApi and the transaction hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n(safe_tx_from_tx_service, _) = transaction_service_api.get_safe_transaction(\n    safe_tx_hash)\n```\n\n----------------------------------------\n\nTITLE: Extending SafeClient with offChainMessages - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to extend a `SafeClient` instance with the `offChainMessages` functionality. It imports the `offChainMessages` function from the `@safe-global/sdk-starter-kit` package and uses the `.extend()` method of the `safeClient` to add off-chain message capabilities. This allows for sending, confirming, and retrieving off-chain messages associated with a Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { offChainMessages } from '@safe-global/sdk-starter-kit'\nimport { safeClient } from './setup.ts'\n\nconst offchainMessagesClient = safeClient.extend(offChainMessages())\n```\n\n----------------------------------------\n\nTITLE: Generating Safe Initializer Calldata with Module Setup in TypeScript\nDESCRIPTION: Creates the ABI-encoded calldata for the Safe's `setup` function to initialize a new Safe account. It configures the owner, enables the Safe 4337 module using a delegate call via MultiSend, and optionally adds an ERC20 token approval for a paymaster if provided. Depends on `enableModuleCallData`, `encodeMultiSend`, and `generateApproveCallData` (assumed) utility functions and uses `viem`'s `encodeFunctionData`. The `InternalTx` type defines the structure for batched transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Address, encodeFunctionData, zeroAddress } from 'viem';\n// Assume enableModuleCallData, encodeMultiSend, generateApproveCallData are defined\n\ntype InternalTx = {\n  to: Address\n  data: `0x${string}`\n  value: bigint\n  operation: 0 | 1 // 0 for CALL, 1 for DELEGATECALL\n}\n\nexport const getInitializerCode = async ({\n  owner,\n  addModuleLibAddress,\n  safe4337ModuleAddress,\n  multiSendAddress,\n  erc20TokenAddress,\n  paymasterAddress\n}: {\n  owner: Address\n  addModuleLibAddress: Address\n  safe4337ModuleAddress: Address\n  multiSendAddress: Address\n  erc20TokenAddress: Address\n  paymasterAddress: Address\n}) => {\n  const setupTxs: InternalTx[] = [\n    {\n      to: addModuleLibAddress, // Target for delegate call is often the Safe itself or AddModulesLib\n      data: enableModuleCallData(safe4337ModuleAddress),\n      value: 0n,\n      operation: 1 // 1 = DelegateCall required for enabling the module via library/self\n    },\n  ]\n\n  if (erc20TokenAddress != zeroAddress && paymasterAddress != zeroAddress) {\n    // Assuming generateApproveCallData creates calldata for erc20Token.approve(paymasterAddress, amount)\n    setupTxs.push({\n      to: erc20TokenAddress,\n      data: generateApproveCallData(paymasterAddress), // Needs implementation detail for amount\n      value: 0n,\n      operation: 0 // 0 = Call\n    })\n  }\n\n  const multiSendCallData = encodeMultiSend(setupTxs)\n\n  return encodeFunctionData({\n    abi: [\n      {\n        inputs: [\n          {\n            internalType: 'address[]',\n            name: '_owners',\n            type: 'address[]'\n          },\n          {\n            internalType: 'uint256',\n            name: '_threshold',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address',\n            name: 'to',\n            type: 'address'\n          },\n          {\n            internalType: 'bytes',\n            name: 'data',\n            type: 'bytes'\n          },\n          {\n            internalType: 'address',\n            name: 'fallbackHandler',\n            type: 'address'\n          },\n          {\n            internalType: 'address',\n            name: 'paymentToken',\n            type: 'address'\n          },\n          {\n            internalType: 'uint256',\n            name: 'payment',\n            type: 'uint256'\n          },\n          {\n            internalType: 'address payable',\n            name: 'paymentReceiver',\n            type: 'address'\n          },\n        ],\n        name: 'setup',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }\n    ],\n    functionName: 'setup',\n    // Setup call sends the multiSend transaction to the MultiSend contract\n    args: [[owner], 1n, multiSendAddress, multiSendCallData, safe4337ModuleAddress, zeroAddress, 0n, zeroAddress]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for a Multisig Transaction via API POST Endpoint\nDESCRIPTION: This documentation details the POST API endpoint for estimating required gas (safeTxGas) for a specific Safe address and multisig transaction. It specifies input parameters, expected JSON output with 'safeTxGas', common error responses, and a sample cURL command for testing. Dependencies include the Safe address and valid transaction context; the response provides an estimated gas amount or error information if the data is invalid.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Module Transactions - cURL\nDESCRIPTION: This cURL command provides a sample GET request to retrieve module transactions from a specific Safe address. It specifies the API endpoint, uses the GET method, sets the Accept and content-type headers to application/json, and provides the address of a Safe as a path parameter.  The command allows retrieving the module transaction information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\ \n    -H \"Accept: application/json\" \\ \n    -H \"content-type: application/json\" \\ \n     \n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Safe Creation Process\nDESCRIPTION: Illustrates the detailed interactions between various components (Bundler, Entrypoint, Factories, SafeProxy, Launchpad, SafeSingleton, Safe7579, Registry, Modules) during the creation, validation, and execution phases of setting up a new ERC-7579 compatible Safe account. It shows the flow of calls, delegatecalls, and state changes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/7579-safe.mdx#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nsequenceDiagram\nparticipant Bundler\nparticipant Entrypoint\nparticipant SenderCreator\nparticipant SafeProxyFactory\nparticipant SafeProxy\nparticipant SafeSingleton\nparticipant Launchpad\nparticipant Safe7579\nparticipant Registry\nparticipant EventEmitter\nparticipant ValidatorModule\nparticipant Executor\n\nalt Creation by Factory\nBundler->>Entrypoint: handleUserOps\nEntrypoint->>SenderCreator: create this initcode\nSenderCreator->>+SafeProxyFactory: createProxyWithNonce(launchpad, intializer, salt)\nSafeProxyFactory-->>SafeProxy: create2\nSafeProxy-->Launchpad: singleton = launchpad\nSafeProxyFactory->>+SafeProxy: preValidationSetup (initHash, to, preInit)\nSafeProxy-->>+Launchpad: preValidationSetup (initHash, to, preInit) [delegatecall]\nNote over Launchpad: sstore initHash\nSafeProxy-->>SafeProxyFactory: created\nSafeProxyFactory-->>Entrypoint: created sender\nend\n\nalt Validation Phase\nEntrypoint->>+SafeProxy: validateUserOp\nSafeProxy-->>Launchpad: validateUserOp [delegatecall]\nNote right of Launchpad: only initializeThenUserOp.selector\nNote over Launchpad: require inithash (sload)\nLaunchpad->>Safe7579: launchpadValidators() [call]\nNote over Safe7579: write validator(s) to storage\n\nloop\nLaunchpad ->> ValidatorModule: onInstall()\nNote over Launchpad: emit ModuleInstalled (as SafeProxy)\n\nend\nNote over Launchpad: get validator module selection from userOp.nonce\nLaunchpad ->> ValidatorModule: validateUserOp(userOp, userOpHash)\nValidatorModule ->> Launchpad: packedValidationData\nLaunchpad-->>SafeProxy: packedValidationData\nSafeProxy->>-Entrypoint: packedValidationData\nend\n\nalt Execution Phase\nEntrypoint->>+SafeProxy: setupSafe\nSafeProxy-->>Launchpad: setupSafe [delegatecall]\nNote over SafeProxy, Launchpad: sstore safe.singleton == SafeSingleton\nLaunchpad->>SafeProxy: safe.setup() [call]\nSafeProxy->>SafeSingleton: safe.setup() [delegatecall]\nNote over SafeSingleton: setup function in Safe has a delegatecall\nSafeSingleton-->>Launchpad: initSafe7579WithRegistry [delegatecall]\nLaunchpad->>SafeProxy: this.enableModule(safe7579)\nSafeProxy-->>SafeSingleton: enableModule (safe7579) [delegatecall]\nSafeSingleton->>Safe7579: initializeAccountWithRegistry\nNote over Safe7579: msg.sender: SafeProxy\nalt SetupRegistry\nSafe7579-->SafeProxy: exec set attesters on registry\nSafeProxy-->>SafeSingleton: exec set attesters on registry\nSafeSingleton->>Registry: set attesters (attesters[], threshold)\nend\nloop installation of modules\nSafe7579->>Registry: checkForAccount(SafeProxy, moduleaddr, moduleType)\nSafe7579->>SafeProxy: exec call onInstall on module\nSafeProxy-->>SafeSingleton: exec call onInstall on Module [delegatecall]\nSafeSingleton->>Executor: onInstall() [call]\nSafe7579->>SafeProxy: exec EventEmitter\nSafeProxy-->>SafeSingleton: exec EventEmitter [delegatecall]\nSafeSingleton-->>EventEmitter: emit ModuleInstalled() [delegatecall]\nNote over EventEmitter: emit ModuleInstalled() as SafeProxy\nend\nSafe7579->>SafeProxy: exec done\nSafeProxy->-Entrypoint: exec done\nend\n```\n\n----------------------------------------\n\nTITLE: Approving Safe Transaction Hash with `gasLimit` Option\nDESCRIPTION: This snippet shows how to use the optional `gasLimit` parameter when calling `approveTransactionHash`. The `gasLimit` parameter sets the maximum amount of gas the transaction can use. It is passed within the `options` object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionResponse = await protocolKit.approveTransactionHash(\n  '0x...',\n  options: {\n    gasLimit: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Fetching SafeOperation by Hash (GET /api/v1/safe-operations/{safe_operation_hash}/)\nDESCRIPTION: This snippet defines the REST API GET method to retrieve detailed information about a specific SafeOperation using its hash. It includes parameters, response schemas, and an example curl request with headers for making the call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit in TypeScript\nDESCRIPTION: Shows how to initialize the Safe Protocol Kit with a provider, signer, and Safe address. This setup is required before using methods like getChainId.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getchainid.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Scripts for Migration Methods (JSON)\nDESCRIPTION: Defines npm script commands within `package.json` to execute the TypeScript migration script (`src/migrate.ts`) with different arguments, corresponding to the four available migration methods (`migrateSingleton`, `migrateL2Singleton`, `migrateWithFallbackHandler`, `migrateL2WithFallbackHandler`). These scripts simplify running specific migration types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n...\n  \"scripts\": {\n    ...\n    \"migrate:L1\": \"ts-node ./src/migrate.ts migrateSingleton\",\n    \"migrate:L2\": \"ts-node ./src/migrate.ts migrateL2Singleton\",\n    \"migrate:L1:withFH\": \"ts-node ./src/migrate.ts migrateWithFallbackHandler\",\n    \"migrate:L2:withFH\": \"ts-node ./src/migrate.ts migrateL2WithFallbackHandler\"\n  },\n...\n```\n\n----------------------------------------\n\nTITLE: Creating and sending a Safe threshold change transaction in TypeScript\nDESCRIPTION: This example demonstrates how to create a transaction to change the threshold of a connected Safe to 2 and then send it using the Safe Client SDK.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createchangethresholdtransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst transaction = await safeClient.createChangeThresholdTransaction({\n  threshold: 2\n})\n\nconst txResult = await safeClient.send({\n  transactions: [transaction]\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Retrieving Single Safe Transfer API (JSON)\nDESCRIPTION: This JSON snippet provides an example of the response returned by the Safe Transaction Service API when retrieving a single transfer by its ID. It shows the detailed structure of a transfer object, identical to those found in the list response, containing information like `type`, `executionDate`, `value`, `from`, `to`, and `tokenInfo`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Delegates with Comprehensive Config (TypeScript)\nDESCRIPTION: Demonstrates how to call the `getSafeDelegates` function using a configuration object (`GetSafeDelegateProps`). The config allows specifying optional filters such as `safeAddress`, `delegateAddress`, `delegatorAddress`, `label`, and pagination parameters like `limit` and `offset`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafedelegates.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GetSafeDelegateProps } from '@safe-global/api-kit'\nimport { apiKit } from './setup.ts'\n\nconst config: GetSafeDelegateProps = {\n  safeAddress: '0x...', // Optional\n  delegateAddress: '0x...', // Optional\n  delegatorAddress: '0x...', // Optional\n  label: 'abc', // Optional\n  limit: '10', // Optional\n  offset: '50' // Optional\n}\n\nconst delegates = await apiKit.getSafeDelegates(config)\n```\n\n----------------------------------------\n\nTITLE: Sending ERC-721 tokens from Safe\nDESCRIPTION: Transfers a specific ERC-721 token (by token ID) from the Safe to a recipient address, requiring the token's contract address and token ID. Enables management of NFT assets within Safe wallets.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsend_erc721 <address> <token-address> <token-id> [--safe-nonce <int>]\n```\n\n----------------------------------------\n\nTITLE: Using baseGas option in createEnableGuardTx in TypeScript\nDESCRIPTION: This snippet shows how to use the `baseGas` option when calling `createEnableGuardTx`.  `baseGas` is a string representing the gas costs for the data used to trigger the Safe transaction. It is part of an `options` object passed to the `createEnableGuardTx` function. This code assumes that the `protocolKit` is initialized and that the `options` object is properly structured. The `options` parameter is optional, and other optional parameters are available to configure the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableGuardTx(\n  '0x...',\n  options: {\n    baseGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Transactions with useSafe Hook in React using TypeScript\nDESCRIPTION: This React component demonstrates usage of the useSafe hook from @safe-global/safe-react-hooks to retrieve all transactions related to a connected Safe. The getTransactions method is called, and its result is JSON stringified and rendered. Required dependency: @safe-global/safe-react-hooks. Input parameters are managed internally, and output is a data object representing the queried transactions. The component expects to be rendered inside a context provided by SafeProvider.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/gettransactions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction Transactions() {\n  const { getTransactions } = useSafe()\n  const {\n    data,\n    // ...\n  } = getTransactions()\n\n  return (\n    <>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default Transactions\n```\n\n----------------------------------------\n\nTITLE: Initialize Public Client for Ethereum RPC Calls to Gnosis Chain\nDESCRIPTION: Creates a public client instance using VIEM to interact with Gnosis Chain via an RPC URL. This client is used for read-only calls like fetching bytecode or contract data and is configured with the Gnosis chain parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst rpcURL = 'https://rpc.ankr.com/gnosis'\n\nconst publicClient = createPublicClient({\n  transport: http(rpcURL),\n  chain: gnosis\n})\n```\n\n----------------------------------------\n\nTITLE: Using getAllTransactions with safeAddress Parameter in TypeScript\nDESCRIPTION: Basic usage of the getAllTransactions method with just the Safe address parameter. This retrieves all transactions for the specified Safe account without any filtering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getalltransactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst allTxs = await apiKit.getAllTransactions(\n  safeAddress\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Multisig Transaction via Safe API (Bash/cURL)\nDESCRIPTION: This cURL command shows how to retrieve details of a specific multisig transaction using the Safe Transaction Service API. It issues a GET request to the `/api/v1/multisig-transactions/{safe_tx_hash}/` endpoint, using the `safe_tx_hash` (e.g., `0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2`) as a path parameter and setting the `Accept` header to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Calling confirmTransaction with Safe API Kit (TypeScript)\nDESCRIPTION: This snippet demonstrates the usage of the `confirmTransaction` function from the Safe API Kit. It requires an initialized `apiKit` instance and takes the Safe transaction hash and a signature as input parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/confirmtransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeTxHash = '0x...'\n\nconst signature = '0x...'\n\nconst signature = await apiKit.confirmTransaction(safeTxHash, signature)\n```\n\n----------------------------------------\n\nTITLE: Submitting UserOperation in TypeScript\nDESCRIPTION: This TypeScript code submits the `sponsoredUserOperation` to the `EntryPoint` contract using the `sendUserOperation` method from the bundler client. The method takes the `sponsoredUserOperation` and `entryPoint` address as arguments.  It returns a `userOperationHash` which can be used to track the operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst userOperationHash = await bundlerClient.sendUserOperation({\n    userOperation: sponsoredUserOperation,\n    entryPoint: ENTRYPOINT_ADDRESS_V06\n  })\n```\n\n----------------------------------------\n\nTITLE: Executing Token Transfers via Safe Module with Off-Chain Signature Verification in Solidity\nDESCRIPTION: Public function allowing beneficiaries to withdraw ERC20 tokens from the Safe account using off-chain EIP-712 signatures from Safe owners. It validates the deadline, constructs the permit struct hash with an incremented nonce, computes the domain-separated hash, verifies provided signatures via the Safe's checkSignatures method, and upon successful verification executes the token transfer through execTransactionFromModule. The function includes safeguards against expired deadlines and failed transaction execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\nfunction tokenTransfer(\n    uint amount,\n    address receiver,\n    uint256 deadline,\n    bytes memory signatures\n) public {\n    require(deadline >= block.timestamp, \"expired deadline\");\n\n    bytes32 signatureData = keccak256(\n        abi.encode(\n            PERMIT_TYPEHASH,\n            amount,\n            msg.sender,\n            nonces[msg.sender]++,\n            deadline\n        )\n    );\n\n    bytes32 hash = keccak256(\n        abi.encodePacked(\"\\x19\\x01\", getDomainSeparator(), signatureData)\n    );\n\n    Safe(payable(safeAddress)).checkSignatures(\n        hash,\n        abi.encodePacked(signatureData),\n        signatures\n    );\n\n    bytes memory data = abi.encodeWithSignature(\n        \"transfer(address,uint256)\",\n        receiver,\n        amount\n    );\n\n    // Calling `execTransactionFromModule` with the transaction data to execute the token transfer through the Safe account.\n    require(\n        Safe(payable(safeAddress)).execTransactionFromModule(\n            tokenAddress,\n            0,\n            data,\n            Enum.Operation.Call\n        ),\n        \"Could not execute token transfer\"\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Safe Transactions with useSendTransaction Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to import and use the useSendTransaction hook from @safe-global/safe-react-hooks within a React function component to send transactions via the connected Safe. It defines the transaction parameters including the recipient address, value, and data payload. The sendTransaction function triggers the transaction execution or submission depending on the Safe's threshold. The snippet also shows rendering the transaction result data. Dependencies include React, Safe hooks, and proper Safe context setup.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesendtransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSendTransaction, SendTransactionVariables } from '@safe-global/safe-react-hooks'\n\nfunction App() {\n  const {\n    sendTransaction,\n    data,\n    // ...\n  } = useSendTransaction()\n\n  const sendTransactionParams: SendTransactionVariables = {\n    transactions: [{\n      to: '0x...',\n      value: '123',\n      data: '0x'\n    }]\n  }\n\n  return (\n    <>\n      <button onClick={() => sendTransaction(sendTransactionParams)}>\n        Send Transaction\n      </button>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default App\n```\n\n----------------------------------------\n\nTITLE: Using isOwnerConnected Hook with React in TypeScript\nDESCRIPTION: Example of using the isOwnerConnected property from the useSafe hook to determine if the connected wallet is an owner of the Safe. The component conditionally renders text based on the ownership status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/isownerconnected.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction IsOwnerConnected() {\n  const { isOwnerConnected } = useSafe()\n\n  return (\n    <>\n      {isOwnerConnected ? 'Owner is connected' : 'No owner connected'}\n    </>\n  )\n}\n\nexport default IsOwnerConnected\n```\n\n----------------------------------------\n\nTITLE: GET Request to Retrieve Multisig Transactions\nDESCRIPTION: This snippet demonstrates a GET request to fetch multisig transactions associated with a specific Safe address. The request targets the `/api/v1/safes/{address}/multisig-transactions/` endpoint. It uses the Safe address as a path parameter to filter the transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Validating Off-chain Message Signature with isValidSignature - Protocol Kit - TypeScript\nDESCRIPTION: This code validates an off-chain message signature using protocolKit.isValidSignature with the message hash and the encoded signatures generated by safeMessage.encodedSignatures(). Dependencies include both the Protocol Kit and the off-chain compatibility contracts. Inputs are the message hash and the combined encoded signatures. The result is a boolean indicating the validity of the provided signatures for off-chain messages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/messages.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst encodedSignatures = safeMessage.encodedSignatures()\n\nconst isValid = await protocolKit.isValidSignature(\n  messageHash,\n  encodedSignatures\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Safe Operation\nDESCRIPTION: This code snippet demonstrates how to send a Safe operation using the `sendSafeOperation` function. It showcases the usage of `MetaTransactionData` for defining transactions, as well as optional parameters like `validAfter`, `validUntil`, `amountToApprove`, and `feeEstimator`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetaTransactionData } from '@safe-global/types-kit'\nimport { safeOperationsClient } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '0',\n  data: '0x'\n  operation: 1 // Optional\n}, {\n  to: '0x...',\n  value: '0',\n  data: '0x',\n  operation: 1 // Optional\n}]\n\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions,\n  validAfter: Number(timestamp - 60_000n), // Optional\n  validUntil: Number(timestamp + 60_000n), // Optional\n  amountToApprove: 123n, // Optional\n  feeEstimator: {\n    preEstimateUserOperationGas, // Optional\n    postEstimateUserOperationGas, // Optional\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Confirming a Safe Transaction using Safe SDK in TypeScript\nDESCRIPTION: Demonstrates calling the `confirm` method on an initialized `safeClient` instance. This function takes the `safeTxHash` of the pending transaction as input and returns a promise resolving to the transaction result. It requires `safeClient` to be set up as shown in the setup example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/confirm.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst txResult = await safeClient.confirm({\n  safeTxHash: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Using Passkeys for Authentication - Typescript\nDESCRIPTION: This TypeScript snippet demonstrates how to use passkeys with a Safe Smart Account. It creates a passkey signer, configures a Safe account using the passkey signer's address as an owner, and then signs a Safe transaction. Requires the `@safe-global/protocol-kit` package and an instance of `SafeSdk`. The `create` function generates a new passkey, and the `signTransactionWithPasskey` function signs the transaction with the generated passkey.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx-full.txt#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasskeySignerFactory } from '@safe-global/protocol-kit'\n\n// Create a new passkey\nconst passkeySignerFactory = new PasskeySignerFactory()\nconst passkeySigner = await passkeySignerFactory.create({\n  username: 'user@example.com'\n})\n\n// Use passkey to sign transactions\nconst safeAccountConfig = {\n  owners: [passkeySigner.getAddress()],\n  threshold: 1\n}\n\n// Sign Safe transactions with passkey\nconst safeTransaction = await safeSdk.createTransaction({ safeTransactionData })\nconst signedSafeTransaction = await safeSdk.signTransactionWithPasskey(safeTransaction, passkeySigner)\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting gasPrice\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, highlighting the `gasPrice` parameter within the `safeTransactionData` object. This specifies the price per unit of gas for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData: {\n    operation: OperationType.Call,\n    safeTxGas: '0x...',\n    baseGas: '123',\n    gasPrice: '123',\n    gasToken: '0x...',\n    refundReceiver: '0x...',\n    nonce: '10'\n  },\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Delegates Filtered by Delegator Address (TypeScript)\nDESCRIPTION: Retrieves the list of delegates where a specific address is the delegator. This filtering is performed by including the `delegatorAddress` parameter in the configuration object for `getSafeDelegates`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafedelegates.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst delegates = await apiKit.getSafeDelegates({\n  delegatorAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Empty JSON Response from Creating a SafeOperation (json)\nDESCRIPTION: This snippet shows the JSON response body when creating a SafeOperation via the API returns an empty response, indicating either successful creation or no content returned as confirmation. There are no output fields or error messages. The expected HTTP response code for a successful creation is 201. This response is typical when the server does not specify a response schema for the operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Adapting createTransaction Method Call in ProtocolKit v2 (JS)\nDESCRIPTION: Shows the modification needed for the `createTransaction` method in ProtocolKit v2. The method now requires transaction data to be passed within a `transactions` array, and optional parameters like `nonce` and `safeTxGas` are moved to an `options` object. This contrasts with v1 where a single object was accepted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v2.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// old:\nconst safeTransactionData = {\n  to: '',\n  data: '',\n  value: '',\n  nonce: '',\n  safeTxGas: ''\n}\nconst safeTransaction = protocolKit.createTransaction({ safeTransactionData })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// new:\nconst safeTransactionData = {\n  to: '',\n  data: '',\n  value: ''\n}\nconst options = {\n  nonce: '',\n  safeTxGas: ''\n}\nconst safeTransaction = protocolKit.createTransaction({\n  transactions: [safeTransactionData],\n  options\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing a Next.js application for Safe and ERC-7579 integration\nDESCRIPTION: Command to create a new Next.js application for building with Safe and ERC-7579 modules. This sets up the foundation for the Smart Account application.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm create next-app\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Singletons with getServiceSingletonsInfo - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `getServiceSingletonsInfo()` function from the `@safe-global/api-kit` library to retrieve a list of Safe Singleton contracts. It assumes that `apiKit` has been initialized. The output is a promise resolving to an array of `SafeSingletonResponse` objects, which contain information about the singleton contracts. The `apiKit` object is a prerequisite; see the setup.ts file for its initialization.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getservicesingletonsinfo.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst singletons = await apiKit.getServiceSingletonsInfo()\n```\n\n----------------------------------------\n\nTITLE: Calling encodeTransactionData for Transaction Preparation in Solidity\nDESCRIPTION: Shows a specific invocation of the encodeTransactionData function, highlighting positional usage of parameters such as destination, value, data payload, operation type, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, and nonce. Each parameter's role in transaction context is explained elsewhere in the documentation. This code returns the ABI-encoded bytes for Safe execution and expects valid input values; it does not execute the transaction itself but prepares the data for use.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/encodeTransactionData.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).encodeTransactionData(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    100000,\n    0,\n    0,\n    0x...,\n    0x...,\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Multisig Transactions Retrieval\nDESCRIPTION: This cURL command makes a GET request to the `/api/v1/safes/{address}/multisig-transactions/` endpoint to retrieve the multisig transactions. The `-H` option specifies the `Accept` and `content-type` headers for JSON responses. Replace `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` with the actual Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_32\n\nLANGUAGE: Bash/Curl\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Instantiating Safe SDK and Signing\nDESCRIPTION: This snippet shows how to instantiate the Safe Protocol Kit and sign a transaction using the generated signer. It initializes the `Safe` object, creates a transaction, and then signs it.  It requires a provider, signer, and the safeAddress. The 'to', 'value', and 'data' parameters define the transaction details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/passkeys.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.init({ provider, signer, safeAddress })\n\nconst transaction = { to: '0x1234', value: '0x0', data: '0x' }\nconst safeTransaction = await protocolKit.createTransaction({ transactions: [transaction] })\nconst signedSafeTransaction = await protocolKit.signTransaction(safeTransaction)\n```\n\n----------------------------------------\n\nTITLE: Executing Transaction: TypeScript\nDESCRIPTION: This snippet executes the signed transaction using the Protocol Kit and retrieves the transaction response. It requires the initialized Protocol Kit and the signed transaction object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionResponse =\n  await protocolKitOwnerA.executeTransaction(signedTransaction)\n```\n\n----------------------------------------\n\nTITLE: Predict Safe Address\nDESCRIPTION: This TypeScript snippet uses the Protocol Kit to predict the Safe address. This method returns the predicted address based on the provided configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/safe-deployment.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeAddress = await protocolKit.getAddress()\n```\n\n----------------------------------------\n\nTITLE: Using addMessageSignature with parameters (TypeScript)\nDESCRIPTION: This snippet showcases the `addMessageSignature` function usage. The `safeMessageHash` is the hash of the Safe message, and `signature` is the signature to be added to the specified Safe message, both represented as strings.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addmessagesignature.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.addMessageSignature(\n  '0x...',\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Create Safe Message\nDESCRIPTION: Creates a Safe message from a raw message using the `createMessage` function from the Safe Protocol Kit. It shows how to import the necessary types and the protocol kit instance and how to call the function with a string message.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/createmessage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EIP712TypedData } from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst rawMessage: string | EIP712TypedData = 'Example message'\n\nconst message = protocolKit.createMessage(rawMessage)\n```\n\n----------------------------------------\n\nTITLE: Initialize Transaction Settings for Safe and Gelato Relay\nDESCRIPTION: Define constants and variables required for setting up the transaction context. This includes the RPC URL for the blockchain network (BNB Chain Mainnet in this example), the owner's private key (loaded from environment variables), the Safe address, the destination address for the transaction, and the amount to transfer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// https://chainlist.org\nconst RPC_URL = 'https://endpoints.omniatech.io/v1/bsc/mainnet/public'\nconst OWNER_PRIVATE_KEY = process.env.OWNER_PRIVATE_KEY\nconst safeAddress = '0x...' // Safe from which the transaction will be sent\n\n// Any address can be used for destination. In this example, we use vitalik.eth\nconst destinationAddress = '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'\nconst withdrawAmount = ethers.parseUnits('0.005', 'ether').toString()\n```\n\n----------------------------------------\n\nTITLE: Example Call to getSafesByModule in TypeScript\nDESCRIPTION: A concise example illustrating the direct call to the `getSafesByModule` function. It focuses on passing the required `moduleAddress` parameter, showing the basic syntax for invoking the function. Note that in a functional context, this would rely on an initialized `apiKit` instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafesbymodule.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safes = await getSafesByModule(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Incoming Safe Transactions (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to call the getIncomingTransactions function using an initialized SafeApiKit instance. It shows how to pass the Safe address and an optional options object containing parameters like '_from', 'limit', and 'offset' to filter and paginate results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getincomingtransactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\nconst options = {\n  _from: '0x...',\n  limit: 10,\n  offset: 10\n}\n\nconst incomingTxs = await apiKit.getIncomingTransactions(safeAddress, options)\n```\n\n----------------------------------------\n\nTITLE: Approving Safe Transaction Hash with `maxFeePerGas` Option\nDESCRIPTION: This snippet demonstrates the usage of the `maxFeePerGas` parameter when calling `approveTransactionHash`. The `maxFeePerGas` sets the maximum fee per gas the sender is willing to pay.  It's also provided via the `options` object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionResponse = await protocolKit.approveTransactionHash(\n  '0x...',\n  options: {\n    maxFeePerGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit (TypeScript)\nDESCRIPTION: This TypeScript snippet initializes the Safe protocol kit.  It imports the `Safe` class from the `@safe-global/protocol-kit` library. The `init` method is called with provider, signer, and safe address parameters to set up the kit. This initializes the kit, making it ready for use with other kit functions, such as getting the guard address. It uses the safe address to specify the Safe account to operate on.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/getguard.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting safeAddress\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, specifically highlighting the `safeAddress` parameter within the configuration object. This parameter specifies the address of the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData,\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Safe Operation Using SafeApiKit in TypeScript\nDESCRIPTION: Demonstrates how to configure and call the addSafeOperation method from the Safe Api Kit to add a new ERC-4337 Safe operation for a specified Safe account. The snippet defines the userOperation object with necessary properties such as sender, nonce, gas limits, fees, signature, and related addresses. It shows the expected structure for Safe operation parameters and how to include optional validation time windows.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafeoperation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AddSafeOperationProps } from '@safe-global/api-kit'\nimport { apiKit } from './setup.ts'\n\nconst userOperation = {\n  sender: '0x...',\n  nonce: '10',\n  initCode: '0x...',\n  callData: '0x...',\n  callGasLimit: 123n,\n  verificationGasLimit: 123n,\n  preVerificationGas: 123n,\n  maxFeePerGas: 123n,\n  maxPriorityFeePerGas: 123n,\n  paymasterAndData: '0x...',\n  signature: '0x...'\n}\n\nconst config: AddSafeOperationProps = {\n  entryPoint: '0x...',\n  moduleAddress: '0x...',\n  safeAddress: '0x...',\n  userOperation,\n  options: { // Optional\n    validAfter: currentTimestamp - 60000, // Optional\n    validUntil: currentTimestamp + 60000 // Optional\n  }\n}\n\nawait apiKit.addSafeOperation(config)\n```\n\n----------------------------------------\n\nTITLE: Signing a Created Transaction with Protocol Kit (TypeScript)\nDESCRIPTION: Demonstrates the end-to-end process of creating a `SafeTransaction` object using `createTransaction` and then signing it using the `protocolKit.signTransaction` method. It shows how to pass the transaction object and optionally specify the signing method and preimage address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SigningMethod } from '@safe-global/protocol-kit'\nimport { MetaTransactionData, OperationType } from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions\n})\n\nconst signingMethod = SigningMethod.ETH_SIGN_TYPED_DATA_V4\n\nconst preimageSafeAddress = '0x...'\n\nconst signedSafeTransaction = await protocolKit.signTransaction(\n  safeTransaction,\n  signingMethod, // Optional\n  preimageSafeAddress // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Safe Delegate with delegator address in TypeScript\nDESCRIPTION: This snippet demonstrates explicitly including the delegatorAddress parameter when adding a delegate. It is essential for associating the operation with the correct Safe user, in addition to the delegate's address and label.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafedelegate.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = await apiKit.addSafeDelegate({\n  delegateAddress: '0x...',\n  delegatorAddress: '0x...',\n  label: 'abc',\n  signer\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Undeployed Safe with PredictedSafe\nDESCRIPTION: This snippet shows how to connect to an undeployed Safe. It uses the `predictedSafe` property to configure the Safe before deployment. The `safeAccountConfig` and `safeDeploymentConfig` are used to define the Safe's properties.  Requires the `@safe-global/protocol-kit` package and definition of `safeAccountConfig` and `safeDeploymentConfig`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe, {\n  PredictedSafeProps,\n  SafeAccountConfig,\n  SafeDeploymentConfig\n} from '@safe-global/protocol-kit'\n\nconst safeAccountConfig: SafeAccountConfig = {\n  owners: ['0x...', '0x...', '0x...'],\n  threshold: 2,\n  to: '0x...', // Optional\n  data: '0x', // Optional\n  fallbackHandler: '0x...', // Optional\n  paymentToken: '', // Optional\n  payment: 123, // Optional\n  paymentReceiver: '0x...' // Optional\n}\nconst safeDeploymentConfig: SafeDeploymentConfig = {\n  saltNonce: '123', // Optional\n  safeVersion: '1.4.1', // Optional\n  deploymentType: 'canonical' // Optional\n}\nconst predictedSafe: PredictedSafeProps = {\n  safeAccountConfig,\n  safeDeploymentConfig // Optional\n}\n\nconst protocolKit = await Safe.init({\n  // ...\n})\n\nconst newProtocolKit = await protocolKit.connect({\n  signer, // Optional\n  predictedSafe // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction: TypeScript\nDESCRIPTION: This snippet initializes the Safe Protocol Kit using an owner's private key and RPC URL. It defines transaction data and creates a Safe transaction. The snippet takes the RPC URL, owner's private key, Safe address, recipient address (config.TO), and value as parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the Protocol Kit with Owner A\nconst protocolKitOwnerA = await Safe.init({\n  provider: config.RPC_URL,\n  signer: config.OWNER_A_PRIVATE_KEY,\n  safeAddress: config.SAFE_ADDRESS\n})\n\n// Create a Safe transaction\nconst safeTransactionData: MetaTransactionData = {\n  to: config.TO,\n  value: config.VALUE,\n  data: '0x',\n  operation: OperationType.Call\n}\n\nconst safeTransaction = await protocolKitOwnerA.createTransaction({\n  transactions: [safeTransactionData]\n})\n```\n\n----------------------------------------\n\nTITLE: Invoking swapOwner for oldOwner Parameter - Solidity\nDESCRIPTION: This snippet shows the use of swapOwner, emphasizing the oldOwner parameter, which is the address of the owner to be replaced in the Safe contract. The snippet assumes that the surrounding infrastructure (ISafe interface and contract instance) is present, and that the provided address corresponds to an existing owner. The function's purpose is to replace oldOwner with newOwner by traversing the linked list starting from prevOwner. All three arguments must be valid addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/swapOwner.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).swapOwner(\n    0x...,\n    0x...,\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Get Module Transaction using curl\nDESCRIPTION: This snippet shows how to retrieve a module transaction from the Safe Transaction Service using a `curl` command. The request specifies the module transaction ID in the URL and sets the `Accept` and `content-type` headers to `application/json`. The response will be a JSON object containing the details of the module transaction, including information such as the transaction hash, module address, and execution details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Collectibles for a Safe using cURL\nDESCRIPTION: Retrieves a list of collectibles (ERC721 tokens) associated with a specified Safe address using a cURL request. It uses the `GET` method to query the `/api/v2/safes/{address}/collectibles/` endpoint. The request includes headers to specify the expected response format as JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Sign Safe Transaction with ECDSA\nDESCRIPTION: This TypeScript code demonstrates signing a Safe transaction with ECDSA using the `signTransaction` method. It connects to different owners (`OWNER_1_ADDRESS`, `OWNER_2_ADDRESS`) using their private keys and signs the `safeTransaction` object with `SigningMethod.ETH_SIGN` and `SigningMethod.ETH_SIGN_TYPED_DATA_V4`, adding their signatures to the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Connect OWNER_1_ADDRESS\n  protocolKit = await protocolKit.connect({\n    provider: RPC_URL,\n    signer: OWNER_1_PRIVATE_KEY\n  })\n\n  // Sign the safeTransaction with OWNER_1_ADDRESS\n  // After this, the safeTransaction contains the signature from OWNER_1_ADDRESS\n  safeTransaction = await protocolKit.signTransaction(\n    safeTransaction,\n    SigningMethod.ETH_SIGN\n  )\n\n  // Connect OWNER_2_ADDRESS\n  protocolKit = await protocolKit.connect({\n    provider: RPC_URL,\n    signer: OWNER_2_PRIVATE_KEY\n  })\n\n  // Sign the safeTransaction with OWNER_2_ADDRESS\n  // After this, the safeTransaction contains the signature from OWNER_1_ADDRESS and OWNER_2_ADDRESS\n  safeTransaction = await protocolKit.signTransaction(\n    safeTransaction,\n    SigningMethod.ETH_SIGN_TYPED_DATA_V4\n  )\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Messages using cURL\nDESCRIPTION: Demonstrates how to retrieve the list of messages for a specific Safe account address (`0xcd2...c75`) using a GET request to the Safe Transaction Service API endpoint `/api/v1/safes/{address}/messages/` via cURL. Accepts optional query parameters for pagination (`limit`, `offset`) and ordering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a SafeConfig with createConfig\nDESCRIPTION: Demonstrates how to create a `SafeConfig` object using the `createConfig` function from `@safe-global/safe-react-hooks`. This config specifies the chain using `sepolia` from `viem/chains`, as well as the provider, signer, and Safe address. It requires the `@safe-global/safe-react-hooks` and `viem` packages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getchain.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Transfers using Safe Transaction Service API (Bash)\nDESCRIPTION: This snippet demonstrates how to use `curl` to query the Safe Transaction Service API to retrieve a paginated list of token transfers associated with a specific Safe address. It shows the base URL, path parameters, and required headers for the GET request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient for Existing Safe Account - TypeScript\nDESCRIPTION: Initializes a SafeClient instance for interacting with an already deployed Safe account. Passes the provider, signer, and the address of the existing Safe. This is required for transaction signing and confirmation by current Safe owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-transactions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  safeAddress: '0x...'\n})\n\n```\n\n----------------------------------------\n\nTITLE: Get Safes By Module Safe Transaction Service API Bash\nDESCRIPTION: This `curl` command demonstrates how to query the Safe Transaction Service API to retrieve a list of Safe accounts that have a specific module enabled. It sends a GET request to the `/api/v1/modules/{address}/safes/` endpoint, replacing `{address}` with the module's address. The API returns a JSON object containing an array of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Confirmation with Safe Transaction Service API using Bash\nDESCRIPTION: This bash cURL command submits a new confirmation for a given multisig transaction using the Safe Transaction Service API. It requires the endpoint to be populated with the correct safe_operation_hash and a JSON payload in the request body. More than one signature can be submitted, but delegate keys are not supported. Upon success, a 201 Created response with an empty body is expected; error codes 400 and 422 indicate malformed or unprocessable input.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-optimism.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Creating Safe Deployment Transaction for Sepolia (TypeScript)\nDESCRIPTION: Invokes the `createSafeDeploymentTransaction()` method on the Sepolia Protocol Kit instance. This method prepares the raw transaction details needed to deploy the Safe contract on the Sepolia network. The output is a transaction object containing the target address (typically the Safe proxy factory), the value (usually 0), and the encoded contract data for the deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst sepoliaDeploymentTransaction =\n  await protocolKitSepolia.createSafeDeploymentTransaction()\n```\n\n----------------------------------------\n\nTITLE: Approving Safe Transaction Hash with `nonce` Option\nDESCRIPTION: This snippet demonstrates how to set the `nonce` parameter when calling `approveTransactionHash`.  The `nonce` is the transaction's sequence number. It is supplied within the `options` object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionResponse = await protocolKit.approveTransactionHash(\n  '0x...',\n  options: {\n    nonce: 123\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol Kit for Multiple Chains (TypeScript)\nDESCRIPTION: Creates separate instances of the Protocol Kit SDK, one for each network (Sepolia and Chiado) where a Safe will be deployed. Each instance is initialized asynchronously using `Safe.init()`, providing the specific network's RPC provider URL, the signer obtained from the private key, and the predefined `predictedSafe` configuration. This prepares the SDK for chain-specific operations, including address prediction and transaction creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKitSepolia = await Safe.init({\n  provider: sepolia.rpcUrls.default.http[0],\n  signer: SIGNER_PRIVATE_KEY,\n  predictedSafe,\n  onchainAnalytics // Optional\n  // ...\n})\n\nconst protocolKitChiado = await Safe.init({\n  provider: gnosisChiado.rpcUrls.default.http[0],\n  signer: PRIVATE_KEY,\n  predictedSafe,\n  onchainAnalytics // Optional\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with pnpm\nDESCRIPTION: This bash snippet installs the necessary dependencies for interacting with the Safe Protocol Kit and the viem library using pnpm. Dependencies include the Safe Protocol Kit and viem for network interactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/safe-deployment.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/protocol-kit viem\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit Instance in TypeScript\nDESCRIPTION: Shows how to import the `SafeApiKit` class and create a new instance. The example configures the kit to connect to the Ethereum Mainnet (chainId 1n). This `apiKit` instance is necessary for making calls to the Safe API, as shown in the usage example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafesbymodule.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for List Contracts\nDESCRIPTION: This JSON example illustrates the structure of the API response when listing contracts, including count, pagination URLs, and an array of contract objects with details like address, name, and ABI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending and Confirming Sepolia Deployment Transaction (TypeScript)\nDESCRIPTION: This snippet executes the pre-configured deployment transaction on the Sepolia network. It first retrieves the external signer/client from the Protocol Kit instance. Then, it sends the transaction using the client's `sendTransaction` method and subsequently waits for the transaction to be mined and confirmed on the network using the `waitForTransactionReceipt` utility from `viem/actions`. This completes the on-chain deployment for Sepolia.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst sepoliaClient =\n  await protocolKitSepolia.getSafeProvider().getExternalSigner()\n\nconst transactionHashSepolia = await sepoliaClient!.sendTransaction({\n  to: sepoliaDeploymentTransaction.to,\n  value: BigInt(sepoliaDeploymentTransaction.value),\n  data: sepoliaDeploymentTransaction.data as `0x${string}`,\n  chain: sepolia\n})\n\nawait waitForTransactionReceipt(\n  sepoliaClient!,\n  { hash: transactionHashSepolia }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving ERC-20 Token List using Safe Api Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `getTokenList` method from an initialized `apiKit` instance to fetch the list of ERC-20 tokens managed by Safe. It assumes `apiKit` has been previously configured as shown in the setup example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettokenlist.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst tokens = await apiKit.getTokenList()\n```\n\n----------------------------------------\n\nTITLE: Updating the master copy address\nDESCRIPTION: Replaces the implementation address of the Safe, enabling upgrades and feature extensions. Must be used carefully to prevent loss of funds.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nchange_master_copy <address>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Account Status via REST API (TypeScript & cURL)\nDESCRIPTION: This snippet demonstrates how to fetch detailed information of a specific Safe account by providing its address. It includes the API endpoint, request headers, and a sample JSON response showing Safe properties like owners, modules, fallback handler, and version. Dependencies include the API URL and a proper address parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-safes-{address}--get.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Using getSafeInfo Hook in a React Component\nDESCRIPTION: Basic example of using the getSafeInfo hook from Safe React Hooks to retrieve and display Safe information in a React component.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsafeinfo.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafeInfo } from '@safe-global/safe-react-hooks'\n\nfunction SafeInfo() {\n  const { getSafeInfo } = useSafe()\n  const {\n    data,\n    // ...\n  } = getSafeInfo()\n\n  return (\n    <>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default SafeInfo\n```\n\n----------------------------------------\n\nTITLE: Calling getModulesPaginated in Solidity\nDESCRIPTION: This snippet demonstrates how to call `getModulesPaginated` with placeholder arguments from inside another contract. The function takes a starting address and a page size as input. The example shows how the function `getModulesPaginated` should be called and explains the parameters `start` and `pageSize`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/getModulesPaginated.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getModulesPaginated(\n    0x...,\n    1\n);\n\n```\n\n----------------------------------------\n\nTITLE: Setting the Transaction Gas (`safeTxGas`) for `execTransaction`\nDESCRIPTION: Highlights the `safeTxGas` parameter (index 6) within the `execTransaction` function call. This specifies the amount of gas allocated specifically for the execution of the internal Safe transaction itself.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0, // safeTxGas\n    0,\n    0,\n    0x...,\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Signing UserOperation in TypeScript\nDESCRIPTION: This snippet calls the `signUserOperation` function to create the signature for the `sponsoredUserOperation`.  It passes the `sponsoredUserOperation`, `signer`, `chainId`, and `SAFE_4337_MODULE_ADDRESS` as parameters. The `signUserOperation` function constructs an EIP712 message using the user operation data and then signs it using the provided signer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst chainId = 100\n\n      sponsoredUserOperation.signature = await signUserOperation(\n        sponsoredUserOperation,\n        signer,\n        chainId,\n        SAFE_4337_MODULE_ADDRESS\n      )\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst EIP712_SAFE_OPERATION_TYPE = {\n        SafeOp: [\n          { type: 'address', name: 'safe' },\n          { type: 'uint256', name: 'nonce' },\n          { type: 'bytes', name: 'initCode' },\n          { type: 'bytes', name: 'callData' },\n          { type: 'uint256', name: 'callGasLimit' },\n          { type: 'uint256', name: 'verificationGasLimit' },\n          { type: 'uint256', name: 'preVerificationGas' },\n          { type: 'uint256', name: 'maxFeePerGas' },\n          { type: 'uint256', name: 'maxPriorityFeePerGas' },\n          { type: 'bytes', name: 'paymasterAndData' },\n          { type: 'uint48', name: 'validAfter' },\n          { type: 'uint48', name: 'validUntil' },\n          { type: 'address', name: 'entryPoint' }\n        ]\n      }\n\n      const signUserOperation = async (\n        userOperation: UserOperation,\n        signer: PrivateKeyAccount,\n        chainId: any,\n        safe4337ModuleAddress: any\n      ) => {\n        const signatures = [\n          {\n            signer: signer.address,\n            data: await signer.signTypedData({\n              domain: {\n                chainId,\n                verifyingContract: safe4337ModuleAddress\n              },\n              types: EIP712_SAFE_OPERATION_TYPE,\n              primaryType: 'SafeOp',\n              message: {\n                safe: userOperation.sender,\n                nonce: userOperation.nonce,\n                initCode: userOperation.initCode,\n                callData: userOperation.callData,\n                callGasLimit: userOperation.callGasLimit,\n                verificationGasLimit: userOperation.verificationGasLimit,\n                preVerificationGas: userOperation.preVerificationGas,\n                maxFeePerGas: userOperation.maxFeePerGas,\n                maxPriorityFeePerGas: userOperation.maxPriorityFeePerGas,\n                paymasterAndData: userOperation.paymasterAndData,\n                validAfter: '0x000000000000',\n                validUntil: '0x000000000000',\n                entryPoint: ENTRYPOINT_ADDRESS_V06\n              }\n            })\n          }\n        ]\n        signatures.sort((left, right) => left.signer.toLowerCase().localeCompare(right.signer.toLowerCase()))\n        let signatureBytes: Address = '0x000000000000000000000000'\n        for (const sig of signatures) {\n          signatureBytes += sig.data.slice(2)\n        }\n        return signatureBytes\n      }\n```\n\n----------------------------------------\n\nTITLE: Sign Safe Transaction with Safe Account\nDESCRIPTION: This TypeScript snippet shows how to sign a Safe transaction using a child Safe account (`SAFE_1_1_ADDRESS`). It creates a new transaction object, connects to the child Safe account and its owner (`OWNER_3_ADDRESS`), and signs the transaction using `SigningMethod.SAFE_SIGNATURE`, specifying the parent Safe address (`SAFE_3_4_ADDRESS`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a new transaction object\n  let transactionSafe1_1 = await protocolKit.createTransaction({\n    transactions: [safeTransactionData]\n  })\n\n  // Connect OWNER_3_ADDRESS and SAFE_1_1_ADDRESS\n  protocolKit = await protocolKit.connect({\n    provider: RPC_URL,\n    signer: OWNER_3_PRIVATE_KEY,\n    safeAddress: SAFE_1_1_ADDRESS\n  })\n\n  // Sign the transactionSafe1_1 with OWNER_3_ADDRESS\n  // After this, transactionSafe1_1 contains the signature from OWNER_3_ADDRESS\n  transactionSafe1_1 = await protocolKit.signTransaction(\n    transactionSafe1_1,\n    SigningMethod.SAFE_SIGNATURE,\n    SAFE_3_4_ADDRESS // Parent Safe address\n  )\n```\n\n----------------------------------------\n\nTITLE: Safe CLI Commands - Bash\nDESCRIPTION: This Bash snippet shows common commands for interacting with Safe accounts using the Safe CLI. It covers installing the CLI, setting up the configuration, adding a network, creating a new Safe account, and executing a transaction. Requires Node.js and npm for installation and a configured environment with necessary parameters like RPC URLs and API keys. The commands demonstrate basic account management and transaction execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx-full.txt#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Install the Safe CLI\nnpm install -g @safe-global/safe-cli\n\n# Set up your configuration\nsafe config setup\n\n# Connect to a network\nsafe config networks add sepolia --rpc-url https://sepolia.infura.io/v3/your-api-key\n\n# Create a new Safe account\nsafe create --owners 0x... 0x... --threshold 2 --network sepolia\n\n# Execute a transaction\nsafe tx execute --to 0x... --value 0.1 --network sepolia\n```\n\n----------------------------------------\n\nTITLE: Choosing the Fee Payment Token (`gasToken`) for `execTransaction`\nDESCRIPTION: Highlights the `gasToken` parameter (index 9) within the `execTransaction` function call. This specifies the address of the ERC20 token used to pay for transaction fees. Use the zero address (`0x0...0`) to pay with the native network token (e.g., ETH).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x..., // gasToken\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for a Multisig Transaction\nDESCRIPTION: HTTP POST request to estimate the gas costs (safeTxGas) for a multisig transaction on a specified Safe address. This helps determine the gas required before submitting the actual transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_39\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Create Safe Account Instance from Signer in TypeScript\nDESCRIPTION: Generates a Safe account object linked to the signer, with configuration options such as entryPoint, saltNonce, safeVersion, and optional existing address, to deploy or manage Safe accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeAccount = await signerToSafeSmartAccount(publicClient, {\n  entryPoint: ENTRYPOINT_ADDRESS_V06,\n  signer: signer,\n  saltNonce: 0n, // Optional\n  safeVersion: '1.4.1',\n  address: '0x...' // Optional. Only for existing Safe accounts.\n})\n\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Status - cURL\nDESCRIPTION: This cURL command fetches the detailed information of a Safe account. It uses the GET method to query the Safe transaction service API endpoint and specifies the address of the Safe as a parameter. The command sets the Accept and content-type headers to application/json to indicate the expected format of the response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_62\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Example Usage of execTransactionFromModuleReturnData Function in Solidity\nDESCRIPTION: Demonstrates individual parameter usage for execTransactionFromModuleReturnData including to (destination address), value (native token value), data (transaction calldata), and operation (transaction operation enum). It focuses on the parameters used in invoking the ISafe interface method, highlighting the signature and how each argument is applied. This snippet is essential for understanding the inputs expected when executing module transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/execTransactionFromModuleReturnData.mdx#_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n(ISafe safe).execTransactionFromModuleReturnData(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call\n);\n```\n\n----------------------------------------\n\nTITLE: Signing Message Hash with Safe Transaction Service API - TypeScript and Bash\nDESCRIPTION: This snippet demonstrates how to add a signature to an existing message identified by its message hash using a POST request. It requires the message hash as a path parameter and posts an empty JSON payload. The expected successful response is HTTP 201 Created with an empty body. Dependencies include having a valid message hash and appropriate API access. Inputs: message_hash in path; outputs: confirmation as HTTP response only. Provided code samples include curl command and TypeScript example imports.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-optimism.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\nLANGUAGE: js\nCODE:\n```\n// from ../examples/optimism/-v1-messages-{message_hash}-signatures--post.ts\n```\n\n----------------------------------------\n\nTITLE: Post Data for Decoding with cURL\nDESCRIPTION: This code snippet demonstrates how to post data to the data-decoder endpoint using a cURL command. It sends a POST request to the specified endpoint with headers for accepting JSON responses, for data decoding.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-arbitrum.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Using getSafeDelegates - TypeScript\nDESCRIPTION: This snippet shows the updated parameters for the `getSafeDelegates` method. The new implementation accepts a configuration object with optional parameters for filtering delegates, including `safeAddress`, `delegateAddress`, `delegatorAddress`, `label`, `limit`, and `offset`. It fetches and returns a list of safe delegates based on the provided configuration. It requires the Safe API Kit to be initialized.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v1.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst delegateConfig: GetSafeDelegateProps = {\n  safeAddress, // Optional\n  delegateAddress, // Optional\n  delegatorAddress, // Optional\n  label, // Optional\n  limit, // Optional\n  offset // Optional\n}\nconst delegates: SafeDelegateListResponse = await apiKit.getSafeDelegates(delegateConfig)\n```\n\n----------------------------------------\n\nTITLE: Deploying Safe with deploySafe() using SafeFactory\nDESCRIPTION: Shows the updated usage of `deploySafe` method where `saltNonce` is set directly as a parameter instead of within a separate configuration object. Simplifies safe deployment configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v1.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// old\nconst safeDeploymentConfig: SafeDeploymentConfig = { saltNonce }\nconst safeSdk = await safeFactory.deploySafe({ safeAccountConfig, safeDeploymentConfig })\n\n// new\nconst saltNonce = '<YOUR_CUSTOM_VALUE>'\nconst safeSdk = await safeFactory.deploySafe({ safeAccountConfig, saltNonce })\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting refundReceiver\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, highlighting the `refundReceiver` parameter within the `safeTransactionData` object. This specifies the address that will receive any gas refunds.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData: {\n    operation: OperationType.Call,\n    safeTxGas: '0x...',\n    baseGas: '123',\n    gasPrice: '123',\n    gasToken: '0x...',\n    refundReceiver: '0x...',\n    nonce: '10'\n  },\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Declaring 'ExecutionSuccess' Event in Solidity\nDESCRIPTION: This snippet defines an event called 'ExecutionSuccess' with parameters 'txHash' and 'payment'. It is used to emit logs when a transaction is successfully executed, enabling off-chain services to listen for such events. Dependencies include a Solidity environment and the event must be emitted within a function in a smart contract. Inputs are a transaction hash and payment amount, and the output is a log emitted on the blockchain.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/ExecutionSuccess.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nevent ExecutionSuccess(bytes32 txHash, uint256 payment);\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Safe Balances (Deprecated)\nDESCRIPTION: Presents an example JSON response from the deprecated 'List a Safe's Balances' API endpoint. The response is an array containing objects for each token balance. For native coins (like ETH), `tokenAddress` and `token` are null. For ERC20 tokens, it includes the token address, details (name, symbol, decimals, logo URI), and the balance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Safe SDK Guide - JavaScript\nDESCRIPTION: This snippet imports the `Sdk4337Guide` component from the specified path, which is a markdown file containing a guide for using the Safe SDK with ERC-4337. It then renders the imported component within the current context. The primary functionality is to display the content defined within the `Sdk4337Guide` markdown file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/safe-sdk.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Sdk4337Guide from '../../../sdk/relay-kit/guides/4337-safe-sdk.mdx'\n\n<Sdk4337Guide />\n```\n\n----------------------------------------\n\nTITLE: Enabling Fallback Handler (with nonce)\nDESCRIPTION: This snippet demonstrates setting the `nonce` option. The `nonce` allows for precise control over transaction ordering. It's particularly useful in scenarios with multiple, dependent transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableFallbackHandlerTx(\n  '0x...',\n  options: {\n    nonce: 123\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Querying an Ethereum Transaction using getTransaction with ethereumTxHash - TypeScript\nDESCRIPTION: Shows usage of getTransaction by providing an Ethereum transaction hash (ethereumTxHash) to fetch transaction details related to that Ethereum transaction. Requires @safe-global/safe-react-hooks library and appropriate context for getTransaction's invocation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/gettransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = getTransaction({\n  ethereumTxHash: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Submitting a Signed Safe User Operation via Safe4337Pack in TypeScript\nDESCRIPTION: Submits a signed SafeOperation to the bundler by calling executeTransaction() with the 'executable' parameter set to the signed operation. This method returns a user operation hash which can be used to track the transaction status on-chain or through the bundler's API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperationHash = await safe4337Pack.executeTransaction({\n  executable: signedSafeOperation\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Relay Kit Dependency with Yarn in Bash\nDESCRIPTION: Installs the @safe-global/relay-kit package using yarn. This dependency is required to use the Safe4337Pack for managing Safe transactions with ERC-4337 support. It is a prerequisite step before running TypeScript code examples.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/relay-kit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Operation details using cURL\nDESCRIPTION: This snippet demonstrates how to retrieve a Safe Operation by its hash using a cURL command to the Safe Transaction API. The request requires the safe_operation_hash parameter in the path and appropriate headers for JSON communication.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit in TypeScript\nDESCRIPTION: This snippet shows how to initialize the Safe protocol kit using the `@safe-global/protocol-kit` library. It takes `provider`, `signer`, and `safeAddress` as parameters within the `init` method.  Before using this code, you need to import the `Safe` class from the `@safe-global/protocol-kit` package and have the necessary provider and signer instances.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Operation by Hash - TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve a Safe operation by its hash using the `apiKit.getSafeOperation` method. It requires the `apiKit` instance to be initialized with the chain ID. The `safeOperationHash` parameter is the hash of the Safe operation to retrieve. The output is a Promise that resolves to a `SafeOperationResponse` object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeOperationHash = '0x...'\n\nconst safeOperation = await apiKit.getSafeOperation(safeOperationHash)\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Minimum Parameters in Protocol Kit (TypeScript)\nDESCRIPTION: Illustrates the most basic usage of the `protocolKit.signTransaction` method, requiring only the `safeTransaction` object as input. The default signing method (`SigningMethod.ETH_SIGN_TYPED_DATA_V4`) will be used implicitly.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst signedSafeTransaction = await protocolKit.signTransaction(\n  safeTransaction\n)\n```\n\n----------------------------------------\n\nTITLE: Calling createChangeThresholdTx (parameter safeTxGas)\nDESCRIPTION: This TypeScript snippet shows an example of how to pass the optional `safeTxGas` parameter to the `createChangeThresholdTx` function. The function sets the gas amount used by the safe. The method returns a Safe transaction object that will update the threshold in the safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createchangethresholdtx.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createChangeThresholdTx(\n  threshold: 3,\n  {\n    safeTxGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Highlighting the `dataHash` Parameter in checkNSignatures Call\nDESCRIPTION: Focuses on the `dataHash` parameter within the `checkNSignatures` function call. This `bytes32` value is the hash of the data (e.g., message hash or transaction hash) against which the signatures are verified.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/signatures/checkNSignatures.mdx#_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\n(ISafe safe).checkNSignatures(\n    0x...,\n    \"0x...\", // dataHash: Hash of the data to verify\n    \"0x...\",\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Calling `domainSeparator` on a Safe Contract in Solidity\nDESCRIPTION: Demonstrates how to retrieve the EIP-712 domain separator from a Safe contract in Solidity. It defines an `ISafe` interface with the `domainSeparator` function and shows an example contract calling this function on a Safe instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/setup/domainSeparator.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function domainSeparator() external view returns (bytes32);\n}\n\ncontract Example {\n    function example() … {\n        (ISafe safe).domainSeparator();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message using Curl\nDESCRIPTION: Makes a POST request to create a new signed message for a Safe account. The message can be a string (using EIP191) or an EIP712 object. The service calculates the hash from the provided message.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction with protocolKit - TypeScript\nDESCRIPTION: This code snippet demonstrates creating a Safe transaction using the `createTransaction` method from the `@safe-global/protocol-kit`.  It takes an array of `MetaTransactionData` objects, allowing batch transactions, and an optional `options` object for gas and other parameters. The `transactions` parameter defines the recipients, value, data, and operation, while the `options` allow to set gas parameters, gas token, refund receiver and nonce. This requires the `@safe-global/protocol-kit`, `@safe-global/types-kit` and a configured `protocolKit` instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SafeTransactionOptionalProps } from '@safe-global/protocol-kit'\nimport { MetaTransactionData, OperationType } from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions,\n  onlyCalls: true, // Optional\n  options // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering for Trusted Transactions in TypeScript\nDESCRIPTION: Example of using the trusted configuration option with getAllTransactions. When set to true, this filters the results to only include trusted transactions (those that are indexed, added by a delegate, or have at least one confirmation).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getalltransactions.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst allTxs = await apiKit.getAllTransactions(\n  safeAddress,\n  {\n    trusted: true\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Owner via Safe Transaction Service API (bash curl)\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of Safe accounts owned by a specific address using the Safe Transaction Service API. It sends a GET request to the `/api/v1/owners/{address}/safes/` endpoint, replacing `{address}` with the desired owner address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). The response is a JSON object containing an array of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_47\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Setting Up Contract Deployments and Safe Configuration with Hardhat in TypeScript\nDESCRIPTION: This code initializes signers and deploys the Safe and ERC1271FallbackHandler contracts before each test using Hardhat. The beforeEach hook acquires signers, deploys contract factories, and configures the Safe contract, setting Alice as the single owner with threshold 1, and installing the fallback handler. It encodes setup parameters, creates a Safe proxy, and retrieves its instance for use in tests. Dependencies are Hardhat, Safe, SafeProxyFactory, ERC1271FallbackHandler contracts, and correct ABI type usage. No direct outputs are produced—this serves as a fixture for subsequent tests.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  // Setup signers and deploy contracts before running tests\n  beforeEach(async () => {\n    [deployer, alice] = await ethers.getSigners();\n\n    safeFactory = await ethers.getContractFactory(\"Safe\", deployer);\n\n    // Deploy the ERC1271FallbackHandler contract\n    exampleFallbackHandler = await (\n      await ethers.getContractFactory(\"ERC1271FallbackHandler\", deployer)\n    ).deploy();\n\n    masterCopy = await safeFactory.deploy();\n\n    proxyFactory = await (\n      await ethers.getContractFactory(\"SafeProxyFactory\", deployer)\n    ).deploy();\n\n    const ownerAddresses = [await alice.getAddress()];\n\n    const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [\n      ownerAddresses,\n      threshold,\n      ZeroAddress,\n      \"0x\",\n      exampleFallbackHandler.target,\n      ZeroAddress,\n      0,\n      ZeroAddress,\n    ]);\n\n    // Read the safe address by executing the static call to createProxyWithNonce function\n    const safeAddress = await proxyFactory.createProxyWithNonce.staticCall(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    // Create the proxy with nonce\n    await proxyFactory.createProxyWithNonce(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    if (safeAddress === ZeroAddress) {\n      throw new Error(\"Safe address not found\");\n    }\n\n    safe = await ethers.getContractAt(\"Safe\", safeAddress);\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing Safe SDK Modules and Types in TypeScript\nDESCRIPTION: Imports the main classes (`SafeApiKit`, `Safe`) and necessary types (`MetaTransactionData`, `OperationType`) from the installed `@safe-global` packages. These imports are essential for utilizing the SDK functionalities to create, propose, confirm, and execute Safe transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\nimport Safe from '@safe-global/protocol-kit'\nimport {\n  MetaTransactionData,\n  OperationType\n} from '@safe-global/types-kit'\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Basic Configuration\nDESCRIPTION: A simple example showing how to send a message with only the required message parameter. This demonstrates the minimal configuration needed for the sendOnChainMessage function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageResult = await safeMessageClient.sendOnChainMessage({\n  message: 'abc'\n})\n```\n\n----------------------------------------\n\nTITLE: Proposing Safe Transaction to Transaction Service in TypeScript\nDESCRIPTION: Prepares the transaction for multi-owner approval by calculating its deterministic hash, signing the hash with the initiating owner's key using the Protocol Kit, and then submitting the transaction data and signature to the Safe Transaction Service using the API Kit's `proposeTransaction` method. This makes the transaction visible and available for other owners to confirm.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Deterministic hash based on transaction parameters\nconst safeTxHash = await protocolKitOwner1.getTransactionHash(safeTransaction)\n\n// Sign transaction to verify that the transaction is coming from owner 1\nconst senderSignature = await protocolKitOwner1.signHash(safeTxHash)\n\nawait apiKit.proposeTransaction({\n  safeAddress,\n  safeTransactionData: safeTransaction.data,\n  safeTxHash,\n  senderAddress: OWNER_1_ADDRESS,\n  senderSignature: senderSignature.data\n})\n```\n\n----------------------------------------\n\nTITLE: Generate Deployment initCode Using `getAccountInitCode` Utility Function\nDESCRIPTION: Calls the `getAccountInitCode` async function to generate the complete initCode for deploying a new Safe account. It integrates the owner address, module addresses, factory, singleton, salt nonce, multisend address, ERC-20 token, and paymaster address to produce the initialization bytecode.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const getAccountInitCode = async ({\n  owner,\n  addModuleLibAddress,\n  safe4337ModuleAddress,\n  safeProxyFactoryAddress,\n  safeSingletonAddress,\n  saltNonce = 0n,\n  multiSendAddress,\n  erc20TokenAddress,\n  paymasterAddress\n}: {\n  owner: Address\n  addModuleLibAddress: Address\n  safe4337ModuleAddress: Address\n  safeProxyFactoryAddress: Address\n  safeSingletonAddress: Address\n  saltNonce?: bigint\n  multiSendAddress: Address\n  erc20TokenAddress: Address\n  paymasterAddress: Address\n}): Promise<Hex> => {\n  if (!owner) throw new Error('Owner account not found')\n\n  const initializer = await getInitializerCode({\n    owner,\n    addModuleLibAddress,\n    safe4337ModuleAddress,\n    multiSendAddress,\n    erc20TokenAddress,\n    paymasterAddress\n  })\n\n  const initCodeCallData = encodeFunctionData({\n    abi: [\n      {\n        inputs: [\n          {\n            internalType: 'address',\n            name: '_singleton',\n            type: 'address'\n          },\n          {\n            internalType: 'bytes',\n            name: 'initializer',\n            type: 'bytes'\n          },\n          {\n            internalType: 'uint256',\n            name: 'saltNonce',\n            type: 'uint256'\n          }\n        ],\n        name: 'createProxyWithNonce',\n        outputs: [\n          {\n            internalType: 'contract SafeProxy',\n            name: 'proxy',\n            type: 'address'\n          }\n        ],\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }\n    ],\n    functionName: 'createProxyWithNonce',\n    args: [\n      safeSingletonAddress,\n      initializer,\n      saltNonce\n    ]\n  })\n  // Returns the concatenation of the SafeProxyFactory address and encoded call data for deployment\n}\n```\n\n----------------------------------------\n\nTITLE: Get Viem Provider and Signer\nDESCRIPTION: This snippet demonstrates how to obtain a provider and signer using the `viem` library.  It initializes a `WalletClient` with `sepolia` chain and an Ankr RPC endpoint.  The `signer` will be the `passkey`, created in the previous step. The provider and signer are used to instantiate the Safe Core SDK kits.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/passkeys.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, http } from 'viem'\nimport { sepolia } from 'viem/chains\n\nconst provider = createWalletClient({\n  chain: sepolia,\n  transport: http('https://rpc.ankr.com/eth_sepolia')\n})\nconst signer = passkey\n```\n\n----------------------------------------\n\nTITLE: Confirm Safe Operation\nDESCRIPTION: This code snippet demonstrates how to confirm a Safe operation using the `safeOperationsClient`. It imports the client from a setup file and calls the `confirmSafeOperation` method with the Safe operation hash. It assumes that the `safeOperationsClient` is already configured and available.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/confirmsafeoperation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeOperationsClient } from './setup.ts'\n\nconst safeOperationResult = await safeOperationsClient.confirmSafeOperation({\n  safeOperationHash: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Delegate with EIP712 Signature in Safe Transaction Service API Using TypeScript, Python, and bash\nDESCRIPTION: Demonstrates adding a new Safe delegate through a POST request to /api/v2/delegates/. A delegate can be added or updated by signing EIP712 structured data, which includes delegate address and a Time-based One-Time Password (TOTP). The Python snippet details the EIP712 data structure required to generate the signature, including domain parameters and message fields. The TOTP uses Unix epoch time divided by 3600 with no decimals. Sample TypeScript and curl commands show the request formation. The API responds with status 202 on acceptance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v2-delegates--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-worldchain.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n```\n\n----------------------------------------\n\nTITLE: Querying Safe Multisig Transactions via API using curl\nDESCRIPTION: Demonstrates how to use curl to send a GET request to the Safe Transaction Service API to retrieve multisig transactions for a specific Safe address (0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75 on Arbitrum). It specifies the `Accept` and `content-type` headers as application/json.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Safe Tx Gas when Creating Enable Module Tx using Protocol Kit (TypeScript)\nDESCRIPTION: Demonstrates how to use the `safeTxGas` option. This parameter allows explicit control over the gas limit designated for the execution of the Safe transaction itself.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createenablemoduletx.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableModuleTx(\n  '0x...',\n  options: {\n    safeTxGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Usage of 'onlyCalls' Parameter - TypeScript\nDESCRIPTION: This code snippet demonstrates the use of the optional `onlyCalls` parameter when calling `createTransaction`.  If set to `true`, it forces the use of the `MultiSendCallOnly` contract.  The `onlyCalls` parameter dictates which contract is used when sending a batch transaction.  Requires a configured Safe instance and `createTransaction` method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction(\n  '0x...',\n  onlyCalls: true\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Empty\nDESCRIPTION: This snippet represents the expected response from the API after a successful safe operation creation.  The response is an empty JSON object indicating success and no body content.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_64\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Delegates Filtered by Label (TypeScript)\nDESCRIPTION: Retrieves the list of delegates that match a specific custom label. This filtering is applied by providing the `label` parameter in the configuration object when calling `getSafeDelegates`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafedelegates.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst delegates = await apiKit.getSafeDelegates({\n  label: 'abc'\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring paymasterOptions.amountToApprove for safeOperations (TypeScript)\nDESCRIPTION: Illustrates the optional `amountToApprove` bigint parameter in `paymasterOptions` for `safeOperations`. This specifies the amount of ERC-20 tokens to approve for the paymaster to cover transaction costs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsafeOperations(\n  { bundlerUrl: 'https://...' },\n  {\n    isSponsored: true,\n    paymasterUrl: 'https://...',\n    sponsorshipPolicyId: 'abc',\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    amountToApprove: 123n\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Invoking swapOwner for newOwner Parameter - Solidity\nDESCRIPTION: This snippet highlights the newOwner input for the swapOwner function in the Safe contract, specifying where to input the new owner's address during the replacement operation. Like the previous cases, it expects three Ethereum addresses representing prevOwner, oldOwner, and newOwner. The snippet must be used with the ISafe interface and an up-to-date contract instance, and has no return value but updates the contract's ownership structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/swapOwner.mdx#_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).swapOwner(\n    0x...,\n    0x...,\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction: TypeScript\nDESCRIPTION: This snippet signs the transaction hash with Owner A using the initialized Protocol Kit. It retrieves the transaction hash and signs it. It requires the Safe address, RPC URL, and Owner A's private key as prerequisites.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Sign the transaction with Owner A\nconst safeTxHash = await protocolKitOwnerA.getTransactionHash(safeTransaction)\nconst signatureOwnerA = await protocolKitOwnerA.signHash(safeTxHash)\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Transaction Array in TypeScript\nDESCRIPTION: Defines an array of transactions with recipient address, data payload, and ETH value, serving as input for Safe transaction execution. Placeholder values are used for demonstration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/react-hooks/guides/send-transactions.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst transactions = [{\n  to: '0x...',\n  data: '0x',\n  value: '0'\n}]\n```\n\n----------------------------------------\n\nTITLE: Specifying the Gas Price (`gasPrice`) for `execTransaction` Fees\nDESCRIPTION: Highlights the `gasPrice` parameter (index 8) within the `execTransaction` function call. This value is used specifically for calculating the fee payment, potentially differing from the network's current gas price for transaction execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0, // gasPrice\n    0x...,\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Sample Successful Safe Operation Response JSON\nDESCRIPTION: This JSON snippet shows an example of the response returned by the Safe Transaction Service API when successfully fetching a Safe Operation. It includes details like creation and modification timestamps, the Safe Operation hash, module address, confirmations, prepared signature, and the associated User Operation object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Multisignature Transaction by Hash via API Endpoint\nDESCRIPTION: This snippet outlines the API route, required parameters, and response schema for obtaining details of a multisignature transaction using its Safe transaction hash. It covers the HTTP method, URL pattern, request headers, and a comprehensive sample JSON response with transaction specifics, confirmations, signatures, and other metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Pending Off-Chain Messages (TypeScript)\nDESCRIPTION: Shows how to fetch the list of pending off-chain messages using the initialized `offchainMessageClient`. This method requires a client configured for off-chain message interactions and returns a paginated list of messages awaiting confirmation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages/getpendingoffchainmessages.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { offchainMessageClient } from './setup.ts'\n\nconst pendingMessages = await offchainMessageClient.getPendingOffChainMessages()\n```\n\n----------------------------------------\n\nTITLE: Initializing GelatoRelayPack Constructor with protocolKit Parameter in JavaScript\nDESCRIPTION: The updated constructor for GelatoRelayPack in v2 now requires a mandatory protocolKit parameter along with the existing apiKey. This parameter is essential for any pack extending the RelayKitBasePack.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/migrate-to-v2.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor({ apiKey, protocolKit }: GelatoOptions)\n```\n\n----------------------------------------\n\nTITLE: Composing App UI in page.tsx - TSX\nDESCRIPTION: This snippet directs replacing the page.tsx content with a code sample that orchestrates all UI components and logic into a functional web app. It handles routing, Safe and passkey logic, and page-level layout. The entry-point file depends on all previously defined components and utilities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// from ../../../../examples/passkeys/app/page.tsx\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for All Safe Transactions\nDESCRIPTION: An example JSON response from the `/api/v1/safes/{address}/all-transactions/` endpoint. It illustrates the structure of the returned data, including pagination fields (`count`, `next`, `previous`) and a `results` array containing detailed objects for each transaction (e.g., multisig transaction details, execution status, confirmations, transfers).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Confirmations with Safe Transaction Service API using Bash\nDESCRIPTION: This bash cURL command retrieves the list of confirmations for a specific multisig transaction using the Safe Transaction Service API. Required dependencies are bash and cURL; no authentication is mentioned but the correct safe_operation_hash must be substituted in the URL. Accepts optional parameters such as limit and offset for pagination, and expects a JSON object response detailing each confirmation (fields include created, modified, owner, signature, and signatureType). The output is the full list of confirmations, paginated, with a potential limitation based on the size of the result set.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Bash - Confirm Multisig Transaction via API (cURL command)\nDESCRIPTION: Sample cURL command to submit a new confirmation signature for a multisignature transaction. Sends an empty JSON payload to the designated POST endpoint with necessary headers, allowing the addition of a signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-arbitrum.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction using curl\nDESCRIPTION: This Bash snippet illustrates how to add a new confirmation to a pending Safe multisig transaction using `curl`. It sends a POST request to the confirmations endpoint, providing the necessary data (typically the signature) in the request body (shown as empty `{}`). This action adds the signature required for the transaction to reach its confirmation threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Initializing the Safe Client in TypeScript\nDESCRIPTION: Shows how to set up the `safeClient` using `createSafeClient` from `@safe-global/sdk-starter-kit`. This requires providing a web3 provider, a signer instance, and the target Safe address. The initialized `safeClient` is then exported for use in other parts of the application, such as confirming transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/confirm.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Confirm Multisig Transaction via API (Bash/cURL)\nDESCRIPTION: Shows a cURL command to send a POST request to the `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` endpoint. This adds a new confirmation (signature) to the pending multisig transaction specified by `safe_tx_hash`. The signature data should be included in the request body (represented as `{}` in the example, actual signature data needed).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Specifying Base Gas when Creating Enable Module Tx using Protocol Kit (TypeScript)\nDESCRIPTION: Shows how to set the `baseGas` option. This parameter accounts for the intrinsic gas cost associated with the transaction's data and structure before execution begins.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createenablemoduletx.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableModuleTx(\n  '0x...',\n  options: {\n    baseGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Final ERC1271FallbackHandler Contract - Solidity\nDESCRIPTION: This Solidity code represents the complete `ERC1271FallbackHandler` contract. It combines the previously defined constants, the `encodeMessageDataForSafe` function, and the `isValidSignature` function to provide EIP-1271 signature validation for Safe Smart Accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: LGPL-3.0\npragma solidity ^0.8.0;\nimport {Safe} from \"@safe-global/safe-contracts/contracts/Safe.sol\";\n\ncontract ERC1271FallbackHandler {\n    // keccak256(\"SafeMessage(bytes message)\");\n    bytes32 private constant SAFE_MSG_TYPEHASH =\n        0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\n\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\n\n    /**\n     * @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\n     * @param safe Safe to which the message is targeted.\n     * @param message Message that should be encoded.\n     * @return Encoded message.\n     */\n    function encodeMessageDataForSafe(\n        Safe safe,\n        bytes memory message\n    ) public view returns (bytes memory) {\n        bytes32 safeMessageHash = keccak256(\n            abi.encode(SAFE_MSG_TYPEHASH, keccak256(message))\n        );\n        return\n            abi.encodePacked(\n                bytes1(0x19),\n                bytes1(0x01),\n                safe.domainSeparator(),\n                safeMessageHash\n            );\n    }\n\n    /**\n     * @notice Implementation of updated EIP-1271 signature validation method.\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\n     * @param _signature Signature byte array associated with _dataHash\n     * @return Updated EIP1271 magic value if signature is valid, otherwise 0x0\n     */\n    function isValidSignature(\n        bytes32 _dataHash,\n        bytes calldata _signature\n    ) external view returns (bytes4) {\n        // Caller should be a Safe\n        Safe safe = Safe(payable(msg.sender));\n        bytes memory messageData = encodeMessageDataForSafe(\n            safe,\n            abi.encode(_dataHash)\n        );\n        bytes32 messageHash = keccak256(messageData);\n        if (_signature.length == 0) {\n            require(safe.signedMessages(messageHash) != 0, \"Hash not approved\");\n        } else {\n            safe.checkSignatures(messageHash, messageData, _signature);\n        }\n        return EIP1271_MAGIC_VALUE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating fallback handler address\nDESCRIPTION: Sets a new fallback handler for the Safe, supported on versions >= v1.1.0. Essential for customizing how the Safe responds to fallback calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nchange_fallback_handler <address>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Context Provider for React\nDESCRIPTION: Wrapping a React application with the DynamicContextProvider to enable Dynamic authentication throughout the app. Requires environment ID and wallet connectors configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/dynamic.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<DynamicContextProvider\n  settings={{\n    environmentId: DYNAMIC_ENVIRONMENT_ID,\n    walletConnectors: [EthereumWalletConnectors],\n    // Add other configuration options as needed\n  }}\n>\n  <App />\n</DynamicContextProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat for Safe Contracts\nDESCRIPTION: Updates the Hardhat configuration file (`hardhat.config.ts`) to set the Solidity compiler version (0.8.28), enable `allowUnlimitedContractSize` for the Hardhat network (required for large Safe contracts), and configure `dependencyCompiler` to compile specific Safe contract paths.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HardhatUserConfig } from \"hardhat/config\";\nimport \"@nomicfoundation/hardhat-toolbox\";\nimport \"hardhat-dependency-compiler\";\n\nconst config: HardhatUserConfig = {\n  solidity: \"0.8.28\",\n  networks: {\n    hardhat: {\n      allowUnlimitedContractSize: true, // Required for Safe contracts\n    },\n  },\n  dependencyCompiler: {\n    paths: [\n      \"@safe-global/safe-contracts/contracts/proxies/SafeProxyFactory.sol\",\n      \"@safe-global/safe-contracts/contracts/Safe.sol\",\n    ],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Type Changes for Gas and Gas Price Parameters\nDESCRIPTION: Advises that parameters like `safeTxGas`, `baseGas`, or `gasPrice` must be set as strings instead of numbers to align with API requirements and avoid type mismatches.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v1.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeTxGas: string = '100000'\nconst baseGas: string = '21000'\nconst gasPrice: string = '20000000000'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Gas Estimation\nDESCRIPTION: Provides an example JSON response showing the estimated 'safeTxGas' value after submitting a gas estimation request. The response helps developers understand the expected output and integrate seamlessly into transaction workflows.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"safeTxGas\": \"42806\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Using createDisableModuleTx with nonce option\nDESCRIPTION: Example showing how to specify the nonce option when creating a transaction to disable a Safe Module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableModuleTx(\n  '0x...',\n  options: {\n    nonce: 123\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Create Smart Account Client for Safe Account with Middleware in TypeScript\nDESCRIPTION: Constructs a smart account client for the Safe, incorporating middleware for dynamic gas pricing and optional sponsorship via a Paymaster to facilitate user operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeAccountClient = createSmartAccountClient({\n  account: safeAccount,\n  entryPoint: ENTRYPOINT_ADDRESS_V06,\n  chain: chain,\n  bundlerTransport: http(`https://api.pimlico.io/v1/${chainName}/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`),\n  middleware: {\n    gasPrice: async () => (await bundlerClient.getUserOperationGasPrice()).fast,\n    sponsorUserOperation: paymasterClient.sponsorUserOperation\n  }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Utility Function to Execute Safe Transactions\nDESCRIPTION: Provides a TypeScript utility function `execTransaction` designed for testing. It constructs a Safe transaction based on provided parameters, generates the transaction hash, collects and sorts signatures from multiple signers, and executes the transaction using the Safe contract's `execTransaction` function. Requires `ethers` and a Safe contract instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"hardhat\";\nimport { Signer, AddressLike, BigNumberish, ZeroAddress } from \"ethers\";\nimport { Safe } from \"../../typechain-types\";\n\n/**\n * Executes a transaction on the Safe contract.\n * @param wallets - The signers of the transaction.\n * @param safe - The Safe contract instance.\n * @param to - The address to send the transaction to.\n * @param value - The value to send with the transaction.\n * @param data - The data to send with the transaction.\n * @param operation - The operation type (0 for call, 1 for delegate call).\n */\nconst execTransaction = async function (\n  wallets: Signer[],\n  safe: Safe,\n  to: AddressLike,\n  value: BigNumberish,\n  data: string,\n  operation: number,\n): Promise<void> {\n  // Get the current nonce of the Safe contract\n  const nonce = await safe.nonce();\n\n  // Get the transaction hash for the Safe transaction\n  const transactionHash = await safe.getTransactionHash(\n    to,\n    value,\n    data,\n    operation,\n    0,\n    0,\n    0,\n    ZeroAddress,\n    ZeroAddress,\n    nonce\n  );\n\n  let signatureBytes = \"0x\";\n  const bytesDataHash = ethers.getBytes(transactionHash);\n\n  // Get the addresses of the signers\n  const addresses = await Promise.all(wallets.map(wallet => wallet.getAddress()));\n  // Sort the signers by their addresses\n  const sorted = wallets.sort((a, b) => {\n    const addressA = addresses[wallets.indexOf(a)];\n    const addressB = addresses[wallets.indexOf(b)];\n    return addressA.localeCompare(addressB, \"en\", { sensitivity: \"base\" });\n  });\n\n  // Sign the transaction hash with each signer\n  for (let i = 0; i < sorted.length; i++) {\n    const flatSig = (await sorted[i].signMessage(bytesDataHash))\n      .replace(/1b$/, \"1f\")\n      .replace(/1c$/, \"20\");\n    signatureBytes += flatSig.slice(2);\n  }\n\n  // Execute the transaction on the Safe contract\n  await safe.execTransaction(\n    to,\n    value,\n    data,\n    operation,\n    0,\n    0,\n    0,\n    ZeroAddress,\n    ZeroAddress,\n    signatureBytes\n  );\n};\n\nexport {\n  execTransaction,\n};\n```\n\n----------------------------------------\n\nTITLE: Calling Safe signedMessages function in Solidity\nDESCRIPTION: This Solidity snippet demonstrates how to call the `signedMessages` view function on a Safe contract instance. It requires defining an interface for the Safe contract (`ISafe`) and provides an example of calling the function with a placeholder message hash (`\"0x...\"`). The function checks if the message hash has been signed by an owner and returns a `uint256` indicating the status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/signatures/signedMessages.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).signedMessages(\"0x...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing SwapOwnerVariables from Safe React Hooks\nDESCRIPTION: Shows how to import the SwapOwnerVariables type from the Safe React Hooks package, which defines the parameters needed to swap an owner in a Safe wallet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/swap.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SwapOwnerVariables } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Supported Tokens via API - Bash\nDESCRIPTION: Provides a `curl` command example to fetch a paginated list of all tokens supported by the Safe Transaction Service. The request is a GET call to the `/api/v1/tokens/` endpoint, demonstrating basic usage with standard headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Collectibles with cURL\nDESCRIPTION: Makes a GET request to fetch paginated ERC721 tokens (collectibles) for a specific Safe account. The response includes details like token address, name, symbol, and metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Formatted Sample JSON Response from Safe Transaction Service API\nDESCRIPTION: This JSON snippet represents a typical response from the Safe Transaction Service API when querying all transactions for a Safe address. It includes comprehensive transaction details such as safe and destination addresses, value transferred, gas details, nonce, execution and submission dates, transaction hashes, proposers and executors, and confirmation signatures. Transfers encapsulate transfer metadata including type, block number, and addresses involved. This sample is essential for understanding the response schema and data structure returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create MetaTransaction Data for Safe\nDESCRIPTION: Define the transaction(s) that will be executed by the Safe. An array of MetaTransactionData objects is created, where each object specifies the target address (`to`), transaction data (`data`), and the value to send (`value`). In this example, a simple value transfer is defined.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a transactions array with one transaction object\nconst transactions: MetaTransactionData[] = [{\n    to: destinationAddress,\n    data: '0x',\n    value: withdrawAmount\n}]\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Confirmations via REST API with Bash curl\nDESCRIPTION: Shows the HTTP GET request using curl to retrieve a paginated list of confirmations associated with a multisig transaction specified by its safe transaction hash. Supports optional query parameters 'limit' and 'offset' for pagination. Expected successful response returns JSON with 'count', 'next', 'previous', and an array of confirmation objects including owner, submissionDate, signature, and signatureType. Error response code 400 indicates invalid input data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n```\n\n----------------------------------------\n\nTITLE: Fetching Safe transaction details in TypeScript\nDESCRIPTION: This snippet demonstrates calling the `getTransaction` method of the `apiKit` instance to retrieve information for a specific Safe transaction. It takes the transaction hash (`safeTxHash`) as input and returns a promise that resolves to the transaction details (`SafeMultisigTransactionResponse`). It depends on an initialized `apiKit` instance, typically imported from a setup file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeTxHash = '0x...'\n\nconst tx = await apiKit.getTransaction(safeTxHash)\n```\n\n----------------------------------------\n\nTITLE: Sample Response - All Transactions for a Safe - JSON\nDESCRIPTION: This JSON snippet represents a sample response from the Safe Transaction Service API when retrieving all transactions for a Safe. It includes metadata such as count, next/previous pagination links, and an array of transaction objects, detailing each transaction's properties, confirmations, and associated transfers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_34\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Safe Transaction Data (TypeScript)\nDESCRIPTION: Creates an array containing transaction objects to be included in the Safe User Operation. Each object defines the target address (`to`), transaction data (`data`), and Ether value (`value`) for a single transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactions = [{\n  to: '0x...',\n  data: '0x',\n  value: '0'\n}]\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Message Using TypeScript, Python, and Curl\nDESCRIPTION: Shows how to create a Safe message from a raw message string. TypeScript initializes Safe protocol with a signer and then creates a Safe message. Python computes an EIP-191 compatible message hash from a raw message string. The Curl request sends a POST request to the Transaction Service API to create a message associated with a Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/messages.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the Protocol Kit with Owner A\nconst protocolKitOwnerA = await Safe.init({\n  provider: config.RPC_URL,\n  signer: config.OWNER_A_PRIVATE_KEY,\n  safeAddress: config.SAFE_ADDRESS\n})\n\nconst rawMessage: string = 'A Safe Message - ' + Date.now()\n\n// Create a Safe message\nconst safeMessage = protocolKitOwnerA.createMessage(rawMessage)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Instantiate a Safe\nethereum_client = EthereumClient(config.get(\"RPC_URL\"))\nsafe = Safe(config.get(\"SAFE_ADDRESS\"), ethereum_client)\n\n# Create a Safe message and get the message hash EIP-191\nraw_message = f\"A Safe Message - {datetime.now()}\"\nmessage_hash = defunct_hash_message(text=raw_message)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n'https://safe-transaction-sepolia.safe.global/api/v1/safes/0xc62C5cbB964459Fffffffffffffffffffff74b2E/messages/' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"message\": \"A Safe Message\",\n    \"signature\": \"0xc8bff3e71314f8b79f6e31ae38c5efba1194e61e8ba6f35742f73af41d95c2fa4118bdfa5df2effffffffffffffffffffe87af26ca7d71e8f008e3bcfc25f1d31c\"\n}'\n```\n\n----------------------------------------\n\nTITLE: React Component Layout Using Material-UI Grid for ERC-7579 Features\nDESCRIPTION: This React component uses Material-UI's Grid to create a responsive layout displaying three cards: Compatibility, User Experience, and Ecosystem. Each card is implemented via a CustomCard component, providing structured presentation of ERC-7579 benefits with titles and descriptions for web interface integration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/overview.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Grid } from '@mui/material'\\nimport CustomCard from '../../../components/CustomCard'\\n\\n// React component rendering a grid of feature cards for ERC-7579 benefits\\n<Grid\\n  container\\n  spacing={2}\\n  display='flex'\\n  alignContent='flex-start'\\n  mt={3}\\n>\\n  <Grid item xs={12} md={4}>\\n    <CustomCard\\n      title={'Compatibility'}\\n      description={'It enables modules to work across different smart accounts.'}\\n      url=\"\"\\n      newTab={false}\\n    />\\n  </Grid>\\n  <Grid item xs={12} md={4}>\\n    <CustomCard\\n      title={'User experience'}\\n      description={'It ensures smart accounts can be used with various wallet applications and SDKs.'}\\n      url=\"\"\\n      newTab={false}\\n    />\\n  </Grid>\\n  <Grid item xs={12} md={4}>\\n    <CustomCard\\n      title={'Ecosystem'}\\n      description={'It helps prevent vendor lock-in for smart account users and application developers.'}\\n      url=\"\"\\n      newTab={false}\\n    />\\n  </Grid>\\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Proposing Transaction to Safe Transaction Service with API Kit (TypeScript)\nDESCRIPTION: Shows how an AI agent can create, sign, and propose a transaction to the Safe Transaction Service using `@safe-global/api-kit`. It utilizes a previously initialized `Safe` instance (`newSafe`) to create the transaction data, calculate its hash, and sign it with the agent's key. The signed transaction data is then submitted to the Safe Transaction Service via the API Kit for review and potential execution by human signers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/human-approval.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nconst apiKit = new SafeApiKit({\n  chainId: 11155111n\n})\n\nconst tx = await newSafe.createTransaction({\n  transactions: [\n    {\n      to: '0x0000000000000000000000000000000000000000',\n      data: '0x',\n      value: '0'\n    }\n  ]\n})\n\n// Every transaction has a Safe (Smart Account) Transaction Hash different than the final transaction hash\nconst safeTxHash = await newSafe.getTransactionHash(tx)\n// The AI agent signs this Safe (Smart Account) Transaction Hash\nconst signature = await newSafe.signHash(safeTxHash)\n\n// Now the transaction with the signature is sent to the Transaction Service with the Api Kit:\nawait apiKit.proposeTransaction({\n  safeAddress: safeAddress,\n  safeTransactionData: tx.data,\n  safeTxHash,\n  senderSignature: signature.data,\n  senderAddress: AGENT_ADDRESS\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering for Executed Transactions in TypeScript\nDESCRIPTION: Example of using the executed configuration option with getAllTransactions. When set to true, this filters the results to only include transactions that have been executed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getalltransactions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst allTxs = await apiKit.getAllTransactions(\n  safeAddress,\n  {\n    executed: true\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Install Safe Protocol Kit Dependency\nDESCRIPTION: This command installs the `@safe-global/protocol-kit` package using yarn, enabling the creation and management of Safe transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @safe-global/protocol-kit\n```\n\n----------------------------------------\n\nTITLE: Generating EIP712 Data Hash for Safe Delegate Creation in Python\nDESCRIPTION: Example of the EIP712 data hash structure needed for delegate creation signature. This includes domain, types and message structure with delegateAddress and TOTP (time-based one-time password).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Transaction Confirmations (JSON)\nDESCRIPTION: This JSON snippet provides an example of the data returned by the API when listing confirmations for a Safe transaction. It includes pagination metadata (count, next, previous) and an array (results) detailing each confirmation with fields like the owner's address, submission timestamp, the signature, and the signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving pending Safe operations using safeOperationsClient\nDESCRIPTION: This snippet demonstrates how to import the 'safeOperationsClient' from a setup module and invoke its 'getPendingSafeOperations' method to fetch the list of pending Safe operations for the current connected account. It requires prior initialization of 'safeOperationsClient' and handles asynchronous data fetching, returning a promise with the list. Dependencies include the Safe-Global SDK setup and connection to a Safe account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/getpendingsafeoperations.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { safeOperationsClient } from './setup.ts'\n\nconst pendingSafeOperations = await safeOperationsClient.getPendingSafeOperations()\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe4337Pack with ethAdapter (Old - v2)\nDESCRIPTION: This code snippet demonstrates the old method of initializing the `Safe4337Pack` in v2 of the Safe Protocol Kit. It uses an `ethAdapter` object, specifically an `EthersAdapter`, which requires an `ethers` instance and a signer or provider.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/migrate-to-v3.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// old\nconst safe4337Pack = await Safe4337Pack.init({\n  ethAdapter: new EthersAdapter({ ethers, signerOrProvider }),\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Pending Transaction: Curl\nDESCRIPTION: This Curl command retrieves a multisig transaction from the Safe transaction service, using the transaction hash. It takes the transaction hash as a parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n'https://safe-transaction-sepolia.safe.global/api/v1/multisig-transactions/0xe4ceea4ffffffffff0c9ce0af82780ffffffffffd3096836fff2528cb90d156/' \\\n-H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: UserOperationReceipt Type Definition\nDESCRIPTION: Defines the `UserOperationReceipt` type, which is the return type of the `getUserOperationReceipt` method. It includes information about the execution of the user operation, such as gas used, gas cost, success status, and logs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nUserOperationReceipt = {\n  userOpHash: string\n  sender: string\n  nonce: string\n  actualGasUsed: string\n  actualGasCost: string\n  success: boolean\n  logs: Log[]\n  receipt: Receipt\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Balances using curl\nDESCRIPTION: This snippet shows how to retrieve the balances for Ether and ERC20 tokens of a given Safe account using a GET request to the `/api/v1/safes/{address}/balances/` endpoint. It expects the Safe address as a path parameter and returns a JSON array containing balance information for each token held by the Safe. It also shows how to include headers for specifying the content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Setting up Safe Provider with configuration in a React application\nDESCRIPTION: Shows how to set up the SafeProvider with appropriate configuration in a React application's entry point. The configuration includes chain, provider, signer, and Safe address details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/swap.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\nimport App from './App.tsx  '\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst root = document.getElementById('root')\n\nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Safe with isL1SafeSingleton Parameter\nDESCRIPTION: This snippet shows connecting to a Safe and specifying `isL1SafeSingleton`.  It requires the `provider`, `signer`, and `safeAddress` and the boolean flag `isL1SafeSingleton`. Requires the `@safe-global/protocol-kit` library. This is relevant for L2 networks and helps selecting the correct Safe contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.connect({\n  provider,\n  signer,\n  safeAddress,\n  isL1SafeSingleton: true\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Confirmation to a Safe Operation with cURL\nDESCRIPTION: This snippet demonstrates how to add a confirmation for a transaction using the POST endpoint. The request requires the safe operation hash as a path parameter and accepts multiple signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zksync.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Setting the Fee Refund Receiver (`refundReceiver`) for `execTransaction`\nDESCRIPTION: Highlights the `refundReceiver` parameter (index 10) within the `execTransaction` function call. This `payable` address receives the gas payment refund. If set to the zero address, the refund typically goes to `tx.origin`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    0x..., // refundReceiver\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data with curl in Bash\nDESCRIPTION: Makes a POST request to decode transaction data using the Safe Transaction Service's internal ABI information. This endpoint helps interpret hexadecimal transaction data into human-readable format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Listing Multisig Confirmations\nDESCRIPTION: Provides an example JSON response containing a paginated list of confirmations for a multisig transaction. The response includes the total count, links for next/previous pages (if applicable), and an array of results, where each result details a confirmation's owner, submission date, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting nonce Option for Remove Owner Transaction (TypeScript)\nDESCRIPTION: Shows how to explicitly set the transaction `nonce` using the optional `options` object when creating a remove owner transaction with `createRemoveOwnerTx`. Specifying a nonce can be necessary for sequence control.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx(\n  {\n    ownerAddress: '0x...'\n  },\n  {\n    nonce: 123 // Optional: Transaction nonce\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit Client for Ethereum Mainnet - TypeScript\nDESCRIPTION: Illustrates creation of a SafeApiKit instance configured for the Ethereum mainnet (chainId 1). This setup is necessary to interact with the Safe Transaction Service to decode transaction data accurately. The instance 'apiKit' is then imported and used in other modules for decoding purposes. Requires @safe-global/api-kit package.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/decodedata.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Usage of 'value' Parameter - TypeScript\nDESCRIPTION: This code snippet demonstrates the use of the `value` parameter within the `transactions` array when creating a Safe transaction. This parameter represents the amount of native tokens to be transferred. It shows how to specify the amount when constructing a transaction. Requires the `createTransaction` method of a configured Safe instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Sample API response structure for module transactions list\nDESCRIPTION: This snippet provides an example JSON response from the API, illustrating the format and data types of transaction details, including creation time, execution date, transaction hash, involved addresses, transaction value, operation type, and success status. It helps in understanding how to parse and utilize the returned data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Safe Address for getNextNonce in TypeScript\nDESCRIPTION: Illustrates how the `safeAddress` parameter, a string representing the target Safe's Ethereum address, is passed to the `apiKit.getNextNonce` function. This parameter is essential for identifying which Safe's nonce is being queried.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getnextnonce.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst nextNonce = await apiKit.getNextNonce(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Singleton Factory Dependency - NPM - Bash\nDESCRIPTION: This command installs the @safe-global/safe-singleton-factory package as a development dependency using npm. It is required for deploying Safe contracts. Dependencies: npm must be installed in your environment. The package version should be compatible with your contracts. Output is updating package.json and installing dependencies in node_modules.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-contracts-deployment.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev @safe-global/safe-singleton-factory\n```\n\n----------------------------------------\n\nTITLE: Sample Contract List Response\nDESCRIPTION: This JSON snippet is an example response when listing contracts. The response includes metadata like `count`, `next`, `previous`, and `results`. The `results` field is an array of contract objects, each containing the contract `address`, `name`, `displayName`, `logoUri`, `contractAbi`, and `trustedForDelegateCall` status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Environment Variable for Pimlico API Key – Bash\nDESCRIPTION: This command creates a .env file and inserts the Pimlico API key as a Nuxt public environment variable. The .env file should be placed at the project root. Replace 'your_pimlico_api_key_goes_here' with your actual API key before running.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/nuxt.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\necho \"NUXT_PUBLIC_PIMLICO_API_KEY='your_pimlico_api_key_goes_here'\" > .env\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Operations using curl\nDESCRIPTION: This bash command demonstrates how to fetch the list of Safe Operations for a specific Safe address using the `curl` utility. It sends a GET request to the Safe Transaction Service API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Changing `estimateGas` Return Type\nDESCRIPTION: Notes that the `estimateGas` method now returns a string instead of a number, aligning with newer Ethereum provider standards and ensuring compatibility for gas estimation results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v1.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst gasEstimate: string = await contract.estimateGas.method(params)\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient for an Existing Safe in TypeScript\nDESCRIPTION: Demonstrates importing and using `createSafeClient` from `@safe-global/sdk-starter-kit` to connect to an existing Safe account. It requires a `provider`, `signer`, and the `safeAddress` of the pre-existing Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/constructor.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response schema for multisig transaction confirmations list\nDESCRIPTION: Example JSON response illustrating the structure of the data returned from the GET confirmations endpoint. It includes pagination information (count, next, previous) and an array of confirmation records, each containing fields such as created and modified timestamps, owner address, signature string, and signature type. This schema helps clients understand the expected data format and types received from the API, facilitating integration and error handling.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing the WebAuthn Credential to createPasskeySigner in TypeScript\nDESCRIPTION: Highlights passing the WebAuthn `credential` object (of type `Credential`) as an argument to the asynchronous `Safe.createPasskeySigner` function. This function returns a promise that resolves to an object containing the necessary signer information (`rawId` and `coordinates`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/passkeys/createpasskeysigner.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst passkeySigner = await Safe.createPasskeySigner(\n  credential\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Smart Account with Protocol Kit\nDESCRIPTION: This snippet demonstrates how to initialize a pre-existing Safe Smart Account using the Safe Protocol Kit. It requires an RPC URL, the AI agent's private key, and the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-actions/ai-agent-swaps-on-uniswap.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from \"@safe-global/protocol-kit\";\n\nconst preExistingSafe = await Safe.init({\n  provider: RPC_URL,\n  signer: AGENT_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe Client Libraries Using npm, yarn, and pnpm Bash Commands\nDESCRIPTION: This snippet shows the installation commands for Stripe's client libraries @stripe/stripe-js and @stripe/crypto using different package managers (npm, yarn, and pnpm). It is a prerequisite step to use Stripe’s onramp widget in the frontend application. The commands must be run in the project directory to add the dependencies before further integration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/stripe.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @stripe/stripe-js @stripe/crypto\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @stripe/stripe-js @stripe/crypto\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @stripe/stripe-js @stripe/crypto\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operation Confirmations with Offset\nDESCRIPTION: This snippet demonstrates how to fetch confirmations for a Safe operation using the `getSafeOperationConfirmations` method with the offset parameter. It shows how to specify the initial index from which to return results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationconfirmations.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst confirmationsResponse = await apiKit.getSafeOperationConfirmations(\n  '0x...',\n  {\n    offset: 50\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Passkey Signer\nDESCRIPTION: This snippet creates a passkey signer using the generated `passkeyCredential`. It uses `Safe.createPasskeySigner` to create a signer object, which is then used to interact with the Safe protocol.  It includes error handling to ensure a credential was returned by checking if `passkeyCredential` exists.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/passkeys.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (!passkeyCredential) {\n  throw Error('Passkey creation failed: No credential was returned.')\n}\n\nconst passkeySigner = await Safe.createPasskeySigner(passkeyCredential)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Safe with contractNetworks Parameter\nDESCRIPTION: This snippet demonstrates connecting to a Safe using the `contractNetworks` parameter, which allows the user to specify the addresses of Safe contracts if they are not deployed on the current network.  It requires a `provider`, a `signer`, `safeAddress` and a correctly configured `contractNetworks` object containing addresses of Safe contracts. Requires the `@safe-global/protocol-kit` library. Only required if Safe contracts aren't deployed on the current network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.connect({\n  provider,\n  signer,\n  safeAddress,\n  contractNetworks: {\n    [chainId]: {\n      safeSingletonAddress: '<SINGLETON_ADDRESS>',\n      safeProxyFactoryAddress: '<PROXY_FACTORY_ADDRESS>',\n      multiSendAddress: '<MULTI_SEND_ADDRESS>',\n      multiSendCallOnlyAddress: '<MULTI_SEND_CALL_ONLY_ADDRESS>',\n      fallbackHandlerAddress: '<FALLBACK_HANDLER_ADDRESS>',\n      signMessageLibAddress: '<SIGN_MESSAGE_LIB_ADDRESS>',\n      createCallAddress: '<CREATE_CALL_ADDRESS>',\n      simulateTxAccessorAddress: '<SIMULATE_TX_ACCESSOR_ADDRESS>',\n      safeWebAuthnSignerFactoryAddress:'<SAFE_WEB_AUTHN_SIGNER_FACTORY_ADDRESS>',\n      safeSingletonAbi: '<SINGLETON_ABI>', // Optional. Only needed with web3.js\n      safeProxyFactoryAbi: '<PROXY_FACTORY_ABI>', // Optional. Only needed with web3.js\n      multiSendAbi: '<MULTI_SEND_ABI>', // Optional. Only needed with web3.js\n      multiSendCallOnlyAbi: '<MULTI_SEND_CALL_ONLY_ABI>', // Optional. Only needed with web3.js\n      fallbackHandlerAbi: '<FALLBACK_HANDLER_ABI>', // Optional. Only needed with web3.js\n      signMessageLibAbi: '<SIGN_MESSAGE_LIB_ABI>', // Optional. Only needed with web3.js\n      createCallAbi: '<CREATE_CALL_ABI>', // Optional. Only needed with web3.js\n      simulateTxAccessorAbi: '<SIMULATE_TX_ACCESSOR_ABI>' // Optional. Only needed with web3.js\n      safeWebAuthnSignerFactoryAbi: '<SAFE_WEB_AUTHN_SIGNER_FACTORY_ABI>' // Optional. Only needed with web3.js\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Encoding WebAuthn Signature Data for Verification - Solidity\nDESCRIPTION: This Solidity example demonstrates how to manually encode signature data for use with the WebAuthn library during signature verification in Safe contracts. Dependencies include Solidity's ABI encoding utilities as well as an established structure for authenticatorData (bytes), clientDataFields (string), and ECDSA signature components (r, s as uint256). Inputs are authenticatorData, clientDataFields, r, and s; the output is a single bytes memory object suitable for contract verification. Callers must ensure the signature bytes match the expected structure of the WebAuthn library. This method is essential for ensuring that the Safe and passkey contract flows process valid, properly structured signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/passkeys-safe.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nbytes authenticatorData = ...;\nstring clientDataFields = ...;\nuint256 r = ...;\nuint256 s = ...;\n// Encode the signature data\nbytes memory signature = abi.encode(authenticatorData, clientDataFields, r, s);\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Custom Nonce\nDESCRIPTION: This example shows how to specify a custom nonce when sending an on-chain message. The nonce is a unique number used to prevent the same transaction from being processed multiple times.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageResult = await safeMessageClient.sendOnChainMessage({\n  message: 'abc',\n  nonce: 5\n})\n```\n\n----------------------------------------\n\nTITLE: CURL Request for Listing Delegates in Safe Transaction Service\nDESCRIPTION: Example CURL command to retrieve a list of delegates from the Safe Transaction Service API on the zkEVM network, returning delegate information in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Deleting a Queued Multisig Transaction (Bash)\nDESCRIPTION: This bash command demonstrates how to delete a queued multi-signature transaction using the DELETE method on the Safe Transaction Service API. It specifies the transaction hash in the URL and includes headers for JSON content. The request body is empty.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-zkevm.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: CURL Request for Retrieving Message Details in Safe Transaction Service\nDESCRIPTION: Example CURL command to get detailed information about a specific message using its hash from the Safe Transaction Service API on the zkEVM network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Confirmations - Bash\nDESCRIPTION: Demonstrates how to retrieve a list of confirmations for a given multisig transaction using a GET request to the Safe Transaction Service API. The request includes the safe transaction hash in the URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Define Transaction Options for Sponsored Gelato 1Balance\nDESCRIPTION: Specify options for the transaction relay. For Gelato 1Balance, the `isSponsored` option is set to `true` to indicate that the transaction fees should be covered by the prepaid deposit in the Gelato 1Balance account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: MetaTransactionOptions = {\n    isSponsored: true\n}\n```\n\n----------------------------------------\n\nTITLE: `getOwners` Function - Returning List of Safe Owners in TypeScript\nDESCRIPTION: This snippet demonstrates how to invoke the `getOwners` method from the Safe protocol kit to retrieve a list of Safe owner addresses. It relies on the `protocolKit` object initialized from the Safe SDK and returns a promise resolving to an array of strings representing owner addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getowners.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst ownerAddresses = await protocolKit.getOwners()\n```\n\n----------------------------------------\n\nTITLE: Creating SafeProvider Configuration with createConfig in TypeScript\nDESCRIPTION: Defines the configuration object for SafeProvider using createConfig, specifying the blockchain chain (sepolia), provider, signer, and the deployed Safe's address. This configuration is required for useUpdateOwners and other safe-react-hooks to connect and operate with the correct Safe instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction via API (Bash)\nDESCRIPTION: Shows how to use `curl` to send a POST request to the Safe Transaction Service API endpoint `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` to add a new confirmation (signature) to a pending multisig transaction. Requires the `safe_tx_hash` and the signature data in the request body (though the example shows `-d '{}'`, the actual request requires a body like `{\"signature\": \"0x...\"}`). This endpoint does not support delegate confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Querying Safe Multisig Transactions via HTTP (bash)\nDESCRIPTION: This cURL command demonstrates how to perform an HTTP GET request to the Safe Transaction Service API to retrieve multisig transactions for a specific Safe address. It sends the request to the provided endpoint URL with necessary Accept and Content-Type headers to specify the desired response format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Incoming Transfers via cURL (Bash)\nDESCRIPTION: Demonstrates how to use the `curl` command to send a GET request to the Safe Transaction Service API to retrieve a list of incoming transfers for a specific Safe address (0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75 on Optimism). The request specifies the acceptance of JSON responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Explanation of `initCode` for Deploying ERC-4337 Smart Account\nDESCRIPTION: Describes how the `initCode` encodes instructions for deploying a Safe smart account. It is generated using `getAccountInitCode`, which combines the SafeProxyFactory address and call data to create a deploy transaction. Useful when creating new accounts with specific initialization parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst initCode = await getAccountInitCode({\n  owner: signer.address,\n  addModuleLibAddress: ADD_MODULE_LIB_ADDRESS,\n  safe4337ModuleAddress: SAFE_4337_MODULE_ADDRESS,\n  safeProxyFactoryAddress: SAFE_PROXY_FACTORY_ADDRESS,\n  safeSingletonAddress: SAFE_SINGLETON_ADDRESS,\n  saltNonce,\n  multiSendAddress: SAFE_MULTISEND_ADDRESS,\n  erc20TokenAddress: USDC_TOKEN_ADDRESS,\n  paymasterAddress: ERC20_PAYMASTER_ADDRESS\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a confirmation to a multisig transaction using Safe Transaction API with bash\nDESCRIPTION: Performs a POST request to add a confirmation for a specific multisig transaction identified by the safe_operation_hash path parameter. This endpoint supports multiple signatures but does not allow delegates to make a transaction trusted. The request body should contain the confirmation details in JSON format. The endpoint returns HTTP status codes indicating success (201 Created), malformed input (400), or processing errors (422). Dependencies include proper authorization and valid transaction data format for the confirmation. Expected input is the safe operation hash path parameter and a JSON payload in the request body; the output is an empty response body on success.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-linea.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Executing a Token Swap with CoW Swap SDK via Safe Smart Account\nDESCRIPTION: Demonstrates how to use the CoW Swap SDK to create a swap order, generate a pre-sign transaction, and execute it through a Safe Smart Account. This example swaps WETH for COW tokens on the Sepolia network with autonomous signing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-actions/ai-agent-swaps-with-cow-swap.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SwapAdvancedSettings,\n  TradeParameters,\n  TradingSdk,\n  SupportedChainId,\n  OrderKind,\n  SigningScheme,\n} from \"@cowprotocol/cow-sdk\";\nimport { VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\n\nconst traderParams = {\n  chainId: SupportedChainId.SEPOLIA,\n  signer: new VoidSigner(\n    smartContractWalletAddress: SAFE_ADDRESS,\n    new JsonRpcProvider(\"https://sepolia.gateway.tenderly.co\")\n  ),\n  appCode: \"awesome-app\",\n};\n\nconst cowSdk = new TradingSdk(traderParams, { logs: false });\n\nconst parameters: TradeParameters = {\n  kind: OrderKind.SELL,\n  sellToken: WETH_ADDRESS,\n  sellTokenDecimals: 18,\n  buyToken: COW_ADDRESS,\n  buyTokenDecimals: 18,\n  amount: INPUT_AMOUNT,\n};\n\nconst advancedParameters: SwapAdvancedSettings = {\n  quoteRequest: {\n  // Specify the signing scheme\n  signingScheme: SigningScheme.PRESIGN,\n  },\n};\n\nconst orderId = await cowSdk.postSwapOrder(parameters, advancedParameters);\n\nconsole.log(`Order ID: [${orderId}]`);\n\nconst preSignTransaction = await cowSdk.getPreSignTransaction({\n  orderId,\n  account: smartContractWalletAddress,\n});\n\nconst customChain = defineChain({\n  ...sepolia,\n  name: \"custom chain\",\n  transport: http(RPC_URL),\n});\n\nconst publicClient = createPublicClient({\n  chain: customChain,\n  transport: http(RPC_URL),\n});\n\nconst safePreSignTx: MetaTransactionData = {\n  to: preSignTransaction.to,\n  value: preSignTransaction.value,\n  data: preSignTransaction.data,\n  operation: OperationType.Call,\n};\n\nconst safeTx = await preExistingSafe.createTransaction({\n  transactions: [safePreSignTx],\n  onlyCalls: true,\n});\n\n// You might need to collect more signatures here\n\nconst txResponse = await preExistingSafe.executeTransaction(safeTx);\nconsole.log(`Sent tx hash: [${txResponse.hash}]`);\nconsole.log(\"Waiting for the tx to be mined\");\nawait publicClient.waitForTransactionReceipt({\n  hash: txResponse.hash as `0x${string}`,\n});\n```\n\n----------------------------------------\n\nTITLE: Encoding Transaction Data Using ISafe in Solidity\nDESCRIPTION: Defines the ISafe interface with the encodeTransactionData function and demonstrates its usage within a sample contract. The encodeTransactionData method requires several key parameters, including destination, value, transaction data, operation type, gas settings, gas price, gas token, refund receiver, and nonce. This function returns ABI-encoded transaction data (bytes) suitable for use with execTransaction. Usage requires importing the ISafe interface and correctly formatting all input parameters based on transaction intent. The example assumes access to an ISafe instance and predefined addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/encodeTransactionData.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function encodeTransactionData(\n        address to,\n        uint256 value,\n        bytes data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external view returns (bytes);\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).encodeTransactionData(\n            0x...,\n            0,\n            \"0x...\",\n            Enum.Operation.Call,\n            100000,\n            0,\n            0,\n            0x...,\n            0x...,\n            1\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing the Safe Migration Transaction (TypeScript)\nDESCRIPTION: Uses the initialized Safe Protocol Kit instance (`preExistingSafe`) to first create a Safe transaction object (`safeTransaction`) containing the prepared `safeTransactionData`. It then executes this transaction on the blockchain using `preExistingSafe.executeTransaction(safeTransaction)`. Finally, it initializes a `viem` public client and waits for the transaction to be confirmed using `publicClient.waitForTransactionReceipt`, logging progress and the final transaction hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n  // Create and execute transaction\n  const safeTransaction = await preExistingSafe.createTransaction({\n    transactions: [safeTransactionData],\n  });\n\n  console.log(\n    `Executing migration method [${migrationMethod}] using Safe [${SAFE_ADDRESS}]`\n  );\n\n  const result = await preExistingSafe.executeTransaction(safeTransaction);\n\n  const publicClient = createPublicClient({\n    transport: http(RPC_URL),\n  });\n\n  console.log(`Transaction hash [${result.hash}]`);\n\n  await publicClient.waitForTransactionReceipt({\n    hash: result.hash as `0x${string}`,\n  });\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Transactions with Safe-CLI\nDESCRIPTION: Defines the command to send a custom transaction or perform a delegate call from a Safe account to a contract. It requires parameters like Safe address, network URL, destination address, transaction value, and data payload. Optional parameters include private keys, nonce, delegate call mode, and interactivity toggle, enabling scripting and automation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/unattended-commands.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsafe-cli send-custom [OPTIONS] SAFE_ADDRESS NODE_URL TO VALUE DATA\n\n╭─ Arguments ──────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ *    safe_address      CHECKSUMADDRESS  The address of the Safe. [required]                                  │\n│ *    node_url          TEXT             Ethereum node url. [required]                                        │\n│ *    to                CHECKSUMADDRESS  The address of destination. [required]                               │\n│ *    value             INTEGER          Value to send. [required]                                            │\n│ *    data              HEXBYTES         HexBytes data to send. [required]                                    │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Options ────────────────────────────────────────────────────────────────────────────────────────────────────╮\n│ --private-key                         TEXT     List of private keys of signers.                              │\n│ --safe-nonce                          INTEGER  Force nonce for tx_sender                                     │\n│ --delegate       --no-delegate                 Use DELEGATE_CALL. By default use CALL [default: no-delegate] │\n│ --interactive    --non-interactive             Enable/disable interactive mode.                            │\n╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Extending SafeClient with On-Chain Messages in TypeScript\nDESCRIPTION: This snippet demonstrates how to extend an existing SafeClient instance with on-chain messaging capabilities using the onChainMessages extension from the @safe-global/sdk-starter-kit package. It requires a previously initialized safeClient object and imports both the extension and client. The resulting onchainMessagesClient adds methods for sending on-chain messages. This approach depends on correctly setting up a SafeClient and having access to the extension package; limitations include prerequisite client configuration and access to a compatible Safe smart contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onChainMessages } from '@safe-global/sdk-starter-kit'\nimport { safeClient } from './setup.ts'\n\nconst onchainMessagesClient = safeClient.extend(onChainMessages())\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Confirmations using curl (Bash)\nDESCRIPTION: This curl command sends a GET request to the Safe Transaction Service API endpoint `/api/v1/safe-operations/{safe_operation_hash}/confirmations/` to fetch the list of confirmations associated with the specified `safe_operation_hash`. It includes standard headers for accepting JSON responses. Pagination can be controlled using optional `limit` and `offset` query parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Getting Provider and Signer using Viem with Web3Auth\nDESCRIPTION: Code to obtain the wallet client (provider) and signer address using the Viem library with the authenticated Web3Auth provider.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/web3auth.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { sepolia } from 'viem/chains'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = createWalletClient({\n  chain: sepolia,\n  transport: custom(web3authProvider)\n})\n\nconst signer = await provider.getAddresses())[0]\n```\n\n----------------------------------------\n\nTITLE: Listing Tokens with cURL\nDESCRIPTION: This code snippet provides an example of how to use cURL to retrieve the list of supported tokens using the Safe Transaction Service API. It makes a GET request to the /api/v1/tokens/ endpoint and uses appropriate headers.  The response is paginated and includes various token details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_79\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Querying Safe Balances - Safe Transaction Service - Bash (curl)\nDESCRIPTION: This Bash snippet demonstrates querying the balances (ETH and ERC20 tokens) of a Safe wallet on the Safe Transaction Service using curl. Requires curl and endpoint access. The endpoint supports query parameters for trusted tokens, spam exclusion, limit (max 200), and pagination offset. Input is the Safe address; output is a paginated JSON array with token addresses, balance values, and token metadata where applicable. Errors such as invalid addresses or missing Safes return descriptive error codes. Useful for automated health checks or wallet dashboards.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Loading owners from private key or environment\nDESCRIPTION: Loads Safe owners into the CLI session from a private key or environment variable, establishing the default sender for transactions. Ensures control over Safe operations and is essential for signing transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nload_cli_owners <your_private_key_or_env_var>\n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data via Safe Transaction Service API using cURL\nDESCRIPTION: Sends a POST request using cURL to the `/api/v1/data-decoder/` endpoint to decode transaction data. The request body should contain the transaction `data` as a '0x' prefixed hexadecimal string and optionally the `to` address for better accuracy with ABI collisions. The response is a JSON object containing the decoded method name and parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/blast/-v1-data-decoder--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-blast.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit in TypeScript\nDESCRIPTION: Shows how to initialize the `SafeApiKit` from the `@safe-global/api-kit` package. This setup creates an `apiKit` instance configured for a specific blockchain network (Mainnet, `chainId: 1n` in this example), which is required before calling API methods like `getModuleTransactions`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmoduletransactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies: TypeScript\nDESCRIPTION: This snippet installs the necessary dependencies for interacting with Safe in a TypeScript environment using yarn. It includes packages for API interaction, protocol functionality, and type definitions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/api-kit @safe-global/protocol-kit @safe-global/types-kit\n```\n\n----------------------------------------\n\nTITLE: Estimate Gas Costs API Request (curl)\nDESCRIPTION: This `curl` command estimates gas costs for a multi-signature transaction.  It targets the `estimations` endpoint of the Safe API, taking the Safe address as part of the path.  It also includes standard headers. The expected output is `safeTxGas`, containing the estimated gas consumption.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference React Component with Network Name in JSX\nDESCRIPTION: This JSX snippet renders the ApiReference component with a single prop 'networkName' set to the string 'mantle'. It is likely used as part of the overall API documentation UI for the Mantle network. No dependencies beyond React and the imported ApiReference component are required. There are no input parameters beyond the hardcoded prop. The component output is a UI element representing the API reference for the specified network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/mantle.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference networkName=\"mantle\"/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe User Operations using cURL\nDESCRIPTION: This snippet shows how to perform a GET request to the Safe Transaction Service API to retrieve the list of UserOperations for a specific Safe account. It includes necessary headers to specify the expected content types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Transaction with Safe API in TypeScript and Bash\nDESCRIPTION: Defines the API endpoint to create a multisignature transaction for a specified Safe address, including confirmed multisig transaction details. Requires a Safe address parameter in the path and expects a POST request with transaction data. The response returns detailed multisig transaction properties such as gas, signatures, and operation info. Dependencies include the Safe transaction service and appropriate JSON schema compliance. Example usage shows a curl command posting an empty JSON body to the API, illustrating basic interaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Building Migration Transaction Calldata (TypeScript)\nDESCRIPTION: Constructs the necessary data for the Safe transaction. It first encodes the function call data (`calldata`) for the selected `migrationMethod` using `viem`'s `encodeFunctionData` and the parsed ABI. Then, it creates the `MetaTransactionData` object, setting the `to` field to the `SafeMigration` contract address, `value` to \"0\", `data` to the encoded `calldata`, and crucially, `operation` to `OperationType.DelegateCall`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n  // Build calldata for the migration\n  const calldata = encodeFunctionData({\n    abi: ABI,\n    functionName: migrationMethod,\n  });\n\n  const safeTransactionData: MetaTransactionData = {\n    to: SAFE_MIGRATION_CONTRACT_ADDRESS,\n    value: \"0\",\n    data: calldata,\n    operation: OperationType.DelegateCall,\n  };\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for a Safe Multisig Transaction via API (curl)\nDESCRIPTION: Uses curl to send a POST request to the `/api/v1/safes/{address}/multisig-transactions/estimations/` endpoint. This call estimates the `safeTxGas` for a potential multisig transaction based on the details provided in the request body (shown as empty '{}' here). Requires 'Accept' and 'content-type' headers set to 'application/json'. A successful request returns the estimated gas (status code 200).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Statement for Safe Transactions Examples\nDESCRIPTION: This snippet references the import of a TypeScript file containing examples for handling Safe transactions on the Optimism network, indicating the code's focus on demonstrating transaction retrieval and processing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Delete Delegate Sample Response\nDESCRIPTION: Indicates successful removal with an empty response body; error responses cover malformed data, delegate not found, or invalid address issues.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Getting Signed Transaction and Confirmations\nDESCRIPTION: This code snippet retrieves a Safe transaction from the Safe Transaction Service using its hash and then accesses the confirmations associated with the transaction. This allows verification that all the required signatures have been added before execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the transactions\nconst signedTransaction = await apiKit.getTransaction(safeTransactionHash)\n\n// Get the confirmations\nconst confirmations = signedTransaction.confirmations\n```\n\n----------------------------------------\n\nTITLE: Setting the threshold Parameter\nDESCRIPTION: Shows how to use the optional threshold parameter to change the signing requirements when adding a new owner. The threshold defines how many owners must approve transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createaddownertransaction.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await safeClient.createAddOwnerTransaction({\n  ownerAddress: '0x...',\n  threshold: 2\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Add Owner Transactions Using Passkey in TypeScript\nDESCRIPTION: This code snippet shows how to create a Safe transaction to add a new owner using passkey credentials. It demonstrates importing passkey-related types and using a passkey object containing rawId and coordinates as part of the transaction parameters. The optional threshold parameter customizes the Safe's threshold. Optional transaction gas parameters can also be passed. The output is a promise resolving to a SafeTransaction that adds the passkey owner.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createaddownertx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AddPasskeyOwnerTxParams,\n  PasskeyArgType,\n  SafeTransactionOptionalProps\n} from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst passkey: PasskeyArgType = {\n  rawId,\n  coordinates\n}\n\nconst params: AddPasskeyOwnerTxParams = {\n  passkey,\n  threshold: 2 // Optional\n}\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createAddOwnerTx(\n  params,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction - Curl\nDESCRIPTION: This `curl` command sends a POST request to the Safe transaction service API to create a multi-signature transaction.  It specifies the `Accept` and `content-type` headers, and provides an empty JSON payload.  The `address` parameter in the URL targets a specific Safe account. The command constructs and sends an HTTP POST request to create a multisig transaction and shows the expected endpoint usage.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Defining ISafe Interface in Solidity\nDESCRIPTION: This snippet defines the ISafe interface with the getThreshold function, which returns the threshold of a Safe account. It serves as a prerequisite for interacting with Safe contracts in Solidity. The interface must be implemented or used by contracts that need to call getThreshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/getThreshold.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function getThreshold() external view returns (uint256);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Multisig Transaction via API (Bash)\nDESCRIPTION: Demonstrates how to use `curl` to send a DELETE request to the Safe Transaction Service API endpoint `/api/v1/multisig-transactions/{safe_tx_hash}/` to remove a queued transaction. Requires the `safe_tx_hash` of the transaction to be deleted and appropriate authorization (proposer or delegate signature based on a signed EIP-712 message, which is implicitly validated by the service). The request body is empty (`-d '{}'`) as the authorization relies on the signature provided separately.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-aurora.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Smart Account with Protocol Kit\nDESCRIPTION: Sets up a connection to a pre-existing Safe Smart Account using the Protocol Kit. Requires a provider URL, the agent's private key for signing, and the Safe account address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-actions/ai-agent-swaps-with-cow-swap.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from \"@safe-global/protocol-kit\";\n\nconst preExistingSafe = await Safe.init({\n  provider: RPC_URL,\n  signer: AGENT_PRIVATE_KEY,\n  safeAddress: SAFE_ADDRESS,\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Status\nDESCRIPTION: This code snippet shows how to fetch the status of a Safe account using a GET request to the `/api/v1/safes/{address}/` endpoint.  The address parameter is required. The response includes details like address, nonce, threshold, owners, masterCopy, modules, fallbackHandler, guard, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Signing a Message Hash Using Safe Transaction Service - cURL Bash\nDESCRIPTION: This cURL example demonstrates how to sign a message by POSTing to the Safe Transaction Service using a specific message hash. It requires the message hash as a path parameter and accepts JSON payloads. On success, it returns a 201 Created response, typically with empty content. No authentication is shown, but authorization may be required by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zksync.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Predicting a Safe Address (v4 vs v5) in TypeScript\nDESCRIPTION: Compares the methods for predicting a Safe address before deployment in v4 and v5 of the Safe Protocol Kit. The v4 approach used `safeFactory.predictSafeAddress`, while the v5 approach uses `protocolKit.getAddress` after initializing the `Safe` class with `PredictedSafeProps`. This prediction is possible for Safe versions `v1.3.0` and above.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v5.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// old v4 code\nconst predictedSafeAddress = await safeFactory.predictSafeAddress(\n  safeAccountConfig,\n  saltNonce  // optional\n)\n\n// new v5 code\nconst predictedSafeAddress = await protocolKit.getAddress()\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol Kit with Deployed Safe in TypeScript\nDESCRIPTION: Initializes the Safe Protocol Kit instance with an already deployed Safe account using the `safeAddress` parameter. Requires passing an EIP-1193 compatible provider or RPC URL, a signer (which can be an address, private key, or passkey object), and optionally flags like `isL1SafeSingleton` and `contractNetworks`. Returns a Promise resolving to the initialized Protocol Kit Safe instance. This approach assumes the Safe account is already deployed on the blockchain.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/init.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nconst protocolKit = await Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...',\n  isL1SafeSingleton: true, // Optional\n  contractNetworks // Optional\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKit = await Safe.init({\n  provider: 'https://eth-sepolia.public.blastapi.io',\n  signer,\n  safeAddress: '0x...'\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKit = await Safe.init({\n  provider: window.ethereum,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKit = await Safe.init({\n  provider,\n  signer: '0x...',\n  safeAddress: '0x...'\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKit = await Safe.init({\n  provider,\n  signer: {\n    rawId: 'abc',\n    coordinates: { x: '123', y: '123' }\n  },\n  safeAddress: '0x...'\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKit = await Safe.init({\n  provider,\n  signer,\n  safeAddress,\n  isL1SafeSingleton: true\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst protocolKit = await Safe.init({\n  provider,\n  signer,\n  safeAddress,\n  contractNetworks: {\n    [chainId]: {\n      safeSingletonAddress: '<SINGLETON_ADDRESS>',\n      safeProxyFactoryAddress: '<PROXY_FACTORY_ADDRESS>',\n      multiSendAddress: '<MULTI_SEND_ADDRESS>',\n      multiSendCallOnlyAddress: '<MULTI_SEND_CALL_ONLY_ADDRESS>',\n      fallbackHandlerAddress: '<FALLBACK_HANDLER_ADDRESS>',\n      signMessageLibAddress: '<SIGN_MESSAGE_LIB_ADDRESS>',\n      createCallAddress: '<CREATE_CALL_ADDRESS>',\n      simulateTxAccessorAddress: '<SIMULATE_TX_ACCESSOR_ADDRESS>',\n      safeWebAuthnSignerFactoryAddress:'<SAFE_WEB_AUTHN_SIGNER_FACTORY_ADDRESS>',\n      safeSingletonAbi: '<SINGLETON_ABI>',\n      safeProxyFactoryAbi: '<PROXY_FACTORY_ABI>',\n      multiSendAbi: '<MULTI_SEND_ABI>',\n      multiSendCallOnlyAbi: '<MULTI_SEND_CALL_ONLY_ABI>',\n      fallbackHandlerAbi: '<FALLBACK_HANDLER_ABI>',\n      signMessageLibAbi: '<SIGN_MESSAGE_LIB_ABI>',\n      createCallAbi: '<CREATE_CALL_ABI>',\n      simulateTxAccessorAbi: '<SIMULATE_TX_ACCESSOR_ABI>',\n      safeWebAuthnSignerFactoryAbi: '<SAFE_WEB_AUTHN_SIGNER_FACTORY_ABI>'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Highlighting the `signatures` Parameter in checkNSignatures Call\nDESCRIPTION: Focuses on the `signatures` parameter within the `checkNSignatures` function call. This `bytes` field contains the signature data to be verified, which can be packed ECDSA signatures, contract signatures compliant with EIP-1271, or an approved hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/signatures/checkNSignatures.mdx#_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\n(ISafe safe).checkNSignatures(\n    0x...,\n    \"0x...\",\n    \"0x...\", // signatures: Signature data (packed ECDSA, EIP-1271, approved hash)\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Sample response for listing transfers from GET /api/v1/safes/{address}/transfers/\nDESCRIPTION: This JSON sample illustrates the structure of a successful response containing the transfer count and an array of transfer objects, each detailing transfer type, execution date, block number, transaction hash, recipient, value, and associated token info. It also shows pagination properties like 'next' and 'previous'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create ERC1271FallbackHandler Contract - Solidity\nDESCRIPTION: This Solidity code defines the basic structure of the `ERC1271FallbackHandler` contract. It specifies the Solidity compiler version, imports the `Safe` contract from `@safe-global/safe-contracts`, and declares an empty contract named `ERC1271FallbackHandler`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: LGPL-3.0\npragma solidity ^0.8.0;\nimport {Safe} from \"@safe-global/safe-contracts/contracts/Safe.sol\";\n\ncontract ERC1271FallbackHandler {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe4337Pack for New Safe Account in TypeScript\nDESCRIPTION: Initializes the Safe4337Pack instance to create a new Safe account with a specified owner and threshold. This involves connecting the signer and provider, specifying the bundler URL (using Pimlico), and optionally setting the Safe module version to support Entrypoint v0.7. Additional options for on-chain analytics tracking can also be included. This configuration deploys a new Safe account during the first transaction submission.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safe4337Pack = await Safe4337Pack.init({\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  bundlerUrl: `https://api.pimlico.io/v2/11155111/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`,        \n  // safeModulesVersion: '0.3.0', // Defaults to 0.2.0. If you are using the v0.7 of the EntryPoint set the value to '0.3.0'\n  options: {\n    owners: [SIGNER_ADDRESS],\n    threshold: 1\n  },\n  onchainAnalytics // Optional\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Swap Owner Transaction with New Owner Passkey in TypeScript\nDESCRIPTION: Illustrates how to create a Safe transaction to replace an owner by using a passkey object for the new owner instead of a direct address. This variant uses the PasskeyArgType to supply biometric or cryptographic key data for ownership transfer. It requires the Safe Protocol Kit, appropriately initialized protocolKit instance, and includes optional transaction property parameters similar to the address-based approach. This example highlights the flexible way of specifying ownership changes using cryptographic passkeys.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createswapownertx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SwapOwnerTxParams,\n  PasskeyArgType,\n  SafeTransactionOptionalProps\n} from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst newOwnerPasskey: PasskeyArgType = {\n  rawId,\n  coordinates\n}\n\nconst params: SwapOwnerTxParams = {\n  oldOwnerAddress,\n  newOwnerPasskey\n}\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createSwapOwnerTx(\n  params,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Safe API\nDESCRIPTION: This snippet shows how to install the necessary dependencies for interacting with the Safe API using either TypeScript or Python. For TypeScript, it installs the @safe-global/api-kit package using yarn.  For Python, it uses pip to install the safe-eth-py and web3 packages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/data-decoder.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/api-kit\n```\n\n----------------------------------------\n\nTITLE: Creating a New Delegate API Endpoint and Sample Request\nDESCRIPTION: Defines the POST endpoint for adding a new delegate with an optional label. Requires signature generation via EIP712 data hash, using TOTP for time-based one-time password. Dependencies include domain-specific signing process and API response handling. Sample cURL command demonstrates request structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Safe with ERC-4337 using TypeScript\nDESCRIPTION: Demonstrates how to use the `Safe4337Module` from `@safe-global/protocol-kit` to enable ERC-4337 support for a Safe account. It shows enabling the module, creating a user operation (UserOp) with transaction details (target, value, data), and preparing it for submission to an ERC-4337 bundler. Requires `@safe-global/protocol-kit` and an ethers provider.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx.txt#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Using Safe with ERC-4337\nimport { Safe4337Module } from '@safe-global/protocol-kit'\n\n// Add the 4337 module to a Safe\nconst safe4337Module = new Safe4337Module(...)\nawait safeSdk.enableModule(safe4337Module.getAddress())\n\n// Create a user operation\nconst userOp = await safe4337Module.createUserOp({\n  target: '0x...',\n  value: ethers.utils.parseEther('0.1').toString(),\n  data: '0x'\n})\n\n// Submit the user operation to a bundler\nconst userOpHash = await bundler.sendUserOperation(userOp)\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Creation Status using Safe Transaction API Get Endpoint in TypeScript and Bash\nDESCRIPTION: This snippet demonstrates the usage of the GET /api/v1/safes/{address}/creation/ endpoint to obtain detailed information about the creation transaction of a Safe identified by its Ethereum address. Dependencies include an accessible Safe Transaction Service API. The path parameter \"address\" is required and represents the Safe's Ethereum address. The response includes creation metadata such as creator address, transaction hash, factory and master copy addresses, setup data, and optionally decoded setup data and user operation details. Limitations include potential inaccuracies if multiple Safes are deployed in the same Ethereum transaction when event indexing is enabled. The snippet includes an example TypeScript comment reference and a curl command showing how to call the endpoint with appropriate headers. The sample JSON response provides a real-world data structure for interpretation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/arbitrum/-v1-safes-{address}-creation--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-06-25T11:18:48Z\",\n  \"creator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"transactionHash\": \"0x6404e0298423c092cc1ce486f3f72172a1c0f2f28a9b29f69e605ea825360ac5\",\n  \"factoryAddress\": \"0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC\",\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"setupData\": \"0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000017062a1de2fe6b99be3d9d37841fed19f5738040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d3debaab2b8093e69109f23a75501f864f74e20000000000000000000000003a16e3090e32dded2250e862b9d5610bef13e93d0000000000000000000000000000000000000000000000000000000000000000\",\n  \"dataDecoded\": {\n    \"method\": \"setup\",\n    \"parameters\": [\n      {\n        \"name\": \"_owners\",\n        \"type\": \"address[]\",\n        \"value\": [\n          \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n        ]\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"value\": \"0x\"\n      },\n      {\n        \"name\": \"fallbackHandler\",\n        \"type\": \"address\",\n        \"value\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"payment\",\n        \"type\": \"uint256\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"paymentReceiver\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      }\n    ]\n  },\n  \"userOperation\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Explicit Signing Method in Protocol Kit (TypeScript)\nDESCRIPTION: Shows how to sign a `SafeTransaction` while explicitly specifying the `signingMethod` using the `SigningMethod` enum. This allows choosing different signature types like `ETH_SIGN` or specific typed data versions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtransaction.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst signedSafeTransaction = await protocolKit.signTransaction(\n  safeTransaction,\n  SigningMethod.ETH_SIGN_TYPED_DATA_V4\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction to Change Threshold - Example\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `createChangeThresholdTx` method from the `@safe-global/protocol-kit` library.  It shows an example of how to call the function, passing in the new threshold value and optional parameters for gas settings. This example showcases setting optional parameters like `safeTxGas`, `baseGas`, `gasPrice`, `gasToken`, `refundReceiver`, and `nonce` to customize the Safe transaction. It uses a pre-defined `protocolKit` instance initialized with required dependencies.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createchangethresholdtx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SafeTransactionOptionalProps } from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\nconst safeTransaction = await protocolKit.createChangeThresholdTx(\n  threshold: 3,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Ether and ERC20 Balances with Safe Transaction API GET Endpoint in Bash\nDESCRIPTION: This snippet illustrates how to use the GET /api/v2/safes/{address}/balances/ endpoint to fetch paginated balances of Ether (native coin) and ERC20 tokens held by a Safe. Required path parameter \"address\" specifies the target Safe's Ethereum address. Optional query parameters include \"trusted\" to filter for trusted tokens only, \"exclude_spam\" to exclude spam tokens, \"limit\" for number of results per page (max 200), and \"offset\" for pagination start index. The example shows a curl request with relevant headers and a sample JSON response including native coin balance and multiple token balances with metadata. The snippet assumes a connection to the Safe Transaction Service API and that the Safe exists. Error responses indicate checksum verification failures or if Safe is not found.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for Multisig Transaction with Safe API in Bash\nDESCRIPTION: Defines the API endpoint used to estimate the required gas (`safeTxGas`) for executing a multisignature transaction associated with a Safe account. This requires a Safe address as a path parameter and uses a POST request to submit transaction data for gas estimation. The API responds with the estimated gas value or errors if the input data is invalid or the Safe is not found. The example includes a curl command showing how to request this estimation from the service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Safe Client in TypeScript\nDESCRIPTION: This snippet shows how to set up and initialize a Safe client using the SDK starter kit. It requires a provider, signer, and the target Safe's address to establish a connection.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getnonce.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Confirming a Multisig Transaction with cURL\nDESCRIPTION: A cURL request example for adding a new confirmation to a pending multisig transaction. Multiple signatures can be submitted at once, but this endpoint does not support using delegates to make transactions trusted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-linea.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Calling Safe `setGuard` function in Solidity\nDESCRIPTION: This snippet defines the `ISafe` interface containing the `setGuard` function and shows an example Solidity contract calling this function on a Safe instance. It demonstrates how to interact with the Safe's guard functionality programmatically. The `guard` parameter specifies the address of the transaction guard.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/guards/setGuard.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function setGuard(address guard) external;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).setGuard(0x...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: cURL command for retrieving Safe's module transactions\nDESCRIPTION: This cURL command demonstrates how to perform an HTTP GET request to fetch module transaction data for a specific Safe address using the API endpoint. It includes headers to specify JSON response format and can be adapted with different addresses or parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    \n```\n\n----------------------------------------\n\nTITLE: Example Response for Safe Module Transactions API - JSON\nDESCRIPTION: This JSON snippet shows a typical response object returned by the Safe Transaction Service when listing module transactions. The response includes a count of results, navigation fields (next/previous), and an array of transaction objects with detailed fields such as created date, execution date, block number, addresses, transaction hash, and more. This serves as a reference for expected response structures and is useful for parsing results programmatically.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_33\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling removeOwner from a Solidity Contract\nDESCRIPTION: Example demonstrating how to call the `removeOwner` function on a Safe contract instance (ISafe) from within another Solidity contract. It shows the function signature within an interface and a sample call, passing the `prevOwner` address, the `owner` address to be removed, and the new `_threshold`. This operation must be executed via a Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/removeOwner.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function removeOwner(\n        address prevOwner,\n        address owner,\n        uint256 _threshold\n    ) external;\n}\n\ncontract Example {\n    function example() /* ... */ {\n        (ISafe safe).removeOwner(\n            0x...,\n            0x...,\n            1\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Transaction Confirmations using curl\nDESCRIPTION: This Bash snippet shows how to retrieve the list of confirmations for a specific Safe multisig transaction using `curl`. It performs a GET request to the API endpoint for confirmations, identified by the `safe_tx_hash`. The response will be a JSON object containing the confirmation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Constructing TokenWithdrawModule with Token and Safe Addresses in Solidity\nDESCRIPTION: Constructor initializing the immutable token and Safe addresses during module deployment. These fixed addresses bind the module to a specific ERC20 token and Safe account, defining the scope of token withdrawals authorized through this module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(address _tokenAddress, address _safeAddress) {\n    tokenAddress = _tokenAddress;\n    safeAddress = _safeAddress;\n}\n```\n\n----------------------------------------\n\nTITLE: Add Confirmation to Transaction - cURL\nDESCRIPTION: This cURL command adds a confirmation to a Safe transaction identified by its operation hash. It sends a POST request to the /safe-operations/{safe_operation_hash}/confirmations/ endpoint with specified headers and an empty JSON body.  The service expects the signature and relevant data to be included in the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Specifying config.delegateAddress in removeSafeDelegate (Typescript)\nDESCRIPTION: Illustrates how to provide the `delegateAddress` parameter within the configuration object for the `removeSafeDelegate` function call. This string specifies the address of the delegate to be removed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/removesafedelegate.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.removeSafeDelegate({\n  delegateAddress: '0x...', // The address of the delegate to be removed.\n  delegatorAddress: '0x...', \n  signer\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Safe Module Token Transfer with EIP-712 Signature in TypeScript\nDESCRIPTION: This TypeScript test case verifies the `tokenTransfer` functionality of the `TokenWithdrawModule`. It enables the module, defines the EIP-712 domain, types, and values for the transfer, calculates the digest using `ethers.TypedDataEncoder.hash`, and signs it using an owner's key (Alice). It includes a negative test checking that an unauthorized signer (Charlie) cannot execute the transfer. Finally, it executes the `tokenTransfer` via the module contract connected as Bob (the beneficiary) and verifies Bob's final token balance. Requires a testing framework (like Hardhat/Mocha), `ethers.js`, the deployed module, token contract, and signer instances.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n  // Test case to verify token transfer to bob\n  it(\"Should successfully transfer tokens to bob\", async function () {\n    // Enable the module in the Safe\n    const { tokenWithdrawModule } = await enableModule();\n\n    const amount = 10000000000000000000n; // 10 * 10^18\n    const deadline = 100000000000000n;\n    const nonce = await tokenWithdrawModule.nonces(await bob.getAddress());\n\n    // Our module expects a EIP-712 typed signature, so we need to define the EIP-712 domain, ...\n    const domain: TypedDataDomain = {\n      name: \"TokenWithdrawModule\",\n      version: \"1\",\n      chainId: chainId,\n      verifyingContract: await tokenWithdrawModule.getAddress(),\n    };\n\n    // ... and EIP-712 types ...\n    const types = {\n      TokenWithdrawModule: [\n        { name: \"amount\", type: \"uint256\" },\n        { name: \"beneficiary\", type: \"address\" },\n        { name: \"nonce\", type: \"uint256\" },\n        { name: \"deadline\", type: \"uint256\" },\n      ],\n    };\n\n    // ... and EIP-712 values ...\n    const value = {\n      amount: amount,\n      beneficiary: await bob.getAddress(),\n      nonce: nonce,\n      deadline: deadline,\n    };\n\n    // ... and finally hash the data using EIP-712\n    const digest = ethers.TypedDataEncoder.hash(domain, types, value);\n    const bytesDataHash = ethers.getBytes(digest);\n    let signatureBytes = \"0x\";\n\n    // Alice signs the digest\n    const flatSig = (await alice.signMessage(bytesDataHash))\n      .replace(/1b$/, \"1f\")\n      .replace(/1c$/, \"20\");\n    signatureBytes += flatSig.slice(2);\n\n    // We want to make sure that an invalid signer cannot call the module even with a valid signature\n    // We test this before the valid transaction, because it would fail because of an invalid nonce otherwise\n    await expect(\n      tokenWithdrawModule\n        .connect(charlie)\n        .tokenTransfer(\n          amount,\n          await charlie.getAddress(),\n          deadline,\n          signatureBytes\n        )\n    ).to.be.revertedWith(\"GS026\");\n\n    // Now we use the signature to transfer via our module\n    await tokenWithdrawModule\n      .connect(bob)\n      .tokenTransfer(amount, await bob.getAddress(), deadline, signatureBytes);\n\n    // Verify the token balance of bob (should be 10000000000000000000)\n    const balanceBob = await token.balanceOf.staticCall(await bob.getAddress());\n    expect(balanceBob).to.be.equal(amount);\n\n    // All done.\n  });\n```\n\n----------------------------------------\n\nTITLE: Define Constants - Solidity\nDESCRIPTION: This Solidity code defines two constants within the `ERC1271FallbackHandler` contract. `SAFE_MSG_TYPEHASH` is the keccak256 hash of the string \"SafeMessage(bytes message)\", used for EIP-712 typed data hashing. `EIP1271_MAGIC_VALUE` is the magic value defined in the EIP-1271 standard, returned by `isValidSignature` if the signature is valid.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n    // keccak256(\"SafeMessage(bytes message)\");\n    bytes32 private constant SAFE_MSG_TYPEHASH =\n        0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\n\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit with chainId and Custom txServiceUrl - TypeScript\nDESCRIPTION: This snippet illustrates SafeApiKit initialization using both chainId and a custom txServiceUrl. This option allows integration with a custom Safe Transaction Service endpoint not provided by default. Dependencies include Node.js and the SafeApiKit library. The expected inputs are the blockchain network ID and a valid service URL. The resulting SafeApiKit instance uses the specified network and transaction service URL for subsequent operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/constructor.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKit = new SafeApiKit({\n  chainId: 1n,\n  txServiceUrl: 'https://...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Transfer List API JSON Response - JSON\nDESCRIPTION: This JSON object represents the expected response from the Safe Transaction Service when listing transfers for a Safe address. The response includes pagination fields (count, next, previous), and an array of transfer objects, each with attributes like type, executionDate, blockNumber, transactionHash, addresses, transferId, and optional tokenInfo. Inputs are the query or path parameters sent in the API request. The output details the structure and possible values returned, with null values for non-applicable fields. Limitations include only the 1000 newest transfers and possible absence of tokenInfo for ether transfers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: cURL command for fetching all transactions of a specific safe\nDESCRIPTION: A cURL command that sends a GET request to the Safe transaction API to retrieve all transactions associated with the specified safe address on the Arbitrum network. It includes headers for content type and accept, facilitating API testing and debugging.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Delegates\nDESCRIPTION: Returns a sample JSON response illustrating a successful delegation list fetch, including total count, navigation URLs, and delegate details such as safe address, delegate address, delegator, and label.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Changing the Safe threshold\nDESCRIPTION: Adjusts the number of owner approvals required for Safe transactions. Critical for governance and security policy updates.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nchange_threshold <integer>\n```\n\n----------------------------------------\n\nTITLE: Send Signed Transaction to Gelato Relay (SyncFee)\nDESCRIPTION: Execute the signed Safe transaction by sending it to the Gelato Relay service using the Relay Kit for SyncFee. The transaction fees will be paid directly from the Safe's balance in the native token or a supported token. The response contains a task ID for tracking the relay status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await relayKit.executeTransaction({\n    executable: signedSafeTransaction  \n})\n\nconsole.log(`Relay Transaction Task ID: https://relay.gelato.digital/tasks/status/${response.taskId}`)\n```\n\n----------------------------------------\n\nTITLE: Specifying Threshold in safeOptions for createSafeClient (TypeScript)\nDESCRIPTION: Highlights the `safeOptions.threshold` parameter (type `number`) within `createSafeClient` when creating a new Safe. This sets the required number of owner signatures for transactions and must be less than or equal to the total number of owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/constructor.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeOptions: {\n    owners: ['0x...', '0x...', '0x...'],\n    threshold: 2, // highlight-line\n    saltNonce: 123n\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Calling addOwnerWithThreshold Function in Safe Contract - Solidity\nDESCRIPTION: Demonstrates how to invoke the addOwnerWithThreshold function from the ISafe interface within a Solidity contract. This function adds a new owner to the Safe and updates the threshold that determines the required number of confirmations for execution. The example shows the interface declaration and a sample contract calling this function with specified parameters: a new owner address and a new threshold value.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/addOwnerWithThreshold.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface ISafe {\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).addOwnerWithThreshold(0x..., 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Simple String Message Parameter in TypeScript\nDESCRIPTION: Example showing how to send a basic string message using the sendOffChainMessage method. The message parameter accepts either a string or EIP712TypedData object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages/sendoffchainmessage.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageResult = await offchainMessageClient.sendOffChainMessage({\n  message: 'abc'\n})\n```\n\n----------------------------------------\n\nTITLE: Create Pimlico Bundler Client for User Operation Bundling in TypeScript\nDESCRIPTION: Sets up a Pimlico bundler client with an API key and entryPoint, enabling interaction with the bundler endpoints for assembling user operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst bundlerClient = createPimlicoBundlerClient({\n  transport: http(`https://api.pimlico.io/v1/${chainName}/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`),\n  entryPoint: ENTRYPOINT_ADDRESS_V06\n})\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Safe Address Parameter\nDESCRIPTION: Highlights how to pass the required `safeAddress` (a string representing the Safe account address) as the first argument to the `getModuleTransactions` function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmoduletransactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst moduleTxs = await apiKit.getModuleTransactions(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying the Owner to Remove in removeOwner\nDESCRIPTION: Highlights the `owner` parameter within a `removeOwner` function call. This is the actual address of the owner that will be removed from the Safe's set of owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/removeOwner.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).removeOwner(\n    0x...,\n    0x..., // owner\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Safe Client Functionality - TypeScript\nDESCRIPTION: Imports the 'createSafeClient' function from the '@safe-global/sdk-starter-kit' package. This is the primary method used to create and interact with Safe accounts and transactions. Ensure that the package has been installed before importing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-transactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\n```\n\n----------------------------------------\n\nTITLE: validUntil Parameter\nDESCRIPTION: Example showing how to define `validUntil` parameter which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions,\n  validUntil: Number(timestamp + 60_000n)\n})\n```\n\n----------------------------------------\n\nTITLE: Get Safe Creation Status - Example Request\nDESCRIPTION: This snippet provides a `curl` command for fetching the Safe creation status using the GET method. It specifies the endpoint, request headers, and example address.  The command is constructed to query the Safe creation status information given a specific address. It includes the necessary headers for the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Connecting to Safe with Private Key Signer\nDESCRIPTION: This snippet demonstrates connecting to a Safe using a private key as the signer. The `signer` property is set to a private key (string). It requires a `provider` and a `safeAddress` to be specified. The `@safe-global/protocol-kit` library is required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.connect({\n  provider,\n  signer: '0x...',\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Get Safe Operation via API - Bash\nDESCRIPTION: This Bash script sends a GET request to retrieve a Safe operation by its hash using the specified API endpoint. It uses `curl` with headers for `Accept` and `content-type`. The hash is provided as a part of the URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Calling getServiceInfo method with Safe API Kit in TypeScript\nDESCRIPTION: Example showing how to call the getServiceInfo method using a pre-configured apiKit instance to retrieve service information and configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getserviceinfo.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst serviceInfo = await apiKit.getServiceInfo()\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize the Safe API Kit in TypeScript. It sets the `chainId` to `1n` (Mainnet). This initialization is necessary to use the `apiKit` instance in the `addMessageSignature` example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addmessagesignature.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\n    export const apiKit = new SafeApiKit({\n      chainId: 1n, // Mainnet\n    })\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit for Ethereum Mainnet in TypeScript\nDESCRIPTION: This snippet shows how to import and initialize a new instance of SafeApiKit with the Ethereum Mainnet chain ID. It is a prerequisite for executing Safe platform operations and requires the @safe-global/api-kit package. The apiKit instance created here is needed to use methods like addSafeDelegate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafedelegate.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering for Queued Transactions in TypeScript\nDESCRIPTION: Example of using the queued configuration option with getAllTransactions. When set to true, this filters the results to only include transactions with a nonce higher or equal to the current nonce.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getalltransactions.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst allTxs = await apiKit.getAllTransactions(\n  safeAddress,\n  {\n    queued: true\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Extending SafeClient with SafeOperations Support (TypeScript)\nDESCRIPTION: Configures bundler and paymaster options using Pimlico URLs and an API key, then extends the `safeClient` instance using `safeClient.extend(safeOperations(...))` to add methods for handling ERC-4337 User Operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundlerOptions: BundlerOptions = {\n  bundlerUrl: `https://api.pimlico.io/v1/sepolia/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`\n}\n\nconst paymasterOptions: PaymasterOptions = {\n  isSponsored: true,\n  paymasterUrl: `https://api.pimlico.io/v2/sepolia/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`\n}\n\nconst safeClientWithSafeOperation = await safeClient.extend(\n  safeOperations(bundlerOptions, paymasterOptions)\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol Kit with Provider, Signer, and Safe Address in TypeScript\nDESCRIPTION: This snippet illustrates how to initialize the Safe Protocol Kit by creating a protocolKit instance. It imports the Safe class from the @safe-global/protocol-kit and calls Safe.init() with essential parameters: a provider, signer, and the Safe address. This setup is a prerequisite for calling transaction creation functions like createAddOwnerTx. The protocolKit instance manages interactions with the Safe smart contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createaddownertx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Safe React Hooks with yarn\nDESCRIPTION: This command installs the `@safe-global/safe-react-hooks` package using the yarn package manager. It adds the library as a dependency to your project, allowing you to use its React hooks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/overview.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/safe-react-hooks\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Owner using TypeScript\nDESCRIPTION: This snippet describes the API endpoint to retrieve safes owned by a specific address, including the required 'address' parameter and response format, which lists all safes owned by that address. It involves a GET request to a REST API with the owner address as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-owners-{address}-safes--get.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Adding a confirmation to a multisig transaction (POST API)\nDESCRIPTION: This endpoint allows adding a new confirmation (signature) for a specific multisig transaction identified by 'safe_operation_hash'. Multiple signatures can be added, but the endpoint does not support delegate accounts for transaction approval. The request requires a path parameter and a JSON body which is typically empty or contains the signature data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-arbitrum.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message for a Safe Account via API (cURL/TypeScript)\nDESCRIPTION: Adds a new signed message for a specified Safe account address. The message can be provided as a string (using EIP191 hashing) or an EIP712 object within the request body. The service calculates the message hash internally. Requires the Safe address in the path and message details in the request body. Returns a 201 Created status with an empty response on success.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/scroll/-v1-safes-{address}-messages--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Using getSafeAddressFromDeploymentTx with Viem in TypeScript\nDESCRIPTION: Example of using getSafeAddressFromDeploymentTx to extract a Safe address from a deployment transaction receipt. The code imports necessary dependencies from the Protocol Kit and Viem, retrieves a transaction receipt, and passes it to the function along with the Safe version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/deployment/getsafeaddressfromdeploymenttx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSafeAddressFromDeploymentTx } from '@safe-global/protocol-kit'\nimport { createWalletClient, http } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { sepolia } from 'viem/chains'\nimport { waitForTransactionReceipt } from 'viem/actions'\nimport { protocolKit } from './setup.ts'\n\nconst account = privateKeyToAccount('0x...')\nconst client = createWalletClient({\n  account,\n  chain: sepolia,\n  transport: http('https://rpc.ankr.com/eth_sepolia')\n})\nconst transactionReceipt = await waitForTransactionReceipt(client, {\n  hash: '0x...'\n})\n\nconst safeAddress = getSafeAddressFromDeploymentTx(\n  transactionReceipt,\n  safeVersion: '1.4.1'\n)\n```\n\n----------------------------------------\n\nTITLE: Sample GET Request (Safe Transactions)\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve the multisig transactions associated with a Safe address. It uses `curl` to send the request to the Safe Transaction Service API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit Instance in TypeScript\nDESCRIPTION: This snippet demonstrates the initialization of the `Safe` (Protocol Kit) instance using the `init` method. It requires a `provider`, `signer`, and the `safeAddress` to connect to a specific Safe contract. This initialized instance is then used to perform operations like creating transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createrejectiontransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Safe Protocol Kit. It requires a provider, signer, and the Safe address. The initialized protocol kit is then exported for use in other modules. The provider enables connecting to the blockchain, the signer provides authorization for transactions, and the Safe address specifies which Safe to interact with.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getnonce.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a signer using the disconnect function in React with Safe React Hooks\nDESCRIPTION: This example shows how to implement a disconnect button in a React component using the disconnect function provided by the useSafe hook. The function disconnects the currently connected signer from the SafeProvider.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/disconnect.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction Disconnect() {\n  const { disconnect } = useSafe()\n\n  return (\n    <button onClick={disconnect}>\n      Disconnect\n    </button>\n  )\n}\n\nexport default Disconnect\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request to Create a Safe Operation\nDESCRIPTION: This code snippet provides a cURL command to initiate a POST request to create a new safe operation for a specific Safe account. It includes headers for JSON content and an empty JSON body payload, demonstrating how to interact with the API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Testing ERC1271FallbackHandler Signature Validation with Hardhat, Chai, and TypeScript\nDESCRIPTION: This code block is a Mocha test suite covering signature validation scenarios for the ERC1271FallbackHandler contract. It checks that direct calls without proper setup revert, that unsigned or improperly signed messages are rejected, and that valid signatures from sufficient owners are accepted, returning the EIP-1271 magic value. Dependencies are a correctly configured Safe with the fallback handler and signature generation using ethers. Parameters include fake message hashes, invalid/valid signatures, and owner addresses. Passing requires Smart Contract ABI compatibility and a properly initialized test environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n  it(\"should revert if called directly\", async () => {\n    const dataHash = ethers.keccak256(\"0xbaddad\");\n    await expect(\n      exampleFallbackHandler.isValidSignature.staticCall(dataHash, \"0x\")\n    ).to.be.reverted;\n  });\n\n  it(\"should revert if message was not signed\", async () => {\n    const validator = await ethers.getContractAt(\n      \"ERC1271FallbackHandler\",\n      safe.target\n    );\n    const dataHash = ethers.keccak256(\"0xbaddad\");\n    await expect(\n      validator.isValidSignature.staticCall(dataHash, \"0x\")\n    ).to.be.revertedWith(\"Hash not approved\");\n  });\n\n  it(\"should revert if signature is not valid\", async () => {\n    const validator = await ethers.getContractAt(\n      \"ERC1271FallbackHandler\",\n      safe.target\n    );\n    const dataHash = ethers.keccak256(\"0xbaddad\");\n    await expect(\n      validator.isValidSignature.staticCall(dataHash, \"0xdeaddeaddeaddead\")\n    ).to.be.reverted;\n  });\n\n  it(\"should return magic value if enough owners signed and allow a mix different signature types\", async () => {\n    const validator = await ethers.getContractAt(\n      \"ERC1271FallbackHandler\",\n      safe.target\n    );\n\n    const validatorAddress = await validator.getAddress();\n    const dataHash = ethers.keccak256(\"0xbaddad\");\n    const typedDataSig = {\n      signer: await alice.getAddress(),\n      data: await alice.signTypedData(\n        {\n          verifyingContract: validatorAddress,\n          chainId: (await ethers.provider.getNetwork()).chainId,\n        },\n        EIP712_SAFE_MESSAGE_TYPE,\n        { message: dataHash }\n      ),\n    };\n\n    expect(\n      await validator.isValidSignature.staticCall(dataHash, typedDataSig.data)\n    ).to.be.eq(\"0x1626ba7e\");\n  });\n```\n\n----------------------------------------\n\nTITLE: Checking Safe Owner with isOwner - TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `isOwner` function to determine if a given address is an owner of a Safe.  It retrieves a boolean value, true if the address is an owner, and false otherwise. It requires the Safe Protocol Kit to be initialized. The input is the address to check, and the output is a promise resolving to a boolean.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/isowner.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst address = '0x...'\n\nconst isOwner = await protocolKit.isOwner(address)\n```\n\n----------------------------------------\n\nTITLE: Complete NoDelegatecallGuard Contract Code\nDESCRIPTION: Provides the full Solidity source code for the `NoDelegatecallGuard` contract. It inherits from `BaseGuard`, imports necessary components, defines the `DelegatecallNotAllowed` error, and implements `checkTransaction` to prevent `delegatecall` operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\nimport { BaseGuard } from \"@safe-global/safe-contracts/contracts/base/GuardManager.sol\";\nimport { Enum } from \"@safe-global/safe-contracts/contracts/common/Enum.sol\";\n\ncontract NoDelegatecallGuard is BaseGuard {\n\n    error DelegatecallNotAllowed();\n\n    function checkTransaction(\n        address /*to*/,\n        uint256 /*value*/,\n        bytes memory /*data*/,\n        Enum.Operation operation,\n        uint256 /*safeTxGas*/,\n        uint256 /*baseGas*/,\n        uint256 /*gasPrice*/,\n        address /*gasToken*/,\n        address payable /*refundReceiver*/,\n        bytes memory /*signatures*/,\n        address /*msgSender*/\n    ) external {\n        if(operation == Enum.Operation.DelegateCall) {\n            revert DelegatecallNotAllowed();\n        }\n    }\n\n    function checkAfterExecution(bytes32 txHash, bool success) external {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing a Safe Message with Owner Credentials in TypeScript and Python\nDESCRIPTION: This snippet demonstrates signing a previously created Safe message. In TypeScript, the Safe protocol kit instance signs the message asynchronously. The Python example uses the eth_account library to sign the message hash with a private key. The Curl step is skipped since the original message already includes a signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/messages.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Sign the message with Owner A\nconst signedMessageOwnerA = await protocolKitOwnerA.signMessage(safeMessage)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Get the Safe message hash\nsafe_message_hash = safe.get_message_hash(message_hash)\n\n# Sign the message by Owner A\naccount_owner_a = Account.from_key(config.get(\"OWNER_A_PRIVATE_KEY\"))\nowner_a_signature = account_owner_a.signHash(safe_message_hash)\n```\n\n----------------------------------------\n\nTITLE: Get User Operation by Hash - cURL Example\nDESCRIPTION: This cURL command demonstrates how to make a GET request to retrieve a user operation. It uses the user operation hash as part of the URL to fetch the data. The example requires the user operation hash to be replaced with the real value. It also includes the \"Accept: application/json\" and \"content-type: application/json\" headers to specify the expected format of the response and request body respectively.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using Config Parameter with useConfirmTransaction (index.tsx)\nDESCRIPTION: This code snippet demonstrates how to pass a custom configuration to the `useConfirmTransaction` hook. It imports a `config` object from a separate file and passes it as the `config` parameter when calling the hook.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useconfirmtransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\n    const result = useConfirmTransaction({\n      config\n    })\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transactions with curl\nDESCRIPTION: Sends a GET request using curl to the Safe Transaction Service API endpoint `/api/v1/safes/{address}/multisig-transactions/` to retrieve the multisig transaction list for the specified Safe address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). The request specifies JSON as the accepted response format using the `Accept` header and indicates a JSON content type, although GET requests typically don't have a body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Function Parameter Usage for transactionReceipt\nDESCRIPTION: Example showing how to use the transactionReceipt parameter in the getSafeAddressFromDeploymentTx function. The parameter accepts a FormattedTransactionReceipt type from a Safe deployment transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/deployment/getsafeaddressfromdeploymenttx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeAddress = getSafeAddressFromDeploymentTx(\n  transactionReceipt,\n  '1.4.1'\n)\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Example for Multisig Transactions\nDESCRIPTION: A comment indicating the location of a TypeScript example file related to fetching multisig transactions for a Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/arbitrum/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response JSON for User Operations Endpoint\nDESCRIPTION: Provides a sample JSON response illustrating the structure of data returned from the API when listing user operations. It includes the total count, pagination links, and an array of user operation objects with detailed fields such as transaction hashes, sender addresses, call data, gas limits, signatures, and associated safe operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{ \"count\": 1, \"next\": null, \"previous\": null, \"results\": [ { \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\", \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\", \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\", \"nonce\": 0, \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\" , \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"callGasLimit\": 198268, \"verificationGasLimit\": 3867576, \"preVerificationGas\": 110646, \"maxFeePerGas\": 36776375378, \"maxPriorityFeePerGas\": 199436407, \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\", \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\", \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\", \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\", \"safeOperation\": { \"created\": \"2024-07-22T10:00:18.892702Z\", \"modified\": \"2024-07-22T10:00:18.892702Z\", \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\", \"validAfter\": null, \"validUntil\": null, \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\", \"confirmations\": [ { \"created\": \"2024-07-22T10:00:18.898708Z\", \"modified\": \"2024-07-22T10:00:18.898708Z\", \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\", \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\" } } } ] } } }\n```\n\n----------------------------------------\n\nTITLE: Enabling Fallback Handler (with gasToken)\nDESCRIPTION: This code shows how to use the `gasToken` option. This specifies the token address used for gas payment. If set to a zero address, no gas token is used.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableFallbackHandlerTx(\n  '0x...',\n  options: {\n    gasToken: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Owner Address (Bash curl)\nDESCRIPTION: This snippet demonstrates how to query the Safe Transaction Service API for a list of Safes owned by a specific address. It uses `curl` to perform a GET request to the `/api/v1/owners/{address}/safes/` endpoint, replacing `{address}` with the desired owner address. The expected output is a JSON object containing a list of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Listing Confirmations (JSON)\nDESCRIPTION: Illustrates a sample JSON response from the GET `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` endpoint. The response is paginated, containing `count`, `next`, `previous` fields, and a `results` array listing each confirmation with details like the owner address, submission date, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Tokens Request via cURL\nDESCRIPTION: This snippet provides a cURL command to list the tokens supported in the Safe Transaction Service. It's a GET request to the /api/v1/tokens/ endpoint.  The headers specify the accepted and content types as JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/tokens/ \\ \n    -H \"Accept: application/json\" \\ \n    -H \"content-type: application/json\" \\ \n     \n```\n\n----------------------------------------\n\nTITLE: Get Safe Balances - cURL Request\nDESCRIPTION: This cURL command demonstrates retrieving the balances of a Safe.  It uses a GET request to the /api/v2/safes/{address}/balances/ endpoint.  The request includes the Safe's address in the path and specifies 'Accept' and 'content-type' headers as 'application/json'.  The response will be a list of token balances.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Owner (cURL)\nDESCRIPTION: This snippet demonstrates a cURL request designed to fetch a list of Safe accounts associated with a provided owner address. It leverages the GET method against the `/api/v1/owners/{address}/safes/` endpoint. The `{address}` placeholder should be replaced with the desired owner's address. The request sets headers specifying accepted content and content type as application/json.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: changeThreshold Parameter Usage (Solidity)\nDESCRIPTION: Highlights the usage of the `_threshold` parameter in the `changeThreshold` function call within Solidity. This parameter specifies the new threshold value for the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/changeThreshold.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).changeThreshold(\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Lists from Safe Transaction Service with curl\nDESCRIPTION: A curl command to retrieve the list of tokens supported in the Safe Transaction Service via GET request to the /api/v1/tokens/lists/ endpoint. The request accepts and returns JSON format data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Safe Global API Listing All Transactions\nDESCRIPTION: This JSON snippet shows a typical response from the Safe Global API when querying all transactions for a specific safe address. It includes pagination fields (count, next, previous), as well as a list of transaction objects containing detailed fields such as safe address, to address, value, gas information, transaction hashes, execution and submission dates, confirmations, and transfer details. This response structure is useful for consuming applications that display or process multisig transactions. Note that dates are ISO 8601 strings and numerical values are mostly presented as strings to handle large integers safely.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Canonical Chain Deployment in Registry - JSON\nDESCRIPTION: This JSON snippet demonstrates how to mark a chain's gnosis safe contract deployment as canonical in the official safe-deployments registry. The key is your chain ID, and the value is the string 'canonical'. Required for proper indexing by tooling and dashboards. Input is a numeric or string chain ID; output is a modification to the registry JSON entry. Make sure chain ID is accurate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-contracts-deployment.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"<your_chain_id>\": \"canonical\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Safe Multisig Transactions\nDESCRIPTION: Shows an example JSON response returned by the `/api/v1/safes/{address}/multisig-transactions/` endpoint. The response includes pagination fields (`count`, `next`, `previous`) and a `results` array containing objects, each representing a multisig transaction with details like `safe` address, `to` address, `value`, `nonce`, `executionDate`, `confirmations`, `signatures`, and execution status (`isExecuted`, `isSuccessful`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Operations via cURL\nDESCRIPTION: This code snippet demonstrates how to use the cURL command to retrieve user operations for a specific Safe account.  It sends a GET request to the API endpoint, including the account address in the path.  It requires the cURL utility and an internet connection to interact with the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample response for adding confirmation (Empty Response)\nDESCRIPTION: This indicates that simply calling the POST endpoint with appropriate data will result in an empty response if successful, confirming the confirmation was accepted. Error codes indicate malformed data or processing errors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_51\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Calling createRejectionTransaction with Nonce in TypeScript\nDESCRIPTION: This snippet highlights the call to the `createRejectionTransaction` method, specifically showing the `nonce` parameter being passed. This parameter determines which pending transaction (identified by its nonce) will be invalidated by the resulting rejection transaction. It requires an initialized `protocolKit` instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createrejectiontransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst rejectionTransaction = await protocolKit.createRejectionTransaction(\n  123\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit in TypeScript\nDESCRIPTION: Shows the setup required to initialize the `SafeApiKit`. It imports the `SafeApiKit` class and creates an instance (`apiKit`) configured for a specific chain (Mainnet in this example). This instance is then exported for use in other modules, like the transaction proposal example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing Safe Operations using Safe4337Pack in TypeScript\nDESCRIPTION: Illustrates the workflow of using Safe4337Pack to create a Safe transaction, sign it, and subsequently add the signed operation via the Safe Api Kit. It requires the MetaTransactionData type to define transaction details like recipient address, value, and data payload. This snippet integrates both the relay-kit and api-kit libraries for handling Safe operations compliant with ERC-4337.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafeoperation.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { addSafeOperationProps } from '@safe-global/api-kit'\nimport { MetaTransactionData } from '@safe-global/relay-kit'\nimport { apiKit, safe4337Pack } from './setup.ts'\n\nconst transactionData: MetaTransactionData = {\n  to: '0x...',\n  value: '0',\n  data: '0x...',\n  operation: 0 // Optional\n}\nconst safeOperation = await safe4337Pack.createTransaction({\n  transactions: [transactionData]\n})\nconst signedSafeOperation = await safe4337Pack.signSafeOperation(\n  safeOperation\n)\n\nawait apiKit.addSafeOperation(signedSafeOperation)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit\nDESCRIPTION: This snippet shows how to initialize the Safe API Kit with a specified chain ID.  It imports the `SafeApiKit` class from the `@safe-global/api-kit` library and creates a new instance with the `chainId` set to Mainnet (1n). This `apiKit` instance is then used in other examples to interact with the Safe API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationconfirmations.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit Instance (TypeScript)\nDESCRIPTION: Shows a basic setup for initializing the Safe Protocol Kit instance. This `protocolKit` object is required to call functions like `createRemoveOwnerTx` and needs configuration including a provider, a signer, and the address of the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider, // Web3 provider instance\n  signer, // Signer instance\n  safeAddress: '0x...' // Address of the Safe Account\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up the Safe API Kit in TypeScript\nDESCRIPTION: This code shows how to initialize the Safe API Kit by creating an instance with a specified chain ID. The example uses Ethereum Mainnet (chain ID 1n).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmultisigtransactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Specific Token Information\nDESCRIPTION: Example JSON response from the `/api/v1/tokens/{address}/` endpoint. Contains detailed information about a single token, including its type, address, name, symbol, decimals, logo URI, and trust status (`trusted`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ERC20\",\n  \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n  \"name\": \"0x5555.com\",\n  \"symbol\": \"0x5555.com\",\n  \"decimals\": 18,\n  \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n  \"trusted\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Define EIP-712 Structure for Deleting Safe Transaction (Python)\nDESCRIPTION: Defines the EIP-712 typed data structure required for signing a request to delete a queued Safe multisig transaction. This structure includes domain information (name, version, chainId, verifyingContract) and the message content (safeTxHash, totp). The `totp` parameter is calculated based on the Unix epoch time divided by 3600.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Decode Data Using POST Request with TypeScript Example\nDESCRIPTION: Sample code illustrating how to send a POST request to the data decoder endpoint, with the inclusion of necessary headers. The code is written in TypeScript and refers to an external example file for detailed implementation. Input data is a hex string representing transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/zkevm/-v1-data-decoder--post.ts\n\n```\n\n----------------------------------------\n\nTITLE: Get Multisig Transaction API Endpoint and Response Schema (JSON)\nDESCRIPTION: Specifies the API route to fetch details of a multisignature transaction using its transaction hash. The schema details transaction fields like safe address, recipient, value, signatures, confirmations, and execution status. An example response illustrates the data structure and typical values.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Balances with cURL\nDESCRIPTION: This cURL command retrieves the balances for Ether and ERC20 tokens of a specified Safe account using the Safe Transaction Service API. It makes a GET request to the `/balances/` endpoint for the given Safe address. The request includes headers to accept JSON and define the content type. The balances endpoint is marked as deprecated.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Generating a Stripe Crypto Onramp Session Client Secret Using curl Command\nDESCRIPTION: This curl snippet shows how to generate a crypto onramp session by making a POST request to Stripe’s REST API from a terminal or script environment. It authenticates using the private Stripe secret key and sends optional user wallet address data. This command returns a client_secret used for Stripe widget initialization. This approach facilitates backend call examples outside JavaScript environments.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/stripe.mdx#_snippet_2\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://api.stripe.com/v1/crypto/onramp_sessions \\\n  # your private key for Stripe\n  -u sk_test_51...Eg7o: \\\n  # optional parameters, for example a wallet address\n  -d \"wallet_addresses[ethereum]\"=\"0xB00F0759DbeeF5E543Cc3E3B07A6442F5f3928a2\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit (TypeScript)\nDESCRIPTION: This snippet illustrates how to initialize the Safe Protocol Kit. It imports the `Safe` class from the `@safe-global/protocol-kit` package and uses the `init` method to create a `protocolKit` instance. The initialization requires a provider, a signer, and the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getownerswhoapprovedtx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Signing Method and Preimage Address in Protocol Kit (TypeScript)\nDESCRIPTION: Demonstrates signing a `SafeTransaction` by providing both the explicit `signingMethod` and the `preimageSafeAddress`. The preimage address is necessary for certain older Safe smart account versions (`v1.3.0`, `v1.4.1`) that use a different EIP-1271 interface.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtransaction.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst signedSafeTransaction = await protocolKit.signTransaction(\n  safeTransaction,\n  SigningMethod.ETH_SIGN_TYPED_DATA_V4,\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Requesting Safe Creation Status via REST API - Bash\nDESCRIPTION: This Bash snippet demonstrates how to query the Safe Global Transaction Service for detailed creation information about a Safe using its address. The curl command sends a GET request to the /api/v1/safes/{address}/creation/ endpoint, which returns data such as the creation timestamp, creator address, transaction hash, factory parameters, and setup data. An 'Accept: application/json' header is required, and the endpoint expects a valid Ethereum address as a path parameter. The response contains various details including decoded setup parameters, and supports error codes for not found, invalid checksum, or network issues.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Module Transaction API\nDESCRIPTION: This JSON object represents a sample successful response (HTTP 200) from the Get Module Transaction API endpoint. It includes details like creation/execution dates, block number, success status, transaction hash, associated Safe and module addresses, recipient (`to`), value, data, operation type, and the unique `moduleTransactionId`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Delegate via Safe Transaction Service (TypeScript)\nDESCRIPTION: Indicates a TypeScript file reference (implementation not shown) to initiate a POST to the /api/v2/delegates/ endpoint, which registers a new delegate with label in the Safe Transaction Service. The code typically handles assembling the POST body with delegate information and cryptographic signature, fulfilling EIP-712 requirements. Needs access to web3 signing utilities and correct payload structure for success. Returns 202 on success or 400 for malformed data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v2-delegates--post.ts\n```\n\n----------------------------------------\n\nTITLE: Getting Message Details via Safe Transaction Service (Curl)\nDESCRIPTION: Shows how to use Curl to retrieve message details from the /api/v1/messages/{message_hash}/ endpoint. Requires substituting the {message_hash} path parameter and includes necessary headers for Accept and Content-Type. The response will be a JSON object representing the message and its associated confirmations. No request payload required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Safe4337Pack with ERC-20 Paymaster for Fee Payment in TypeScript\nDESCRIPTION: Configures Safe4337Pack to use an ERC-20 token paymaster for transaction fee payments. This setup requires setting the paymaster URL, its contract address, the ERC-20 token address used for fees, and optionally an amount to approve on behalf of the Safe. The Safe account must have approved tokens to the paymaster beforehand to cover fee costs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safe4337Pack = await Safe4337Pack.init({\n  // ...\n  paymasterOptions: {\n    paymasterUrl: `https://api.pimlico.io/v2/11155111/rpc?apikey=${PIMLICO_API_KEY}`,\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    amountToApprove // Optional\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Sample UserOperation List Response (JSON)\nDESCRIPTION: This JSON snippet shows an example response from the Safe Transaction API when listing UserOperations for a Safe account. The response includes pagination fields (count, next, previous) and a results array with detailed operation data such as transaction hashes, sender addresses, gas limits, and optional operation-related objects like safeOperation and confirmations. This structure helps clients understand and parse the expected output, including support for nested fields and nullable parameters. The results array may contain zero or more UserOperation objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: ERC-4337 UserOperation Transaction Data for Safe Transaction\nDESCRIPTION: This code snippet contains a comprehensive JSON representation of an ERC-4337 UserOperation transaction data structure for a Safe transaction. It includes initCode for account deployment, callData for transaction execution, gas parameters, paymaster information with verification data, and signature data with cross-origin information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_54\n\nLANGUAGE: solidity\nCODE:\n```\n\"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n\"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n\"callGasLimit\": 198268,\n\"verificationGasLimit\": 3867576,\n\"preVerificationGas\": 110646,\n\"maxFeePerGas\": 36776375378,\n\"maxPriorityFeePerGas\": 199436407,\n\"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n\"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n\"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n\"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n```\n\n----------------------------------------\n\nTITLE: Sample Specific Token Response\nDESCRIPTION: Example JSON response from the specific token endpoint showing detailed information about a single token including its type, address, name, symbol, decimals, and whether it's trusted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ERC20\",\n  \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n  \"name\": \"0x5555.com\",\n  \"symbol\": \"0x5555.com\",\n  \"decimals\": 18,\n  \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n  \"trusted\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract - API Request\nDESCRIPTION: This snippet demonstrates how to retrieve information for a specific smart contract using a GET request to the `/api/v1/contracts/{address}/` endpoint, where `{address}` is the contract address. The request specifies the `Accept` and `content-type` headers as `application/json`. It returns details such as address, name, ABI, and `trustedForDelegateCall` status for the given contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Smart Contract Details via Safe Transaction Service API - Bash\nDESCRIPTION: This Bash snippet uses curl to send a GET request to retrieve details about a specific smart contract from the Safe Transaction Service API, identified by its contract address. Dependencies include curl and access to the endpoint. The request URL contains the contract address parameter. The response includes contract metadata such as address, name, displayName, logoUri, contractAbi, and trustedForDelegateCall. Proper error handling is recommended for invalid or non-existent addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Calling getPendingTransactions with safeAddress (TypeScript)\nDESCRIPTION: This TypeScript snippet focuses on the call to the `getPendingTransactions` method. It assumes the `apiKit` object is properly initialized. It shows the simplest call, just passing in a safe address as a string.  This action initiates the fetching of pending transactions. The result is a `Promise<SafeMultisigTransactionListResponse>`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getpendingtransactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst pendingTxs = await apiKit.getPendingTransactions(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Confirmation List Response - JSON\nDESCRIPTION: Illustrates the structure of the JSON response returned when listing multisig confirmations. The response includes the count of confirmations, pagination links (next and previous), and an array of confirmation objects, each containing owner, submission date, transaction hash, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Multisig Confirmations – JSON\nDESCRIPTION: Provides an example response object for the confirmation listing API. The top-level object includes count, next, previous, and results (an array). Each result details a confirmation's owner address, ISO date of submission, transactionHash, hexadecimal signature, and signatureType. transactionHash may be null if the confirmation is pending.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request for Get Multisig Transaction\nDESCRIPTION: Shows an example cURL command to fetch a multisignature transaction using the API endpoint and specific transaction hash, illustrating how to retrieve multisig transaction details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n  -H \"Accept: application/json\" \\\n  -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sending Ether from Safe to an Account\nDESCRIPTION: Transmits Ether from the Safe to another address, specifying the amount in wei. An optional nonce can be set to manage transaction ordering. Essential for transferring funds securely from the multisig.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsend_ether <address> <value-wei> [--safe-nonce <int>]\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Owner (bash)\nDESCRIPTION: This `curl` command demonstrates how to query the Safe Transaction Service API to list Safe accounts owned by a specific address. It performs a GET request to the `/api/v1/owners/{address}/safes/` endpoint, replacing `{address}` with the desired owner address, and includes necessary Accept and Content-Type headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Configuring Signer and RPC Endpoint (TypeScript)\nDESCRIPTION: Defines constants for the signer's address (`SIGNER_ADDRESS`), private key (`SIGNER_PRIVATE_KEY`), and the RPC URL (`RPC_URL`) for the target blockchain network (Sepolia). These values are needed to initialize the `SafeClient`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst SIGNER_ADDRESS = // ...\nconst SIGNER_PRIVATE_KEY = // ...\nconst RPC_URL = 'https://rpc.ankr.com/eth_sepolia'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transaction Details via Safe Transaction Hash - Bash\nDESCRIPTION: This snippet illustrates how to use a curl GET command to fetch multisignature transaction details by passing the safe_tx_hash parameter to the '/api/v1/multisig-transactions/{safe_tx_hash}/' API endpoint. The returned JSON response includes comprehensive transaction data such as involved wallets, values, gas parameters, execution status, confirmation details, and decoded input data if available. It is intended for clients who need detailed status and metadata for multisig transactions on the Safe platform. Required dependencies include API access and a valid safe_tx_hash string identifier.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Token Transfers via GET Request in JSON\nDESCRIPTION: This snippet demonstrates how to retrieve a paginated list of token transfers for a specific Safe address using a GET request. It includes URL structure, necessary headers, and an example response with multiple transfer entries. Dependencies include the API endpoint and proper authorization headers if required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Logging out with Privy\nDESCRIPTION: This snippet demonstrates how to use the `logout()` function provided by the `usePrivy()` hook to log the user out of Privy. Calling this function will clear the user's session and remove their authentication credentials.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/privy.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlogout()\n```\n\n----------------------------------------\n\nTITLE: Fetch Current Gas Price for User Operations in TypeScript\nDESCRIPTION: Retrieves the current fast gas price estimates from the bundler client to set transaction fees accordingly.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst gasPrices = await bundlerClient.getUserOperationGasPrice()\n\n```\n\n----------------------------------------\n\nTITLE: List Messages - Safe Transaction Service API - json Sample Response\nDESCRIPTION: Displays a sample JSON response returned by the Safe Transaction Service API when successfully listing messages for a Safe account. It includes pagination details (`count`, `next`, `previous`) and an array of `results`, where each object represents a message with details like hash, content, confirmations, and signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e64F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient for Operation Confirmation (TypeScript)\nDESCRIPTION: Demonstrates creating and extending a *new* `SafeClient` instance, potentially with a different signer (another Safe owner). This setup is required for confirming a previously sent user operation when the Safe's threshold is greater than 1.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst newSafeClient = await createSafeClient({\n  provider: RPC_URL,\n  signer, // Assumes 'signer' is initialized for the confirming owner\n  safeAddress: '0x...'\n})\n\nconst newSafeClientWithSafeOperation = await newSafeClient.extend(\n  safeOperations({\n    bundlerUrl: `https://api.pimlico.io/v1/sepolia/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`\n  }, {\n    isSponsored: true,\n    paymasterUrl: `https://api.pimlico.io/v2/sepolia/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction API Response Structure in JSON\nDESCRIPTION: This snippet provides a sample JSON response from the Safe Core API for a multisig transaction query. The response contains detailed metadata, including sender and recipient addresses, transaction value, execution and submission dates, gas parameters, confirmations, and optional fields such as block number and transaction hashes. All fields reflect the expected structure for multisig transaction objects and are produced by the API for use in client applications or transaction analysis workflows.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample GET Request with curl for Safe Operations API Endpoint (bash)\nDESCRIPTION: This is a bash shell snippet demonstrating a sample HTTP GET request to the Safe Operations API endpoint using curl. It includes HTTP headers specifying that the response should be JSON. The request targets the Safe address '0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75'. This snippet serves as a quick example for developers to test the API via command line.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Calling createChangeThresholdTx (parameter baseGas)\nDESCRIPTION: This TypeScript snippet shows how to pass the optional `baseGas` parameter to the `createChangeThresholdTx` function. The function sets the gas costs for the data used to trigger the safe transaction. The method returns a Safe transaction object that will update the threshold in the safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createchangethresholdtx.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createChangeThresholdTx(\n  threshold: 3,\n  {\n    baseGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Logging in with Privy\nDESCRIPTION: This snippet shows how to use the `login()` function provided by the `usePrivy()` hook to trigger the Privy login flow. This will open a popup prompting the user to log in via email or social account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/privy.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlogin()\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameter and Response Schemas in Safe API Reference - React TypeScript\nDESCRIPTION: This React (with TypeScript) code snippet renders documentation components for listing transactions associated with a Safe address API endpoint. It utilizes custom components such as <Parameters> and <Responses> to display details of both the allowed request parameters (including their required status, types, and descriptions) and the structure of the JSON responses expected from the endpoint. The relevant props include arrays of parameter definitions and structured JSON schema objects describing various transaction result types, such as multisig, module, and Ethereum transfers. It assumes dependencies on a documentation UI kit and that the parameters and responses arrays match backend OpenAPI schema. User input is primarily via HTTP parameters, and JSON objects are returned, with possible constraints such as a known pagination bug.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Parameters parameters={[{\"in\":\"path\",\"name\":\"address\",\"schema\":{\"type\":\"string\"},\"required\":true},{\"name\":\"ordering\",\"required\":false,\"in\":\"query\",\"description\":\"Which field to use when ordering the results.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"limit\",\"required\":false,\"in\":\"query\",\"description\":\"Number of results to return per page.\",\"schema\":{\"type\":\"integer\"}},{\"name\":\"offset\",\"required\":false,\"in\":\"query\",\"description\":\"The initial index from which to return the results.\",\"schema\":{\"type\":\"integer\"}}]} />\n<Responses responses={[{\"code\":\"200\",\"schema\":{}}]} />\n```\n\n----------------------------------------\n\nTITLE: Deploying a Safe using SafeFactory (v4) in TypeScript\nDESCRIPTION: Demonstrates the deprecated v4 method for deploying a Safe using the `SafeFactory` class from `@safe-global/protocol-kit`. This involves initializing the factory, defining the `SafeAccountConfig`, and calling the `deploySafe` method. The resulting `protocolKit` instance represents the deployed Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v5.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// old v4 code\nimport { SafeFactory, SafeAccountConfig } from '@safe-global/protocol-kit'\n\nconst safeFactory = await SafeFactory.init({\n   provider,\n   signer,\n   safeVersion // Optional\n})\n\nconst safeAccountConfig: SafeAccountConfig = {\n   owners: ['0x...', '0x...', '0x...'],\n   threshold: 2\n}\n\nconst protocolKit = await safeFactory.deploySafe({\n  safeAccountConfig,\n  saltNonce // Optional\n})\n\n// Confirm the Safe is deployed and fetch properties\nconsole.log('Is Safe deployed:', await protocolKit.isSafeDeployed())\nconsole.log('Safe Address:', await protocolKit.getAddress())\nconsole.log('Safe Owners:', await protocolKit.getOwners())\nconsole.log('Safe Threshold:', await protocolKit.getThreshold())\n```\n\n----------------------------------------\n\nTITLE: Computing EIP-712 Domain Separator in Solidity\nDESCRIPTION: Private view function to compute the EIP-712 domain separator used for signature verification. It encodes the domain fields including contract name, version, chainId, and contract address to produce a unique domain hash that prevents signature replay across different domains. This method facilitates secure off-chain signing compatible with the EIP-712 standard.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n  function getDomainSeparator() private view returns (bytes32) {\n      return keccak256(\n          abi.encode(\n              keccak256(\n                  \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n              ),\n              keccak256(bytes(\"TokenWithdrawModule\")),\n              keccak256(bytes(\"1\")),\n              block.chainid,\n              address(this)\n          )\n      );\n  }\n```\n\n----------------------------------------\n\nTITLE: Safe Creation Status Response JSON\nDESCRIPTION: This is a sample JSON response for the Get Safe Creation Status API endpoint.  It contains information about the Safe creation, creator, transaction hash, factory address, master copy, setup data, and decoded setup data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-06-25T11:18:48Z\",\n  \"creator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"transactionHash\": \"0x6404e0298423c092cc1ce486f3f72172a1c0f2f28a9b29f69e605ea825360ac5\",\n  \"factoryAddress\": \"0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC\",\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"setupData\": \"0xb63e800d00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000017062a1de2fe6b99be3d9d37841fed19f5738040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d3debaab2b8093e69109f23a75501f864f74e20000000000000000000000003a16e3090e32dded2250e862b9d5610bef13e93d0000000000000000000000000000000000000000000000000000000000000000\",\n  \"dataDecoded\": {\n    \"method\": \"setup\",\n    \"parameters\": [\n      {\n        \"name\": \"_owners\",\n        \"type\": \"address[]\",\n        \"value\": [\n          \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n        ]\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"value\": \"0x\"\n      },\n      {\n        \"name\": \"fallbackHandler\",\n        \"type\": \"address\",\n        \"value\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"payment\",\n        \"type\": \"uint256\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"paymentReceiver\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      }\n    ]\n  },\n  \"userOperation\": null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Modules: TypeScript\nDESCRIPTION: This snippet imports the necessary modules and types from the Safe API Kit, Protocol Kit, and types-kit libraries to create and manage Safe transactions in TypeScript.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\nimport Safe from '@safe-global/protocol-kit'\nimport {\n  MetaTransactionData,\n  OperationType\n} from '@safe-global/types-kit'\n```\n\n----------------------------------------\n\nTITLE: Obtaining Tokens via Monerium Sandbox Platform\nDESCRIPTION: Guides users on how to acquire test EURe tokens on Sepolia test network through Monerium's web interface, simulating a deposit to the Safe account to fund subsequent transfers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/monerium.mdx#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit\nDESCRIPTION: This code initializes the Safe Protocol Kit, which is a prerequisite for using the `createEnableFallbackHandlerTx` function. It requires a provider, signer, and the Safe address to be configured. This setup allows interacting with the Safe contracts on a specific blockchain and enables signing of transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Pending Transactions - Example Component\nDESCRIPTION: This snippet demonstrates how to use the `useSafe` hook and the `getPendingTransactions` function to fetch and display pending transactions. It imports `useSafe` from `@safe-global/safe-react-hooks` and renders the data as a JSON string.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getpendingtransactions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction PendingTransactions() {\n  const { getPendingTransactions } = useSafe()\n  const {\n    data,\n    // ...\n  } = getPendingTransactions()\n\n  return (\n    <>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default PendingTransactions\n```\n\n----------------------------------------\n\nTITLE: Safe List Response JSON\nDESCRIPTION: This JSON snippet represents a sample response from the API when querying Safes associated with a module or owner. It returns a list of Safe addresses within the `safes` array.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Usage - TypeScript\nDESCRIPTION: This code snippet exemplifies the usage of the `getSafeOperation` function, focusing on how to provide the `safeOperationHash` parameter. It highlights the input expected by the `getSafeOperation` method. The function retrieves a safe operation based on its hash value.  The example provides the structure of the code call using the parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperation = await apiKit.getSafeOperation(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Build and Add Composite Contract Signature using Safe Protocol Kit (TypeScript)\nDESCRIPTION: This code snippet shows how to aggregate multiple individual owner signatures of a nested Safe (`SAFE_2_3_ADDRESS`) into a single EIP-1271 compatible contract signature using the `buildContractSignature` utility function. This composite signature represents the approval of the nested Safe itself on a transaction. It is then added to the transaction object of the parent Safe (`safeTransaction`). Requires an array of `EthSafeSignature` objects from the nested Safe's owners and the nested Safe's address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Build the contract signature of SAFE_2_3_ADDRESS\nconst signatureSafe2_3 = await buildContractSignature(\n  Array.from(transactionSafe2_3.signatures.values()),\n  SAFE_2_3_ADDRESS\n)\n\n// Add the signatureSafe2_3 to safeTransaction\n// After this, the safeTransaction contains the signature from OWNER_1_ADDRESS, OWNER_2_ADDRESS, SAFE_1_1_ADDRESS and SAFE_2_3_ADDRESS\nsafeTransaction.addSignature(signatureSafe2_3)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit Client (TypeScript)\nDESCRIPTION: This snippet shows how to initialize the Safe API Kit client (`SafeApiKit`). It is a prerequisite for making API calls like confirming transactions and requires specifying the target blockchain network via the `chainId`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/confirmtransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: List Supported Tokens API Call (Safe Transaction Service) - cURL\nDESCRIPTION: Fetches a paginated list of tokens supported by the Safe Transaction Service. The endpoint allows filtering and searching by various token properties like name, address, symbol, and decimals. Pagination and ordering parameters are available to control the result set. The response provides details for each token, including type, address, name, symbol, decimals, logo URI, and trusted status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Confirming Transaction (JSON)\nDESCRIPTION: This JSON snippet presents a sample response after successfully confirming a multi-signature transaction. It contains the signature of the confirmation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queued Multisig Transaction with cURL\nDESCRIPTION: A cURL request example for deleting a queued but not executed multisig transaction. Only the proposer or a valid delegate who proposed the transaction can delete it.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-linea.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Signing a Message using Curl\nDESCRIPTION: Makes a POST request to sign a message for a given message hash. The endpoint requires the message hash as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Delete Delegate - TypeScript\nDESCRIPTION: This snippet removes a delegate from a Safe account using the Safe API Kit in TypeScript. It creates a `DeleteSafeDelegateProps` object with the delegate address, delegator address, and signer, then calls the `removeSafeDelegate` method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst delegateConfig: DeleteSafeDelegateProps = {\n        delegateAddress: ownerBAddress || '0x',\n        delegatorAddress: ownerAAddress || '0x',\n        signer: ownerA\n      }\n\n      // Remove Owner B as delegate of Owner A\n      await apiKit.removeSafeDelegate(delegateConfig)\n```\n\n----------------------------------------\n\nTITLE: Listing Token Transfers Using Safe Transaction Service API in Bash\nDESCRIPTION: Demonstrates how to retrieve the list of up to 1000 most recent token transfers associated with a specified Safe address using the Safe Transaction Service API via a curl GET request. Required dependencies include curl and an internet connection; expected query parameters can filter by from/to addresses, block numbers, dates, token type, etc. The endpoint requires the \\\"address\\\" path parameter, and optional query parameters such as block_number, value, limit, and offset can be provided. The output will be a paginated JSON response summarizing transfer events; limitation applies on maximal transfer count per request (1000), and invalid checksummed addresses result in 422 errors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Signing a Message via Safe Transaction API - TypeScript and cURL\nDESCRIPTION: This snippet demonstrates how to add a signature to a message given its unique message hash using the POST method on the /messages/{message_hash}/signatures/ endpoint. It requires the message hash as a path parameter and sends an empty JSON payload. The expected response status is 201 Created with an empty response body. Dependencies include access to the Safe transaction service API. The sample shows both a TypeScript example file reference and a cURL command for making the HTTP POST request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-messages-{message_hash}-signatures--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-base-sepolia.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit for Mainnet (TypeScript)\nDESCRIPTION: Initializes a new instance of the SafeApiKit. This instance is required to interact with the Safe Transaction Service API. The `chainId` parameter specifies the network to connect to.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafedelegates.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit for API Access (TypeScript)\nDESCRIPTION: This snippet shows the necessary code to initialize a SafeApiKit instance. It imports the SafeApiKit class and creates a new instance, configuring it with the desired chain ID (e.g., 1n for Ethereum Mainnet). This initialized instance is required to call Safe API functions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getincomingtransactions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for Multisig Transaction with Safe Transaction Service API (bash)\nDESCRIPTION: This snippet illustrates how to request an estimation of the safeTxGas for a pending multisig transaction on a Safe account using the Transaction Service API. It issues a POST request to the dedicated estimation endpoint, taking a Safe address as a path parameter and a transaction body as payload. The minimum requirement is a correct Safe address and the necessary HTTP headers (Accept and content-type set to application/json). The provided response indicates the estimated gas value required for transaction execution. Limitations include error responses for invalid data, incorrect or unfound Safe addresses, or transaction validation errors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for a Multisig Transaction via POST /api/v1/safes/{address}/multisig-transactions/estimations/\nDESCRIPTION: This snippet shows how to estimate the gas costs for a multisig transaction using a POST request. It includes example cURL commands, request headers, and sample response indicating the estimated gas. Dependencies involve correct API endpoint access with a valid Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Get User Operation by Hash - TypeScript Example\nDESCRIPTION: This TypeScript code snippet is an example demonstrating how to retrieve a user operation by its hash.  It likely makes an API call to fetch the data from the server using the provided hash. The code is dependent on external modules as suggested by the path. It would likely use an HTTP client (e.g., axios, fetch) to send a GET request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/celo/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring bundlerOptions.bundlerUrl for safeOperations (TypeScript)\nDESCRIPTION: Illustrates setting the mandatory `bundlerUrl` parameter within the `bundlerOptions` object for the `safeOperations` function. This string specifies the URL endpoint for the ERC-4337 bundler.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsafeOperations(\n  { bundlerUrl: 'https://...' },\n  {\n    isSponsored: true,\n    paymasterUrl: 'https://...',\n    sponsorshipPolicyId: 'abc',\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    amountToApprove: 123n\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initialize Safe Protocol Kit\nDESCRIPTION: Initializes the Safe Protocol Kit with a provider, signer, and Safe address. This sets up the `protocolKit` instance that is used to call the `createMessage` function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/createmessage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Account Abstraction UserOperation Transaction Data for Safe Account\nDESCRIPTION: This JSON object represents a complete UserOperation for a Safe account using EIP-4337 Account Abstraction. It contains initialization code, calldata, gas parameters, paymaster details with verification data, and signature information pointing to the entry point contract at 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining State Variables for TokenWithdrawModule in Solidity\nDESCRIPTION: Declaration of constant and state variables used within the TokenWithdrawModule. The PERMIT_TYPEHASH defines the EIP-712 struct hash used in signature verification. safeAddress and tokenAddress store the fixed Safe and ERC20 token contract addresses. The nonces mapping tracks sequential nonces per beneficiary to prevent replay attacks and ensure sequential withdrawal ordering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nbytes32 public immutable PERMIT_TYPEHASH =\n    keccak256(\n      \"TokenWithdrawModule(uint256 amount,address beneficiary,uint256 nonce,uint256 deadline)\"\n    );\naddress public immutable safeAddress;\naddress public immutable tokenAddress;\nmapping(address => uint256) public nonces;\n```\n\n----------------------------------------\n\nTITLE: Adding a Safe Delegate with all parameters in TypeScript\nDESCRIPTION: This example focuses on providing all fields required by addSafeDelegate, including the optional safeAddress. It illustrates the minimal and complete payload for adding a delegate, showing valid property names and their usage when calling the method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafedelegate.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = await apiKit.addSafeDelegate({\n  safeAddress: '0x...',\n  delegateAddress: '0x...',\n  delegatorAddress: '0x...',\n  label: 'abc',\n  signer\n})\n```\n\n----------------------------------------\n\nTITLE: EIP712 Delegate Signature Data Structure (Python-like Pseudocode)\nDESCRIPTION: This snippet provides the EIP712-compliant data structure required for signing when creating a delegate in the Safe Transaction Service API. It outlines the domain and message types to be included, notably using TOTP for the totp field (Unix UTC epoch time divided by 3600). When implementing, ensure web3 libraries support EIP712 signing. The expected input is delegateAddress and totp, and outputs a typed data object to be signed by the delegate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n{\n   \"types\": {\n       \"EIP712Domain\": [\n           {\"name\": \"name\", \"type\": \"string\"},\n           {\"name\": \"version\", \"type\": \"string\"},\n           {\"name\": \"chainId\", \"type\": \"uint256\"},\n       ],\n       \"Delegate\": [\n           {\"name\": \"delegateAddress\", \"type\": \"address\"},\n           {\"name\": \"totp\", \"type\": \"uint256\"},\n       ],\n   },\n   \"primaryType\": \"Delegate\",\n   \"domain\": {\n       \"name\": \"Safe Transaction Service\",\n       \"version\": \"1.0\",\n       \"chainId\": chain_id,\n   },\n   \"message\": {\n       \"delegateAddress\": delegate_address,\n       \"totp\": totp,\n   },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom SafeClient Extension (TypeScript)\nDESCRIPTION: This example shows how to define a custom extension function (`extendFunction`) that adds new methods to the `SafeClient`. The function receives the base `client` instance and returns an object containing the new functionality (e.g., `getBalance`). Passing this function to `safeClient.extend` creates a new client instance incorporating the custom method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/extend.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SafeClient } from '@safe-global/sdk-starter-kit'\nimport { safeClient } from './setup.ts'\n\nconst extendFunction = (client: SafeClient) => ({\n  getBalance: async () => {\n    return client.protocolKit.getBalance()\n  }\n})\n\nconst safeClientWithGetBalance = safeClient.extend(extendFunction)\n\nconst balance = await safeClientWithGetBalance.getBalance()\n```\n\n----------------------------------------\n\nTITLE: Importing Safe and Web3 Libraries\nDESCRIPTION: This snippet imports the necessary modules. It imports the `Safe` class from the `@safe-global/protocol-kit` package, which provides the core functionality for interacting with Safe accounts. It also highlights the need to import a web3 library of choice, such as viem, to manage the provider and signer for interacting with the blockchain.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/passkeys.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Safe Balances (JSON Array)\nDESCRIPTION: Shows an example JSON array containing balance objects for a Safe. It includes entries for native ETH and ERC20 tokens, with details such as token address, token info (name, symbol, decimals, logo URI), and balance amount in string format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_60\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the initialization of the Safe API Kit, highlighting the changes from the previous `safe-service-client` implementation. It shows how to import the new `SafeApiKit` and initialize it with the `txServiceUrl` and `ethAdapter` parameters.  Make sure to replace `https://your-transaction-service-url` with your actual transaction service URL and provide a valid `ethAdapter` instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v1.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// old\nimport SafeServiceClient from '@safe-global/safe-service-client'\n\nconst safeService = new SafeServiceClient({\n  txServiceUrl: 'https://your-transaction-service-url',\n  ethAdapter\n})\n\n// new\nimport SafeApiKit from '@safe-global/api-kit'\n\nconst apiKit = new SafeApiKit({\n  txServiceUrl: 'https://your-transaction-service-url',\n  ethAdapter\n})\n```\n\n----------------------------------------\n\nTITLE: Type Renaming from SafeTransactionEIP712Args to SafeEIP712Args\nDESCRIPTION: This snippet describes the renaming of the type 'SafeTransactionEIP712Args' to 'SafeEIP712Args' in the SDK, indicating that EIP-712 signing is no longer exclusive to transactions. It is primarily a documentation change to clarify the scope of the type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v3.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* The type SafeTransactionEIP712Args was renamed to SafeEIP712Args to reflect that EIP-712 is used for more than just transactions. */\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Information Response\nDESCRIPTION: This JSON snippet represents a sample response from the Safe information endpoint. It contains the address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version of the Safe. This data is returned when a GET request is made to the `/api/v1/safes/{address}/` endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction - TypeScript\nDESCRIPTION: This snippet appears to be a placeholder or reference to a TypeScript file.  It indicates that the actual implementation of creating a multisig transaction is likely located in the referenced file.  It doesn't provide any executable code directly. It serves as a pointer to external code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/blast/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\n----------------------------------------\n\nTITLE: Recording Deployed Safe Contract Addresses - JavaScript\nDESCRIPTION: This JavaScript object maps Safe singleton contract names to their deployed addresses. It provides a straightforward copy-paste way for users to save and organize deployed contract addresses per contract type, as needed for official registration and tracking. Inputs are contract names and addresses; output is a JS object. No external dependencies.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-contracts-deployment.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\ncompatibility_fallback_handler: `0x017062a1dE2FE6b99BE3d9d37841FeD19F573804`,\ncreate_call: `0xB19D6FFc2182150F8Eb585b79D4ABcd7C5640A9d`,\ngnosis_safe: `0x69f4D1788e39c87893C980c06EdF4b7f686e2938`,\ngnosis_safe_l2: `0xfb1bffC9d739B8D520DaF37dF666da4C687191EA`,\nmulti_send: `0x998739BFdAAdde7C933B942a68053933098f9EDa`,\nmulti_send_call_only: `0xA1dabEF33b3B82c7814B6D82A79e50F4AC44102B`,\nproxy_factory: `0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC`,\nsign_message_lib: `0x98FFBBF51bb33A056B08ddf711f289936AafF717`,\nsimulate_tx_accessor: `0x727a77a074D1E6c4530e814F89E618a3298FC044`\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Owner using curl\nDESCRIPTION: This snippet demonstrates how to use `curl` to query the Safe Transaction Service API for a list of Safe addresses owned by a specific address. It sends a GET request to the `/api/v1/owners/{address}/safes/` endpoint, replacing `{address}` with the owner address, and includes standard Accept and Content-Type headers. The expected output is a JSON object containing a list of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Multisig Confirmations Response Format in JSON\nDESCRIPTION: Sample JSON response showing the list of confirmations for a multisig transaction. Each confirmation includes the owner address, submission date, transaction hash, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Delegate with Transaction Service API (cURL)\nDESCRIPTION: This cURL command sends a POST request to the Safe Transaction Service API to create a new Safe delegate. Required headers are set for JSON communication. Input must include a valid EIP712 signature within the request body, though actual request body content is omitted here. A successful request results in an empty response and HTTP 202 status. Ensure signature and delegate parameters adhere to specified schema.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: EIP-712 Data Structure - Python\nDESCRIPTION: Defines the EIP-712 data structure required to delete a queued multisig transaction. It specifies the types, domain, and message schemas. The `totp` parameter is calculated with `T0=0` and `Tx=3600`, representing the Unix UTC epoch time divided by 3600.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Safe deployment transactions with on-chain identifier in TypeScript\nDESCRIPTION: Example code demonstrating how to include the generated on-chain identifier at the end of Safe deployment transaction data using the Protocol Kit or Relay Kit SDKs, enabling on-chain tracking of deployments.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onchain-tracking.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe, { OnchainAnalyticsProps } from '@safe-global/protocol-kit'\n\nconst onchainAnalytics: OnchainAnalyticsProps = {\n  project: 'YOUR_PROJECT_NAME' // Required. Always use the same value for your project.\n  platform: 'CURRENT_PLATFORM' // Optional\n}\n\nconst protocolKit = await Safe.init({\n  // ...\n  onchainAnalytics\n})\n\n// Execute the deployment\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Safe4337Pack } from '@safe-global/relay-kit'\nimport { OnchainAnalyticsProps } from '@safe-global/protocol-kit'\n\nconst onchainAnalytics: OnchainAnalyticsProps = {\n  project: 'YOUR_PROJECT_NAME' // Required. Always use the same value for your project.\n  platform: 'CURRENT_PLATFORM' // Optional\n}\n\nconst safe4337Pack = await Safe4337Pack.init({\n  // ...\n  onchainAnalytics\n})\n\n// Execute the deployment\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit and Safe4337Pack Instances in TypeScript\nDESCRIPTION: Shows how to instantiate the SafeApiKit for interaction with the Safe protocol on a specified blockchain (e.g., Ethereum Mainnet with chainId 1) and asynchronously initialize Safe4337Pack with desired options. This setup is required before performing operations such as creating, signing, or adding Safe user operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafeoperation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\nimport Safe4337Pack from '@safe-global/relay-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n // Mainnet\n})\n\nexport const safe4337Pack = await Safe4337Pack.init({\n  // options\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Module Address using curl\nDESCRIPTION: A curl request to retrieve a list of Safe accounts that have a specific module enabled. The endpoint requires the module address as a path parameter and returns an array of Safe addresses in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Calling isValidSignature with Example Parameters - TypeScript\nDESCRIPTION: This snippet provides an example of how to call the `isValidSignature` method, specifying the message hash and the signature. It showcases how to use the method with example inputs. The actual message hash and signature need to be replaced with valid values for a specific use case.  The method returns a boolean indicating the validity of the signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/isvalidsignature.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValidSignature = await protocolKit.isValidSignature(\n  '0x...', \n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining API Request Parameters and Response Schema for Incoming Transfers Endpoint\nDESCRIPTION: This snippet describes the query parameters accepted by the API for listing incoming transfers, including filters like block number, execution date, token address, and transfer value. It also defines the structure of successful (200) and error (422) responses, detailing the data fields like transaction hash, transfer type, timestamp, and token info. The schema employs references for complex objects and provides example values for pagination links.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{ \"parameters\": [ { \"in\": \"path\", \"name\": \"address\", \"schema\": { \"type\": \"string\" }, \"required\": true }, { \"in\": \"query\", \"name\": \"_from\", \"schema\": { \"type\": \"string\" } }, { \"in\": \"query\", \"name\": \"block_number\", \"schema\": { \"type\": \"number\" } }, { \"in\": \"query\", \"name\": \"block_number__gt\", \"schema\": { \"type\": \"number\" } }, { \"in\": \"query\", \"name\": \"block_number__lt\", \"schema\": { \"type\": \"number\" } }, { \"in\": \"query\", \"name\": \"execution_date__gte\", \"schema\": { \"type\": \"string\", \"format\": \"date-time\" } }, { \"in\": \"query\", \"name\": \"execution_date__lte\", \"schema\": { \"type\": \"string\", \"format\": \"date-time\" } }, { \"in\": \"query\", \"name\": \"execution_date__gt\", \"schema\": { \"type\": \"string\", \"format\": \"date-time\" } }, { \"in\": \"query\", \"name\": \"execution_date__lt\", \"schema\": { \"type\": \"string\", \"format\": \"date-time\" } }, { \"in\": \"query\", \"name\": \"to\", \"schema\": { \"type\": \"string\" } }, { \"in\": \"query\", \"name\": \"token_address\", \"schema\": { \"type\": \"string\" } }, { \"in\": \"query\", \"name\": \"transaction_hash\", \"schema\": { \"type\": \"string\" } }, { \"in\": \"query\", \"name\": \"value\", \"schema\": { \"type\": \"number\" } }, { \"in\": \"query\", \"name\": \"value__gt\", \"schema\": { \"type\": \"number\" } }, { \"in\": \"query\", \"name\": \"value__lt\", \"schema\": { \"type\": \"number\" } }, { \"in\": \"query\", \"name\": \"erc20\", \"schema\": { \"type\": \"boolean\" } }, { \"in\": \"query\", \"name\": \"erc721\", \"schema\": { \"type\": \"boolean\" } }, { \"in\": \"query\", \"name\": \"ether\", \"schema\": { \"type\": \"boolean\" } }, { \"name\": \"limit\", \"required\": false, \"in\": \"query\", \"description\": \"Number of results to return per page.\", \"schema\": { \"type\": \"integer\" } }, { \"name\": \"offset\", \"required\": false, \"in\": \"query\", \"description\": \"The initial index from which to return the results.\", \"schema\": { \"type\": \"integer\" } } ], \"responses\": [ { \"code\": \"200\", \"schema\": {}, \"content\": { \"application/json\": { \"schema\": { \"refName\": \"PaginatedTransferWithTokenInfoResponseList\", \"type\": \"object\", \"required\": [\"count\", \"results\"], \"properties\": { \"count\": { \"type\": \"integer\", \"example\": 123 }, \"next\": { \"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=400&limit=100\" }, \"previous\": { \"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=200&limit=100\" }, \"results\": { \"type\": \"array\", \"items\": { \"refName\": \"TransferWithTokenInfoResponse\", \"type\": \"object\", \"properties\": { \"type\": { \"type\": \"string\", \"description\": \"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\", \"readOnly\": true }, \"executionDate\": { \"type\": \"string\", \"format\": \"date-time\" }, \"blockNumber\": { \"type\": \"integer\" }, \"transactionHash\": { \"type\": \"string\" }, \"to\": { \"type\": \"string\" }, \"value\": { \"type\": [\"string\", \"null\"] }, \"tokenId\": { \"type\": [\"string\", \"null\"] }, \"tokenAddress\": { \"type\": [\"string\", \"null\"] }, \"transferId\": { \"type\": \"string\", \"readOnly\": true, \"description\": \"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\" }, \"tokenInfo\": { \"refName\": \"TokenInfoResponse\", \"type\": \"object\", \"properties\": { \"type\": { \"type\": \"string\", \"readOnly\": true }, \"address\": { \"type\": \"string\" }, \"name\": { \"type\": \"string\" }, \"symbol\": { \"type\": \"string\" }, \"decimals\": { \"type\": \"integer\" }, \"logoUri\": { \"type\": \"string\", \"readOnly\": true }, \"trusted\": { \"type\": \"boolean\" } }, \"required\": [\"address\", \"decimals\", \"logoUri\", \"name\", \"symbol\", \"trusted\", \"type\"] }, \"from\": { \"type\": \"string\" } }, \"required\": [\"blockNumber\", \"executionDate\", \"from\", \"to\", \"tokenId\", \"tokenInfo\", \"transactionHash\", \"transferId\", \"type\", \"value\"] } } }}} } ] }, \"description\": \"\" }, { \"code\": \"422\", \"schema\": {}, \"content\": { \"application/json\": { \"schema\": { \"refName\": \"CodeErrorResponse\", \"type\": \"object\", \"properties\": { \"code\": { \"type\": \"integer\" }, \"message\": { \"type\": \"string\" }, \"arguments\": { \"type\": \"array\", \"items\": {} } }, \"required\": [\"arguments\", \"code\", \"message\"] } } }, \"description\": \"Safe address checksum not valid\" } } ] }\n```\n\n----------------------------------------\n\nTITLE: Deploying a Safe using the Safe class (v5) in TypeScript\nDESCRIPTION: Illustrates the current v5 method for deploying a Safe using the `Safe` class directly from `@safe-global/protocol-kit`. It involves initializing the `Safe` class with predicted Safe properties, creating a deployment transaction using `createSafeDeploymentTransaction`, executing this transaction via an external signer, and then reconnecting the `protocolKit` instance to the newly deployed Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v5.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// new v5 code\nimport Safe, { PredictedSafeProps } from '@safe-global/protocol-kit'\n\nconst predictedSafe: PredictedSafeProps = {\n  safeAccountConfig: {\n    owners: ['0x...', '0x...', '0x...'],\n    threshold: 2\n  },\n  safeDeploymentConfig: {\n    saltNonce, // Optional\n    safeVersion // Optional\n  }\n}\n\nlet protocolKit = await Safe.init({\n  provider,\n  signer,\n  predictedSafe\n})\n\n// you can predict the address of your Safe if the Safe version is `v1.3.0` or above\nconst safeAddress = await protocolKit.getAddress()\n\nconst deploymentTransaction = await protocolKit.createSafeDeploymentTransaction()\n\n// Execute this transaction using the integrated signer or your preferred external Ethereum client\nconst client = await protocolKit.getSafeProvider().getExternalSigner()\n\nconst txHash = await client.sendTransaction({\n  to: deploymentTransaction.to,\n  value: BigInt(deploymentTransaction.value),\n  data: deploymentTransaction.data as `0x${string}`,\n  chain: sepolia\n})\n\nconst txReceipt = await client.waitForTransactionReceipt({ hash: txHash })\n\n// Reconnect to the newly deployed Safe using the protocol-kit\nprotocolKit = await protocolKit.connect({ safeAddress })\n\n// Confirm the Safe is deployed and fetch properties\nconsole.log('Is Safe deployed:', await protocolKit.isSafeDeployed())\nconsole.log('Safe Address:', await protocolKit.getAddress())\nconsole.log('Safe Owners:', await protocolKit.getOwners())\nconsole.log('Safe Threshold:', await protocolKit.getThreshold())\n```\n\n----------------------------------------\n\nTITLE: Adding a Transaction Confirmation using curl (Bash)\nDESCRIPTION: This curl command sends a POST request to the Safe Transaction Service API endpoint `/api/v1/safe-operations/{safe_operation_hash}/confirmations/` to add a confirmation for the specified `safe_operation_hash`. It requires necessary headers and the signature data (represented by the signature parameter in the request body) in JSON format. The example shows an empty JSON object `{}` as a placeholder for the body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Hashing EIP712 Data - Python\nDESCRIPTION: Presents a Python snippet illustrating how to structure the EIP712 data required for signing delegate operations. Specifies types, domain, and message fields for generating the signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Token List Query (json)\nDESCRIPTION: This JSON represents the sample response for listing tokens from the Safe Transaction Service. It includes the total count of tokens, pagination URLs, and an array of token objects. Each object describes a token supported in the service with its ERC20 type, contract address, name, symbol, decimals, logo URI, and trusted boolean. Partial data (e.g., truncated results) or omitted fields may be present for brevity.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1846,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ERC20\",\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n      \"name\": \"0x5555.com\",\n      \"symbol\": \"0x5555.com\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n      \"trusted\": false\n    }\n    // ...\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit instance in TypeScript\nDESCRIPTION: This snippet shows how to create and export an instance of the `SafeApiKit` class. It requires providing configuration, such as the `chainId`, to specify the blockchain network the API client will interact with. This instance is typically imported by other modules to perform Safe-related API calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: List Messages API Request (GET)\nDESCRIPTION: This snippet is a GET request used to retrieve a list of messages for a given Safe account. It takes the Safe account address as a path parameter. The request aims to return a paginated list of messages, including details such as creation and modification timestamps, the message hash, the message itself, proposedBy, safeAppId and confirmation details.  It utilizes cURL to demonstrate the API call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_12\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for Multisig Transaction (cURL/bash)\nDESCRIPTION: This bash cURL command sends a POST request to the '/api/v1/safes/{address}/multisig-transactions/estimations/' endpoint to estimate the 'safeTxGas' required for a specific multisig transaction. It requires proper address substitution, includes JSON headers, and an empty data payload. The output is a JSON object with the gas estimate. Internet access and valid Safe addresses are required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Address with getAddress()\nDESCRIPTION: Indicates that `getAddress()` method is now asynchronous and returns a Promise. Developers should `await` its result when retrieving the Safe contract's address post-deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v1.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// old\nconst safeAddress = safeSdk.getAddress()\n\n// new\nconst safeAddress = await protocolKit.getAddress()\n```\n\n----------------------------------------\n\nTITLE: Sample Collectibles Response\nDESCRIPTION: Example JSON response from the collectibles endpoint showing a paginated structure with count, navigation links, and results array containing collectible details like address, token metadata, and image URIs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\n      \"tokenName\": \"SampleNft\",\n      \"tokenSymbol\": \"SN\",\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\n      \"id\": \"1\",\n      \"uri\": null,\n      \"name\": null,\n      \"description\": null,\n      \"imageUri\": null,\n      \"metadata\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Confirm Safe Transaction by Hash\nDESCRIPTION: This code snippet shows how to confirm a Safe transaction by its hash using `safeOperationsClient.confirm`. It requires the `safeTxHash` to identify the transaction to be confirmed. It assumes that `safeOperationsClient` is initialized and available in the scope.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/confirmsafeoperation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeOperationsClient.confirm({\n  safeTxHash: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient with Provider, Signer, and Safe Address in TypeScript\nDESCRIPTION: This snippet outlines how to create and export a new SafeClient using the createSafeClient function from the @safe-global/sdk-starter-kit library. It expects provider and signer objects, as well as a specified Safe smart contract address ('safeAddress'). The resulting safeClient can be used for further extensions such as on-chain message functionality. Dependencies include the @safe-global/sdk-starter-kit package and valid provider/signer instances; users must input a valid Ethereum-compatible address for 'safeAddress'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Providing the safeOperationHash Parameter in TypeScript\nDESCRIPTION: This snippet highlights the usage of the `safeOperationHash` parameter within the `confirmSafeOperation` method. The first argument passed is the string hash identifying the specific Safe operation to which the confirmation should be added.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/confirmsafeoperation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.confirmSafeOperation(\n  '0x...', // focus\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Creation Status using cURL\nDESCRIPTION: Demonstrates how to make a GET request using cURL to the `/api/v1/safes/{address}/creation/` endpoint to retrieve detailed information about a specific Safe's creation transaction. Requires replacing the example address `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` with the actual Safe address. Accepts and expects JSON content.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for User Operations\nDESCRIPTION: This JSON object represents a sample response from the API. It includes details of user operations associated with a specific Safe account, such as ethereumTxHash, sender, userOperationHash, nonce, and safeOperation, including confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000001000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b526000000000000000000000000000000000000000000000000000000000000014000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ]\n      }\n    ]\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating confirmTransaction Parameters (TypeScript)\nDESCRIPTION: This concise snippet is used within the documentation to specifically illustrate how the `safeTxHash` and `signature` parameters are passed to the `confirmTransaction` function call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/confirmtransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await apiKit.confirmTransaction(\n  '0x...', // safeTxHash\n  '0x...' // signature\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Transaction Value (`value`) in `safeClient.send` in TypeScript\nDESCRIPTION: Demonstrates setting the amount of native tokens to transfer (`value`) within the `transactions` array for `safeClient.send`. The value should be provided as a string representing the amount in wei.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating the Migration Script File Structure (Bash)\nDESCRIPTION: Creates the `src` directory using `mkdir` and an empty `migrate.ts` file using `touch` within that directory. This file will contain the TypeScript code for the migration logic.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir src\ntouch src/migrate.ts\n```\n\n----------------------------------------\n\nTITLE: Setting up the Safe API Kit\nDESCRIPTION: Shows how to initialize the Safe API Kit with a specific chain ID for further interaction with the Safe API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeinfo.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for a Multisig Transaction via API\nDESCRIPTION: This section outlines the API endpoint for estimating `safeTxGas` for a given Safe address, aiding users in predicting transaction costs prior to execution. It specifies required parameters, request headers, example curl command, and the JSON response with gas estimation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/arbitrum/-v1-safes-{address}-multisig-transactions--post.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Get Safe Status API - cURL Example\nDESCRIPTION: This cURL command sends a GET request to the `/api/v1/safes/{address}/` endpoint of the safe-transaction-xlayer API to retrieve the status of a Safe account.  It specifies the address in the URL. The request uses the `application/json` content type and requires a specific address as input. The output is expected to be a JSON response containing details like the address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version of the Safe. This is a GET request, and no parameters are passed within the body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Multisig Transaction via API\nDESCRIPTION: Demonstrates how to create a multi-signature transaction for a given Safe account using the Safe Core API. It includes a reference to a TypeScript example and a cURL command showing a POST request to the `/api/v1/safes/{address}/multisig-transactions/` endpoint. The API creates the transaction or updates its confirmations and returns transaction details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/aurora/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Transaction via POST /api/v1/safes/{address}/multisig-transactions/\nDESCRIPTION: This snippet demonstrates how to create a multisignature transaction for a specific Safe address using a POST request. It includes sample cURL command, request headers, and a response indicating the transaction's gas estimate. Dependencies include an API client with appropriate authentication and a valid Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Using the signTypedData Method with Optional Method Version\nDESCRIPTION: This focused snippet demonstrates how to call the signTypedData method with both the required eip712Data parameter and the optional methodVersion parameter set to 'v4'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtypeddata.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await protocolKit.signTypedData(\n  eip712Data,\n  'v4'\n)\n```\n\n----------------------------------------\n\nTITLE: Example usage `getOwnersWhoApprovedTx` (TypeScript)\nDESCRIPTION: This code snippet shows how to call `getOwnersWhoApprovedTx`.  The code returns a `Promise<string[]>` which resolves to a list of owners that approved the transaction hash passed in.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getownerswhoapprovedtx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ownerAddresses = await protocolKit.getOwnersWhoApprovedTx(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Transfer API - JSON\nDESCRIPTION: This JSON response represents the output of querying a specific transfer by its ID from the Safe Transaction Service API. It contains details about the transfer such as execution date, sender and recipient addresses, value, transaction hash, as well as tokenInfo, which can be null for ether transfers. The response fields match those included in the list transfers endpoint for a single transfer object. No error message is shown; errors may be returned for invalid or non-existent transferId values.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Incoming Transfers API Endpoint and Response Schema\nDESCRIPTION: This snippet describes the API route '/api/v1/safes/{address}/incoming-transfers/' for retrieving incoming transfers with support for filtering parameters. It details response schemas for successful responses ('200') and error responses ('422'). It specifies query parameters like 'from', 'block_number', 'to', and token filters, along with paginated response structure including transfer details and token info.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parameters\": [\n    {\"in\": \"path\", \"name\": \"address\", \"schema\": {\"type\": \"string\"}, \"required\": true},\n    {\"in\": \"query\", \"name\": \"_from\", \"schema\": {\"type\": \"string\"}},\n    {\"in\": \"query\", \"name\": \"block_number\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"block_number__gt\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"block_number__lt\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"execution_date__gte\", \"schema\": {\"type\": \"string\", \"format\": \"date-time\"}},\n    {\"in\": \"query\", \"name\": \"execution_date__lte\", \"schema\": {\"type\": \"string\", \"format\": \"date-time\"}},\n    {\"in\": \"query\", \"name\": \"execution_date__gt\", \"schema\": {\"type\": \"string\", \"format\": \"date-time\"}},\n    {\"in\": \"query\", \"name\": \"execution_date__lt\", \"schema\": {\"type\": \"string\", \"format\": \"date-time\"}},\n    {\"in\": \"query\", \"name\": \"to\", \"schema\": {\"type\": \"string\"}},\n    {\"in\": \"query\", \"name\": \"token_address\", \"schema\": {\"type\": \"string\"}},\n    {\"in\": \"query\", \"name\": \"transaction_hash\", \"schema\": {\"type\": \"string\"}},\n    {\"in\": \"query\", \"name\": \"value\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"value__gt\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"value__lt\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"erc20\", \"schema\": {\"type\": \"boolean\"}},\n    {\"in\": \"query\", \"name\": \"erc721\", \"schema\": {\"type\": \"boolean\"}},\n    {\"in\": \"query\", \"name\": \"ether\", \"schema\": {\"type\": \"boolean\"}},\n    {\"name\": \"limit\", \"required\": false, \"in\": \"query\", \"description\": \"Number of results to return per page.\", \"schema\": {\"type\": \"integer\"}},\n    {\"name\": \"offset\", \"required\": false, \"in\": \"query\", \"description\": \"The initial index from which to return the results.\", \"schema\": {\"type\": \"integer\"}}\n  ],\n  \"responses\": {\n    \"200\": {\n      \"schema\": {\n        \"refName\": \"PaginatedTransferWithTokenInfoResponseList\",\n        \"type\": \"object\",\n        \"required\": [\"count\", \"results\"],\n        \"properties\": {\n          \"count\": {\"type\": \"integer\", \"example\": 123},\n          \"next\": {\"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=400&limit=100\"},\n          \"previous\": {\"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=200&limit=100\"},\n          \"results\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"refName\": \"TransferWithTokenInfoResponse\",\n              \"type\": \"object\",\n              \"properties\": {\n                \"type\": {\"type\": \"string\", \"description\": \"Transfer type (e.g., ETH, ERC20, ERC721)\"},\n                \"executionDate\": {\"type\": \"string\", \"format\": \"date-time\"},\n                \"blockNumber\": {\"type\": \"integer\"},\n                \"transactionHash\": {\"type\": \"string\"},\n                \"to\": {\"type\": \"string\"},\n                \"value\": {\"type\": [\"string\", \"null\"]},\n                \"tokenId\": {\"type\": [\"string\", \"null\"]},\n                \"tokenAddress\": {\"type\": [\"string\", \"null\"]},\n                \"transferId\": {\"type\": \"string\", \"readOnly\": true, \"description\": \"Unique identifier calculated as transfer-specific log or trace index\"},\n                \"tokenInfo\": {\"refName\": \"TokenInfoResponse\", \"type\": \"object\", \"properties\": {\"type\": {\"type\": \"string\", \"readOnly\": true}, \"address\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"symbol\": {\"type\": \"string\"}, \"decimals\": {\"type\": \"integer\"}, \"logoUri\": {\"type\": \"string\", \"readOnly\": true}, \"trusted\": {\"type\": \"boolean\"}}, \"required\": [\"address\", \"decimals\", \"logoUri\", \"name\", \"symbol\", \"trusted\", \"type\"]},\n                \"from\": {\"type\": \"string\"}\n              },\n              \"required\": [\"blockNumber\", \"executionDate\", \"from\", \"to\", \"tokenId\", \"tokenInfo\", \"transactionHash\", \"transferId\", \"type\", \"value\"]\n            }\n          }\n        }\n      }\n    },\n    \"422\": {\n      \"schema\": {\"refName\": \"CodeErrorResponse\"},\n      \"content\": {\n        \"application/json\": {\n          \"schema\": {\"refName\": \"CodeErrorResponse\"}\n        }\n      },\n      \"description\": \"Safe address checksum not valid\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Safe Allowance Module Programmatically in TypeScript\nDESCRIPTION: This snippet shows how to enable the Allowance module on an existing Safe Smart Account using the Safe Protocol Kit. It initializes the Safe instance with the provider, signer, and safe address, retrieves the allowance module deployment for the specified network, creates a transaction to enable the module, and executes the transaction. Dependencies include '@safe-global/protocol-kit' and '@safe-global/safe-modules-deployments'. Inputs include RPC_URL, OWNER_1_PRIVATE_KEY, safeAddress, and network identifier. The output is the executed transaction response confirming the module enablement.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/agent-with-spending-limit.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\\nimport { getAllowanceModuleDeployment } from '@safe-global/safe-modules-deployments'\\n\\nconst preExistingSafe = await Safe.init({\\n  provider: RPC_URL,\\n  signer: OWNER_1_PRIVATE_KEY,\\n  safeAddress: safeAddress\\n})\\n\\n// Add Module\\nconst allowanceModule = getAllowanceModuleDeployment({ network: '11155111' })!\\nconst safeTransaction = await preExistingSafe.createEnableModuleTx(\\n  allowanceModule.networkAddresses['11155111']\\n)\\nconst txResponse = await preExistingSafe.executeTransaction(safeTransaction)\\nconsole.log(txResponse)\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Receipt in TypeScript\nDESCRIPTION: This TypeScript code snippet fetches the receipt of a user operation using `waitForUserOperationReceipt` method from the bundler client, using the `userOperationHash` returned after submitting the operation.  It then extracts the `transactionHash` from the receipt to get details about the transaction from a block explorer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst receipt = await bundlerClient.waitForUserOperationReceipt({\n    hash: userOperationHash\n  })\n\n  const transactionHash = receipt.receipt.transactionHash\n```\n\n----------------------------------------\n\nTITLE: Get Transfer Details via API\nDESCRIPTION: This snippet describes the GET endpoint for retrieving detailed information about a specific transfer using its transfer ID. It specifies the required path parameter, possible response codes, and their payload schemas. It includes a cURL request example and a sample JSON response showing transfer details similar to those in the list endpoint, suitable for client integration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: TypeScript code for listing Safe's module transactions (example file path)\nDESCRIPTION: This TypeScript snippet indicates the source of the code sample for listing Safe's module transactions, providing context for developers to locate the example implementation. It references an example file path within the project repository.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/mantle/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Enabling Fallback Handler (with refundReceiver)\nDESCRIPTION: This code sets the `refundReceiver` option. This defines the address that will receive the gas payment refund, or a zero address if no refund is desired.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableFallbackHandlerTx(\n  '0x...',\n  options: {\n    refundReceiver: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying Safe Contracts for Infura-supported Chains - Bash\nDESCRIPTION: This shell command executes the preconfigured NPM script 'deploy-all' with your chain ID as an argument. It deploys all singleton contracts to the specified network using the values set in .env. Dependencies: Node.js, npm, proper .env configuration, and that the script exists in package.json. The input is your chain ID; output is deployed contracts on-chain.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-contracts-deployment.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy-all your_chain_id\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Message Details (JSON)\nDESCRIPTION: Provides an example JSON response for a Get Message API call, including timestamps for creation and modification, Safe address, messageHash, message content, the proposing address, safeAppId (nullable), a list of confirmation objects (each with creation and modification timestamps, owner, signature, and signatureType), and preparedSignature. Inputs are derived from the path, and the response structure is used for processing front-end or backend logic.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Approving Safe Transaction Hash with Minimal Options\nDESCRIPTION: This snippet demonstrates how to call `approveTransactionHash` with only the required parameter `safeTransactionHash`. It highlights the function usage when no optional parameters are provided.  It's a simplified example showing the core functionality.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionResponse = await protocolKit.approveTransactionHash(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Safe Transactions API\nDESCRIPTION: This JSON object demonstrates the structure of the response returned by the API when fetching all transactions for a specific Safe. It includes transaction details such as addresses, values, gas, confirmation status, and signatures, providing a comprehensive view of a Safe's transaction history.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": {},\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Combined Safe Signatures (Hex)\nDESCRIPTION: Illustrates the final concatenated and sorted byte string representing multiple signatures (EIP-1271, pre-validated, ECDSA) for a Safe transaction. The example shows the constant parts sorted by signer address (0x1, 0x2, 0x3), followed by the dynamic data required for the EIP-1271 signature. This combined byte string is what would be passed to the `execTransaction` function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-signatures.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"0x\" + \n\"000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000c300\" + // encoded EIP-1271 signature\n\"0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000001\" + // encoded pre-validated signature\n\"bde0b9f486b1960454e326375d0b1680243e031fd4fb3f070d9a3ef9871ccfd57d1a653cffb6321f889169f08e548684e005f2b0c3a6c06fba4c4a68f5e006241c\" + // encoded ECDSA signature\n\"0000000000000000000000000000000000000000000000000000000000000004deadbeef\"                                                             // length of bytes + data of bytes\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Confirm Multisig Transaction\nDESCRIPTION: This JSON snippet shows an example response after successfully confirming a multisig transaction. It returns the hexadecimal signature string representing the approval. This confirms that a new signature has been recorded for the specified transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Auth Dependencies\nDESCRIPTION: Commands to install the required Web3Auth packages using different package managers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/web3auth.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @web3auth/modal @web3auth/base @web3auth/ethereum-provider\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @web3auth/modal @web3auth/base @web3auth/ethereum-provider\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @web3auth/modal @web3auth/base @web3auth/ethereum-provider\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration for Existing Safe Account in TypeScript\nDESCRIPTION: Sets up a Safe configuration for connecting to an existing Safe by specifying its address. Utilizes createConfig with chain info, provider URL, signer key, and the Safe's address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/react-hooks/guides/send-transactions.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config = createConfig({\n  chain: sepolia,\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Usage of 'data' Parameter - TypeScript\nDESCRIPTION: This code snippet showcases using the `data` parameter within a `transactions` array of the `createTransaction` method. The `data` parameter specifies the encoded transaction data.  This is typically the function call data for a smart contract interaction. Requires the `createTransaction` method of a configured Safe instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Message using POST request\nDESCRIPTION: This endpoint creates a new message for a given Safe account. The message can be a string (using EIP191 for hashing) or an EIP712 object. A POST request to the endpoint is used, with the Safe address as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_13\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Transactions Parameter: operation\nDESCRIPTION: Example showing how to define `operation` parameter inside `transactions` array which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x',\n    operation: 0\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Messages for Safe Account with Transaction Service API - Bash\nDESCRIPTION: Example of fetching the list of messages associated with a specific Safe account using the Safe Transaction Service API. The Safe address is a path parameter, and optional query parameters can control ordering, limit, and offset.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-safes-{address}-messages--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Transfers\nDESCRIPTION: Provides an example JSON response from the 'List Transfers' API endpoint, showing a paginated list containing transfer type, execution date, block number, transaction hash, recipient address, transfer value, transaction ID, and other metadata. Useful for understanding the data structure returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up the Protocol Kit in TypeScript\nDESCRIPTION: Shows how to initialize the Safe Protocol Kit with a provider, signer, and Safe address before using the createDisableModuleTx function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Uniswap Pool Data\nDESCRIPTION: This code fetches essential Uniswap pool data including the current price, tick, and liquidity. These parameters are necessary for performing calculations related to the swap using Uniswap's unique pricing mathematics.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-actions/ai-agent-swaps-on-uniswap.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Address,\n  createPublicClient,\n  createWalletClient,\n  defineChain,\n  encodeFunctionData,\n  http,\n  PublicClient,\n} from \"viem\";\n\n// Fetch slot0 data (current price, tick, etc.)\nconst slot0 = (await publicClient.readContract({\n  address: poolAddress,\n  abi: POOL_ABI,\n  functionName: \"slot0\",\n})) as any;\n\n// Fetch liquidity\nconst liquidity = (await publicClient.readContract({\n  address: poolAddress,\n  abi: POOL_ABI,\n  functionName: \"liquidity\",\n})) as any;\n\nconst sqrtPriceX96 = BigInt(slot0[0]);\nconst tick = slot0[1];\n```\n\n----------------------------------------\n\nTITLE: Sample Response: List Supported Tokens - JSON\nDESCRIPTION: Shows a sample of the JSON data returned when listing supported tokens via the API. The response includes pagination details and an array of token objects, each containing information like type, address, name, symbol, decimals, logo URI, and trusted status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1846,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ERC20\",\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n      \"name\": \"0x5555.com\",\n      \"symbol\": \"0x5555.com\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n      \"trusted\": false\n    }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Sending Safe Swap Owner Transaction (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the `safeClient.createSwapOwnerTransaction` function to generate a transaction for swapping a Safe owner and then sending it using `safeClient.send`. It requires a previously initialized `safeClient` instance and addresses for the old and new owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createswapownertransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst transaction = await safeClient.createSwapOwnerTransaction({\n  oldOwnerAddress: '0x...', // Address of the owner to remove\n  newOwnerAddress: '0x...' // Address of the owner to add\n})\n\nconst txResult = await safeClient.send({\n  transactions: [transaction]\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Safe API Kit instance in TypeScript\nDESCRIPTION: Initializes a new SafeApiKit instance configured to interact with Ethereum Mainnet (chain ID 1).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getserviceinfo.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for a Safe Multisig Transaction via API\nDESCRIPTION: Provides an example of how to estimate the `safeTxGas` for a multisig transaction using the Safe Core API. It shows a cURL command making a POST request to the `/api/v1/safes/{address}/multisig-transactions/estimations/` endpoint. The request body should contain the transaction details for which the gas needs to be estimated (shown as empty `{}` here for simplicity).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Importing API Kit and Modules\nDESCRIPTION: This snippet demonstrates how to import the necessary modules for interacting with the Safe Transaction Service API in both TypeScript and Python.  The TypeScript example imports the SafeApiKit from the @safe-global/api-kit package. The Python example imports modules from the eth_typing and safe_eth libraries, including the EthereumClient, EthereumNetwork, and TransactionServiceApi.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/data-decoder.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3Auth with Ethereum Sepolia Configuration\nDESCRIPTION: Complete setup for Web3Auth including chain configuration for Sepolia testnet, private key provider initialization, and modal initialization.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/web3auth.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst chainConfig = {\n  chainNamespace: CHAIN_NAMESPACES.EIP155,\n  chainId: '0xaa36a7',\n  rpcTarget: 'https://ethereum-sepolia-rpc.publicnode.com',\n  displayName: 'Ethereum Sepolia Testnet',\n  blockExplorerUrl: 'https://sepolia.etherscan.io',\n  ticker: 'ETH',\n  tickerName: 'Ethereum',\n  logo: 'https://cryptologos.cc/logos/ethereum-eth-logo.png'\n}\n\nconst privateKeyProvider = new EthereumPrivateKeyProvider({\n  config: { chainConfig }\n})\n\nconst web3auth = new Web3Auth({\n  clientId: WEB3AUTH_CLIENT_ID,\n  privateKeyProvider,\n  web3AuthNetwork: WEB3AUTH_NETWORK.SAPPHIRE_MAINNET\n})\n\nawait web3auth.initModal()\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction API Request (TypeScript)\nDESCRIPTION: This indicates a related TypeScript example, although no specific code snippet is provided. The comment indicates a file path from which the example could be derived. No specific dependencies are declared, and the output is a successful or rejected transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\n----------------------------------------\n\nTITLE: Using `execTransaction` in a Solidity Contract\nDESCRIPTION: Demonstrates defining the `ISafe` interface and calling its `execTransaction` function within a Solidity contract. This example shows a basic invocation structure with placeholder values for parameters like destination address, value, data, operation type, gas settings, refund receiver, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes signatures\n    ) external payable returns (bool success);\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).execTransaction(\n            0x...,\n            0,\n            \"0x...\",\n            Enum.Operation.Call,\n            0,\n            0,\n            0,\n            0x...,\n            0x...,\n            \"0x...\"\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Transaction: Python\nDESCRIPTION: This snippet signs the Safe transaction with Owner A's private key using the safe-eth-py library. It utilizes the configuration to obtain the owner's private key.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Sign the transaction with Owner A\nsafe_tx.sign(config.get(\"OWNER_A_PRIVATE_KEY\"))\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Delegate with EIP712 Signature in TypeScript and cURL\nDESCRIPTION: Details the API call to add or update a Safe delegate with support for a custom label. The caller must sign an EIP712 structured message consisting of domain and delegate data, including delegate address and TOTP value. This snippet provides the Python representation of the EIP712 data required for signature generation, following the Safe Transaction Service schema. Demonstrates a TypeScript comment reference and a cURL POST request to the delegates endpoint. The service responds with a 202 Accepted or an error.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v2-delegates--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-optimism.safe.global/api/api/v2/delegates/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Confirming Multisig Transaction\nDESCRIPTION: Sample response showing the new signature added to the transaction, represented by a signature string. Confirms successful submission of a confirmation signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates API Endpoint and Sample Request\nDESCRIPTION: Provides the GET endpoint to retrieve a paginated list of all delegates, including query parameters for filtering and pagination. Dependencies include REST API and response schema definitions, with sample cURL request demonstrating usage.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Protocol Kit and Connecting to Safe\nDESCRIPTION: This snippet demonstrates the initialization of the Protocol Kit and connecting to a deployed Safe using the `safeAddress` property.  It requires an initialized `protocolKit` object and a valid `signer`.  The `safeAddress` should be a valid Ethereum address of a deployed Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nconst protocolKit = Safe.init({\n  // ...\n})\n\nconst newProtocolKit = await protocolKit.connect({\n  signer, // Optional\n  safeAddress: '0x...' // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe4337Pack with Configuration in TypeScript\nDESCRIPTION: Creates an initialized instance of Safe4337Pack using the static async init() method with Safe4337InitOptions. This method requires a compatible provider, optional signer, bundler URL, versions of safe modules, optional custom contract addresses, safe account options, and optional paymaster configurations. Returns a Promise resolving to the Safe4337Pack instance. The init() method abstracts complex setup steps and handles default contract address resolution and versioning internally, ensuring proper operation with user-signed transactions and bundlers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst safe4337Pack = await Safe4337Pack.init({\n  provider,\n  signer,\n  bundlerUrl,\n  safeModulesVersion,\n  customContracts,\n  options,\n  paymasterOptions\n})\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract with curl\nDESCRIPTION: This snippet demonstrates how to retrieve a specific contract using a curl command. It sends a GET request to the `/api/v1/contracts/{address}/` endpoint, replacing `{address}` with the desired contract address.  It sets the `Accept` and `content-type` headers to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating Safe Configuration Object with createConfig in TypeScript\nDESCRIPTION: This snippet details how to define a Safe configuration object by importing createConfig from @safe-global/safe-react-hooks and specifying parameters such as the blockchain chain (e.g., sepolia), provider, signer, and the target safeAddress. This configuration can be reused in other parts of the application to initialize SafeProvider or customize hooks like useSendTransaction. Dependencies include viem chains and setting up web3 providers/signers appropriately.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesendtransaction.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Using getSafeInfo Method with Safe API Kit\nDESCRIPTION: Example showing how to retrieve Safe information by providing a Safe address to the getSafeInfo method from an initialized API Kit instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeinfo.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\n\nconst safeInfo = await apiKit.getSafeInfo(safeAddress)\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient for New Safe Account - TypeScript\nDESCRIPTION: Creates a SafeClient instance for a new Safe account by providing provider and signer configuration along with owner and threshold details. The 'owners' field should include the signer's address and may be extended for multi-signature scenarios. Await the asynchronous call to ensure proper initialization.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-transactions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  safeOptions: {\n    owners: [SIGNER_ADDRESS],\n    threshold: 1\n  }\n})\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving the list of confirmations for a multisig transaction using GET request\nDESCRIPTION: This snippet documents the API call to fetch a paginated list of confirmations for a specific multisig transaction identified by its hash. It includes request parameters such as path and query parameters, and demonstrates sample response format with information about each confirmation, including timestamps, owner addresses, and signatures. Dependencies include the API endpoint URL and appropriate headers for JSON content.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Confirmations via API (Bash)\nDESCRIPTION: Demonstrates using `curl` to send a GET request to the Safe Transaction Service API endpoint `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` to retrieve the list of confirmations for a specific multisig transaction. Requires the `safe_tx_hash`. Optional query parameters `limit` and `offset` can be used for pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a new Safe with Safe-CLI\nDESCRIPTION: This command initializes a new Safe by specifying the node URL, owner's private key, owner addresses, threshold, and salt nonce. It depends on having the Safe CLI installed and access to the specified Ethereum node. The output is a new Safe contract deployed on the blockchain with designated owners and threshold for multisig approval.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsafe-creator <node_url> <private_key> --owners <checksummed_address_1> <checksummed_address_2> --threshold <uint> --salt-nonce <uint256>\n```\n\n----------------------------------------\n\nTITLE: Send Signed Transaction to Gelato Relay (1Balance)\nDESCRIPTION: Execute the signed Safe transaction by sending it to the Gelato Relay service using the Relay Kit. This method handles the interaction with Gelato's API to submit the transaction for sponsored execution. The response contains a task ID for tracking the relay status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await relayKit.executeTransaction({\n    executable: signedSafeTransaction,\n    options\n})\n\nconsole.log(`Relay Transaction Task ID: https://relay.gelato.digital/tasks/status/${response.taskId}`)\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction via 7579 Module (TypeScript)\nDESCRIPTION: This snippet demonstrates how to send a transaction using the installed `OwnableExecutor` module. It encodes transaction data, calls the `executeOnOwnedAccount` function of the module, waits for the transaction to complete, and updates the UI state. This uses `encodePacked` to form the transaction's data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst executeOnOwnedAccount = async () => {\n  setLoading(true)\n  console.log('Executing on owned account...')\n\n  // We encode the transaction we want the smart account to send. The fields are:\n  // - to (address)\n  // - value (uint256)\n  // - data (bytes)\n  // In this example case, it is a dummy transaction with zero data.\n  const executeOnOwnedAccountData = encodePacked(\n    ['address', 'uint256', 'bytes'],\n    ['0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2', parseEther('0'), '0x']\n  )\n\n  // Now, we call the `executeOnOwnedAccount` function of the `ownableExecutorModule` with the address of the safe\n  // account and the data we want to execute. This will make our smart account send the transaction that is encoded above.\n  const hash = await walletClient!.writeContract({\n    chain: sepolia,\n    account: executorAddress as `0x${string}`,\n    abi: parseAbi(['function executeOnOwnedAccount(address, bytes)']),\n    functionName: 'executeOnOwnedAccount',\n    args: [safeAddress as `0x${string}`, executeOnOwnedAccountData],\n    address: ownableExecutorModule\n  })\n\n  console.log('Executed on owned account, transaction hash:', hash)\n\n  await publicClient?.waitForTransactionReceipt({ hash })\n\n  setExecutorTransactionIsSent(true)\n  setLoading(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving UserOperation with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve a user operation using a cURL command. It specifies the HTTP method, the target URL, and the expected content type in the request header.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving All Transactions for a Safe with curl\nDESCRIPTION: A curl command that retrieves all transactions associated with a specific Safe address using the Transaction Service API. The request is sent as a GET request with JSON content type headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Invoking addOwnerWithThreshold with New Threshold - Solidity\nDESCRIPTION: Illustrates the usage of the '_threshold' parameter in the addOwnerWithThreshold function. This parameter is a uint256 that sets the new required number of owners necessary to confirm Safe transactions after adding the owner.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/addOwnerWithThreshold.mdx#_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\n(ISafe safe).addOwnerWithThreshold(\n    0x...,\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe4337Pack for Existing Safe Account in TypeScript\nDESCRIPTION: Initializes Safe4337Pack instance to connect to an already deployed Safe account by providing the existing Safe address. The provider, signer, and bundler URL must be set accordingly. Optional on-chain analytics may be enabled. This method only interacts with an existing Safe without deploying a new one.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safe4337Pack = await Safe4337Pack.init({\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  bundlerUrl: `https://api.pimlico.io/v2/11155111/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`,\n  options: {\n    safeAddress: '0x...'\n  },\n  onchainAnalytics // Optional\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Confirming an Off-Chain Message using Safe{Core} SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates how to call the `confirmOffChainMessage` method on an initialized `offchainMessageClient`. It requires the hash of the message (`messageHash`) to be confirmed and adds the signature of the connected signer. If the signature threshold is met, the message is submitted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages/confirmoffchainmessage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { offchainMessageClient } from './setup.ts'\n    \nconst messageResult = await offchainMessageClient.confirmOffChainMessage({ \n  messageHash: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Safe Deployment Status Using Safe-Global SDK (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to import the safeClient, initialize it using parameters like provider, signer, and safeAddress, and then check whether the connected Safe is deployed by calling safeClient.isDeployed(). It highlights dependency on the safeClient creation and Safe address configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/isdeployed.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst isSafeDeployed = await safeClient.isDeployed()\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting senderAddress\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, specifically highlighting the `senderAddress` parameter. This parameter specifies the address of the signer proposing the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData,\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample API Call for Listing Supported Tokens\nDESCRIPTION: Example curl command showing how to request the list of tokens supported in the system. The response includes total count, next and previous page URLs, and an array of token objects with details like address, name, symbol, decimals, logo URI, and trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Operation via API (bash/curl)\nDESCRIPTION: This curl command demonstrates how to make a POST request to the `/api/v1/safes/{address}/safe-operations/` endpoint of the Safe Transaction Service API on the Base Sepolia network. It sends an empty JSON payload (`-d '{}'`) and sets the necessary headers (`Accept`, `content-type`) to initiate the creation of a new Safe Operation for the specified Safe address (`0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). A successful request is expected to return a 201 status code with an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sending Ether from Safe to Another Account\nDESCRIPTION: Executes the transfer of Ether from a Safe account to a specified destination address. Requires Safe address, network URL, recipient address, and amount in wei. Supports optional private key input, nonce override, and automation options for scripting.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/unattended-commands.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsafe-cli send-ether [OPTIONS] SAFE_ADDRESS NODE_URL TO VALUE\n\n╭─ Arguments ────────────────────────────────────────────────────────────────────────╮\n│ *    safe_address      CHECKSUMADDRESS  The address of the Safe. [required]        │\n│ *    node_url          TEXT             Ethereum node url. [required]              │\n│ *    to                CHECKSUMADDRESS  The address of destination. [required]     │\n│ *    value             INTEGER          Amount of ether in wei to send. [required] │\n╰────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Options ──────────────────────────────────────────────────────────────────────────╮\n│ --private-key                         TEXT     List of private keys of signers.    │\n│ --safe-nonce                          INTEGER  Force nonce for tx_sender           │\n│ --interactive    --non-interactive             Enable/disable interactive mode.  │\n╰────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Using createDisableModuleTx with refundReceiver option\nDESCRIPTION: Example showing how to specify the refundReceiver option when creating a transaction to disable a Safe Module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableModuleTx(\n  '0x...',\n  options: {\n    refundReceiver: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Migrating `addMessage` Method Type Parameter in TypeScript\nDESCRIPTION: Shows the renaming of the type parameter for the `addMessage` method from `AddMessageProps` (v2) to `AddMessageOptions` (v3).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v3.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\naddMessage(safeAddress: string, addMessageProps: AddMessageProps)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\naddMessage(safeAddress: string, addMessageOptions: AddMessageOptions)\n```\n\n----------------------------------------\n\nTITLE: React API Reference Rendering using ApiReference Component\nDESCRIPTION: This line renders the 'ApiReference' React component with a 'networkName' prop set to 'blast'. It integrates a predefined API reference component into the page, likely for displaying API documentation related to the 'blast' network. It depends on React and the specific ApiReference component for visualizing API schemas and documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/blast.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference networkName=\"blast\"/>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Message Creation and Confirmation Flow with Mermaid\nDESCRIPTION: This Mermaid sequence diagram illustrates the process of creating and confirming a message using the Safe Transaction Service API. Alice first prepares and signs a message, then sends it to the service via `POST /v1/safes/{address}/messages/`. Bob then signs the same message hash and adds his confirmation via `POST /v1/messages/{message_hash}/signatures/`. The diagram shows the interactions between users (Alice, Bob) and the Safe Transaction Service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/api-safe-transaction-service.mdx#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant A as Alice\n    participant B as Bob\n    A-->A: Prepare message and sign message_hash\n    A->>+SafeTransactionService: createMessage POST /v1/safes/0x5Afe/messages/\n    SafeTransactionService-->>-A: Http(201) {Created}\n    B-->B: Sign message_hash\n    B->>+SafeTransactionService: addConfirmation POST /v1/messages/{message_hash}/signatures/\n    SafeTransactionService-->>-B: Http(200) \n```\n\n----------------------------------------\n\nTITLE: Sample Safe Operations API Response\nDESCRIPTION: This JSON snippet shows a sample response from the Safe Operations API, including the `count`, `next`, `previous`, and `results` fields. The `results` array contains a list of Safe Operation objects with details such as `created`, `modified`, `safeOperationHash`, `validAfter`, `validUntil`, `moduleAddress`, `confirmations`, `preparedSignature`, and `userOperation`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Multisig Transactions with Curl\nDESCRIPTION: This curl command retrieves multi-signature transactions for a given Safe address. It specifies the endpoint and includes headers for accepting JSON responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_31\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Running Safe CLI Docker Container for Account Creation (bash)\nDESCRIPTION: This command executes the `safeglobal/safe-cli` Docker image in interactive mode (`-it`) and runs the `safe-creator` tool within the container to facilitate the creation of new Safe accounts. Requires Docker installed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it safeglobal/safe-cli safe-creator\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Creation Status - TypeScript\nDESCRIPTION: This snippet provides an example of how to query the Safe creation status. It uses the TypeScript language and demonstrates a sample request with the correct URL and headers.  It retrieves the detailed information on the Safe creation transaction of a given Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_63\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zksync/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Creation Info (TypeScript)\nDESCRIPTION: This snippet shows the location of a TypeScript example related to getting the creation info for a Safe.  The actual code is located in the specified file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Confirmation Response - JSON\nDESCRIPTION: Illustrates the structure of the JSON response returned after confirming a multisig transaction.  The response includes the signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Safe Balances - cURL Request\nDESCRIPTION: This snippet demonstrates a cURL command for fetching a Safe's balances. It uses a GET request to an API endpoint, specifying the Safe's address in the URL and including headers for `Accept` and `content-type`. The returned data is expected to be in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_69\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Transaction with Safe Transaction Service API (bash)\nDESCRIPTION: This snippet demonstrates how to create a multisig transaction for a specified Safe account using the Safe Transaction Service API via the POST endpoint. It requires a valid Safe address in the URL path and expects JSON-formatted data (with a relevant transaction body) in the request body. Dependencies include access to curl and network reachability to the specified Safe Transaction Service instance. The main parameters involve the Safe address, transaction details as the request body, and required headers such as Accept: application/json and content-type: application/json. The response includes transaction details or appropriate error codes if invalid data is provided, addresses are incorrect, or sender constraints are violated.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction with Signature via Safe API using cURL (Bash)\nDESCRIPTION: Demonstrates how to submit a new confirmation signature for a Safe multisig transaction by POSTing to the confirmations endpoint. Inputs required: Safe transaction hash and one or multiple signature(s) in the POST body. Output is a JSON object containing the signature submitted. This endpoint does not permit delegates to perform trusted confirmations. Returns 201 (Created) on successful submission; 400 or 422 if data is malformed or cannot be processed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Contract List API - JSON\nDESCRIPTION: This sample JSON response demonstrates the structure returned by the List Contracts endpoint of the Safe Transaction Service API. It includes overall metadata (count, next, previous) and an array of contract objects, with each contract containing address, name, displayName, logoUri, contractAbi, and trustedForDelegateCall. The response requires no authentication and provides a direct representation of what to expect from the endpoint. This output guides parsing logic and response validation in client implementations, and values shown are illustrative.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Safe{Global} SDK Modules (TypeScript)\nDESCRIPTION: Imports the required classes and types from the installed Safe{Global} SDK packages. `SafeApiKit` is used for interacting with the Safe Transaction Service, `Safe` (from `protocol-kit`) handles transaction creation and signing, and `MetaTransactionData`/`OperationType` (from `types-kit`) define transaction structures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/propose-and-confirm-transactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\nimport Safe from '@safe-global/protocol-kit'\nimport {\n  MetaTransactionData,\n  OperationType\n} from '@safe-global/types-kit'\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Service URL - JavaScript\nDESCRIPTION: Illustrates how the configuration of the `txServiceUrl` has changed between versions. v1 required custom services to be hosted under the `/api` route, while v2 allows any preferred route or subdomain. Migrating from a custom service running under `/api` requires explicitly including `/api` in the `txServiceUrl` when using v2.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v2.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// old:\nconst txServiceUrl = 'https://your-transaction-service-domain/'\nconst apiKit = new SafeApiKit({\n  txServiceUrl,\n  ethAdapter\n})\n// new:\nconst chainId: bigint = 1n\nconst txServiceUrl = 'https://your-transaction-service-domain/api'\nconst apiKit = new SafeApiKit({\n  chainId,\n  txServiceUrl\n})\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction - Curl Example\nDESCRIPTION: This `curl` command demonstrates how to create a multi-signature transaction for a given Safe account. It makes a POST request to the `/api/v1/safes/{address}/multisig-transactions/` endpoint. The `address` path parameter is the Safe's address. The request sends an empty JSON object in the request body and specifies `application/json` for both `Accept` and `content-type` headers. The expected output is a `201` response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_33\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Getting Executed Transaction: Python\nDESCRIPTION: This snippet retrieves all transactions from the transaction service and finds the last executed transaction. It requires the Safe address and the transaction service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ntransactions = transaction_service_api.get_transactions(\n    config.get(\"SAFE_ADDRESS\"))\n\nlast_executed_tx = next(\n    (x for x in transactions if x.get('isExecuted')),\n    None)\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe or Ethereum Transaction using useSafe Hook - TypeScript\nDESCRIPTION: This snippet shows how to use the getTransaction hook inside a React functional component to retrieve transaction details by providing either a safeTxHash (Safe transaction hash) or ethereumTxHash (Ethereum transaction hash). It imports useSafe from '@safe-global/safe-react-hooks' and calls getTransaction with one of the hashes as a parameter. The returned data is accessed and rendered as a JSON string. The snippet assumes React environment with hooks support and requires the @safe-global/safe-react-hooks package.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/gettransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction TransactionStatus({ safeTxHash, ethereumTxHash }) {\n  const { getTransaction } = useSafe()\n  const {\n    data,\n    // ...\n  } = getTransaction({\n    safeTxHash // Optional\n    // ethereumTxHash // Optional\n  })\n\n  return (\n    <>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default TransactionStatus\n```\n\n----------------------------------------\n\nTITLE: Creating Swap Owner Transaction with New Owner Address in TypeScript\nDESCRIPTION: Demonstrates how to create a Safe transaction to swap an existing owner of a Safe by specifying the current and new owner addresses. It depends on the Safe Protocol Kit and requires proper initialization of the protocolKit instance. Optional transaction properties such as gas limits, gas price, gas token, refund receiver, and nonce can be provided to customize the transaction execution. The snippet shows the usage of the createSwapOwnerTx method passing in parameters for the old and new owner addresses and optional safe transaction properties.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createswapownertx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SwapOwnerTxParams,\n  SafeTransactionOptionalProps\n} from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst params: SwapOwnerTxParams = {\n  oldOwnerAddress,\n  newOwnerAddress\n}\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createSwapOwnerTx(\n  params,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Status via Safe Global API in TypeScript and Curl\nDESCRIPTION: This snippet demonstrates how to call the Safe Global API endpoint to get detailed status information of a Safe account, including owners, nonce, threshold, modules, and version. The required path parameter is the Safe's blockchain address in string format. Sample JSON response illustrates the structure of the returned Safe information object. The example curl command shows how to perform the GET request with appropriate headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zkevm/-v1-safes-{address}--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Enable Module Transaction with Required Address using Protocol Kit (TypeScript)\nDESCRIPTION: Shows the minimal required input for the `createEnableModuleTx` function. It demonstrates calling the function with only the `moduleAddress`, relying on the Protocol Kit to handle optional parameters with default values.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createenablemoduletx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableModuleTx(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Ethereum User Operation Parameters for Safe Transaction\nDESCRIPTION: A comprehensive JSON structure containing all necessary parameters for executing a Safe transaction as a User Operation. Includes initialization code, call data, gas parameters, paymaster information, and cryptographic signatures required for the transaction to be processed by the EntryPoint contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Safe contract transactions utility function in TypeScript\nDESCRIPTION: This TypeScript utility function facilitates executing transactions via the Safe contract programmatically during testing. It computes the transaction hash using the Safe interface, collects signatures from specified signers sorted by address, concatenates the signatures, and calls execTransaction on the Safe instance. The function requires signer instances, Safe contract instance, destination address, value, calldata, and operation code. It wraps signature computation and transaction execution to streamline test workflows with Hardhat and ethers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"hardhat\";\nimport { Signer, AddressLike, BigNumberish, ZeroAddress } from \"ethers\";\nimport { Safe } from \"../../typechain-types\";\n\n/**\n * Executes a transaction on the Safe contract.\n * @param wallets - The signers of the transaction.\n * @param safe - The Safe contract instance.\n * @param to - The address to send the transaction to.\n * @param value - The value to send with the transaction.\n * @param data - The data to send with the transaction.\n * @param operation - The operation type (0 for call, 1 for delegate call).\n */\nconst execTransaction = async function (\n  wallets: Signer[],\n  safe: Safe,\n  to: AddressLike,\n  value: BigNumberish,\n  data: string,\n  operation: number,\n): Promise<void> {\n  // Get the current nonce of the Safe contract\n  const nonce = await safe.nonce();\n\n  // Get the transaction hash for the Safe transaction\n  const transactionHash = await safe.getTransactionHash(\n    to,\n    value,\n    data,\n    operation,\n    0,\n    0,\n    0,\n    ZeroAddress,\n    ZeroAddress,\n    nonce\n  );\n\n  let signatureBytes = \"0x\";\n  const bytesDataHash = ethers.getBytes(transactionHash);\n\n  // Get the addresses of the signers\n  const addresses = await Promise.all(wallets.map(wallet => wallet.getAddress()));\n  // Sort the signers by their addresses\n  const sorted = wallets.sort((a, b) => {\n    const addressA = addresses[wallets.indexOf(a)];\n    const addressB = addresses[wallets.indexOf(b)];\n    return addressA.localeCompare(addressB, \"en\", { sensitivity: \"base\" });\n  });\n\n  // Sign the transaction hash with each signer\n  for (let i = 0; i < sorted.length; i++) {\n    const flatSig = (await sorted[i].signMessage(bytesDataHash))\n      .replace(/1b$/, \"1f\")\n      .replace(/1c$/, \"20\");\n    signatureBytes += flatSig.slice(2);\n  }\n\n  // Execute the transaction on the Safe contract\n  await safe.execTransaction(\n    to,\n    value,\n    data,\n    operation,\n    0,\n    0,\n    0,\n    ZeroAddress,\n    ZeroAddress,\n    signatureBytes\n  );\n};\n\nexport {\n  execTransaction,\n};\n\n```\n\n----------------------------------------\n\nTITLE: Get Message API Example (TypeScript)\nDESCRIPTION: This snippet references a TypeScript file containing the API request for retrieving a message by its hash. It describes the supporting TypeScript implementation of the GET API call.  It provides an architectural overview of the message retrieval functionality.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-messages-{message_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Safe Message Handling in TypeScript and Python\nDESCRIPTION: This snippet imports essential classes and functions for creating, signing, and managing Safe messages. TypeScript imports SafeApiKit and Safe from relevant Safe SDK packages, while Python imports datetime, Ethereum client utilities, Safe classes, and Transaction Service API for message interaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/messages.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit, {AddMessageOptions} from '@safe-global/api-kit'\nimport Safe, {hashSafeMessage} from '@safe-global/protocol-kit'\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime\nfrom eth_account import Account\nfrom eth_account.messages import defunct_hash_message \nfrom safe_eth.eth import EthereumClient, EthereumNetwork\nfrom safe_eth.safe import Safe \nfrom safe_eth.safe.api.transaction_service_api import TransactionServiceApi\n```\n\n----------------------------------------\n\nTITLE: Create a Safe Transaction\nDESCRIPTION: This TypeScript snippet demonstrates how to create a Safe transaction using the `protocolKit.createTransaction` method. It defines the transaction data (recipient, value, data) and uses the Protocol Kit to generate a `safeTransaction` object, which includes the transaction data and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Create a transaction to send 0.01 ETH\n  const safeTransactionData: SafeTransactionDataPartial = {\n    to: '0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1',\n    value: '100000000000000000', // 0.01 ETH\n    data: '0x'\n  }\n\n  let safeTransaction = await protocolKit.createTransaction({\n    transactions: [safeTransactionData]\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit - TypeScript\nDESCRIPTION: This snippet provides the necessary code to initialize the `SafeApiKit` object, which is a prerequisite for calling `getServiceSingletonsInfo()`.  It requires the `@safe-global/api-kit` dependency to be installed. It specifies the chain ID (Mainnet, in this example) for the Safe contracts that are going to be queried. The `chainId` parameter determines the network to interact with. It instantiates the `SafeApiKit` with the specified chain id.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getservicesingletonsinfo.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Sample API request for retrieving Safe module transactions\nDESCRIPTION: This snippet shows a sample cURL command to fetch module transactions for a specific Safe address. It demonstrates how to structure the GET request with appropriate headers to receive JSON data from the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Decode Data (TypeScript Example)\nDESCRIPTION: This snippet references a TypeScript example file used to post data to the `/api/v1/data-decoder/` endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with Only Message Parameter in TypeScript\nDESCRIPTION: This snippet demonstrates the minimal usage of signMessage from Protocol Kit, signing a given string using the default signing method. Only the message parameter is specified. Returns a Promise with the signed SafeMessage object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/signmessage.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst signedMessage = await protocolKit.signMessage(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Create Safe Message with String\nDESCRIPTION: Illustrates creating a Safe message from a simple string using `protocolKit.createMessage`. It highlights the raw message parameter and the function call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/createmessage.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = protocolKit.createMessage(\n  'Example message'\n)\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction: Python\nDESCRIPTION: This snippet instantiates the Transaction Service API and sends the Safe transaction to the service with the signature of Owner A. It requires RPC URL and the transaction details. This action adds the signed transaction to the Safe transaction service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Instantiate the Transaction Service API\ntransaction_service_api = TransactionServiceApi(\n    network=EthereumNetwork.SEPOLIA,\n    ethereum_client=ethereum_client)\n\n# Send the transaction to the Transaction Service with the signature from Owner A\ntransaction_service_api.post_transaction(safe_tx)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Multisignature Transaction Retrieval\nDESCRIPTION: This JSON snippet demonstrates a sample response when fetching a multisignature transaction by its hash. It includes transaction details such as involved addresses, value, data payload, operation type, gas parameters, confirmation status, signatures, and confirmation list with owners and signatures, providing a complete view of the multisig transaction's state.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Message Details with Transaction Service API (cURL)\nDESCRIPTION: This cURL example illustrates retrieving message details from the Safe Transaction Service API using a GET request to the endpoint containing the message hash. It includes required headers for JSON content and returns a JSON object with message data, including confirmations and signature information. Input is the message_hash in the URL, with output as structured JSON response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Defining SafeSetup Event in Solidity\nDESCRIPTION: The SafeSetup event is emitted during Safe initialization. It logs information about the setup process including the initiator address, list of owner addresses, threshold value, initializer address, and fallback handler address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/SafeSetup.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent SafeSetup(\n  address initiator,\n  address[] owners,\n  uint256 threshold,\n  address initializer,\n  address fallbackHandler\n);\n```\n\n----------------------------------------\n\nTITLE: Sending ERC-721 Tokens from Safe to Recipient\nDESCRIPTION: Facilitates transfer of a specific ERC-721 token, identified by token ID, from a Safe account to a target address. Requires Safe address, network URL, destination address, token contract address, and token ID. Supports optional private key entry, nonce setting, and interactivity control.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/unattended-commands.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsafe-cli send-erc721 [OPTIONS] SAFE_ADDRESS NODE_URL TO TOKEN_ADDRESS TOKEN_ID\n\n╭─ Arguments ───────────────────────────────────────────────────────────────────────╮\n│ *    safe_address      CHECKSUMADDRESS  The address of the Safe. [required]       │\n│ *    node_url          TEXT             Ethereum node url. [required]             │\n│ *    to                CHECKSUMADDRESS  The address of destination. [required]    │\n│ *    token_address      CHECKSUMADDRESS  Erc20 token address. [required]          │\n│ *    token_id           INTEGER          Erc721 token id. [required]              │\n╰───────────────────────────────────────────────────────────────────────────────────╯\n╭─ Options ─────────────────────────────────────────────────────────────────────────╮\n│ --private-key                         TEXT     List of private keys of signers.   │\n│ --safe-nonce                          INTEGER  Force nonce for tx_sender          │\n│ --interactive    --no-interactive             Enable/disable interactive mode. │\n╰───────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Setting gasToken Option for Remove Owner Transaction (TypeScript)\nDESCRIPTION: Illustrates how to use the optional `options` object with `createRemoveOwnerTx` to specify the address of the token used for gas payment via the `gasToken` parameter. A zero address indicates payment in the native currency.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx(\n  {\n    ownerAddress: '0x...'\n  },\n  {\n    gasToken: '0x...' // Optional: Token address for gas payment\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Confirmation to a Multisig Transaction - Safe Global API (Bash)\nDESCRIPTION: This bash cURL command issues a POST request to the Safe Global Core API to add a confirmation for a given multisig transaction by specifying its operation hash. The command sets HTTP headers for JSON and sends an empty JSON object for the request body. At least one transaction hash is required as a path parameter, and the endpoint does not support delegates for trusted transactions. Upon success, a 201 status code is returned with an empty response body, indicating the confirmation was recorded; malformed or invalid data may yield errors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-base-sepolia.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n\n```\n\n----------------------------------------\n\nTITLE: Listing Executed Transactions Endpoint\nDESCRIPTION: This section describes the API endpoint for listing executed transactions. The endpoint accepts an address parameter (required) and optional parameters for ordering, limiting, and offsetting results. The endpoint returns a paginated list of transactions, where each transaction object includes details specific to its type, such as Multisig, Module, or Ethereum transaction. Note a bug regarding pagination using `Transaction Hash` is present and will be fixed in future versions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_31\n\nLANGUAGE: OpenAPI\nCODE:\n```\n<Parameters parameters={[{\"in\":\"path\",\"name\":\"address\",\"schema\":{\"type\":\"string\"},\"required\":true},{\"name\":\"ordering\",\"required\":false,\"in\":\"query\",\"description\":\"Which field to use when ordering the results.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"limit\",\"required\":false,\"in\":\"query\",\"description\":\"Number of results to return per page.\",\"schema\":{\"type\":\"integer\"}},{\"name\":\"offset\",\"required\":false,\"in\":\"query\",\"description\":\"The initial index from which to return the results.\",\"schema\":{\"type\":\"integer\"}}]} />\n    <Responses responses={[{\"code\":\"200\",\"schema\":{},\"content\":{\"application/json\":{\"schema\":{\"refName\":\"PaginatedAllTransactionsSchemaList\",\"type\":\"object\",\"required\":[\"count\",\"results\"],\"properties\":{\"count\":{\"type\":\"integer\",\"example\":123},\"next\":{\"type\":\"string\",\"nullable\":true,\"format\":\"uri\",\"example\":\"http://api.example.org/accounts/?offset=400&limit=100\"},\"previous\":{\"type\":\"string\",\"nullable\":true,\"format\":\"uri\",\"example\":\"http://api.example.org/accounts/?offset=200&limit=100\"},\"results\":{\"type\":\"array\",\"items\":{\"refName\":\"AllTransactionsSchema\",\"type\":\"object\",\"description\":\"Just for the purpose of documenting, don't use it\",\"properties\":{\"txType1\":{\"refName\":\"SafeModuleTransactionWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"created\":{\"type\":\"string\",\"format\":\"date-time\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"isSuccessful\":{\"type\":\"boolean\",\"readOnly\":true},\"transactionHash\":{\"type\":\"string\"},\"safe\":{\"type\":\"string\"},\"module\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":\"string\",\"format\":\"decimal\",\"pattern\":\"^-?\\\\d{0,78}(?:\\\\.\\\\d{0,0})?$\"},\"data\":{\"type\":[\"string\",\"null\"]},\"operation\":{\"enum\":[0,1,2],\"type\":\"integer\",\"description\":\"* `0` - CALL\\n* `1` - DELEGATE_CALL\\n* `2` - CREATE\",\"x-spec-enum-id\":\"73baf6048b75e41c\",\"minimum\":0,\"maximum\":32767},\"dataDecoded\":{\"type\":\"object\",\"additionalProperties\":{},\"readOnly\":true},\"moduleTransactionId\":{\"type\":\"string\",\"description\":\"Internally calculated parameter to uniquely identify a moduleTransaction \\n`ModuleTransactionId = i+tx_hash+trace_address`\"},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":[\"string\",\"null\"]},\"tokenAddress\":{\"type\":[\"string\",\"null\"]},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true}},\"required\":[\"blockNumber\",\"created\",\"data\",\"dataDecoded\",\"executionDate\",\"isSuccessful\",\"module\",\"moduleTransactionId\",\"operation\",\"safe\",\"to\",\"transactionHash\",\"transfers\",\"txType\",\"value\"]},\"txType2\":{\"refName\":\"SafeMultisigTransactionWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"safe\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"data\":{\"type\":[\"string\",\"null\"]},\"operation\":{\"type\":\"integer\",\"minimum\":0},\"gasToken\":{\"type\":[\"string\",\"null\"]},\"safeTxGas\":{\"type\":\"integer\",\"minimum\":0},\"baseGas\":{\"type\":\"integer\",\"minimum\":0},\"gasPrice\":{\"type\":\"string\"},\"refundReceiver\":{\"type\":[\"string\",\"null\"]},\"nonce\":{\"type\":\"integer\",\"minimum\":0},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"submissionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"modified\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"transactionHash\":{\"type\":\"string\"},\"safeTxHash\":{\"type\":\"string\"},\"proposer\":{\"type\":\"string\"},\"proposedByDelegate\":{\"type\":[\"string\",\"null\"]},\"executor\":{\"type\":\"string\",\"null\"},\"isExecuted\":{\"type\":\"boolean\"},\"isSuccessful\":{\"type\":[\"boolean\",\"null\"],\"readOnly\":true},\"ethGasPrice\":{\"type\":[\"string\",\"null\"],\"readOnly\":true},\"maxFeePerGas\":{\"type\":\"string\",\"null\"],\"readOnly\":true},\"maxPriorityFeePerGas\":{\"type\":\"string\",\"null\"],\"readOnly\":true},\"gasUsed\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"fee\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"origin\":{\"type\":\"string\",\"readOnly\":true},\"dataDecoded\":{\"type\":\"object\",\"additionalProperties\":{},\"readOnly\":true},\"confirmationsRequired\":{\"type\":\"integer\"},\"confirmations\":{\"type\":\"object\",\"additionalProperties\":{},\"description\":\"Filters confirmations queryset\\n:param obj: MultisigConfirmation instance\\n:return: Serialized queryset\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"},\"signatures\":{\"type\":[\"string\",\"null\"]},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":[\"string\",\"null\"]},\"tokenAddress\":{\"type\":\"string\",\"null\"},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true}},\"required\":[\"baseGas\",\"blockNumber\",\"confirmations\",\"confirmationsRequired\",\"dataDecoded\",\"ethGasPrice\",\"executionDate\",\"executor\",\"fee\",\"gasPrice\",\"gasUsed\",\"isExecuted\",\"isSuccessful\",\"maxFeePerGas\",\"maxPriorityFeePerGas\",\"modified\",\"nonce\",\"operation\",\"origin\",\"proposedByDelegate\",\"proposer\",\"safe\",\"safeTxGas\",\"safeTxHash\",\"submissionDate\",\"to\",\"transactionHash\",\"transfers\",\"trusted\",\"txType\",\"value\"]},\"txType3\":{\"refName\":\"EthereumTxWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"to\":{\"type\":[\"string\",\"null\"]},\"data\":{\"type\":\"string\"},\"txHash\":{\"type\":\"string\"},\"blockNumber\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":[\"string\",\"null\"]},\"tokenAddress\":{\"type\":\"string\",\"null\"},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true},\"f\n```\n\n----------------------------------------\n\nTITLE: Installing OwnableExecutor Module (TypeScript)\nDESCRIPTION: This snippet installs the `OwnableExecutor` module on the smart account. It creates a user operation, sends it to the bundler, waits for the transaction receipt, and updates the UI state. Dependencies include the smart account client, the module address, and the Pimlico bundler/paymaster.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst installModule = async () => {\n  setLoading(true)\n  console.log('Installing module...')\n\n  // The smart accounts client operates on 4337. It does not send transactions directly but instead creates user\n  // operations. The Pimlico bundler takes those user operations and sends them to the blockchain as regular\n  // transactions. We also use the Pimlico paymaster to sponsor the transaction. So, all interactions are free\n  // on Sepolia.\n  const userOpHash = await smartAccountClient?.installModule({\n    type: 'executor',\n    address: ownableExecutorModule,\n    context: encodePacked(['address'], [executorAddress as `0x${string}`])\n  })\n\n  console.log('User operation hash:', userOpHash, '\\nwaiting for receipt...')\n\n  // After we sent the user operation, we wait for the transaction to be settled:\n  const transactionReceipt = await pimlicoClient.waitForUserOperationReceipt({\n    hash: userOpHash as `0x${string}`\n  })\n\n  console.log('Module installed:', transactionReceipt)\n\n  setModuleIsInstalled(true)\n  setSafeIsDeployed((await safeAccount?.isDeployed()) ?? false)\n  setLoading(false)\n}\n```\n\n----------------------------------------\n\nTITLE: List Collectibles API Call (Safe Transaction Service) - cURL\nDESCRIPTION: Retrieves a paginated list of ERC721 collectibles associated with a specified Safe account address from the Safe Transaction Service API. Includes optional parameters to filter trusted/spam tokens and control pagination. The response is a JSON object containing the count, pagination links, and a list of collectible details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Decoded Transaction Data - JSON\nDESCRIPTION: This JSON snippet illustrates a successful response from the data decoder API endpoint of the Safe Transaction Service. The response includes the method name (e.g., transfer) and an array of parameter objects, each with name, type, and value fields. The expected input is encoded call data, optionally with a contract address, and output is a decoded function signature with arguments. The structure is consistent for all decoded contract calls and error cases are handled separately.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates with a GET Request using cURL\nDESCRIPTION: This snippet demonstrates how to retrieve a list of delegates using a GET request to the `/api/v2/delegates/` endpoint. It includes the necessary headers for accepting JSON responses. The API may support filtering via query parameters.  Dependencies: curl\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving a Module Transaction by ID via API Endpoint\nDESCRIPTION: This snippet describes the API route, parameters, and response schema for fetching details of a specific module transaction using its unique ID. It includes the HTTP method, URL structure, required headers, and a sample JSON response illustrating transaction attributes such as hash, date, success status, involved addresses, and data payload.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Module Transactions - TypeScript\nDESCRIPTION: This TypeScript code snippet shows an example related to listing a Safe's module transactions. It shows a basic code structure, likely intended as a placeholder or example to illustrate an API request to retrieve transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Adding safe.ts code\nDESCRIPTION: This snippet includes code from an external file (`safe.ts`). The code within this file handles the deployment of a new Safe, adding passkey owners, signing messages, and executing transactions using a passkey signer within the React Native application.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// from ../../../../examples/react-native-passkeys/lib/safe.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Contracts with curl\nDESCRIPTION: This snippet demonstrates how to list available contracts using a curl command. It sends a GET request to the `/api/v1/contracts/` endpoint with specified headers to retrieve a list of smart contracts. The command specifies the `Accept` and `content-type` headers to be `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Module using curl\nDESCRIPTION: This snippet demonstrates how to use `curl` to query the Safe Transaction Service API for a list of Safe addresses that have a specific module enabled. It sends a GET request to the `/api/v1/modules/{address}/safes/` endpoint, replacing `{address}` with the module address, and includes standard Accept and Content-Type headers. The expected output is a JSON object containing a list of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation - cURL\nDESCRIPTION: This cURL command adds a confirmation to a specified multisig transaction on the Safe Transaction API. It uses the POST method to call the endpoint. It specifies the Accept and content-type headers as application/json. The request body is an empty JSON object. The path includes a specific safe operation hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Static Props Generation using React and MDX for API Documentation\nDESCRIPTION: This code defines an asynchronous function that renders an MDX component to a string, extracts headings from Swagger schema JSON and rendered content, and returns these as props for static site generation. It utilizes React's server-side rendering and custom MDX utilities, with dependencies on React, MDX components, and Swagger JSON schemas.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/optimism.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Incoming Transfers using Safe Transaction Service - Bash\nDESCRIPTION: This snippet provides a sample cURL command to query the Safe Transaction Service API endpoint for retrieving incoming transfers (ether and tokens) for a specific Safe address. The request uses HTTP GET with appropriate headers to request JSON content. It demonstrates the usage of path parameters specifying the Safe address. This example assumes network access to the Sepolia testnet endpoint and requires no additional authentication shown here.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Pending Transactions with SafeApiKit (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve pending transactions for a given Safe address using the `getPendingTransactions` method of the `SafeApiKit`. It requires the `apiKit` object, which is a pre-initialized instance of `SafeApiKit`.  It takes the safe address and an optional options object containing filters for the query as input. The output is a promise that resolves to a `SafeMultisigTransactionListResponse`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getpendingtransactions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\nconst options = {\n  currentNonce: 0,\n  hasConfirmations: true,\n  ordering: 'created',\n  limit: 10,\n  offset: 10\n}\n\nconst pendingTxs = await apiKit.getPendingTransactions(safeAddress, options)\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Transfers via API (Bash)\nDESCRIPTION: Demonstrates using `curl` to send a GET request to the Safe Transaction Service API for retrieving the list of token transfers associated with a specific Safe address. The request includes the required 'Accept' header.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Safe Message Hash in TypeScript\nDESCRIPTION: Demonstrates importing `hashSafeMessage` from `@safe-global/protocol-kit` and `EIP712TypedData` from `@safe-global/types-kit` to first generate a standard message hash from a raw string or typed data, and then using an initialized `protocolKit` instance's `getSafeMessageHash` method to compute the Safe-specific message hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/getsafemessagehash.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hashSafeMessage } from '@safe-global/protocol-kit'\nimport { EIP712TypedData } from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst rawMessage: string | EIP712TypedData = 'Example message'\nconst messageHash = hashSafeMessage(rawMessage)\n\nconst safeMessageHash = await protocolKit.getSafeMessageHash(messageHash)\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Transactions with curl Bash\nDESCRIPTION: This snippet provides a command-line example using `curl` to make a GET request to the Safe Transaction Service API. It fetches all transactions for the specified Safe address (`0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`) on the Base Sepolia network, demonstrating the required URL path and headers (`Accept`, `Content-Type`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Token Information using cURL\nDESCRIPTION: Illustrates using cURL to send a GET request to the `/api/v1/tokens/{address}/` endpoint to retrieve detailed information for a specific token, identified by its contract address (e.g., 0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75) provided as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Using Web3Adapter from Protocol Kit\nDESCRIPTION: Shows how to import the `Web3Adapter` class from the `protocol-kit`, replacing the previous import from `@safe-global/safe-web3-lib`. It is used for integrating Web3.js v1 with the Safe SDK.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v1.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Web3Adapter } from '@safe-global/protocol-kit' // new\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction to Remove Owner by Address using Protocol Kit (TypeScript)\nDESCRIPTION: Demonstrates how to use `createRemoveOwnerTx` to create a Safe transaction to remove an owner specified by their address. It shows how to define the parameters, including the optional new threshold, and how to pass optional transaction properties like gas settings and nonce.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RemoveOwnerTxParams,\n  SafeTransactionOptionalProps\n} from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst params: RemoveOwnerTxParams = {\n  ownerAddress: '0x...', // The address of the owner to remove\n  threshold: 123 // Optional: The new threshold\n}\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createRemoveOwnerTx(\n  params,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Response - JSON\nDESCRIPTION: This JSON snippet shows a sample response from the API endpoint for listing multi-signature transactions.  It includes the `count`, `next`, `previous` fields for pagination, and a `results` array containing details of each transaction, such as `safe`, `to`, `value`, `data`, `operation`, confirmations and related transaction hashes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling getIncomingTransactions with Safe Address (TypeScript)\nDESCRIPTION: This basic example shows how to call the getIncomingTransactions function by providing only the mandatory Safe address string as an argument. This fetches the default list of incoming transactions for the specified Safe account without any filtering or pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getincomingtransactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst incomingTxs = await apiKit.getIncomingTransactions(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Response Format for Safe Collectibles\nDESCRIPTION: Sample response showing the format of collectible data returned by the Safe API. This includes a count of tokens, pagination links, and detailed information about each collectible including its address, token name, symbol, and URI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\n      \"tokenName\": \"SampleNft\",\n      \"tokenSymbol\": \"SN\",\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\n      \"id\": \"1\",\n      \"uri\": null,\n      \"name\": null,\n      \"description\": null,\n      \"imageUri\": null,\n      \"metadata\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Balances with curl (Deprecated)\nDESCRIPTION: This `curl` command demonstrates how to retrieve the balances of Ether and ERC20 tokens for a given Safe account using the `/api/v1/safes/{address}/balances/` endpoint. It sends a GET request to the specified URL, including headers to accept JSON responses and defining the content type. Note that this endpoint is marked as deprecated.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Import Dependencies - Python\nDESCRIPTION: This snippet imports the necessary Python modules for interacting with the Safe Transaction Service API. It includes modules for Ethereum client, transaction service API, account management, and checksum addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom safe_eth.eth import EthereumClient, EthereumNetwork\nfrom safe_eth.safe.api.transaction_service_api import TransactionServiceApi\nfrom eth_account import Account\nfrom eth_typing import ChecksumAddress\n```\n\n----------------------------------------\n\nTITLE: Confirming Transaction with Owner Signature\nDESCRIPTION: This code snippet demonstrates how to confirm a Safe transaction by adding a signature from an owner using the `confirmTransaction` method of the Safe Transaction Service API. It requires the transaction hash and the owner's signature as input. The `buildSignatureBytes` function is used to format the signature properly.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst signatureOwner2 = safeTransaction.getSignature(OWNER_2_ADDRESS) as EthSafeSignature\n\n// Confirm the transaction from OWNER_2_ADDRESS\nawait apiKit.confirmTransaction(\n  safeTransactionHash,\n  buildSignatureBytes([signatureOwner2])\n)\n\n// Confirm the transaction with the owner SAFE_1_1_ADDRESS\nawait apiKit.confirmTransaction(\n  safeTransactionHash,\n  buildSignatureBytes([signatureSafe1_1])\n)\n\n// Add signature from the owner SAFE_2_3_ADDRESS\nawait apiKit.confirmTransaction(\n  safeTransactionHash,\n  buildSignatureBytes([signerSafeSig2_3])\n)\n```\n\n----------------------------------------\n\nTITLE: Passing Message Hash to getSafeMessageHash in TypeScript\nDESCRIPTION: Illustrates the direct usage of the `getSafeMessageHash` method on an initialized `protocolKit` instance. It takes the pre-computed hash of the message (`messageHash`) as a string argument and returns a Promise resolving to the Safe message hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/getsafemessagehash.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeMessageHash = await protocolKit.getSafeMessageHash(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for Multisignature Transaction Using Safe Transaction Service API in bash\nDESCRIPTION: This snippet illustrates how to estimate the safeTxGas (gas required) for a multisignature transaction linked to a given Safe address. It uses a POST request with the Safe's Ethereum address as a path parameter. The sample curl command sends an empty JSON payload and expects a JSON response containing the gas estimation. The API handles success with status 200 and possible errors such as invalid data (400), Safe not found (404), or invalid transactions (422). This functionality helps clients anticipate transaction fees before submission.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing User Operations via Safe Transaction REST API using Bash\nDESCRIPTION: This snippet demonstrates how to invoke the Safe Transaction Service API to retrieve user operations related to a specific Safe account address. It uses curl in Bash to make a GET request with HTTP headers specifying JSON content acceptance. The path parameter 'address' must be replaced with the target Safe account. This snippet requires network connectivity and curl installed. It outputs the raw JSON response with paginated user operation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\  \n    -H \"Accept: application/json\" \\  \n    -H \"content-type: application/json\" \\  \n     \n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit with Only chainId - TypeScript\nDESCRIPTION: This snippet shows how to create a SafeApiKit instance by specifying only the mandatory chainId parameter. It assumes that the default transaction service URL is sufficient for the targeted network. Required dependencies are Node.js and the SafeApiKit package. The chainId key determines the blockchain network the kit will interact with. The output is a SafeApiKit instance configured to use the network identified by the provided chainId.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/constructor.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKit = new SafeApiKit({\n  chainId: 1n\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pending Transactions with Safe SDK in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `getPendingTransactions` method on an initialized `safeClient` instance to fetch the list of pending transactions associated with the Safe. It depends on the `safeClient` being previously set up.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getpendingtransactions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst pendingTransactions = await safeClient.getPendingTransactions()\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Safe Multisig Transactions\nDESCRIPTION: This JSON object illustrates the structure of a successful response from the `/api/v1/safes/{address}/multisig-transactions/` endpoint. It includes pagination details (`count`, `next`, `previous`), and an array (`results`) containing detailed information about each multisig transaction, such as destination address (`to`), value, nonce, execution status, confirmations, associated hashes, and gas details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response Schema for UserOperations List API\nDESCRIPTION: This snippet provides a sample JSON response from the UserOperations list endpoint. It demonstrates the structure containing pagination keys (count, next, previous) and the results array. Each UserOperation object includes fields such as ethereumTxHash, sender, userOperationHash, gas limits, paymaster data, signature, entryPoint, and a nested safeOperation object with metadata and confirmations. The response illustrates expected data types, required properties, and nested objects for API consumers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Daily Spending Limit Guard for Safe Smart Account (Solidity)\nDESCRIPTION: This Solidity contract implements a Guard to enforce daily spending limits on a Safe Smart Account. It tracks daily expenditures for each user, resets limits after 24 hours, and blocks transactions that exceed allowed amounts. Dependencies include inheriting from a Guard interface and using Safe's Enum and transaction validation contracts. Key parameters: to (destination), value, data (payload), and sender address. Exceeds daily usage reverts; proper signature management is required. Designed for modular integration with Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx.txt#_snippet_5\n\nLANGUAGE: Solidity\nCODE:\n```\n// Example Guard contract\ncontract SpendingLimitGuard is Guard {\n    mapping(address => uint256) public dailyLimits;\n    mapping(address => uint256) public dailySpent;\n    mapping(address => uint256) public lastSpendDay;\n\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external override {\n        // Reset spent amount if it's a new day\n        uint256 currentDay = block.timestamp / 1 days;\n        if (currentDay > lastSpendDay[msg.sender]) {\n            dailySpent[msg.sender] = 0;\n            lastSpendDay[msg.sender] = currentDay;\n        }\n\n        // Check if transaction exceeds daily limit\n        require(\n            dailySpent[msg.sender] + value <= dailyLimits[msg.sender],\n            \"Daily spending limit exceeded\"\n        );\n        \n        // Update spent amount\n        dailySpent[msg.sender] += value;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Safe Owner Using React Hook useUpdateOwners in TypeScript\nDESCRIPTION: Demonstrates how to use the addOwner function from the useUpdateOwners hook to add a new owner to a Safe contract within a React functional component. The snippet shows setting the owner address and optional threshold, triggering the mutation on button click, and rendering the mutation data if available. Dependencies include @safe-global/safe-react-hooks and React environment supporting JSX/TSX syntax.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/add.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUpdateOwners, AddOwnerVariables } from '@safe-global/safe-react-hooks'\n\nfunction AddOwner() {\n  const { add } = useUpdateOwners()\n  const {\n    addOwner,\n    data,\n    // ...\n  } = add\n\n  const addOwnerParams: AddOwnerVariables = {\n    ownerAddress: '0x...',\n    threshold: 2 // Optional\n  }\n\n  return (\n    <>\n      <button onClick={() => addOwner(addOwnerParams)}>\n        Add Owner\n      </button>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default AddOwner\n```\n\n----------------------------------------\n\nTITLE: Get User Operation via cURL\nDESCRIPTION: This curl command demonstrates how to retrieve a UserOperation using the GET method. It specifies the URL of the API endpoint with the user operation hash. The -H flags define the headers, including Accept and Content-Type. The user operation hash is a required path parameter. The expected output is a JSON object containing UserOperation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Executing GET Request to Safe Transaction API Using cURL (bash)\nDESCRIPTION: This bash snippet demonstrates how to perform an HTTP GET request using cURL to retrieve a Safe operation by providing the Safe operation hash in the URL path. It sets headers to accept and send JSON content. The snippet is designed for command-line interfaces to interact with the Safe Transaction service endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Get User Operation with Curl\nDESCRIPTION: This curl command retrieves a user operation by its hash from the Safe Transaction Service. The request includes headers to specify that the expected response format is JSON. The `user_operation_hash` is passed within the URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Polling for User Operation Receipt Until Confirmation in TypeScript\nDESCRIPTION: Continuously polls the getUserOperationReceipt() method every 2 seconds with the user operation hash until a transaction receipt is returned, indicating the operation has been processed. This allows waiting for confirmation after submission.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet userOperationReceipt = null\n\nwhile (!userOperationReceipt) {\n  // Wait 2 seconds before checking the status again\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n  userOperationReceipt = await safe4337Pack.getUserOperationReceipt(\n    userOperationHash\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Safe Delegate with signer in TypeScript\nDESCRIPTION: This snippet highlights the use of the signer property, which is required for authorization when adding a Safe delegate. The signer should be a valid Signer object compatible with the API kit, and its absence would cause the method to fail.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafedelegate.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst config = await apiKit.addSafeDelegate({\n  delegateAddress: '0x...',\n  delegatorAddress: '0x...',\n  label: 'abc',\n  signer\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Transfers using Curl (Bash)\nDESCRIPTION: Demonstrates how to make a GET request using curl to retrieve the list of token transfers for a specific Safe address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`) from the Safe Transaction Service API. It specifies the required `Accept` and `content-type` headers. The API endpoint used is `https://safe-transaction-blast.safe.global/api/api/v1/safes/{address}/transfers/`. Returns a paginated list, up to 1000 newest transfers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Safe Operations via API using cURL (bash)\nDESCRIPTION: This snippet demonstrates how to retrieve a list of Safe Operations for a specific Safe address (e.g., 0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75) using a GET request with `curl`. It targets the Safe Transaction Service API on the Polygon network and specifies the `Accept` and `content-type` headers for a JSON response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configure Sponsorship of User Operation in Middleware for Safe Account in TypeScript\nDESCRIPTION: Overrides the default sponsorUserOperation method to include a specific sponsorship policy ID, enabling transaction sponsorship through Pimlico's infrastructure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nsponsorUserOperation: ({ userOperation }) => {\n  return paymasterClient.sponsorUserOperation({\n    userOperation,\n    sponsorshipPolicyId: SPONSORSHIP_POLICY_ID\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Multisig Transactions (cURL)\nDESCRIPTION: This cURL command retrieves multisig transactions for a Safe address from the Safe Transaction Service API. It sends a GET request to the specified endpoint, including headers for JSON acceptance and content type. The address `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` is used as an example Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Fetching User Operations using cURL (Bash)\nDESCRIPTION: Example cURL command to send a GET request to the `/api/v1/safes/{address}/user-operations/` endpoint hosted on the Safe Transaction Service for Scroll. It retrieves the list of UserOperations for the specified Safe address (0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75), accepting JSON responses and specifying the content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: SafeOperation Query Response Example - JSON\nDESCRIPTION: This JSON snippet provides a sample response for a successful SafeOperation query via the Safe Transaction Service API. The structure includes timestamps, operation hash, module address, confirmations (with each containing owner and signature details), prepared signature, and an embedded userOperation object with all operation and transaction parameters. This serves as a schema and usage model for deserializing and understanding responses from the Safe API when integrating with client applications. Inputs are defined by the API query, and the output is a detailed JSON object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Approved Owners with Safe Protocol Kit (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `getOwnersWhoApprovedTx` method from the Safe Protocol Kit to retrieve a list of owners who have approved a Safe transaction.  It requires a pre-initialized `protocolKit` instance and the `safeTransactionHash` of the transaction. The function returns a promise that resolves to an array of owner addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getownerswhoapprovedtx.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst safeTransactionHash = '0x...'\n\nconst ownerAddresses = await protocolKit.getOwnersWhoApprovedTx(\n  safeTransactionHash\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transaction by Hash using curl in Bash\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve multisig transaction details by its Safe transaction hash. The request includes necessary headers for JSON content.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using createDisableModuleTx with baseGas option\nDESCRIPTION: Example showing how to specify the baseGas option when creating a transaction to disable a Safe Module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableModuleTx(\n  '0x...',\n  options: {\n    baseGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Prepared Signature\nDESCRIPTION: This code snippet represents a prepared signature, which is a hexadecimal string used in Safe transactions. It is likely part of a larger transaction object used to authorize and execute operations in a Safe multi-signature wallet. The signature includes various components, like the signature type, signer address, and the actual signature data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_65\n\nLANGUAGE: text\nCODE:\n```\n\"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n```\n\n----------------------------------------\n\nTITLE: Importing Transactions - TypeScript\nDESCRIPTION: This TypeScript snippet, likely part of a larger example, is intended to illustrate how transaction data might be structured or used within a front-end or application context. It probably resides in an example file and serves a demonstration purpose.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/mainnet/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Gas Price\nDESCRIPTION: Example showing how to set a specific gas price when sending an on-chain message. The gas price represents the amount in wei per unit of gas the sender is willing to pay.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageResult = await safeMessageClient.sendOnChainMessage({\n  message: 'abc',\n  gasPrice: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Updating SigningMethod Imports in Safe Global SDK - TypeScript\nDESCRIPTION: Demonstrates the migration changes for importing SigningMethod and SigningMethodType types in the Safe Global SDK from v5 to v6. The snippet shows that these types are no longer imported from '@safe-global/protocol-kit' but now must be imported from '@safe-global/types-kit'. This update requires adjusting the import statements accordingly in TypeScript projects to align with the new package structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v6.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// old v5 code\nimport { SigningMethod, SigningMethodType } from '@safe-global/protocol-kit'\n\n// new v6 code\nimport { SigningMethod, SigningMethodType } from '@safe-global/types-kit'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Operations\nDESCRIPTION: This JSON snippet provides an example of the response returned by the API when listing Safe Operations. It shows the paginated structure including the total count, pagination links, and a list of Safe Operation objects, each containing details like hash, dates, module address, confirmations, and associated User Operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Retrieving a Transfer\nDESCRIPTION: Illustrates the JSON response format when successfully retrieving a single transfer by its ID using the `/api/v1/transfer/{transfer_id}` endpoint. The response contains a single transfer object detailing its properties such as type, execution date, block number, transaction hash, addresses, value, token ID, token address, unique transfer ID, token info, and sender address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Token Information with cURL\nDESCRIPTION: Example of how to fetch detailed information about a specific token by its address using the Safe Transaction Service API. This returns information such as token type, name, symbol, decimals, and logo URI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Analyzing Multisig Transactions by Origin - cURL\nDESCRIPTION: This cURL command retrieves analytics data on multisig transactions, grouped by their origin. It uses a GET request to the /api/v2/analytics/multisig-transactions/by-origin/ endpoint and defines the Accept and content-type headers. The response is a structured data format, likely JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Get Token Information Example\nDESCRIPTION: Retrieves detailed information for a specific token given its address, from the Safe Transaction Service. Uses the v1 API endpoint. The token address is provided as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions from Safe Modules in Solidity\nDESCRIPTION: Defines the ISafe interface containing the execTransactionFromModuleReturnData function, which enables executing a transaction from an enabled Safe Module and returning success status along with the returned data. The snippet also shows example usage within a contract, invoking the function with destination address, value, data payload, and operation type parameters. Dependencies include the Enum.Operation enumeration and ISafe interface. Inputs include target address, token value, calldata bytes, and operation enum; output is a tuple of success boolean and returned data bytes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/execTransactionFromModuleReturnData.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface ISafe {\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes data,\n        enum Enum.Operation operation\n    ) external returns (bool success, bytes returnData);\n}\n\ncontract Example {\n    function example() external {\n        (ISafe safe).execTransactionFromModuleReturnData(\n            0x...,\n            0,\n            \"0x...\",\n            Enum.Operation.Call\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating and Reverting Delegatecall with simulateAndRevert in Solidity\nDESCRIPTION: This Solidity snippet demonstrates how to define and invoke the simulateAndRevert method via the ISafe interface, passing a target contract address and a bytes payload. The purpose is to simulate a delegatecall without causing any state changes, as the method intentionally reverts after execution. Dependencies include the ISafe interface definition and appropriate contract addresses. Input parameters are the address of the contract to call and bytes-encoded calldata; there is no output as the method always reverts, but returndata will encode the success status and response bytes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/simulateAndRevert.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function simulateAndRevert(\n        address targetContract,\n        bytes calldata payload\n    ) external;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).simulateAndRevert(0x..., \"0x...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Details of a Specific Token in Safe Transaction API (TypeScript)\nDESCRIPTION: This snippet references TypeScript example code used to retrieve detailed information about a particular token by its address, including type, name, symbol, decimals, logo URI, and trust status. It depends on specifying the token's address in the endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/arbitrum/-v1-tokens-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Safes using a Specific Module via REST API\nDESCRIPTION: This code snippet documents the API endpoint to retrieve a list of safes associated with a particular module address, including request parameters, response schemas, and sample cURL command for testing. The endpoint requires the module address as a path parameter, and the response returns an array of safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Import Dependencies for Safe Deployment\nDESCRIPTION: This TypeScript snippet imports required modules from the Safe Protocol Kit and the viem library. It imports functionalities like `Safe`, `PredictedSafeProps`, `SafeAccountConfig` and chain definitions like `sepolia` for interacting with the Sepolia testnet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/safe-deployment.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe, {\n  PredictedSafeProps,\n  SafeAccountConfig,\n  SafeDeploymentConfig\n} from '@safe-global/protocol-kit'\nimport { sepolia } from 'viem/chains'\n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction - Bash\nDESCRIPTION: Demonstrates how to confirm a multisig transaction using a POST request to the Safe Transaction Service API. The request includes the safe transaction hash in the URL. An empty JSON payload is sent in the request body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Collectible Query (json)\nDESCRIPTION: This JSON structure is the sample output when querying collectibles for a Safe account. It contains the total count, pagination URLs (next, previous), and results as an array of objects. Each collectible object includes ERC721 token metadata fields like address, tokenName, tokenSymbol, logoUri, id, description, imageUri, and a metadata object. Some fields may be null if not available.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\n      \"tokenName\": \"SampleNft\",\n      \"tokenSymbol\": \"SN\",\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\n      \"id\": \"1\",\n      \"uri\": null,\n      \"name\": null,\n      \"description\": null,\n      \"imageUri\": null,\n      \"metadata\": {}\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example (Placeholder)\nDESCRIPTION: Placeholder - The content from a TypeScript file is referenced. This snippet indicates that the actual implementation is located elsewhere.  The purpose here is to signify the existence of relevant TypeScript examples.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_82\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/xlayer/-v1-tokens-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates API Sample Response\nDESCRIPTION: Shows a sample JSON response from the GET /delegates/ endpoint, including total count and results array with delegate details such as safe address, delegate, delegator, and label.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using refundReceiver option in createEnableGuardTx in TypeScript\nDESCRIPTION: This snippet shows how to use the `refundReceiver` option when calling `createEnableGuardTx`.  `refundReceiver` is a string representing the address of the gas payment receiver. It is part of an `options` object passed to the `createEnableGuardTx` function.  This code assumes that the `protocolKit` is initialized and that the `options` object is properly structured. The `options` parameter is optional, and other optional parameters are available to configure the transaction.  A value of `0x0000000000000000000000000000000000000000` indicates no payment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableGuardTx(\n  '0x...',\n  options: {\n    refundReceiver: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ISafe Interface & enableModule Usage - Solidity\nDESCRIPTION: This Solidity code snippet defines the `ISafe` interface, which includes the `enableModule` function. It also shows an example of how to call the `enableModule` function within a smart contract to enable a specific module address. The `module` parameter specifies the address of the Safe Module to be enabled.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/enableModule.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface ISafe {\n    function enableModule(address module) external;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).enableModule(0x...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching owners using Safe client in TypeScript\nDESCRIPTION: This snippet demonstrates how to call the asynchronous getOwners() method on an initialized safeClient instance to retrieve the list of owner addresses of the connected Safe. It requires the safeClient to be properly set up and connected. The method returns a Promise resolving to an array of strings representing Ethereum addresses. This snippet assumes the client initialization is handled separately.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getowners.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst owners = await safeClient.getOwners()\n```\n\n----------------------------------------\n\nTITLE: Implementing checkTransaction in NoDelegatecallGuard\nDESCRIPTION: Implements the `checkTransaction` function, which is called by the Safe before executing a transaction. It checks the `operation` type; if it's `Enum.Operation.DelegateCall`, the function reverts with the `DelegatecallNotAllowed` error.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nfunction checkTransaction(\n    address /*to*/,\n    uint256 /*value*/,\n    bytes memory /*data*/,\n    Enum.Operation operation,\n    uint256 /*safeTxGas*/,\n    uint256 /*baseGas*/,\n    uint256 /*gasPrice*/,\n    address /*gasToken*/,\n    address payable /*refundReceiver*/,\n    bytes memory /*signatures*/,\n    address /*msgSender*/\n) external {\n    if(operation == Enum.Operation.DelegateCall) {\n        revert DelegatecallNotAllowed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the AI agent in a local environment\nDESCRIPTION: Command to execute the agent with environment variables loaded from the .env file, testing the balance checking and Safe deployment functionalities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-setup.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm tsx --env-file=.env agent.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a SafeOperation via Safe Transaction Service API - Bash\nDESCRIPTION: This Bash code snippet demonstrates how to use curl to initiate a POST request to the Safe Transaction Service API to add a SafeOperation for a specific Safe account. Dependencies include curl and network access to the API; no authentication headers are shown, so any required credentials must be handled separately. The endpoint expects the Safe address as a path parameter, accepts application/json, and the body is an empty JSON object; it returns a 201 status code with an unspecified response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Testing TokenWithdrawModule Safe Module with Hardhat in TypeScript\nDESCRIPTION: This TypeScript snippet defines a complete Hardhat test suite for the TokenWithdrawModule smart contract. It includes setup of signer accounts and deployment of related contracts: Safe, TestToken, SafeProxyFactory, and TokenWithdrawModule. The tests cover Safe creation via proxy, token minting, enabling the withdrawal module, and executing token transfers using EIP-712 typed data signatures. Dependencies include Hardhat, ethers, chai, and typechain. Inputs include token amounts, deadlines, and user addresses; outputs are assertions on balances and security checks. The code ensures only authorized signatures trigger token transfers, verifying nonce management and signature validity. Limitations include reliance on pre-deployed contracts and simulated blockchain state with Hardhat.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Import necessary libraries and types\nimport { ethers } from \"hardhat\";\nimport { expect } from \"chai\";\nimport { Signer, TypedDataDomain, ZeroAddress } from \"ethers\";\nimport {\n  Safe,\n  TestToken,\n  TokenWithdrawModule,\n} from \"../typechain-types\";\nimport { execTransaction } from \"./utils/utils\";\n\ndescribe(\"TokenWithdrawModule Tests\", function () {\n  // Define variables\n  let deployer: Signer;\n  let alice: Signer;\n  let bob: Signer;\n  let charlie: Signer;\n  let masterCopy: any;\n  let token: TestToken;\n  let safe: Safe;\n  let safeAddress: string;\n  let chainId: bigint;\n\n  // Setup signers and deploy contracts before running tests\n  before(async () => {\n    [deployer, alice, bob, charlie] = await ethers.getSigners();\n\n    chainId = (await ethers.provider.getNetwork()).chainId;\n    const safeFactory = await ethers.getContractFactory(\"Safe\", deployer);\n    masterCopy = await safeFactory.deploy();\n\n    // Deploy a new token contract\n    token = await (\n      await ethers.getContractFactory(\"TestToken\", deployer)\n    ).deploy(\"test\", \"T\");\n\n    // Deploy a new SafeProxyFactory contract\n    const proxyFactory = await (\n      await ethers.getContractFactory(\"SafeProxyFactory\", deployer)\n    ).deploy();\n\n    // Setup the Safe, Step 1, generate transaction data\n    const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [\n      [await alice.getAddress()],\n      1,\n      ZeroAddress,\n      \"0x\",\n      ZeroAddress,\n      ZeroAddress,\n      0,\n      ZeroAddress,\n    ]);\n\n    // Read the safe address by executing the static call to createProxyWithNonce function\n    safeAddress = await proxyFactory.createProxyWithNonce.staticCall(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    if (safeAddress === ZeroAddress) {\n      throw new Error(\"Safe address not found\");\n    }\n\n    // Setup the Safe, Step 2, execute the transaction\n    await proxyFactory.createProxyWithNonce(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    safe = await ethers.getContractAt(\"Safe\", safeAddress);\n\n    // Mint tokens to the safe address\n    await token\n      .connect(deployer)\n      .mint(safeAddress, BigInt(10) ** BigInt(18) * BigInt(100000));\n  });\n\n  // A Safe Module is a smart contract that is allowed to execute transactions on behalf of a Safe Smart Account.\n  // This function deploys the TokenWithdrawModule contract and enables it in the Safe.\n  const enableModule = async (): Promise<{\n    tokenWithdrawModule: TokenWithdrawModule;\n  }> => {\n    // Deploy the TokenWithdrawModule contract and pass the token and safe address as arguments\n    const tokenWithdrawModule = await (\n      await ethers.getContractFactory(\"TokenWithdrawModule\", deployer)\n    ).deploy(token.target, safeAddress);\n\n    // Enable the module in the safe, Step 1, generate transaction data\n    const enableModuleData = masterCopy.interface.encodeFunctionData(\n      \"enableModule\",\n      [tokenWithdrawModule.target]\n    );\n\n    // Enable the module in the safe, Step 2, execute the transaction\n    await execTransaction([alice], safe, safe.target, 0, enableModuleData, 0);\n\n    // Verify that the module is enabled\n    expect(await safe.isModuleEnabled.staticCall(tokenWithdrawModule.target)).to\n      .be.true;\n\n    return { tokenWithdrawModule };\n  };\n\n  // Test case to verify token transfer to bob\n  it(\"Should successfully transfer tokens to bob\", async function () {\n    // Enable the module in the Safe\n    const { tokenWithdrawModule } = await enableModule();\n\n    const amount = 10000000000000000000n; // 10 * 10^18\n    const deadline = 100000000000000n;\n    const nonce = await tokenWithdrawModule.nonces(await bob.getAddress());\n\n    // Our module expects a EIP-712 typed signature, so we need to define the EIP-712 domain, ...\n    const domain: TypedDataDomain = {\n      name: \"TokenWithdrawModule\",\n      version: \"1\",\n      chainId: chainId,\n      verifyingContract: await tokenWithdrawModule.getAddress(),\n    };\n\n    // ... and EIP-712 types ...\n    const types = {\n      TokenWithdrawModule: [\n        { name: \"amount\", type: \"uint256\" },\n        { name: \"beneficiary\", type: \"address\" },\n        { name: \"nonce\", type: \"uint256\" },\n        { name: \"deadline\", type: \"uint256\" },\n      ],\n    };\n\n    // ... and EIP-712 values ...\n    const value = {\n      amount: amount,\n      beneficiary: await bob.getAddress(),\n      nonce: nonce,\n      deadline: deadline,\n    };\n\n    // ... and finally hash the data using EIP-712\n    const digest = ethers.TypedDataEncoder.hash(domain, types, value);\n    const bytesDataHash = ethers.getBytes(digest);\n    let signatureBytes = \"0x\";\n\n    // Alice signs the digest\n    const flatSig = (await alice.signMessage(bytesDataHash))\n      .replace(/1b$/, \"1f\")\n      .replace(/1c$/, \"20\");\n    signatureBytes += flatSig.slice(2);\n\n    // We want to make sure that an invalid signer cannot call the module even with a valid signature\n    // We test this before the valid transaction, because it would fail because of an invalid nonce otherwise\n    await expect(\n      tokenWithdrawModule\n        .connect(charlie)\n        .tokenTransfer(\n          amount,\n          await charlie.getAddress(),\n          deadline,\n          signatureBytes\n        )\n    ).to.be.revertedWith(\"GS026\");\n\n    // Now we use the signature to transfer via our module\n    await tokenWithdrawModule\n      .connect(bob)\n      .tokenTransfer(amount, await bob.getAddress(), deadline, signatureBytes);\n\n    // Verify the token balance of bob (should be 10000000000000000000)\n    const balanceBob = await token.balanceOf.staticCall(await bob.getAddress());\n    expect(balanceBob).to.be.equal(amount);\n\n    // All done.\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Modeling Failed Settlement Challenge Flow Using Mermaid Sequence Diagram\nDESCRIPTION: This mermaid sequence diagram illustrates the 'sad flow' scenario during a settlement challenge in the Safenet protocol. It shows the processor settling, a settlement delay, and a validator challenging the transaction. The diagram includes conditional paths where the guarantee engine may validate the correctness, leading to settlement completion and funds transfer, or the processor failing proof, resulting in punishment and loss of fronted funds. This visualization represents the key actors and message passing during a challenged settlement flow across multiple chains and engines.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/safenet/concepts/settlement.mdx#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tbox MVP Processor\n\t\tactor P as Processor\n\t\tactor LP as Liquidity Provider\n\tend\n\tactor V as Validator\n\tbox rgb(255,165,0,0.2)\n\t\tparticipant G as Guarantee Engine<br>(HOME CHAIN)\n\tend\n\tparticipant B as Bridge\n  participant S as Settlement Engine\n\tparticipant A as Account\n\n  P->>S: settle\n\tNote over S: Settlement Delay...\n  V->>V: check settlement correctness\n  \n  opt Incorrect Settlement\n\t  V->>S: challenge (WITH COLLATERAL Ψ)\n\tend\n  \n  alt Correctness Proven\n    G-->>+B: correctnessProven\n\t  B->>S: correctnessProven\n    A-->>LP: transferFrom(Account, Liquidity Provider)\n    deactivate B\n  else\n\t  Note over S: ...Settlement Delay\n\t  P-->>P: punished: loses fronted funds\n  end\n```\n\n----------------------------------------\n\nTITLE: Calling getNextNonce with @safe-global/api-kit in TypeScript\nDESCRIPTION: Demonstrates how to call the `getNextNonce` method on an initialized `SafeApiKit` instance (`apiKit`) to retrieve the next available nonce for a specific Safe address. Requires a pre-configured `apiKit` instance, typically defined in a setup file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getnextnonce.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\n\nconst nextNonce = await apiKit.getNextNonce(safeAddress)\n```\n\n----------------------------------------\n\nTITLE: Configuring SafeProvider with React and Viem Chain in TypeScript\nDESCRIPTION: Illustrates the setup and usage of SafeProvider from @safe-global/safe-react-hooks to wrap a React app with Safe context, using Viem's Sepolia testnet chain configuration. It includes creation of a config object with provider, signer, and safeAddress details, then mounting the React app into the DOM. This snippet has dependencies on React 18+, @safe-global/safe-react-hooks, and viem chain definitions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/add.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\nimport App from './App.tsx  '\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst root = document.getElementById('root')\n\nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying the Signer for createSafeClient in TypeScript\nDESCRIPTION: Focuses on the `signer` parameter for the `createSafeClient` function. The signer must be a connected owner of the Safe and can be provided as a `HexAddress`, `PrivateKey`, or `PasskeyClient`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/constructor.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider,\n  signer, // highlight-line\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Get Multisig Transaction using curl\nDESCRIPTION: This snippet demonstrates how to retrieve a multi-signature transaction from the Safe Transaction Service using a `curl` command. The request includes the Safe transaction hash in the URL and specifies the `Accept` and `content-type` headers as `application/json`. The response contains the details of the multisig transaction, including the Safe address, destination address, value, and execution status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract API Endpoint\nDESCRIPTION: This snippet defines the request to retrieve detailed information about a specific smart contract identified by its address. Dependencies include the API URL, path parameters, and headers. The response contains comprehensive contract data such as ABI, name, and trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Invoking swapOwner for prevOwner Parameter - Solidity\nDESCRIPTION: This snippet shows the invocation of swapOwner specifically in the context of providing the prevOwner parameter, which must be the address pointing to the owner to be replaced in the linked list. This code is used to ensure proper traversal and modification of the linked list of owners, and prevOwner must be carefully determined from the contract's owner state. It expects three addresses as input, with the first being the prevOwner, and requires the ISafe interface and contract instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/swapOwner.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).swapOwner(\n    0x...,\n    0x...,\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeProvider and Rendering React App with TypeScript\nDESCRIPTION: Demonstrates creating a SafeProvider configuration using createConfig with chain, provider, signer, and safeAddress parameters. It shows rendering a React application wrapped in SafeProvider to enable safe-react-hooks functionality. Dependencies include 'react-dom/client', '@safe-global/safe-react-hooks', and 'viem/chains'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\nimport App from './App.tsx  '\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst root = document.getElementById('root')\n\nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Calling isModuleEnabled with Module Address\nDESCRIPTION: This is an example of calling `isModuleEnabled` with a module address. It highlights the `moduleAddress` parameter and shows how it's used within the function call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/ismoduleenabled.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst isEnabled = await protocolKit.isModuleEnabled(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Operation with API Endpoint\nDESCRIPTION: This code snippet shows the API endpoint for retrieving a user operation by its hash.  It uses the GET method and takes the user operation hash as a path parameter. The response includes details like ethereumTxHash, sender, userOperationHash, nonce, initCode, callData, callGasLimit, verificationGasLimit, preVerificationGas, maxFeePerGas, maxPriorityFeePerGas, paymaster, paymasterData, signature, entryPoint, and safeOperation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_50\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/blast/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Get User Operation Details (cURL)\nDESCRIPTION: This cURL command demonstrates how to make a GET request to retrieve a user operation's details from a specified API endpoint. It uses the `user_operation_hash` as a parameter. The command specifies the `Accept` and `content-type` headers for a JSON response. The endpoint is for retrieving user operation details, useful for debugging, auditing, or monitoring transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_61\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Creating On-chain Message Storage Transaction - Protocol Kit - TypeScript\nDESCRIPTION: This example illustrates how to hash a message, encode a transaction for the signMessage function, and create a Safe transaction for storing the message hash on-chain. Dependencies include the SignMessageLib contract instance, the Protocol Kit (protocolKit), and the hashSafeMessage utility. Inputs include the message content and transaction configuration. The output is a transaction object ready for signing and execution. OperationType.DelegateCall is required for interaction with contract libraries.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/messages.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageHash = hashSafeMessage(MESSAGE)\nconst txData = signMessageLibContract.encode('signMessage', [messageHash])\n\nconst safeTransactionData: SafeTransactionDataPartial = {\n  to: signMessageLibContract.address,\n  value: '0',\n  data: txData,\n  operation: OperationType.DelegateCall\n}\n\nconst signMessageTx = await protocolKit.createTransaction({\n  transactions: [safeTransactionData]\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Safe Transfer via API (Bash)\nDESCRIPTION: Shows how to use `curl` to send a GET request to the Safe Transaction Service API to fetch details of a specific transfer using its unique `transfer_id`. The request specifies the transfer ID in the path and includes the 'Accept' header.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Description for Listing Incoming Transfers\nDESCRIPTION: This snippet describes the API route for listing incoming transfers for a specific Safe address, including path parameters, query parameters, possible responses, and status codes. It defines the expected request structure and the schema of the paginated transfer results returned by the server.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"parameters\": [\n    {\"in\": \"path\", \"name\": \"address\", \"schema\": {\"type\": \"string\"}, \"required\": true},\n    {\"in\": \"query\", \"name\": \"_from\", \"schema\": {\"type\": \"string\"}},\n    {\"in\": \"query\", \"name\": \"block_number\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"block_number__gt\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"block_number__lt\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"execution_date__gte\", \"schema\": {\"type\": \"string\", \"format\": \"date-time\"}},\n    {\"in\": \"query\", \"name\": \"execution_date__lte\", \"schema\": {\"type\": \"string\", \"format\": \"date-time\"}},\n    {\"in\": \"query\", \"name\": \"execution_date__gt\", \"schema\": {\"type\": \"string\", \"format\": \"date-time\"}},\n    {\"in\": \"query\", \"name\": \"execution_date__lt\", \"schema\": {\"type\": \"string\", \"format\": \"date-time\"}},\n    {\"in\": \"query\", \"name\": \"to\", \"schema\": {\"type\": \"string\"}},\n    {\"in\": \"query\", \"name\": \"token_address\", \"schema\": {\"type\": \"string\"}},\n    {\"in\": \"query\", \"name\": \"transaction_hash\", \"schema\": {\"type\": \"string\"}},\n    {\"in\": \"query\", \"name\": \"value\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"value__gt\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"value__lt\", \"schema\": {\"type\": \"number\"}},\n    {\"in\": \"query\", \"name\": \"erc20\", \"schema\": {\"type\": \"boolean\"}},\n    {\"in\": \"query\", \"name\": \"erc721\", \"schema\": {\"type\": \"boolean\"}},\n    {\"in\": \"query\", \"name\": \"ether\", \"schema\": {\"type\": \"boolean\"}},\n    {\"name\": \"limit\", \"required\": false, \"in\": \"query\", \"description\": \"Number of results to return per page.\", \"schema\": {\"type\": \"integer\"}},\n    {\"name\": \"offset\", \"required\": false, \"in\": \"query\", \"description\": \"The initial index from which to return the results.\", \"schema\": {\"type\": \"integer\"}}\n  ],\n  \"responses\": {\n    \"200\": {\n      \"schema\": {\"$ref\": \"PaginatedTransferWithTokenInfoResponseList\"},\n      \"content\": {\"application/json\": {\"schema\": {\"type\": \"object\", \"required\": [\"count\", \"results\"], \"properties\": {\"count\": {\"type\": \"integer\", \"example\": 123}, \"next\": {\"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=400&limit=100\"}, \"previous\": {\"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=200&limit=100\"}, \"results\": {\"type\": \"array\", \"items\": {\"refName\": \"TransferWithTokenInfoResponse\", \"type\": \"object\", \"properties\": {\"type\": {\"type\": \"string\", \"description\": \"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\", \"readOnly\": true}, \"executionDate\": {\"type\": \"string\", \"format\": \"date-time\"}, \"blockNumber\": {\"type\": \"integer\"}, \"transactionHash\": {\"type\": \"string\"}, \"to\": {\"type\": \"string\"}, \"value\": {\"type\": [\"string\", \"null\"]}, \"tokenId\": {\"type\": [\"string\", \"null\"]}, \"tokenAddress\": {\"type\": [\"string\", \"null\"]}, \"transferId\": {\"type\": \"string\", \"readOnly\": true, \"description\": \"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"}, \"tokenInfo\": {\"refName\": \"TokenInfoResponse\", \"type\": \"object\", \"properties\": {\"type\": {\"type\": \"string\", \"readOnly\": true}, \"address\": {\"type\": \"string\"}, \"name\": {\"type\": \"string\"}, \"symbol\": {\"type\": \"string\"}, \"decimals\": {\"type\": \"integer\"}, \"logoUri\": {\"type\": \"string\", \"readOnly\": true}, \"trusted\": {\"type\": \"boolean\"}}, \"required\": [\"address\", \"decimals\", \"logoUri\", \"name\", \"symbol\", \"trusted\", \"type\"]}, \"from\": {\"type\": \"string\"}}}}}}}}}\n    },\n    \"422\": {\n      \"schema\": {\"$ref\": \"CodeErrorResponse\"},\n      \"content\": {\"application/json\": {\"schema\": {\"refName\": \"CodeErrorResponse\", \"type\": \"object\", \"properties\": {\"code\": {\"type\": \"integer\"}, \"message\": {\"type\": \"string\"}, \"arguments\": {\"type\": \"array\", \"items\": {}}}, \"required\": [\"arguments\", \"code\", \"message\"]}}}\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Collectibles Example\nDESCRIPTION: Retrieves a list of collectibles (ERC721 tokens) for a given Safe address. Includes options for filtering trusted and spam tokens, setting a limit to the number of results returned, and setting an offset for pagination. It uses the v2 API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for UserOperations API Request\nDESCRIPTION: This example shows the structure of the JSON response returned when querying UserOperations. The response includes pagination information and details about each UserOperation, including transaction hashes, sender information, operation parameters, and associated Safe operation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ],\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Safe Creation Status\nDESCRIPTION: Illustrates the structure of a successful JSON response from the `/api/v1/safes/{address}/creation/` endpoint. It includes details like creation timestamp, creator address, transaction hash, factory address, master copy, setup data, decoded setup parameters (`dataDecoded`), and potentially user operation details (`userOperation`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-06-25T11:18:48Z\",\n  \"creator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"transactionHash\": \"0x6404e0298423c092cc1ce486f3f72172a1c0f2f28a9b29f69e605ea825360ac5\",\n  \"factoryAddress\": \"0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC\",\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"setupData\": \"0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000017062a1de2fe6b99be3d9d37841fed19f5738040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d3debaab2b8093e69109f23a75501f864f74e20000000000000000000000003a16e3090e32dded2250e862b9d5610bef13e93d0000000000000000000000000000000000000000000000000000000000000000\",\n  \"dataDecoded\": {\n    \"method\": \"setup\",\n    \"parameters\": [\n      {\n        \"name\": \"_owners\",\n        \"type\": \"address[]\",\n        \"value\": [\n          \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n        ]\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"value\": \"0x\"\n      },\n      {\n        \"name\": \"fallbackHandler\",\n        \"type\": \"address\",\n        \"value\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"payment\",\n        \"type\": \"uint256\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"paymentReceiver\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      }\n    ]\n  },\n  \"userOperation\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Token Information via API using Curl\nDESCRIPTION: This snippet demonstrates using `curl` to fetch detailed information for a specific token address from the Safe Transaction Service API. It requires the token address as a path parameter to the `/api/v1/tokens/{address}/` endpoint and includes `Accept` and `content-type` headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response Get Safes By Module Safe Transaction Service API JSON\nDESCRIPTION: This JSON object is a sample successful response from the Safe Transaction Service API's `/api/v1/modules/{address}/safes/` endpoint. It contains a single key, `safes`, whose value is an array of strings. Each string in the array represents the Ethereum address of a Safe account that utilizes the specified module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response of Incoming Transfers API\nDESCRIPTION: Shows a sample JSON response returned by the incoming transfers API endpoint for a Safe. It includes pagination fields (count, next, previous) and an array of results, each describing a transfer with properties like transfer type, execution date, block number, transaction hash, sender and recipient addresses, value, and unique transfer identifier. The response also includes token information if applicable. This example aids developers in understanding the expected data structure and fields returned from the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signer and Network Configuration - TypeScript\nDESCRIPTION: Defines constants for the signer address, signer private key, and Ethereum RPC URL to set up authentication and network context for subsequent Safe operations. Replace the placeholders with appropriate values before use. The 'RPC_URL' should match the target Ethereum network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-transactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst SIGNER_ADDRESS = // ...\nconst SIGNER_PRIVATE_KEY = // ...\nconst RPC_URL = 'https://rpc.ankr.com/eth_sepolia'\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Incoming Transfers\nDESCRIPTION: This JSON response provides an example of the data returned when querying the list of incoming transfers for a Safe.  It includes details such as the type of transfer, execution date, block number, transaction hash, sender and recipient addresses, value, and token information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Multisig Transactions using cURL\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the Safe Transaction Service API (specifically the zkEVM instance) to retrieve a list of multisig transactions for a specific Safe address (`0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). It specifies the required headers `Accept: application/json`. The endpoint returns a paginated list of transactions, by default showing only trusted transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request for Incoming Safe Transfers (Bash)\nDESCRIPTION: Demonstrates how to use `curl` to send a GET request to the `/api/v1/safes/{address}/incoming-transfers/` endpoint to retrieve incoming transfers for a specific Safe address (0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75 in this example). It sets the `Accept` and `content-type` headers to `application/json`. The base URL `https://safe-transaction-mainnet.safe.global/api/` targets the Mainnet transaction service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Multisig Transactions Using TypeScript\nDESCRIPTION: This snippet illustrates how to invoke the Safe Transaction Service API to retrieve multisignature transactions for a given Safe address using TypeScript. It depends on a configured HTTP client to perform a GET request and handles typical query parameters for filtering (e.g., nonce, execution date). The example uses a relative import indicating usage within the Safe Global SDK or examples folder. Expected input is the Safe address and optional filters, and the output is the JSON response containing transaction details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_38\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe{Global} API Kit with Chain ID (TypeScript)\nDESCRIPTION: Creates an instance of `SafeApiKit` by providing the `chainId`. This setup automatically uses the default Safe Transaction Service URL associated with the specified blockchain network (e.g., Ethereum Mainnet for `chainId: 1n`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/propose-and-confirm-transactions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst apiKit = new SafeApiKit({\n  chainId: 1n\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data using Safe API (Python)\nDESCRIPTION: This Python snippet shows how to use the TransactionServiceApi to decode transaction data. It instantiates an EthereumClient using a configuration setting for the RPC URL and then creates an instance of the TransactionServiceApi, specifying the Ethereum network.  It then decodes the transaction data using the decode_data method, and includes an optional 'to' parameter. The decoded data is returned and can be used for further processing. This decoded data is also included as dataDecoded in the response of the get_safe_transaction and get_transactions methods of the TransactionServiceApi.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/data-decoder.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Instantiate the Transaction Service API\netherum_client = EthereumClient(config.get(\"RPC_URL\"))\ntransaction_service_api = TransactionServiceApi(\n      EthereumNetwork.SEPOLIA,\n      ethereum_client=ethereum_client\n  )\n\n# Get decoded data\ndata = HexStr(\"0x095ea7b3000000000000000000000000e6fc577e87f7c977c4393300417dcc592d90acf8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\nto = \"0x4127839cdf4F73d9fC9a2C2861d8d1799e9DF40C\" # Optional\ndata_decoded = transaction_service_api.decode_data(data, to)\n\n# This decoded data is also included as dataDecoded in the response of the get_safe_transaction and get_transactions methods of the TransactionServiceApi.\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Confirm Multisig Transaction\nDESCRIPTION: A sample JSON response showing the signature produced after successful confirmation of a multisig transaction. It contains a single key 'signature' with the signature string value.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing On-chain Transaction to Store Message Hash - Protocol Kit - TypeScript\nDESCRIPTION: This snippet demonstrates how to execute a previously created transaction to store a message hash on-chain using the Protocol Kit. It assumes the transaction object (signMessageTx) is created and signed by the Safe's owners. The protocolKit.executeTransaction method will submit the transaction to the network. No value is returned; transaction status must be monitored separately.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/messages.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Collect the signatures using the signTransaction method\n\n// Execute the transaction to store the messageHash\nawait protocolKit.executeTransaction(signMessageTx)\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message for a Safe Account - TypeScript and cURL\nDESCRIPTION: This snippet explains how to create a new signed message for a specified Safe account by sending a POST request to /safes/{address}/messages/. The address parameter identifies the Safe account, and the request body must contain the message either as a string (using EIP191) or an EIP712 object. The service will compute the hash internally from the provided message; sending a raw hash is not allowed. Upon success, the endpoint returns a 201 Created status with an empty response body. The snippet includes reference to a TypeScript example and a cURL command demonstrating the request structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-safes-{address}-messages--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe client with sdk-starter-kit in TypeScript\nDESCRIPTION: This snippet shows how to create and initialize a Safe client instance using the createSafeClient factory function from the @safe-global/sdk-starter-kit package. The function requires a blockchain provider, a signer, and the specific safeAddress to connect to. This setup is necessary to interact with the Safe smart contract, including querying owners and other Safe operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getowners.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Transaction API for User Operations (Bash)\nDESCRIPTION: This bash code snippet demonstrates how to use curl to send a GET request to the Safe Transaction API endpoint for listing UserOperations tied to a specific Safe account address. The snippet sets the necessary headers (\"Accept: application/json\" and \"content-type: application/json\") and requires the endpoint URL with the correct Safe address path parameter. The request does not include authentication by default; if required, the user must supply authentication headers or tokens. The output will be a JSON-formatted response with operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Calling createEnableGuardTx - guardAddress in TypeScript\nDESCRIPTION: This snippet demonstrates the basic usage of `createEnableGuardTx` function. It calls the function with only the `guardAddress` parameter. The `guardAddress` is a string representing the address of the Safe Guard to enable.  The code assumes the protocolKit is initialized and available.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableGuardTx(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Safe Delegate via REST API DELETE Endpoint in TypeScript and curl\nDESCRIPTION: Offers a REST API DELETE endpoint to remove all delegate/delegator pairs associated with a specified delegate address. The signature mechanism matches that used in delegate creation, allowing either the delegator (owner) or delegate to authorize deletion. The endpoint requires the delegate address as a path parameter, responds with HTTP 204 on successful deletion, and handles errors such as malformed data, delegate not found, or invalid Ethereum addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v2-delegates-{delegate_address}--delete.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-linea.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Sample Message Details Response\nDESCRIPTION: Shows an example JSON response with message metadata, including timestamps, safe address, message hash, content, proposer, confirmations, and signatures. The response schema specifies required fields and nested confirmation objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables for the AI agent\nDESCRIPTION: Environment variable setup in .env file for the agent's wallet private key, address, and optional configuration for debugging and monitoring.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-setup.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../../examples/ai-agent/.env.example\n```\n\n----------------------------------------\n\nTITLE: Create Signed Message (POST) - Curl\nDESCRIPTION: This snippet demonstrates how to create a signed message using a POST request. It targets the `/api/v1/safes/{address}/messages/` endpoint. The message can be a string or an EIP712 object. The request requires the Safe address and message details, and returns a 201 status code upon successful creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_13\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X POST https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: validAfter Parameter\nDESCRIPTION: Example showing how to define `validAfter` parameter which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions,\n  validAfter: Number(timestamp - 60_000n)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit Instance (TypeScript)\nDESCRIPTION: Provides the necessary setup code to initialize the `Safe` Protocol Kit instance, which is required before creating transactions. It shows the parameters needed for initialization: an Ethereum provider, a signer, and the Safe contract address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createenablemoduletx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Confirming a Safe Operation using apiKit in TypeScript\nDESCRIPTION: This snippet demonstrates calling the `confirmSafeOperation` method on an initialized `apiKit` instance. It requires the hash of the Safe operation (`safeOperationHash`) and a valid signature (`signature`) as arguments to add a confirmation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/confirmsafeoperation.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeOperationHash = '0x...'\n\nconst signature = '0x...'\n\nawait apiKit.confirmSafeOperation(safeOperationHash, signature)\n```\n\n----------------------------------------\n\nTITLE: Setting Sender Address (`from`) in `safeClient.send` in TypeScript\nDESCRIPTION: Shows how to optionally specify the transaction sender address (`from`) when calling `safeClient.send`. If provided, this address will be used as the sender; otherwise, the address derived from the connected signer is used.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  transactions,\n  from: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Transaction Confirmations via API (Bash)\nDESCRIPTION: This snippet demonstrates how to use `curl` to perform a GET request to the Safe Transaction Service API, retrieving the list of confirmations for a specified `safe_operation_hash`. Optional query parameters `limit` and `offset` are available for pagination. The request requires `Accept` and `Content-Type` headers set to `application/json`. The expected output is a JSON object containing pagination metadata and an array of confirmation details, including the owner, signature, and timestamps.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sending ERC-20 tokens from Safe\nDESCRIPTION: Executes a token transfer of ERC-20 tokens from the Safe to a target address, requiring the token contract address and transfer amount in wei. Useful for managing token assets within multisig wallets.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsend_erc20 <address> <token-address> <value-wei> [--safe-nonce <int>]\n```\n\n----------------------------------------\n\nTITLE: Confirm Transaction in React Component (App.tsx)\nDESCRIPTION: This code snippet demonstrates how to use the `useConfirmTransaction` hook within a React component to confirm a Safe transaction. It imports the necessary hook and types, defines a function component, and uses the hook to obtain the `confirmTransaction` function. It then renders a button that, when clicked, calls `confirmTransaction` with the provided `safeTxHash`. The resulting data is displayed as JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useconfirmtransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useConfirmTransaction, ConfirmTransactionVariables } from '@safe-global/safe-react-hooks'\n    \n    function App() {\n      const {\n        confirmTransaction,\n        data,\n        // ...\n      } = useConfirmTransaction()\n\n      const confirmTransactionParams: ConfirmTransactionVariables = {\n        safeTxHash: '0x...'\n      }\n\n      return (\n        <>\n          <button onClick={() => confirmTransaction(confirmTransactionParams)}>\n            Confirm Transaction\n          </button>\n          {data && JSON.stringify(data)}\n        </>\n      )\n    }\n\n    export default App\n```\n\n----------------------------------------\n\nTITLE: Get Decoded Data - Sample Response\nDESCRIPTION: This JSON snippet demonstrates the expected response format for decoding transaction data from the `/api/v1/data-decoder/` endpoint. It provides information about the method being called and a list of parameters, including their names, types, and values. This allows users to understand the details of the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe threshold change transaction with a custom threshold\nDESCRIPTION: This focused example shows the specific line where you specify the threshold parameter when creating a transaction to change the Safe's threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createchangethresholdtransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await safeClient.createChangeThresholdTransaction({\n  threshold\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Privy App ID\nDESCRIPTION: This snippet demonstrates initializing the `PRIVY_APP_ID` constant with the App ID obtained from the Privy dashboard. This App ID is essential for authenticating with Privy's services and linking the application to a specific Privy project.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/privy.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst PRIVY_APP_ID = // ...\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Collectibles for a Safe Address using cURL\nDESCRIPTION: Demonstrates how to make a GET request using cURL to retrieve a paginated list of ERC721 collectibles associated with a specific Safe address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`) from the Safe Transaction Service API (Celo instance). It sets the `Accept` and `content-type` headers to `application/json`. Optional query parameters like `trusted`, `exclude_spam`, `limit`, and `offset` can be used to filter and paginate results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Curl Request to List Safe Module Transactions\nDESCRIPTION: A curl command example to retrieve transactions executed by modules from a Safe address via the API. It shows how to construct the HTTP GET request with appropriate headers to accept JSON responses. This example is useful for testing or quick API interaction without additional tooling.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Querying Incoming Transfers - cURL Request\nDESCRIPTION: This snippet demonstrates a cURL command for retrieving incoming transfers for a specific Safe. It uses the GET method and specifies the Safe's address in the path. The headers indicate the expected content types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\n```bash \ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\ \n    -H \"Accept: application/json\" \\ \n    -H \"content-type: application/json\" \\ \n     \n```\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Operations via cURL (Bash)\nDESCRIPTION: This cURL command demonstrates how to query the Safe Transaction Service API to get a list of User Operations for a specific Safe address. It uses the GET method and sets standard Accept and Content-Type headers for JSON responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Handler in Solidity\nDESCRIPTION: Example interface and contract for setting a fallback handler for a Safe smart contract. This allows the Safe to forward certain calls to the specified handler address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/fallback/setFallbackHandler.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function setFallbackHandler(address handler) external;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).setFallbackHandler(0x...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Operation Details by Hash in TypeScript\nDESCRIPTION: Fetches the user operation object sent to the bundler using the getUserOperationByHash() method with the returned hash. This can be used to inspect details of the submitted user operation post-execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/4337-safe-sdk.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst userOperationPayload = await safe4337Pack.getUserOperationByHash(\n  userOperationHash\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Operations using cURL (Bash)\nDESCRIPTION: Example cURL command demonstrating how to make a GET request to the `/api/v1/safes/{address}/safe-operations/` endpoint. It specifies the target Safe address (on Celo in this example) and includes necessary headers (`Accept: application/json`, `content-type: application/json`) to retrieve the list of Safe Operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Safe Configuration Object (TypeScript)\nDESCRIPTION: Example (`config.ts`) demonstrating how to create a custom configuration object (`SafeConfigWithSigner`) using the `createConfig` function from `@safe-global/safe-react-hooks`. This config specifies the chain, provider, signer, and Safe address, and can be passed directly to hooks like `useUpdateThreshold`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdatethreshold.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nexport const config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Transaction Confirmations via API (Bash)\nDESCRIPTION: Provides a `curl` example to retrieve the list of confirmations for a specific multisig transaction using a GET request to the `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` endpoint. It accepts optional `limit` and `offset` query parameters for pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for SafeOperation Retrieval\nDESCRIPTION: Shows an example of a successful JSON response from the API endpoint, containing metadata fields such as creation and modification timestamps, hashes, module addresses, and confirmation details. The 'confirmations' array includes individual confirmation objects with details like owner address and signature data, illustrating how response data is structured for client-side consumption.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safes by Module\nDESCRIPTION: This JSON snippet shows a sample response from the API call listing safes associated with a specific module, returning an array containing a single safe address. It demonstrates the structure of the successful response payload.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Specific Contract Query - JSON\nDESCRIPTION: This JSON snippet shows an example response from the Get Specific Contract endpoint, providing the key fields for a single contract, including address, name, displayName, logoUri, contractAbi (with abi, description, relevance), and trustedForDelegateCall. The output is returned upon a successful GET request for a specific address. Clients should expect null or empty values for optional fields and check required properties for every contract object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Core UI Components for Authentication and Safe Details – Bash\nDESCRIPTION: These commands set up a components folder and create blank Vue single-file components (LoginWithPasskey.vue, SafeAccountDetails.vue) to manage passkey-based authentication and display Safe account data. No prior component files are required. The commands are meant to be run from the project root.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/nuxt.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ../components\ncd ../components\ntouch LoginWithPasskey.vue\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch SafeAccountDetails.vue\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Transaction Service Multisig Transactions Analytics by Origin with Bash\nDESCRIPTION: This snippet shows how to perform a GET request using cURL to the /api/v2/analytics/multisig-transactions/by-origin/ endpoint of the Safe Transaction Service. It retrieves analytics data about multisig transactions, grouped by origin. Dependencies: cURL is required; no authentication or input parameters are needed. The API responds with a status 200 and does not return a response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Signing EIP-712 Payload for Safe Transaction Deletion – Python\nDESCRIPTION: Demonstrates the JSON structure required for EIP-712-compliant signing when deleting a queued multisig transaction. The payload contains domain separation, the DeleteRequest type (with safeTxHash and totp), and uses runtime variables (chain_id, safe_address, safe_tx_hash, totp) that must be populated in your implementation. The totp parameter must be computed as the floor division of the current Unix UTC epoch time by 3600, with T0=0 and Tx=3600 required for compatibility with the service. This payload must be signed by an Externally Owned Account (EOA) using an Ethereum-compatible wallet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"}\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"}\n        ]\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Operations with cURL\nDESCRIPTION: A cURL command example that demonstrates how to fetch Safe operations for a specific Safe account address on the zkevm network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions for a Safe (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to fetch all transactions for a specific Safe address. It is used as an example in the documentation for the `/api/v1/safes/{address}/all-transactions/` endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/celo/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies - Python\nDESCRIPTION: This command installs the required Python packages for interacting with the Safe Transaction Service API. It includes safe-eth-py, web3, and hexbytes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install safe-eth-py web3 hexbytes\n```\n\n----------------------------------------\n\nTITLE: List Tokens using cURL\nDESCRIPTION: This cURL command retrieves a list of tokens supported by the Safe Transaction Service API. It sends a GET request to the `/api/v1/tokens/` endpoint with headers specifying that it accepts JSON responses and the content type is JSON. No parameters are strictly required, but query parameters can be used to filter and paginate results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Creating Signed Message\nDESCRIPTION: Shows the expected JSON response body upon successfully creating a new signed message via the API. A successful operation typically returns an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: API Response for Delete Transaction (Empty Response)\nDESCRIPTION: Indicates successful deletion with an HTTP 204 No Content status, resulting in an empty response body. It confirms the transaction was removed successfully.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Creation Status - cURL\nDESCRIPTION: This cURL command retrieves the creation status of a Safe from the specified API endpoint. It uses a GET request and specifies the address of the Safe. The command sets the necessary headers for accepting JSON responses and indicates the content type as JSON.  It queries the safe creation status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_64\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Construct a UserOperation with Placeholder Values for Deployment\nDESCRIPTION: Creates a UserOperation object with certain values set to placeholder or initial values, such as nonce, callData, and gas limits. The object references the sender, paymaster, and other parameters, and awaits specific values to be computed before submission.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst contractCode = await publicClient.getBytecode({ address: sender })\n\nconst sponsoredUserOperation: UserOperation = {\n  sender,\n  nonce,\n  initCode: contractCode ? '0x' : initCode,\n  callData,\n  callGasLimit: 1n, // All gas values will be filled by Estimation Response Data.\n  verificationGasLimit: 1n,\n  preVerificationGas: 1n,\n  maxFeePerGas: 1n,\n  maxPriorityFeePerGas: 1n,\n  paymasterAndData: ERC20_PAYMASTER_ADDRESS,\n  signature: '0x'\n}\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Safe Multisig Transactions\nDESCRIPTION: Provides an example JSON response from the GET /api/v1/safes/{address}/multisig-transactions/ endpoint. The response includes pagination details (`count`, `next`, `previous`) and a `results` array containing detailed information about each multisig transaction, such as destination, value, nonce, execution status, confirmations, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: List Contracts API Request\nDESCRIPTION: This snippet demonstrates a cURL command to retrieve a list of known smart contracts from the Safe Transaction Service API.  It uses the GET method to request contract information and expects a JSON response. The command includes headers to specify the accepted content type and request body type as JSON.  The base URL points to the Safe Transaction Service on the worldchain network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Confirming Multisig Transaction – JSON\nDESCRIPTION: Shows a sample response returned after submitting a signature to confirm a multisig transaction. The response includes the signature parameter containing the hexadecimal-encoded ECDSA signature. Returns only the signature that was added by the API call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling a Safe module\nDESCRIPTION: Deactivates a module at a given address, removing its capabilities from the Safe. Use with caution to avoid disrupting wallet functionality.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndisable_module <address>\n```\n\n----------------------------------------\n\nTITLE: Data Representation - JSON\nDESCRIPTION: This JSON snippet defines a data structure with a \"preparedSignature\" field. The field holds a large hexadecimal string representing a prepared signature. No dependencies are mentioned in the context.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_53\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n      }\n\n```\n\n----------------------------------------\n\nTITLE: Reinitialize Protocol Kit\nDESCRIPTION: This TypeScript snippet reinitializes the Protocol Kit to connect to the deployed Safe smart account. It uses the `connect` method, passing the deployed `safeAddress`. Afterward, it retrieves information about the newly deployed Safe using the re-initialized instance to verify deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/safe-deployment.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst newProtocolKit = await protocolKit.connect({\n  safeAddress\n})\n\nconst isSafeDeployed = await newProtocolKit.isSafeDeployed() // True\nconst safeAddress = await newProtocolKit.getAddress()\nconst safeOwners = await newProtocolKit.getOwners()\nconst safeThreshold = await newProtocolKit.getThreshold()\n```\n\n----------------------------------------\n\nTITLE: Creating Delegates with POST - TypeScript\nDESCRIPTION: Demonstrates creating a new delegate using a POST request to the `/api/v2/delegates/` endpoint.  The example is located in the `examples/scroll/-v2-delegates--post.ts` file, offering a code sample in TypeScript.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/scroll/-v2-delegates--post.ts\n```\n\n----------------------------------------\n\nTITLE: Specifying Gas Token when Creating Enable Module Tx using Protocol Kit (TypeScript)\nDESCRIPTION: Demonstrates using the `gasToken` option. This allows specifying an ERC-20 token address (or the zero address for native currency) to be used for transaction fee payment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createenablemoduletx.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableModuleTx(\n  '0x...',\n  options: {\n    gasToken: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Refund Receiver when Creating Enable Module Tx using Protocol Kit (TypeScript)\nDESCRIPTION: Shows how to set the `refundReceiver` option. This parameter specifies the address that will receive any remaining transaction gas funds after execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createenablemoduletx.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableModuleTx(\n  '0x...',\n  options: {\n    refundReceiver: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Safe Transaction Call Data\nDESCRIPTION: This is the call data that specifies which function to call and with what arguments on the Safe. The callData field is a hexadecimal string that is the encoded representation of the function selector and its parameters. This field is essential for executing a specific transaction logic within the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_57\n\nLANGUAGE: text\nCODE:\n```\n0x7bb374280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Create Signed Message via Curl POST Request\nDESCRIPTION: This curl command demonstrates how to send a POST request to the Safe Transaction Service API to add a new message for a specific Safe account address. It targets the `/api/v1/safes/{address}/messages/` endpoint, including an empty body `{}` which would typically contain the message data (string or EIP712 object) and signature. Dependencies include a bash environment and the `curl` tool.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Using EthersAdapter from Protocol Kit\nDESCRIPTION: Demonstrates how to import the `EthersAdapter` class from the `protocol-kit` package, replacing the deprecated import from `@safe-global/safe-ethers-lib`. The adapter is used for integrating Ethers.js v5 with the Safe SDK.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v1.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EthersAdapter } from '@safe-global/protocol-kit' // new\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit in TypeScript\nDESCRIPTION: This snippet shows the setup process for the Safe Protocol Kit. It imports the `Safe` class from `@safe-global/protocol-kit` and uses the static `init` method with a provider, signer, and the target Safe address to create a `protocolKit` instance, which is then exported.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getaddress.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: List Safe Collectibles - `curl` Bash\nDESCRIPTION: This snippet demonstrates fetching paginated ERC721 collectibles for a specific Safe address using `curl`. It makes a GET request to the `/api/v2/safes/{address}/collectibles/` endpoint, specifying standard headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Querying Safe Threshold (TypeScript)\nDESCRIPTION: This snippet shows how to call the `getThreshold` method on an existing `safeClient` instance. It imports the `safeClient` from a setup file and then asynchronously retrieves the Safe's signature threshold, which is the minimum number of unique owners required to approve a transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/getthreshold.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeClient } from './setup.ts'\n\nconst threshold = await safeClient.getThreshold()\n```\n\n----------------------------------------\n\nTITLE: Filtering Safe Operations by Owner Confirmations - TypeScript\nDESCRIPTION: This example filters Safe operations to include only those with owner confirmations by setting hasConfirmations: true and ordering the results by creation time. It demonstrates use of the hasConfirmations parameter from getSafeOperationsByAddress. Requires apiKit, Safe address, and @safe-global/api-kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationsbyaddress.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getSafeOperationsByAddress(\n  {\n    safeAddress: '0x...',\n    hasConfirmations: true,\n    ordering: 'created'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Confirming Multisig Transaction\nDESCRIPTION: API endpoint to add a new confirmation to a multisignature transaction. Accepts POST requests with potentially multiple signatures. It requires the transaction hash as a path parameter and expects a JSON payload with signature data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Sample Safe Status API Response JSON\nDESCRIPTION: Provides a sample JSON object representing the expected response body from the 'Get Safe Status' endpoint. It includes fields like address, nonce, threshold, list of owners, master copy address, modules, fallback handler, guard, and Safe version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Safe Operation Creation via Safe Transaction API - Bash\nDESCRIPTION: This snippet demonstrates how to submit a POST request to the Safe Transaction Service API to create a new SafeOperation for a specified Safe account. It uses curl in bash to send a JSON payload to the endpoint. Dependencies include bash with curl installed and network access to the API; the request requires a valid Safe address in the path and uses 'application/json' for content negotiation. It accepts no body parameters, only an empty JSON object, and expects a 201 response with no content. Returns HTTP response, typically with an empty body. Limitations: The request will fail if the address parameter is invalid or required headers are missing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Listing Safes using a Specific Module via GET /api/v1/modules/{address}/safes/\nDESCRIPTION: This snippet demonstrates how to retrieve a list of safes that have a specific module enabled by making a GET request to the API endpoint. It includes the request method, sample cURL command, and a sample JSON response listing the safes. Dependencies include the base URL of the API and valid module address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying UserOperation with Safe Transaction Service API - TypeScript\nDESCRIPTION: This placeholder snippet indicates that an example TypeScript file demonstrates querying the Safe Transaction Service for a UserOperation by hash. The actual code is referenced but not included. Usage typically requires dependencies such as axios, fetch, or another HTTP client, and the main parameter is the \"user_operation_hash\". The expected output is a detailed API response as described elsewhere in the documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zkevm/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Maximum Fee Per Gas\nDESCRIPTION: This example demonstrates setting a maximum fee per gas when sending an on-chain message, which is used in EIP-1559 compliant networks to specify the maximum total fee the sender is willing to pay.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageResult = await safeMessageClient.sendOnChainMessage({\n  message: 'abc',\n  maxFeePerGas: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safe Operation GET Request\nDESCRIPTION: Provides a JSON example of the response returned upon a successful GET request for a Safe Operation, illustrating the response object including metadata, confirmations, and embedded user operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Safe Operations List using cURL (Bash)\nDESCRIPTION: Example cURL command to fetch the list of SafeOperations for a specific Safe address (0xcd2E...1c75) from the Safe Transaction Service API. The request uses the GET method and specifies JSON as the accepted response format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: cURL Command to Retrieve User Operation Data via REST API\nDESCRIPTION: Sample cURL command demonstrating how to perform an HTTP GET request to fetch user operation data from the API endpoint, including necessary headers and a specific user operation hash parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Get Safe Creation Status - TypeScript Example\nDESCRIPTION: This snippet is a TypeScript example illustrating how to retrieve a Safe's creation information.  It uses a URL constructed with a Safe address. This information includes details such as the creator, transaction hash, factory address, and setup data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Emitting DisabledModule Event in Solidity\nDESCRIPTION: Defines a Solidity event named DisabledModule which logs the address of a module when it is disabled in the Safe contract. This event is meant to be emitted to notify off-chain listeners about module state changes. No additional properties or methods are included in this snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/DisabledModule.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent DisabledModule(address module);\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Incoming Transfers - API Output Example\nDESCRIPTION: This JSON snippet shows an example response from the incoming transfers endpoint. It contains a paginated result with total count, pagination links (null if none), and an array of transfer objects. Each transfer object details transfer type, execution date, block number, transaction hash, sender and recipient addresses, transfer value, token IDs, and unique transfer ID. The example demonstrates an Ether transfer with some fields like tokenInfo set to null. This response format guides developers on how to parse and utilize transfer data returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction Response JSON Structure\nDESCRIPTION: This sample response shows the data structure returned when retrieving a multisig transaction, including details such as safe address, recipient, value, gas parameters, nonce, submission/execution dates, confirmations required, and signatures from confirming owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Get Decoded Data from Transaction - Data Decoder API\nDESCRIPTION: This endpoint decodes transaction data (hexadecimal string) into human-readable method calls and parameters. If the contract address is provided, decoding precision improves. Dependencies include a POST method with JSON payload, with sample cURL command and example decoded data response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Balances using cURL\nDESCRIPTION: This cURL command fetches the balances of Ether and ERC20 tokens for a given Safe address from the Safe Transaction Service API. It specifies the Accept and Content-Type headers as application/json.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: List Supported Tokens - `curl` Bash\nDESCRIPTION: This snippet shows how to use `curl` to retrieve a paginated list of all tokens supported by the Safe Transaction Service. It performs a GET request to the `/api/v1/tokens/` endpoint with necessary headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Installing viem and permissionless using pnpm\nDESCRIPTION: This command installs the viem and permissionless libraries, which are required for interacting with Ethereum and building user operations. Viem is a TypeScript library for Ethereum, and permissionless simplifies the process of creating and sending user operations. This step requires Node.js and npm to be installed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install viem permissionless\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Incoming Safe Transfers\nDESCRIPTION: Provides an example JSON response from the `/api/v1/safes/{address}/incoming-transfers/` endpoint. The response includes pagination fields (`count`, `next`, `previous`) and a `results` array containing objects representing individual transfers. Each transfer object details the transfer type, execution date, block number, transaction hash, involved addresses (`to`, `from`), value, optional token ID and address, a unique `transferId`, and optional `tokenInfo`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Decode Data API Sample Response - Decoded Method and Parameters\nDESCRIPTION: Sample JSON response from the Data Decoder API shows the decoded method name ('transfer') and its parameters with name, type, and value. Demonstrates the structure of decoded transaction data, useful for applications analyzing transaction details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with curl\nDESCRIPTION: Makes a POST request to sign a message given its hash. This endpoint adds the signature of a message to a specified message hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Module Transactions API\nDESCRIPTION: This JSON snippet illustrates a sample response structure returned by the Safe Global API when querying module transactions. It includes pagination metadata (count, next, previous) and an array of transaction objects. Each transaction contains fields such as creation timestamp, execution date, block number, success status, transaction hash, involved addresses, value, operation type, and a unique moduleTransactionId. This sample helps developers understand the data format and fields to expect when consuming this endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for Safe, Passkeys, and UI - Bash\nDESCRIPTION: This command adds all necessary dependencies for Safe{Core} SDK integration, transaction relaying, encoding utilities, Material UI components for styling, and SVG file support to a Next.js project via pnpm. Ensure you are in the root directory of the project before running this command. Version-specific packages are used to avoid compatibility issues.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/protocol-kit@4.1.0 @safe-global/relay-kit@3.1.0 viem @emotion/react @emotion/styled @mui/material @mui/icons-material @svgr/webpack\n```\n\n----------------------------------------\n\nTITLE: Fetching Incoming Transfers with curl (Bash)\nDESCRIPTION: Demonstrates how to call the Safe Transaction Service API endpoint using `curl` to retrieve incoming transfers for a given Safe address. It uses the GET method and includes standard Accept and content-type headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\ \\\n\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Transfers using Curl (Bash)\nDESCRIPTION: Sends a GET request using curl to the `/api/v1/safes/{address}/transfers/` endpoint to retrieve a list of token transfers for the specified Safe address. The request includes `Accept: application/json` and `content-type: application/json` headers. This endpoint returns up to 1000 of the newest transfers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Installing Safe{Global} SDK Dependencies (Bash)\nDESCRIPTION: Installs the necessary Safe{Global} SDK packages (`@safe-global/api-kit`, `@safe-global/protocol-kit`, `@safe-global/types-kit`) using the `yarn` package manager. These packages are prerequisites for interacting with the Safe protocol and transaction service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/propose-and-confirm-transactions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/api-kit \\\n  @safe-global/protocol-kit \\\n  @safe-global/types-kit\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Single Transfer Detail - JSON\nDESCRIPTION: This snippet provides a sample JSON response returning a single detailed transfer object from the 'Get Transfer' API endpoint. It includes properties such as transfer type, execution date, block number, transaction hash, the sender and receiver addresses, transferred value, token identifiers, the transfer ID, and optional detailed token information if applicable. This sample clarifies the structure and data provided by this API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import Libraries for Safe and Gelato Relay\nDESCRIPTION: Import required modules from the installed libraries. This includes ethers for interacting with the blockchain, GelatoRelayPack from @safe-global/relay-kit, Safe from @safe-global/protocol-kit, and types like MetaTransactionData and MetaTransactionOptions from @safe-global/types-kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from 'ethers'\nimport { GelatoRelayPack } from '@safe-global/relay-kit'\nimport Safe from '@safe-global/protocol-kit'\nimport {\n    MetaTransactionData,\n    MetaTransactionOptions\n} from '@safe-global/types-kit'\n```\n\n----------------------------------------\n\nTITLE: Defining Migration Script Constants (TypeScript)\nDESCRIPTION: Declares essential constants required within the `main` function of the migration script. This includes placeholders for the target Safe address (`SAFE_ADDRESS`), the owner's private key (`OWNER_PRIVATE_KEY`), the blockchain RPC endpoint URL (`RPC_URL`), and the deployed `SafeMigration` contract address (`SAFE_MIGRATION_CONTRACT_ADDRESS`). It also parses the ABI for the `SafeMigration` contract's relevant functions using `viem`'s `parseAbi`. Placeholder values must be replaced with actual data before execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n  // Define constants\n  const SAFE_ADDRESS = // ...\n  const OWNER_PRIVATE_KEY = // ...\n  const RPC_URL = // ...\n  const SAFE_MIGRATION_CONTRACT_ADDRESS = // ...\n  const ABI = parseAbi([\n    \"function migrateSingleton() public\",\n    \"function migrateWithFallbackHandler() external\",\n    \"function migrateL2Singleton() public\",\n    \"function migrateL2WithFallbackHandler() external\",\n  ]);\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Starter Kit Dependency\nDESCRIPTION: Commands to install the `@safe-global/sdk-starter-kit` package using different Node.js package managers (pnpm, npm, yarn). This dependency is required to integrate the Safe Starter Kit functionalities into a project.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/overview.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/sdk-starter-kit\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @safe-global/sdk-starter-kit\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/sdk-starter-kit\n```\n\n----------------------------------------\n\nTITLE: Get Safe Balances - Example Request\nDESCRIPTION: This `curl` command requests Safe balances using the GET method for a specified Safe address. The command is constructed to retrieve balance information for the specified Safe address, with the example Safe address provided. It utilizes the standard HTTP headers to properly make the API call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data using Safe API (TS)\nDESCRIPTION: This TypeScript snippet initializes the SafeApiKit, then uses it to decode transaction data. It creates an instance of the SafeApiKit, specifying the chainId. It then uses the decodeData method, providing the transaction data (hex string). The expected output is the decoded transaction data.  This decoded data is also included in the response of the apiKit's getMultisigTransactions, getModuleTransactions, and getAllTransactions methods.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/data-decoder.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the API Kit\nconst apiKit = new SafeApiKit({\n  chainId: 11155111n\n})\n\nconst data = \"0x095ea7b3000000000000000000000000e6fc577e87f7c977c4393300417dcc592d90acf8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"\nconst dataDecoded = await apiKit.decodeData(data)\n\n// This decoded data is also included as dataDecoded in the response of the apiKit's getMultisigTransactions, getModuleTransactions, and getAllTransactions methods.\n```\n\n----------------------------------------\n\nTITLE: Fetching Module Transaction using curl (bash)\nDESCRIPTION: Demonstrates how to retrieve a specific module transaction using the Safe Transaction Service API via a curl command. It requires the unique module transaction ID in the path and sets standard HTTP headers for accepting JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Contracts API\nDESCRIPTION: A JSON response example showing a paginated list of contracts, including contract address, name, description, ABI, and trusted status. It demonstrates the structure and data returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Transaction and Validating it Using Safe SDK (TypeScript)\nDESCRIPTION: This snippet demonstrates constructing a Safe transaction object with target address, value, data, and optional operation type. It uses 'protocolKit.createTransaction' to generate the transaction and 'protocolKit.isValidTransaction' to verify its validity, with optional parameters like 'from', 'gasLimit', 'gasPrice', 'maxFeePerGas', 'maxPriorityFeePerGas', and 'nonce'. It handles promise-based asynchronous validation, returning a boolean indicating transaction validity.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/isvalidtransaction.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions\n})\n\nconst options: TransactionOptions = {\n  from: '0x...', // Optional\n  gasLimit: '123', // Optional\n  gasPrice: '123', // Optional\n  maxFeePerGas: '123', // Optional\n  maxPriorityFeePerGas: '123', // Optional\n  nonce: 123 // Optional\n}\n\nconst isValidTx = await protocolKit.isValidTransaction(\n  safeTransaction,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Get Native Token Balance with protocolKit - TypeScript\nDESCRIPTION: This snippet shows how to use the `getBalance` function of the Safe Protocol Kit instance to retrieve the native token balance of the connected Safe smart account. It assumes that `protocolKit` has been initialized beforehand.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getbalance.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst balance = await protocolKit.getBalance()\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Incoming Transfers - Safe Transaction Service - JSON\nDESCRIPTION: This JSON example illustrates a sample response returned by the Safe Transaction Service API when querying incoming transfers for a Safe. The response object contains pagination metadata (count, next, previous) and a 'results' array describing each incoming transfer, including fields such as type, executionDate, blockNumber, transactionHash, to, value, transferId, tokenInfo, and from. The structure supports Ether and token transfers; null values appear when not applicable (e.g., token transfers without tokenInfo). All fields reported are documented in the service's OpenAPI specification.\n\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Safe React Hooks Configuration for Existing Safe Account in TypeScript\nDESCRIPTION: Provides an example of creating a Safe configuration for an already deployed Safe account by specifying the safeAddress property. It imports createConfig from @safe-global/safe-react-hooks and a blockchain chain configuration from viem/chains. The provider and signer used for blockchain interactions must be defined externally. This setup enables connection to an existing Safe instance by its address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/createconfig.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Configuration for New Safe Account in TypeScript\nDESCRIPTION: Creates a Safe configuration object for deploying a new Safe account with a single owner. Uses the createConfig function with chain info, provider URL, signer private key, and Safe options like owners and threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/react-hooks/guides/send-transactions.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst config = createConfig({\n  chain: sepolia,\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  safeOptions: {\n    owners: [SIGNER_ADDRESS],\n    threshold: 1\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Get Safe Creation Status with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve the creation status of a Safe using a curl command. It sends a GET request to the `/api/v1/safes/{address}/creation/` endpoint with the Safe address. It specifies `application/json` as the accepted content type. The response will contain details about the Safe's creation transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_68\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Gas Limit\nDESCRIPTION: Example of sending a message with a specified gas limit. This parameter controls the maximum amount of gas the transaction can use, with transactions failing if they require more gas than specified.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageResult = await safeMessageClient.sendOnChainMessage({\n  message: 'abc',\n  gasLimit: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction (Bash)\nDESCRIPTION: This bash command demonstrates how to add a confirmation to a pending multi-signature transaction using the POST method on the Safe Transaction Service API. The transaction hash is included in the URL, and headers for JSON content are provided. The request body is empty in this example, but it would typically contain the signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Paginated Token Transfer List Response in JSON\nDESCRIPTION: Shows a representative JSON object structure returned by listing token transfers from the Safe Transaction Service API. The structure includes pagination metadata (count, next, previous) and an array of transfer result objects with all relevant details (type, executionDate, blockNumber, transactionHash, from, to, value, etc.). All numeric values (including token amounts) are returned as strings to accommodate large numbers. Null fields may appear for certain asset types, and the set of fields returned is consistent for all transfer types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Confirmation for a Transaction Using Safe Global API - Bash\nDESCRIPTION: This snippet demonstrates a POST request to add a confirmation to a multisig transaction identified by a safe_operation_hash. It supports multiple signatures but does not allow delegates for trust. The endpoint requires the safe_operation_hash path parameter and accepts an empty JSON object in the request body. Necessary headers include Accept and content-type set to application/json. Successful requests return HTTP 201 Created, with error codes 400 or 422 representing malformed data or processing errors respectively.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction Analytics by Origin using cURL (Bash)\nDESCRIPTION: Sends a GET request using cURL to the `/api/v2/analytics/multisig-transactions/by-origin/` endpoint of the Safe Transaction Service API (xlayer instance) to retrieve analytics data concerning multisig transactions, grouped by origin. Requires 'Accept' and 'content-type' headers set to 'application/json'. The expected response body is not specified.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_84\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: List Safe Balances API - cURL Example\nDESCRIPTION: This cURL command sends a GET request to the `/api/v1/safes/{address}/balances/` endpoint to fetch the balances of a Safe account.  The address is incorporated within the URL. The request sets the `Accept` and `content-type` headers to `application/json`. The input is the address and, optionally, query parameters for filtering. The output is expected to be a JSON array of balance objects, each with a token address, token info (if ERC20), and the balance itself. This is a GET request without a request body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Confirmations\nDESCRIPTION: Example JSON response structure returned when successfully retrieving confirmations. It includes pagination details ('count', 'next', 'previous') and an array 'results' containing confirmation objects, each with 'created', 'modified', 'owner', 'signature', and 'signatureType' fields.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Environment ID Variable\nDESCRIPTION: Initialize the DYNAMIC_ENVIRONMENT_ID variable with the value from the Dynamic dashboard, which is required for SDK configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/dynamic.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst DYNAMIC_ENVIRONMENT_ID = // ...\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Transaction Service Contracts (bash)\nDESCRIPTION: This snippet demonstrates how to retrieve a paginated list of known smart contracts and their ABIs from the Safe Transaction Service using `curl`. It includes headers for specifying JSON request and response types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Sample cURL request to List Supported Tokens\nDESCRIPTION: This snippet illustrates how to send a GET request to the tokens listing endpoint, including headers for JSON format. The response includes a list of tokens with details like type, address, name, symbol, decimals, logo URI, and trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/tokens/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Account Status with TypeScript\nDESCRIPTION: Example of retrieving detailed Safe account information using the transaction service API. Returns account details including address, nonce, threshold, owners, and other configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zksync/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Import Dependencies - TypeScript\nDESCRIPTION: This snippet imports the necessary modules from the ethers library and the Safe API Kit for TypeScript. These modules are required for interacting with the Safe Transaction Service API and handling Ethereum transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from 'ethers'\nimport SafeApiKit, { AddSafeDelegateProps } from '@safe-global/api-kit'\n```\n\n----------------------------------------\n\nTITLE: Example Solidity Contract Using ISafe Interface\nDESCRIPTION: This code illustrates a contract that calls the getThreshold function from an ISafe instance. It demonstrates how to retrieve the threshold value from a Safe contract and store it in a local variable. The snippet assumes the existence of a Safe contract address and requires the ISafe interface to be imported.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/getThreshold.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Example {\n    function example() external {\n        (uint256 threshold) = (ISafe safe).getThreshold();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Status JSON Response Format\nDESCRIPTION: Example response format for a Safe account status API call. Shows the structure with address, nonce, threshold, owners, masterCopy, modules, and other configuration parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Multisig Transactions via API - Bash (curl)\nDESCRIPTION: This snippet demonstrates how to perform a GET request to the Safe Transaction Service using curl to fetch all multisig transactions for a given Safe address. The request requires the API URL specifying the Safe address and includes headers for Accept and Content-Type both set to application/json. The endpoint returns a JSON array of multisig transactions with fields such as safe address, transaction hash, value, involved addresses, execution status, confirmation list, and more. This command expects a valid address and internet access; it returns a paginated JSON array and supports robust query filtering as documented.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching All Transactions for a Safe via cURL (Scroll)\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the Safe Transaction Service API (Scroll instance at safe-transaction-scroll.safe.global) to retrieve a list of all transactions associated with a specific Safe address (e.g., 0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75). It specifies the API endpoint and includes 'Accept' and 'content-type' headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for UserOperations List from Safe Transaction API\nDESCRIPTION: This JSON snippet provides a sample response for the UserOperations list endpoint, showing the structure of the paginated response including count, next/previous URIs, and an array of detailed user operation objects. Each user operation contains gas limits, paymaster data, signature, and nested safe operation info with confirmations. This response illustrates the expected data shape and typical values returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ],\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Confirmations via REST API with curl in Bash\nDESCRIPTION: This Bash snippet demonstrates how to retrieve the list of confirmations for a multisig transaction by performing an HTTP GET request to the corresponding REST endpoint. The key input is the safe_tx_hash path parameter identifying the transaction. Optional query parameters for pagination include limit and offset. The request expects a paginated JSON response that includes the total count, navigation links (next, previous), and an array of confirmation objects containing owner address, submission date, transaction hash, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n```\n\n----------------------------------------\n\nTITLE: Filtering Safe Operations by Execution Status - TypeScript\nDESCRIPTION: This code snippet retrieves Safe operations that have already been executed by passing executed: true and ordering: 'created' as part of the parameter object to getSafeOperationsByAddress. It applies filtering to obtain only executed Safe operations and sorts them by creation time. Requires apiKit, Safe address, and @safe-global/api-kit dependency.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationsbyaddress.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getSafeOperationsByAddress(\n  {\n    safeAddress: '0x...',\n    executed: true,\n    ordering: 'created'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling Hardhat Contracts\nDESCRIPTION: Executes the `npx hardhat compile` command to compile the smart contracts in the project. This step verifies that the Hardhat environment and contract setup are correct.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pending Safe Transactions (TypeScript)\nDESCRIPTION: Shows how to fetch a specific pending transaction from the Safe Transaction Service using its hash (`safeTxHash`). The example uses `service.getTransaction`, which likely refers to an instance of `SafeApiKit` (like the `apiKit` initialized earlier). Commented lines show other API methods for retrieving different sets of transactions (pending, incoming, multisig, etc.).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/propose-and-confirm-transactions.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await service.getTransaction(safeTxHash)\n// const transactions = await service.getPendingTransactions()\n// const transactions = await service.getIncomingTransactions()\n// const transactions = await service.getMultisigTransactions()\n// const transactions = await service.getModuleTransactions()\n// const transactions = await service.getAllTransactions()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transactions - cURL\nDESCRIPTION: This cURL command retrieves all transactions associated with a specific Safe address from the Safe Transaction Service API. It specifies the GET method, the target API endpoint, and includes necessary headers for data format (application/json). The address `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` is the Safe address used for the query. The output is expected to be a JSON response containing transaction details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Confirmations for a Safe Multisig Transaction via API using cURL\nDESCRIPTION: Sends a GET request to the Safe Transaction Service API to retrieve the list of confirmations associated with a specific multisig transaction, identified by its `safe_tx_hash`. Optional query parameters `limit` and `offset` can be used for pagination. The example targets a transaction on the zkSync network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching All Safe Transactions via Curl\nDESCRIPTION: This snippet demonstrates how to use the curl command-line tool to make a GET request to the Safe Transaction Service API to retrieve all transactions for a specified Safe address. It includes standard headers to specify the accepted content types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using getChain with useSafe hook\nDESCRIPTION: Demonstrates how to use the `getChain` function within a React component using the `useSafe` hook from `@safe-global/safe-react-hooks`. It retrieves chain information such as the chain name and displays it. Requires the `@safe-global/safe-react-hooks` package.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getchain.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction ChainInfo() {\n  const { getChain } = useSafe()\n  const {\n    name,\n    // ...\n  } = getChain()\n\n  return (\n    <>\n      {name}\n    </>\n  )\n}\n\nexport default ChainInfo\n```\n\n----------------------------------------\n\nTITLE: Deleting a Delegate in Safe Transaction Service API Using TypeScript and bash\nDESCRIPTION: Illustrates how to delete all delegate/delegator pairs associated with a specified delegate address via a DELETE request to /api/v2/delegates/{delegate_address}/. Signature authorization requires the same EIP712 scheme as delegate creation, allowing the signer to be either the delegator (owner) or the delegate. The example includes parameters for delegate_address path variable and responses documenting status codes including 204 for success and 404 if the delegate is not found. TypeScript and curl examples demonstrate request usage.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v2-delegates-{delegate_address}--delete.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-worldchain.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for User Operation Response Schema\nDESCRIPTION: Sample TypeScript interface declaration (from filename ../examples/sepolia/-v1-user-operations-{user_operation_hash}--get.ts) providing structure for the user operation response data, including types and nested objects relevant to user operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\n```ts\n// from ../examples/sepolia/-v1-user-operations-{user_operation_hash}--get.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Creating State Management Store File – Bash\nDESCRIPTION: These bash commands create a Pinia-based state management structure by making a stores directory and an empty TypeScript file (safe.ts) for managing Safe account state. They must be run from the project root. No additional configuration is required before executing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/nuxt.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nmkdir stores\ncd stores\ntouch safe.ts\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Message with a GET Request using cURL\nDESCRIPTION: This snippet shows how to retrieve information about a message using a GET request to the `/api/v1/messages/{message_hash}/` endpoint.  The `message_hash` must be included in the path. It includes headers for accepting JSON responses. Dependencies: curl\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Tokens cURL Example\nDESCRIPTION: This cURL command retrieves a list of tokens supported by the Safe Transaction Service.  It uses a GET request to the `/api/v1/tokens/` endpoint. The example sets the `Accept` and `content-type` headers to `application/json` to specify the expected response format.  The expected output is a paginated JSON list of token information including address, name, symbol, decimals and logoUri.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Specific Token Query (json)\nDESCRIPTION: This JSON is the example result returned by the Safe Transaction Service when requesting a single token's information by address. It contains the token type, contract address, name, symbol, decimals, logo URI, and trusted status. All fields are included per API specification, and the object conforms to the TokenInfoResponse schema. Errors for invalid addresses are not shown here but are returned as JSON error objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ERC20\",\n  \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n  \"name\": \"0x5555.com\",\n  \"symbol\": \"0x5555.com\",\n  \"decimals\": 18,\n  \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n  \"trusted\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Examples for Message API\nDESCRIPTION: These comments reference external TypeScript files that provide full code examples for interacting with the Safe Message API endpoints. They indicate where to find implementations for signing, listing, and creating messages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-messages-{message_hash}-signatures--post.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-safes-{address}-messages--get.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-safes-{address}-messages--post.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Executed Transactions Endpoint Parameters\nDESCRIPTION: This section describes the parameters used in the API endpoint for listing executed transactions. The parameters include 'address' (required), 'ordering' (optional), 'limit' (optional), and 'offset' (optional). The 'address' parameter specifies the Safe address, while 'ordering' allows sorting results by fields like timestamp. The 'limit' and 'offset' parameters are for pagination, allowing control over the number of results per page and the starting index, respectively.  There is a known bug with pagination using `Transaction Hash`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_25\n\nLANGUAGE: OpenAPI\nCODE:\n```\n<Parameters parameters={[{\"in\":\"path\",\"name\":\"address\",\"schema\":{\"type\":\"string\"},\"required\":true},{\"name\":\"ordering\",\"required\":false,\"in\":\"query\",\"description\":\"Which field to use when ordering the results.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"limit\",\"required\":false,\"in\":\"query\",\"description\":\"Number of results to return per page.\",\"schema\":{\"type\":\"integer\"}},{\"name\":\"offset\",\"required\":false,\"in\":\"query\",\"description\":\"The initial index from which to return the results.\",\"schema\":{\"type\":\"integer\"}}]} />\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Example for Listing Safe Multisig Transactions\nDESCRIPTION: Provides a reference comment pointing to a TypeScript example file (`../examples/sepolia/-v1-safes-{address}-multisig-transactions--get.ts`) which demonstrates how to call the API endpoint to list multisig transactions for a Safe address using TypeScript. The actual code is not included in this snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/sepolia/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Transaction with Safe Transaction Service - Bash\nDESCRIPTION: This bash curl command demonstrates how to send a POST request to create a multisig transaction for a specific Safe address using the Safe Transaction Service on Sepolia. It requires the Safe address as a path parameter and posts a (potentially empty) JSON body. Make sure curl is installed, and replace the address with your own Safe instance. The response may include the created transaction data, or errors regarding invalid input, permissions, or business rules.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Owner using cURL\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the Safe Transaction Service API to retrieve a list of Safe accounts owned by a specific address. The owner address is included as a path parameter in the URL. Standard headers for JSON communication are included. The expected output is a JSON object containing an array of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sending Safe Transaction - TypeScript\nDESCRIPTION: Executes the previously defined Safe transactions by calling the 'send' method of the SafeClient. For accounts with a threshold higher than 1, additional confirmations are required before the transaction is executed. The result contains information about the sent transactions, including the 'safeTxHash', which is necessary for confirming multi-signature executions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-transactions.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({ transactions })\n\nconst safeTxHash = txResult.transactions?.safeTxHash\n\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction: Curl\nDESCRIPTION: This Curl command creates a multisig transaction by sending a POST request to the Safe transaction service. It includes parameters such as the safe address, recipient address, value, and signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n'https://safe-transaction-sepolia.safe.global/api/v1/safes/0xc62C5cbB964ffffffffff82f78A4d30713174b2E/multisig-transactions/' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\n    \"safe\": \"0xc62C5cbB964459F3C984682f78A4d3ffffffffff\",\n    \"to\": \"0x795D6C88B4Ea3CCffffffffffCa8a11Bc0496228\",\n    \"value\": 2000000000000000,\n    \"data\": null,\n    \"operation\": 0,\n    \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n    \"safeTxGas\": 0,\n    \"baseGas\": 0,\n    \"gasPrice\": 0,\n    \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n    \"nonce\": 15,\n    \"contractTransactionHash\": \"0x56b2931d1053b6afffffffffff3ba29b5c2baafdf1a588850da72a62674941b6\",\n    \"sender\": \"0xAA86E576c084aCFa56fc4D0E17967ffffffffff8\",\n    \"signature\": \"0x6a2b57023af16241511619ea95f7cd03d00aa6b79d1ca80e21a0b89cd2c38ffffffffff9b738ffbd680c4d717b9b0c9eae568f3edebc40a0c004700bffffffffff\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit (TypeScript)\nDESCRIPTION: This TypeScript code snippet shows how to initialize the `SafeApiKit` with a specific chain ID.  It imports the `SafeApiKit` class from the `@safe-global/api-kit` package. The `SafeApiKit` instance is then created, taking a chain ID (e.g., 1n for Mainnet) as a configuration option.  This initialization step is a prerequisite for calling other API methods.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getpendingtransactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Requesting Incoming Transfers for a Safe using curl\nDESCRIPTION: This bash command demonstrates how to use curl to send a GET request to the Safe Transaction Service API to retrieve a list of incoming transfers for a specific Safe address. It includes the necessary headers for accepting JSON responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Signing Message (POST) - TypeScript\nDESCRIPTION: This placeholder represents the corresponding TypeScript code for signing a message. It is referenced from the path `/../examples/avalanche/-v1-messages-{message_hash}-signatures--post.ts`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_14\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/avalanche/-v1-messages-{message_hash}-signatures--post.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing a math tool for reliable calculations\nDESCRIPTION: Simple math tool to improve the reliability of mathematical operations in LLMs, particularly for multiplication operations required for financial calculations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-setup.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntouch tools/math.ts\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../../examples/ai-agent/tools/math.ts\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with Safe Protocol SDK in TypeScript\nDESCRIPTION: Demonstrates how to initialize Safe SDK, sign a message with multiple owners, and execute the transaction to prove Safe ownership, necessary for Monerium account linking and authorization.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/monerium.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe, {\n  getSignMessageLibContract,\n  hashSafeMessage\n} from '@safe-global/protocol-kit'\nimport { constants } from '@monerium/sdk'\n\n// Initialize Safe SDK with provider, owner private key, and Safe address\nconst protocolKit = await Safe.init({\n  provider: RPC_URL,\n  signer: OWNER_1_PRIVATE_KEY,\n  safeAddress\n})\n\n// Create a message signing contract instance\nconst signMessageContract = await getSignMessageLibContract({\n  safeProvider: protocolKit.getSafeProvider(),\n  safeVersion: await protocolKit.getContractVersion()\n})\n\n// Encode the message hash to prepare for signing\nconst txData = signMessageContract.encode('signMessage', [\n  hashSafeMessage(constants.LINK_MESSAGE)\n])\n\n// Build transaction data for Safe\nconst safeTransactionData = {\n  to: await signMessageContract.getAddress(),\n  value: '0',\n  data: txData,\n  operation: OperationType.DelegateCall\n}\n\n// Create and sign the Safe transaction\nconst signMessageTx = await protocolKit.createTransaction({\n  transactions: [safeTransactionData]\n})\nconst signedTx = await protocolKit.signTransaction(signMessageTx)\n\n// Connect second owner and execute transaction\nconst protocolKitOfOwner2 = await protocolKit.connect({\n  signer: OWNER_2_PRIVATE_KEY\n})\nconst transactionResult = await protocolKitOfOwner2.executeTransaction(signedTx)\n\nconsole.log('transactionResult', transactionResult)\n\n```\n\n----------------------------------------\n\nTITLE: List Transfers API - Curl\nDESCRIPTION: This snippet shows how to use the `curl` command-line tool to retrieve the list of token transfers for a specific Safe address using a GET request. It targets the Safe Transaction Service API and specifies the `Accept` and `Content-Type` headers as `application/json`. The address `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` is used as an example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain ID with Protocol Kit in TypeScript\nDESCRIPTION: Demonstrates how to retrieve the chain ID of the connected network using the Safe Protocol Kit. This requires an initialized Protocol Kit instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getchainid.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst chainId = await protocolKit.getChainId()\n```\n\n----------------------------------------\n\nTITLE: Retrieve Incoming Transfers using cURL (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to call the Safe Transaction Service API endpoint using the `curl` command-line tool to fetch incoming transfers for a specific Safe address. It shows a basic GET request with standard Accept and Content-Type headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Get Decoded Transaction Data\nDESCRIPTION: This snippet describes the POST request to decode transaction data using the Safe Transaction Service's internal ABI information. The request expects a JSON payload with transaction data, and the response provides decoded method name and parameters. It also handles errors like invalid data or unknown function selectors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_4\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: EstimateSponsoredFeeFunctionProps Type Definition\nDESCRIPTION: Defines the `EstimateSponsoredFeeFunctionProps` type, which provides the structure to handle user operation gas estimations for sponsored transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nEstimateSponsoredFeeFunctionProps = {\n  userOperation: UserOperation\n  paymasterUrl: string\n  entryPoint: string\n  sponsorshipPolicyId?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit client in TypeScript\nDESCRIPTION: This snippet shows how to instantiate the SafeApiKit client with the required configuration specifying the Ethereum chain ID (Mainnet in this case). This initialized apiKit instance is necessary to invoke Safe API methods such as getTransactionConfirmations. The SafeApiKit package must be installed as a dependency.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettransactionconfirmations.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for Chiado API Reference in Next.js\nDESCRIPTION: This function generates static props for a Next.js page by rendering MDX content to HTML and extracting headings from the rendered content. It uses the Chiado Swagger schema and MDX components to create structured API documentation that can be used for server-side rendering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/chiado.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting safeTxGas\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, highlighting the `safeTxGas` parameter within the `safeTransactionData` object. This represents the gas limit specific to the Safe execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData: {\n    operation: OperationType.Call,\n    safeTxGas: '0x...',\n    baseGas: '123',\n    gasPrice: '123',\n    gasToken: '0x...',\n    refundReceiver: '0x...',\n    nonce: '10'\n  },\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Usage of 'refundReceiver' Parameter - TypeScript\nDESCRIPTION: This code snippet demonstrates setting the optional `refundReceiver` parameter, which defines the address of the gas payment receiver, using the `options` object.  It requires the `createTransaction` method of a configured Safe instance and other parameters within the options object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction(\n  '0x...',\n  options: {\n    refundReceiver: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactions for a Safe (cURL)\nDESCRIPTION: This cURL command demonstrates how to retrieve all transactions for a Safe using the `GET` method. It specifies the Safe address in the URL and includes headers for accepting and sending JSON data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_28\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing SafeProvider with Configuration in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the SafeProvider component with a configuration object in a React application. The configuration object, created using `createConfig`, specifies the chain, provider, signer, and Safe options. It wraps the main App component, making Safe React Hooks available within it.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/safeprovider.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\nimport App from './App.tsx'\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeOptions: {\n    owners: ['0x...', '0x...', '0x...'],\n    threshold: 2\n  }\n})\n\nconst root = document.getElementById('root')\n\nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Module Transactions via cURL (Shell)\nDESCRIPTION: This cURL command shows how to interact with the Safe Transaction Service API to list all module transactions associated with a given Safe address. Requires no authentication but expects the Safe address as part of the URL path. Outputs a JSON object containing paginated transaction details, with optional headers for Accept and Content-Type set to 'application/json'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_38\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Getting Safe Delegates with Result Limit (TypeScript)\nDESCRIPTION: Controls the maximum number of results returned per page when fetching delegates. The `limit` parameter is specified in the configuration object for the `getSafeDelegates` call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafedelegates.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst delegates = await apiKit.getSafeDelegates({\n  limit: '10'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Transaction via API POST Endpoint\nDESCRIPTION: This snippet documents the POST API endpoint for creating or updating a multisig transaction for a specific Safe address. It outlines request parameters, expected JSON response schema, status codes, and sample cURL command for testing. Dependencies include correct Safe address input and proper request headers; the endpoint returns transaction details including Gas estimates, Safe address, transaction data, and signatures, or errors for invalid input.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Sample User Operation Response JSON\nDESCRIPTION: This JSON object represents a sample response from the `GET /api/v1/user-operations/{user_operation_hash}/` endpoint. It includes detailed information about a specific user operation, such as the Ethereum transaction hash, sender, nonce, initCode, callData, gas limits, fees, paymaster information, signature, entry point, and associated safe operation details. It is a typical response format when querying user operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n  \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n  \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n  \"nonce\": 0,\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n  \"safeOperation\": {\n    \"created\": \"2024-07-22T10:00:18.892702Z\",\n    \"modified\": \"2024-07-22T10:00:18.892702Z\",\n    \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n    \"validAfter\": null,\n    \"validUntil\": null,\n    \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n    \"confirmations\": [\n      {\n        \"created\": \"2024-07-22T10:00:18.898708Z\",\n        \"modified\": \"2024-07-22T10:00:18.898708Z\",\n        \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n        \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n        \"signatureType\": \"CONTRACT_SIGNATURE\"\n      }\n    ],\n    \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Module Transaction API Response Structure in JSON\nDESCRIPTION: This snippet shows the sample JSON response returned from the Safe Core API when retrieving a module transaction. It includes transaction metadata such as creation and execution times, block number, success status, involved addresses, value, operation type, and the unique moduleTransactionId. The values shown represent the expected data types and formats. Inputs are produced by the API, and outputs are used for programmatic processing in client applications.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Providing the Data Payload (`data`) for `execTransaction`\nDESCRIPTION: Highlights the `data` parameter (index 4) within the `execTransaction` function call. This parameter contains the calldata (encoded function call and arguments) for the transaction being executed by the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0,\n    \"0x...\", // data\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Delegates via API Endpoint\nDESCRIPTION: Fetches a paginated list of all delegates with optional filters such as safe address, delegate, delegator, label, limit, and offset. Utilizes GET request with query parameters and returns a paginated response containing delegate details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching User Operation with cURL\nDESCRIPTION: This cURL command retrieves a user operation from the specified transaction service endpoint using a GET request. It includes headers for accepting JSON responses and specifying content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Safe Balances Response JSON\nDESCRIPTION: This is a sample JSON response for the Get Safe Balances API endpoint. It provides an array of balances, including native coin balances and ERC20 token balances. For ERC20 tokens, it includes token details such as name, symbol, decimals, and logo URI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Operations using curl\nDESCRIPTION: This code snippet demonstrates how to use the `curl` command to retrieve a list of Safe Operations for a specific Safe address. It includes setting the `Accept` and `content-type` headers to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction API Request\nDESCRIPTION: This cURL command sends a POST request to the Safe Transaction Service API to create a multi-signature transaction. It targets a specific Safe address and uses an empty JSON payload.  The API requires the `content-type` and `Accept` headers to be set to `application/json`. The provided example uses a specific Safe address, which should be replaced with a relevant one.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Safe Balances Response\nDESCRIPTION: This is a sample JSON response from the `/api/v1/safes/{address}/balances/` endpoint. The response provides balance information, including the token address, token details (name, symbol, decimals, logo URI), and the balance amount.  It shows the format of both native coin (ETH) and ERC20 token balances.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Module Query Response - JSON Format\nDESCRIPTION: Sample JSON response from the modules endpoint showing a list of Safe accounts that have the specified module enabled. The response contains an array of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Safe Protocol Kit using the `Safe.init` method.  It requires the `@safe-global/protocol-kit` library.  It requires `provider`, `signer`, and `safeAddress` to be initialized to instantiate the `protocolKit` object. The `protocolKit` object is then used to call various methods, including `isValidSignature`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/isvalidsignature.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Balances (Deprecated)\nDESCRIPTION: This code snippet demonstrates how to retrieve the balances of a Safe account using a GET request to the `/api/v1/safes/{address}/balances/` endpoint.  The address parameter is required. Optional query parameters include `trusted` and `exclude_spam` to filter the results. This endpoint is deprecated.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Delegate with Transaction Service API (TypeScript)\nDESCRIPTION: This placeholder points to a TypeScript sample for sending a POST request to the /api/v2/delegates/ endpoint to add a delegate with a label on the Chiado network. Dependencies may include HTTP libraries and tools for EIP712 signature generation. Input includes the EIP712-signed message body, and output is an empty response if successful with HTTP 202 status. Ensure correct signature and delegate data are included in the POST body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v2-delegates--post.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Messages Using Safe Transaction Service - cURL Bash\nDESCRIPTION: This cURL example fetches all messages related to a specified Safe account by sending a GET request to the Safe Transaction Service. The 'address' path parameter specifies the Safe account. Results are returned in JSON format, optionally supporting pagination with query parameters (ordering, limit, offset). Requires standard API headers and may require proper access rights.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Information using curl\nDESCRIPTION: This snippet demonstrates how to fetch detailed information about a Safe account using a GET request to the `/api/v1/safes/{address}/` endpoint. It requires a Safe address as a path parameter and specifies `application/json` as the accepted content type. The response will contain details about the Safe such as address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_52\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient for a New Safe in TypeScript\nDESCRIPTION: Shows how to use `createSafeClient` to configure and deploy a new Safe account. It requires a `provider`, `signer`, and `safeOptions` specifying the `owners`, `threshold`, and `saltNonce` for deterministic address generation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/constructor.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeOptions: {\n    owners: ['0x...', '0x...', '0x...'],\n    threshold: 2,\n    saltNonce: 123n\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using getMultisigTransactions with Basic Parameters in TypeScript\nDESCRIPTION: A simplified example showing how to call getMultisigTransactions with just the Safe address parameter. This demonstrates the minimum required input to fetch multi-signature transaction history.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmultisigtransactions.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst multisigTxs = await apiKit.getMultisigTransactions(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: CURL Request for Creating a Delegate in Safe Transaction Service\nDESCRIPTION: Example CURL command to create a new delegate in the Safe Transaction Service API on the zkEVM network. The request requires appropriate signature data following the EIP712 standard.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Executing Transactions via Transaction Builder\nDESCRIPTION: Performs batch or single transaction execution from a JSON file formatted according to Safe Wallet Transaction Builder standards. The command facilitates complex transaction management including multi-signature operations, requiring Safe address, network URL, and the path to the transaction file. Optional parameters support signing with private keys and interactive prompts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/unattended-commands.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsafe-cli tx-builder [OPTIONS] SAFE_ADDRESS NODE_URL FILE_PATH\n\n╭─ Arguments ────────────────────────────────────────────────────────────────────────╮\n│ *    safe_address      CHECKSUMADDRESS  The address of the Safe. [required]        │\n│ *    node_url          TEXT             Ethereum node url. [required]              │\n│ *    file_path         FILE             File path with tx_builder data. [required] |\n╰────────────────────────────────────────────────────────────────────────────────────╯\n╭─ Options ──────────────────────────────────────────────────────────────────────────╮\n│ --private-key                         TEXT     List of private keys of signers.    │\n│ --interactive    --non-interactive             Enable/disable interactive mode.  │\n╰────────────────────────────────────────────────────────────────────────────────────╯\n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data - Safe Transaction Service API (Bash)\nDESCRIPTION: This snippet shows how to decode transaction calldata by sending a POST request with the data to the /api/v1/data-decoder/ endpoint. The input should be a 0x-prefixed hex string representing contract calldata; optionally, a recipient address can be supplied. The response contains the decoded method name and parameters. No authentication is required, but the accuracy increases if the contract address is provided.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-avalanche.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Configuring .env for Infura-supported Chains - Bash\nDESCRIPTION: This snippet outlines the environment variable configuration required for deploying contracts to an Infura-supported blockchain network. The .env file should contain a funded account mnemonic and an Infura project API key. For ZKsync deployments, an additional variable enables ZKsync compatibility. Input is a plaintext file; output is the .env file at the project root.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-contracts-deployment.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nMNEMONIC=funded_account_on_this_network\nINFURA_KEY=your_Infura_project_API_key\n```\n\nLANGUAGE: bash\nCODE:\n```\nHARDHAT_ENABLE_ZKSYNC=1\n```\n\n----------------------------------------\n\nTITLE: Defining the Operation Type (`operation`) for `execTransaction`\nDESCRIPTION: Highlights the `operation` parameter (index 5) within the `execTransaction` function call. This parameter specifies the type of execution, such as `Enum.Operation.Call` (standard call) or `Enum.Operation.DelegateCall`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call, // operation\n    0,\n    0,\n    0,\n    0x...,\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Multisig Transactions API Response - JSON\nDESCRIPTION: This sample shows the JSON structure returned by the multisig transactions endpoint, embodying a PaginatedSafeMultisigTransactionResponseList. Each result features complete transaction details, such as Safe and recipient addresses, gas metrics, value, signatures, confirmations, and transaction metadata. No dependencies apply for parsing, but consumers should expect an array of transactions with detailed metadata, and handle fields that may be null. The structure supports pagination with 'count', 'next', and 'previous' fields.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Owner - cURL\nDESCRIPTION: This cURL command makes a GET request to the Safe Transaction Service API to retrieve a list of Safe accounts owned by a given address.  It includes the required headers for accepting JSON responses and content type. The owner address is a path parameter and is required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price (`gasPrice`) in `safeClient.send` in TypeScript\nDESCRIPTION: Shows how to optionally specify the gas price (`gasPrice`) in wei for legacy (non-EIP-1559) transactions when calling `safeClient.send`. This determines the cost per unit of gas.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  transactions,\n  gasPrice: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for Aurora API Reference Page using Next.js and React\nDESCRIPTION: This function generates static props for the Next.js page by rendering MDX content to a string, extracting headings from the rendered HTML using the Aurora Swagger specification, and returning the data as props for the page.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/aurora.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Adding Message Signature\nDESCRIPTION: Shows the expected JSON response body upon successfully adding a signature to a message using the API. A successful operation typically returns an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Smart Account Client (TypeScript)\nDESCRIPTION: This snippet initializes the Safe smart account client, setting up the necessary components to interact with the smart account. It uses `toSafeSmartAccount`, `createSmartAccountClient`, and various dependencies to establish the connection and functionality, including interaction with a bundler and paymaster.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst init = async () => {\n  // The safe account is created using the public client:\n  const safeAccount = await toSafeSmartAccount<\n    '0.7',\n    '0xEBe001b3D534B9B6E2500FB78E67a1A137f561CE'\n  >({\n    client: publicClient,\n    // @ts-expect-error The wallet client is set in the useEffect\n    owners: [walletClient!],\n    version: '1.4.1',\n    // These modules are required for the 7579 functionality:\n    safe4337ModuleAddress: '0x3Fdb5BC686e861480ef99A6E3FaAe03c0b9F32e2', // These are not meant to be used in production as of now.\n    erc7579LaunchpadAddress: '0xEBe001b3D534B9B6E2500FB78E67a1A137f561CE' // These are not meant to be used in production as of now.\n  })\n\n  const isSafeDeployed = await safeAccount.isDeployed()\n\n  setSafeAddress(safeAccount.address)\n  setSafeIsDeployed(isSafeDeployed)\n\n  // Finally, we create the smart account client, which provides functionality to interact with the smart account:\n  const smartAccountClient = createSmartAccountClient({\n    account: safeAccount,\n    chain: sepolia,\n    bundlerTransport: http(pimlicoUrl),\n    paymaster: pimlicoClient,\n    userOperation: {\n      estimateFeesPerGas: async () => {\n        return (await pimlicoClient.getUserOperationGasPrice()).fast\n      }\n    }\n  }).extend(erc7579Actions())\n\n  // Check whether the module has been installed already:\n  const isModuleInstalled =\n    isSafeDeployed &&\n    (await smartAccountClient.isModuleInstalled({\n      address: ownableExecutorModule,\n      type: 'executor',\n      context: '0x'\n    }))\n\n  setModuleIsInstalled(isModuleInstalled)\n\n  // We store the clients in the state to use them in the following steps:\n  setSafeAccount(safeAccount)\n  setSmartAccountClient(smartAccountClient)\n\n  console.log('setup done')\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ResourceHub React Component\nDESCRIPTION: This snippet imports the ResourceHub component from the specified relative path, enabling its use within the current file. It depends on the React component being correctly exported in '../components/ResourceHub'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/resource-hub.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ResourceHub from '../components/ResourceHub'\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Parameters Definition\nDESCRIPTION: This section defines the parameters required for the API endpoint to retrieve executed transactions. It specifies the input parameters, their types, and whether they are required or optional. The endpoint takes an address and allows ordering, limit, and offset parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_25\n\nLANGUAGE: N/A\nCODE:\n```\n<Parameters parameters={[{\"in\":\"path\",\"name\":\"address\",\"schema\":{\"type\":\"string\"},\"required\":true},{\"name\":\"ordering\",\"required\":false,\"in\":\"query\",\"description\":\"Which field to use when ordering the results.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"limit\",\"required\":false,\"in\":\"query\",\"description\":\"Number of results to return per page.\",\"schema\":{\"type\":\"integer\"}},{\"name\":\"offset\",\"required\":false,\"in\":\"query\",\"description\":\"The initial index from which to return the results.\",\"schema\":{\"type\":\"integer\"}}]} />\n```\n\n----------------------------------------\n\nTITLE: Get Delegates - Curl\nDESCRIPTION: This snippet shows how to retrieve delegates associated with a Safe address using a cURL request to the Safe Transaction Service API. It performs a GET request to the `/api/v2/delegates/` endpoint with the `delegator` query parameter set to the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n      'https://safe-transaction-sepolia.safe.global/api/v2/delegates/?delegator=0xAA86E576c084aFFFFFFFFFFFF7967F10C467d318' \\\n      -H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Importing UseUpdateThresholdParams Type (TypeScript)\nDESCRIPTION: Code snippet demonstrating how to import the `UseUpdateThresholdParams` type definition from the `@safe-global/safe-react-hooks` library. This type is used for the optional configuration parameter of the hook.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdatethreshold.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseUpdateThresholdParams } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Estimate Gas Costs - Curl Example\nDESCRIPTION: This `curl` command estimates gas costs for a multi-signature transaction for a specific Safe account. It sends a POST request to the `/api/v1/safes/{address}/multisig-transactions/estimations/` endpoint. The address is provided through the path.  The command sets the `Accept` and `content-type` headers to `application/json`.  It expects a `200` response with the `safeTxGas`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_34\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Create Safe Operation with cURL\nDESCRIPTION: This cURL command demonstrates how to create a new Safe Operation using the Transaction Service API. It sends a POST request to the specified endpoint with the Safe address and an empty JSON payload.  The request includes headers for accepting JSON responses and specifying the content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Balances with curl\nDESCRIPTION: This curl command demonstrates how to fetch balance information for a Safe address, including both native coins and ERC20 tokens. The API supports parameters for filtering trusted tokens, excluding spam tokens, and pagination options.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response - List Confirmations - JSON\nDESCRIPTION: Shows a sample JSON response body returned by the GET endpoint for listing multisig confirmations. It includes pagination details (`count`, `next`, `previous`) and an array of `results`, where each result is a confirmation object containing the owner, submission date, transaction hash, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Delegate - Python\nDESCRIPTION: This snippet demonstrates how to delete a delegate from a Safe using the `safe-eth-py` library.  It creates a message hash, signs it with the owner's private key, and then calls the `remove_delegate` method of the `TransactionServiceApi`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhash_to_sign = transaction_service_api.create_delegate_message_hash(delegate_address=account_owner_b.address)\n      signature = account_owner_a.signHash(hash_to_sign)\n\n      transaction_service_api.remove_delegate(\n          delegate_address=ChecksumAddress(account_owner_b.address),\n          delegator_address=ChecksumAddress(account_owner_a.address),\n          signature=signature.signature)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Delegate Deletion\nDESCRIPTION: Response indicates successful deletion with a 204 status code and empty response body. Additional error codes cover malformed data, not found, or invalid address scenarios.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Specifying the Destination Address Parameter in Module Transaction\nDESCRIPTION: Example showing how to set the 'to' parameter when calling execTransactionFromModule. The 'to' parameter represents the destination address where the module transaction will be executed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/execTransactionFromModule.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransactionFromModule(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call\n);\n```\n\n----------------------------------------\n\nTITLE: Bash cURL command to fetch Safe creation status\nDESCRIPTION: A cURL command that performs a GET request to the Safe creation API endpoint for a specific Safe address, including headers for JSON acceptance and content type. It demonstrates how to programmatically retrieve creation transaction details from the server.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Native Token Value in Module Transaction\nDESCRIPTION: Example showing how to set the 'value' parameter when calling execTransactionFromModule. The 'value' parameter determines the amount of native tokens (e.g., ETH) to be sent with the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/execTransactionFromModule.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransactionFromModule(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Executed Transaction: TypeScript\nDESCRIPTION: This snippet retrieves executed transactions from the Safe Transaction Service and logs the last executed transaction. It requires the initialized Safe API Kit and the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactions = await apiKit.getMultisigTransactions(config.SAFE_ADDRESS)\n\nif (transactions.results.length > 0) {\n  console.log('Last executed transaction', transactions.results[0])\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Incoming Transfers via cURL\nDESCRIPTION: This cURL command retrieves a list of incoming transfers for a specified Safe address from the Safe Transaction Service API.  It utilizes the GET method, providing the Safe address in the URL. The request headers specify that the expected response is in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Transaction using cURL in Bash\nDESCRIPTION: This cURL command triggers a POST request to create a multisig transaction for a specified Safe address in the Linea network. It sends an empty JSON object as the request body and includes headers for content type and acceptance. The sample response shows the gas estimate for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Operation via API | bash\nDESCRIPTION: This snippet provides a sample command-line request using `curl` to fetch a Safe Operation from the API. It demonstrates how to use the GET method, include the `safe_operation_hash` in the path, and set the necessary Accept and Content-Type headers for a JSON response. This command retrieves the operation data for a specific hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: List Messages API Endpoint in TypeScript\nDESCRIPTION: Defines the API endpoint to retrieve messages for a specific Safe account. It accepts path parameter 'address', optional query parameters for ordering, limit, and offset, and returns a paginated list of messages with detailed schema including message, confirmations, and metadata. The curl example demonstrates a GET request to fetch messages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/sepolia/-v1-safes-{address}-messages--get.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Rendering Aurora API Reference Component with Network Name\nDESCRIPTION: This JSX code renders the API Reference component specifically for the Aurora network. The component likely uses the headings data generated in getStaticProps to display the API documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/aurora.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference networkName=\"aurora\"/>\n```\n\n----------------------------------------\n\nTITLE: Querying Message Status with getMessage - Protocol Kit - TypeScript\nDESCRIPTION: This snippet demonstrates how to retrieve the status of an off-chain message from the Safe Transaction Service using apiKit's getMessage method. It requires an initialized apiKit instance and the safeMessageHash as input. The output is an object representing the confirmed message and its details. This method is read-only and does not modify any state.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/messages.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst confirmedMessage = await apiKit.getMessage(safeMessageHash)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported Token Lists via API (Bash)\nDESCRIPTION: Sends a GET request using curl to the `/api/v1/tokens/lists/` endpoint of the Safe Transaction Service to retrieve a paginated list of supported tokens. Optional query parameters `limit` and `offset` can be used for pagination. The request specifies `Accept: application/json` and `content-type: application/json` headers. Expects a JSON response containing the count, next/previous page URLs, and an array of token objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response - JSON\nDESCRIPTION: This is a sample JSON response showing the structure of the confirmations retrieved.  It provides example data including transaction creation and modification timestamps, the owner's address, the signature, and the signature type.  This response is returned when successfully retrieving the confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Getting a Specific Safe Transfer (JSON)\nDESCRIPTION: Provides an example JSON response for the 'Get Transfer' API endpoint. The response is a single JSON object containing the details of the requested transfer, including its type, execution date, block number, transaction hash, to/from addresses, value, and token information (if applicable).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Executed Transactions Endpoint Responses\nDESCRIPTION: This section details the responses from the API endpoint for listing executed transactions. It specifies a 200 OK response with a schema defining the structure of the returned data, including pagination and transaction details. The schema includes 'count', 'next', 'previous', and 'results'. The 'results' field contains an array of transactions, with different structures based on the transaction type: `MULTISIG_TRANSACTION`, `MODULE_TRANSACTION`, and `ETHEREUM_TRANSACTION`, with all transaction types including information about transfers like ERC20, ERC721 and ether transfers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_26\n\nLANGUAGE: OpenAPI\nCODE:\n```\n<Responses responses={[{\"code\":\"200\",\"schema\":{},\"content\":{\"application/json\":{\"schema\":{\"refName\":\"PaginatedAllTransactionsSchemaList\",\"type\":\"object\",\"required\":[\"count\",\"results\"],\"properties\":{\"count\":{\"type\":\"integer\",\"example\":123},\"next\":{\"type\":\"string\",\"nullable\":true,\"format\":\"uri\",\"example\":\"http://api.example.org/accounts/?offset=400&limit=100\"},\"previous\":{\"type\":\"string\",\"nullable\":true,\"format\":\"uri\",\"example\":\"http://api.example.org/accounts/?offset=200&limit=100\"},\"results\":{\"type\":\"array\",\"items\":{\"refName\":\"AllTransactionsSchema\",\"type\":\"object\",\"description\":\"Just for the purpose of documenting, don't use it\",\"properties\":{\"txType1\":{\"refName\":\"SafeModuleTransactionWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"created\":{\"type\":\"string\",\"format\":\"date-time\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"isSuccessful\":{\"type\":\"boolean\",\"readOnly\":true},\"transactionHash\":{\"type\":\"string\"},\"safe\":{\"type\":\"string\"},\"module\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":\"string\",\"format\":\"decimal\",\"pattern\":\"^-?\\d{0,78}(?:\\.\\d{0,0})?$\"},\"data\":{\"type\":[\"string\",\"null\"]},\"operation\":{\"enum\":[0,1,2],\"type\":\"integer\",\"description\":\"* `0` - CALL\\n* `1` - DELEGATE_CALL\\n* `2` - CREATE\",\"x-spec-enum-id\":\"73baf6048b75e41c\",\"minimum\":0,\"maximum\":32767},\"dataDecoded\":{\"type\":\"object\",\"additionalProperties\":{},\"readOnly\":true},\"moduleTransactionId\":{\"type\":\"string\",\"description\":\"Internally calculated parameter to uniquely identify a moduleTransaction \\n`ModuleTransactionId = i+tx_hash+trace_address`\"},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":[\"string\",\"null\"]},\"tokenAddress\":{\"type\":[\"string\",\"null\"]},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true}},\"required\":[\"blockNumber\",\"created\",\"data\",\"dataDecoded\",\"executionDate\",\"isSuccessful\",\"module\",\"moduleTransactionId\",\"operation\",\"safe\",\"to\",\"transactionHash\",\"transfers\",\"txType\",\"value\"]},\"txType2\":{\"refName\":\"SafeMultisigTransactionWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"safe\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"data\":{\"type\":[\"string\",\"null\"]},\"operation\":{\"type\":\"integer\",\"minimum\":0},\"gasToken\":{\"type\":[\"string\",\"null\"]},\"safeTxGas\":{\"type\":\"integer\",\"minimum\":0},\"baseGas\":{\"type\":\"integer\",\"minimum\":0},\"gasPrice\":{\"type\":\"string\"},\"refundReceiver\":{\"type\":[\"string\",\"null\"]},\"nonce\":{\"type\":\"integer\",\"minimum\":0},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"submissionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"modified\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"transactionHash\":{\"type\":\"string\"},\"safeTxHash\":{\"type\":\"string\"},\"proposer\":{\"type\":\"string\"},\"proposedByDelegate\":{\"type\":[\"string\",\"null\"]},\"executor\":{\"type\":\"string\",\"null\"},\"isExecuted\":{\"type\":\"boolean\"},\"isSuccessful\":{\"type\":[\"boolean\",\"null\"],\"readOnly\":true},\"ethGasPrice\":{\"type\":[\"string\",\"null\"],\"readOnly\":true},\"maxFeePerGas\":{\"type\":[\"string\",\"null\"],\"readOnly\":true},\"maxPriorityFeePerGas\":{\"type\":\"string\",\"null\"],\"readOnly\":true},\"gasUsed\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"fee\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"origin\":{\"type\":\"string\",\"readOnly\":true},\"dataDecoded\":{\"type\":\"object\",\"additionalProperties\":{},\"readOnly\":true},\"confirmationsRequired\":{\"type\":\"integer\"},\"confirmations\":{\"type\":\"object\",\"additionalProperties\":{},\"description\":\"Filters confirmations queryset\\n:param obj: MultisigConfirmation instance\\n:return: Serialized queryset\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"},\"signatures\":{\"type\":[\"string\",\"null\"]},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":[\"string\",\"null\"]},\"tokenAddress\":{\"type\":[\"string\",\"null\"]},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true}},\"required\":[\"baseGas\",\"blockNumber\",\"confirmations\",\"confirmationsRequired\",\"dataDecoded\",\"ethGasPrice\",\"executionDate\",\"executor\",\"fee\",\"gasPrice\",\"gasUsed\",\"isExecuted\",\"isSuccessful\",\"maxFeePerGas\",\"maxPriorityFeePerGas\",\"modified\",\"nonce\",\"operation\",\"origin\",\"proposedByDelegate\",\"proposer\",\"safe\",\"safeTxGas\",\"safeTxHash\",\"submissionDate\",\"to\",\"transactionHash\",\"transfers\",\"trusted\",\"txType\",\"value\"]},\"txType3\":{\"refName\":\"EthereumTxWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"to\":{\"type\":[\"string\",\"null\"]},\"data\":{\"type\":\"string\"},\"txHash\":{\"type\":\"string\"},\"blockNumber\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":[\"string\",\"null\"]},\"tokenAddress\":{\"type\":[\"string\",\"null\"]},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true},\"f\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Status using curl\nDESCRIPTION: Demonstrates how to use curl to send a GET request to the `/api/v1/safes/{address}/` endpoint on the Avalanche network's Safe Transaction Service. This retrieves detailed status information for the specified Safe address (0xcd2E...1c75). Requires 'Accept' and 'content-type' headers set to 'application/json'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Checking SafeProvider Initialization with useSafe hook (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `useSafe` hook from `@safe-global/safe-react-hooks` to access the `isInitialized` property.  The `isInitialized` boolean indicates whether the `SafeProvider` is ready to be used. The component renders a message based on the value of `isInitialized`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/isinitialized.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction IsInitialized() {\n  const { isInitialized } = useSafe()\n\n  return (\n    <>\n      {isInitialized ? 'Is initialized' : 'Not initialized'}\n    </>\n  )\n}\n\nexport default IsInitialized\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram for Off-Chain Transactions\nDESCRIPTION: Illustrates the flow of a Safe transaction, including creating a new Safe, proposing a transaction, collecting confirmations, and executing the transaction on the blockchain.  This is a Mermaid sequence diagram.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/api-safe-transaction-service.mdx#_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant A as Alice\n    participant B as Bob\n    participant Blockchain\n    rect rgba(255,255,255,.1)\n    Note over A,B: Process of creating a new Safe \n    A-->A: create and sign setup transaction\n    A->>+Blockchain: Safe.setup(_owners=[\"0xAlice\",\"0xBob\"],_threshold=2,...)\n    Blockchain-->>-A: Success\n    SafeTransactionService->>+Blockchain: picks the transaction (scheduled task)\n    Blockchain-->>-SafeTransactionService: transaction information\n    SafeTransactionService-->SafeTransactionService: save transaction data (block, block hash, transaction hash, gas used...)\n    SafeTransactionService->>RabbitMQ: sendEvent SAFE_CREATED\n    SafeTransactionService->>Firebase: sendEvent SAFE_CREATED\n    end\n    A-->A: create and sign transaction\n    A->>+SafeTransactionService: proposeTransaction POST /v1/safes/0x5Afe/multisig-transactions/\n    SafeTransactionService-->>-A: Http(201) {Created}\n    SafeTransactionService->>RabbitMQ: sendEvent PENDING_MULTISIG_TRANSACTION\n    SafeTransactionService->>RabbitMQ: sendEvent CONFIRMATION_REQUEST\n    SafeTransactionService->>Firebase: sendEvent PENDING_MULTISIG_TRANSACTION\n    SafeTransactionService->>Firebase: sendEvent CONFIRMATION_REQUEST\n    B->>+SafeTransactionService: GET /v1/safes/0x5Afe/multisig-transactions/?executed=false\n    SafeTransactionService-->>-B: Http(200) {...\"safeTxHash\":\"0x5afe0001\"}\n    B-->B: sign transaction\n    B->>+SafeTransactionService: confirmTransaction POST /v1/multisig-transactions/0x5afe0001/confirmations/\n    SafeTransactionService-->>-B: Http(201) {Created}\n    SafeTransactionService->>RabbitMQ: sendEvent NEW_CONFIRMATION\n    SafeTransactionService->>Firebase: sendEvent NEW_CONFIRMATION\n    A->>+SafeTransactionService: GET /v1/multisig-transactions/0x5afe0001/\n    SafeTransactionService-->>-A: Http(200) {...\"safeTxHash\":\"0x5afe0001\"}\n    A->>+Blockchain: Safe.execTransaction(to = 0x0.., value = 1, signatures = 0x0AliceBob, ..)\n    Blockchain-->>-A: Success\n    SafeTransactionService->>+Blockchain: picks the transaction (scheduled task)\n    Blockchain-->>-SafeTransactionService: transaction information\n    SafeTransactionService-->SafeTransactionService: save transaction data (block, block hash, transaction hash, gas used...)\n    SafeTransactionService->>RabbitMQ: sendEvent EXECUTED_MULTISIG_TRANSACTION\n    SafeTransactionService->>Firebase: sendEvent EXECUTED_MULTISIG_TRANSACTION\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Module Transaction Retrieval\nDESCRIPTION: This JSON snippet provides a sample response for the module transaction API, demonstrating the structure and data returned when fetching a transaction by ID. It includes transaction metadata such as creation time, execution date, block number, success status, hash, involved addresses, value, operation type, and decoded data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for confirmation list retrieval\nDESCRIPTION: This snippet displays an example JSON response from the server when requesting the list of confirmations. It includes metadata such as total count, pagination links, and an array of confirmation objects with fields like creation date, owner address, signature, and signature type, conforming to the defined schema.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Confirm Multisig Transaction (JSON)\nDESCRIPTION: This is a sample JSON response received after confirming a multisig transaction. It contains the signature of the confirmation. The signature is provided as a hexadecimal string.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Operations API Sample Response - JSON\nDESCRIPTION: Example JSON response returned from the Safe Operations API when querying the list of operations for a given Safe account. The response includes pagination metadata (count, next, previous) and an array of SafeOperations, each with timestamps, operation hashes, module addresses, confirmations with signatures, and user operation details such as transaction hashes, nonce, gas limits, and signature data. This sample illustrates the data structure clients should expect.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0,\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Status via Curl Bash\nDESCRIPTION: Demonstrates how to make a GET request to the Safe Transaction Service API to retrieve the detailed status of a specific Safe account using curl. The Safe address is provided as a path parameter. The response provides information such as owners, threshold, nonce, master copy, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe Onramp Widget Using TypeScript and Embedding Container in HTML\nDESCRIPTION: The TypeScript snippet imports and initializes the Stripe onramp widget by loading it with the public test key. It creates a session using the previously obtained client_secret, then mounts the onramp widget to a DOM element with the id 'onramp-element'. The accompanying HTML snippet provides the container where the iframe widget will be rendered. Together, they integrate the secure fiat-to-crypto purchase UI into the frontend application.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/stripe.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { loadStripeOnramp } from '@stripe/crypto'\n\n// StripeOnramp is imported with the scripts from step one  \nconst stripeOnramp = await loadStripeOnramp(\n  'pk_test_51...GgYH'\n)\n\n// Use the client secret from the previous step\nconst onrampSession = stripeOnramp.createSession({ clientSecret })\nonrampSession.mount('#onramp-element')\n```\n\n----------------------------------------\n\nTITLE: Fetching User Operation with JS/TS\nDESCRIPTION: This snippet demonstrates how to fetch a User Operation using JavaScript or TypeScript. The code will most likely reside in `../examples/polygon/-v1-user-operations-{user_operation_hash}--get.ts` and retrieves user operation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_54\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/polygon/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Specifying the `safeTxHash` parameter in TypeScript\nDESCRIPTION: Illustrates how to pass the `safeTxHash` parameter to the `confirm` method. This hash identifies the specific multi-signature transaction stored in the Safe Transaction Service that needs confirmation. The `focus=2` comment is likely used for highlighting in the documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/confirm.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.confirm({\n  safeTxHash: '0x...' // focus=2\n})\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract API Request\nDESCRIPTION: This snippet is a cURL command for retrieving information about a specific smart contract using the Safe Transaction Service API. It uses a GET request to fetch contract details,  specifying the contract address as a path parameter. The command includes headers indicating the accepted and content types are JSON.  The base URL points to the Safe Transaction Service on the worldchain network, with a specific contract address appended to the endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Safe Multisig Transaction via API using Bash\nDESCRIPTION: Demonstrates how to delete a queued Safe multisig transaction using a curl command. It sends a DELETE request to the `/api/v1/multisig-transactions/{safe_tx_hash}/` endpoint, specifying the `safe_tx_hash` in the path. This operation requires an EIP-712 signature (as described elsewhere) provided by the proposer or their delegate. A successful deletion returns a 204 No Content response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-optimism.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Gas Cost Estimation\nDESCRIPTION: Sample JSON response from the Gas Cost Estimation API endpoint, showing the estimated safeTxGas required for the multisig transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting origin\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, highlighting the optional `origin` parameter. This parameter allows specifying the name of the application or context originating the transaction proposal.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData,\n  senderAddress: '0x...',\n  senderSignature: '0x...',\n  origin: 'App name'\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Message Signature via API using curl\nDESCRIPTION: Demonstrates how to use the `curl` command-line tool to send a POST request to the Safe Transaction Service API's `/api/v1/messages/{message_hash}/signatures/` endpoint. This adds a signature for a specific message hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Delete Queued Transaction - JSON\nDESCRIPTION: Shows the expected response body for a successful DELETE request to remove a queued multisig transaction. A 204 status code is returned upon success, indicating no content in the response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Importing UseSafeReturnType Definition (TypeScript)\nDESCRIPTION: Imports the TypeScript type definition `UseSafeReturnType` from the `@safe-global/safe-react-hooks` package. This type describes the structure and available properties and methods returned by the `useSafe` hook, providing type safety for developers using the hook. It is primarily used for type hinting and documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseSafeReturnType } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Message\nDESCRIPTION: This snippet explains how to create a new signed message for a given Safe account using a POST request to the `/api/v1/safes/{address}/messages/` endpoint. It requires the Safe `address` as a path parameter. The message can be a string or an EIP712 object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message Using Safe Transaction Service - cURL Bash\nDESCRIPTION: This cURL example shows how to POST a new EIP191 (string) or EIP712 (object) message to be signed for a Safe account using the Safe Transaction Service API. The 'address' path parameter identifies the Safe. The request body must contain the message data; a raw hash is not supported as the service computes the hash. A successful creation returns a 201 status with an empty response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract List with curl in Bash\nDESCRIPTION: Makes a GET request to the Safe Transaction Service API to retrieve a list of known smart contracts with their ABIs. The endpoint accepts optional parameters for ordering, pagination limit, and offset.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Confirmations\nDESCRIPTION: Example JSON response for the GET `/api/v1/safe-operations/{safe_operation_hash}/confirmations/` endpoint (HTTP 200 OK). It includes pagination details (`count`, `next`, `previous`) and an array (`results`) containing confirmation objects, each specifying the `owner`, `signature`, `signatureType`, and creation/modification timestamps.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Delegate via Safe Transaction Service (TypeScript)\nDESCRIPTION: References a TypeScript file (implementation not shown) for issuing a DELETE request to the /api/v2/delegates/{delegate_address}/ endpoint. This request removes a delegate/delegator pairing. The request requires an EIP-712 signature, as with the creation endpoint. The payload must specify the correct delegate_address path parameter and proper HTTP headers. Expects HTTP status 204 for delete, or error codes for malformed input, not found, or invalid addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v2-delegates-{delegate_address}--delete.ts\n```\n\n----------------------------------------\n\nTITLE: Deploying SafeProxy with Callback using SafeProxyFactory in Solidity\nDESCRIPTION: Defines the `createProxyWithCallback` function signature in the `SafeProxyFactory` contract. This public function deploys a new `SafeProxy` using the given singleton (`_singleton`), initializer data (`initializer`), and salt nonce (`saltNonce`). After deployment and optional initialization call, it invokes a specified callback contract (`callback`) conforming to the `IProxyCreationCallback` interface. It returns the address of the new `SafeProxy` and emits a `ProxyCreation` event.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/deployment/SafeProxyFactory.mdx#_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nfunction createProxyWithCallback(address _singleton, bytes memory initializer, uint256 saltNonce, IProxyCreationCallback callback) public returns (SafeProxy proxy);\n```\n\n----------------------------------------\n\nTITLE: Sample Module Transaction Response (json)\nDESCRIPTION: Provides an example of the JSON response body returned by the Get Module Transaction API endpoint. It shows the structure and data points for a successful transaction retrieval, including execution details, transaction hashes, and module information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Prepared Signature JSON Object\nDESCRIPTION: This JSON object represents a prepared signature payload. It includes various fields necessary for executing a transaction on a blockchain, such as `safeTxGas`, `baseGas`, `gasPrice`, `nonce`, target address (`to`), `value`, transaction `data`, `operation` type, `gasToken`, `refundReceiver`, the transaction hash (`safeTxHash`), and the actual `preparedSignature` string. The `preparedSignature` itself contains multiple signatures concatenated together, along with metadata like origin and cross-origin status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"27588\",\n  \"baseGas\": \"102462\",\n  \"gasPrice\": \"1000000000\",\n  \"nonce\": 4,\n  \"to\": \"0x53c4CE48756baE15E3454Ad75Ee8D4ba9764EA37\",\n  \"value\": \"0\",\n  \"data\": \"0x\",\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxHash\": \"0x549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d976\",\n  \"signatures\": {\n    \"0x608Cf2E3412C6BDA14e6D8A0a7d27C4240fED6F1\": {\n      \"signer\": \"0x608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1\",\n      \"data\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000004153c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d001c\",\n      \"contractSignature\": false\n    },\n    \"0x3d20A939988926A391A8345185A800560A8A1cB0\": {\n      \"signer\": \"0x3d20a939988926a391a8345185a800560a8a1cb0\",\n      \"data\": \"0x0000000000000000000000003d20a939988926a391a8345185a800560a8a1cb000000000000000000000000000000000000000000000000000000000000000411d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"contractSignature\": false\n    }\n  },\n  \"origin\": \"{\\\"origin\\\":\\\"http://localhost:3000\\\",\\\"crossOrigin\\\":false}\",\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Specific Token Info via API - Bash\nDESCRIPTION: Illustrates the use of the `curl` command to get detailed information for a single supported token. The command performs a GET request to the `/api/v1/tokens/{address}/` endpoint, replacing `{address}` with the token's contract address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching all transactions for a Safe - cURL\nDESCRIPTION: This cURL command retrieves all transactions associated with a specific Safe address from the Safe Transaction API.  The `-H` flags set the `Accept` and `content-type` headers to `application/json`, indicating that the client expects a JSON response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: UI Component Display for Protocol Kit Link\nDESCRIPTION: This React snippet utilizes Material UI components to render a grid item containing a custom card that links to the Protocol Kit NPM package. It serves to provide a visual, clickable element guiding users to the package page. Dependencies include React, Material-UI, and a local CustomCard component.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Grid } from '@mui/material'\nimport CustomCard from '../../components/CustomCard'\n\n<Grid item mt={3}>\n  <CustomCard\n    title={'@safe-global/protocol-kit'}\n    description={''}\n    url={'https://www.npmjs.com/package/@safe-global/protocol-kit'}\n  />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Confirmations (JSON)\nDESCRIPTION: This JSON object represents a successful Safe Transaction API response for listing confirmations. The response includes pagination fields ('count', 'next', 'previous') and an array of confirmation objects, each with timestamps, owner address, signature, and signatureType. The fields are required and their structure adheres to Safe API standards for multisig signature confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Paginated User Operation List Response (JSON)\nDESCRIPTION: This JSON object provides an example of the expected response structure when querying the list of User Operations for a Safe. It shows the pagination fields (`count`, `next`, `previous`) and an array of `results`, where each item represents a User Operation with detailed information including associated Safe Operation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ]\n      }\n    }\n  ]\n} \n```\n\n----------------------------------------\n\nTITLE: Deploying and Enabling a Safe Module in TypeScript\nDESCRIPTION: This asynchronous TypeScript function `enableModule` deploys a `TokenWithdrawModule` smart contract using `ethers.getContractFactory` and enables it on a Gnosis Safe. It encodes the `enableModule` function call data and executes it via the Safe's `execTransaction` function, requiring an owner signature (Alice). Finally, it verifies that the module has been successfully enabled using `isModuleEnabled`. Requires `ethers.js`, deployed Safe and Token contracts, and signer instances (deployer, alice). Security Note: Only enable trusted modules.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n  // A Safe Module is a smart contract that is allowed to execute transactions on behalf of a Safe Smart Account.\n  // This function deploys the TokenWithdrawModule contract and enables it in the Safe.\n  const enableModule = async (): Promise<{\n    tokenWithdrawModule: TokenWithdrawModule;\n  }> => {\n    // Deploy the TokenWithdrawModule contract and pass the token and safe address as arguments\n    const tokenWithdrawModule = await (\n      await ethers.getContractFactory(\"TokenWithdrawModule\", deployer)\n    ).deploy(token.target, safeAddress);\n\n    // Enable the module in the safe, Step 1, generate transaction data\n    const enableModuleData = masterCopy.interface.encodeFunctionData(\n      \"enableModule\",\n      [tokenWithdrawModule.target]\n    );\n\n    // Enable the module in the safe, Step 2, execute the transaction\n    await execTransaction([alice], safe, safe.target, 0, enableModuleData, 0);\n\n    // Verify that the module is enabled\n    expect(await safe.isModuleEnabled.staticCall(tokenWithdrawModule.target)).to\n      .be.true;\n\n    return { tokenWithdrawModule };\n  };\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Module Transaction\nDESCRIPTION: Example JSON response structure returned when successfully fetching a module transaction. It includes details such as creation and execution dates, block number, success status, transaction hash, associated Safe and module addresses, destination address, value transferred, operation type, and the unique module transaction ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Transfers via cURL (Bash)\nDESCRIPTION: Demonstrates using cURL to send a GET request to the `/api/v1/safes/{address}/transfers/` endpoint to retrieve a list of the 1000 newest token transfers for a specified Safe address (e.g., 0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75). Requires a valid Safe address and sets `Accept` and `content-type` headers to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Get Safe Status API Request - JavaScript\nDESCRIPTION: This snippet shows how to access the API endpoint to get a Safe status. This request uses a GET method targeting the API endpoint for the safe transaction service, and specifies the safe address. It also includes header for `Accept` and `content-type` in order to format the output in JSON. The expected output is the safe's configuration details as a JSON response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_62\n\nLANGUAGE: js\nCODE:\n```\n// from ../examples/mainnet/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Messages\nDESCRIPTION: Provides an example JSON response from the GET `/api/v1/safes/{address}/messages/` endpoint, containing a paginated list (`count`, `next`, `previous`, `results`) of messages associated with a Safe account. Each message includes details like content, hash, timestamps, proposer, confirmations, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Kit Dependencies using pnpm (Bash)\nDESCRIPTION: This command uses the pnpm package manager to add the necessary libraries: `@safe-global/protocol-kit` for interacting with Safe smart accounts and `viem` as the Ethereum client library. These dependencies are required to build and run the subsequent TypeScript code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/protocol-kit viem\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Address Calculation (CREATE2) in TypeScript\nDESCRIPTION: Implements the `getAccountAddress` function to calculate the counterfactual address of a Safe proxy using the CREATE2 opcode. It fetches the proxy creation bytecode from the factory, constructs the full deployment bytecode including the singleton address, generates the initializer calldata using `getInitializerCode`, computes the CREATE2 salt based on the initializer hash and salt nonce, and finally uses `viem`'s `getContractAddress` function with the factory address, salt, deployment bytecode, and 'CREATE2' opcode. Requires a `viem` `PublicClient` and various Safe configuration addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PublicClient, Address, encodePacked, hexToBigInt, keccak256, getContractAddress } from 'viem';\n// Assume getInitializerCode is imported\n\nexport const getAccountAddress = async ({\n  client,\n  owner,\n  addModuleLibAddress,\n  safe4337ModuleAddress,\n  safeProxyFactoryAddress,\n  safeSingletonAddress,\n  saltNonce = 0n,\n  multiSendAddress,\n  erc20TokenAddress,\n  paymasterAddress\n}: {\n  client: PublicClient\n  owner: Address\n  addModuleLibAddress: Address\n  safe4337ModuleAddress: Address\n  safeProxyFactoryAddress: Address\n  safeSingletonAddress: Address\n  saltNonce?: bigint\n  multiSendAddress: Address\n  erc20TokenAddress: Address\n  paymasterAddress: Address\n}): Promise<Address> => {\n  const proxyCreationCode = await client.readContract({\n    abi: [\n      {\n        inputs: [],\n        name: 'proxyCreationCode',\n        outputs: [\n          {\n            internalType: 'bytes',\n            name: '',\n            type: 'bytes'\n          }\n        ],\n        stateMutability: 'pure',\n        type: 'function'\n      }\n    ],\n    address: safeProxyFactoryAddress,\n    functionName: 'proxyCreationCode'\n  })\n\n  const deploymentCode = encodePacked(\n    ['bytes', 'uint256'],\n    [proxyCreationCode, hexToBigInt(safeSingletonAddress)]\n  )\n\n  const initializer = await getInitializerCode({\n    owner,\n    addModuleLibAddress,\n    safe4337ModuleAddress,\n    multiSendAddress,\n    erc20TokenAddress,\n    paymasterAddress\n  })\n\n  // Salt is derived from the hash of the initializer data and the user-provided saltNonce\n  const salt = keccak256(encodePacked(['bytes32', 'uint256'], [keccak256(encodePacked(['bytes'], [initializer])), saltNonce]))\n\n  return getContractAddress({\n    from: safeProxyFactoryAddress, // The deployer address (factory)\n    salt: salt,                   // The CREATE2 salt\n    bytecode: deploymentCode,     // The contract deployment bytecode\n    opcode: 'CREATE2'             // Specify CREATE2 deployment\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Creation Status\nDESCRIPTION: Example JSON response structure for the Get Safe Creation Status endpoint. It includes key details such as the creation timestamp (`created`), creator address (`creator`), `transactionHash`, `factoryAddress`, `masterCopy`, `setupData`, `saltNonce`, decoded setup parameters (`dataDecoded`), and user operation details (`userOperation`, which can be null).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-06-25T11:18:48Z\",\n  \"creator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"transactionHash\": \"0x6404e0298423c092cc1ce486f3f72172a1c0f2f28a9b29f69e605ea825360ac5\",\n  \"factoryAddress\": \"0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC\",\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"setupData\": \"0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000017062a1de2fe6b99be3d9d37841fed19f5738040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d3debaab2b8093e69109f23a75501f864f74e20000000000000000000000003a16e3090e32dded2250e862b9d5610bef13e93d0000000000000000000000000000000000000000000000000000000000000000\",\n  \"dataDecoded\": {\n    \"method\": \"setup\",\n    \"parameters\": [\n      {\n        \"name\": \"_owners\",\n        \"type\": \"address[]\",\n        \"value\": [\n          \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n        ]\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"value\": \"0x\"\n      },\n      {\n        \"name\": \"fallbackHandler\",\n        \"type\": \"address\",\n        \"value\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"payment\",\n        \"type\": \"uint256\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"paymentReceiver\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      }\n    ]\n  },\n  \"userOperation\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient for a New Safe (TypeScript)\nDESCRIPTION: Creates a `SafeClient` instance configured to deploy a new Safe account. It uses `createSafeClient` with the RPC provider URL, signer private key, and `safeOptions` specifying the initial owners and threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  safeOptions: {\n    owners: [SIGNER_ADDRESS],\n    threshold: 1\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas using cURL in Bash\nDESCRIPTION: This cURL command initiates a POST request to estimate the gas costs for a multisig transaction at a specific Safe address, sending an empty JSON payload and expecting a JSON response with the gas estimate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Initialize Safe Smart Account with Multiple Owners in TypeScript\nDESCRIPTION: Creates a new Safe Smart Account with two AI agents and two human signers as owners, requiring 2 signatures for transaction execution. Uses the Safe Protocol Kit to initialize a 2-out-of-4 multisig wallet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/multi-agent-setup.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nconst AGENT_1_ADDRESS = // ...\nconst AGENT_1_PRIVATE_KEY = // ...\nconst AGENT_2_ADDRESS = // ...\nconst HUMAN_SIGNER_1_ADDRESS = // ...\nconst HUMAN_SIGNER_2_ADDRESS = // ...\nconst RPC_URL = 'https://rpc.ankr.com/eth_sepolia'\n\nconst newSafe = await Safe.init({\n  provider: RPC_URL,\n  signer: AGENT_1_PRIVATE_KEY,\n  safeOptions: {\n    owners: [AGENT_1_ADDRESS, AGENT_2_ADDRESS, HUMAN_SIGNER_1_ADDRESS, HUMAN_SIGNER_2_ADDRESS],\n    threshold: 2\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Passing calldataPayload Parameter to simulateAndRevert in Solidity\nDESCRIPTION: This snippet shows how to pass the calldataPayload parameter, which contains the bytes-encoded function data to be executed on the target contract. It highlights how payloads are provided as arguments and stresses the importance of correct ABI encoding. Input must be a valid bytes-formatted payload matching the function signature of the target contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/simulateAndRevert.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).simulateAndRevert(\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Setting the Native Token Value (`value`) for `execTransaction`\nDESCRIPTION: Highlights the `value` parameter (index 3) within the `execTransaction` function call. This parameter specifies the amount of native currency (e.g., ETH) to be transferred in the Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0, // value\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit - TypeScript\nDESCRIPTION: This snippet shows how to initialize the Safe Protocol Kit, a prerequisite for using the `isOwner` function. It uses the `Safe.init` method, taking `provider`, `signer`, and `safeAddress` as parameters.  This initializes the connection to the Safe contract specified by the safeAddress.  It is necessary for interacting with the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/isowner.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Safes with Specific Module - curl Example\nDESCRIPTION: A curl command to retrieve Safe accounts that have a specific module enabled. The request is made to the Linea network Safe Transaction Service, requiring a module address parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sending On-Chain Messages with Safe SDK\nDESCRIPTION: This example demonstrates how to send an on-chain message using the onchainMessageClient from the Safe SDK. It shows the basic usage pattern with a simple string message and lists all optional parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onchainMessageClient } from './setup.ts'\n\nconst messageResult = await onchainMessageClient.sendOnChainMessage({\n  message: 'I am the owner of this Safe',\n  from: '0x...', // Optional\n  gasLimit: '123', // Optional\n  gasPrice: '123', // Optional\n  maxFeePerGas: '123', // Optional\n  maxPriorityFeePerGas: '123', // Optional\n  nonce: 123, // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Safe Transfer using Curl (Bash)\nDESCRIPTION: Shows how to make a GET request using curl to retrieve details of a specific token transfer identified by its `transfer_id` (e.g., `3b3b57b3`) from the Safe Transaction Service API. It specifies the required `Accept` and `content-type` headers. The API endpoint used is `https://safe-transaction-blast.safe.global/api/api/v1/transfer/{transfer_id}`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Transfers (JSON)\nDESCRIPTION: This JSON represents a sample response from the `/api/v1/safes/{address}/transfers/` endpoint. It provides a paginated list of transfers, each containing information about the transaction, including the type, execution date, block number, transaction hash, to/from addresses, and value. Note the structure includes count, next, previous and results (containing array of transfer objects).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for list of transfers\nDESCRIPTION: Provides an example JSON response when retrieving a list of transfers, including the total count, pagination URLs, and an array of transfer objects with details such as transfer type, date, amount, and transaction info. Useful for understanding the data structure returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"count\": 1,\\n  \"next\": null,\\n  \"previous\": null,\\n  \"results\": [\\n    {\\n      \"type\": \"ETHER_TRANSFER\",\\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\\n      \"blockNumber\": 6369595,\\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\\n      \"value\": \"10000000000\",\\n      \"tokenId\": null,\\n      \"tokenAddress\": null,\\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\\n      \"tokenInfo\": null,\\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Bash - Get Multisig Confirmations via API (cURL command)\nDESCRIPTION: Sample cURL command to fetch confirmation signatures for a multisignature transaction, including required headers and endpoint URL with transaction hash parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Delegates Filtered by Delegate Address (TypeScript)\nDESCRIPTION: Retrieves the list of delegates associated with a specific delegate address. This is achieved by setting the `delegateAddress` parameter in the configuration object for `getSafeDelegates`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafedelegates.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst delegates = await apiKit.getSafeDelegates({\n  delegateAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Delegate API Endpoint and Sample Request\nDESCRIPTION: Provides the DELETE endpoint for removing all delegates associated with a specific delegate address. Supports signer authorization via signature. Dependencies include Ethereum address validation and API response codes indicating success or errors. Sample cURL demonstrates deletion request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-sepolia.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Operation via API using curl\nDESCRIPTION: This Bash snippet demonstrates how to use the curl command-line tool to make a GET request to the Safe Transaction Service API to fetch a specific Safe Operation. It requires the `safe_operation_hash` as a path parameter and sets standard Accept and Content-Type headers for JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction via API – Bash\nDESCRIPTION: Demonstrates how to add a new confirmation (signature) to a pending multisig transaction by sending a POST request to the API. The transaction hash must be set in the endpoint URL, and an EOA signature is required. Accept and content-type headers must be set to application/json, and an empty JSON object is sent as the request body. Delegates are not supported for this confirmation endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Drain account\nDESCRIPTION: Sends all ether and ERC-20 tokens from the Safe to the specified address. This command is dangerous and should be used with extreme caution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndrain <address>\n```\n\n----------------------------------------\n\nTITLE: Defining the Data Payload in Module Transaction\nDESCRIPTION: Example showing how to set the 'data' parameter when calling execTransactionFromModule. The 'data' parameter contains the encoded function call data to be executed at the destination address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/execTransactionFromModule.mdx#_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransactionFromModule(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Confirmation to a Multisig Transaction via API (Bash)\nDESCRIPTION: Shows how to add a new confirmation to a pending multisig transaction using a `curl` command with the POST method on the `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` endpoint. The request body must contain the signature details (represented as an empty JSON object `{}` in this simplified example).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-worldchain.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Querying Safe Transaction Service Token Lists with Bash\nDESCRIPTION: This snippet demonstrates how to use cURL to send a GET request to the /api/v1/tokens/lists/ endpoint of the Safe Transaction Service. It retrieves a paginated list of supported tokens, with optional query parameters for 'limit' (number of results per page) and 'offset' (initial index). Dependencies: cURL must be installed; the API is public and does not require authentication. The expected output is a JSON object with 'count', 'next', 'previous', and a list of token entries, each containing 'url' and 'description'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Sample response for list of confirmations (JSON format)\nDESCRIPTION: This sample JSON response demonstrates the structure returned when fetching confirmations, including pagination info ('count', 'next', 'previous') and an array of confirmation objects with fields such as 'created', 'modified', 'owner', 'signature', and 'signatureType'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operations Using cURL Bash\nDESCRIPTION: This snippet shows how to call the 'List Safe Operations' API endpoint via a cURL GET request. It sets appropriate HTTP headers to accept JSON and targets a Safe operations URL with a specific Safe address. Dependencies include a Unix-like shell environment with cURL installed. The request returns a paginated list of SafeOperations for the given Safe account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Importing UseSignerAddressReturnType from Safe React Hooks (TypeScript)\nDESCRIPTION: This snippet imports the UseSignerAddressReturnType type from @safe-global/safe-react-hooks. This type is used to type the value returned by functions like getSignerAddress. No direct functional code is demonstrated; its usage ensures type safety in TypeScript applications relying on Safe React Hooks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsigneraddress.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseSignerAddressReturnType } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Requesting Specific Token Information from Safe Transaction Service (bash)\nDESCRIPTION: This cURL command executes a GET request to the /api/v1/tokens/{address}/ endpoint, replacing {address} with the desired ERC20 token's contract address, to obtain detailed information about a specific token. It's recommended to use a valid Ethereum address. Required dependencies: curl, network access to the API. The returned object includes type, address, name, symbol, decimals, logoUri, and trusted fields. Outputs a single token's metadata as JSON. Invalid Ethereum addresses return an error.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Message Details via GET /api/v1/messages/{message_hash}/\nDESCRIPTION: Fetches detailed information about a specific message by its hash, including creation timestamp, message content, signatures, and confirmations. This aids in message validation and audit trail analysis.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/messages/0x3b3b57b3/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Owners in safeOptions for createSafeClient (TypeScript)\nDESCRIPTION: Shows the `safeOptions.owners` parameter within the `createSafeClient` configuration. This optional array of strings (`string[]`) is used when creating a new Safe to define its initial owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/constructor.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeOptions: {\n    owners: ['0x...', '0x...', '0x...'], // highlight-line\n    threshold: 2,\n    saltNonce: 123n\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Web3Auth Libraries in TypeScript\nDESCRIPTION: Required imports for using Web3Auth authentication in a TypeScript project, including base configurations, Ethereum provider, and modal interface.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/web3auth.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CHAIN_NAMESPACES, WEB3AUTH_NETWORK } from '@web3auth/base'\nimport { EthereumPrivateKeyProvider } from '@web3auth/ethereum-provider'\nimport { Web3Auth } from '@web3auth/modal'\n```\n\n----------------------------------------\n\nTITLE: Usage of 'gasToken' Parameter - TypeScript\nDESCRIPTION: This code snippet demonstrates the use of the optional `gasToken` parameter, which specifies the token address to be used for gas payment, using the `options` object. Requires a configured Safe instance with the `createTransaction` method and other optional parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction(\n  '0x...',\n  options: {\n    gasToken: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Message API Endpoint\nDESCRIPTION: JSON response structure from the GET /api/v1/messages/{message_hash}/ endpoint showing message details including creation date, safe address, message hash, message content, signatures and confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Safe Module is Enabled in Solidity\nDESCRIPTION: Demonstrates calling the `isModuleEnabled` function on a Safe contract instance (`ISafe`) within another contract (`Example`). This function takes a module address as input and returns a boolean indicating whether the module is enabled for that Safe. The example includes the necessary `ISafe` interface definition.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/isModuleEnabled.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function isModuleEnabled(address module) external view returns (bool);\n}\n\ncontract Example {\n    function example() /* ... */ {\n        (ISafe safe).isModuleEnabled(0x...);\n    }\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).isModuleEnabled(\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Operations Using cURL Bash Command\nDESCRIPTION: This snippet shows how to use the cURL command-line tool to perform a GET request to the Safe Transaction Service API to fetch the list of UserOperations for a given Safe address. It includes headers to accept and send JSON content. Dependencies include cURL installed in the command environment. Inputs consist of the Safe account's address as a path parameter, while output is JSON data representing the paged UserOperations results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Sample API Call for Token Details\nDESCRIPTION: Example curl command to fetch detailed information about a specific token by its address, illustrating expected JSON response with token properties such as name, symbol, decimals, and logo URI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Module Transaction via cURL (bash)\nDESCRIPTION: Provides a command-line example using `curl` to retrieve details for a specific module transaction from the Safe Transaction Service API. It demonstrates making a GET request to the `/api/v1/module-transaction/{module_transaction_id}` endpoint, specifying the required `Accept` and `content-type` headers. The `module_transaction_id` is passed as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for fetching multisig transactions\nDESCRIPTION: This JSON illustrates the structure of the response received after a successful API call. It includes metadata such as total count, pagination links, and an array of transaction objects, each containing detailed fields like safe address, recipient, amount, transaction hash, signer signatures, and confirmation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Listing Safe Operations (JSON)\nDESCRIPTION: Illustrates the JSON structure returned by the `/api/v1/safes/{address}/safe-operations/` endpoint upon success (HTTP 200). The response includes pagination details (`count`, `next`, `previous`) and a `results` array containing `SafeOperationWithUserOperationResponse` objects, each detailing a specific Safe Operation and its associated User Operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding the API endpoint and response schema for listing Safe module transactions\nDESCRIPTION: This snippet documents the GET API route '/api/v1/safes/{address}/module-transactions/' which retrieves a paginated list of module transactions associated with a Safe address. It details request parameters, response structure, and possible error responses. Dependencies include the API server and correct authorization and parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/zkevm/-v1-safes-{address}-module-transactions--get.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Delegate via DELETE request (TypeScript & curl)\nDESCRIPTION: Specifies the API route for removing delegate/delegator pairs associated with a specific delegate address. The request requires the delegate address as a path parameter and can be signed by either the owner (delegator) or the delegate itself. Successful deletion returns no content.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/blast/-v2-delegates-{delegate_address}--delete.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-blast.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n\n```\n\n----------------------------------------\n\nTITLE: Safe Transaction Init Code\nDESCRIPTION: This is the init code used for creating a Safe transaction. It represents the smart contract bytecode that initializes the Safe proxy contract, setting up the initial owners, threshold, and other parameters. It is a hexadecimal string representing the compiled code of the Safe contract.  The initCode includes all the logic and configuration needed for the Safe to function correctly.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_56\n\nLANGUAGE: text\nCODE:\n```\n0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Updating SafeFactory Creation for Singleton Terminology (JS)\nDESCRIPTION: Illustrates the change in terminology from `isL1SafeMasterCopy` to `isL1SafeSingleton` when creating a SafeFactory instance in v2. This is purely a naming convention update for clarity.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v2.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// old:\nSafeFactory.create({ ethAdapter, isL1SafeMasterCopy: true })\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// new:\nSafeFactory.create({ ethAdapter, isL1SafeSingleton: true })\n```\n\n----------------------------------------\n\nTITLE: Sign message\nDESCRIPTION: Signs a string message (EIP-191) or an EIP-712 message loaded from a file. The message is provided either via standard input or through the path to a file containing the EIP-712 message.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsign_message [--eip191_message <str>] [--eip712_path <file-path>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported Token List using cURL (Bash)\nDESCRIPTION: Sends a GET request using cURL to the `/api/v1/tokens/lists/` endpoint of the Safe Transaction Service API (specifically the xlayer instance) to retrieve a paginated list of supported tokens. Accepts optional `limit` and `offset` query parameters. Requires 'Accept' and 'content-type' headers set to 'application/json'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_83\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample API Request to Create a Safe Operation\nDESCRIPTION: This code snippet demonstrates how to send a POST request to create a new SafeOperation for a specified Safe account. It includes the API endpoint, headers, and request body, which is empty in this example. The response is expected to be empty, indicating successful creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Adding a Safe Delegate with Safe API Kit in TypeScript\nDESCRIPTION: This snippet demonstrates importing the required types and the initialized apiKit instance, constructing the AddSafeDelegateProps configuration object (which includes safeAddress, delegateAddress, delegatorAddress, label, and signer), and calling the addSafeDelegate method asynchronously. Dependencies include the @safe-global/api-kit library and a valid apiKit instance. The expected input is an object matching the AddSafeDelegateProps interface, and the output is a Promise resolving to a SafeDelegateResponse.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addsafedelegate.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AddSafeDelegateProps } from '@safe-global/api-kit'\nimport { apiKit } from './setup.ts'\n\nconst config: AddSafeDelegateProps = {\n  safeAddress: '0x...', // Optional\n  delegateAddress: '0x...',\n  delegatorAddress: '0x...',\n  label: 'abc',\n  signer\n}\n\nconst config = await apiKit.addSafeDelegate(config)\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Status Using Safe Transaction Service API in TypeScript and Bash\nDESCRIPTION: This snippet demonstrates how to retrieve detailed information about a specific Safe account by its address via an HTTP GET request to the Safe Transaction Service API. Key parameters include the Safe address as a path parameter. It returns JSON containing Safe metadata such as owners, threshold, nonce, version, modules, and handlers. Dependencies include an HTTP client capable of sending GET requests and TypeScript for example code structure. The snippet also includes a sample curl command illustrating usage and a JSON example showing the expected response format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/arbitrum/-v1-safes-{address}--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction Details with Safe Transaction Service API Using Bash\nDESCRIPTION: This snippet demonstrates how to fetch details of a multisignature transaction given its Safe transaction hash identifier. It uses a GET request on the /api/v1/multisig-transactions/{safe_tx_hash}/ endpoint to retrieve extensive information including nonce, execution status, gas usage, proposer details, and confirmation data. It requires curl for HTTP requests and access to the Safe Transaction service. The input parameter is a string safe_tx_hash representing the transaction hash, and the API returns a detailed JSON describing multisig transaction metadata, execution, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pending Safe Message from Transaction Service in TypeScript, Python, and Curl\nDESCRIPTION: This snippet retrieves the current state of a Safe message pending multiple signatures. TypeScript initializes the protocol kit with Owner B's credentials to obtain the Safe message hash and fetches message details via the API. Python uses TransactionServiceApi to fetch the message by hash. The Curl snippet sends a GET request to the Transaction Service REST API for the message resource.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/messages.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the Protocol Kit with Owner B\nconst protocolKitOwnerB = await Safe.init({\n  provider: config.RPC_URL,\n  signer: config.OWNER_B_PRIVATE_KEY,\n  safeAddress: config.SAFE_ADDRESS\n})\n\n// Get the Safe message hash\nconst safeMessageHash = await protocolKitOwnerB.getSafeMessageHash(\n  hashSafeMessage(rawMessage)\n)\n\n// Get the Safe message\nconst safeServiceMessage = await apiKit.getMessage(safeMessageHash)\n```\n\nLANGUAGE: python\nCODE:\n```\nsafe_message_from_tx_service = transaction_service_api.get_message(\n    safe_message_hash)\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n'https://safe-transaction-sepolia.safe.global/api/v1/messages/0xcf2e6b1e26e6930e14bebf120ffffffffffffffffffffb484a787137201ab0df/' \\\n-H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Fetch All Transactions (cURL)\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the /api/v1/safes/{address}/all-transactions/ endpoint.  It retrieves all transactions associated with a specified Safe address. It specifies the request method, the API endpoint, and the necessary headers for content negotiation. The user needs to replace the placeholder address with a valid Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with Protocol Kit TypeScript\nDESCRIPTION: This code demonstrates how to sign a message using the Safe Protocol Kit in TypeScript. It imports the necessary types and functions, creates a message (either string or EIP712 formatted), and calls signMessage with options for selecting the signing method and specifying the preimage safe address, as required by certain Safe account versions. Dependencies include '@safe-global/protocol-kit' and '@safe-global/types-kit', and the function returns a Promise containing the signed Safe message.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/signmessage.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SigningMethod } from '@safe-global/protocol-kit'\nimport { EIP712TypedData } from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst rawMessage: string | EIP712TypedData = 'Example message'\nconst message = protocolKit.createMessage(rawMessage)\n\nconst signingMethod = SigningMethod.ETH_SIGN_TYPED_DATA_V4\n\nconst preimageSafeAddress = '0x...'\n\nconst signedMessage = await protocolKit.signMessage(\n  message,\n  signingMethod, // Optional\n  preimageSafeAddress // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Static Props for Arbitrum API Docs Page (Next.js)\nDESCRIPTION: This asynchronous `getStaticProps` function is specific to Next.js and runs at build time to generate static props for the page. It imports the Arbitrum MDX content (`Mdx`), renders it to an HTML string, extracts navigation headings using the `getHeadingsFromHtml` utility based on the Swagger schema and rendered content, and returns these headings within the `ssg` prop object for the page component.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/arbitrum.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from '../../../components/ApiReference'\nimport { renderToString } from 'react-dom/server'\nimport { MDXComponents, getHeadingsFromHtml } from '../../../lib/mdx'\nimport Mdx from '../../../components/ApiReference/generated/arbitrum-reference.mdx'\nimport swagger from '../../../components/ApiReference/schemas/arbitrum-swagger.json'\n\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Delete Delegate\nDESCRIPTION: Confirms that the delegate has been successfully removed when receiving an empty response, with possible error cases for malformed requests or delegate not found.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Decoded Transaction Data in JSON\nDESCRIPTION: Shows the JSON response format when decoding transaction data. The response includes the decoded method name (\"transfer\") and parameters with their names, types, and values for better transaction interpretation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Delegate via Safe Transaction Service (Curl)\nDESCRIPTION: Uses Curl to perform a DELETE request on the /api/v2/delegates/{delegate_address}/ endpoint to remove a delegate from the Safe Transaction Service. Requires path parameter substitution for delegate_address. Includes headers for Accept and content-type. The request body should be an empty JSON object, and response will be empty with 204 status if successful. Appropriate for scripting and automation workflows.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-gnosis-chain.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Fetching Module Transaction Details with Safe Transaction Service API Using Bash\nDESCRIPTION: This snippet demonstrates how to retrieve the details of a transaction executed by a module using a given module transaction ID. It relies on a GET request to the /api/v1/module-transaction/{module_transaction_id} endpoint, which returns comprehensive transaction data including block number, execution date, operation type, and success status. Dependencies include curl for HTTP requests and access to the Safe Transaction service endpoint. The expected input is a string module_transaction_id representing the unique module transaction, and the output is a JSON object containing transaction metadata and decoded call data if available.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Add Delegate - TypeScript\nDESCRIPTION: This snippet adds a delegate to a Safe account using the Safe API Kit in TypeScript. It creates an `AddSafeDelegateProps` object with the delegate address, delegator address, signer, and label, then calls the `addSafeDelegate` method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new ethers.JsonRpcProvider(config.RPC_URL)\n\n      const ownerA = new ethers.Wallet(config.OWNER_A_PRIVATE_KEY, provider)\n      const ownerAAddress = await ownerA.getAddress()\n\n      const ownerB = new ethers.Wallet(config.OWNER_B_PRIVATE_KEY, provider)\n      const ownerBAddress = await ownerB.getAddress()\n\n      const delegateConfig: AddSafeDelegateProps = {\n        delegateAddress: ownerBAddress || '0x',\n        delegatorAddress: ownerAAddress || '0x',\n        signer: ownerA,\n        label: 'Label'\n      }\n\n      // Add Owner B as a delegate of Owner A for all Safes accounts (safeAddress = null)\n      const safeDelegateAddResponse = await apiKit.addSafeDelegate(delegateConfig)\n```\n\n----------------------------------------\n\nTITLE: Listing Safes from a Specific Owner (cURL Bash Command)\nDESCRIPTION: This bash command demonstrates a GET request to retrieve safes owned by a particular address, with appropriate headers set for JSON data exchange. The URL contains a placeholder for the owner address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    \n\n```\n\n----------------------------------------\n\nTITLE: Creating lib/safe.ts File\nDESCRIPTION: This command creates a TypeScript file named `safe.ts` inside the `lib` directory.  This file will contain the core Safe-related functionalities, including deploying a Safe, adding passkey owners, signing messages, and executing transactions using the protocol-kit library.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntouch safe.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Receive Function in Solidity for Safe Contracts\nDESCRIPTION: This Solidity code snippet demonstrates how to implement the `receive` function for a contract, using an interface to interact with `ISafe`.  The `receive` function is declared as `external payable`. The example contract uses `ISafe safe).receive();` inside the `example()` function, demonstrating how to send the native token to the Safe contract. It requires the `ISafe` interface which needs to be imported. The function itself handles incoming Ether.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/fallback/receive.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    receive() external payable;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).receive();\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for All Transactions API\nDESCRIPTION: Provides an example JSON response structure returned by the GET /api/v1/safes/{address}/all-transactions/ endpoint. The response includes pagination details (`count`, `next`, `previous`) and a `results` array containing detailed information about each transaction, such as execution details, confirmations, transfers, and gas information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Fetching a Message\nDESCRIPTION: Provides a detailed JSON response with message metadata, including creation/modification timestamps, owner, associated safe, message hash, message content, proposer, signer confirmation details, and signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using SafeApiKit to Fetch Safe Creation Information\nDESCRIPTION: This snippet shows initializing the SafeApiKit instance with network parameters and calling getSafeCreationInfo with a specific Safe address. It highlights the asynchronous nature of the call and the expected response type, emphasizing the use of Promise<SafeCreationInfoResponse>. Dependencies include the '@safe-global/api-kit' library.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafecreationinfo.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\n\nconst safeCreationInfo = await apiKit.getSafeCreationInfo(safeAddress)\n```\n\n----------------------------------------\n\nTITLE: Retrieve Safe Message by Hash using Transaction Service API (GET)\nDESCRIPTION: Fetches detailed information for a specific message using its hash. This endpoint requires the message hash as a path parameter and returns comprehensive message details including confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v1-messages-{message_hash}--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching all transactions for a Safe - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to retrieve all transactions for a specific Safe address using the Safe Transaction API. It showcases the usage of a GET request to the `/api/v1/safes/{address}/all-transactions/` endpoint. This example is designed for use with the XLayer environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/xlayer/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Get Safes By Owner Safe Transaction Service API Bash\nDESCRIPTION: This `curl` command shows how to fetch a list of Safe accounts owned by a specific address using the Safe Transaction Service API. It makes a GET request to the `/api/v1/owners/{address}/safes/` endpoint, substituting `{address}` with the owner's Ethereum address. The expected response is a JSON object listing the relevant Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transaction via Safe API (Bash)\nDESCRIPTION: Sends a GET request using cURL to retrieve details of a specific multi-signature transaction from the Safe Transaction Service API. The request requires the `safe_tx_hash` as a path parameter and specifies `Accept: application/json` and `content-type: application/json` headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Incoming Transfers via API (Bash/Curl)\nDESCRIPTION: This `curl` command demonstrates how to query the Safe Transaction Service API to list incoming transfers for a given Safe address. It uses the GET method on the `/api/v1/safes/{address}/incoming-transfers/` endpoint and includes necessary headers for `application/json`. The example uses a placeholder address which should be replaced with the actual Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Safe Delegate using TypeScript and cURL\nDESCRIPTION: Describes the API endpoint to delete all delegate-delegator pairs for a given delegate address. The deletion requires a signature similar to the creation endpoint, and the signer can be either the delegator or the delegate. The snippet includes parameter requirements, a TypeScript example comment, a cURL DELETE request with headers and body payload placeholder, and expected HTTP responses such as 204 No Content on success or error statuses for malformed data or not found entities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v2-delegates-{delegate_address}--delete.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-optimism.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Safe Multisig Transaction Response (JSON)\nDESCRIPTION: Displays a sample JSON response object returned by the \"Get Multisig Transaction\" API endpoint. It illustrates the structure and data types of various fields, including transaction details, execution status, gas information, confirmations, and signatures, providing a comprehensive example of the API's output format for multisig transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Operations\nDESCRIPTION: This JSON snippet shows a typical response structure when retrieving a list of Safe Operations. It includes pagination details (count, next, previous) and an array of SafeOperation objects, each containing details like hashes, dates, module address, confirmations, and user operation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0,\n        \"initCode\": null,\n        \"callData\": null,\n        \"callGasLimit\": 0,\n        \"verificationGasLimit\": 0,\n        \"preVerificationGas\": 0,\n        \"maxFeePerGas\": 0,\n        \"maxPriorityFeePerGas\": 0,\n        \"paymaster\": null,\n        \"paymasterData\": null,\n        \"signature\": \"\",\n        \"entryPoint\": \"\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for SafeOperation Retrieval API\nDESCRIPTION: This snippet provides an example JSON response structure from the SafeOperation API endpoint, including metadata like creation time, hash, module address, confirmations, user operation details, and signatures. It illustrates the expected data format and key fields within the response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Transaction Confirmations - Safe Global API (JSON)\nDESCRIPTION: This is a representative JSON response returned from the Safe Global Confirmations GET endpoint. It includes total result count, pagination links, and an array of confirmation objects, each containing timestamps, the owner's address, signature data, and signature type. Consumers of this API can parse the response to extract confirmation metadata, with 'results' being the primary data of interest. Field constraints include required ISO datetime strings, a valid Ethereum owner address, and signature types such as 'CONTRACT_SIGNATURE'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Delegates with DELETE - TypeScript\nDESCRIPTION: Removes a delegate using a DELETE request to the `/api/v2/delegates/{delegate_address}/` endpoint. This example utilizes TypeScript and can be found in `examples/scroll/-v2-delegates-{delegate_address}--delete.ts`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/scroll/-v2-delegates-{delegate_address}--delete.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Module Transactions - json\nDESCRIPTION: Provides a sample JSON response from the API when listing module transactions for a given Safe address. The response includes a paginated structure with transaction metadata such as creation date, execution date, block number, success status, transaction hash, safe and module addresses, value, and decoded data. Returned data types and required fields adhere to the endpoint's OpenAPI specification. Useful for understanding output structure and for frontend or backend data modeling.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Signing a Message (curl)\nDESCRIPTION: Adds a signature to a message using its hash via a POST request to the /api/v1/messages/{message_hash}/signatures/ endpoint. Requires the message_hash path parameter. Expects a 201 Created status with an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Get Specific Transfer via GET Request in JSON\nDESCRIPTION: This snippet shows how to retrieve detailed information about a specific token transfer by transfer ID using a GET request. It includes the request URL, headers, and example response containing transfer details such as type, date, involved addresses, and token info. Dependencies include the specific transfer ID and API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing the Safe Protocol Kit in TypeScript\nDESCRIPTION: This snippet illustrates the initialization of the Safe protocol kit library by importing Safe from '@safe-global/protocol-kit' and invoking its init method with key parameters like provider, signer, and the Safe contract address. This setup is necessary before invoking any transaction-creating methods on protocolKit, including createDisableGuardTx. It relies on valid Ethereum provider and signer instances.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createdisableguardtx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'  \n\nexport const protocolKit = Safe.init({  \n  provider,  \n  signer,  \n  safeAddress: '0x...'  \n})\n```\n\n----------------------------------------\n\nTITLE: Creating & Executing Safe Transaction (Protocol Kit, TypeScript)\nDESCRIPTION: Shows how to use the Safe Protocol Kit to manage transactions for a deployed Safe account. It demonstrates creating a transaction data object, signing it using the initialized safeSdk instance, and executing the signed transaction on the blockchain if the required number of signatures (threshold) is met.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx-full.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Creating and executing a transaction\nconst safeTransactionData = {\n  to: '0x...',\n  value: ethers.utils.parseEther('0.1').toString(),\n  data: '0x'\n}\n\nconst safeTransaction = await safeSdk.createTransaction({ safeTransactionData })\nconst signedSafeTransaction = await safeSdk.signTransaction(safeTransaction)\n\n// If we have the threshold of signatures\nconst txHash = await safeSdk.executeTransaction(signedSafeTransaction)\n```\n\n----------------------------------------\n\nTITLE: Querying UserOperations for a Safe Account using cURL\nDESCRIPTION: This snippet demonstrates how to make a GET request to the Safe Transaction service API to retrieve UserOperations for a specific Safe account address. It includes necessary headers for accepting and sending JSON data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Selecting the Operation Type for Module Transaction\nDESCRIPTION: Example showing how to set the 'operation' parameter when calling execTransactionFromModule. The parameter determines whether to use a regular Call (0) or DelegateCall (1) for the transaction execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/execTransactionFromModule.mdx#_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransactionFromModule(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call\n);\n```\n\n----------------------------------------\n\nTITLE: Providing Signatures (`signatures`) for `execTransaction` Authorization\nDESCRIPTION: Highlights the `signatures` parameter (index 11) within the `execTransaction` function call. This `bytes` parameter contains the concatenated signature data from Safe owners required to authorize the transaction. It supports various formats like packed ECDSA signatures, EIP-1271 contract signatures, or pre-approved hashes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    0x...,\n    \"0x...\" // signatures\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving the list of confirmations for a multisig transaction (GET endpoint)\nDESCRIPTION: This snippet describes the GET API endpoint to fetch a paginated list of confirmations associated with a specific multisig transaction, identified by 'safe_operation_hash'. It requires the hash in the URL path and supports optional query parameters for pagination ('limit' and 'offset'). The response provides confirmation details including timestamps, owner, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for UserOperation in TypeScript\nDESCRIPTION: This TypeScript snippet estimates the gas limits for a user operation by calling `estimateUserOperationGas` and `getUserOperationGasPrice` methods from the bundler API.  It retrieves the necessary gas limits (callGasLimit, verificationGasLimit, and preVerificationGas) and the maximum gas price (maxFeePerGas and maxPriorityFeePerGas) and adds them to the `sponsoredUserOperation`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst gasEstimate = await bundlerClient.estimateUserOperationGas({\n    userOperation: sponsoredUserOperation,\n    entryPoint: ENTRYPOINT_ADDRESS_V06\n  })\n  const maxGasPriceResult = await bundlerClient.getUserOperationGasPrice()\n\n  sponsoredUserOperation.callGasLimit = gasEstimate.callGasLimit\n  sponsoredUserOperation.verificationGasLimit = gasEstimate.verificationGasLimit\n  sponsoredUserOperation.preVerificationGas = gasEstimate.preVerificationGas\n  sponsoredUserOperation.maxFeePerGas = maxGasPriceResult.fast.maxFeePerGas\n  sponsoredUserOperation.maxPriorityFeePerGas = maxGasPriceResult.fast.maxPriorityFeePerGas\n```\n\n----------------------------------------\n\nTITLE: Formatted Prepared Signature for Safe Transaction in JSON\nDESCRIPTION: This snippet shows a JSON object containing a hexadecimal-encoded prepared signature for a Safe transaction. The signature contains various encoded parameters including addresses, values, and metadata such as origin information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get details of a specific transfer via GET /api/v1/transfer/{transfer_id}\nDESCRIPTION: This endpoint retrieves detailed information about a specific token transfer using its transfer ID. The response details include transfer type, date, block number, transaction hash, sender, recipient, value, token info, and transfer ID. Supporting error responses include invalid transfer ID and not found status. Sample cURL command is provided for testing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Client with createSafeClient in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Safe client instance using the 'createSafeClient' function from '@safe-global/sdk-starter-kit', providing necessary parameters such as provider, signer, and Safe address. It sets up the client for subsequent ownership checks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/isowner.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Get Static Props for XLayer API Reference\nDESCRIPTION: This function `getStaticProps` is used for static site generation (SSG) in Next.js. It renders the MDX content to a string using `renderToString`, extracts headings using `getHeadingsFromHtml` based on the provided Swagger schema and rendered HTML, and then returns these headings as props for the page.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/xlayer.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Transfer API - Sample Response JSON\nDESCRIPTION: This JSON object shows a sample response from the Safe Transaction Service API when requesting a single transfer by its ID. It contains detailed information about the specific transfer, including its type (e.g., `ETHER_TRANSFER`), execution date, block number, transaction hash, recipient, value, token information (if available), and the unique `transferId`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Delegates (JSON)\nDESCRIPTION: Provides an example JSON response for a successful List Delegates request. The response includes pagination fields (count, next, previous) and an array of delegate objects, each with safe, delegate, delegator, and label fields. The list may optionally include expiryDate. Input parameters are derived from the API request, and null values can occur for next and previous if at pagination boundaries.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Passing tokenAddress Parameter to apiKit.getToken in TypeScript\nDESCRIPTION: Highlights how the `tokenAddress` parameter is passed to the `apiKit.getToken` method. The function expects a single argument: a string containing the address of the ERC-20 token whose information is to be retrieved. This example focuses specifically on the function call signature and the `tokenAddress` input.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettoken.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await apiKit.getToken(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Support to the Project (Bash)\nDESCRIPTION: Installs TypeScript (`typescript`) and ts-node (`ts-node`) as development dependencies and initializes a `tsconfig.json` file using `npx tsc --init` for TypeScript configuration. Assumes an existing npm project set up in the previous step.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev typescript ts-node\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Querying User Operations for a Safe via curl (bash)\nDESCRIPTION: Sends a GET request using curl to the Safe Transaction Service API endpoint `/api/v1/safes/{address}/user-operations/` to retrieve the list of UserOperations for the specified Safe address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). The request specifies that the response should be in JSON format via the `Accept` header and sets the `content-type` header, although typically not needed for GET requests.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Querying Safe Balances\nDESCRIPTION: This snippet provides a curl command to get the balances of a specific Safe address.  The request is made to the Safe Transaction Service API. The endpoint retrieves balances for ether and ERC20 tokens held by the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating lib/passkeys.ts File\nDESCRIPTION: This command creates a TypeScript file named `passkeys.ts` inside the `lib` directory. This file is intended to contain the functions for creating and retrieving passkeys using the react-native-passkeys library, enabling secure user authentication.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch passkeys.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Safe SDKs in TypeScript and Python\nDESCRIPTION: This snippet shows the commands to install required dependencies for interacting with Safe's APIs using the Safe{Core} SDK in TypeScript and the safe-eth-py Python library. Dependencies include API kits, protocol kits, and Ethereum client libraries necessary for managing Safe messages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/messages.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/api-kit @safe-global/protocol-kit @safe-global/types-kit\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install safe-eth-py web3 hexbytes\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Get Safe Status - JSON\nDESCRIPTION: Illustrates the expected JSON structure returned by the Safe Transaction Service API when querying the status of a Safe account. It includes key details like address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Safe Creation Status - TypeScript Example\nDESCRIPTION: This code block indicates a TypeScript example file path. It is not a code snippet itself but provides context for potential code implementation related to retrieving Safe creation status.  The referenced file is located in the examples directory.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/scroll/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Confirming Transaction (JSON)\nDESCRIPTION: Presents an example JSON response received after successfully adding a confirmation to a multisig transaction via the API. The response typically includes the submitted signature. A successful confirmation usually results in a 201 Created HTTP status code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Safe Delegate with Transaction Service API (TypeScript)\nDESCRIPTION: This TypeScript placeholder references the implementation for sending a DELETE request to /api/v2/delegates/{delegate_address}/ to remove a delegate association from the Safe Transaction Service API. Dependencies include HTTP libraries and tools for EIP712 signature creation, as the signature must be provided by either the delegator or delegate. Expected input is delegate_address as a path parameter and the body (which may be empty). No content is returned on success, with HTTP 204 response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v2-delegates-{delegate_address}--delete.ts\n```\n\n----------------------------------------\n\nTITLE: List Contracts API Endpoint\nDESCRIPTION: Defines the API endpoint to retrieve a paginated list of known smart contracts, including ordering, limit, and offset query parameters. Dependencies include API endpoint URL and response schema with contract details such as address, name, ABI, and delegate call trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/contracts/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n\n```\n\n----------------------------------------\n\nTITLE: EIP712 Data Hash for Delegate Signature\nDESCRIPTION: This python code block defines the EIP712 data structure required to generate a signature for creating or deleting a delegate. It outlines the types, primaryType, domain, and message fields that need to be included in the data hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Collectibles with cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to retrieve a list of collectibles associated with a specific Safe account. It sends a GET request to the collectibles endpoint, including the necessary headers for the request. The response contains details on the collectibles, which are ERC721 tokens.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Adding a Confirmation to a Safe Operation using Bash\nDESCRIPTION: Sends a POST request using cURL to add a confirmation signature for a specific safe operation. Requires the `safe_operation_hash` as a path parameter and the signature data in the request body (represented as '{}' in the example, but should contain actual signature data). This endpoint does not support delegate signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Importing Dynamic SDK Components in TypeScript\nDESCRIPTION: Essential imports from the Dynamic SDK libraries including context providers, hooks, and Ethereum wallet connectors required for Dynamic signer integration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/dynamic.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  DynamicContextProvider,\n  useDynamicContext,\n  useIsLoggedIn\n} from '@dynamic-labs/sdk-react-core'\nimport {\n  EthereumWalletConnectors,\n  isEthereumWallet\n} from '@dynamic-labs/ethereum'\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Operations with API Endpoint '/api/v1/safes/{address}/safe-operations/' (GET)\nDESCRIPTION: This snippet describes the GET request to fetch a paginated list of Safe operations for a specific address. It highlights the URL structure, headers, and a sample cURL command providing a practical example of interacting with the API. The endpoint supports filtering, sorting, and pagination via query parameters, returning a JSON response with total counts, next/previous page links, and results array.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \n    -H \"Accept: application/json\" \n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Confirmations\nDESCRIPTION: Sample API response containing the count of confirmations, pagination links, and an array of confirmation objects with owner, submission date, signature, and signature type. Demonstrates the structure of a typical response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Messages for a Safe Account via API (Bash/TypeScript/JSON)\nDESCRIPTION: Retrieves a paginated list of messages associated with a specific Safe account address using a GET request to `/api/v1/safes/{address}/messages/`. Requires the Safe `address` as a path parameter. Optional query parameters `ordering`, `limit`, and `offset` can be used for sorting and pagination. Returns a JSON object containing the count, next/previous page URLs, and an array of message objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/arbitrum/-v1-safes-{address}-messages--get.ts\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with Explicit Signing Method in TypeScript\nDESCRIPTION: Shows how to call signMessage from Protocol Kit while specifying both the message and an explicit signing method, enabling support for multiple signature schemes. Returns a Promise with the signed SafeMessage.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/signmessage.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst signedMessage = await protocolKit.signMessage(\n  '0x...',\n  SigningMethod.ETH_SIGN_TYPED_DATA_V4\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Safe Transfer using Safe Transaction Service API (Bash)\nDESCRIPTION: This snippet illustrates how to use `curl` to fetch a specific token transfer from the Safe Transaction Service API by its unique `transfer_id`. It shows the structure of the GET request with the transfer ID included as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetch SafeOperation by Hash via REST API\nDESCRIPTION: Provides a sample curl command to perform an HTTP GET request to retrieve a specific SafeOperation using its hash. The request targets the '/api/v1/safe-operations/{safe_operation_hash}/' endpoint and includes headers to accept JSON responses. The example demonstrates how client applications can programmatically access SafeOperation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Transactions Parameter: to\nDESCRIPTION: Example showing how to define `to` parameter inside `transactions` array which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Unified Transaction Result Type\nDESCRIPTION: This snippet indicates the consolidation of transaction result types from specific library results (EthersTransactionResult, Web3TransactionResult) into a single TransactionResult type, simplifying result handling.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v4.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// EthersTransactionResult and Web3TransactionResult are replaced with TransactionResult\n```\n\n----------------------------------------\n\nTITLE: Focusing on isOwner Parameter in Solidity\nDESCRIPTION: Highlights the `owner` address parameter being passed to the `isOwner` function call within a Solidity contract. The example shows the syntax `(ISafe safe).isOwner(...)` and emphasizes the placeholder address `0x...` which needs to be replaced with the actual address to check for ownership within the specified Safe instance (`safe`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/isOwner.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).isOwner(\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queued Multisig Transaction via API (Bash)\nDESCRIPTION: Demonstrates how to delete a queued multisig transaction using a `curl` command targeting the `/api/v1/multisig-transactions/{safe_tx_hash}/` endpoint with the DELETE method. Requires the `safe_tx_hash` of the transaction to be deleted and appropriate authorization (signed EIP-712 data, not shown in curl). The request includes standard JSON headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-worldchain.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Displaying Solidity Code Snippet for approveHash Function Usage\nDESCRIPTION: This snippet renders a code block illustrating how to call the approveHash method on a smart contract instance within a Solidity interface and implementation, embedded inside a tabbed UI component for documentation. It demonstrates the expected syntax and usage context.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/signatures/approveHash.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function approveHash(bytes32 hashToApprove) external;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).approveHash(\"0x...\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Status with curl\nDESCRIPTION: This code snippet demonstrates how to retrieve detailed information about a Safe account using a `curl` command. It sends a GET request to the `/api/v1/safes/{address}/` endpoint, specifying the Safe address. The request includes headers to accept JSON responses and specifies the content type as application/json.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing User Operations\nDESCRIPTION: This JSON snippet illustrates the structure and content of the response returned by the API when listing UserOperations. It contains pagination details (`count`, `next`, `previous`) and a list of `results`, where each item is a detailed UserOperation with associated SafeOperation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ],\n        \"preparedSignature\": \"0x00000000000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Multisig Transaction - JSON\nDESCRIPTION: Provides an example of the JSON response structure and data returned by the Safe Transaction Service API when successfully retrieving a multi-signature transaction. It includes numerous fields detailing the transaction parameters, execution status, submission dates, block information, hashes, proposer, executor, confirmation status, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample User Operation Response\nDESCRIPTION: This JSON snippet represents a sample response from the Safe Transaction Service API when querying for a specific user operation. It showcases all the fields within a UserOperationWithSafeOperationResponse object, including transaction hashes, sender addresses, gas limits, signatures, and details about the Safe operation associated with it.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n  \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n  \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n  \"nonce\": 0,\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n  \"safeOperation\": {\n    \"created\": \"2024-07-22T10:00:18.892702Z\",\n    \"modified\": \"2024-07-22T10:00:18.892702Z\",\n    \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n    \"validAfter\": null,\n    \"validUntil\": null,\n    \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n    \"confirmations\": [\n      {\n        \"created\": \"2024-07-22T10:00:18.898708Z\",\n        \"modified\": \"2024-07-22T10:00:18.898708Z\",\n        \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n        \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n        \"signatureType\": \"CONTRACT_SIGNATURE\"\n      }\n    ],\n    \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Safe4337InitOptions Type Definition in TypeScript\nDESCRIPTION: Defines the TypeScript types and interfaces for the options object passed to Safe4337Pack.init(). It specifies required properties like provider (Eip1193Provider or transport strings), optional signer credentials, bundler URL, safe modules version, custom contract addresses, and nested options for existing or predicted Safe accounts. Also includes nested paymaster options supporting sponsored transactions. These types enforce the shape and requirements of initialization parameters ensuring correct usage and integration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nSafe4337InitOptions = {\n  provider: Eip1193Provider | HttpTransport | SocketTransport\n  signer?: HexAddress | PrivateKey | PasskeyArgType\n  bundlerUrl: string\n  safeModulesVersion?: string\n  customContracts?: {\n    entryPointAddress?: string\n    safe4337ModuleAddress?: string\n    addModulesLibAddress?: string\n  }\n  options: ExistingSafeOptions | PredictedSafeOptions\n  paymasterOptions?: PaymasterOptions\n}\n\nHexAddress = string\nPrivateKey = string\nHttpTransport = string\nSocketTransport = string\n\nEip1193Provider = {\n  request: (args: RequestArguments) => Promise<unknown>\n}\n\nRequestArguments = {\n  method: string\n  params?: readonly unknown[] | object\n}\n\nExistingSafeOptions = {\n  safeAddress: string\n}\n\nPredictedSafeOptions = {\n  owners: string[]\n  threshold: number\n  safeVersion?: SafeVersion\n  saltNonce?: string\n}\n\nPaymasterOptions = {\n  paymasterUrl?: string\n  isSponsored?: boolean\n  sponsorshipPolicyId?: string\n  paymasterAddress: string\n  paymasterTokenAddress?: string\n  amountToApprove?: bigint\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling an ERC-7579 Executor Module in TypeScript\nDESCRIPTION: Asynchronous function `uninstallModule` demonstrates how to remove an ERC-7579 'executor' module from a smart account. It utilizes `smartAccountClient.uninstallModule`, encoding the `prevEntry` (using the sentinel address 0x1 for the first/only module) and empty `deInitData` (specific to `OwnableExecutor`) via `encodeAbiParameters`. The function then waits for the transaction receipt using `pimlicoClient.waitForUserOperationReceipt` before updating the UI state. Requires initialized `smartAccountClient` and `pimlicoClient` instances, the module address `ownableExecutorModule`, and state setters (`setLoading`, `setModuleIsUninstalled`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst uninstallModule = async () => {\n  setLoading(true)\n  console.log('Uninstalling module...')\n\n  // To uninstall the module, use the `uninstallModule`.\n  // You have to pack the abi parameter yourself:\n  // - previousEntry (address): The address of the previous entry in the module sentinel list.\n  // - deInitData (bytes): The data that is passed to the deInit function of the module.\n  // As this is the only module, the previous entry is the sentinel address 0x1. The deInitData is empty for the\n  // OwnableExecutor.\n  const userOp = await smartAccountClient?.uninstallModule({\n    type: 'executor',\n    address: ownableExecutorModule,\n    context: encodeAbiParameters(\n      parseAbiParameters('address prevEntry, bytes memory deInitData'),\n      ['0x0000000000000000000000000000000000000001', '0x']\n    )\n  })\n\n  console.log('User operation:', userOp, '\\nwaiting for tx receipt...')\n\n  // We wait for the transaction to be settled:\n  const receipt = await pimlicoClient.waitForUserOperationReceipt({\n    hash: userOp as `0x${string}`\n  })\n\n  console.log('Module uninstalled, tx receipt:', receipt)\n  setModuleIsUninstalled(true)\n  setLoading(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Delegate with a DELETE Request using cURL\nDESCRIPTION: This snippet demonstrates how to delete a Safe delegate using a DELETE request to the `/api/v2/delegates/{delegate_address}/` endpoint.  The `delegate_address` must be included in the path. The request requires appropriate authentication, similar to creating a delegate. Dependencies: curl\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-mainnet.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Listing Token Transfers Using Safe Transaction Service API - Bash\nDESCRIPTION: This snippet demonstrates a CURL command that performs a GET request to the Safe Transaction Service API endpoint to retrieve a list of token transfers related to a specified Safe address. The command includes headers to accept and send JSON data. It requires the Safe address as a path parameter and optionally supports various query parameters to filter results by block numbers, execution dates, token address, transaction hash, and transfer values. The response provides paginated transfer information including transfer metadata and associated token details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Messages using Curl\nDESCRIPTION: Makes a GET request to retrieve a list of messages for a specific Safe account. The endpoint accepts parameters for ordering, pagination limits, and offsets.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for Supported Tokens List\nDESCRIPTION: This example displays the structure of the response when listing supported tokens, showing total count, pagination links, and an array of token objects with properties such as type, address, name, symbol, decimals, logo URI, and whether the token is trusted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"count\": 1846,\\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\\n  \"previous\": null,\\n  \"results\": [\\n    {\\n      \"type\": \"ERC20\",\\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\\n      \"name\": \"0x5555.com\",\\n      \"symbol\": \"0x5555.com\",\\n      \"decimals\": 18,\\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\\n      \"trusted\": false\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiate Pimlico API v1 Client Using HTTP Transport\nDESCRIPTION: Creates a Pimlico API v1 client with a custom API URL that includes an API key. This client is extended with bundle actions specific to the EntryPoint address, enabling interaction with the Pimlico bundler and account management APIs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst PIMLICO_API_V1 = `https://api.pimlico.io/v1/gnosis/rpc?add_balance_override&apikey=${PIMLICO_API_KEY}`\n\nconst bundlerClient = createClient({\n  transport: http(PIMLICO_API_V1),\n  chain: gnosis\n}).extend(bundlerActions(ENTRYPOINT_ADDRESS_V06)).extend(pimlicoBundlerActions(ENTRYPOINT_ADDRESS_V06))\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Operations API Request Example with cURL - Bash\nDESCRIPTION: Demonstrates how to make a GET request to the Safe Operations API endpoint using cURL in a bash shell. This example retrieves SafeOperations for a specific Safe address, specifying JSON accept and content types headers. It is intended for users needing to fetch and filter SafeOperations data programmatically or via command line tools.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Balances\nDESCRIPTION: Provides an example JSON array response from the Get Safe Balances API endpoint. Each object in the array represents a balance: native coins (like ETH) have `tokenAddress` set to null, while ERC20 tokens include `tokenAddress` and a `token` object with details (name, symbol, decimals, logoUri). The `balance` field shows the amount.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit in TypeScript\nDESCRIPTION: Shows the setup process for the Safe API Kit (`@safe-global/api-kit`). It involves importing the library and creating a new `SafeApiKit` instance, configured with the desired `chainId` (e.g., `1n` for Mainnet). This `apiKit` instance is then used for subsequent API calls like `getSafesByOwner`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafesbyowner.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request for Fetching User Operations\nDESCRIPTION: This snippet demonstrates how to perform a GET request using cURL to retrieve the list of user operations for a specific Safe address. It sets the appropriate headers for JSON content and targets the API endpoint with a sample address parameter. This example helps developers understand how to initiate requests programmatically.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SafeApiKit for Mainnet in TypeScript\nDESCRIPTION: Shows the setup process for `SafeApiKit`. It imports the library and creates a new instance named `apiKit`, configured specifically for the Ethereum Mainnet using `chainId: 1n`. This `apiKit` instance is typically exported to be used for API interactions, such as calling `getToken`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettoken.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Safe Transfers\nDESCRIPTION: Example JSON response for a successful (HTTP 200) request to list transfers for a Safe. The response includes pagination details (`count`, `next`, `previous`) and a `results` array containing objects, each representing a transfer with details like `type`, `executionDate`, `blockNumber`, `transactionHash`, `to`, `from`, `value`, `tokenId`, `tokenAddress`, `transferId`, and optionally `tokenInfo`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Safe Transaction List Example TypeScript\nDESCRIPTION: This snippet is a comment that references an external TypeScript file containing an example of how to list multisig transactions for a Safe using a transaction service. The actual code implementation for this operation resides in the specified file path.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Setting Up the On-Chain Message Client\nDESCRIPTION: This code shows how to set up the onchainMessageClient by creating a safeClient and extending it with onChainMessages functionality. This setup is required before sending on-chain messages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient, onChainMessages } from '@safe-global/sdk-starter-kit'\n\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nexport const onchainMessageClient = safeClient.extend(onChainMessages())\n```\n\n----------------------------------------\n\nTITLE: Signing and Executing a Safe Message for the Order in TypeScript\nDESCRIPTION: Handles the process of hashing, encoding, and creating a message signing transaction via Safe SDK to authorize the order on-chain before execution, ensuring the order is valid and approved.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/monerium.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst txData = signMessageContract.encode('signMessage', [\n  hashSafeMessage(orderMessage)\n])\n\nconst safeTransactionData = {\n  to: await signMessageContract.getAddress(),\n  value: '0',\n  data: txData,\n  operation: OperationType.DelegateCall\n}\n\nconst signMessageTx = await protocolKit.createTransaction({\n  transactions: [safeTransactionData]\n})\nconst signedTx = await protocolKit.signTransaction(signMessageTx)\n\nconst transactionResult = await protocolKitOfOwner2.executeTransaction(signedTx)\n\nconsole.log('transactionResult', transactionResult)\n\n```\n\n----------------------------------------\n\nTITLE: Fetch User Operations for Safe with cURL (Bash)\nDESCRIPTION: This snippet demonstrates how to use the cURL command-line tool to make a GET request to the Safe Transaction Service API to retrieve the list of User Operations for a specific Safe address. It includes necessary headers for accepting and sending JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Status via API\nDESCRIPTION: This snippet demonstrates how to retrieve detailed information about a specific Safe account using its address.  The request is made to the `/api/v1/safes/{address}/` endpoint.  The response includes details like address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Migrating a Safe to Layer 2\nDESCRIPTION: Transitions a non-L2 Safe to an L2 environment using the specified migration contract address. The Safe's nonce must be zero, and only supported versions can be migrated.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nupdate_version_to_l2 <address>\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction Creation Response (JSON)\nDESCRIPTION: This is a sample JSON response from the Safe Transaction API's multisig transaction creation endpoint. It returns the 'safeTxGas' value, representing the gas required for execution. This field is crucial for preparing subsequent transactions. Expected responses are in application/json format. \nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safe Balances (Deprecated)\nDESCRIPTION: This JSON snippet represents a sample response from the deprecated `/api/v1/safes/{address}/balances/` endpoint, showing the balances of a Safe account. It includes the balance of the native coin (e.g., Sepolia ETH) and the balances of ERC20 tokens, along with their token addresses and metadata (name, symbol, decimals, logo URI).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for Collectibles List\nDESCRIPTION: This response example shows the structure of data returned when listing collectibles from the API, including total count, pagination cursors, and an array of collectible items with details such as address, token name, symbol, logo URI, and metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"count\": 1,\\n  \"next\": null,\\n  \"previous\": null,\\n  \"results\": [\\n    {\\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\\n      \"tokenName\": \"SampleNft\",\\n      \"tokenSymbol\": \"SN\",\\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\\n      \"id\": \"1\",\\n      \"uri\": null,\\n      \"name\": null,\\n      \"description\": null,\\n      \"imageUri\": null,\\n      \"metadata\": {}\\n    }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Example Safe Status Response\nDESCRIPTION: This JSON snippet shows the expected structure of the response when querying Safe Status.  It includes the Safe's address, nonce, threshold, owners, masterCopy, modules, fallbackHandler, guard, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Structure for Safe Transaction Deletion Request in Python\nDESCRIPTION: Defines the EIP-712 typed data structure required for signing a request to delete a queued Safe multisig transaction. It includes the necessary domain separator fields (name, version, chainId, verifyingContract) and the message structure containing the `safeTxHash` and a time-based one-time password (`totp`). The `totp` is calculated as `floor(unix_timestamp / 3600)`. An EOA must sign this structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for User Operations API\nDESCRIPTION: Example response from the Safe User Operations API showing a paginated list containing a single user operation with detailed transaction data and associated safe operation information including confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ],\n\n```\n\n----------------------------------------\n\nTITLE: Get Decoded Data API Request (POST /api/v1/data-decoder/)\nDESCRIPTION: Example cURL command to decode transaction data using the API. This POST request submits transaction data and expects a structured response with decoded method and parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Transactions with Custom Configuration using TypeScript\nDESCRIPTION: This snippet demonstrates how to provide a custom config object (SafeConfig) to the getTransactions method, enabling customization of hook behavior. The config is imported from a separate local module and then passed as a parameter to getTransactions. This allows overriding the nearest SafeProvider's config. Required: a config object conforming to SafeConfig, typically constructed with @safe-global/safe-react-hooks’ createConfig.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/gettransactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = getTransactions({\n  config\n})\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for Safe creation status\nDESCRIPTION: A sample JSON object illustrating the response details for a Safe creation request, including creation timestamp, creator address, transaction hash, factory address, optional master copy, setup data, and the decoded setup data parameters. This data provides comprehensive information about the Safe deployment event.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-06-25T11:18:48Z\",\n  \"creator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"transactionHash\": \"0x6404e0298423c092cc1ce486f3f72172a1c0f2f28a9b29f69e605ea825360ac5\",\n  \"factoryAddress\": \"0xC22834581EbC852y7d974F8a1c97E1bEA4EF910BC\",\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"setupData\": \"0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000017062a1de2fe6b99be3d9d37841fed19f5738040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d3debaab2b8093e69109f23a75501f864f74e20000000000000000000000003a16e3090e32dded2250e862b9d5610bef13e93d0000000000000000000000000000000000000000000000000000000000000000\",\n  \"dataDecoded\": {\n    \"method\": \"setup\",\n    \"parameters\": [\n      {\n        \"name\": \"_owners\",\n        \"type\": \"address[]\",\n        \"value\": [\n          \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"0x3A16E3090e32DDeD2250E862B9d5610BEF13E93D\"\n        ]\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"value\": \"0x\"\n      },\n      {\n        \"name\": \"fallbackHandler\",\n        \"type\": \"address\",\n        \"value\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"payment\",\n        \"type\": \"uint256\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"paymentReceiver\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      }\n    ]\n  },\n  \"userOperation\": null\n}\n```\n\n----------------------------------------\n\nTITLE: EIP-4337 User Operation Data Structure for Safe Wallet\nDESCRIPTION: This code snippet shows the complete data structure of a User Operation (UserOp) for a Safe wallet implementing EIP-4337 account abstraction. It includes encoded initialization code, transaction call data, gas parameters, paymaster information, and required signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_47\n\nLANGUAGE: solidity\nCODE:\n```\n{\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching confirmations for multisig transactions using Safe Transaction API with bash\nDESCRIPTION: Performs a GET request to retrieve a paginated list of confirmations for a specified multisig transaction identified by the safe_operation_hash path parameter. Supports optional pagination query parameters: limit and offset, to control the number of results and starting index respectively. The response includes the total count, pagination links (next and previous), and an array of confirmation objects containing metadata such as creation time, owner, and signature details. Dependencies include access to the Safe Transaction API endpoint and usage of appropriate headers to accept JSON content. Expected input is the safe operation hash as a path parameter, and output is a JSON object with confirmation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Deleting a Queued Multisig Transaction (Bash)\nDESCRIPTION: This snippet demonstrates how to delete a queued multisig transaction using a DELETE request. It sends a request to the specified Safe Transaction Service endpoint, including the safe transaction hash in the URL. The request headers specify the acceptance of JSON and the content type as JSON. An empty JSON object is sent as the request body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-avalanche.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Empty JSON Response\nDESCRIPTION: This represents the expected empty JSON response from the API when successfully creating a new Safe Operation.  The absence of content indicates that the operation has been queued successfully.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Listing Transaction Confirmations - Safe Transaction Service API - Bash\nDESCRIPTION: Performs an HTTP GET request to retrieve the list of confirmations associated with a specific Safe multisig transaction, identified by its transaction hash in the URL path. Supports optional query parameters `limit` and `offset` for pagination. Returns a JSON object containing the list of confirmations and pagination details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying a Single Transfer by TransferId Using cURL - Bash\nDESCRIPTION: This Bash snippet uses cURL to fetch a single token transfer's details from the Safe Transaction Service API by specifying a transfer ID as a path parameter. Required HTTP headers are set for JSON response. The output fetches all transfer fields, and the response format mirrors that of the list endpoint for a single object. Replace the transfer_id in the URL path with a valid transfer identifier. No authentication or advanced parameters are shown in this example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using Custom Configuration with useSendTransaction Hook in TypeScript\nDESCRIPTION: This snippet shows how to import a predefined Safe configuration object and pass it as a parameter to the useSendTransaction hook to customize its behavior, overriding the default configuration obtained from the nearest SafeProvider. This allows more granular control on which Safe and blockchain context is used for sending transactions. The example is dependent on the existence of a config object created using createConfig as shown in the subsequent snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesendtransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = useSendTransaction({\n  config\n})\n```\n\n----------------------------------------\n\nTITLE: EthSafeTransaction Class Definition\nDESCRIPTION: This TypeScript code defines the `EthSafeTransaction` class, implementing the `SafeTransaction` interface. It includes properties for the transaction data (`data`) and a map to store owner-signature pairs (`signatures`). It serves as the data structure for representing Safe transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass EthSafeTransaction implements SafeTransaction {\n    data: SafeTransactionData\n    signatures: Map<string, SafeSignature> = new Map()\n    ...\n    // Other properties and methods\n  }\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract API Endpoint\nDESCRIPTION: Defines the API endpoint to retrieve detailed information about a specific smart contract by its address. Dependencies include the contract address parameter and a response schema with contract properties such as address, name, ABI, and trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Context with React Hooks\nDESCRIPTION: Using Dynamic's React hooks to access the authenticated wallet and login status which are needed to create a Safe signer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/dynamic.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { primaryWallet } = useDynamicContext()\nconst isLoggedIn = useIsLoggedIn()\n```\n\n----------------------------------------\n\nTITLE: Import Required Dependencies from Permissionless and VIEM Packages\nDESCRIPTION: Imports all necessary functions and classes from 'permissionless' and 'viem' packages, including clients, accounts, encoding utilities, and chain definitions. These are prerequisites for blockchain interactions, account management, and transaction encoding in the script.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { bundlerActions, getAccountNonce } from 'permissionless'\nimport {\n  pimlicoBundlerActions,\n  pimlicoPaymasterActions\n} from 'permissionless/actions/pimlico'\nimport {\n  Address,\n  Client,\n  Hash,\n  Hex,\n  PrivateKeyAccount,\n  createClient,\n  createPublicClient,\n  encodeFunctionData,\n  http\n} from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { gnosis } from 'viem/chains'\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Operations using curl (Bash)\nDESCRIPTION: Demonstrates how to make a GET request using curl to the Safe Transaction Service API endpoint `/api/v1/safes/{address}/safe-operations/` to retrieve a list of SafeOperations for a specific Safe address. The example includes necessary headers (`Accept: application/json`, `content-type: application/json`). Replace `{address}` with the actual Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Deleting Delegate API Request (DELETE)\nDESCRIPTION: This snippet shows a DELETE request for removing a delegate. It utilizes `curl` and targets the endpoint `/api/v2/delegates/{delegate_address}/`. Includes the `Accept` and `content-type` headers for JSON. A dummy payload is included via `-d '{}'`, to satisfy the request format requirements. The address is required to identify the delegate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-aurora.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Creating a SafeClient Instance - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to initialize a `SafeClient` using the `createSafeClient` function from the `@safe-global/sdk-starter-kit` package. The `createSafeClient` function takes an object with parameters like `provider`, `signer`, and `safeAddress` to configure the Safe client. The returned `safeClient` can then be extended with additional functionalities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transactions Analytics by Origin via Safe Transaction Service API - Bash\nDESCRIPTION: Illustrates performing a GET request to the /api/v2/analytics/multisig-transactions/by-origin/ endpoint to fetch analytics data of multisig transactions aggregated by their origin. This endpoint does not require any query parameters. The response has no response body as specified. Usage requires network connectivity to the Safe Transaction API and an HTTP client such as curl.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Message Listing\nDESCRIPTION: JSON response structure returned when listing messages for a Safe account. It includes message details, confirmation statuses, signatures, and metadata such as creation time and proposer address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Specific Token Info - `curl` Bash\nDESCRIPTION: This snippet provides a `curl` command example for fetching detailed information about a specific token by its address. It targets the `/api/v1/tokens/{address}/` endpoint using a GET request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using getSignerAddress with Custom Config in Safe React (TypeScript)\nDESCRIPTION: This snippet demonstrates calling getSignerAddress with a configuration object. It imports the config object from a local module and passes it as a parameter. Ensure config follows the SafeConfig type and is properly created; this allows overriding the default SafeProvider configuration when fetching the signer address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsigneraddress.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = getSignerAddress({\n  config\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Viem Provider and Signer with Privy\nDESCRIPTION: This snippet demonstrates initializing a viem provider and retrieving the signer using the user's Privy wallet. It utilizes the `useEffects` hook to perform this initialization when the user is authenticated and the wallet is ready. It creates a `WalletClient` with a custom transport from the Privy Ethereum provider.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/privy.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { sepolia } from 'viem/chains'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  const init = async () => {\n    if (ready && authenticated && readyWallets && wallets.length > 0 ) {\n      const ethereumProvider = await wallets[0].getEthereumProvider()\n\n      const provider = createWalletClient({\n        chain: sepolia,\n        transport: custom(ethereumProvider)\n      })\n\n      const signer = wallets[0].address\n    }\n  }\n  init()\n}, [ready, authenticated, readyWallets, wallets])\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens in Safe Transaction Service\nDESCRIPTION: Provides an API endpoint to retrieve a paginated list of tokens supported by the Safe Transaction Service, filtered by optional parameters like name, address, symbol, decimal values, and search terms. Returns metadata including token type, address, name, symbol, decimals, logo URI, and trust status. Useful for identifying tokens compatible with the Safe environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction Response Structure in JSON\nDESCRIPTION: Example response from the multisig transaction endpoint showing transaction details including safe address, transaction parameters, signatures, confirmations required, and transaction status information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Account Information with Curl\nDESCRIPTION: Makes a GET request to the Safe Transaction Service API to retrieve detailed information about a specific Safe account, including its address, nonce, threshold, owners, and configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Safe Contracts to Custom Chain - Bash\nDESCRIPTION: This command runs the deployment script targeting a custom chain configuration. It relies on previous .env customization, and the 'deploy-all' NPM script must be available. Input is the literal string 'custom' as target. Output is deploying the contract suite to the custom network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-contracts-deployment.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run deploy-all custom\n```\n\n----------------------------------------\n\nTITLE: Retrieve Multisignature Transactions Analytics by Origin via GET /api/v2/analytics/multisig-transactions/by-origin/\nDESCRIPTION: This code snippet details the GET endpoint for fetching analytics on multisignature transactions grouped by origin. It does not require request parameters and expects a simple JSON response indicating no response body. The sample CURL command illustrates how to call this endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n \n```\n\n----------------------------------------\n\nTITLE: Response Schema for Gas Estimation\nDESCRIPTION: This JSON schema shows the sample response from the gas estimation endpoint, indicating the predicted `safeTxGas` value necessary for executing a transaction with the specified Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Define EIP-712 Delete Request Data - Python\nDESCRIPTION: Defines the EIP-712 structure used for signing a request to delete a queued Safe multisig transaction. It includes domain details like chain ID and verifying contract, and message details like the transaction hash and a time-based one-time password (TOTP). The TOTP is calculated based on Unix epoch time divided by 3600.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"}\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"}\n        ]\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction (Bash)\nDESCRIPTION: This snippet details the process of confirming a multisig transaction using a POST request. The request is sent to the Safe Transaction Service endpoint, and it specifies the safe transaction hash in the URL. The request includes headers for accepting JSON and setting the content type to JSON. An empty JSON object is used as the request body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-avalanche.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Analyzing Verified Transaction Data (Hexadecimal String)\nDESCRIPTION: This code snippet contains a hexadecimal string representing a pre-verified blockchain transaction or call data. It's part of a larger transaction setup process, likely used for executing complex contract interactions or fund transfers. The data is intended for decoding and signing before broadcast to the network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_59\n\nLANGUAGE: none\nCODE:\n```\n0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Delegates (curl)\nDESCRIPTION: Makes a GET request to the Safe Transaction Service API to retrieve a paginated list of Safe delegates. The request requires standard Accept and content-type headers. Parameters like safe, delegate, delegator, label, limit, and offset can be used to filter results (though not shown in this basic curl example).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Recreating Safe via Safe Creator - Bash\nDESCRIPTION: This Bash command line snippet demonstrates how to use the `safe-creator` tool to recreate an existing Safe (versions 1.3.0 or 1.1.1) on a target network with the same address. It requires various parameters, including the Safe's owners, contract addresses (singleton, fallback handler, proxy factory), threshold, salt nonce, the target network's RPC URL, and the private key of the account used for deployment. Successful execution deploys the Safe contract on the target chain with the specified configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-guides/recovery-safe-deployment.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsafe-creator --owners <owners-addresses> --safe-contract <singleton-address>\n--callback-handler <fallback-handler-address> --proxy-factory <proxy-factory-address>\n--threshold <threshold-value> --salt-nonce <salt-nonce-value> <url-rpc-node>  <deployer-private-key>\n```\n\n----------------------------------------\n\nTITLE: Listing Messages using GET request\nDESCRIPTION: This endpoint retrieves a list of messages associated with a given Safe account. It uses a GET request to the specified endpoint, requiring the Safe address as a path parameter. It supports pagination through `limit` and `offset` query parameters, and ordering through `ordering` query parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_12\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Encode Message Data - Solidity\nDESCRIPTION: This Solidity function `encodeMessageDataForSafe` encodes a message for a Safe Smart Account. It takes a Safe contract instance and a message as input, computes the Safe message hash according to EIP-712, and packs the domain separator and message hash into a byte array.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n    /**\n     * @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\n     * @param safe Safe to which the message is targeted.\n     * @param message Message that should be encoded.\n     * @return Encoded message.\n     */\n    function encodeMessageDataForSafe(\n        Safe safe,\n        bytes memory message\n    ) public view returns (bytes memory) {\n        bytes32 safeMessageHash = keccak256(\n            abi.encode(SAFE_MSG_TYPEHASH, keccak256(message))\n        );\n        return\n            abi.encodePacked(\n                bytes1(0x19),\n                bytes1(0x01),\n                safe.domainSeparator(),\n                safeMessageHash\n            );\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieve Token Lists with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve a list of tokens supported by the Safe Transaction Service using a cURL request. It specifies the Accept and Content-Type headers for JSON communication.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Operation Retrieval\nDESCRIPTION: This JSON snippet represents a sample successful response from the Safe transaction service API when querying for a SafeOperation by its hash. It includes timestamps, operation hash, module address, confirmation details, prepared signature, and nested user operation data with Ethereum transaction hash and operational parameters. This helps developers understand the expected output schema and facilitates integration with Safe transaction services.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using useUpdateOwners Hook with Custom Config in TypeScript\nDESCRIPTION: Illustrates calling useUpdateOwners with a custom config object instead of relying on the nearest SafeProvider. The config is imported from a separate module where it is created with createConfig specifying chain, provider, signer, and safeAddress. This enables explicit hook configuration for specific Safe connections.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = useUpdateOwners({\n  config\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Listing Incoming Transfers\nDESCRIPTION: This snippet provides a cURL command to perform a GET request to the incoming transfers API endpoint for a specific Safe address. It includes proper headers for accepting and sending JSON content, demonstrating how to invoke the API for retrieving transfer data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\n  -H \"Accept: application/json\" \\n  -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: CURL Request for Deleting a Delegate in Safe Transaction Service\nDESCRIPTION: Example CURL command to delete a delegate with a specific address from the Safe Transaction Service API on the zkEVM network. This requires a signature from either the delegator or delegate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-zkevm.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: List Supported Tokens with cURL\nDESCRIPTION: Retrieves a list of tokens supported by the Safe Transaction Service using a cURL request. This example uses the `GET` method on the `/api/v1/tokens/` endpoint. The request includes headers to specify the expected response format as JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Safe Operation\nDESCRIPTION: This is an example of the JSON object returned by the API when successfully retrieving a Safe Operation. It contains details about the operation, including creation/modification dates, hash, module address, confirmations, prepared signature, and the associated User Operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Safe Balances with Curl\nDESCRIPTION: This snippet shows how to retrieve the balances of a Safe using a curl command. It performs a GET request to the `/api/v2/safes/{address}/balances/` endpoint. It accepts `application/json` and specifies the same content type. The response provides a list of balances for Ether and ERC20 tokens held by the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_70\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Rendering Styled Grid Layout and Horizontal Rule in React JSX\nDESCRIPTION: This snippet shows a partial React JSX component fragment using Material-UI-like Grid components to structure layout on the page. The Hr element is styled inline with explicitly set marginTop and marginBottom properties. This snippet requires React and an appropriate UI component library supporting Grid and Hr components. The snippet is focused on visual layout control rather than data processing, adjusting vertical spacing between content areas.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Grid>\n  </Grid>\n</Grid>\n<Hr style={{ \n  marginTop: '112px',\n  marginBottom: '112px'\n}} />\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Operation with REST API - Bash\nDESCRIPTION: This Bash snippet demonstrates how to retrieve a SafeOperation by its operation hash using the Safe Transaction Service API with curl. The example shows how to build the GET request, set the appropriate HTTP headers for content-type and accept, and assemble the correct endpoint path by including the Safe operation hash as a parameter. It requires curl and expects the API endpoint to be accessible; the primary input is the operation hash in the URL, and output is a JSON payload representing the Safe operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Syntax for calling Safe `setGuard` with parameter\nDESCRIPTION: This snippet shows the direct syntax for calling the `setGuard` function on an `ISafe` instance, focusing on the required `guard` parameter. The `guard` parameter expects an address, which can be a specific guard contract address or `address(0)` to disable the guard.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/guards/setGuard.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).setGuard(\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: cURL command to fetch Safe module transactions\nDESCRIPTION: This cURL command performs a GET request to the API endpoint for retrieving module transactions associated with a specific Safe address, including necessary headers for JSON content types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Installing Safe SDK Dependencies using pnpm\nDESCRIPTION: Installs the necessary npm packages (`@safe-global/api-kit`, `@safe-global/protocol-kit`, `@safe-global/types-kit`) required for interacting with Safe contracts and the Safe Transaction Service. This is a prerequisite for using the SDKs in your project. Requires pnpm to be installed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npnpm add @safe-global/api-kit \\\n  @safe-global/protocol-kit \\\n  @safe-global/types-kit\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Safe Status (JSON)\nDESCRIPTION: Provides an example JSON response for the Safe status API, including properties like address, nonce, threshold, owners, masterCopy, modules, fallbackHandler, guard, and version. This response helps developers understand the data structure returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_58\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Delegate Deletion\nDESCRIPTION: Confirms deletion with HTTP status 204 and an empty response body, indicating successful removal of the delegate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Querying Collectibles from Safe Transaction Service (bash)\nDESCRIPTION: This cURL command sends a GET request to the /api/v2/safes/{address}/collectibles/ endpoint to retrieve paginated ERC721 collectibles for a specific Safe account. Required dependencies: curl utility and network access to the Safe Transaction Service (replace the address parameter as needed). The API supports additional query parameters such as trusted, exclude_spam, limit, and offset to refine results. Returned data includes collectible information such as address, token name, description, image URL, and related metadata. Output is a JSON response with paginated results, maximum page size 10.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Example Request - cURL\nDESCRIPTION: This code demonstrates how to make a GET request to the API endpoint using cURL. It includes the URL, headers for content negotiation and formatting. The main functionality involves making a GET request and passing in the Safe address.  The output is a JSON response containing details on module transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Instantiate Safe Protocol and Gelato Relay Kits (1Balance)\nDESCRIPTION: Initialize instances of the Safe Protocol Kit and the Gelato Relay Pack. The Protocol Kit is configured with the RPC provider, owner signer, and Safe address. The Gelato Relay Pack requires the Gelato API key for 1Balance transactions and is linked to the initialized Protocol Kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.init({\n    provider: RPC_URL,\n    signer: OWNER_PRIVATE_KEY,\n    safeAddress\n})\n\nconst relayKit = new GelatoRelayPack({\n    apiKey: process.env.GELATO_RELAY_API_KEY!,\n    protocolKit\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe ProtocolKit Instance (TypeScript)\nDESCRIPTION: This snippet shows how to initialize the Safe ProtocolKit library using the static `init` method. It requires providing a Web3 provider, a signer (representing the account performing actions), and the address of the Safe account to interact with.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/getmodules.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Delegate via POST /api/v2/delegates/\nDESCRIPTION: Creates a new Safe delegate with an associated label. The process involves signing an EIP712 structured data message, incorporating chain ID, delegate address, and TOTP, to generate a signature. Dependencies include HTTP POST request, JSON schema for request body, and signature generation using TOTP with specified parameters. Expected response is 202 Accepted or 400 Malformed data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-arbitrum.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for specific transfer details\nDESCRIPTION: Provides an example JSON response showing detailed information for a specific transfer, including transfer type, date, involved addresses, amount, and transaction hash. It helps users understand the data fields returned when querying a particular transfer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"type\": \"ETHER_TRANSFER\",\\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\\n  \"blockNumber\": 6369595,\\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\\n  \"value\": \"10000000000\",\\n  \"tokenId\": null,\\n  \"tokenAddress\": null,\\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\\n  \"tokenInfo\": null,\\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Token Information via REST API\nDESCRIPTION: Retrieves detailed information about a specific token by its address supported in the Safe Transaction Service. Returns token type, address, name, symbol, decimals, logo URI, and trust status. The endpoint requires the token address in the URL path. Handles responses for successful data fetch and invalid address errors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/tokens/{address}/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Importing Protocol Kit and viem Components (TypeScript)\nDESCRIPTION: This snippet imports essential classes, types, and functions from the installed libraries. It includes types for Safe configuration (`PredictedSafeProps`, `SafeAccountConfig`, `SafeDeploymentConfig`), the main `Safe` class from `@safe-global/protocol-kit`, a utility for waiting on transaction receipts (`waitForTransactionReceipt`) from `viem`, and chain definitions (`gnosisChiado`, `sepolia`) from `viem/chains`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe, {\n  PredictedSafeProps,\n  SafeAccountConfig,\n  SafeDeploymentConfig\n} from '@safe-global/protocol-kit'\nimport { waitForTransactionReceipt } from 'viem/actions'\nimport { gnosisChiado, sepolia } from 'viem/chains'\n```\n\n----------------------------------------\n\nTITLE: Extracting Provider and Signer from Dynamic Wallet\nDESCRIPTION: Using useEffect to extract the provider and signer once the user is logged in and has a connected Ethereum wallet, which can then be used with Safe{Core} SDK.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/dynamic.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  const init = async () => {\n    if (isLoggedIn && primaryWallet && isEthereumWallet(primaryWallet)) {\n      const provider = await primaryWallet.getWalletClient()\n\n      const signer = primaryWallet.address\n    }\n  }\n  init()\n}, [isLoggedIn, primaryWallet])\n```\n\n----------------------------------------\n\nTITLE: Signing a Message via Safe Transactions API - TypeScript and Bash\nDESCRIPTION: This snippet demonstrates how to add a signature to a message using its message hash through a POST request to the Safe Transactions API. The primary parameter is the 'message_hash' path parameter which identifies the message. The snippet shows a curl command to POST an empty JSON body to the /messages/{message_hash}/signatures/ endpoint. The operation expects a 201 Created status code on success and returns an empty response body. This snippet requires a valid message hash and appropriate API authentication if applicable.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-messages-{message_hash}-signatures--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-linea.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Contract - cURL Request\nDESCRIPTION: This cURL command sends a GET request to the /api/v1/contracts/{address}/ endpoint. It retrieves the details of a specific contract given its address.  It uses headers for content negotiation. The response contains information about the requested contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Estimating Multisig Transaction Gas\nDESCRIPTION: Presents a sample JSON response from the gas estimation API endpoint (`/api/v1/safes/{address}/multisig-transactions/estimations/`). The response contains the estimated `safeTxGas` value required for executing the proposed transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Token Information via Safe Transaction Service API - bash\nDESCRIPTION: Retrieves detailed information for a specific token identified by its address within the Safe Transaction Service. Requires the token's Ethereum address as a path parameter. Returns properties such as type, address, name, symbol, decimals, logo URI, and trusted status. Handles validation errors if the address input is invalid. Network access to the API service is required. Input is a token address string; output is a JSON object describing that token’s metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Multisig Transactions API\nDESCRIPTION: Provides a sample JSON output illustrating the structure of the data returned by the multisig transactions API. It includes metadata such as count, pagination links, and an array of transaction results with extensive details like safe address, transaction value, execution dates, gas info, confirmations with signatures, and execution status. This response aids in understanding the detailed transaction schema and expected output fields.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Get Confirmations - cURL\nDESCRIPTION: This cURL command retrieves the list of confirmations for a specific multisig transaction.  It uses the GET method and specifies the transaction hash in the URL path.  The request includes headers for specifying the accepted content type (application/json). The output is a JSON response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Delete Transaction Success Response - Safe Transaction Service API - JSON\nDESCRIPTION: Represents the sample response received from the Safe Transaction Service API upon successful deletion of a queued multisig transaction. A successful DELETE request typically returns a 204 status code, indicating 'No Content', hence the empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Transfer with cURL - Get Transfer by ID\nDESCRIPTION: This cURL request retrieves details of a specific token transfer using its transfer ID. The endpoint returns complete information about the transfer including transaction details and token information if available.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: EIP712 Data Structure for Safe Delegate Signatures (Python)\nDESCRIPTION: Provides the structure of the EIP712 typed data required for signing delegate creation and deletion requests. The message includes the delegate address and a TOTP value derived from the current time.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Module Transaction Data with curl in Bash\nDESCRIPTION: This code demonstrates how to make a GET request to retrieve details about a module transaction using the Safe Transaction Service API on the Polygon network with a specific module transaction ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Create a SafeOperation via Safe Transaction API (bash)\nDESCRIPTION: This code snippet demonstrates how to use 'curl' in a Bash shell to send a POST request to the Safe Transaction API for creating a new SafeOperation for a specified Safe account. The request includes the required HTTP headers for content type and acceptance of JSON, and submits an empty JSON object in the request body. The key parameter is 'address', which must be replaced in the endpoint path with the desired Safe account address. The expected result is a confirmation or creation response with HTTP status 201, and the call does not require any authentication or special setup beyond internet access.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Creating a New Safe Delegate with EIP712 Signature in TypeScript and curl\nDESCRIPTION: Defines a REST API POST endpoint for adding a new delegate to a Safe with a custom label. If a delegate with the same address but different label or signer exists, it updates label or delegator accordingly. Signature generation requires signing EIP712-structured data including delegateAddress and a TOTP value computed by dividing Unix UTC time by 3600. The endpoint expects JSON input and returns an empty response with HTTP 202 on success or 400 for malformed data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v2-delegates--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-linea.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Listing Messages for a Safe Account - TypeScript and cURL\nDESCRIPTION: This snippet illustrates how to list all messages associated with a specific Safe account by issuing a GET request to /safes/{address}/messages/. The address is a required path parameter representing the Safe account address, with optional query parameters for ordering, pagination (limit and offset). The response is a paginated JSON object containing metadata (count, next, previous) and an array of message objects with detailed properties, including creation timestamps, message hash, content, proposer's address, confirmations, and signatures. It includes a TypeScript example file and a cURL command example for the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-safes-{address}-messages--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Safe Module Transactions Response Format\nDESCRIPTION: Example JSON response from the module transactions API endpoint. The response includes a paginated list of module transactions with details such as execution date, block number, transaction hash, and operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Confirmations (Bash)\nDESCRIPTION: This bash command shows how to retrieve a list of confirmations for a given multi-signature transaction using the GET method on the Safe Transaction Service API. It specifies the transaction hash in the URL and includes headers for JSON content. No request body is required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Render SupportedNetworks component\nDESCRIPTION: This JSX code snippet renders the `SupportedNetworks` component. The component is expected to handle the logic for displaying the supported networks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-supported-networks.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<SupportedNetworks />\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Widget to React Application\nDESCRIPTION: Implementing the DynamicWidget component that provides the login and authentication UI for users to connect their wallets.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/dynamic.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DynamicWidget } from '@dynamic-labs/sdk-react-core'\n\nconst App = () => {\n  return (\n    <>\n      // Your other content here\n      <DynamicWidget />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Listing token transfers for a Safe address via GET /api/v1/safes/{address}/transfers/\nDESCRIPTION: This API endpoint returns a paginated list of token transfers for a specified Safe address. It accepts multiple query parameters for filtering by block number, date, token address, transaction hash, value, and token type (ERC20, ERC721, Ether). The validation schema, response structure, and sample cURL request demonstrate how to retrieve transfers with optional filters and handle responses, including metadata like count, next, and previous pages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sending Signed Message to Safe Transaction Service API Using TypeScript and Python\nDESCRIPTION: Shows how to transmit the signed message to the Safe Transaction Service for storage and further processing. The TypeScript code initializes the API kit with chainId and calls addMessage with the message and signature. Python similarly uses TransactionServiceApi to post the message with the owner's signature. The Curl step is skipped as the message was already created there.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/messages.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the API Kit\nconst apiKit = new SafeApiKit({\n  chainId: 11155111n\n})\n\nconst messageProps: AddMessageOptions = {\n  message: rawMessage,\n  signature: signedMessageOwnerA.encodedSignatures()\n}\n\n// Send the message to the Transaction Service with the signature from Owner A\napiKit.addMessage(config.SAFE_ADDRESS, messageProps)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Instantiate the Transaction Service API\ntransaction_service_api = TransactionServiceApi(\n    network=EthereumNetwork.SEPOLIA,\n    ethereum_client=ethereum_client)\n\n# Send the message to the Transaction Service with the signature from Owner A\ntransaction_service_api.post_message(\n    config.get(\"SAFE_ADDRESS\"),\n    raw_message,\n    owner_a_signature.signature)\n```\n\n----------------------------------------\n\nTITLE: Importing Safe React Hooks and Chains in TypeScript\nDESCRIPTION: Imports essential hooks and chain data from the Safe React Hooks library for managing Safe accounts and transactions in a React app. Dependencies include multiple hooks for transaction handling and chain data for network configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/react-hooks/guides/send-transactions.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  SafeProvider,\n  createConfig,\n  useSafe,\n  useSendTransaction,\n  SendTransactionVariables,\n  useConfirmTransaction,\n  ConfirmTransactionVariables\n} from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Module Transactions via API using curl\nDESCRIPTION: Demonstrates how to use `curl` to send a GET request to the Safe Transaction Service API endpoint `/api/v1/safes/{address}/module-transactions/` to retrieve a list of module transactions for a specific Safe address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` on Celo). The request specifies JSON as the accepted response format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Delegate via API\nDESCRIPTION: Adds a new Safe delegate with a specified label. The process involves generating an EIP712 signature, signing with TOTP, and sending a POST request. Successful responses return status 202, indicating acceptance; malformed data results in a 400 error.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Token Information using cURL\nDESCRIPTION: This Bash snippet illustrates how to retrieve detailed information for a specific token supported by the Safe Transaction Service. It uses a GET request to the `/api/v1/tokens/{address}/` endpoint, where `{address}` is the target token's contract address. The response contains a JSON object with the token's details like name, symbol, decimals, and logo URI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operations using cURL - Bash\nDESCRIPTION: Demonstrates how to make an HTTP GET request to the Safe Transaction Service API to list Safe Operations for a specific Safe address using the `curl` command-line tool. It specifies the Safe address in the path and includes standard HTTP headers for accepting and sending JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'data' parameter in Solidity\nDESCRIPTION: Demonstrates usage of the getTransactionHash function focusing on the 'data' parameter which contains the data payload for the Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Collectibles with cURL\nDESCRIPTION: Example of how to fetch collectibles (ERC721 tokens) for a specific Safe account using the Safe Transaction Service API. This endpoint returns paginated results with token details including address, name, symbol, and metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API SDK with mainnet chain ID in TypeScript\nDESCRIPTION: This snippet shows how to instantiate the SafeApiKit class from '@safe-global/api-kit' with configuration for the mainnet chain (chainId 1n). It serves as the setup step required before making API calls to retrieve safe operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getpendingsafeoperations.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up TokenWithdrawModule test environment in TypeScript with Hardhat\nDESCRIPTION: This TypeScript snippet provides the initial test suite skeleton to test the TokenWithdrawModule contract using Hardhat and Chai. It imports necessary dependencies, declares variables for signers and contracts, and outlines hooks for contract deployment and initial configuration. The setup assigns Alice as the single owner of the Safe, deploys the Safe master copy, proxy factory, and TestToken, and pre-mints tokens to the Safe address. It also includes placeholders for enabling the module and defining test cases verifying token transfer functionality. This structure prepares a controlled testing context to run integration and unit tests for the token withdrawal logic.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"hardhat\";\nimport { expect } from \"chai\";\nimport { Signer, TypedDataDomain, ZeroAddress } from \"ethers\";\nimport { Safe, TestToken, TokenWithdrawModule } from \"../typechain-types\";\nimport { execTransaction } from \"./utils/utils\";\n\ndescribe(\"TokenWithdrawModule Tests\", function () {\n  // Define variables\n  let deployer: Signer;\n  let alice: Signer;\n  let bob: Signer;\n  let charlie: Signer;\n  let masterCopy: any;\n  let token: TestToken;\n  let safe: Safe;\n  let safeAddress: string;\n  let chainId: bigint;\n   \n  // Before hook to setup the contracts\n  before(async () => {\n  });\n\n  // Enable the module in the Safe\n  const enableModule = async () => {\n  }\n\n  // Add your test cases here\n  it(\"Should successfully transfer tokens to bob\", async function () {\n  });\n});\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\n  // Setup signers and deploy contracts before running tests\n  before(async () => {\n    [deployer, alice, bob, charlie] = await ethers.getSigners();\n\n    chainId = (await ethers.provider.getNetwork()).chainId;\n    const safeFactory = await ethers.getContractFactory(\"Safe\", deployer);\n    masterCopy = await safeFactory.deploy();\n\n    // Deploy a new token contract\n    token = await (\n      await ethers.getContractFactory(\"TestToken\", deployer)\n    ).deploy(\"test\", \"T\");\n\n    // Deploy a new SafeProxyFactory contract\n    const proxyFactory = await (\n      await ethers.getContractFactory(\"SafeProxyFactory\", deployer)\n    ).deploy();\n\n    // Setup the Safe, Step 1, generate transaction data\n    const safeData = masterCopy.interface.encodeFunctionData(\"setup\", [\n      [await alice.getAddress()],\n      1,\n      ZeroAddress,\n      \"0x\",\n      ZeroAddress,\n      ZeroAddress,\n      0,\n      ZeroAddress,\n      ]);\n\n    // Read the safe address by executing the static call to createProxyWithNonce function\n    safeAddress = await proxyFactory.createProxyWithNonce.staticCall(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n    \n    if (safeAddress === ZeroAddress) {\n      throw new Error(\"Safe address not found\");\n    }\n\n    // Setup the Safe, Step 2, execute the transaction\n    await proxyFactory.createProxyWithNonce(\n      await masterCopy.getAddress(),\n      safeData,\n      0n\n    );\n\n    safe = await ethers.getContractAt(\"Safe\", safeAddress);\n\n    // Mint tokens to the safe address\n    await token\n      .connect(deployer)\n      .mint(safeAddress, BigInt(10) ** BigInt(18) * BigInt(100000));\n  });\n\n```\n\n----------------------------------------\n\nTITLE: Importing UpdateThresholdVariables Type for updateThresholdAsync (TypeScript)\nDESCRIPTION: Code snippet demonstrating how to import the `UpdateThresholdVariables` type definition from `@safe-global/safe-react-hooks`. This type defines the structure of the object required as input for the `updateThresholdAsync` mutation function, containing the new `threshold` value.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdatethreshold.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UpdateThresholdVariables } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Safe Balances Response Example\nDESCRIPTION: This JSON payload represents a sample response for the Safe balances API. It shows balances for both native coins (Sepolia ETH) and ERC20 tokens, including token details like name, symbol, decimals, and logo URI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_73\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Example\nDESCRIPTION: Placeholder for Typescript code related to listing tokens and getting token information, referencing external files.  This suggests that related code resides within a separate file, imported for usage here. It does not contain any executable code by itself but rather points to external source.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-tokens--get.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-tokens-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Initialize Protocol Kit\nDESCRIPTION: This TypeScript snippet initializes an instance of the Safe Protocol Kit. It initializes the kit by providing the provider, a signer, and the predicted safe configuration. The `safeAccountConfig` defines the Safe's initial configuration including owners and the threshold.  The `predictedSafe` prop, is required, providing configuration options for the new Safe account. The optional `onchainAnalytics` property can be used to track the deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/safe-deployment.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeAccountConfig: SafeAccountConfig = {\n  owners: ['0x...', '0x...', '0x...'],\n  threshold: 2\n  // More optional properties\n}\n\nconst predictedSafe: PredictedSafeProps = {\n  safeAccountConfig\n  // More optional properties\n}\n\nconst protocolKit = await Safe.init({\n  provider: sepolia.rpcUrls.default.http[0],\n  signer: SIGNER_PRIVATE_KEY,\n  predictedSafe,\n  onchainAnalytics // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Nonce when Creating Enable Module Tx using Protocol Kit (TypeScript)\nDESCRIPTION: Illustrates setting the `nonce` option. While the Protocol Kit typically manages nonces automatically, this parameter allows manually overriding the transaction nonce.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createenablemoduletx.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableModuleTx(\n  '0x...',\n  options: {\n    nonce: 123\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Web3Auth Client ID\nDESCRIPTION: Setting up the client ID variable obtained from the Web3Auth dashboard for authentication initialization.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/web3auth.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst WEB3AUTH_CLIENT_ID = // ...\n```\n\n----------------------------------------\n\nTITLE: Example Successful Response (JSON)\nDESCRIPTION: Provides a sample JSON object representing a successful response from the List Module Transactions API endpoint. It shows the pagination structure (`count`, `next`, `previous`) and an example entry in the `results` array, detailing fields like creation/execution dates, block number, transaction hash, involved addresses (Safe, module, to), value, data, operation type, and a unique module transaction ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Token Information cURL Example\nDESCRIPTION: This cURL command retrieves detailed information about a specific token, using its address.  It uses a GET request to the `/api/v1/tokens/{address}/` endpoint, where `{address}` is the token's contract address. The example also includes the `Accept` and `content-type` headers set to `application/json`. The expected response is a JSON object containing the token's details (type, address, name, symbol, decimals, logoUri, trusted).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Token Transfers - JSON\nDESCRIPTION: This snippet provides a sample JSON response for the 'List Transfers' API call showing a paginated result with count, next, previous navigation URLs, and an array of transfer objects. Each transfer object contains details such as type, execution date, block number, transaction hash, sender and receiver addresses, value, token ID and address, transfer ID, and token information if applicable. This example helps to illustrate the data structure returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Creation Status using cURL\nDESCRIPTION: This cURL command retrieves detailed information on the Safe creation transaction of a given Safe address from the Safe Transaction Service API. It specifies the Accept and Content-Type headers as application/json.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Multisig Transaction API\nDESCRIPTION: Provides an example JSON response containing multisig transaction details such as involved addresses, value, nonce, signatures, confirmation status, and timestamps, illustrating how data is structured in the response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting User Operations via cURL\nDESCRIPTION: This snippet demonstrates how to retrieve the list of UserOperations for a specific Safe account using a cURL command. It sends a GET request to the designated API endpoint, including the account address in the path and specifying the content type as application/json.  The output is the JSON response containing the results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Decode Data API Call in Bash\nDESCRIPTION: Shows a curl command for POSTing to the data decoder endpoint, including headers for JSON acceptance and content type. Demonstrates the required request structure for decoding raw transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/data-decoder/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Delegate (curl)\nDESCRIPTION: Sends a POST request to the Safe Transaction Service API to add or update a Safe delegate. This operation requires a request body (not shown in this example) containing the delegate details, label, and a valid EIP712 signature generated using the specified structure and TOTP. Standard Accept and content-type headers are required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-avalanche.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Structure for Safe Transaction Deletion Request (Python/JSON)\nDESCRIPTION: Defines the EIP-712 typed data structure required for signing a request to delete a queued Safe multisig transaction. This structure includes domain information (name, version, chainId, verifyingContract) and the message containing the `safeTxHash` and a time-based one-time password (`totp`). An Externally Owned Account (EOA) must sign data conforming to this structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating safeTxHash parameter usage in TypeScript\nDESCRIPTION: This snippet specifically highlights how the `safeTxHash` parameter is provided as a string argument when calling the `getTransaction` method. The `safeTxHash` is the unique identifier for the Safe transaction you wish to query.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/gettransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tx = await apiKit.getTransaction(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Delegate via POST /api/v2/delegates/\nDESCRIPTION: Adds a new delegate with a custom label by sending a POST request with optional signature data. Includes the EIP712 data structure required for signing and describes request and response details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zksync.safe.global/api/api/v2/delegates/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Importing Privy React Hooks\nDESCRIPTION: This snippet imports the necessary React hooks from the `@privy-io/react-auth` library. These hooks, including `PrivyProvider`, `usePrivy`, and `useWallets`, provide access to Privy's authentication and wallet functionalities within a React application.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/privy.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrivyProvider, usePrivy, useWallets } from '@privy-io/react-auth'\n```\n\n----------------------------------------\n\nTITLE: Sample API Call for Listing Collectibles\nDESCRIPTION: Example curl command demonstrating how to fetch collectibles for a specific Safe address using the REST API. The response provides details about the number of collectibles and individual collectible metadata with an example collectible object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Instantiate Safe Protocol and Gelato Relay Kits (SyncFee)\nDESCRIPTION: Initialize instances of the Safe Protocol Kit and the Gelato Relay Pack for the SyncFee method. The Protocol Kit setup is the same as with 1Balance. The Gelato Relay Pack for SyncFee does not require an API key; it only needs the initialized Protocol Kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.init({\n    provider: RPC_URL,\n    signer: OWNER_PRIVATE_KEY,\n    safeAddress\n})\n\nconst relayKit = new GelatoRelayPack({ protocolKit })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Message Information via Safe API in TypeScript and cURL\nDESCRIPTION: Provides usage details for querying detailed Safe message information using a message hash as a path parameter. The API returns structured JSON including timestamps, associated safe address, message contents, proposer, confirmations array, and signature information. The snippet features TypeScript example comment, a cURL GET request with appropriate headers, and a sample JSON response demonstrating the message metadata and confirmation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v1-messages-{message_hash}--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/messages/0x3b3b57b3/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for User Operation Retrieval\nDESCRIPTION: An example JSON object representing the response returned when fetching user operation details, including transaction hash, sender address, user operation hash, nonce, call data, gas limits, signatures, and nested safe operation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n  \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n  \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n  \"nonce\": 0,\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n  \"safeOperation\": {\n    \"created\": \"2024-07-22T10:00:18.892702Z\",\n    \"modified\": \"2024-07-22T10:00:18.892702Z\",\n    \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n    \"validAfter\": null,\n    \"validUntil\": null,\n    \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n    \"confirmations\": [\n      {\n        \"created\": \"2024-07-22T10:00:18.898708Z\",\n        \"modified\": \"2024-07-22T10:00:18.898708Z\",\n        \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n        \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n      }\n    ],\n    \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Safe Collectibles (ERC721) via API - Bash\nDESCRIPTION: Demonstrates how to use the `curl` command to fetch a paginated list of collectibles (ERC721 tokens) associated with a specific Safe account address from the Safe Transaction Service API. The request targets the `/api/v2/safes/{address}/collectibles/` endpoint using a GET method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Safe Transaction Confirmations\nDESCRIPTION: Provides an example JSON response containing a paginated list of confirmations for a Safe multisig transaction. The response includes the total count (`count`), URLs for the next/previous pages (`next`, `previous`), and an array of confirmation results (`results`), each detailing the owner address, submission date, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ERC721 Collectibles via Safe Transaction Service API - bash\nDESCRIPTION: Retrieves paginated information about ERC721 collectibles owned by a specified Safe account address. Supports query parameters such as address (required), trusted (boolean), exclude_spam (boolean), limit (integer, maximum 10), and offset (integer) to control filtering and pagination. The response includes metadata like token address, name, symbol, and associated URIs. Dependencies include network access to the Safe Transaction Service. Expected input is a Safe account Ethereum address in the path; output is a paginated JSON list of collectible token details. Constraints include a maximum limit of 10 per page and filtering options to exclude spam or untrusted tokens.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Decoding Safe Transaction Data using SafeApiKit - TypeScript\nDESCRIPTION: Shows how to decode Safe transaction data strings asynchronously using the decodeData method of an instantiated SafeApiKit object. Demonstrates usage of the method with just the transaction data string, and optionally with a receiving contract address to improve decoding accuracy in cases of ABI ambiguity. The snippet depends on the SafeApiKit instance created with appropriate chainId to target the correct blockchain network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/decodedata.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst data = '0x...'\n\nconst decodedData = await apiKit.decodeData(data)\n```\n\n----------------------------------------\n\nTITLE: Execute pending transaction\nDESCRIPTION: Executes a pending transaction, provided that it has the necessary signatures to meet the Safe's requirements. The command takes the Safe transaction hash as input.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexecute-tx <safe-tx-hash>\n```\n\n----------------------------------------\n\nTITLE: Enabling use of Trezor hardware wallet\nDESCRIPTION: Configures the CLI to sign transactions with a Trezor device using the trezor library. Supports optional legacy accounts and derivation path configurations. Installation must include the trezor package.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npip install \"safe-cli[trezor]\"\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Message via API using curl\nDESCRIPTION: Demonstrates how to use the `curl` command-line tool to send a POST request to the Safe Transaction Service API's `/api/v1/safes/{address}/messages/` endpoint. This creates a new signed message for a specific Safe account address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe protocolKit Instance (TypeScript)\nDESCRIPTION: Shows the process of initializing the Safe `protocolKit` library. This involves importing the `Safe` class and calling its static `init` method with essential configuration, including a blockchain provider, a signer (for signing transactions), and the address of the target Safe. The initialized `protocolKit` instance is then exported for use elsewhere.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getthreshold.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract with curl\nDESCRIPTION: This snippet demonstrates how to retrieve information for a specific contract using a GET request with curl. It uses the contract's address in the endpoint URL and sets the appropriate request headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Rendering the Arbitrum API Reference Component (React/JSX)\nDESCRIPTION: This JSX snippet renders the `ApiReference` React component within the page. It passes the `networkName` prop with the value \"arbitrum\", configuring the component to display the API documentation specific to the Arbitrum network, utilizing the data prepared by `getStaticProps` and the imported MDX/Swagger files.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/arbitrum.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference networkName=\"arbitrum\"/>\n```\n\n----------------------------------------\n\nTITLE: Safe Transaction Response Format\nDESCRIPTION: A sample JSON response showing the structure of transaction data returned by the Safe Transaction Service API. It includes detailed information about transactions associated with a Safe, including confirmations, gas prices, and transfer details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction Response Format in JSON\nDESCRIPTION: Sample response for a multisig transaction request showing transaction details including safe address, transaction value, signatures, and confirmation status. This example shows a transaction that has been submitted but not yet executed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using swapOwner in Safe Contract - Solidity\nDESCRIPTION: This snippet defines the ISafe interface with the external swapOwner method and provides an Example contract that demonstrates its invocation. It requires the Safe contract to implement the ISafe interface, and expects addresses for prevOwner (the owner preceding the one to be replaced in the linked list), oldOwner (the address to be replaced), and newOwner (the new address to add). The function replaces an existing owner in a linked-list-based ownership structure, updating the contract state accordingly. Expected inputs are three Ethereum addresses, and the function affects contract ownership without returning a result; permissioned access and correct address order are essential.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/swapOwner.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function swapOwner(\n        address prevOwner,\n        address oldOwner,\n        address newOwner\n    ) external;\n}\n\ncontract Example {\n    function example() … {\n        (ISafe safe).swapOwner(\n            0x...,\n            0x...,\n            0x...\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for React Native App\nDESCRIPTION: This command installs the necessary dependencies for the React Native project. It includes packages for Safe Protocol Kit, React Native Passkeys, base64 encoding, asynchronous storage, prompt dialog, and Expo build properties. These dependencies are essential for the app's functionality.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd react-native-passkeys\nnpm install @safe-global/protocol-kit react-native-passkeys react-native-base64 @react-native-async-storage/async-storage react-native-prompt-android expo-build-properties\n```\n\n----------------------------------------\n\nTITLE: Listing Token Transfers Using Safe Transaction REST API (Bash)\nDESCRIPTION: This Bash snippet demonstrates how to retrieve a paginated list of up to 1000 token transfers associated with a Safe address using the Safe Transaction REST API. The curl command sends a GET request to the /api/v1/safes/{address}/transfers/ endpoint, with example address 0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75. Required dependencies include curl and internet connectivity. Headers specify application/json for both request and response, and query parameters can be used to filter by execution date, block number, or value. The response includes metadata and transfer objects, with limitations such as a 1000-transfer cap.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Sending a Safe User Operation (TypeScript)\nDESCRIPTION: Calls the `sendSafeOperation` method on the extended `safeClient` instance to initiate the user operation process. It passes the array of transactions and returns a result object containing the `safeOperationHash` if successful.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeClientWithSafeOperation.sendSafeOperation({\n  transactions\n})\n\nconst safeOperationHash = safeOperationResult.safeOperations?.safeOperationHash\n```\n\n----------------------------------------\n\nTITLE: Querying Delegates - cURL\nDESCRIPTION: This snippet demonstrates how to retrieve a list of delegates using a GET request to the /api/v2/delegates/ endpoint. It specifies the Accept and content-type headers as application/json. The response contains a list of delegates with information such as the safe address, delegate address, delegator, and label.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Message Details API Endpoint and Sample Request\nDESCRIPTION: Fetches detailed information about a specific message using its hash via GET request. Response includes message metadata, owner confirmations, and signature details. Dependencies involve message schema definitions, with sample cURL request illustrating usage.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Get Module Transactions - cURL\nDESCRIPTION: This bash cURL command demonstrates how to fetch module transactions from a specific Safe address. It uses the GET method to access the API endpoint.  The command specifies the API endpoint, required headers for acceptance and content type as application/json. The endpoint includes a sample Safe address and is designed to retrieve module transactions and can be used to test the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Highlighting the `executor` Parameter in checkNSignatures Call\nDESCRIPTION: Focuses on the `executor` parameter within the `checkNSignatures` function call. This address represents the entity executing the transaction. It's crucial to ensure this is a legitimate executor to prevent potential manipulation of the signature threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/signatures/checkNSignatures.mdx#_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n(ISafe safe).checkNSignatures(\n    0x..., // executor: Address executing the transaction\n    \"0x...\",\n    \"0x...\",\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Safe Transaction Service Specific Contract Response (json)\nDESCRIPTION: This JSON snippet provides a sample successful response (`HTTP 200`) when querying a specific contract using `GET /api/v1/contracts/{address}/`. It returns a single `Contract` object containing the address, name, display name, logo, and contract ABI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Approving Safe Transaction Hash with `gasPrice` Option\nDESCRIPTION: This snippet demonstrates how to use the optional `gasPrice` parameter when calling `approveTransactionHash`. The `gasPrice` parameter sets the price in wei that the sender is willing to pay for each unit of gas. It's passed inside the `options` object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionResponse = await protocolKit.approveTransactionHash(\n  '0x...',\n  options: {\n    gasPrice: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit - TypeScript\nDESCRIPTION: This code initializes the `SafeApiKit` with a chain ID, specifically for Mainnet (chain ID 1).  It's a prerequisite for using the API Kit's methods like `getSafeOperation`.  The `SafeApiKit` class from the `@safe-global/api-kit` library is required.  This setup is essential to interact with the Safe API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperation.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up the Safe Client in TypeScript\nDESCRIPTION: This code shows how to initialize a Safe Client instance using the SDK starter kit by providing a provider, signer, and Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createchangethresholdtransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Single Transfer API JSON Response - JSON\nDESCRIPTION: This JSON snippet shows an example response from the Safe Transaction Service for a single transfer query. It details fields like type, executionDate, blockNumber, transactionHash, source and destination addresses, value, transferId, and may include token information if applicable. Inputs are the transfer ID sent in the request. The output contains comprehensive details for the identified token or ether transfer. Some fields like tokenInfo or tokenAddress may be null depending on the type of transfer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit\nDESCRIPTION: This snippet shows how to initialize the Safe Protocol Kit with a provider, signer, and Safe address. This setup is required before using methods like signTypedData.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signtypeddata.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving On-chain Identifier with Safe Protocol Kit (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to retrieve the on-chain identifier using the `getOnchainIdentifier` method from the Safe Protocol Kit. It assumes that the `protocolKit` instance has already been initialized. The output is a hexadecimal string representing the identifier.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/onchain-tracking/getOnchainIdentifier.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst onchainIdentifier = await protocolKit.getOnchainIdentifier()\n\nconsole.log(onchainIdentifier) // e.g., '5afe006562303761323539616336346466346135306537646561393238383963'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safes by Owner using cURL\nDESCRIPTION: Sends a GET request to the `/api/v1/owners/{address}/safes/` endpoint of the Safe Transaction Service API to retrieve a list of Safes owned by the specified address. The example uses a specific owner address (0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75) on the Worldchain network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Single Transfer API Response in JSON\nDESCRIPTION: Gives the sample JSON data structure returned by the Safe Transaction Service API for a single token transfer identified by transferId. The object includes all core fields (type, executionDate, blockNumber, transactionHash, from, to, value, tokenId, tokenAddress, transferId, tokenInfo with subfields) with some values possibly null depending on asset type. Numeric identifiers and values are delivered as strings to accommodate large integer values; all returned transfers comply with the documented schema.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieve List of Contracts - Sample JSON Response\nDESCRIPTION: Sample JSON response from the List Contracts API shows total count, pagination links, and a list of contract objects containing address, name, displayName, logoUri, contractAbi, and delegate call trust status. Useful for understanding response structure and data fields.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction Response Format in JSON\nDESCRIPTION: This snippet shows the sample response format when retrieving a multisig transaction. It includes transaction details such as the safe address, transaction values, submission date, confirmations required, and signatures from owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Multisig Transaction Response\nDESCRIPTION: This JSON snippet represents a sample response from the Safe Transaction Service when querying a multi-signature transaction. It includes details such as the `safe` address, `to` address, `value`, `data`, `operation`, gas-related parameters, and information about confirmations and signatures. The `safeTxHash` is the unique identifier for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Delegates with Transaction Service API (cURL)\nDESCRIPTION: This cURL example demonstrates how to list delegates by sending a GET request to the Safe Transaction Service API. It sets the Accept and content-type headers for JSON communication. Query parameters can be appended to the URL to filter results as needed. The API returns a paginated JSON object with delegate information. No authentication is shown here, but it may be required depending on server configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Transactions - TypeScript\nDESCRIPTION: This TypeScript code snippet is a reference to the example file used to show how to retrieve transaction data. It is used in conjunction with the cURL example, and is included within the documentation context.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/mantle/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Adding a Message Signature\nDESCRIPTION: Shows an empty response body, typically returned with an HTTP 201 Created status, indicating the successful addition of a signature to a message via the POST `/api/v1/messages/{message_hash}/signatures/` endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Create Delegate Sample Response\nDESCRIPTION: Response is an empty body indicating successful creation with HTTP status 202. This signifies that the delegate has been registered or updated as per the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Confirming a Pending Safe User Operation (TypeScript)\nDESCRIPTION: Fetches pending user operations for the Safe using `getPendingSafeOperations`. It then iterates through the results, identifies the target operation by its `safeOperationHash`, and confirms it using `confirmSafeOperation` with the confirming owner's client.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst pendingSafeOperations =\n  await newSafeClientWithSafeOperation.getPendingSafeOperations()\n\nfor (const safeOperation of pendingSafeOperations.results) {\n  if (safeOperation.safeOperationHash !== safeOperationHash) {\n    return\n  }\n\n  const safeOperationResult =\n    await newSafeClientWithSafeOperation.confirmSafeOperation({ safeOperationHash })\n}\n```\n\n----------------------------------------\n\nTITLE: Passing the Signer Address to the `connect` Function (TypeScript)\nDESCRIPTION: Illustrates how to call the `connect` function, passing the signer's address as a string argument. This example focuses specifically on the parameter being passed, which is the `signer` address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/connect.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconnect(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Incoming Transfers\nDESCRIPTION: Provides an example JSON response structure returned by the incoming transfers endpoint. It includes pagination details (`count`, `next`, `previous`) and a `results` array containing objects, each representing an incoming transfer with details like type (e.g., ETHER_TRANSFER), execution date, block number, transaction hash, recipient ('to', which is the Safe address), value, sender ('from'), and a unique transfer ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Module Transactions\nDESCRIPTION: An example JSON response from the API endpoint illustrating the structure of the paginated data returned. It includes fields such as transaction metadata (creation and execution dates), block number, success status, involved addresses, transaction value, operation type, and an internal module transaction identifier. This response format aids in client-side processing and UI rendering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Message with API\nDESCRIPTION: This snippet demonstrates how to sign a message by sending a POST request to the `/api/v1/messages/{message_hash}/signatures/` endpoint. It requires a `message_hash` and returns a 201 Created response upon successful execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-blast.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Proving Settlement Correctness Using Attestation via Mermaid Sequence Diagram\nDESCRIPTION: This mermaid sequence diagram demonstrates the correctness proof workflow in the settlement process using attestations. The processor sends a receipt from the spend chain to the guarantee engine on the home chain via transceivers, which then validates the settlement by checking guarantees. After validation, the guarantee engine informs the settlement engine on the debit chain that the correctness is proven, enabling immediate settlement execution. This diagram clarifies the cross-chain proof mechanism leveraging attestations to bypass settlement delays.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/safenet/concepts/settlement.mdx#_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tbox MVP Processor\n\t\tactor P as Processor\n\tend\n\tbox rgb(255,165,0,0.2)\n\t\tparticipant E as Entry Point<br>(SPEND CHAIN)\n\t\tparticipant S as Settlement Engine<br>(DEBIT CHAIN)\n\tend\n\tparticipant TS as Transceiver<br>for Spend Chain\n\tparticipant TD as Transceiver<br>for Debit Chain\n\tparticipant G as Guarantee Engine\n\tparticipant G1 as Guarantee 1...\n\tparticipant GN as ...Guarantee N\n  \n  P->>+E: sendReceipt()\n  E-->>+TS: receipt\n  deactivate E\n  TS->>G: safenetReceipt()\n  deactivate TS\n    \n  P->>+G: prove()\n  G->>G1: checkGuarantee()\n  G->>GN: checkGuarantee()\n  G->>-TD: correctnessProven()\n  TD-->>S: correctnessProven\n```\n\n----------------------------------------\n\nTITLE: Fetch Safe Balances (Deprecated) - Transaction Service API - cURL/Bash\nDESCRIPTION: Shows how to use the `curl` command to call the deprecated `/api/v1/safes/{address}/balances/` endpoint of the Safe Transaction Service API. This endpoint was used to get balance information for a Safe account, including native coin and ERC20 tokens.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Specifying config.signer in removeSafeDelegate (Typescript)\nDESCRIPTION: Illustrates how to provide the `signer` parameter within the configuration object for the `removeSafeDelegate` function call. This object represents the entity authorizing the removal.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/removesafedelegate.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.removeSafeDelegate({\n  delegateAddress: '0x...', \n  delegatorAddress: '0x...', \n  signer // The signer object.\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens using cURL\nDESCRIPTION: Shows how to use cURL to send a GET request to the `/api/v1/tokens/` endpoint to retrieve a paginated list of tokens supported by the Safe Transaction Service. Accepts various optional query parameters for filtering (e.g., `name`, `address`, `symbol`, `decimals`), searching (`search`), ordering (`ordering`), and pagination (`limit`, `offset`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Enabling Fallback Handler (with safeTxGas)\nDESCRIPTION: This snippet demonstrates using the `safeTxGas` option when creating the transaction. This configuration determines the gas to be used for the Safe transaction. It overrides the default gas usage, providing more control over the transaction's gas consumption.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableFallbackHandlerTx(\n  '0x...',\n  options: {\n    safeTxGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction: Python\nDESCRIPTION: This snippet instantiates an Ethereum client and a Safe object, then builds a multisig transaction with the specified recipient, value, and data. It requires RPC URL, Safe address, recipient address, and value as configuration parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nethereum_client = EthereumClient(config.get(\"RPC_URL\"))\n\n# Instantiate a Safe\nsafe = Safe(config.get(\"SAFE_ADDRESS\"), ethereum_client)\n\n# Create a Safe transaction\nsafe_tx = safe.build_multisig_tx(\n    config.get(\"TO\"),\n    config.get(\"VALUE\"),\n    HexBytes(\"\"))\n```\n\n----------------------------------------\n\nTITLE: Retrieving SafeOperation Details using Safe API with cURL - Bash\nDESCRIPTION: This Bash snippet demonstrates how to use the curl command-line tool to perform a GET request to the Safe Global Transaction Service API in order to retrieve a SafeOperation by its unique operation hash. The request requires proper API endpoint formatting with the desired hash substituted into the URL path, and includes HTTP headers for specifying JSON content types. Expected input is a valid SafeOperation hash, and the output will be a JSON document representing the full SafeOperation. No authentication or custom dependencies are specified in the example, but the API must be publicly accessible.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Highlighting the `requiredSignatures` Parameter in checkNSignatures Call\nDESCRIPTION: Focuses on the `requiredSignatures` parameter within the `checkNSignatures` function call. This `uint256` value specifies the minimum number of valid signatures required for the check to pass.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/signatures/checkNSignatures.mdx#_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\n(ISafe safe).checkNSignatures(\n    0x...,\n    \"0x...\",\n    \"0x...\",\n    1        // requiredSignatures: Amount of required valid signatures\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Transaction with Safe Transaction Service API\nDESCRIPTION: HTTP POST request to create a multi-signature transaction for a Safe account. The request is sent to the Safe Transaction Service API endpoint for the specified Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_37\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Contract Version Using Safe SDK Initialization in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Safe SDK with necessary parameters such as provider, signer, and safeAddress, then retrieve the Safe contract version via the getContractVersion() method. Dependencies include the '@safe-global/protocol-kit' package. The main function, getContractVersion, returns a SafeVersion type indicating the version of the connected Safe contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/getcontractversion.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst contractVersion = protocolKit.getContractVersion()\n```\n\n----------------------------------------\n\nTITLE: enableModule Parameter Usage - Solidity\nDESCRIPTION: This Solidity code shows how the `module` parameter is used within the `enableModule` function call. The `module` parameter is the address of the Safe Module that is being enabled. The provided address should be a valid and deployed smart contract address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/enableModule.mdx#_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n(ISafe safe).enableModule(\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Incoming Transfers Using cURL Bash Command\nDESCRIPTION: Demonstrates how to perform a GET request to the Safe transaction service API to retrieve incoming transfers for a specific Safe address. It requires only curl as a dependency and sends the request with Accept and Content-Type headers set to application/json. The example query targets all incoming transfers without additional filters and returns a JSON response describing transfer details. This snippet is helpful for command line testing and integration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Module using cURL\nDESCRIPTION: This cURL command demonstrates how to make a GET request to the Safe Transaction Service API to retrieve a list of Safe accounts that have a specific module enabled. The module address is included as a path parameter in the URL. Standard headers for JSON communication are included. The expected output is a JSON object containing an array of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Applying Global Safe Configuration via SafeProvider in TypeScript\nDESCRIPTION: Wraps the React application with SafeProvider to pass the created Safe configuration, enabling access to Safe React Hooks throughout the app for transaction and confirmation operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/react-hooks/guides/send-transactions.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n<SafeProvider config={config}>\n  <App />\n</SafeProvider>\n```\n\n----------------------------------------\n\nTITLE: Create and Copy Safe Transaction using Protocol Kit (TypeScript)\nDESCRIPTION: Demonstrates the process of creating a Safe transaction using `protocolKit.createTransaction` from a list of `MetaTransactionData` and then creating a distinct copy of the resulting `SafeTransaction` object using the `copyTransaction` function. Requires an initialized `protocolKit` instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/copytransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MetaTransactionData,\n  OperationType\n} from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst transactions: MetaTransactionData[] = [{\n  to: '0x...',\n  value: '123',\n  data: '0x',\n  operation: OperationType.Call // Optional\n}]\nconst safeTransaction1 = await protocolKit.createTransaction({\n  transactions\n})\n\nconst safeTransaction2 = await copyTransaction(safeTransaction1)\n```\n\n----------------------------------------\n\nTITLE: Get Safe Creation Status Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve the creation status of a Safe using Typescript. It is linked to the corresponding `chiado` example directory. The full code will be in `/examples/chiado/-v1-safes-{address}-creation--get.ts`\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/chiado/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Collectibles using cURL\nDESCRIPTION: This Bash snippet demonstrates how to retrieve a paginated list of ERC721 collectibles associated with a specific Safe address using a GET request to the `/api/v2/safes/{address}/collectibles/` endpoint. The request requires the Safe address in the path and accepts optional query parameters like `trusted`, `exclude_spam`, `limit`, and `offset` for filtering and pagination. The response is a JSON object containing the list of collectibles.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Transfer via cURL (Bash)\nDESCRIPTION: Shows how to use cURL to send a GET request to the `/api/v1/transfer/{transfer_id}` endpoint to fetch details for a single transfer identified by its unique `transfer_id` (e.g., 3b3b57b3). Requires a valid transfer ID and sets `Accept` and `content-type` headers to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Multisig Transaction\nDESCRIPTION: Example JSON response structure returned when successfully fetching a multisig transaction. It includes comprehensive details such as the Safe address, destination, value, data, operation type, gas parameters, nonce, relevant dates (submission, modification, execution), status flags (executed, successful), proposer, confirmations required, confirmations received with signatures, and the unique Safe transaction hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operations with curl Bash Command\nDESCRIPTION: A Bash snippet demonstrating how to perform a GET request to the Safe-Transaction API to retrieve the list of Safe operations for a specified Safe account address. This example uses curl with appropriate headers to request JSON formatted data from the endpoint. No additional authentication or parameters are shown in the snippet, representing a basic use case.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data via Safe Transaction Service (bash)\nDESCRIPTION: This `curl` command demonstrates how to use the `POST /api/v1/data-decoder/` endpoint to decode raw transaction data. The request expects transaction data (and optionally the target address) in the request body (not shown in this snippet, but implied by the `POST` method and content-type), and the service uses internal ABIs to interpret the data. The snippet refers to a related TypeScript example file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-celo.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Reference: List Supported Tokens Example - TypeScript\nDESCRIPTION: This snippet is a comment referencing an external TypeScript file. It indicates that a code example for listing supported tokens using the Safe Transaction Service API is available in the specified location.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/scroll/-v1-tokens--get.ts\n```\n\n----------------------------------------\n\nTITLE: ISafe Interface Definition (Solidity)\nDESCRIPTION: Defines the `ISafe` interface in Solidity, which includes the `changeThreshold` function. This interface allows interaction with the Safe contract to modify its threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/changeThreshold.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function changeThreshold(uint256 _threshold) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Details by Address - Safe Transaction Service API (Bash)\nDESCRIPTION: This code demonstrates how to fetch details about a specific smart contract using its address with a GET request. The endpoint requires the contract address as a path parameter. The response is a JSON object with metadata, ABI, and other attributes of the contract. There is no authentication required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Prepare and Sign Safe Transaction (SyncFee)\nDESCRIPTION: Use the initialized Relay Kit to create a Safe transaction object from the transaction data. Note that unlike 1Balance, no specific options are passed during creation for SyncFee. Then, sign this transaction object using the Safe Protocol Kit with the Safe owner's signer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await relayKit.createTransaction({ transactions })\n\nconst signedSafeTransaction = await protocolKit.signTransaction(safeTransaction)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Safe Status\nDESCRIPTION: Provides an example JSON response from the 'Get Safe Status' API endpoint. The response includes the Safe's address, current nonce, signature threshold, list of owner addresses, master copy address, list of enabled module addresses, fallback handler address, guard address, and the Safe contract version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling a module on Safe\nDESCRIPTION: Activates a Safe module at a specified address to extend functionality or integrate custom logic. Modules must be validated before enabling.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nenable_module <address>\n```\n\n----------------------------------------\n\nTITLE: Querying Contract List - Safe Transaction Service API (Bash)\nDESCRIPTION: This snippet shows how to retrieve the list of known smart contracts and their ABI definitions from the Safe Transaction Service using an HTTP GET request. No authentication is required; endpoints differ for each supported network. Optional query parameters include ordering, limit, and offset for result pagination. The result is a paginated JSON array of contracts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Setting gasPrice Option for Remove Owner Transaction (TypeScript)\nDESCRIPTION: Shows how to specify the `gasPrice` within the optional `options` object when creating a remove owner transaction. This parameter determines the price paid per unit of gas for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx(\n  {\n    ownerAddress: '0x...'\n  },\n  {\n    gasPrice: '123' // Optional: Price in wei per gas unit\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response format for User Operations\nDESCRIPTION: JSON structure returned by the API, containing a list of UserOperations with their details including transaction hashes, sender addresses, signatures, and associated Safe operations including confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ],\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response: List Multisig Confirmations (JSON)\nDESCRIPTION: This JSON snippet represents a sample response for listing multisig confirmations. It contains metadata such as the count of confirmations, pagination links (next and previous), and an array of result objects. Each result object includes details about the owner, submission date, transaction hash, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling isValidSignature with Example Parameters - TypeScript\nDESCRIPTION: This snippet provides an example of how to call the `isValidSignature` method, specifying the message hash and the signature. It showcases how to use the method with example inputs. The actual message hash and signature need to be replaced with valid values for a specific use case. The method returns a boolean indicating the validity of the signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/isvalidsignature.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst isValidSignature = await protocolKit.isValidSignature(\n  '0x...', \n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Fallback Handler with Optional Gas Parameters (TypeScript)\nDESCRIPTION: This snippet illustrates invoking createDisableFallbackHandlerTx with a minimal options object containing a specific gas-related parameter. Each example separately highlights the use of safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, or nonce in the transaction preparation call. protocolKit must be properly initialized prior to usage; each key in the argument is optional and specifies transaction customization. The resulting safeTransaction object is returned as a Promise and can be executed with the specified parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createdisablefallbackhandlertx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableFallbackHandlerTx({\n  safeTxGas: '123'\n})\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableFallbackHandlerTx({\n  baseGas: '123'\n})\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableFallbackHandlerTx({\n  gasPrice: '123'\n})\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableFallbackHandlerTx({\n  gasToken: '0x...'\n})\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableFallbackHandlerTx({\n  refundReceiver: '0x...'\n})\n\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableFallbackHandlerTx({\n  nonce: 123\n})\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safe Status\nDESCRIPTION: This JSON snippet represents a sample response from the `/api/v1/safes/{address}/` endpoint, providing details about the Safe account. It includes information such as the Safe's address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version. This structure defines the expected output format for a successful request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for Get Specific Contract\nDESCRIPTION: This JSON sample demonstrates the structure of a specific contract's details, including address, name, ABI description, and delegate call trust status, returned from the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Listing Safe Messages\nDESCRIPTION: Provides an example of the JSON response structure returned by the API when listing messages for a Safe account. It includes pagination details and a list of message objects, each containing message metadata and confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Owner Address using curl\nDESCRIPTION: A curl request to retrieve a list of Safe accounts that have a specific owner address. The endpoint requires the owner address as a path parameter and returns an array of Safe addresses in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample cURL request for retrieving incoming transfers\nDESCRIPTION: This code snippet demonstrates how to perform a GET request to the incoming transfers API endpoint using cURL, including setting necessary headers for JSON format and the complete URL with specific Safe address. It serves as an example of client-side request formulation to fetch transfer data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the current Safe on-chain identifier in TypeScript\nDESCRIPTION: Shows how to obtain the on-chain identifier for the Safe by calling the `getOnchainIdentifier` method on an initialized Protocol Kit instance, which is useful for transaction tracking and analysis.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onchain-tracking.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst onchainIdentifier = protocolKit.getOnchainIdentifier()\n```\n\n----------------------------------------\n\nTITLE: Fetching Module Transaction by ID using cURL in Bash\nDESCRIPTION: A cURL request to retrieve a module transaction by its ID from the Safe Transaction Service API. The request includes headers for JSON content type and acceptance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initiating Gasless Transactions with Gelato Relay Kit (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to relay a Safe transaction without requiring the user to pay gas, using the Gelato Relay Pack from @safe-global/relay-kit. It requires providing an API key, setting up the relay pack, and specifying transaction details like target address, encoded transaction, and chain ID. Input includes Safe address, encoded transaction (encodedTx), and correct chain ID (e.g., Sepolia). The output is a relay response. Requires the relay-kit package and access to Gelato's API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx.txt#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GelatoRelayPack } from '@safe-global/relay-kit'\n\n// Create a relay pack\nconst relayPack = new GelatoRelayPack('your-gelato-api-key')\n\n// Create a transaction\nconst safeTransactionData = {\n  to: '0x...',\n  value: '0',\n  data: '0x...'\n}\n\n// Relay the transaction (user doesn't pay gas)\nconst response = await relayPack.relayTransaction({\n  target: safeAddress,\n  encodedTransaction: encodedTx,\n  chainId: 11155111\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Safes that Use a Specific Module (TypeScript Example)\nDESCRIPTION: This snippet is a TypeScript file demonstrating how to interact with the API endpoint that retrieves safes enabled with a particular module. It references external example files and describes the API structure. Dependencies include the API base URL and related utility functions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/sepolia/-v1-modules-{address}-safes--get.ts\n\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for User Operations from Safe Transaction API\nDESCRIPTION: This JSON snippet shows a sample paginated response from the Safe Transaction API containing user operations data. It includes metadata fields such as 'count', 'next', and 'previous' for pagination, and an array 'results' with detailed user operation objects. Each object features transaction-specific fields like ethereumTxHash, sender, gas limits, paymaster data, signatures, as well as a nested safeOperation object that includes creation dates, operation hashes, module addresses, and confirmation details. This sample illustrates the structure and types returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ]\n```\n\n----------------------------------------\n\nTITLE: Specifying the Destination Address (`to`) for `execTransaction`\nDESCRIPTION: Highlights the `to` parameter (index 2) within the `execTransaction` function call. This parameter defines the target address where the Safe transaction will be sent.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x..., // to\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Safe User Operations via REST API using Bash\nDESCRIPTION: This Bash snippet demonstrates how to retrieve the list of UserOperations for a specific Safe account by making a GET request to the Safe Transaction API endpoint. It requires cURL (installed by default on many Unix-based systems) and a valid Safe address to be specified in the request path. The command requests JSON output using appropriate HTTP headers. No authentication is depicted but may be required for real environments. The response contains paginated results with details about each UserOperation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating Safe Operations with Safe Global API Using Bash\nDESCRIPTION: This snippet demonstrates how to add a new SafeOperation for a specific Safe account by sending a POST request to the Safe Global API endpoint. It requires the address of the Safe as a path parameter. The example uses curl to set appropriate headers and submit an empty JSON body. Expected input is the Safe address, and the output is an HTTP 201 status with an unspecified JSON response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Get Specific Token Info - `js TypeScript` Example Reference\nDESCRIPTION: This line indicates the location of a TypeScript example demonstrating how to retrieve detailed information for a specific token using its contract address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_77\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-tokens-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Using the `connect` Function in a React Component (TypeScript)\nDESCRIPTION: Example React component demonstrating how to import and use the `connect` function obtained from the `useSafe` hook. It shows connecting a signer by passing their address (`signerAddress`) to the `connect` function when a button is clicked. Requires the `@safe-global/safe-react-hooks` package.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/connect.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction Connect() {\n  const { connect } = useSafe()\n\n  const signerAddress = '0x...'\n\n  return (\n    <button onClick={() => connect(signerAddress)}>\n      Connect\n    </button>\n  )\n}\n\nexport default Connect\n```\n\n----------------------------------------\n\nTITLE: Creating Rejection Transaction with Protocol Kit in TypeScript\nDESCRIPTION: This snippet shows how to use the `createRejectionTransaction` method from the `protocolKit` instance. It takes a `nonce` as a parameter and returns a `SafeTransaction` object that can be signed to invalidate a pending transaction with that nonce. It depends on a pre-initialized `protocolKit` instance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createrejectiontransaction.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  MetaTransactionData,\n  OperationType\n} from '@safe-global/types-kit'\nimport { protocolKit } from './setup.ts'\n\nconst nonce = 123\n\nconst rejectionTransaction = await protocolKit.createRejectionTransaction(nonce)\n```\n\n----------------------------------------\n\nTITLE: Confirming Transaction - Safe Transaction Service API - Bash\nDESCRIPTION: Submits an HTTP POST request to add one or more confirmations (signatures) to a pending Safe transaction. The transaction is identified by its hash in the URL path. The request body is expected to contain the signature(s) to be added. This endpoint does not support delegate-based confirmations. Returns a 201 status code on successful confirmation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-scroll.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Contract\nDESCRIPTION: This snippet demonstrates how to retrieve the information of a specific contract using its address via a GET request. The request targets a specific endpoint with the contract address in the path. This enables retrieving detailed information about a known smart contract.  Dependencies: `curl`, a network connection.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Safe Module Transaction Response (JSON)\nDESCRIPTION: Displays a sample JSON response object returned by the \"Get Module Transaction\" API endpoint. It illustrates the structure and data types of fields like `created`, `executionDate`, `blockNumber`, `isSuccessful`, `transactionHash`, `safe`, `module`, `to`, `value`, `data`, `operation`, `dataDecoded`, and `moduleTransactionId`, providing a concrete example of the API's output format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving list of confirmations for a multisig transaction (GET API)\nDESCRIPTION: This endpoint allows users to fetch a paginated list of confirmations for a specific multisig transaction identified by 'safe_operation_hash'. It requires a path parameter and optional query parameters for pagination. The response includes confirmation details such as owner, signature, creation and modification timestamps, and confirmation type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Balances (Deprecated) via Safe Transaction Service API in Bash and JSON\nDESCRIPTION: This snippet outlines the deprecated API endpoint to retrieve Ether and ERC20 token balances of a specified Safe account. Required input includes the Safe address as a path parameter and optional query parameters `trusted` (boolean) and `exclude_spam` (boolean) to filter tokens. The endpoint returns an array of tokens including native coin balances (with null token info) and ERC20 tokens with metadata such as name, symbol, decimals, and logo URI. It shows a curl command sample and example JSON response with native and token balances. Dependencies include an HTTP client capable of GET requests and JSON parsing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Data Decoding Example (TypeScript)\nDESCRIPTION: This snippet indicates a TypeScript example file exists for posting to the data decoder endpoint. The actual code is located in the specified file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/arbitrum/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Specific Contract in JSON\nDESCRIPTION: Shows the JSON response format when retrieving a specific contract by address. The response includes the contract address, name, display name, logo URI, ABI details, and delegate call trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Delegate via POST request (TypeScript & curl)\nDESCRIPTION: Describes the API route to add a new delegate, including the requirement of signing an EIP712 message. The payload involves delegate address, TOTP, and domain information. The request can accept malformed data, with responses indicating acceptance or errors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/blast/-v2-delegates--post.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-blast.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting safeTxHash\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, specifically highlighting the `safeTxHash` parameter. This parameter provides the unique hash of the proposed Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData,\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Transfers with cURL - List Transfers\nDESCRIPTION: This cURL request retrieves a list of token transfers for a specific Safe address. The endpoint returns up to 1000 newest transfers with pagination support and various filtering options.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Messages with Config in TypeScript\nDESCRIPTION: This snippet illustrates calling the getMessages method with a Safe address and a configuration object containing optional parameters like ordering, limit, and offset. The method returns a promise resolving to a paginated list of messages for the specified Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmessages.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeAddress = '0x...'\n\nconst messagesResponse = await apiKit.getMessages(safeAddress, {\n  ordering: 'created', // Optional\n  limit: 10, // Optional\n  offset: 50 // Optional\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message using cURL\nDESCRIPTION: Demonstrates how to add a new signed message for a specific Safe account address (`0xcd2...c75`) using a POST request to the Safe Transaction Service API endpoint `/api/v1/safes/{address}/messages/` via cURL. Requires the message content (string or EIP712 object) in the request body (shown as empty `{}` for brevity) and returns a 201 Created status on success.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Incoming Transfers (JSON)\nDESCRIPTION: This JSON block provides a sample structure and content for a successful response from the 'List Incoming Transfers' API endpoint. It shows the pagination metadata (`count`, `next`, `previous`) and an array of `results`, where each element represents an incoming transfer with details like type, date, transaction hash, sender, recipient, value, and token information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Collectibles Listing - json\nDESCRIPTION: Example JSON response illustrating the structure returned by the collectibles listing endpoint. Contains pagination metadata such as count, next, and previous URLs, plus an array of collectibles with properties including address, tokenName, tokenSymbol, logoUri, id, uri, name, description, imageUri, and metadata object. This sample response demonstrates successful retrieval with one collectible. Input corresponds to a Safe account address; output is a structured paginated response as per the API schema.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\n      \"tokenName\": \"SampleNft\",\n      \"tokenSymbol\": \"SN\",\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\n      \"id\": \"1\",\n      \"uri\": null,\n      \"name\": null,\n      \"description\": null,\n      \"imageUri\": null,\n      \"metadata\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supported Tokens List via Safe Transaction Service API - Bash\nDESCRIPTION: This snippet demonstrates how to perform a GET request to the Safe Transaction Service API to retrieve a paginated list of supported tokens. It includes optional query parameters 'limit' for specifying the number of results per page and 'offset' for the starting index. The expected response returns an object containing a count of tokens, pagination links (next and previous), and an array of token objects each with 'url' and 'description'. Dependencies include having curl installed and network access to https://safe-transaction-zkevm.safe.global. The output is JSON with token metadata; no limitations are specified.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Safe Transactions (TypeScript)\nDESCRIPTION: This TypeScript snippet details how to create, sign, and execute a Safe transaction with the Safe SDK. Assumes safeSdk has been initialized. The snippet sets up transaction data for value transfers or contract calls, creates a transaction, collects signatures, and, once the signature threshold is met, executes the transaction on-chain. Inputs include the recipient address, ETH value, and optional data; outputs are transaction hashes and receipt confirmation. Requires multi-signature setup, and errors if signatures are insufficient.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Creating and executing a transaction\nconst safeTransactionData = {\n  to: '0x...',\n  value: ethers.utils.parseEther('0.1').toString(),\n  data: '0x'\n}\n\nconst safeTransaction = await safeSdk.createTransaction({ safeTransactionData })\nconst signedSafeTransaction = await safeSdk.signTransaction(safeTransaction)\n\n// If we have the threshold of signatures\nconst txHash = await safeSdk.executeTransaction(signedSafeTransaction)\n```\n\n----------------------------------------\n\nTITLE: List Safe Multisig Transactions with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve a list of multisig transactions for a specific Safe address using the curl command-line tool. It performs a GET request to the Safe Transaction Service API on the Linea network, including standard JSON headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_33\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Get Delegates - TypeScript\nDESCRIPTION: This snippet shows how to retrieve the delegates associated with a Safe address using the Safe API Kit in TypeScript. It initializes the API Kit and calls the `getSafeDelegates` method with the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the API Kit\n      const apiKit = new SafeApiKit({\n        chainId: 11155111n\n      })\n\n      // Get the Safe delegates\n      const delegates = await apiKit.getSafeDelegates({\n        delegatorAddress: config.SAFE_ADDRESS\n      })\n```\n\n----------------------------------------\n\nTITLE: Calculating Safe Proxy Deployment Init Code Calldata in TypeScript\nDESCRIPTION: Generates the concatenated initialization code call data required for deploying a Safe proxy using the SafeProxyFactory's `createProxyWithNonce` function. This involves encoding the function call with the singleton address, initializer data, and salt nonce, then concatenating it with the factory address. Requires `viem` for `encodeFunctionData` and `concatHex`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData, concatHex } from 'viem'\n\n// Assume safeProxyFactoryAddress, safeSingletonAddress, initializer, saltNonce are defined\n\nconst getInitCodeCallData = () => {\n  // Example ABI fragment for createProxyWithNonce\n  const createProxyWithNonceAbi = [\n    {\n      \"inputs\": [\n        {\n          \"internalType\": \"address\",\n          \"name\": \"_singleton\",\n          \"type\": \"address\"\n        },\n        {\n          \"internalType\": \"bytes\",\n          \"name\": \"initializer\",\n          \"type\": \"bytes\"\n        },\n        {\n          \"internalType\": \"uint256\",\n          \"name\": \"saltNonce\",\n          \"type\": \"uint256\"\n        }\n      ],\n      \"name\": \"createProxyWithNonce\",\n      \"outputs\": [\n        {\n          \"internalType\": \"contract SafeProxy\",\n          \"name\": \"proxy\",\n          \"type\": \"address\"\n        }\n      ],\n      \"stateMutability\": \"nonpayable\",\n      \"type\": \"function\"\n    }\n  ];\n\n  const initCodeCallData = encodeFunctionData({\n    abi: createProxyWithNonceAbi, \n    functionName: 'createProxyWithNonce',\n    args: [safeSingletonAddress, initializer, saltNonce]\n  })\n\n  return concatHex([safeProxyFactoryAddress, initCodeCallData])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TestToken ERC20 contract in Solidity\nDESCRIPTION: This contract provides a simple ERC20 token implementation for testing purposes, inheriting functionality from OpenZeppelin's ERC20 base contract and Ownable for access control. It includes a constructor to initialize token name and symbol and a mint function restricted to the contract owner to create new tokens. This contract serves as a token source to test transfer and withdrawal features in the Safe module environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: LGPL-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract TestToken is ERC20, Ownable {\n    constructor(\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) Ownable(msg.sender){}\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit with a Passkey Signer in TypeScript\nDESCRIPTION: Demonstrates creating a `passkeySigner` using `Safe.createPasskeySigner` with a WebAuthn `credential`. The resulting signer is then used alongside an RPC URL and Safe address to initialize the Safe Protocol Kit via `Safe.init`. Requires a pre-existing WebAuthn credential obtained via `window.navigator.credentials.create`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/passkeys/createpasskeysigner.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rpcUrl = \"https://...\"\nconst credential = window.navigator.credentials.create({ ... })\n\nconst passkeySigner = await Safe.createPasskeySigner(credential)\n\nconst protocolKit = await Safe.init({\n  provider: rpcURL,\n  signer: passkeySigner,\n  safeAddress\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Addresses for Safe Protocol Components on Gnosis Chain\nDESCRIPTION: Sets constant variables for key contract addresses required for deploying and interacting with Safe protocol components. These include EntryPoint, Safe Smart Account, Safe4337Module, and AddModuleLib, with links to the exact deployments based on network considerations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst ENTRYPOINT_ADDRESS_V06 = '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789'\n\n// https://github.com/safe-global/safe-modules-deployments/blob/main/src/assets/safe-4337-module/v0.2.0/add-modules-lib.json#L8\nconst ADD_MODULE_LIB_ADDRESS = '0x8EcD4ec46D4D2a6B64fE960B3D64e8B94B2234eb'\n\n// https://github.com/safe-global/safe-modules-deployments/blob/main/src/assets/safe-4337-module/v0.2.0/safe-4337-module.json#L8\nconst SAFE_4337_MODULE_ADDRESS = '0xa581c4A4DB7175302464fF3C06380BC3270b4037'\n\n// https://github.com/safe-global/safe-deployments/blob/main/src/assets/v1.4.1/safe_proxy_factory.json#L13\nconst SAFE_PROXY_FACTORY_ADDRESS = '0x4e1DCf7AD4e460CfD30791CCC4F9c8a4f820ec67'\n\n// https://github.com/safe-global/safe-deployments/blob/main/src/assets/v1.4.1/safe.json#L13\nconst SAFE_SINGLETON_ADDRESS = '0x41675C099F32341bf84BFc5382aF534df5C7461a'\n\n// https://github.com/safe-global/safe-deployments/blob/main/src/assets/v1.4.1/multi_send.json#L13\nconst SAFE_MULTISEND_ADDRESS = '0x38869bf66a61cF6bDB996A6aE40D5853Fd43B526'\n```\n\n----------------------------------------\n\nTITLE: Encoding Safe `enableModules` Calldata in TypeScript\nDESCRIPTION: Generates ABI-encoded calldata for a call to the `enableModules` function on a Safe contract. This function is used to authorize a new module, such as the Safe 4337 module, for the Safe account. Requires the address of the module to enable and uses `viem`'s `encodeFunctionData`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { encodeFunctionData } from 'viem';\n\nconst enableModuleCallData = (safe4337ModuleAddress: `0x${string}`) => {\n  return encodeFunctionData({\n    abi: [\n      {\n        inputs: [\n          {\n            internalType: 'address[]',\n            name: 'modules',\n            type: 'address[]'\n          }\n        ],\n        name: 'enableModules',\n        outputs: [],\n        stateMutability: 'nonpayable',\n        type: 'function'\n      }\n    ],\n    functionName: 'enableModules',\n    args: [[safe4337ModuleAddress]]\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates via Safe Transaction Service (Curl)\nDESCRIPTION: Shows how to use Curl to perform a GET request on the /api/v2/delegates/ endpoint of the Safe Transaction Service. Includes required headers for Accept and Content-Type as application/json. Expects optional query parameters for filtering and pagination. The output is a JSON-formatted paginated list of delegates, containing fields like safe, delegate, delegator, label, and expiryDate. Does not require authentication but expects a valid API base URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching SafeOperation via Safe Transaction API using Bash\nDESCRIPTION: This snippet uses a Bash cURL command to request a SafeOperation from the Safe Global Transaction API. It requires the Safe operation hash to be specified in the URL path (parameter: safe_operation_hash), and sets appropriate 'Accept' and 'content-type' headers for a JSON response. The primary input is a Safe operation hash, and the output will be a JSON representation of the SafeOperation object. This command requires an active internet connection and cURL installed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Loading a Safe using Safe-CLI\nDESCRIPTION: Loads an existing Safe by providing the Safe's checksummed address and the Ethereum node URL. After execution, the CLI displays Safe details such as owners and version. It requires prior installation of Safe CLI and accessible node connection.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsafe-cli <checksummed_safe_address> <ethereum_node_url>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Module Transactions via HTTP GET using curl (Bash)\nDESCRIPTION: This Bash snippet uses curl to perform an HTTP GET request to the Safe Global API endpoint for fetching module transactions related to a given Safe address. It sets the appropriate Accept and Content-Type headers for JSON communication. The command retrieves paginated transaction data in JSON format, enabling shell users or automation scripts to fetch and process module transactions without relying on additional SDKs or clients.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Incoming Transfers - Safe Transaction Service API - Bash\nDESCRIPTION: This Bash snippet demonstrates how to send a GET request using curl to the Safe Transaction Service API for retrieving up to 1000 incoming Ether or token transfers to a specified Safe address. The script sets the Accept and Content-Type headers to application/json and targets the /api/v1/safes/{address}/incoming-transfers/ endpoint. Replace the example Safe address in the URL with your target Safe address; the API supports additional query parameters for filtering by sender, block number, timestamps, token type, and pagination. The response will be JSON formatted, and requires no authentication.\n\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat and Safe Dependencies\nDESCRIPTION: Installs necessary development dependencies using npm: `hardhat` for development environment, `@safe-global/safe-contracts` for Safe smart contract interfaces and base contracts, and `hardhat-dependency-compiler` to compile imported dependencies.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm add -D hardhat @safe-global/safe-contracts hardhat-dependency-compiler\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Token Info with cURL\nDESCRIPTION: The snippet demonstrates fetching information about a specific token using the Safe Transaction Service API. It sends a GET request to the /api/v1/tokens/{address}/ endpoint, where {address} is the token's contract address. The response will contain token details.  It uses the cURL command and sets headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Importing UseSafeInfoParams Type\nDESCRIPTION: Shows how to import the UseSafeInfoParams type from the Safe React Hooks library, which is used to customize the hook behavior.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsafeinfo.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseSafeInfoParams } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Placeholder: Signing a Message (TypeScript)\nDESCRIPTION: TypeScript example placeholder for adding a signature to a message via the POST /api/v1/messages/{message_hash}/signatures/ endpoint. The actual code resides in the referenced external file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/xlayer/-v1-messages-{message_hash}-signatures--post.ts\n```\n\n----------------------------------------\n\nTITLE: Confirm Transaction Success Response - Safe Transaction Service API - JSON\nDESCRIPTION: An example of the JSON response returned by the Safe Transaction Service API after successfully adding a confirmation to a multisig transaction. The response body typically contains the signature that was added or registered by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Supported Tokens via API (Bash)\nDESCRIPTION: Sends a GET request using curl to the `/api/v1/tokens/lists/` endpoint of the Safe Transaction Service API to retrieve a list of supported tokens. The request specifies `Accept: application/json` and `content-type: application/json` headers. Optional query parameters `limit` and `offset` can be used for pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Listing Safe Operations (JSON)\nDESCRIPTION: This JSON object represents a sample response from the `/api/v1/safes/{address}/safe-operations/` endpoint. It includes pagination details (`count`, `next`, `previous`) and a `results` array containing Safe Operation objects. Each object details creation/modification timestamps, `safeOperationHash`, `moduleAddress`, `confirmations` (including owner signatures), `preparedSignature`, and the associated `userOperation` with its details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Transactions from Safe Global API Using TypeScript\nDESCRIPTION: This snippet comes from a TypeScript example demonstrating how to make a GET request to the Safe Global transaction service endpoint to list all transactions for a specific safe address. It requires TypeScript and an HTTP client capable of handling requests. The key parameter is the safe address as part of the URL path. The snippet provides context for invoking the API call, which returns detailed transaction data as JSON, including execution details, confirmations, and transfers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens Sample Response - json\nDESCRIPTION: Example JSON response illustrating the paginated token list format provided by the tokens endpoint. Includes count, next and previous links, and an array of token objects with fields such as type, address, name, symbol, decimals, logoUri, and trusted boolean. Demonstrates token attributes relevant to clients consuming the API. Inputs are optional query filters; outputs include available token data with pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1846,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ERC20\",\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n      \"name\": \"0x5555.com\",\n      \"symbol\": \"0x5555.com\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n      \"trusted\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering the Sepolia API Reference Component\nDESCRIPTION: This JSX code renders the ApiReference component with the Sepolia network name. It's the main display component that will present the API documentation for the Sepolia network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/sepolia.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference networkName=\"sepolia\"/>\n```\n\n----------------------------------------\n\nTITLE: Using ApiReference React component for API documentation embedding\nDESCRIPTION: This snippet integrates an ApiReference React component, passing a network name prop to display API documentation specific to the 'worldchain' network. It is used within React JSX to embed API reference content in documentation pages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/worldchain.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference networkName=\"worldchain\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component with Network Name Prop - JSX\nDESCRIPTION: This snippet shows usage of the ApiReference React component, which displays API documentation for a given blockchain network. The networkName prop is set to \"zkevm\" to specify the context or target network for the API. This JSX element is intended to render the UI with the preprocessed static props such as headings and schema extracted elsewhere. The snippet assumes the ApiReference component handles rendering the details based on the passed networkName and the static props provided at build time.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/zkevm.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference networkName=\"zkevm\"/>\n```\n\n----------------------------------------\n\nTITLE: Decoding Data - cURL Request\nDESCRIPTION: This cURL command sends a POST request to the /api/v1/data-decoder/ endpoint to decode transaction data. It includes the necessary headers for content negotiation and specifies that the request body is JSON formatted. The request expects the data in a particular format, which would be specified in the TypeScript code or documentation. The API returns decoded data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving pending Safe operations with optional filters in TypeScript\nDESCRIPTION: This code snippet demonstrates calling the 'getPendingSafeOperations' method of the SafeApiKit instance with parameters such as safe address, ordering, limit, and offset to fetch a paginated list of pending Safe operations. It requires prior SDK initialization and a valid Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getpendingsafeoperations.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getPendingSafeOperations(\n  {\n    safeAddress: '0x...'\n  }\n)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getPendingSafeOperations(\n  {\n    safeAddress: '0x...',\n    ordering: 'created'\n  }\n)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getPendingSafeOperations(\n  {\n    safeAddress: '0x...',\n    limit: 10\n  }\n)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getPendingSafeOperations(\n  {\n    safeAddress: '0x...',\n    offset: 50\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Getting ERC-4337 Account Nonce in TypeScript\nDESCRIPTION: Shows how to retrieve the current nonce for an ERC-4337 account (the `sender`, which is the predicted Safe address) using the `getAccountNonce` function, presumably from an ERC-4337 library like `permissionless`. This interacts with the specified EntryPoint contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume publicClient, ENTRYPOINT_ADDRESS_V06, sender are defined\n// Assume getAccountNonce function is available (e.g., from 'permissionless')\nimport { getAccountNonce } from 'permissionless'; // Example import\nimport { Client } from 'viem';\n\nconst nonce = await getAccountNonce(publicClient as Client, {\n  entryPoint: ENTRYPOINT_ADDRESS_V06,\n  sender // The address of the smart account (the predicted Safe address)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for Safe and Passkey Integration – Bash\nDESCRIPTION: This bash command uses pnpm to install core project dependencies including Safe{Core} SDK's Protocol Kit and Relay Kit, the viem library for transaction encoding, Pinia for state management, and Vite's node polyfills. All packages are version-pinned for compatibility. Requires a Nuxt app directory initialized prior to running.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/nuxt.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/protocol-kit@4.1.0 @safe-global/relay-kit@3.1.0 viem @pinia/nuxt vite-plugin-node-polyfills\n```\n\n----------------------------------------\n\nTITLE: Creating Delegate via Safe Transaction Service (Curl)\nDESCRIPTION: Demonstrates how to send a POST request using Curl to the /api/v2/delegates/ endpoint to add a new Safe delegate. Required headers are set and payload should include EIP-712 signed data as described previously. The response is empty on success (HTTP 202), and may return error responses for malformed data. Used for command-line or automated scripting scenarios.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-gnosis-chain.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Deleting a Delegate by Address\nDESCRIPTION: This snippet documents the DELETE request at `/api/v2/delegates/{delegate_address}/` used to remove all delegate/delegator associations linked with a specific delegate address. It details parameters, possible responses, and status codes for success or failure cases, including malformed data or invalid address errors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-xlayer.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving Module Transaction via Safe API (Bash)\nDESCRIPTION: Sends a GET request using cURL to retrieve details of a specific module transaction from the Safe Transaction Service API. The request requires the `module_transaction_id` as a path parameter and specifies `Accept: application/json` and `content-type: application/json` headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Transfer using Curl (Bash)\nDESCRIPTION: Sends a GET request using curl to the `/api/v1/transfer/{transfer_id}` endpoint to retrieve details for a specific transfer identified by its `transfer_id`. The request includes `Accept: application/json` and `content-type: application/json` headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request for Get Module Transaction\nDESCRIPTION: Shows a sample cURL command to send a GET request to the module transaction API endpoint with a specific transaction ID, demonstrating how to fetch transaction details from the server.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n  -H \"Accept: application/json\" \\\n  -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Delegates Filtered by Safe Address (TypeScript)\nDESCRIPTION: Retrieves the list of delegates specifically for a given Safe address. This is done by providing the `safeAddress` parameter within the configuration object passed to `getSafeDelegates`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafedelegates.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst delegates = await apiKit.getSafeDelegates({\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Get Multisig Transaction via API - cURL\nDESCRIPTION: This cURL command retrieves a multi-signature transaction from the Safe Transaction Service API using the Safe transaction hash. It sends a GET request to the specified endpoint with appropriate headers for JSON data. The response contains details about the multisig transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Paginating Safe Operations Results by Offset - TypeScript\nDESCRIPTION: This example demonstrates using the offset parameter to skip the first 50 Safe operations and return results starting from the 51st entry when calling getSafeOperationsByAddress. Useful for implementing pagination UIs. Requires apiKit and @safe-global/api-kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationsbyaddress.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getSafeOperationsByAddress(\n  {\n    safeAddress: '0x...',\n    offset: 50\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message via Safe Transaction API (Bash/TypeScript/JSON)\nDESCRIPTION: Adds a new message (string or EIP712 object) for a specific Safe account using a POST request to `/api/v1/safes/{address}/messages/`. Requires the Safe `address` as a path parameter and the message data in the request body (represented as '{}' in the example, but should contain actual message details). The service calculates the hash internally (EIP191 for string, EIP712 for object). Returns a 201 status code upon successful creation with an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/arbitrum/-v1-safes-{address}-messages--post.ts\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safe Balances Request\nDESCRIPTION: This JSON array demonstrates the structure of balance data returned from the API, including the native coin's balance and ERC20 token balances with detailed token info. It helps developers parse and utilize the balance information for display or further processing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safes by Owner Query\nDESCRIPTION: Example JSON response returned by the `/api/v1/owners/{address}/safes/` endpoint. The response object contains a `safes` key, holding an array of strings where each string is the address of a Safe owned by the specified owner address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_48\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queued Multisig Transaction - Bash\nDESCRIPTION: Shows how to delete a queued multisig transaction using a DELETE request to the Safe Transaction Service API.  The request includes the safe transaction hash in the URL. An empty JSON payload is sent in the request body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-sepolia.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Transfer with Safe Transaction REST API (Bash)\nDESCRIPTION: This Bash snippet shows how to fetch details of a single transfer using its unique transferId via the Safe Transaction REST API. The curl command performs a GET request to /api/v1/transfer/{transfer_id}, with an example transfer_id '3b3b57b3'. Requirements are curl, internet access, and an existing transferId. The request and response specify application/json for data formatting, and the result includes transfer metadata. Returns 200 for success, 400 for invalid ID, and 404 if the transfer does not exist.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: amountToApprove Parameter\nDESCRIPTION: Example showing how to define `amountToApprove` parameter which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions,\n  ammountToApprove\n})\n```\n\n----------------------------------------\n\nTITLE: Using safeTxGas option in createEnableGuardTx in TypeScript\nDESCRIPTION: This snippet shows how to use the `safeTxGas` option when calling `createEnableGuardTx`.  `safeTxGas` is a string representing the gas that should be used for the Safe transaction. It is part of an `options` object passed to the `createEnableGuardTx` function. This code assumes that the `protocolKit` is initialized and that the `options` object is properly structured.  The `options` parameter is optional, and other optional parameters are available to configure the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableGuardTx(\n  '0x...',\n  options: {\n    safeTxGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Transactions List Response - JSON\nDESCRIPTION: This JSON response represents a paginated list of transactions for a Safe. It includes the total count of transactions, links to the next and previous pages (if available), and an array of transaction objects. Each transaction object contains details such as the Safe address, recipient, value, data, operation type, gas parameters, and confirmation status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Web3Auth\nDESCRIPTION: Code to initiate the login process which opens the Web3Auth popup for user authentication via email or social accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/web3auth.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst web3authProvider = await web3auth.connect()\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for listing Safe module transactions\nDESCRIPTION: This sample response shows the structure of data returned by the API when querying for module transactions of a Safe address. It includes transaction details such as creation time, execution date, block number, transaction hash, involved modules, value, and operation type, illustrating the expected output format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example Snippet (Context Unavailable)\nDESCRIPTION: The text references a TypeScript example file, however, the code for the snippet is missing. It is likely a TypeScript file used for the /v1/data-decoder API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/worldchain/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Pending Transactions - Using Custom Config\nDESCRIPTION: This snippet shows how to override the default configuration for `getPendingTransactions` by passing a custom `config` object. It imports the `config` object from a local file and uses it as a parameter for `getPendingTransactions`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getpendingtransactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = getPendingTransactions({\n  config\n})\n```\n\n----------------------------------------\n\nTITLE: UserOperationWithPayload Type Definition\nDESCRIPTION: Defines the `UserOperationWithPayload` type, which is the return type of the `getUserOperationByHash` method. It includes the user operation, entry point, transaction hash, block hash, and block number.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nUserOperationWithPayload = {\n  userOperation: UserOperation\n  entryPoint: string\n  transactionHash: string\n  blockHash: string\n  blockNumber: string\n}\n```\n\n----------------------------------------\n\nTITLE: Get Delegates - Python\nDESCRIPTION: This snippet shows how to retrieve the delegates associated with a Safe address using the `safe-eth-py` library. It instantiates the Transaction Service API and calls the `get_delegates` method with the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Instantiate the Transaction Service API\n      ethereum_client = EthereumClient(config.get(\"RPC_URL\"))\n      transaction_service_api = TransactionServiceApi(\n          network=EthereumNetwork.SEPOLIA,\n          ethereum_client=ethereum_client)\n\n      # Get delegates from a Safe\n      delegates_for_safe = transaction_service_api.get_delegates(\n          config.get(\"SAFE_ADDRESS\"))\n```\n\n----------------------------------------\n\nTITLE: Prepared Signature Example\nDESCRIPTION: This snippet shows an example of a 'preparedSignature' property, which is a hex encoded string. It is used to represent a prepared signature for a transaction within the Safe ecosystem. The signature contains data related to the transaction, approvals, and origins.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_63\n\nLANGUAGE: text\nCODE:\n```\n\"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safes by Module using cURL\nDESCRIPTION: Sends a GET request to the `/api/v1/modules/{address}/safes/` endpoint of the Safe Transaction Service API to retrieve a list of Safes that have the specified module address enabled. The example uses a specific module address (0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75) on the Worldchain network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Estimate Gas Cost - Curl\nDESCRIPTION: This `curl` command sends a POST request to the Safe transaction service API to estimate gas costs for a multi-signature transaction. The request targets the `/estimations/` endpoint of the API.  It uses the same headers as the transaction creation request and includes an empty JSON payload.  The `address` parameter in the URL specifies the Safe account. The command constructs and sends an HTTP POST request to estimate gas costs and shows the correct API endpoint to use.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Defining Signer Private Key Variable (TypeScript)\nDESCRIPTION: Declares a constant variable `SIGNER_PRIVATE_KEY` which is intended to store the private key string of the Ethereum account that will act as the signer for the deployment transactions. This private key is crucial for authorizing the transactions needed to deploy the Safe contracts on the target networks. The actual key value is not provided in the snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/multichain-safe-deployment.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst SIGNER_PRIVATE_KEY = // ...\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Multisig Transactions using cURL\nDESCRIPTION: Demonstrates how to make a GET request using cURL to the `/api/v1/safes/{address}/multisig-transactions/` endpoint on the Sepolia network's Safe Transaction Service. This example retrieves multisig transactions for the Safe address `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` and specifies that the response should be in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Get a Specific Token's Information via cURL\nDESCRIPTION: This cURL snippet fetches detailed information for a specific token using its address.  It's a GET request against the /api/v1/tokens/{address}/ endpoint.  The address 0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ is used in the example.  Headers specify JSON content.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\ \n    -H \"Accept: application/json\" \\ \n    -H \"content-type: application/json\" \\ \n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response - Data Decoder API (JSON)\nDESCRIPTION: This JSON snippet is an example response from the data-decoder endpoint. It contains the decoded method name and an array of parameter objects, each with a name, type, and extracted value. If the calldata cannot be decoded, the API may return a 404 (function selector unknown) or a 422 (invalid data).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Contracts via API GET Request\nDESCRIPTION: This snippet provides the curl command to fetch a paginated list of known smart contracts, including headers and query parameters. It helps users retrieve contract data such as addresses, names, and ABI details from the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Create Signed Message - Safe Transaction Service API - bash curl\nDESCRIPTION: Illustrates a `curl` command used to send a POST request to create a new message entry for a specified Safe account. The request targets the `/api/v1/safes/{address}/messages/` endpoint and requires the Safe address as a path parameter and a request body containing the message details (though shown as empty in this example).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_18\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X POST https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Listing Contracts - API Request\nDESCRIPTION: This snippet shows how to retrieve a list of known smart contracts using a GET request to the `/api/v1/contracts/` endpoint. The request specifies the `Accept` and `content-type` headers as `application/json`.  It is used to obtain contract metadata like address, name, ABI, and trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Adding a new confirmation for a multisig transaction via POST request\nDESCRIPTION: This snippet documents the API endpoint to add a confirmation to a specific transaction identified by 'safe_operation_hash'. It indicates the method, required path parameter, expected response codes for success or errors, and provides a sample curl command for making the POST request. This operation supports multiple signatures but does not handle delegate-based transaction trust.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-worldchain.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Module Transactions with TypeScript\nDESCRIPTION: This snippet references a TypeScript example that demonstrates how to perform a GET request to retrieve the list of module transactions for a Safe address using the Safe Transaction Service API. It likely utilizes an HTTP client (such as fetch or axios) and handles parameters such as address, filters, and pagination. Ensure Node.js and relevant TypeScript dependencies are installed. Input is the Safe address and optional query parameters; output is the parsed JSON response described in the documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Multisig Transactions (TypeScript)\nDESCRIPTION: This TypeScript snippet is a placeholder indicating where code from the specified file (`../examples/optimism/-v1-safes-{address}-multisig-transactions--get.ts`) should be included. It demonstrates how to retrieve multisig transactions for a given Safe address using the Safe Transaction Service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for BSC API Reference in Next.js (JavaScript)\nDESCRIPTION: Defines an asynchronous function getStaticProps that precomputes documentation page metadata for the BSC API Reference page by rendering the MDX component to an HTML string and extracting headings with provided utility functions. Relies on React server-side rendering (renderToString), the custom MDXComponents, imported MDX module for BSC, and a Swagger JSON schema. Expects no direct input; outputs an object with headings for use as static site generation props. Requires the MDX, swagger JSON, and utilities to be present and accessible.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/bsc.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Rendering MDX Content and Extracting Headings (JavaScript/JSX)\nDESCRIPTION: This snippet imports necessary modules, renders MDX component 'Mdx' to an HTML string on the server, extracts headings from Swagger JSON and the rendered content, and returns these as static props for pre-rendering. It depends on React, server-side rendering functions, and custom MDX and Swagger utilities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/mainnet.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Props Generation with React and MDX\nDESCRIPTION: This snippet defines an asynchronous function 'getStaticProps' that renders an MDX component to a string, extracts headings from HTML content, and returns these headings as part of static site properties. It depends on React, MDX components, and custom utility functions for rendering and parsing HTML. The purpose is to facilitate static generation of documentation pages with structured headings.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/blast.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Creation Info\nDESCRIPTION: This snippet demonstrates how to use `curl` to retrieve the creation information for a Safe at a specific address. It sends a GET request to the `/api/v1/safes/{address}/creation/` endpoint with the address of the Safe and expects a JSON response containing details about the Safe's creation transaction, creator, factory address, master copy, and setup data. The `Accept` and `content-type` headers specify that the client expects a JSON response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transaction Data with curl in Bash\nDESCRIPTION: This code demonstrates how to make a GET request to retrieve details about a multisig transaction using the Safe Transaction Service API on the Polygon network with a specific safe transaction hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Add Multisig Confirmation - cURL\nDESCRIPTION: Demonstrates how to send a POST request to the Safe Transaction Service API using cURL to add a new confirmation for a specific Safe transaction. The transaction is identified by its safe transaction hash in the path. The example shows an empty request body, although typically this request would include the signature data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-gnosis-chain.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Initializing a Safe Smart Account with Protocol Kit (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates creating a Safe account using the @safe-global/protocol-kit and ethers SDKs. Required dependencies are installed packages @safe-global/protocol-kit and ethers. The snippet initializes an ethers provider and signer, creates a SafeFactory, configures an account with owners and a signature threshold, and deploys a Safe account. Inputs are private API keys and owner addresses; output is the deployed Safe instance. Prerequisite: valid Infura/Alchemy endpoint and private key for deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Protocol Kit example\nimport Safe, { SafeFactory, SafeAccountConfig } from '@safe-global/protocol-kit'\nimport { ethers } from 'ethers'\n\n// Create a Safe account\nconst provider = new ethers.providers.JsonRpcProvider('https://sepolia.infura.io/v3/your-api-key')\nconst signer = new ethers.Wallet('your-private-key', provider)\n\nconst safeFactory = await SafeFactory.create({ ethAdapter: new EthersAdapter({ ethers, signerOrProvider: signer }) })\n\nconst safeAccountConfig: SafeAccountConfig = {\n  owners: ['0x...', '0x...'],\n  threshold: 2\n}\n\nconst safeSdk = await safeFactory.deploySafe({ safeAccountConfig })\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Status Response\nDESCRIPTION: This is a sample JSON response from the `/api/v1/safes/{address}/` endpoint. It contains details about a Safe, including its address, nonce, threshold, owners, master copy, modules, fallback handler, guard and version.  This response illustrates the structure of the data returned when querying a Safe's status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Transfer by ID REST API JSON Response Example\nDESCRIPTION: Example JSON response representing the detailed transfer data returned from the API when queried by transfer ID. It includes the transfer type, execution date, block information, transaction hash, addresses involved, value transferred, unique transferId, and associated token info when applicable. This structure helps uniquely identify and describe individual transfers within the Safe ecosystem.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Balances via Safe Global API (Deprecated) in Bash and JSON\nDESCRIPTION: This snippet illustrates how to use the deprecated Safe Global API endpoint to list Ether and ERC20 token balances for a given Safe account. The required path parameter is the Safe's address. Optional query parameters include 'trusted' to filter for trusted tokens only and 'exclude_spam' to omit spam tokens. A sample curl command demonstrates how to make the GET request with JSON accept headers. The example JSON response shows balance data for a native coin and an ERC20 token with associated metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Delegate with EIP-712 Data (Python)\nDESCRIPTION: Explains the structure of EIP-712 typed data required to sign when adding a delegate using the Safe Transaction Service. The data includes the types for EIP712Domain and Delegate, and message fields for delegateAddress and TOTP. Used as payload for generating a cryptographically secure signature. The Python data structure needs to be filled with actual chain_id, delegate_address, and totp at runtime. No external dependencies apart from signing with EIP-712 support.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using getChain with custom SafeConfig\nDESCRIPTION: Shows how to use the `getChain` function with a custom `SafeConfig` object, overriding the default configuration from `SafeProvider`. This configuration allows for specifying the chain, provider, signer, and Safe address to use. It requires the `@safe-global/safe-react-hooks` and `viem` packages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getchain.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = getChain({\n  config\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Recipient Address (`to`) in `safeClient.send` in TypeScript\nDESCRIPTION: Illustrates setting the recipient address (`to`) within the `transactions` array when calling `safeClient.send`. This parameter defines the destination address for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Response Get Safes By Owner Safe Transaction Service API JSON\nDESCRIPTION: This JSON object provides an example of a successful response from the Safe Transaction Service API's `/api/v1/owners/{address}/safes/` endpoint. It includes the `safes` property, which is an array of strings, with each string being the address of a Safe account owned by the queried address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies for Safe and Gelato Relay\nDESCRIPTION: Install the necessary npm packages for interacting with Safe and Gelato Relay using Yarn. This includes the ethers library for blockchain interaction, and the @safe-global/ packages for protocol, relay, and type utilities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/gelato-relay.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add ethers @safe-global/relay-kit @safe-global/protocol-kit @safe-global/types-kit\n```\n\n----------------------------------------\n\nTITLE: Using Privy React Hooks\nDESCRIPTION: This snippet demonstrates how to use the `usePrivy` and `useWallets` hooks to access authentication and wallet data. It extracts variables such as `login`, `logout`, `ready`, `authenticated`, `readyWallets`, and `wallets` for handling user authentication and wallet management.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/privy.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { login, logout, ready, authenticated } = usePrivy()\n  const { ready: readyWallets, wallets } = useWallets()\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for API Reference Page Using React and MDX in JavaScript\nDESCRIPTION: This asynchronous function 'getStaticProps' renders an MDX component to HTML as a string using React's server-side rendering, then extracts headings from the rendered HTML by passing in a swagger JSON schema and the content string. It returns these headings formatted under the 'ssg' property for use in static page generation. Dependencies include React's renderToString, MDX components, a swagger schema in JSON, and a heading extraction utility. No input parameters are required. The output is an object containing extracted headings to be integrated into page props. This supports static site generation with dynamic content derived from MDX documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/mantle.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Operations via Safe Transaction API using Bash\nDESCRIPTION: This snippet demonstrates how to retrieve the list of UserOperations for a specified Safe account using a curl GET request. The request requires the Safe account address as a path parameter and returns JSON data. Required headers include Accept and content-type set to application/json. This example shows a real-world HTTP call to the Safe Transaction API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Off-Chain Message Client (TypeScript)\nDESCRIPTION: Demonstrates how to create and extend a `SafeClient` from the SDK starter kit to include off-chain message capabilities. It initializes the client with a provider, signer, and Safe address, making it ready for off-chain message operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages/getpendingoffchainmessages.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient, offChainMessages } from '@safe-global/sdk-starter-kit'\n\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nexport const offchainMessageClient = safeClient.extend(offChainMessages())\n```\n\n----------------------------------------\n\nTITLE: Constructing the SignMessageLib Contract Instance - TypeScript\nDESCRIPTION: This snippet shows how to instantiate a SignMessageLib contract for a specific Safe version using the getSignMessageLibContract utility. It requires the contract utility function getSignMessageLibContract and the version string (e.g., '1.4.1'). The output is a contract object with methods for encoding and interacting with the on-chain signMessage function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/messages.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the contract with the correct version\nconst signMessageLibContract = await getSignMessageLibContract({\n  safeVersion: '1.4.1'\n})\n```\n\n----------------------------------------\n\nTITLE: Protocol Kit Setup in TypeScript\nDESCRIPTION: Setup code for initializing the Safe Protocol Kit with a provider, signer, and Safe address. This is used as an import in the main example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/deployment/getsafeaddressfromdeploymenttx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Referencing Module Transaction API Example in TypeScript\nDESCRIPTION: This snippet points to a TypeScript example file that demonstrates calling the module transactions API endpoint for a Safe address. It assumes the existence of supporting TypeScript modules and appropriate imports within '../examples/aurora/-v1-safes-{address}-module-transactions--get.ts'. Ensure you have the necessary environment setup for running TypeScript, and the relevant HTTP request library (such as axios or fetch) is available. The example will likely include assembling the GET request, handling authentication headers, and processing the JSON response—inputs include the Safe address as a path parameter, outputs will be the paginated list of transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Unloading a loaded owner\nDESCRIPTION: Removes an owner from the CLI session by address. Helps in managing control scope within the CLI environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nunload_cli_owners <ethereum_checksummed_address>\n```\n\n----------------------------------------\n\nTITLE: Migrating `getMessages` Method Type Parameter in TypeScript\nDESCRIPTION: Demonstrates the renaming of the type parameter for the `getMessages` method from `GetSafeMessageListProps` (v2) to `GetSafeMessageListOptions` (v3).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v3.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMessages(safeAddress: string, props: GetSafeMessageListProps)\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMessages(safeAddress: string, options: GetSafeMessageListOptions)\n```\n\n----------------------------------------\n\nTITLE: Parsing Safe User Operations API Response in JSON\nDESCRIPTION: This JSON snippet illustrates a sample server response to the Safe Transaction API GET request for retrieving UserOperations related to a Safe account. The object includes pagination metadata (count, next, previous) and an array of results with detailed operation attributes. Each UserOperation contains Ethereum and operation hashes, gas parameters, sender information, and an embedded SafeOperation object detailing confirmations and module data. The structure is suitable for client-side parsing and validation. Note that actual values and array lengths may vary based on query parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definition for Listing Safe Module Transactions\nDESCRIPTION: Defines the GET API route '/api/v1/safes/{address}/module-transactions/' with path parameters, query parameters, and response schemas, including 200 (success) and 422 (validation error) responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/sepolia/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Safe Module Transaction Interface in Solidity\nDESCRIPTION: Interface definition for the execTransactionFromModule function that allows modules to execute transactions from a Safe contract. The function requires destination address, value, data payload, and operation type parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/execTransactionFromModule.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes data,\n        enum Enum.Operation operation\n    ) external returns (bool success);\n}\n\ncontract Example {\n    function example() … {\n        (ISafe safe).execTransactionFromModule(\n            0x...,\n            0,\n            \"0x...\",\n            Enum.Operation.Call\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering BSC API Reference Component (React, JavaScript)\nDESCRIPTION: Renders the top-level ApiReference React component, passing 'bsc' as the networkName prop, to display BSC network API docs in the application UI. Assumes ApiReference and associated properties are implemented to handle the given networkName and render the documentation accordingly. No external parameters required beyond component props.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/bsc.mdx#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<ApiReference networkName=\"bsc\"/>\n```\n\n----------------------------------------\n\nTITLE: Retrieve List of Contracts with cURL\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of smart contracts using a cURL command. It sends a GET request to the specified endpoint with headers for accepting JSON responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Create Signed Message - Safe Transaction Service API - json Sample Response\nDESCRIPTION: Displays a sample JSON response for a successful request to create a new message via the Safe Transaction Service API (POST method on `/api/v1/safes/{address}/messages/`). The example shows an empty response body, which is typical for a 201 Created status code indicating success.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Consolidation of Transaction Options Types\nDESCRIPTION: This code snippet highlights the transition from specific transaction option types for Ethers and Web3 to a unified TransactionOptions type. The gas property was replaced with gasLimit to standardize transaction configurations across libraries.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v4.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Previously:\n// EthersTransactionOptions and Web3TransactionOptions\n// Now:\n// TransactionOptions with gasLimit property replacing gas\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Transaction Confirmations (JSON)\nDESCRIPTION: Illustrates the JSON structure returned when listing confirmations for a multisig transaction. The response is paginated and includes the count, next/previous page URLs, and an array of results, each containing owner address, submission date, transaction hash (null if not mined), signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Operation by Hash - TypeScript and curl Examples\nDESCRIPTION: Examples showing how to retrieve detailed information about a user operation using its hash. The endpoint returns comprehensive data including transaction details, gas parameters, signatures, and associated safe operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/scroll/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n  \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n  \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n  \"nonce\": 0,\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n  \"safeOperation\": {\n    \"created\": \"2024-07-22T10:00:18.892702Z\",\n    \"modified\": \"2024-07-22T10:00:18.892702Z\",\n    \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n    \"validAfter\": null,\n    \"validUntil\": null,\n    \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n    \"confirmations\": [\n      {\n        \"created\": \"2024-07-22T10:00:18.898708Z\",\n        \"modified\": \"2024-07-22T10:00:18.898708Z\",\n        \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n        \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n        \"signatureType\": \"CONTRACT_SIGNATURE\"\n      }\n    ],\n    \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Example for Listing Safe Multisig Transactions\nDESCRIPTION: This comment indicates the location of a TypeScript example file (`../examples/zkevm/-v1-safes-{address}-multisig-transactions--get.ts`) demonstrating how to fetch multisig transactions for a Safe using the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/zkevm/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components and SVG Assets in Nextra with TypeScript\nDESCRIPTION: This snippet imports the Cards and Card components from the 'nextra/components' library and SVG assets for use as icons in a TypeScript/React environment. The imports are prerequisites for rendering navigational UI elements in the documentation site. No parameters are required; the imported components and SVGs will be used as JSX elements in subsequent UI code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Cards, Card } from 'nextra/components'\nimport Guides from '../../assets/svg/guides.svg'\nimport Reference from '../../assets/svg/reference.svg'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Transfer Details\nDESCRIPTION: Provides an example JSON response for a specific transfer, including type, execution date, block number, transaction hash, recipient, value, and transfer ID. Both transfer-specific and token info fields are included to illustrate the detailed data returned for a single transfer record.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Transaction Response - JSON\nDESCRIPTION: This JSON object provides a sample response from the Safe Transaction Service API. It includes various transaction details such as the safe address, destination address, value, data, operation type, gas-related parameters, execution date, transaction hash, safe transaction hash, proposer, executor, and information about confirmations and transfers associated with a specific transaction. This response provides a complete picture of a transaction's history and related parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8DA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8DA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operation Details using Curl Bash Command\nDESCRIPTION: This snippet provides a Bash curl command to send a GET request to the Safe transaction service API to retrieve the SafeOperation details for a specific operation hash. It includes necessary HTTP headers Accept and content-type, ensuring that the response is returned in JSON format. The command requires the operation hash as a path parameter embedded in the URL. It is intended for users to quickly test or script interaction with the Safe API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Create Signer Instance from Private Key for Safe Account Ownership in TypeScript\nDESCRIPTION: Generates a signer object from a private key to act as the owner for deploying or interacting with Safe accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signer = privateKeyToAccount(PRIVATE_KEY as Hash)\n\n```\n\n----------------------------------------\n\nTITLE: Sorting Safe Operations Results - TypeScript\nDESCRIPTION: This snippet retrieves Safe operations ordered by their creation time by setting ordering: 'created'. It demonstrates customizing the sorting of results via the ordering parameter when calling getSafeOperationsByAddress. Requires apiKit and @safe-global/api-kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationsbyaddress.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationsResponse = await apiKit.getSafeOperationsByAddress(\n  {\n    safeAddress: '0x...',\n    ordering: 'created'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Multisig Transaction with Python EIP-712 Typed Data\nDESCRIPTION: Defines the EIP-712 typed data structure in Python for signing a delete request of a queued, but not executed, multi-signature transaction. The signer must be an EOA who is either the proposer or a valid delegate. Key parameters include the safeTxHash (transaction hash) and totp (time-based one-time password calculated per 3600 second interval). Dependencies include libraries capable of generating EIP-712 signatures. Output is a signed payload authorized to delete the queued transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Get Safe Operation - Curl\nDESCRIPTION: This snippet uses curl to make a GET request to retrieve a Safe operation.  It specifies the API endpoint and headers, including the Accept and content-type, to retrieve the Safe operation in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Contract by Address via API GET Request\nDESCRIPTION: This snippet shows the curl command to fetch details of a specific contract by its address, including required headers. It allows users to obtain detailed information such as ABI, name, and other contract metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Transfer (JSON)\nDESCRIPTION: This JSON object is a sample response for a successful request to the `/api/v1/transfer/{transfer_id}` endpoint.  It provides detailed information about a specific transfer, including the transfer type, execution date, block number, transaction hash, from/to addresses, token details (if applicable), and more.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Status with TypeScript\nDESCRIPTION: This TypeScript snippet, sourced from the provided example file, demonstrates retrieving the status of a Safe account. This includes details such as address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version. The code snippet requires access to the appropriate dependencies and Safe Transaction Service configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Contracts - Sample Response\nDESCRIPTION: This JSON snippet shows the expected response format when retrieving a list of contracts from the `/api/v1/contracts/` endpoint. It includes pagination information (`count`, `next`, `previous`) and an array of `results`, where each element represents a contract with its details such as address, name, ABI, and `trustedForDelegateCall` status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transaction Confirmations Using Safe Global API - Bash\nDESCRIPTION: This snippet demonstrates how to perform a GET request to the Safe Global API to fetch a paginated list of confirmations for a multisig transaction identified by a safe_operation_hash. It requires the safe_operation_hash path parameter and supports optional query parameters for result pagination (limit and offset). The request requires Accept and content-type headers set to application/json. The response includes metadata (count, next, previous) and an array of confirmation objects containing created and modified timestamps, owner address, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Transaction - Safe Transaction Service API - Bash\nDESCRIPTION: Executes an HTTP DELETE request to the Safe Transaction Service API to remove a specific queued transaction. The transaction to be deleted is identified by its unique hash in the URL path. Requires prior EIP-712 signing by the proposer or a valid delegate to authorize the deletion. Returns a 204 status code upon successful deletion.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-scroll.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Removing an owner from the Safe\nDESCRIPTION: Deletes an owner address from the multisig, affecting approval and transaction execution flows. Must be performed with sufficient permissions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nremove_owner <address>\n```\n\n----------------------------------------\n\nTITLE: Posting Encoded Transaction Data to Data Decoder Endpoint - Bash\nDESCRIPTION: This Bash snippet demonstrates sending a POST request to the Safe Transaction Service Data Decoder endpoint to decode transaction call data. The curl command constructs the request with appropriate Accept and Content-Type headers. No request body is shown, but typically a JSON body with encoded data is required. The endpoint attempts to decode the input based on the internal ABI database and may benefit from an included contract address for accuracy. Error responses include 404 and 422 for selector and input errors.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Module Transaction - JSON\nDESCRIPTION: Provides an example of the JSON response returned by the Safe Transaction Service API when successfully retrieving a module transaction. It includes details such as execution date, block number, success status, transaction hashes, Safe and module addresses, value, data, operation type, and the unique module transaction ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Operation - cURL\nDESCRIPTION: This snippet demonstrates how to create a Safe operation using a cURL command. It makes a POST request to the /api/v1/safes/{address}/safe-operations/ endpoint. It sets the Accept and content-type headers and uses an empty JSON body. The expected output is an empty response as indicated in the sample response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\ \n    -H \"Accept: application/json\" \\ \n    -H \"content-type: application/json\" \\ \n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Specifying the Provider for createSafeClient in TypeScript\nDESCRIPTION: Highlights the `provider` parameter within the `createSafeClient` function configuration. This parameter represents the connection to the blockchain and accepts types like `Eip1193Provider`, `HttpTransport`, or `SocketTransport`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/constructor.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider, // highlight-line\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Module via cURL\nDESCRIPTION: Sends a GET request using cURL to the `/api/v1/modules/{address}/safes/` endpoint to retrieve a list of Safe addresses that have the specified module address enabled. The `{address}` path parameter should be replaced with the target module's checksummed address. The `Accept: application/json` header indicates the desired response format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_45\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response: List Messages\nDESCRIPTION: Example JSON response for the List Messages endpoint, showing a paginated list of message objects associated with the specified Safe address. Each message includes details like hash, creation/modification timestamps, confirmations, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Safe Multisig Transaction via API (curl)\nDESCRIPTION: Sends a POST request using curl to the `/api/v1/safes/{address}/multisig-transactions/` endpoint to create or add a signature to a multisig transaction for the specified Safe address. Requires 'Accept' and 'content-type' headers set to 'application/json'. The request body (shown as empty '{}' here for brevity) should contain the transaction details. A successful request returns transaction information (status code 201).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Create Multisig Transaction\nDESCRIPTION: Sample JSON response from the Create Multisig Transaction API endpoint, showing the estimated safeTxGas value for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Multisig Transaction Using EIP-712 Typed Data in Python\nDESCRIPTION: This Python snippet demonstrates the EIP-712 typed data structure required for securely deleting a queued but not executed multisignature transaction. It defines the domain, types, and message fields including safeTxHash and a time-based one-time password (totp). The EOA must sign this data to authorize deletion. Dependencies include a web3 or EIP-712 signing library capable of using this typed data structure. Key parameters are safeTxHash (transaction hash) and totp (calculated as Unix epoch time divided by 3600). The input is the transaction identification and totp; the output is an authorization signature to proceed with deletion. Limitations include strict delegate validation and EOA signing requirements.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Module Transaction Using Safe Transaction Service - Bash\nDESCRIPTION: This snippet demonstrates how to fetch a module-executed transaction details by providing the module_transaction_id path parameter. It uses a curl GET command to query the '/api/v1/module-transaction/{module_transaction_id}' endpoint on the Safe Transaction service. The JSON response includes fields such as creation and execution dates, block number, transaction hash, involved addresses, transaction value, operation type, and decoded data if available. Dependencies include having access to the Safe Transaction service API endpoint and a valid module_transaction_id string.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Contracts with curl\nDESCRIPTION: This snippet shows how to retrieve a list of contracts using a GET request with curl. It includes the endpoint URL and necessary headers for the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Collectibles\nDESCRIPTION: Example JSON response from the `/api/v2/safes/{address}/collectibles/` endpoint. Contains a paginated list (`results`) of collectible objects, each including details like address, token name, symbol, logo URI, ID, metadata, and image URI. Also includes pagination info (`count`, `next`, `previous`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\n      \"tokenName\": \"SampleNft\",\n      \"tokenSymbol\": \"SN\",\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\n      \"id\": \"1\",\n      \"uri\": null,\n      \"name\": null,\n      \"description\": null,\n      \"imageUri\": null,\n      \"metadata\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Safe Delegate using Transaction Service API (DELETE)\nDESCRIPTION: Removes delegate/delegator pairs associated with a specific delegate address. The request requires a signature generated using the same EIP712 structure as for creating a delegate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v2-delegates-{delegate_address}--delete.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-polygon.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Operations List API\nDESCRIPTION: This JSON snippet provides a sample response from the Safe Operations API endpoint. It demonstrates a paginated response containing one SafeOperation, including timestamps, safeOperationHash, module address, confirmations array with detailed signatures, prepared signature hex string, and nested userOperation object with Ethereum transaction details and various gas limits. This response reflects the typical data structure users will receive when querying the API for Safe operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0,\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract - cURL Request\nDESCRIPTION: This snippet shows how to retrieve information about a specific smart contract using a GET request to the `/api/v1/contracts/{address}/` endpoint.  The request includes headers for specifying the content type and accepted response format.  An example contract address is included in the URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Contract with curl in Bash\nDESCRIPTION: Makes a GET request to retrieve information about a specific smart contract by its address. Returns detailed information including the contract's ABI, name, and trust status for delegate calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Transaction via Safe Transaction API (cURL/bash)\nDESCRIPTION: This bash cURL command sends a POST request to the '/api/v1/safes/{address}/multisig-transactions/' endpoint to create a multisig transaction for a specific Safe. It sets 'Accept' and 'content-type' headers for JSON, and provides an empty payload, as required by the API. The expected output is a JSON response confirming creation or signature update. The address in the path must be replaced with a valid Safe address and network connectivity is required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safes from a Specific Owner\nDESCRIPTION: This JSON sample response illustrates the list of safes owned by a specific address, returning an array of safe addresses in the 'safes' key.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Bash - Delete Multisig Transaction via API (cURL command)\nDESCRIPTION: Sample cURL command demonstrating how to delete a queued multisig transaction by sending a DELETE request to the API endpoint. It sets necessary headers, target URL with transaction hash, and payload. This is used to programmatically remove a pending transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-arbitrum.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Querying Single Transfer Details via Safe Transaction Service API - Bash\nDESCRIPTION: This bash code snippet demonstrates using curl to send a GET request to retrieve details for a single token transfer by transfer ID from the Safe Transaction Service. Dependencies are the curl tool and an accessible API endpoint. The required parameter is the transfer_id in the request path; application/json headers signal the expected response format. On success, the API returns a JSON object for the specified transfer. Inputs are the transfer ID in the URL; outputs are detailed transfer information or errors for invalid or missing IDs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Supported Token Lists via Safe Transaction Service API - Bash\nDESCRIPTION: This snippet provides a bash curl command to request a paginated list of tokens supported by the Safe Transaction Service from the /api/v1/tokens/lists/ endpoint. It accepts optional query parameters 'limit' and 'offset' to control pagination of results. The expected response is a JSON object containing a count of total tokens, navigation URLs for paging (next and previous), and an array of token list objects with 'url' and 'description' properties. Content-type and accept headers are set to application/json.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/tokens/lists/ \\  \n    -H \"Accept: application/json\" \\  \n    -H \"content-type: application/json\" \\  \n     \n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data using Safe API (Curl)\nDESCRIPTION: This Curl snippet sends a POST request to the Safe Transaction Service API's data-decoder endpoint to decode transaction data. It specifies the content type as application/json and includes an X-CSRFToken header.  The request body contains the transaction data as a hex string. The endpoint returns the decoded data in the response.  This decoded data is also included as dataDecoded in the GET /multisig-transactions, GET /module-transactions, and GET /all-transactions endpoints.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/data-decoder.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'https://safe-transaction-sepolia.safe.global/api/v1/data-decoder/' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -H 'X-CSRFToken: Gx1aRa8kIJGIAfReLAWwr9Q6dHv22dFt7VprdipLryHcxpfhk9aV0UDAhNz8gGYz' \\\n  -d '{ \\\n      \"data\": \"0x095ea7b3000000000000000000000000e6fc577e87f7c977c4393300417dcc592d90acf8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\" \\\n  }'\n\n# This decoded data is also included as dataDecoded in the GET /multisig-transactions, GET /module-transactions, and GET /all-transactions endpoints.\n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction via REST API with curl in Bash\nDESCRIPTION: This Bash snippet illustrates how to add a new confirmation for a multisig transaction by sending an HTTP POST request to the confirmations endpoint. The request targets a specific safe_tx_hash and submits an empty JSON body in this example, implying signatures can be passed via the request payload. The API supports submitting multiple signatures at once and requires direct signer confirmation without delegate support. Successful confirmations return an HTTP 201 status along with a JSON object containing the signature string.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-base-sepolia.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Visualizing Successful Settlement Flow Using Mermaid Sequence Diagram\nDESCRIPTION: This mermaid sequence diagram depicts the 'happy flow' scenario in the Safenet settlement process, showing interactions between the processor, liquidity provider, validator, settlement engine, and account components. It illustrates the processor initiating settlement with collateral, a delay for validator verification, and eventual successful funds transfer from the account to the liquidity provider through the settlement engine. The diagram helps visualize the timing and order of steps during a successful settlement with no challenges.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/safenet/concepts/settlement.mdx#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n\tbox MVP Processor\n\t\tactor P as Processor\n\t\tactor LP as Liquidity Provider\n\tend\n\tactor V as Validator\n  participant S as Settlement Engine\n\tparticipant A as Account\n\n  P->>S: settle (WITH COLLATERAL Ψ)\n  Note over S: Settlement Delay...\n  V->>V: check settlement correctness\n  Note over S: ...Settlement Delay\n  P->>+S: executeSettlement\n  A-->>LP: transferFrom(Account, Liquidity Provider)\n  deactivate S\n```\n\n----------------------------------------\n\nTITLE: Define UserOperation Type Structure for ERC-4337 Payments\nDESCRIPTION: Defines a TypeScript type for UserOperations as per ERC-4337, including all necessary fields such as sender, nonce, initCode, callData, gas limits, fee parameters, paymaster data, and signature. Serves as a template for constructing user operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype UserOperation = {\n  sender: Address\n  nonce: bigint\n  initCode: Hex\n  callData: Hex\n  callGasLimit: bigint\n  verificationGasLimit: bigint\n  preVerificationGas: bigint\n  maxFeePerGas: bigint\n  maxPriorityFeePerGas: bigint\n  paymasterAndData: Hex\n  signature: Hex\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Rendering Base Sepolia API Reference in React/Next.js\nDESCRIPTION: This snippet shows the complete implementation of a Next.js page that renders API reference documentation for the Base Sepolia network. It uses getStaticProps to pre-render MDX content, extract headings from the rendered HTML, and pass them as props to the page component.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/base-sepolia.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ApiReference from '../../../components/ApiReference'\nimport { renderToString } from 'react-dom/server'\nimport { MDXComponents, getHeadingsFromHtml } from '../../../lib/mdx'\nimport Mdx from '../../../components/ApiReference/generated/base-sepolia-reference.mdx'\nimport swagger from '../../../components/ApiReference/schemas/base-sepolia-swagger.json'\n\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n\n<ApiReference networkName=\"base-sepolia\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing the Off-Chain Message Client using Safe{Core} SDK (TypeScript)\nDESCRIPTION: This snippet shows the setup process for creating an `offchainMessageClient`. It involves initializing a `safeClient` using `createSafeClient` with a provider, signer, and Safe address, and then extending this client with the `offChainMessages` module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/offchain-messages/confirmoffchainmessage.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient, offChainMessages } from '@safe-global/sdk-starter-kit'\n\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nexport const offchainMessageClient = safeClient.extend(offChainMessages())\n```\n\n----------------------------------------\n\nTITLE: Indexing Status Endpoint Response\nDESCRIPTION: Demonstrates the structure of the JSON response from the `/v1/about/indexing/` endpoint, providing information about the current indexing status of the Safe Transaction Service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/api-safe-transaction-service.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"currentBlockNumber\": 9773327, // Last block on the blockchain\n  \"erc20BlockNumber\": 9773326,   // Last block indexed for erc20/721 events\n  \"erc20Synced\": true,\n  \"masterCopiesBlockNumber\": 9773327, // Last block indexed for executed transactions, ether transfers, configuration changes, etc.\n  \"masterCopiesSynced\": true,\n  \"synced\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Message Listing\nDESCRIPTION: Sample JSON response from the Safe messages listing endpoint. Contains details about messages including their creation time, hash, content, proposers, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Description of Listing Multisig Confirmations Endpoint\nDESCRIPTION: API endpoint retrieves a paginated list of confirmation signatures for a specific multisig transaction. It accepts path parameter 'safe_tx_hash' and optional query parameters 'limit' and 'offset' for pagination. Response includes total count, next/previous links, and an array of confirmation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Fetching User Operation with TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to fetch a user operation using its hash from a transaction service.  It's a placeholder and would need to be implemented to perform an actual HTTP request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_54\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Passing targetContract Parameter to simulateAndRevert in Solidity\nDESCRIPTION: This Solidity code snippet illustrates how to pass the targetContract parameter, which is the address of the contract whose code will be executed during simulation. The code demonstrates the correct placement and format of this parameter when invoking simulateAndRevert. The address must reference a deployed contract; replace 0x... with the actual address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/simulateAndRevert.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).simulateAndRevert(\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Sign Message via Curl POST Request\nDESCRIPTION: This curl command demonstrates how to send a POST request to the Safe Transaction Service API to add a signature for a specific message hash. It targets the `/api/v1/messages/{message_hash}/signatures/` endpoint, expecting a message body (though an empty body `{}` is shown here, implying signatures or data might be sent in the actual request body, or the body is not needed for this specific action as described by the API). Dependencies include a bash environment and the `curl` tool.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Adding a Message Signature using cURL\nDESCRIPTION: Demonstrates how to add a signature to a message specified by its hash (`0x3b3b57b3`) using a POST request to the Safe Transaction Service API endpoint `/api/v1/messages/{message_hash}/signatures/` via cURL. Expects an empty JSON body and returns a 201 Created status on success.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Creating Delegates with POST - Curl\nDESCRIPTION: Creates a new Safe delegate using a `curl` command with a POST request to `/api/v2/delegates/`. The request includes `Accept` and `content-type` headers set to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST https://safe-transaction-scroll.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using removeSafeDelegate - TypeScript\nDESCRIPTION: This snippet shows the updated parameter object properties for the `removeSafeDelegate` method.  The method now accepts a configuration object with `delegateAddress`, `delegatorAddress`, and `signer` parameters. It removes a safe delegate based on the provided configuration. It requires the Safe API Kit to be initialized.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v1.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// old\nconst delegateConfig: SafeDelegateDeleteConfig = {\n  safe,\n  delegate,\n  signer\n}\nawait safeService.removeSafeDelegate(delegateConfig)\n\n// new\nconst delegateConfig: DeleteSafeDelegateProps = {\n  delegateAddress,\n  delegatorAddress,\n  signer\n}\nawait apiKit.removeSafeDelegate(delegateConfig)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Confirmations for a Safe Operation using Bash\nDESCRIPTION: Sends a GET request using curl to the Safe Transaction Service API to fetch the list of confirmations for a specific multisig transaction identified by its `safe_operation_hash`. Optional query parameters `limit` and `offset` can be used for pagination. Requires `Accept` and `content-type` headers set to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Executed Transactions Using Material-UI Grid - JSX\nDESCRIPTION: This JSX snippet shows a UI layout for listing executed transactions related to a Safe address using Material-UI's Grid component. The container is justified with space-between alignment, and content is placed in a grid item spanning 12 columns on extra-small screens and 5.6 columns on medium screens. This setup is typically used to build responsive interfaces for displaying transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container justifyContent='space-between'>\n  <Grid item xs={12} md={5.6}>\n\n    \n\n    Returns all the *executed* transactions for a given Safe address.\nThe list has different structures depending on the transaction type:\n\n\\- Multisig Transactions for a Safe. `tx_type=MULTISIG_TRANSACTION`.\n\n\\- Module Transactions for a Safe. `tx_type=MODULE_TRANSACTION`\n\n\\- Incoming Transfers of Ether/ERC20 Tokens/ERC721 Tokens. `tx_type=ETHEREUM_TRANSACTION`\nOrdering_fields: [\"timestamp\"] eg: `-timestamp` (default one) or `timestamp`\n\nNote: This endpoint has a bug that will be fixed in next versions of the endpoint. Pagination is done\nusing the `Transaction Hash`, and due to that the number of relevant transactions with the same\n`Transaction Hash` cannot be known beforehand. So if there are only 2 transactions\nwith the same `Transaction Hash`, `count` of the endpoint will be 1\nbut there will be 2 transactions in the list.\n\n    \n```\n\n----------------------------------------\n\nTITLE: Get Specific Token Information using cURL\nDESCRIPTION: Retrieves detailed information about a specific token using its address via a cURL request. This example targets the `/api/v1/tokens/{address}/` endpoint with a `GET` method. Headers are included to specify JSON as the accepted and content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Delegates via REST API GET Endpoint in TypeScript and curl\nDESCRIPTION: Provides a REST API endpoint to retrieve a paginated list of all delegates associated with safes. Supports query parameters such as safe address, delegate address, delegator address, label, limit, and offset for filtering and pagination. Requires no body payload. Returns JSON including count, next/previous page URLs, and a results array with detailed delegate information including safe, delegate, delegator, label, and expiryDate when applicable.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v2-delegates--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Safe Operations - JSON\nDESCRIPTION: Provides a sample successful JSON response from the Safe Transaction Service API when listing Safe Operations. It illustrates the paginated structure including `count`, `next`, `previous` links, and an array of `results`, where each item contains detailed information about a Safe Operation, its confirmations, prepared signature, and the related ERC-4337 User Operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Listing Confirmations (JSON)\nDESCRIPTION: Provides an example JSON response from the API endpoint for listing multisig confirmations. The response is paginated and includes a count, links for next/previous pages, and an array of results containing confirmation details like owner address, submission date, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Safe Multisig Transactions (JSON)\nDESCRIPTION: This JSON object represents a sample successful response from the Safe Transaction Service API when querying multisig transactions for a Safe. It includes pagination details like total count and links to next/previous pages, along with an array of `results` containing the detailed information for each retrieved multisig transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Safe Message Data via REST API GET Endpoint in TypeScript and curl\nDESCRIPTION: Defines a REST API GET endpoint to fetch detailed information about a Safe message by its message hash. The response includes metadata such as creation/modification timestamps, safe address, proposedBy address, safeAppId, raw message content, message hash, confirmations with signature data, prepared signatures, and message origin. The endpoint returns a complex JSON object describing the message state and confirmation status, aiding verification and auditing processes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-messages-{message_hash}--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Transaction via API\nDESCRIPTION: This section describes the API endpoint for creating or updating a multisignature transaction for a specified Safe address. It outlines required parameters, request headers, a sample curl command, and the expected JSON response schema including transaction details such as gas limits, hash, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/arbitrum/-v1-safes-{address}-multisig-transactions--post.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Listing Messages for a Safe Account Using Safe Transaction Service API - TypeScript and Bash\nDESCRIPTION: This snippet outlines retrieval of messages for a specified Safe account address with GET request parameters for pagination and ordering. Parameters include the Safe address (required) in the path and optional query parameters 'ordering', 'limit', and 'offset' for sorting and page control. The response returns a paginated JSON list of message objects including metadata such as creation date, messageHash, message content, proposer, confirmations, and prepared signatures. Dependencies include the Safe address and API authentication where relevant. The snippet includes a curl GET example and references a TypeScript example for usage.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: js\nCODE:\n```\n// from ../examples/optimism/-v1-safes-{address}-messages--get.ts\n```\n\n----------------------------------------\n\nTITLE: Confirming Multisig Transaction Using REST API with Bash curl\nDESCRIPTION: Illustrates the HTTP POST request using curl to add a new confirmation signature(s) to an existing multisig transaction identified by safe transaction hash. Delegates cannot use this endpoint to make transactions trusted. The request requires setting Accept and content-type headers. A successful creation returns a JSON containing the signature string. Error codes 400 and 422 indicate malformed or processing errors respectively.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Creating a Transfer Order Message with Monerium SDK in TypeScript\nDESCRIPTION: Constructs an order message indicating transfer details from Safe to IBAN. Prepares the message for signing and submission to Monerium for processing the token transfer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/monerium.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { placeOrderMessage } from '@monerium/sdk'\n\nconst amount = '10'\nconst iban = 'DK4878805291075472'\n\n// Generate a message describing the transfer\nconst orderMessage = placeOrderMessage(amount, 'eur', iban)\n\n// Send the order to Monerium backend\nconst order = await moneriumClient.placeOrder({\n  amount,\n  signature: '0x',\n  currency: 'eur',\n  address: safeAddress,\n  counterpart: {\n    identifier: {\n      standard: 'iban',\n      iban\n    },\n    details: {\n      firstName: 'User',\n      lastName: 'Userson',\n      county: 'AL'\n    }\n  },\n  message: orderMessage,\n  memo: 'Powered by Monerium SDK',\n  chain: 'ethereum',\n  network: 'sepolia'\n})\n\n```\n\n----------------------------------------\n\nTITLE: Query Safes by Module - Safe Transaction Service API - curl\nDESCRIPTION: Makes a GET request to the Safe Transaction Service API to retrieve a list of Safe addresses that have a specific module enabled. The `address` path parameter specifies the module address. Expects a JSON response containing an array of Safe addresses under the \"safes\" key.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response - All Transactions for a Safe\nDESCRIPTION: This JSON snippet shows a sample response when fetching all transactions for a Safe. It includes information such as count, next, previous, and results. The results array contains transaction details like safe, to, value, data, operation, and associated metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Safes owned by a Specific Owner via REST API\nDESCRIPTION: This code snippet details the API endpoint to fetch safes owned by a specific owner address, including request parameters, response schema, and sample cURL command. The endpoint needs the owner's address as a path parameter and returns an array of safes owned by that address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Data Structure for Deletion - Python\nDESCRIPTION: Defines the EIP-712 structure required for signing a request to delete a queued Safe multisig transaction. It specifies the domain (\"Safe Transaction Service\" version \"1.0\", chain_id, verifyingContract) and the message structure (safe_tx_hash, totp). The signature generated using this structure is needed for authentication. The 'totp' is calculated based on Unix epoch time divided by 3600.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Transactions with TypeScript API Call\nDESCRIPTION: Example of how to retrieve all transactions associated with a specific Safe address using the Safe Transaction Service API on Polygon network. The endpoint returns transaction details including submissions, confirmations, and execution data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Module Address (Bash curl)\nDESCRIPTION: This snippet demonstrates how to query the Safe Transaction Service API for a list of Safes that have a specific module enabled. It uses `curl` to perform a GET request to the `/api/v1/modules/{address}/safes/` endpoint, replacing `{address}` with the desired module address. The expected output is a JSON object containing a list of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Safe Module Transactions API Request Example using cURL in Bash\nDESCRIPTION: Provides a cURL command-line example to retrieve module transactions for a given Safe address via HTTP GET. This example demonstrates setting the 'Accept' and 'content-type' headers to 'application/json' and targets the specific API endpoint with a valid Safe address path parameter. It illustrates how to perform the request outside of a programming environment, useful for quick testing or integration validation. Dependencies include having cURL installed and network access to the specified API URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Messages Using Safe Transaction Service - TypeScript Reference\nDESCRIPTION: This is a TypeScript code reference for listing all messages associated with a Safe account via the GET /safes/{address}/messages/ endpoint. The referenced file '../examples/zksync/-v1-safes-{address}-messages--get.ts' would include the request logic, handling of parameters (address, ordering, limit, offset), and response parsing. External dependencies may include HTTP libraries and Safe-specific typings.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zksync/-v1-safes-{address}-messages--get.ts\n```\n\n----------------------------------------\n\nTITLE: Executing a GET Request for Safe Module Transactions with Curl - bash\nDESCRIPTION: Demonstrates how to perform a GET request to the Safe Transaction Service API to list all module transactions associated with a specific Safe address. Requires 'Accept' and 'content-type' headers set to 'application/json'. The Safe address must be substituted in the endpoint URL path parameter. The output is a JSON object containing the paginated list of transactions with relevant metadata. Designed for use in command-line environments.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Module Transactions List\nDESCRIPTION: Shows an example of the JSON response returned by the API, including transaction details such as creation time, execution date, block number, transaction hash, Safe address, module address, recipient address, value, data, operation type, and transaction ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_35\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: EIP-712 Data for Deleting Multisig Transaction (Python)\nDESCRIPTION: This snippet shows the structure of the EIP-712 data required to delete a queued multisig transaction. It defines the types, primary type, domain, and message components. The domain includes the Safe Transaction Service name, version, chain ID, and verifying contract address, while the message contains the safe transaction hash and TOTP.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Collectibles API Response\nDESCRIPTION: A JSON response representing a list of collectibles, including token address, name, symbol, logo URI, token ID, and associated metadata. The structure shows a paginated response with 'count', 'next', 'previous', and 'results' fields.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\n      \"tokenName\": \"SampleNft\",\n      \"tokenSymbol\": \"SN\",\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\n      \"id\": \"1\",\n      \"uri\": null,\n      \"name\": null,\n      \"description\": null,\n      \"imageUri\": null,\n      \"metadata\": {}\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a pricing tool for crypto asset valuation\nDESCRIPTION: Tool implementation for the agent to fetch the latest ETH prices from CoinGecko API, enabling accurate financial calculations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-setup.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir tools\ntouch tools/prices.ts\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../../examples/ai-agent/tools/prices.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for API Reference with React, MDX, and Swagger - JavaScript\nDESCRIPTION: This snippet defines the asynchronous getStaticProps function used in React Next.js for static site generation. It renders an MDX component to a string using react-dom/server's renderToString, then extracts headings by combining the rendered MDX content with the Swagger JSON schema using a custom helper. The resulting headings are returned as props for use in the React page. Dependencies include react-dom/server, MDXComponents, a local getHeadingsFromHtml utility, and the Swagger JSON describing the API schema. The main parameters are the imported MDX component and Swagger JSON. The output is a props object containing structured headings for API documentation display, enabling pre-rendering of content with rich navigation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/zkevm.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe protocol interaction tools\nDESCRIPTION: Tool implementation that enables the agent to interact with Safe Transaction Service to fetch address balances and use Protocol Kit to deploy Safes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-setup.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntouch tools/safe.ts\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../../examples/ai-agent/tools/safe.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Transaction Confirmations via API (Bash)\nDESCRIPTION: This curl command shows how to retrieve the list of confirmations associated with a specific Safe transaction using the GET method. The transaction hash is provided in the URL path. Optional query parameters for pagination (limit, offset) are available but not included in this example command.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Confirming Transaction (JSON)\nDESCRIPTION: Displays a sample JSON response received after successfully posting a new confirmation via the `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` endpoint. The response typically includes the signature that was successfully added.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Module Transaction API Endpoint Documentation\nDESCRIPTION: Provides details for the GET endpoint to retrieve a specific module transaction by its ID, including request parameters, response schemas, and sample responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"string\",\n  \"executionDate\": \"string\",\n  \"blockNumber\": \"integer\",\n  \"isSuccessful\": \"boolean\",\n  \"transactionHash\": \"string\",\n  \"safe\": \"string\",\n  \"module\": \"string\",\n  \"to\": \"string\",\n  \"value\": \"string\",\n  \"data\": [\"string\",\"null\"],\n  \"operation\": \"integer\",\n  \"dataDecoded\": {\"additionalProperties\":{}},\n  \"moduleTransactionId\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Confirmations - cURL\nDESCRIPTION: This cURL command retrieves a list of confirmations for a specified multisig transaction on the Safe Transaction API. It uses the GET method to query the API endpoint and specifies the Accept and content-type headers as application/json.  The path includes a specific safe operation hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Delegates API Endpoint\nDESCRIPTION: JSON response structure from the GET /api/v2/delegates/ endpoint showing a paginated list of Safe delegates with their safe addresses, delegate addresses, delegators, and labels.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Message Sample Response\nDESCRIPTION: A sample JSON response containing message metadata such as timestamps, safe address, message hash, message content, proposer, confirmations array with signature details, and the prepared signature string. It provides comprehensive insights into the message's state and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example (Placeholder)\nDESCRIPTION: Placeholder - The content from a TypeScript file is referenced. This snippet indicates that the actual implementation is located elsewhere.  The purpose here is to signify the existence of relevant TypeScript examples.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_81\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/xlayer/-v1-tokens--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating SafeOperation - JSON\nDESCRIPTION: Represents the typical response body for the create SafeOperation POST request. The response is an empty JSON object indicating no content beyond standard HTTP status signaling success. Expected HTTP status code is 201, meaning the SafeOperation was created successfully with no additional data returned.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Response Schema for Multisig Transaction Creation\nDESCRIPTION: This JSON schema exemplifies the response received after creating a multisig transaction, primarily indicating the gas limit (`safeTxGas`) for the transaction, facilitating clients to understand expected transaction fees and limits.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking addOwnerWithThreshold with New Owner Address - Solidity\nDESCRIPTION: Shows the specific parameter usage for adding a new owner address to the Safe contract via addOwnerWithThreshold. The 'owner' parameter requires an Ethereum address representing the new owner being added.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/addOwnerWithThreshold.mdx#_snippet_1\n\nLANGUAGE: Solidity\nCODE:\n```\n(ISafe safe).addOwnerWithThreshold(\n    0x...,\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Owner Address (GET Request)\nDESCRIPTION: This snippet illustrates how to perform a GET request to get a list of Safe accounts associated with a specific owner address. The provided curl command includes headers to request the information as JSON. The owner's address is part of the URL path.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Kit v1 and Types Library\nDESCRIPTION: Instructions to add the Protocol Kit version 1.3.0 and the types library (if used) to the project dependencies using Yarn. These commands ensure the project uses the correct library versions for compatibility.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v1.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/protocol-kit@1.3.0\n\nyarn add @safe-global/safe-core-sdk-types@2.3.0\n```\n\n----------------------------------------\n\nTITLE: Querying User Operations with cURL\nDESCRIPTION: This snippet demonstrates a cURL command to retrieve user operations from a specified Safe account address.  It uses the GET method and specifies the application/json content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Incoming Transfers\nDESCRIPTION: This sample JSON illustrates the structure of a typical response from the incoming transfers API endpoint, including transfer type, execution date, block number, transaction hash, sender and recipient addresses, transfer value, transfer ID, and associated token information. It demonstrates the expected data fields and format for successful API responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Collectibles using cURL\nDESCRIPTION: This cURL command retrieves a list of collectibles (ERC721 tokens) for a specified Safe address from the Safe Transaction Service API. It sends a GET request to the `/api/v2/safes/{address}/collectibles/` endpoint with headers for accepting JSON responses and specifying content type as JSON. The `address` in the path needs to be a valid Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Get details of a specific transfer by transfer ID\nDESCRIPTION: This snippet illustrates how to retrieve detailed information about a specific token transfer using its transfer ID via a GET request. The response includes comprehensive data about the transfer, such as type, date, involved addresses, token info, and transaction hash. Dependencies include a curl command-line client and a basic understanding of REST API structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/transfer/3b3b57b3 \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Incoming Transfers (JSON)\nDESCRIPTION: This JSON object represents a sample successful response from the incoming transfers API endpoint. It includes pagination details (`count`, `next`, `previous`) and an array of `results`, where each object describes an individual incoming transfer with details like type, execution date, block number, transaction hash, addresses, value, and potential token information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message Details via GET request (TypeScript & curl)\nDESCRIPTION: Retrieves detailed information for a message identified by its hash. The response includes creation and modification timestamps, associated safe address, message content, proposer, confirmations, and optional signatures. Dependencies are the message hash parameter and correct API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/blast/-v1-messages-{message_hash}--get.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Listing Collectibles cURL Example\nDESCRIPTION: This cURL command retrieves a paginated list of ERC721 collectibles associated with a specific Safe account address. The example uses a GET request to the `/api/v2/safes/{address}/collectibles/` endpoint, where `{address}` is replaced with a valid Safe account address. It sets the `Accept` and `content-type` headers to `application/json` to specify the expected response format.  The output is a JSON containing collectible information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Querying Safe Module Transactions with curl\nDESCRIPTION: Sample curl command to retrieve all transactions executed by modules for a specific Safe address on Base Sepolia network. The request targets the Safe Transaction Service API and specifies JSON as the accepted response format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Module Transaction Response\nDESCRIPTION: This JSON snippet represents a sample response from the Safe Transaction Service when querying a module transaction. It includes fields like `created`, `executionDate`, `blockNumber`, `isSuccessful`, `transactionHash`, and details about the Safe, module, and the transaction itself. The `moduleTransactionId` is a unique identifier for the module transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transactions Analytics by Origin via Safe Transaction Service API - Bash\nDESCRIPTION: This snippet provides a curl command example for performing a GET request to the Safe Transaction Service API's analytics endpoint to obtain multisig transactions data filtered by origin. There are no required or optional parameters specified, and the response body is expected to be empty with status code 200, indicating success but no data returned. Dependencies include curl and accessibility to https://safe-transaction-zkevm.safe.global. This example serves as a template and may require further parameters or implementation details for actual analytics data retrieval.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Configuring SafeProvider with Safe Configuration in TypeScript\nDESCRIPTION: This snippet illustrates creating a Safe configuration object using createConfig from @safe-global/safe-react-hooks, including specifying the blockchain chain, provider, signer, and Safe address. It then shows setting up the React root and rendering the SafeProvider component with the configuration wrapping the main App component. This setup allows the useSendTransaction hook and other Safe-related hooks to access the Safe context and execute transactions accordingly. Dependencies include ReactDOM, viem chains, and Safe hooks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesendtransaction.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\nimport App from './App.tsx'\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst root = document.getElementById('root')\n\nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Querying List of Smart Contracts via Safe Transaction Service API - Bash\nDESCRIPTION: This Bash code snippet uses curl to send a GET request to the Safe Transaction Service API for retrieving a paginated list of known smart contracts and their ABI details. Required dependencies include curl and an internet connection, with recommended support for HTTPS requests. The endpoint supports optional query parameters such as limit, offset, and ordering for pagination. The input is an HTTP GET request; outputs include a JSON array of contract objects. Results depend on the network endpoint and may be limited by API constraints.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction Analytics by Origin with curl\nDESCRIPTION: A curl command to retrieve analytics data about multisig transactions organized by origin via GET request to the /api/v2/analytics/multisig-transactions/by-origin/ endpoint. The request specifies JSON format for both acceptance and content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating AI Agent with LangChain & Safe Tools (TypeScript)\nDESCRIPTION: Demonstrates how to set up an AI agent using LangChain and Ollama to interact with Safe Smart Accounts. It shows how to define the AI model, integrate custom tools for Safe operations (like checking balances, deploying Safes), and invoke the agent with a specific prompt for deploying a Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx-full.txt#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport {\n  defineConfig,\n  ChatOllama,\n  OllamaInput,\n} from '@langchain/community/chat_models/ollama'\nimport { SafeTool } from './tools/safe';\nimport { PricesTool } from './tools/prices';\nimport { MathTool } from './tools/math';\n\n// Set up the AI model\nconst model = new ChatOllama({\n  baseUrl: 'http://localhost:11434',\n  model: 'mistral-nemo',\n  temperature: 0\n});\n\n// Add Safe-specific tools\nconst tools = [\n  new MathTool(),\n  new PricesTool(),\n  new SafeTool()\n];\n\n// Create agent with tools and model\nconst agent = createReactAgent({\n  llm: model,\n  tools: tools\n});\n\n// Example prompt to deploy a new Safe account\nconst response = await agent.invoke({\n  input: `\n  Deploy a new Safe account with the following configuration:\n  - Network: Sepolia\n  - Owners: 0x742d35Cc6634C0532925a3b844Bc454e4438f44e, ${process.env.SIGNER_ADDRESS}\n  - Threshold: 2\n  - Use 0.01 ETH to fund it\n  `\n});\n\nconsole.log(response.output);\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Module Transactions via curl (bash)\nDESCRIPTION: This bash/curl example demonstrates how to perform a GET request to the Safe Transaction Service API to fetch all transactions executed by modules linked to a specific Safe address. Necessary prerequisites include curl installed and a valid API endpoint. The request uses the Safe address as a path parameter, and sets 'Accept: application/json' and 'content-type: application/json' headers for proper content negotiation. This command returns a JSON object containing paginated results of module transactions; the request can be modified with query parameters as needed for filtering, pagination, and ordering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Invoking Safe Transaction Module Listing with curl - Bash\nDESCRIPTION: This Bash snippet demonstrates how to retrieve all module transactions associated with a given Safe address using the Safe Transaction Service REST API. It utilizes the curl command-line tool to send a GET request to the specified endpoint, requesting a JSON response. The Accept and content-type headers are set appropriately to indicate the expected response format; you need to supply a valid Safe address in the URL path. Adjust parameters or headers as needed to fit your environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_31\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using the fallback function in Solidity\nDESCRIPTION: This code snippet demonstrates how to interface with and call the Safe contract's fallback function from another contract. It defines an ISafe interface with the fallback function and shows calling it from an example contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/fallback/fallback.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    fallback() external;\n}\n\ncontract Example {\n    function example() ... {\n        (ISafe safe).fallback();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Swap Owner functionality in a React component with Safe React Hooks\nDESCRIPTION: A React component example showing how to use the useUpdateOwners hook to swap an owner in a Safe wallet. The component includes a button to trigger the swap operation and displays the result data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/swap.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUpdateOwners, SwapOwnerVariables } from '@safe-global/safe-react-hooks'\n\nfunction SwapOwner() {\n  const { swap } = useUpdateOwners()\n  const {\n    swapOwner,\n    data,\n    // ...\n  } = swap\n\n  const swapOwnerParams: SwapOwnerVariables = {\n    oldOwnerAddress: '0x...',\n    newOwnerAddress: '0x...'\n  }\n\n  return (\n    <>\n      <button onClick={() => swapOwner(swapOwnerParams)}>\n        Swap Owner\n      </button>\n      {data && JSON.stringify(data)}\n    </>\n  )\n}\n\nexport default SwapOwner\n```\n\n----------------------------------------\n\nTITLE: Delete Delegate - Curl\nDESCRIPTION: This snippet shows how to delete a delegate from a Safe account using a cURL request to the Safe Transaction Service API. It performs a DELETE request to the `/api/v2/delegates/{delegate_address}/` endpoint with a JSON payload containing the Safe address, delegator address, and signature. Note that the signature is generated by signing EIP712 data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'DELETE' \\\n      'https://safe-transaction-sepolia.safe.global/api/v2/delegates/0x634Ce7818a1Ca34d3D69FFFFFFFFFFFFFFFF0AC6/' \\\n      -H 'accept: application/json' \\\n      -H 'Content-Type: application/json' \\\n      -d '{\n          \"safe\": \"0xc62C5cbB964459F3C984682f78A4d3ffffffffff\",\n          \"delegator\": \"0xAA86E576c084aFFFFFFFFFFFF7967F10C467d318\",\n          \"signature\": \"0xe026c189805d7d5026e8b33e03dfe1847a488a9c6846afefffffffffffff0a566af485b7b4a68189c69c2245fcb9321d718d829d6180245cfe56dc51a0c15b031b\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Listing Paginated Collectibles via REST API\nDESCRIPTION: Provides an endpoint to retrieve a paginated list of collectibles (ERC721 tokens) for a specified Safe address. Supports filters such as trusted status, spam exclusion, limit, and offset. Returns metadata about each collectible, including address, name, symbol, and image. Dependencies include correct URL formation and setting appropriate query parameters. Responses include success with data, 404 if the Safe is not found, and 422 for invalid address checksum.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v2/safes/{address}/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Safe Docs Page (JavaScript)\nDESCRIPTION: Imports necessary components for the Safe documentation landing page. Includes `Callout` from Nextra for notifications, `Grid` from MUI for layout, SVG icons (`SafeWallet`, `SafeCore`) for visual representation, and a custom `CustomCard` component for displaying Safe stack information. These imports enable the rendering of UI elements and page structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/what-is-safe.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout } from 'nextra/components'\nimport { Grid } from '@mui/material'\nimport SafeWallet from '../../assets/svg/lock.svg'\nimport SafeCore from '../../assets/svg/code.svg'\nimport CustomCard from '../../components/CustomCard'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Confirmations for a Safe Operation using Bash\nDESCRIPTION: Sends a GET request using cURL to retrieve the list of confirmations for a specific safe operation, identified by its hash. The API endpoint accepts optional 'limit' and 'offset' query parameters for pagination. Requires the `safe_operation_hash` as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Balances via API (curl)\nDESCRIPTION: Demonstrates using curl to make a GET request to the `/api/v2/safes/{address}/balances/` endpoint. This retrieves paginated Ether and ERC20 token balances for the specified Safe address. Query parameters like `trusted`, `exclude_spam`, `limit`, and `offset` can be added to filter and paginate results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Fallback Handler (with gasPrice)\nDESCRIPTION: This snippet uses the `gasPrice` option. This sets the price in wei that the sender is willing to pay for each unit of gas. This impacts the priority of the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableFallbackHandlerTx(\n  '0x...',\n  options: {\n    gasPrice: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Add Confirmation (Empty)\nDESCRIPTION: Example response for a successful POST request to `/api/v1/safe-operations/{safe_operation_hash}/confirmations/`. A successful creation (HTTP 201 Created) results in an empty response body, as indicated by the text 'Empty Response'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Querying UserOperation with Safe Transaction Service API - Bash cURL\nDESCRIPTION: This Bash snippet demonstrates how to perform an HTTP GET request to the Safe Transaction Service API to retrieve a UserOperation by its hash. It requires curl as a dependency and the correct API endpoint with the {user_operation_hash} populated. Required headers include 'Accept: application/json' and 'content-type: application/json'. The output is the JSON result containing the UserOperation details, as shown in the sample response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_63\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Analytics Data with cURL (GET)\nDESCRIPTION: This cURL command retrieves analytics data using a GET request. It targets the /api/v2/analytics/multisig-transactions/by-origin/ endpoint. The request includes headers to accept and specify the content type as application/json. The response body is not described but is expected to return analytics data relevant to multisig transactions. There are no parameters defined in the sample provided.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message with curl\nDESCRIPTION: Makes a POST request to create a new signed message for a Safe account. This endpoint supports both EIP191 string messages and EIP712 objects, automatically calculating the message hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Multisig Transaction Using REST API with Bash curl\nDESCRIPTION: Demonstrates an HTTP DELETE request using curl to remove a queued multisig transaction identified by its safe transaction hash from the Safe Transaction Service API. The request requires setting appropriate headers (Accept and content-type) and does not contain a request body. Deleting is allowed only for the proposer or an authorized delegate. The expected response status codes include 204 (Deleted), 400 (Bad request), and 404 (Not found).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-xlayer.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Create Delegate API Response Sample\nDESCRIPTION: Indicates an empty response upon successful creation of a delegate, with HTTP 202 status code, signaling acceptance of the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Calling disableModule with module Parameter (Solidity)\nDESCRIPTION: Demonstrates usage of ISafe's disableModule function, specifically focusing on the module parameter for the address to be disabled. This snippet is used to clarify the role and position of the module argument within the function call. The code is intended for scenarios where module removal from a Safe is required and the address of the target module is known.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/disableModule.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).disableModule(\n    0x...,\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Get Safe Balances (Deprecated) - JSON\nDESCRIPTION: Provides an example of the JSON array structure returned by the deprecated Safe Transaction Service API balances endpoint. It includes entries for native coin and ERC20 tokens, detailing token information and balance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E3f0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Confirmations for a Transaction via Safe API with cURL (Bash)\nDESCRIPTION: Shows how to retrieve a paginated list of confirmation signatures for a specific Safe multisig transaction using a GET HTTP request. Dependencies: cURL, access to the Safe Transaction Service, input Safe transaction hash. Key parameters include 'limit' and 'offset' for pagination. The output is a JSON object with a count, pagination fields, and an array of confirmation objects, each containing owner address, submission date, signature, and signature type. HTTP status code 200 is expected on success.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Kit\nDESCRIPTION: This snippet installs the @safe-global/protocol-kit dependency using npm, yarn, or pnpm.  The Safe Protocol Kit is essential for interacting with Safe smart contracts and managing Safe accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/passkeys.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @safe-global/protocol-kit\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message (curl)\nDESCRIPTION: Creates a new message for a given Safe account using a POST request to the /api/v1/safes/{address}/messages/ endpoint. Requires the Safe address path parameter and message data in the request body (example shows empty body for illustration). Expects a 201 Created status with an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Listing Transfers - Sample Response\nDESCRIPTION: This is a sample JSON response for listing transfers. It includes a count of transfers, pagination information, and an array of transfer objects. Each transfer object contains details such as transfer type, execution date, block number, transaction hash, to/from addresses, value, token information and the unique transfer ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Token List\nDESCRIPTION: Sample response showing the format of token list data returned by the Safe API. This includes a count of tokens, pagination links, and detailed information about each token including its type, address, name, symbol, and decimals.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1846,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ERC20\",\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n      \"name\": \"0x5555.com\",\n      \"symbol\": \"0x5555.com\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n      \"trusted\": false\n    }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up the Migration Project Environment (Bash)\nDESCRIPTION: Creates a new project directory (`safe-migration-tutorial`), navigates into it, initializes an npm project (`npm init -y`), and installs necessary dependencies (`@safe-global/protocol-kit`, `@safe-global/types-kit`, `viem`) for the Safe migration script. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir safe-migration-tutorial && cd safe-migration-tutorial\nnpm init -y\nnpm install @safe-global/protocol-kit @safe-global/types-kit viem\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Transactions with curl Command\nDESCRIPTION: Example curl command to fetch all transactions for a specific Safe address on the Polygon network. The request includes appropriate headers for JSON content type and response format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Basic usage of createDisableModuleTx with moduleAddress parameter\nDESCRIPTION: Demonstrates the minimum required parameter (moduleAddress) to create a transaction that disables a Safe Module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableModuleTx(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Solidity Contract for TokenWithdrawModule\nDESCRIPTION: Initial Solidity contract skeleton establishing the TokenWithdrawModule contract. It specifies the LGPL-3.0 license, uses Solidity 0.8.0 or higher, and reserves space for state variables, constructor, and functions to be added later. This forms the foundational contract on which the module logic is implemented.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: LGPL-3.0\npragma solidity ^0.8.0;\n// Imports will be added here\n\ncontract TokenWithdrawModule {\n  // State variables will be added here\n\n  // Constructor will be added here\n\n  // Functions will be added here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting refundReceiver Option for Remove Owner Transaction (TypeScript)\nDESCRIPTION: Demonstrates setting the `refundReceiver` address within the optional `options` object when calling `createRemoveOwnerTx`. This address receives any surplus gas funds if a `gasToken` other than the native currency is used.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx(\n  {\n    ownerAddress: '0x...'\n  },\n  {\n    refundReceiver: '0x...' // Optional: Address to receive gas refund\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring .env for Custom (Non-Infura) Chains - Bash\nDESCRIPTION: This snippet configures the .env file for blockchains not supported by Infura. It sets the funded mnemonic and direct RPC node URL. For ZKsync deployments, the compatibility variable must also be set. The output is a correctly configured .env at the repository root, required for deployment scripts to target a custom backend.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-contracts-deployment.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nMNEMONIC=funded_account_on_this_network\nNODE_URL=RPC_endpoint_for_your_network\n```\n\nLANGUAGE: bash\nCODE:\n```\nHARDHAT_ENABLE_ZKSYNC=1\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Safe Multisig Transactions (JSON)\nDESCRIPTION: This JSON snippet represents a sample response from the Safe Transaction Service API when querying for multisig transactions. It includes details like count, next/previous page URLs, and an array of transaction results with fields such as safe address, to address, value, data, and confirmation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_35\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Multisig Transactions List\nDESCRIPTION: Shows an example JSON response structure returned by the API endpoint `/api/v1/safes/{address}/multisig-transactions/`. It includes pagination details (`count`, `next`, `previous`) and an array (`results`) containing detailed information about each multisig transaction, such as `safe` address, `to` address, `value`, `nonce`, execution details (`executionDate`, `isExecuted`), confirmations, and `safeTxHash`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Transfer by ID Using Safe Transaction Service API in Bash\nDESCRIPTION: Illustrates how to fetch detailed information about a single token transfer event by its unique transferId using the Safe Transaction Service API and curl. Requires the transferId to be supplied in the request path, and curl as a dependency. The GET request returns a detailed JSON object with populated fields (type, executionDate, blockNumber, transactionHash, etc.) corresponding to the transfer. If the given transferId is invalid or not found, the API may return errors with status 400 or 404 respectively.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Enabling Fallback Handler (with fallbackHandlerAddress)\nDESCRIPTION: This snippet shows the basic usage of the `createEnableFallbackHandlerTx` function, requiring only the fallback handler address as input. This creates a Safe transaction with the default settings, setting the fallback handler address to the provided value. The function returns a Promise that resolves to a Safe transaction object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createenablefallbackhandlertx.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableFallbackHandlerTx(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutionFromModuleFailure Event in Solidity\nDESCRIPTION: Declares the `ExecutionFromModuleFailure` event in Solidity. This event is emitted to signal that a transaction initiated by a module has failed during execution. It includes the address of the module whose execution failed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/ExecutionFromModuleFailure.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nevent ExecutionFromModuleFailure(address module);\n```\n\n----------------------------------------\n\nTITLE: Get Transfer API - Curl\nDESCRIPTION: This snippet demonstrates how to use the `curl` command-line tool to fetch details for a specific token transfer using its unique `transfer_id` via a GET request. It targets the Safe Transaction Service API, providing a sample ID `3b3b57b3`. The request includes standard `Accept` and `Content-Type` headers for JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Safe Balances Response Structure - JSON\nDESCRIPTION: This JSON array is the typical response when querying a Safe's balances. Each element details an asset (either native Ether or ERC20 tokens) by 'tokenAddress', 'token' metadata, and the Safe's current balance as a string. Token information includes name, symbol, decimals, and logo URI. If 'tokenAddress' is null, the entry represents ETH (or the chain native token); otherwise, ERC20 token metadata is provided. Unexpected or spam tokens may be omitted depending on query parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Structure for Deleting Safe Transaction\nDESCRIPTION: Defines the EIP-712 typed data structure required for signing a delete request for a queued Safe multisig transaction. It includes the domain separator (`EIP712Domain`) and the message structure (`DeleteRequest`) containing the `safeTxHash` and a time-based one-time password (`totp`). The `totp` is calculated based on the Unix epoch time divided by 3600 (integer division). An EOA signature of this structure is required to authorize the deletion.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id, \n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring paymasterOptions.sponsorshipPolicyId for safeOperations (TypeScript)\nDESCRIPTION: Illustrates the optional `sponsorshipPolicyId` string parameter in `paymasterOptions` for `safeOperations`. This ID is obtained from the paymaster provider and identifies the sponsorship policy.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsafeOperations(\n  { bundlerUrl: 'https://...' },\n  {\n    isSponsored: true,\n    paymasterUrl: 'https://...',\n    sponsorshipPolicyId: 'abc',\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    amountToApprove: 123n\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Creation Status via API (curl)\nDESCRIPTION: Sends a GET request using curl to the `/api/v1/safes/{address}/creation/` endpoint to fetch detailed information about the creation transaction of a specific Safe. The Safe's address must be provided in the path. The `Accept` and `content-type` headers are set to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Token Lists via GET Request (curl)\nDESCRIPTION: This snippet demonstrates a GET request to retrieve a list of supported tokens from the Safe Transaction Service. It utilizes the `curl` command-line tool to send an HTTP request to the specified endpoint. The request includes headers to specify the accepted content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: feeEstimator.preEstimateUserOperationGas Parameter\nDESCRIPTION: Example showing how to define `feeEstimator.preEstimateUserOperationGas` parameter which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions,\n  feeEstimator: {\n    preEstimateUserOperationGas\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Multisig Transaction via REST API with curl in Bash\nDESCRIPTION: This Bash snippet shows how to make an HTTP DELETE request using curl to remove a queued multisig transaction by its transaction hash. The endpoint requires authentication by signing EIP-712 typed data (shown in the Python example). The input is the specific safe_tx_hash provided in the URL path. The request sends an empty JSON body and expects an HTTP 204 No Content response upon successful deletion. Headers specify JSON content acceptance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-base-sepolia.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Initializing the Migration Script Structure (TypeScript)\nDESCRIPTION: Sets up the basic structure for the `migrate.ts` script. It imports necessary modules from `@safe-global/protocol-kit`, `@safe-global/types-kit`, and `viem`. Defines a `MigrationMethod` type alias for the specific migration functions and outlines an async `main` function placeholder. It also includes logic to parse the command-line argument to determine which migration method to execute.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from \"@safe-global/protocol-kit\";\nimport { MetaTransactionData, OperationType } from \"@safe-global/types-kit\";\nimport { parseAbi, encodeFunctionData, http, createPublicClient } from \"viem\";\n\ntype MigrationMethod =\n  | \"migrateSingleton\"\n  | \"migrateWithFallbackHandler\"\n  | \"migrateL2Singleton\"\n  | \"migrateL2WithFallbackHandler\";\n\nasync function main(migrationMethod: MigrationMethod) {\n    // Define constants\n    // Build calldata for the migration\n    // Initialize the Protocol Kit\n    // Create and execute transaction\n}\n\nconst migrationMethod = process.argv.slice(2)[0] as MigrationMethod;\nmain(migrationMethod).catch(console.error);\n```\n\n----------------------------------------\n\nTITLE: Defining API Response Schema for UserOperationWithSafeOperationResponse\nDESCRIPTION: This JSON schema describes the structure of the API response when fetching detailed user operation data. It specifies required properties, types, and nested objects including safe operation details and confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ethereumTxHash\": \"string\",\n  \"sender\": \"string\",\n  \"userOperationHash\": \"string\",\n  \"nonce\": \"integer\",\n  \"initCode\": [\"string\",\"null\"],\n  \"callData\": [\"string\",\"null\"],\n  \"callGasLimit\": \"integer\",\n  \"verificationGasLimit\": \"integer\",\n  \"preVerificationGas\": \"integer\",\n  \"maxFeePerGas\": \"integer\",\n  \"maxPriorityFeePerGas\": \"integer\",\n  \"paymaster\": [\"string\",\"null\"],\n  \"paymasterData\": [\"string\",\"null\"],\n  \"signature\": \"string\",\n  \"entryPoint\": \"string\",\n  \"safeOperation\": {\n    \"oneOf\": [\n      {\n        \"refName\": \"SafeOperationResponse\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"created\": \"string\",\n          \"modified\": \"string\",\n          \"safeOperationHash\": \"string\",\n          \"validAfter\": \"string\",\n          \"validUntil\": \"string\",\n          \"moduleAddress\": \"string\",\n          \"confirmations\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {},\n            \"description\": \"Filters confirmations queryset\\n\\n:param obj: SafeOperation instance\\n:return: Serialized queryset\",\n            \"readOnly\": true\n          },\n          \"preparedSignature\": \"string\",\n        },\n        \"required\": [\"confirmations\",\"created\",\"modified\",\"moduleAddress\",\"preparedSignature\",\"safeOperationHash\",\"validAfter\",\"validUntil\"]\n      },\n      {\n        \"type\": \"null\"\n      }\n    ],\n    \"readOnly\": true\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Add Delegate - Curl\nDESCRIPTION: This snippet shows how to add a delegate to a Safe account using a cURL request to the Safe Transaction Service API. It performs a POST request to the `/api/v2/delegates/` endpoint with a JSON payload containing the Safe address, delegate address, delegator address, signature, and label. Note that the signature is generated by signing EIP712 data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n      'https://safe-transaction-sepolia.safe.global/api/v2/delegates/' \\\n      -H 'accept: application/json' \\\n      -H 'Content-Type: application/json' \\\n      -d '{\n          \"safe\": \"0xc62C5cbB964459F3C984682f78A4d3ffffffffff\",\n          \"delegate\": \"0x634Ce7818a1Ca34d3D69FFFFFFFFFFFFFFFF0AC6\",\n          \"delegator\": \"0xAA86E576c084aFFFFFFFFFFFF7967F10C467d318\",\n          \"signature\": \"0xe026c189805d7d5026e8b33e03dfe1847a488a9c6846afefffffffffffff0a566af485b7b4a68189c69c2245fcb9321d718d829d6180245cfe56dc51a0c15b031b\",\n          \"label\": \"User delegator label\"\n      }'\n```\n\n----------------------------------------\n\nTITLE: Decoding Data - Sample JSON Response\nDESCRIPTION: This JSON object represents a sample response from the /api/v1/data-decoder/ endpoint. It shows the decoded data, specifically the method name and the parameters. The parameters include their names, types, and values, reflecting the transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Messages for a Safe Account via Safe Transactions API - TypeScript and Bash\nDESCRIPTION: This snippet illustrates how to retrieve a paginated list of messages associated with a given Safe account by making a GET request to the /safes/{address}/messages/ endpoint. The path parameter 'address' specifies the Safe account address. Optional query parameters include 'ordering' to specify result ordering, 'limit' for page size, and 'offset' for pagination offset. The response includes pagination info such as count, next/previous URLs, and an array of message objects with detailed fields like created timestamps, message hash, confirmations, and signatures. The example includes a curl command to perform this GET request and a sample JSON response representing a paginated message list.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-safes-{address}-messages--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample response for adding a confirmation (POST request)\nDESCRIPTION: This response indicates that the operation of adding a confirmation does not return content upon success, signified by an empty response. Error responses include codes 400 and 422 with respective descriptions for malformed data or processing errors. Clients should interpret an empty response as successful creation of the confirmation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for API Reference Using React, MDX and Swagger in JavaScript\nDESCRIPTION: Defines an asynchronous function getStaticProps for Next.js static site generation. It renders imported MDX content (Linea API reference) to a string using React server rendering and extracts headings based on both swagger JSON schema and the rendered MDX content. These headings are then passed as props under the 'ssg' key for use in page rendering. Dependencies include React, MDX components, and swagger JSON data. The inputs are the MDX component and swagger schema; the output is a headings structure for documentation metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/linea.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample response for retrieving confirmations (GET request)\nDESCRIPTION: This JSON example illustrates the structure of the API response when fetching confirmations. It provides metadata such as count, pagination links, and an array of confirmation objects each containing creation and modification timestamps, owner address, signature string, and signature type. The response enables clients to interpret confirmation details and handle pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Layouts and Base Styling – Bash\nDESCRIPTION: This snippet creates a layouts directory and a base Vue layout file (default.vue) for customizing Safe's application look and feel. Intended for adding project-wide UI styling and Safe branding. The commands are to be run from the project root or as indicated.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/nuxt.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ../layouts\ncd ../layouts\ntouch default.vue\n```\n\n----------------------------------------\n\nTITLE: Create Delegate with curl\nDESCRIPTION: This snippet demonstrates how to create a delegate using a curl command. It sends a POST request to the `/api/v2/delegates/` endpoint with specified headers to accept JSON responses. The actual request body for creating a delegate is not present in the provided snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-base-sepolia.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Getting Module Transaction via Safe API - Bash\nDESCRIPTION: Demonstrates how to fetch a specific module transaction using a GET request to the Safe Transaction Service API. It requires the unique module transaction ID as a path parameter and specifies the 'Accept' and 'Content-Type' headers for JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample User Operation Response (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a successful response when fetching a user operation. It includes fields like ethereumTxHash, sender, userOperationHash, nonce, initCode, callData, gas limits, paymaster information, signature, entry point, and safe operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_56\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n  \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n  \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n  \"nonce\": 0,\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n  \"safeOperation\": {\n    \"created\": \"2024-07-22T10:00:18.892702Z\",\n    \"modified\": \"2024-07-22T10:00:18.892702Z\",\n    \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n    \"validAfter\": null,\n    \"validUntil\": null,\n    \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n    \"confirmations\": [\n      {\n        \"created\": \"2024-07-22T10:00:18.898708Z\",\n        \"modified\": \"2024-07-22T10:00:18.898708Z\",\n        \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n        \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n        \"signatureType\": \"CONTRACT_SIGNATURE\"\n      }\n    ],\n    \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Making a GET request to retrieve User Operations for a Safe account in bash\nDESCRIPTION: Example of using cURL to make a GET request to the Safe Transaction Service API to retrieve User Operations for a specific Safe account address on the Optimism network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit Instance with Provider and Signer in TypeScript\nDESCRIPTION: This snippet shows how to initialize the Safe protocol kit instance by calling the static init method with configuration parameters including provider, signer, and Safe address. It prepares the protocol kit for subsequent transaction creation and signing operations. Dependencies include '@safe-global/protocol-kit'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signhash.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Base Gas Costs (`baseGas`) for `execTransaction`\nDESCRIPTION: Highlights the `baseGas` parameter (index 7) within the `execTransaction` function call. This represents gas costs unrelated to the transaction's execution logic, such as the base transaction fee, signature verification, and refund processing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/execTransaction.mdx#_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).execTransaction(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0, // baseGas\n    0,\n    0x...,\n    0x...,\n    \"0x...\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating SafeOperation Using Safe Transaction Service API - Bash\nDESCRIPTION: Performs a POST HTTP request to the Safe Transaction Service API endpoint to create a new SafeOperation entry for the Safe specified by its address. Requires the Safe account address as a path parameter. The request body is an empty JSON object and the request headers specify JSON content types. Successful execution returns an HTTP 201 status code with an empty JSON response body. This snippet can be used to track and register operations performed on Safe accounts. The snippet depends on network connectivity, curl installed on the client, and correct API endpoint access.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for Token Details\nDESCRIPTION: This response sample depicts the detailed information returned for a specific token, including its type, address, name, symbol, decimals, logo URI, and trust status, aiding in token identification and validation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"type\": \"ERC20\",\\n  \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\\n  \"name\": \"0x5555.com\",\\n  \"symbol\": \"0x5555.com\",\\n  \"decimals\": 18,\\n  \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\\n  \"trusted\": false\\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Multisig Transaction Creation\nDESCRIPTION: Provides a sample JSON response illustrating the expected output after successfully creating a multisig transaction. The response contains the 'safeTxGas' property indicating the gas estimate for the transaction, demonstrating the API's response structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"safeTxGas\": \"45683\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Messages via API using curl\nDESCRIPTION: Demonstrates how to use the `curl` command-line tool to send a GET request to the Safe Transaction Service API's `/api/v1/safes/{address}/messages/` endpoint. This retrieves a paginated list of messages associated with a specific Safe account address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Confirmations with Safe Transaction API (Bash)\nDESCRIPTION: This curl command demonstrates how to retrieve the list of confirmations for a given multisig transaction using the Safe Transaction API. It requires specifying the 'safe_operation_hash' in the URI path and sets both 'Accept' and 'content-type' headers to 'application/json'. Optional query parameters for pagination include 'limit' and 'offset'. The endpoint returns a JSON array of confirmation objects upon a successful 200 response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Owner Query Response - JSON Format\nDESCRIPTION: Sample JSON response from the owners endpoint showing a list of Safe accounts owned by the specified address. The response contains an array of Safe addresses that have the queried address as an owner.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Delegate with curl\nDESCRIPTION: This snippet demonstrates how to delete a delegate using a curl command. It sends a DELETE request to the `/api/v2/delegates/{delegate_address}/` endpoint with specified headers to accept JSON responses. The `delegate_address` is a path parameter indicating which delegate to remove.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-base-sepolia.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Importing Callout component from Nextra in JavaScript\nDESCRIPTION: This snippet imports the Callout component from the 'nextra/components' package, which is used to display styled information boxes within markdown documentation. It is a prerequisite for embedding highlighted info content like version warnings or notes throughout the documentation files.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/4337-safe.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Multisig Transactions using cURL (Bash)\nDESCRIPTION: Demonstrates how to make a GET request using cURL to the Safe Transaction Service API endpoint (`/api/v1/safes/{address}/multisig-transactions/`) to retrieve the list of multisig transactions for a specific Safe address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). It specifies the `Accept` and `content-type` headers as `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Using setModuleGuard in a Contract - Solidity\nDESCRIPTION: This snippet demonstrates how to call the `setModuleGuard` function from within a contract. It shows how to cast a contract to the `ISafe` interface and then call `setModuleGuard` with a specified address. The address `0x...` would be replaced with the actual address of the module guard contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/guards/setModuleGuard.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\ncontract Example {\n    function example() ... {\n        (ISafe safe).setModuleGuard(0x...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request for Queued Transaction - Bash\nDESCRIPTION: Demonstrates how to send a `DELETE` request to the Safe Transaction Service API using `curl` to remove a queued multisig transaction. It targets the endpoint `/api/v1/multisig-transactions/{safe_tx_hash}/`, replacing `{safe_tx_hash}` with the actual transaction hash. The request includes standard Accept and Content-Type headers and an empty JSON body. A successful deletion returns a `204 No Content` status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-blast.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message for a Safe Account via Safe Transactions API - TypeScript and Bash\nDESCRIPTION: This snippet explains how to add a new signed message for a specified Safe account using a POST request to /safes/{address}/messages/. The 'address' path parameter selects the target Safe account. The message to be signed can be either a string, where EIP-191 is used to derive the hash, or a structured EIP-712 object. The API derives the message hash internally from the provided message; sending a raw hash is not accepted. The example includes a curl command with an empty JSON body demonstrating the request, which returns a 201 Created status with an empty response on success.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-safes-{address}-messages--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation to Multisig Transaction - Bash\nDESCRIPTION: Illustrates sending a `POST` request via `curl` to add a new confirmation to a pending Safe multisig transaction using the Transaction Service API. The request targets the endpoint `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/`, including the `safe_tx_hash` in the path. The sample shows an empty JSON request body `{}`, though in practice, the signature data is required here. This endpoint does not support delegate confirmations. A successful request returns a `201 Created` status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-blast.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Information using TypeScript\nDESCRIPTION: This snippet represents TypeScript code used to fetch detailed information about a Safe account. The code is extracted from an example file. More context for this code snippet is missing from the provided documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_54\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/blast/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Using gasToken option in createEnableGuardTx in TypeScript\nDESCRIPTION: This snippet shows how to use the `gasToken` option when calling `createEnableGuardTx`.  `gasToken` is a string representing the token address that is used for the gas payment. It is part of an `options` object passed to the `createEnableGuardTx` function.  This code assumes that the `protocolKit` is initialized and that the `options` object is properly structured.  The `options` parameter is optional, and other optional parameters are available to configure the transaction. A value of `0x0000000000000000000000000000000000000000` indicates no gas payment is being made.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableGuardTx(\n  '0x...',\n  options: {\n    gasToken: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Safe Status Sample Response\nDESCRIPTION: This JSON snippet represents a sample response from the Safe Transaction Service when retrieving the status of a Safe account. It contains fields such as the Safe's address, nonce, threshold, owners, master copy, modules, fallback handler, guard, and version. This serves as a reference for the expected data structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_64\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calling createChangeThresholdTx (parameter gasToken)\nDESCRIPTION: This TypeScript snippet shows how to pass the optional `gasToken` parameter to the `createChangeThresholdTx` function. The function sets the token address that is used for the gas payment, or `0x0000000000000000000000000000000000000000` if there is no payment. The method returns a Safe transaction object that will update the threshold in the safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createchangethresholdtx.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createChangeThresholdTx(\n  threshold: 3,\n  {\n    gasToken: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding NFT Minting Logic in mintNFT.ts - TypeScript\nDESCRIPTION: This snippet signals to add NFT minting routines from a provided code example into mintNFT.ts. The file includes functions to prepare a Safe transaction for minting an NFT, leveraging the Safe SDK and potentially viem for encoding. Ensure Safe account is initialized; requires contract addresses and standard NFT ABI. The code triggers account deployment on first transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../../../../examples/passkeys/lib/mintNFT.ts\n```\n\n----------------------------------------\n\nTITLE: Approving a transaction hash on Safe\nDESCRIPTION: Allows an owner to approve a specific Safe transaction hash using its Keccak hex string and the sender's address. Critical for multisig transaction validation and finalization.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\napprove_hash <keccak-hexstr-hash> <sender-address>\n```\n\n----------------------------------------\n\nTITLE: Creating Base SafeClient Instance in TypeScript\nDESCRIPTION: Shows the initial setup of a `SafeClient` instance using `createSafeClient`. This base client is required before applying extensions like `safeOperations` and needs a provider, signer, and the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient } from '@safe-global/sdk-starter-kit'\n\nexport const safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Response Schema for Safe Transactions API - JSON\nDESCRIPTION: This code snippet details the JSON schema structure for the API endpoint's paginated response, which contains an array of executed Safe transactions. The schema encompasses three principal transaction types, each defined as nested objects with their specific properties such as addresses, IDs, transaction hashes, monetary values, and lists of associated transfers (including ERC20/721/Ether with their metadata). The schema includes fields for pagination (count, next, previous), transaction classification, transfer details, and unique identifiers, enabling typed validation and automated documentation. Required fields and type constraints are explicitly specified for robust API response validation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"refName\": \"PaginatedAllTransactionsSchemaList\",\n  \"type\": \"object\",\n  \"required\": [\"count\", \"results\"],\n  \"properties\": {\n    \"count\": {\"type\": \"integer\", \"example\": 123},\n    \"next\": {\"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=400&limit=100\"},\n    \"previous\": {\"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=200&limit=100\"},\n    \"results\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"refName\": \"AllTransactionsSchema\",\n        \"type\": \"object\",\n        \"description\": \"Just for the purpose of documenting, don't use it\",\n        \"properties\": {\n          ...\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Contract Details API (JSON)\nDESCRIPTION: This is a sample JSON response for a single contract from the contract detail API. It contains the address, name, display and logo information, ABI details, and delegation trust flag. Optional fields such as logoUri may be null depending on the contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Network and API Keys in Safe Deployment Script (TypeScript)\nDESCRIPTION: Sets up network parameters, including Gnosis chain, and retrieves Pimlico API key and private key from environment variables to configure blockchain and API interactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Network\nconst chain = gnosis\nconst chainName = 'gnosis'\nconst PIMLICO_API_KEY = process.env.PIMLICO_API_KEY\nconst PRIVATE_KEY = process.env.PRIVATE_KEY as Hex\n\n```\n\n----------------------------------------\n\nTITLE: Building SafeAccountDetails UI Component - TSX\nDESCRIPTION: This snippet instructs importing code for displaying Safe account details and NFT minting core logic. The React component renders address details, deployment status, and a button to mint an NFT, using Safe SDK-related props and passkey-based signing. Dependencies are Material UI and business logic hooks; props include account, deployment, and signing state.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n// from ../../../../examples/passkeys/components/SafeAccountDetails.tsx\n```\n\n----------------------------------------\n\nTITLE: Providing the signature Parameter in TypeScript\nDESCRIPTION: This snippet highlights the usage of the `signature` parameter within the `confirmSafeOperation` method. The second argument passed is the string signature obtained for the Safe operation, which acts as the confirmation being added.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/confirmsafeoperation.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.confirmSafeOperation(\n  '0x...',\n  '0x...' // focus\n)\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Creating Multisig Transaction\nDESCRIPTION: Shows a sample JSON response received after successfully creating or updating a multisig transaction signature via the API. This example response includes the calculated `safeTxGas`. The full response structure contains more details about the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript import statement for module transactions API\nDESCRIPTION: This snippet indicates the location of the TypeScript source file that contains the example code for listing Safe module transactions. It helps developers locate the relevant implementation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_35\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response: List of Transactions (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the response when retrieving a list of transactions for a Safe. The response includes metadata like `count`, `next`, and `previous` for pagination, as well as an array of transaction objects (`results`). Each transaction object contains details like the Safe address, target address (`to`), value, data, and execution details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Message Details with Transaction Service API (TypeScript)\nDESCRIPTION: This TypeScript code snippet (placeholder path) represents a GET request to the /api/v1/messages/{message_hash}/ endpoint for fetching detailed information on a Safe message. It expects the message_hash as a path parameter, and returns structured JSON with message metadata, confirmations, prepared signature, and more. Dependencies are typical HTTP client libraries compatible with TypeScript.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-messages-{message_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Getting Message Details with GET - Curl\nDESCRIPTION: Retrieves detailed information for a message using its hash by sending a GET request to `/api/api/v1/messages/{message_hash}/` endpoint with `curl`. Sets the `Accept` and `Content-Type` headers to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Safe Creation Status Response Example\nDESCRIPTION: This JSON payload represents a sample response for the Safe creation status API. It includes details such as creator address, transaction hash, factory address, and setup data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_71\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"created\": \"2024-06-25T11:18:48Z\",\n  \"creator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"transactionHash\": \"0x6404e0298423c092cc1ce486f3f72172a1c0f2f28a9b29f69e605ea825360ac5\",\n  \"factoryAddress\": \"0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC\",\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"setupData\": \"0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000017062a1de2fe6b99be3d9d37841fed19f5738040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d3debaab2b8093e69109f23a75501f864f74e20000000000000000000000003a16e3090e32dded2250e862b9d5610bef13e93d0000000000000000000000000000000000000000000000000000000000000000\",\n  \"dataDecoded\": {\n    \"method\": \"setup\",\n    \"parameters\": [\n      {\n        \"name\": \"_owners\",\n        \"type\": \"address[]\",\n        \"value\": [\n          \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n        ]\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"value\": \"0x\"\n      },\n      {\n        \"name\": \"fallbackHandler\",\n        \"type\": \"address\",\n        \"value\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"payment\",\n        \"type\": \"uint256\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"paymentReceiver\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      }\n    ]\n  },\n  \"userOperation\": null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Privy React Auth Package\nDESCRIPTION: This snippet demonstrates how to install the `@privy-io/react-auth` package using npm.  It's a prerequisite for using Privy's React SDK. The command adds the library as a project dependency, allowing access to Privy's authentication and wallet management features.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/privy.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @privy-io/react-auth\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Module Address (GET Request)\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve a list of Safe accounts associated with a specific module address. It includes the curl command with the necessary headers to request the information in JSON format. The module address is passed as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Specific Contract\nDESCRIPTION: This JSON output shows detailed information for a specific contract, including address, name, description, ABI, and whether it's trusted for delegate calls. It aids developers in understanding the contract's properties and integrating accordingly.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Using Safe React Hooks with Custom Configuration in TypeScript\nDESCRIPTION: Shows usage of the useSafe hook inside a React functional component, initialized with a custom Safe configuration object created by createConfig. It imports createConfig and useSafe from @safe-global/safe-react-hooks, retrieves chain information through getChain by passing the custom configuration, and renders the chain name. This approach enables scoped configuration overriding within the hook usage.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/createconfig.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConfig, useSafe } from '@safe-global/safe-react-hooks'\n\nconst config = createConfig({\n  // ...\n})\n\nfunction CustomComponent() {\n  const {\n    getChain,\n    // ...\n  } = useSafe()\n  const { name } = getChain({ config })\n\n  return (\n    <div>\n      {name}\n    </div>\n  )\n}\n\nexport default CustomComponent\n```\n\n----------------------------------------\n\nTITLE: Listing Messages for a Safe Account via API (cURL/TypeScript)\nDESCRIPTION: Retrieves a paginated list of messages associated with a given Safe account address. The address is specified in the path. Optional query parameters `ordering`, `limit`, and `offset` can be used to control the result set.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/scroll/-v1-safes-{address}-messages--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Defining setModuleGuard in ISafe Interface - Solidity\nDESCRIPTION: This code snippet defines the `setModuleGuard` function within the `ISafe` interface. This function enables setting an address that serves as a module guard to secure module-initiated transactions. The module guard checks transactions before execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/guards/setModuleGuard.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function setModuleGuard(address moduleGuard) external;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safes from a Specific Owner via GET /api/v1/owners/{address}/safes/\nDESCRIPTION: This snippet shows how to retrieve safes associated with a specific owner address by making a GET request to the specified API endpoint. The code provides a sample cURL command and a JSON response with multiple safes. Dependencies include the correct owner address and base API URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Module - cURL\nDESCRIPTION: This cURL command makes a GET request to the Safe Transaction Service API to retrieve a list of Safe accounts associated with a given module address.  It includes the required headers for accepting JSON responses and content type. The module address is a path parameter and is required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Tokens\nDESCRIPTION: Illustrates the JSON response format received when listing supported tokens. It includes pagination fields (`count`, `next`, `previous`) and a `results` array containing token information objects (type, address, name, symbol, decimals, logo URI, trusted status).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1846,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ERC20\",\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n      \"name\": \"0x5555.com\",\n      \"symbol\": \"0x5555.com\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n      \"trusted\": false\n    }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing EIP-712 Signature Payload for Deleting Queued Multisig Transaction in Python\nDESCRIPTION: This code constructs the JSON structure required for EIP-712 signing to authorize deletion of a queued Safe multisig transaction. Dependencies: a Python environment capable of dict serialization, chain details (chain_id, safe_address, safe_tx_hash), and the TOTP calculation (using Unix UTC epoch divided by 3600, parameters T0=0, Tx=3600). Expected inputs include the Safe transaction hash and calculated TOTP. The output is a dictionary compliant with EIP-712 standards for signing. Constraints: The transaction must be queued (not executed), and only the original proposer or authorized delegate may initiate the deletion.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"}\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"}\n        ]\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Safe Prepared Signature Data\nDESCRIPTION: This snippet provides an example of a prepared transaction signature string formatted as a hexadecimal string. This format is typically used when representing signatures for Safe transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_55\n\nLANGUAGE: JSON\nCODE:\n```\n\"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Multisig Transaction via Safe API with cURL (Bash)\nDESCRIPTION: Demonstrates how to call the DELETE endpoint to remove a queued Safe multisig transaction using cURL. Requires: a valid Safe transaction hash, EIP-712 signature in headers if required by the backend, and access to the Safe Transaction Service API endpoint. Input is the transaction hash; output is an empty response upon success. Handles HTTP status codes 204 (Deleted), 400 (Malformed data), and 404 (Transaction not found).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-mainnet.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Calling checkNSignatures in a Solidity Contract\nDESCRIPTION: Defines the ISafe interface and demonstrates how to call the `checkNSignatures` function within an example contract to verify a set of signatures against a data hash. The function requires the executor address, the data hash, the packed signatures, and the number of required valid signatures. It reverts if the signatures are invalid or the required number is not met. Be mindful of potential re-entrancy attacks due to EIP-1271 external calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/signatures/checkNSignatures.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\ninterface ISafe {\n    function checkNSignatures(\n        address executor,\n        bytes32 dataHash,\n        bytes signatures,\n        uint256 requiredSignatures\n    ) external view;\n}\n\n\ncontract Example {\n    function example() /* ... */ {\n        (ISafe safe).checkNSignatures(\n            0x..., // Executor address\n            \"0x...\", // Data hash (message or transaction)\n            \"0x...\", // Packed signatures (ECDSA, EIP-1271, or approved hash)\n            1        // Required number of valid signatures\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Decoded Data - cURL Request\nDESCRIPTION: This snippet demonstrates how to decode transaction data using a POST request to the `/api/v1/data-decoder/` endpoint. The request includes headers for specifying the content type and accepted response format. The data to be decoded should be provided in the request body, which is not shown here.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zksync.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Fetching Multi-signature Transactions with Safe API Kit in TypeScript\nDESCRIPTION: This code demonstrates how to use the getMultisigTransactions function to retrieve the history of multi-signature transactions for a Safe account. It includes optional parameters to filter results by execution status, nonce, ordering, and pagination options.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getmultisigtransactions.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst safeAddress = '0x...'\nconst options = {\n  executed: true,\n  nonce: '0x...',\n  ordering: 'created',\n  limit: 10,\n  offset: 10\n}\n\nconst multisigTxs = await apiKit.getMultisigTransactions(safeAddress, options)\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering React Events Component\nDESCRIPTION: This snippet imports the 'Events' React component from a components directory and renders it within a JSX element. It showcases the basic pattern of component importation and usage in React to display event-related content or functionality. Dependencies include React and the 'Events' component located at '../components/Events'. Inputs include the component props, if any; outputs are rendered content as part of the React DOM. It serves as a simple example of component composition.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/build-the-new-internet.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Events from '../components/Events'\n\n<Events />\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Retrieval of Confirmations with Safe API\nDESCRIPTION: This JSON object represents the paginated response from the Safe Transaction Service API for retrieving confirmations. Required and expected fields are count (integer), next and previous (pagination URLs), and results (array of confirmation objects). Each confirmation includes created and modified timestamps, owner address, signature, and signatureType. This format is output when a GET request is successful and provides clients with all necessary details for audit or further processing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Operations - cURL\nDESCRIPTION: This cURL command fetches a list of Safe operations from a specified API endpoint.  It uses the GET method and includes required headers to specify the request type.  The target URL includes the Safe address.  The output is expected to be in JSON format.  Dependencies include a working internet connection and the cURL utility.  The address `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` is used as an example.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Setting Pimlico API Key in Local Environment - Bash\nDESCRIPTION: This bash command creates or overwrites the .env.local file at the project root, injecting your Pimlico API key as an environment variable for Next.js runtime. Replace 'your_pimlico_api_key_goes_here' with your actual Pimlico key. The variable is required for interacting with Pimlico API endpoints in the Safe relay process.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho \"NEXT_PUBLIC_PIMLICO_API_KEY='your_pimlico_api_key_goes_here'\" > .env.local\n```\n\n----------------------------------------\n\nTITLE: Get Message API Request (GET)\nDESCRIPTION: This snippet demonstrates a GET request to retrieve information about a message given its hash. The request uses `curl` and the `/api/v1/messages/{message_hash}/` endpoint.  The headers `Accept` and `content-type` are specified, expecting a JSON response. The message hash is a required path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Getting Transfer - cURL Request\nDESCRIPTION: This cURL command retrieves a specific transfer by its ID. It uses the GET method and includes the Accept and content-type headers. The transfer ID is included in the path.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Analyzing Prepared Signature\nDESCRIPTION: This snippet represents a prepared signature, likely used for transaction authorization or verification within the Safe ecosystem. The signature appears to be a hexadecimal string. It's structure may contain the signature data, recovery id and other relevant parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_63\n\nLANGUAGE: text\nCODE:\n```\n\"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c7365000000000000001f\"\n```\n\n----------------------------------------\n\nTITLE: Add Confirmation - cURL\nDESCRIPTION: This cURL command adds a confirmation to a specific multisig transaction.  It uses the POST method and the transaction hash. It sends an empty JSON object in the request body.  It includes headers for specifying the accepted content type (application/json).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-blast.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Safe Transaction Service Decoded Data Response (json)\nDESCRIPTION: This JSON snippet illustrates a successful response (`HTTP 200`) from the `POST /api/v1/data-decoder/` endpoint. It provides the decoded function `method` and its `parameters`, indicating how the raw transaction data was interpreted based on known contract ABIs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Operations using Curl\nDESCRIPTION: This snippet demonstrates how to make a GET request using curl to query the Safe Transaction Service API for a list of Safe Operations associated with a specific Safe address. It includes required headers for accepting and specifying content type as JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Gas Estimation\nDESCRIPTION: This JSON response shows the estimated gas (`safeTxGas`) needed for a multisig transaction. It serves as an example for interpreting the API's response when querying gas estimations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Confirmations for Multisig Transaction - cURL\nDESCRIPTION: This cURL command retrieves a list of confirmations for a specified Safe multisig transaction, identified by its operation hash. It sends a GET request to the /safe-operations/{safe_operation_hash}/confirmations/ endpoint with specified headers for content type and accepted response type. The service returns a paginated list of confirmation objects in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Installing Safe Global SDK Starter Kit - Bash\nDESCRIPTION: Installs the '@safe-global/sdk-starter-kit' package dependency using PNPM. This step requires Node.js and pnpm to be set up in your environment. Run this command before attempting to import or utilize any Safe SDK functionality.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-transactions.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/sdk-starter-kit\n\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Module via Safe Transaction Service API (bash curl)\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of Safe accounts that have a specific module enabled using the Safe Transaction Service API. It sends a GET request to the `/api/v1/modules/{address}/safes/` endpoint, replacing `{address}` with the desired module address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). The response is a JSON object containing an array of Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_45\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Specific Token Information - json\nDESCRIPTION: Example JSON response showing the detailed token metadata returned by the token info endpoint for a single token address. Contains fields such as type, address, name, symbol, decimals, logo URI, and trusted flag. Demonstrates successful retrieval of a specific token's data. Input is the token address passed in the path; output is a JSON object with token details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ERC20\",\n  \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n  \"name\": \"0x5555.com\",\n  \"symbol\": \"0x5555.com\",\n  \"decimals\": 18,\n  \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n  \"trusted\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Callout component from 'nextra/components'\nDESCRIPTION: The snippet imports the Callout component used for displaying informational or warning messages within documentation or UI, providing visual cues for important notes and alerts concerning Safe Guards.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Importing Safe Contract Dependencies in Solidity\nDESCRIPTION: Import statements to include Safe contract components required by the TokenWithdrawModule. The Enum.sol provides the Operation enum type for transaction call types, while Safe.sol provides interfaces to interact with Safe accounts. These dependencies enable the module to execute transactions and verify signatures securely.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nimport \"@safe-global/safe-contracts/contracts/common/Enum.sol\";\nimport \"@safe-global/safe-contracts/contracts/Safe.sol\";\n```\n\n----------------------------------------\n\nTITLE: Example GET Request for Incoming Transfers - Bash\nDESCRIPTION: This snippet shows how to make a GET request to the Safe Transaction Service API to retrieve incoming transfers for a specific Safe address.  It uses curl to construct the request, specifying the URL, HTTP headers (Accept and content-type), and Safe address.  The output is expected to be in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n```bash \ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n```\n\n----------------------------------------\n\nTITLE: Creating Ngrok Tunnel to Forward Localhost Port for Passkeys Testing using Bash\nDESCRIPTION: This bash command runs ngrok to create a secure public HTTPS tunnel to the local server running on port 3000. Since 'localhost' is invalid for public domain validations in passkey setups, ngrok provides a public domain address that can be used to update configuration files and enable passkey testing by making the local express server accessible over the internet. The output is a public URL to use in app configurations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Adding a Confirmation with Safe Transaction API (Bash)\nDESCRIPTION: This curl command demonstrates how to add a confirmation (i.e., submit a signature) for a multisig transaction using the Safe Transaction API. The command sends a POST request with an empty JSON body to the appropriate safe_operation_hash endpoint and includes the necessary headers. This action does not allow the use of delegates and expects a 201 Created response on success, with no response body required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Safe Balances API Response JSON (Deprecated)\nDESCRIPTION: Illustrates the expected JSON array structure returned by the deprecated 'List a Safe's Balances' endpoint. The array contains objects representing native coin (ETH) and ERC20 token balances, including token details like address, name, symbol, decimals, and logo URI, along with the balance amount.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safes by Owner\nDESCRIPTION: Example JSON response from the `/api/v1/owners/{address}/safes/` endpoint. It returns an object containing a single key `safes`, which holds an array of strings representing the addresses of the Safes associated with the specified owner address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Incoming Transfers\nDESCRIPTION: This JSON payload represents a sample response from the Safe Transaction Service API when requesting a list of incoming transfers for a Safe. It includes details such as the transfer type, execution date, block number, transaction hash, and associated token information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Contract Details via Safe Transaction Service API using cURL\nDESCRIPTION: Sends a GET request using cURL to the `/api/v1/contracts/{address}/` endpoint to fetch details for a specific smart contract identified by its address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`). The required path parameter `address` specifies the contract to retrieve. The response is a JSON object containing the contract's details including address, name, display name, logo URI, contract ABI, and trusted status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Delegates\nDESCRIPTION: Provides a JSON example of the data returned when listing delegates, including count, pagination links, and delegate details such as safe address, delegate address, delegator, label, and expiry date.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\",\n      \"expiryDate\": \"2024-12-31T23:59:59Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction to Remove Owner with Minimal Parameters (TypeScript)\nDESCRIPTION: Demonstrates the most basic usage of `createRemoveOwnerTx` by providing only the required `ownerAddress` parameter within the params object. This creates a transaction to remove the specified owner without changing the Safe's threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx({\n  ownerAddress: '0x...' // The address of the owner to remove\n})\n```\n\n----------------------------------------\n\nTITLE: Importing UseUpdateThresholdReturnType Type (TypeScript)\nDESCRIPTION: Code snippet demonstrating how to import the `UseUpdateThresholdReturnType` type definition from the `@safe-global/safe-react-hooks` library. This type represents the object returned by the `useUpdateThreshold` hook, which includes mutation functions and state.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdatethreshold.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseUpdateThresholdReturnType } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Listing Contracts - Sample JSON Response\nDESCRIPTION: This JSON object represents a sample response from the /api/v1/contracts/ endpoint. It includes a count of contracts, links to the next and previous pages (if applicable), and a list of contract details including address, name, display name, logo URI, contract ABI, and a flag indicating if it's trusted for delegate calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Safe Address Parameter to getSafeInfo\nDESCRIPTION: Demonstrates how to pass a Safe address as a parameter to the getSafeInfo method with focus on the parameter line.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeinfo.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeInfo = await apiKit.getSafeInfo(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transactions (GET) - cURL\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of multi-signature transactions for a specific Safe address using a GET request to the Safe Transaction API. It includes the Safe address in the path and specifies the `Accept` and `Content-Type` headers for JSON.  The Safe address used in this sample is 0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_40\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: List Tokens Example\nDESCRIPTION: Retrieves a list of tokens supported by the Safe Transaction Service. Supports query parameters for filtering by name, address, symbol, decimals, and a search term. Ordering and pagination options are available via the ordering, limit, and offset query parameters. Uses the v1 API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Transfer Details Using Safe Transaction Service API - Bash\nDESCRIPTION: This snippet shows a CURL command that performs a GET request to the Safe Transaction Service API endpoint to retrieve detailed information about a specific token transfer by its transfer ID. The endpoint requires the transfer ID as a path parameter and returns comprehensive transfer data including metadata, token information (if available), and addresses involved. The request and response use JSON format and expect appropriate headers indicating that JSON data is sent and accepted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/transfer/3b3b57b3 \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Placeholder for Fetching Specific Token Info using TypeScript\nDESCRIPTION: Points to the location of a TypeScript example file (`../examples/celo/-v1-tokens-{address}--get.ts`) demonstrating how to fetch detailed information for a specific token address using the Safe Transaction Service API. The implementation details are external to this snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/celo/-v1-tokens-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Protocol Kit\nDESCRIPTION: Imports the Safe Protocol Kit package which is required for creating and managing Safe Smart Accounts. This is the first step in setting up a Safe account for an AI agent.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/basic-agent-setup.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n```\n\n----------------------------------------\n\nTITLE: Adding a Signature to a Message via API (cURL/TypeScript)\nDESCRIPTION: Adds a signature to an existing message identified by its hash. This endpoint requires the message hash in the path parameter. It expects an empty JSON body in the request and returns a 201 Created status with an empty response upon successful addition of the signature.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/scroll/-v1-messages-{message_hash}-signatures--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-scroll.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Transfers API (JSON)\nDESCRIPTION: This JSON snippet provides an example structure of the response returned by the Safe Transaction Service API when listing transfers for a Safe. It includes pagination details (`count`, `next`, `previous`) and an array of transfer objects, each containing detailed information about a specific transaction or token transfer.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Transfer List via Safe Transaction Service API - Bash\nDESCRIPTION: This bash snippet uses curl to send a GET request to the Safe Transaction Service API, fetching a paginated list of up to 1000 recent token transfers for a specific Safe address. Dependencies include the curl command-line tool and internet access to the API endpoint. Required parameters are the Safe address in the URL; headers specify application/json for request and response. Optional query parameters can filter the results (e.g., by block number or date). The output returns a JSON list of transfer records or error information if the request fails.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: SafeOperation API JSON Response Structure (Sample)\nDESCRIPTION: This snippet provides a sample JSON response for a SafeOperation request from the Safe Transaction API. It contains all relevant fields such as created and modified timestamps, operation hash, module address, list of confirmations with signatures, the preparedSignature, and a complete userOperation structure (including Ethereum transaction hash, sender, nonce, gas details, paymaster data, and signature). The structure illustrates both required and optional fields and can be used as reference for client application development or validation. No specific dependencies are required to interpret the JSON, but clients processing it programmatically should handle potential nulls for optional fields.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Creation Status - Safe Transaction Service - Bash (curl)\nDESCRIPTION: This Bash snippet uses curl to submit a GET request to the Safe Transaction Service API in order to retrieve creation details for a specified Safe wallet. Requires curl command-line tool and API endpoint access. The Safe address must be provided in checksummed format in the path. The request includes necessary headers for JSON format. Returns a JSON object describing the creation event, including creator information, transaction hash, and setup parameters if available.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Safe Token Transfers REST API Bash Example\nDESCRIPTION: Demonstrates how to use a curl command to request a paginated list of token transfers for a given Safe address. The endpoint supports query parameters to filter by block numbers, execution dates, token types, and pagination options such as limit and offset. The example shows the expected use of request headers to accept JSON responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Fetching Supported Tokens using cURL\nDESCRIPTION: Provides a cURL command example for making a GET request to retrieve a paginated list of all tokens supported by the Safe Transaction Service API (Celo instance). It sets the `Accept` and `content-type` headers to `application/json`. Various query parameters can be used for filtering (e.g., `name`, `address`, `symbol`, `decimals`) and pagination (`limit`, `offset`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating lib/storage.ts File\nDESCRIPTION: This command creates a TypeScript file named `storage.ts` inside the `lib` directory. This file is intended to store the logic for storing and retrieving passkeys, adapting the storage strategy based on the platform (device storage or web local storage).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch storage.ts\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting operation\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, highlighting the `operation` parameter within the nested `safeTransactionData` object. This parameter specifies the type of operation (e.g., `OperationType.Call`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData: {\n    operation: OperationType.Call,\n    safeTxGas: '0x...',\n    baseGas: '123',\n    gasPrice: '123',\n    gasToken: '0x...',\n    refundReceiver: '0x...',\n    nonce: '10'\n  },\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens from Safe Transaction Service (bash)\nDESCRIPTION: This cURL command performs a GET request to the /api/v1/tokens/ endpoint to fetch the list of ERC20 tokens supported by the Safe Transaction Service. The request supports various optional query parameters to filter and paginate results, including name, address, symbol, decimals, search, ordering, limit, and offset. Required dependencies: curl utility, and network access to the API. The response returns a paginated JSON array of token objects with their type, address, name, symbol, decimals, logo, and trusted status. Limitations include total number of tokens and pagination size.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating Project Structure and Utility Files – Bash\nDESCRIPTION: These bash commands set up the project's utility folder structure and create empty TypeScript files (constants.ts, passkeys.ts, mintNFT.ts) for storing configuration and helper logic. No prior files are required; the commands assume the working directory is at the project root.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/nuxt.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir utils\ncd utils\ntouch constants.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch passkeys.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ntouch mintNFT.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Multisignature Transaction Using Safe Transaction Service API in TypeScript and bash\nDESCRIPTION: This snippet demonstrates how to create a multisignature transaction for a specified Safe address by sending a POST request to the Safe Transaction Service. It requires an Ethereum safe address as a path parameter and returns detailed transaction information including gas parameters, nonce, signatures, and operation details. The example includes a sample curl request with JSON content-type headers and an empty JSON payload, as well as a minimal TypeScript reference comment showing where the relevant example script is located. Responses cover success (201), validation errors (400), and other failure cases (422).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/polygon/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens in Safe Transaction API (TypeScript)\nDESCRIPTION: This snippet references TypeScript example code for retrieving a list of tokens supported in the Safe Transaction Service. It uses query parameters for filtering by name, address, symbol, decimals, and supports pagination and search options.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/arbitrum/-v1-tokens--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Transfers (JSON)\nDESCRIPTION: Provides an example JSON response for the 'List Transfers' API endpoint. The response includes pagination details (`count`, `next`, `previous`) and a `results` array containing objects, each representing a transfer with details like type, execution date, block number, transaction hash, to/from addresses, value, and token information (if applicable).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Module Transaction via Safe Core API in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve details of a module transaction from Safe Core API using a HTTP GET request with curl. The only required parameter is the module_transaction_id, which must be provided in the endpoint path. It requires curl as a dependency and expects a valid module transaction ID. The expected output is a JSON object representing the module transaction. Limitations include the need for the transaction to exist; otherwise, an error response is returned.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safes by Module\nDESCRIPTION: This JSON snippet shows an example response from the API when requesting safes associated with a specific module. It includes an array of safe addresses under the 'safes' key, demonstrating the expected output format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Token Transfers via API\nDESCRIPTION: This snippet documents the GET endpoint to list token transfers for a specified Safe address. It handles query parameters for filtering results by various transfer and block attributes, supports pagination, and returns a paginated list of transfer details including token info and transaction metadata. It demonstrates request formation with cURL and provides a sample JSON response structure indicating transfer details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Global API Kit for Mainnet - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to set up a SafeApiKit instance from the @safe-global/api-kit package, specifying the chainId for Mainnet (1n). It is a required prerequisite for making queries with the Safe Global API Kit and must be imported wherever Safe operations are called. The exported apiKit instance can then be reused elsewhere. There are no input parameters; the instance is constructed with chainId, and subsequent API requests will use this configuration. Dependency: @safe-global/api-kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafeoperationsbyaddress.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Messages for a Safe (curl)\nDESCRIPTION: Retrieves a list of messages for a specific Safe account using a GET request to the /api/v1/safes/{address}/messages/ endpoint. Requires the Safe address path parameter. Supports optional query parameters for pagination (limit, offset) and ordering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safes by Owner\nDESCRIPTION: This JSON snippet presents an example response from the API listing safes owned by a particular address, including multiple safe addresses in an array. It illustrates the data structure returned upon a successful request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xEFeE5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Queued Multisig Transaction via API (Bash/cURL)\nDESCRIPTION: Demonstrates how to make a DELETE request using cURL to the Safe Transaction Service API endpoint `/api/v1/multisig-transactions/{safe_tx_hash}/` to remove a specific queued but not executed transaction. This action requires an EIP-712 signature from the proposer or a valid delegate, passed typically via headers or request body mechanisms not fully shown in this basic cURL example. The `safe_tx_hash` is a required path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-polygon.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Fetching All Transactions for Safe (TypeScript)\nDESCRIPTION: This TypeScript code snippet (from ../examples/sepolia/-v1-safes-{address}-all-transactions--get.ts) demonstrates how to retrieve all transactions associated with a specific Safe address. It likely involves making an HTTP GET request to the specified endpoint, and it might use libraries like `axios` or `fetch` to handle the request. The address of the safe is dynamically inserted into the URL. No explicit dependencies are listed here, but it implicitly requires a framework supporting HTTP requests.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/sepolia/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: React Material-UI Grid Layout for ERC-4337 Benefits\nDESCRIPTION: This snippet creates a responsive grid layout using Material-UI components to display features of ERC-4337, with each feature represented as a CustomCard component. Dependencies include React and Material-UI, and the snippet manages layout and styling for usability and clarity.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/overview.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Grid } from '@mui/material'\nimport CustomCard from '../../../components/CustomCard'\n\n// React component that renders a grid displaying ERC-4337 benefits\n<Grid\n  container\n  spacing={2}\n  display='flex'\n  alignContent='flex-start'\n  mt={3}\n>\n  <Grid item xs={12} md={4}>\n    <CustomCard\n      title={'Flexibility of payments'}\n      description={'Users can decide how to pay the gas fees. Use native tokens like ETH, ERC-20 tokens, or even sponsored transactions.'}\n      url=\"\"\n      newTab={false}\n    />\n  </Grid>\n  <Grid item xs={12} md={4}>\n    <CustomCard\n      title={'Freedom of Authentication'}\n      description={'It enables the use of different authentication mechanisms, such as multi-signature, passkeys, and future quantum-proof cryptography.'}\n      url=\"\"\n      newTab={false}\n    />\n  </Grid>\n  <Grid item xs={12} md={4}>\n    <CustomCard\n      title={'Decentralization'}\n      description={\"It's supported by various providers, avoiding lock-in to a single-relayer technology, offering an anti-fragile approach with no single point of failure.\"}\n      url=\"\"\n      newTab={false}\n    />\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Calculating Predicted Safe Address in TypeScript\nDESCRIPTION: Demonstrates calling the `getAccountAddress` utility function to pre-compute the deterministic address where a Safe account will be deployed using CREATE2. It passes necessary configuration parameters like owner, module addresses, factory/singleton addresses, and a salt nonce.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-detailed.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Assume necessary addresses and client are defined\n// Assume getAccountAddress is imported\n\nconst sender = await getAccountAddress({\n  client: publicClient, \n  owner: signer.address,\n  addModuleLibAddress: ADD_MODULE_LIB_ADDRESS,\n  safe4337ModuleAddress: SAFE_4337_MODULE_ADDRESS,\n  safeProxyFactoryAddress: SAFE_PROXY_FACTORY_ADDRESS,\n  safeSingletonAddress: SAFE_SINGLETON_ADDRESS,\n  saltNonce, \n  multiSendAddress: SAFE_MULTISEND_ADDRESS,\n  erc20TokenAddress: USDC_TOKEN_ADDRESS,\n  paymasterAddress: ERC20_PAYMASTER_ADDRESS\n})\n```\n\n----------------------------------------\n\nTITLE: Python - Delete Queued Multisig Transaction Request Data Schema\nDESCRIPTION: Defines the data structure and EIP-712 typed data required for signing a delete request of a queued multisig transaction. It includes domain fields like name, version, chainId, and verifyingContract, as well as the message containing safeTxHash and TOTP. Dependencies include the transaction details like chain_id, safe_address, safe_tx_hash, and totp.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n{\n   \"types\": {\n       \"EIP712Domain\": [\n           {\"name\": \"name\", \"type\": \"string\"},\n           {\"name\": \"version\", \"type\": \"string\"},\n           {\"name\": \"chainId\", \"type\": \"uint256\"},\n           {\"name\": \"verifyingContract\", \"type\": \"address\"}\n       ],\n       \"DeleteRequest\": [\n           {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n           {\"name\": \"totp\", \"type\": \"uint256\"}\n       ]\n   },\n   \"primaryType\": \"DeleteRequest\",\n   \"domain\": {\n       \"name\": \"Safe Transaction Service\",\n       \"version\": \"1.0\",\n       \"chainId\": chain_id,\n       \"verifyingContract\": safe_address\n   },\n   \"message\": {\n       \"safeTxHash\": safe_tx_hash,\n       \"totp\": totp\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Operation API Response - JSON\nDESCRIPTION: This JSON snippet represents the structured response from the Safe Transaction Service API after querying a SafeOperation by hash. It contains detailed metadata such as creation and modification timestamps, the Safe operation hash, module and sender addresses, confirmation statuses, prepared signatures, and an embedded UserOperation object describing the underlying transaction data. The response includes required fields and complex nested properties, and is intended as illustrative output for API consumers to parse and process.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Empty JSON Response for Safe Operation Creation\nDESCRIPTION: This snippet represents the sample response returned by the API when a SafeOperation is successfully created. The response body is empty, and the status code is 201, indicating successful resource creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Command to Retrieve Incoming Transfers\nDESCRIPTION: Provides an example Bash cURL command to send a GET request to the API endpoint for a specific Safe address to fetch incoming transfers. It includes headers for JSON content type and acceptance, enabling users to test the API interaction directly from the terminal.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transaction Confirmations with cURL\nDESCRIPTION: A cURL request example for retrieving the list of confirmations for a specific multisig transaction identified by its Safe transaction hash. The response includes owner addresses and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response (JSON)\nDESCRIPTION: This JSON snippet shows a sample response from the Safe Transaction Service when retrieving all transactions for a Safe. It includes details such as the count of transactions, pagination links (next and previous), and an array of transaction objects. Each transaction object contains information like the Safe address, recipient, value, data, and confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_30\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Module Transaction by ID using curl in Bash\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve module transaction details by its ID. The request includes necessary headers for JSON content.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for Celo API Reference - JavaScript\nDESCRIPTION: This asynchronous function is a Next.js `getStaticProps` implementation. It renders the `Mdx` component (representing `celo-reference.mdx`) to an HTML string, then uses a utility function to extract headings from both the `swagger` JSON schema and the rendered content. The extracted headings are returned as `props` to be consumed by the main page component for static site generation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/celo.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for confirmation addition\nDESCRIPTION: This snippet indicates that the response for successfully adding a confirmation is empty, implying no content returned, only success status is to be expected. Errors such as malformed data or processing errors return corresponding status codes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Sample User Operation Response\nDESCRIPTION: This JSON snippet illustrates the structure of a typical response from the API endpoint when retrieving a list of UserOperations. The response includes count, next, previous and results. Each result represents a UserOperation and contains details such as ethereumTxHash, sender, userOperationHash, nonce, initCode, callData, callGasLimit, verificationGasLimit, preVerificationGas, maxFeePerGas, maxPriorityFeePerGas, paymaster, paymasterData, signature, entryPoint, and safeOperation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b4037000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb374280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f7269696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ]\n      }\n    ]\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Listing Transfers - cURL Request\nDESCRIPTION: This cURL command retrieves a list of token transfers for a given Safe address. It specifies the GET method and includes the Accept and content-type headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Querying Safe Module Transactions with curl (bash)\nDESCRIPTION: This bash script uses curl to perform a GET request on the Safe Transaction Service API, targeting a specific Safe address to retrieve all module transactions. The example includes setting appropriate HTTP headers for Accept and Content-Type. The only required dependency is curl. The request path must include the Safe's address, and the expected output is a JSON object as described, listing module transactions that match optional filters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Fetching Collectibles for a Safe Account using cURL\nDESCRIPTION: Demonstrates how to use cURL to send a GET request to the `/api/v2/safes/{address}/collectibles/` endpoint to retrieve a paginated list of ERC721 collectibles owned by a specific Safe address (e.g., 0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75). Requires the Safe address as a path parameter and accepts optional query parameters like `trusted`, `exclude_spam`, `limit`, and `offset`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: List Contracts API Request Example (GET /api/v1/contracts/)\nDESCRIPTION: Sample cURL command demonstrating how to request a list of known smart contracts from the API. It includes necessary headers and showcases the endpoint URL without parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Confirmations (Bash)\nDESCRIPTION: This snippet shows how to list confirmations for a multisig transaction using a GET request. It queries the Safe Transaction Service endpoint, providing the safe transaction hash in the URL. The request headers indicate that JSON is expected as the response format, and the content type is set to JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Call List Module Transactions API via Curl\nDESCRIPTION: Demonstrates how to use the `curl` command-line tool to make a GET request to the Safe Transaction Service API endpoint to fetch module transactions for a specified Safe address. Includes necessary headers for content type and acceptance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_31\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Retrieving a Specific Transfer\nDESCRIPTION: Presents an example JSON response from the `/api/v1/transfer/{transfer_id}` endpoint. This response contains the detailed information for a single transfer, including its type, execution date, block number, transaction hash, addresses, value, and unique transfer ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching All Safe Transactions via cURL\nDESCRIPTION: A cURL command demonstrating how to make a GET request to the Safe Transaction Service API (specifically on zkSync) to retrieve all transactions for a specific Safe address (0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75). It specifies the required 'Accept' and 'content-type' headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Safe Delegates API usage in TypeScript and cURL\nDESCRIPTION: Demonstrates how to query the Safe Transaction Service to retrieve a paginated list of delegates. Shows usage of HTTP GET method with optional query parameters such as safe address, delegate, delegator, label, limit, and offset. Includes sample TypeScript import comment and a cURL request example with appropriate headers. Expected output is a JSON object providing count, pagination URIs, and an array of delegate objects each containing safe, delegate, delegator addresses, and label.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v2-delegates--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v2/delegates/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safes Owned by Specific Owner - TypeScript and Bash\nDESCRIPTION: This snippet presents the API endpoint to retrieve a list of Safe accounts that list a specific address as one of their owners. The owner's address is passed as a required path parameter. It includes example TypeScript usage (referenced) and a sample curl command demonstrating the invocation of the GET request with necessary headers. The JSON response contains an array of Safe addresses owned by the given address. Requires a REST client or curl and connectivity to the Safe Transaction Service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-owners-{address}-safes--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Operation via curl\nDESCRIPTION: This curl command demonstrates how to retrieve a specific user operation from the Safe Transaction Service API by its user operation hash. It sends a GET request to the specified endpoint and includes the Accept and Content-Type headers. The expected response is a JSON object containing the details of the requested user operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: IFeeEstimator Interface Definition\nDESCRIPTION: Defines the `IFeeEstimator` interface, which allows for custom gas estimation strategies. It includes optional methods for pre- and post-estimation of user operation gas costs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nIFeeEstimator {\n  preEstimateUserOperationGas?: EstimateFeeFunction\n  postEstimateUserOperationGas?: EstimateFeeFunction  \n}\n```\n\n----------------------------------------\n\nTITLE: Set up Safe Operations Client\nDESCRIPTION: This snippet shows how to set up the `safeOperationsClient` using the `@safe-global/sdk-starter-kit`. It creates a `safeClient` using `createSafeClient` and extends it with `safeOperations`, including optional bundler and paymaster configurations. It requires a provider, signer, and Safe address. The bundler and paymaster options can be configured with URLs, sponsorship policies, and token addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/confirmsafeoperation.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSafeClient, safeOperations } from '@safe-global/sdk-starter-kit'\n\nconst safeClient = await createSafeClient({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst bundlerOptions: BundlerOptions = {\n  bundlerUrl: 'https://...'\n}\n\nconst paymasterOptions: PaymasterOptions = {\n  isSponsored: true, // Optional\n  paymasterUrl: 'https://...', // Optional\n  sponsorshipPolicyId: 'abc', // Optional\n  paymasterAddress: '0x...', // Optional\n  paymasterTokenAddress: '0x...', // Optional\n  amountToApprove: 123n // Optional\n}\n\nexport const safeOperationsClient = await safeClient.extend(\n  safeOperations(bundlerOptions, paymasterOptions)\n)\n```\n\n----------------------------------------\n\nTITLE: Data Decoder example in TypeScript\nDESCRIPTION: This refers to an external TypeScript file from the same repository providing an example of how to use the Data Decoder API. The actual code is located in `../examples/chiado/-v1-data-decoder--post.ts`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: List Contracts API Endpoint - Retrieve Known Smart Contracts\nDESCRIPTION: This endpoint fetches the list of known smart contracts with their ABI details. It supports query parameters for ordering, pagination (limit and offset). Dependencies include HTTP methods and URL structure, with sample cURL command for API call and a sample JSON response showing contract details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Estimating Multisig Transaction Gas - JSON\nDESCRIPTION: This JSON response example shows the output from the gas estimation endpoint of the Safe Transaction Service. The 'safeTxGas' field is returned as a string and indicates the estimated gas usage for the requested multisig transaction, based on the provided data and Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Operation Retrieval (JSON)\nDESCRIPTION: This JSON snippet represents a typical API response structure for a Safe operation query. It includes timestamps for creation and modification, operation hash, module address, lists of confirmations with digital signatures, the prepared signature string, and a detailed user operation object containing transaction metadata and gas parameters. This structure is critical for clients to parse and verify Safe operation data returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: cURL GET Request to Fetch All Transactions for a Specific Safe\nDESCRIPTION: This bash command performs an HTTP GET request to retrieve all transactions associated with a specific Safe address on the Optimism network. The request includes headers to accept JSON responses and specifies the endpoint URL, which is essential for programmatic data fetching.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    \n```\n\n----------------------------------------\n\nTITLE: Accessing Signer Connection Status Hook in React - TypeScript\nDESCRIPTION: This snippet shows how to use the `useSafe` hook from `@safe-global/safe-react-hooks` within a React functional component. It destructures the `isSignerConnected` boolean value provided by the hook. The component then renders text indicating whether a signer is connected or not based on this value. Dependencies include `@safe-global/safe-react-hooks` and React. The hook itself relies on the context provided by `SafeProvider`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/issignerconnected.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { useSafe } from '@safe-global/safe-react-hooks'\n\nfunction IsSignerConnected() {\n  const { isSignerConnected } = useSafe()\n\n  return (\n    <>\n      {isSignerConnected ? 'Signer is connected' : 'No signer connected'}\n    </>\n  )\n}\n\nexport default IsSignerConnected\n```\n\n----------------------------------------\n\nTITLE: Sample List Tokens API Response\nDESCRIPTION: A JSON response representing a list of tokens, including their type, address, name, symbol, decimals, logo URI, and trust status.  It illustrates a paginated response structure, which includes 'count', 'next', 'previous', and 'results' fields.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1846,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ERC20\",\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n      \"name\": \"0x5555.com\",\n      \"symbol\": \"0x5555.com\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n      \"trusted\": false\n    }\n    // ...\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Delete Delegate API Response Sample\nDESCRIPTION: Shows an empty response indicating successful deletion with HTTP 204 status. Errors include malformed data, delegate not found, or invalid address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Contract List in JSON\nDESCRIPTION: Shows the JSON response format when retrieving a list of contracts. The response includes pagination information (count, next, previous) and an array of contract objects with their address, name, and ABI details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing and handling preparedSignature JSON data in blockchain context\nDESCRIPTION: This snippet contains a JSON string representing ('preparedSignature') data used in blockchain transaction processes. It includes a hexadecimal string, likely encoding signature, transaction, or cryptographic information. The data could be used as input for signature verification functions, transaction signing, or authorization processes within a blockchain application. Dependencies would include blockchain SDKs or cryptographic libraries capable of processing such hexadecimal signature data. The input is a string, output would depend on downstream usage, such as validation success or failure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_53\n\nLANGUAGE: JSON\nCODE:\n```\n \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n```\n\n----------------------------------------\n\nTITLE: Get Multisig Transaction API Endpoint Documentation\nDESCRIPTION: Provides details for the GET endpoint to retrieve a multisignature transaction by its Safe transaction hash, with request parameters, response schemas, and sample responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"string\",\n  \"to\": \"string\",\n  \"value\": \"string\",\n  \"data\": [\"string\",\"null\"],\n  \"operation\": \"integer\",\n  \"gasToken\": [\"string\",\"null\"],\n  \"safeTxGas\": \"integer\",\n  \"baseGas\": \"integer\",\n  \"gasPrice\": \"string\",\n  \"refundReceiver\": [\"string\",\"null\"],\n  \"nonce\": \"integer\",\n  \"executionDate\": \"string\",\n  \"submissionDate\": \"string\",\n  \"modified\": \"string\",\n  \"blockNumber\": [\"integer\",\"null\"],\n  \"transactionHash\": \"string\",\n  \"safeTxHash\": \"string\",\n  \"proposer\": \"string\",\n  \"proposedByDelegate\": [\"string\",\"null\"],\n  \"executor\": [\"string\",\"null\"],\n  \"isExecuted\": \"boolean\",\n  \"isSuccessful\": [\"boolean\",\"null\"],\n  \"ethGasPrice\": [\"string\",\"null\"],\n  \"maxFeePerGas\": [\"string\",\"null\"],\n  \"maxPriorityFeePerGas\": [\"string\",\"null\"],\n  \"gasUsed\": [\"integer\",\"null\"],\n  \"fee\": [\"integer\",\"null\"],\n  \"origin\": \"string\",\n  \"dataDecoded\": {\"additionalProperties\":{}},\n  \"confirmationsRequired\": \"integer\",\n  \"confirmations\": {\"additionalProperties\":{},\"description\":\"Filters confirmations queryset\"},\n  \"trusted\": \"boolean\",\n  \"signatures\": [\"string\",\"null\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Operation Response - JSON\nDESCRIPTION: This JSON object provides a sample response that is returned from the API endpoint.  It contains details of the Safe operation, including timestamps, the Safe operation hash, module address, confirmations, prepared signature, and the user operation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f7269696e223a66616c7365000000000000001f\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f7269696e223a66616c7365000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Create Multisig\nDESCRIPTION: This is a JSON sample response, presumably returned by the API after the successful creation of a multisig transaction. The response contains the `safeTxGas` parameter, which indicates the estimated gas usage for the transaction. This is helpful for gas cost estimation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: cURL example for GET request to list Safe module transactions\nDESCRIPTION: This cURL command performs an HTTP GET request to the Safe API endpoint, requesting module transaction data for a specific Safe address. It sets header parameters for content type and accepts JSON responses, demonstrating how to fetch transaction data from the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n \n```\n\n----------------------------------------\n\nTITLE: Listing Paginated Collectibles in Safe Transaction API (TypeScript)\nDESCRIPTION: This snippet references TypeScript example code for retrieving a paginated list of ERC721 tokens associated with a particular Safe account, using path and query parameters to specify the account address, filtering options, and pagination controls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/arbitrum/-v1-tokens--get.ts\n```\n\n----------------------------------------\n\nTITLE: Rendering Layout Components with JSX\nDESCRIPTION: Demonstrates the use of React components like Grid and Hr for structuring documentation page layout. It includes basic inline styling applied to the horizontal rule.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_56\n\nLANGUAGE: JSX\nCODE:\n```\n  </Grid>\n</Grid>\n<Hr style={{ \n  marginTop: '112px',\n  marginBottom: '112px'\n}} />\n```\n\n----------------------------------------\n\nTITLE: Fetching All Transactions for a Safe - cURL\nDESCRIPTION: This cURL command retrieves all transactions for a specified Safe address from the Gnosis Chain Safe Transaction Service. It sends a GET request with specified headers to accept and define the content type as JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to Safe Global API Using curl (Bash)\nDESCRIPTION: This snippet demonstrates how to use the curl command-line tool to execute a GET request against the Safe Global API's all-transactions endpoint for a given safe address. It sets appropriate HTTP headers, including Accept and Content-Type as application/json. The command is intended to fetch all transaction records for a specific safe. Usage requires curl installed and network access to the API endpoint. Outputs a JSON response representing transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safe Account Status Request\nDESCRIPTION: This JSON sample illustrates the response structure returned when querying Safe account details, including address, nonce, threshold, owners, modules, fallback handler, guard, and version. It helps developers understand the data they will receive from the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Transaction via Safe Transaction API (TypeScript)\nDESCRIPTION: This code snippet refers to a TypeScript source file used for demonstrating how to initiate a POST request to create a multisig transaction for a given Safe address with required confirmations. It relies on appropriate network configuration and uses input parameters as expected by the Safe Transaction API. No executable code is shown, but the filename and location provide reference for developers. Dependencies include TypeScript and relevant HTTP libraries such as axios or fetch for implementation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/scroll/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Transaction Confirmations via API – Bash\nDESCRIPTION: Presents a GET request for retrieving all confirmation signatures for a specific multisig transaction using its safe transaction hash. The endpoint supports optional limit and offset parameters for pagination, with results returned as a JSON object containing the owner, submissionDate, transactionHash, signature, and signatureType fields. The Accept and content-type headers must be set to application/json.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens via GET /api/v1/tokens/lists/\nDESCRIPTION: This snippet describes the API endpoint for retrieving a paginated list of tokens supported in the Safe Transaction Service. It details query parameters for pagination, response schema, and provides a sample cURL request to test the endpoint. The response includes token details such as URL and description.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/tokens/lists/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safes by Module Query\nDESCRIPTION: Example JSON response returned by the `/api/v1/modules/{address}/safes/` endpoint. The response object contains a `safes` key, which holds an array of strings representing the addresses of the Safes associated with the requested module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_46\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Confirmations for Safe Multisig Transaction via API using Bash\nDESCRIPTION: Shows how to retrieve the list of confirmations for a specific Safe multisig transaction using a curl command. It sends a GET request to the `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` endpoint, where `{safe_tx_hash}` is the hash of the transaction. Optional query parameters `limit` and `offset` can be used for pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens using cURL\nDESCRIPTION: This Bash snippet shows how to fetch a list of all tokens supported by the Safe Transaction Service via a GET request to the `/api/v1/tokens/` endpoint. It supports various query parameters for filtering (e.g., `name`, `address`, `symbol`, `decimals`) and pagination (`limit`, `offset`). The API returns a paginated JSON list of token information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Return transaction history\nDESCRIPTION: This command fetches the history of multi-signature transactions, including those that are currently pending execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhistory\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Operation Type (`operation`) in `safeClient.send` in TypeScript\nDESCRIPTION: Illustrates how to optionally specify the transaction operation type (`operation`) within the `transactions` array for `safeClient.send`. `0` represents CALL, `1` represents DELEGATECALL. Defaults to `1` if omitted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x',\n    operation: 0\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Specific Contract Response Example\nDESCRIPTION: This JSON snippet provides a sample response from the \"Get Specific Contract\" API endpoint.  It illustrates the structure of the response containing details about a specific smart contract, including address, name, display name, logo URI, contract ABI, and a flag for trusted delegate calls.  This response format is consistent with the contract data returned in the list response. Dependencies: none.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Safe Delegate (curl)\nDESCRIPTION: Executes a DELETE request to remove a specific Safe delegate identified by its address in the path. The operation requires standard headers and an EIP712 signature in the request body (empty in this example, but signing is mentioned in documentation) which can be provided by either the delegator or the delegate. Returns 204 No Content upon successful deletion.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-avalanche.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Module Transaction Response Format in JSON\nDESCRIPTION: Sample response for a module transaction request showing the transaction details including creation date, execution date, transaction hash, and other relevant parameters. This represents a successful module transaction execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction to Remove Passkey Owner using Protocol Kit (TypeScript)\nDESCRIPTION: Illustrates the usage of `createRemoveOwnerTx` to generate a Safe transaction for removing an owner authenticated via a passkey. It outlines the structure for providing passkey details and includes how to incorporate optional transaction properties like gas and nonce settings.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RemovePasskeyOwnerTxParams,\n  PasskeyArgType,\n  SafeTransactionOptionalProps\n} from '@safe-global/protocol-kit'\nimport { protocolKit } from './setup.ts'\n\nconst passkey: PasskeyArgType = {\n  rawId,\n  coordinates\n}\n\nconst params: RemovePasskeyOwnerTxParams = {\n  passkey, // The passkey associated with the owner to remove\n  threshold: 1 // Optional: The new threshold\n}\n\nconst options: SafeTransactionOptionalProps = {\n  safeTxGas: '123', // Optional\n  baseGas: '123', // Optional\n  gasPrice: '123', // Optional\n  gasToken: '0x...', // Optional\n  refundReceiver: '0x...', // Optional\n  nonce: 123 // Optional\n}\n\nconst safeTransaction = await protocolKit.createRemoveOwnerTx(\n  params,\n  options // Optional\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Operation via Transaction Service API - Bash\nDESCRIPTION: This snippet demonstrates how to query the Safe Transaction Service API for a SafeOperation by issuing a GET request with curl to the appropriate endpoint. The sample uses the operation hash as a required path parameter and specifies Accept and Content-Type headers for JSON communication. A valid network connection and curl utility are prerequisites. The request returns SafeOperation details in JSON format upon success.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Messages\nDESCRIPTION: Sample JSON response for the List Messages endpoint, showing a paginated list containing message details, including creation/modification timestamps, message hash, content, proposer, confirmations, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.807652Z\",\n      \"modified\": \"2024-07-29T16:59:00.807652Z\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n      \"message\": \"string message\",\n      \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"safeAppId\": null,\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-29T16:59:00.843249Z\",\n          \"modified\": \"2024-07-29T16:59:00.843249Z\",\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract - Sample Response\nDESCRIPTION: This JSON snippet shows the expected response format for retrieving information about a specific contract from the `/api/v1/contracts/{address}/` endpoint. It includes details like the contract's address, name, ABI, and `trustedForDelegateCall` status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Deleting Transaction (JSON)\nDESCRIPTION: Shows an example of an empty response body returned upon successfully deleting a queued multisig transaction via the API. A successful deletion typically results in a 204 No Content HTTP status code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server - Bash\nDESCRIPTION: This command starts the local development server for the Next.js application using pnpm. The default address is http://localhost:3000. This environment reflects any real-time code changes and is necessary for previewing the Safe-passkeys frontend.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Multisig Transaction Creation - JSON\nDESCRIPTION: This JSON object demonstrates a sample response from the Safe Transaction Service after a successful creation of a multisig transaction. The response contains a single property, 'safeTxGas', representing the gas amount estimated or allocated for the created transaction. Clients should parse this value as a string and use it in subsequent transaction workflows.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Operation Request - TypeScript\nDESCRIPTION: This code snippet indicates the source of the example file, which is used as a reference for fetching a user operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_64\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Fetching Incoming Transfers of a Safe\nDESCRIPTION: This snippet provides an example of how to make a GET request to the incoming transfers API endpoint using cURL. It shows the full URL with the Safe address as a path parameter, and includes headers for accepting JSON responses and specifying content type. This example demonstrates the correct syntax for invoking the API with curl.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Deleting Safe Transaction (JSON)\nDESCRIPTION: This JSON snippet represents the expected response body upon successful deletion of a queued Safe transaction via the API. A 204 status code accompanies this empty response body, signifying successful processing of the DELETE request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Single Transfer Details (JSON)\nDESCRIPTION: This JSON snippet represents an example response from the GET /api/v1/transfer/{transfer_id} API, providing all details for the requested transfer. It includes fields such as type, executionDate, blockNumber, transactionHash, to, value, tokenId, tokenAddress, transferId, tokenInfo, and from. Typically returned for a successful request (HTTP 200), this response format can be used for validation, documentation, or client-side processing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define EIP-712 Structure for Deleting Safe Transactions (Python/JSON)\nDESCRIPTION: Specifies the EIP-712 typed data structure required for signing a delete request for a queued Safe multisig transaction. This structure includes domain separators like name, version, chainId, and verifyingContract (the Safe address), along with the message containing the `safeTxHash` and a time-based one-time password (`totp`) calculated based on Unix UTC epoch time.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Clone and Run Script for Safe Infrastructure\nDESCRIPTION: Clones the Safe Infrastructure repository and executes the local run script to deploy Docker containers for Safe services, including reverse proxy, databases, message queues, and web interfaces.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-infrastructure-deployment.mdx#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone git@github.com:safe-global/safe-infrastructure.git\ncd safe-infrastructure\nsh scripts/run_locally.sh\n```\n\n----------------------------------------\n\nTITLE: Safe Transaction Signature Data Example\nDESCRIPTION: This code snippet shows an example of the 'preparedSignature' data. This data likely represents a signed message or transaction payload prepared for submission to a Safe smart contract. It includes a hexadecimal string representing the signature and potentially associated metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_58\n\nLANGUAGE: text\nCODE:\n```\n\"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates via API GET request (TypeScript & curl)\nDESCRIPTION: Defines the API route, query parameters, and sample request/response for retrieving a paginated list of all delegates. The TypeScript code indicates usage within a testing or documentation context, whereas the curl command illustrates the actual HTTP request. Dependencies include the API endpoint at /api/v2/delegates/ with optional query params for filtering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/blast/-v2-delegates--get.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request to Safe Multisig Transactions Endpoint using curl Bash\nDESCRIPTION: Demonstrates how to perform a GET HTTP request to the Safe transactions API endpoint using curl in bash. The command includes headers for Accept and content-type set to application/json, targeting a multisig-transactions resource for a given Safe address. This is useful for testing or integration without a dedicated client.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Owner via cURL\nDESCRIPTION: Sends a GET request using cURL to the `/api/v1/owners/{address}/safes/` endpoint to retrieve a list of Safe addresses owned by the specified address. The `{address}` path parameter should be replaced with the target owner's checksummed address. The `Accept: application/json` header requests the response in JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_47\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Bash cURL Command for Fetching Multisig Transactions from Safe Transaction API\nDESCRIPTION: This cURL command performs a GET request to the Safe transaction API to retrieve multisignature transactions for a specific Safe address. It sets the necessary headers to accept JSON responses and specifies the request URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Get User Operation Details (TypeScript)\nDESCRIPTION: This snippet references a TypeScript file that likely contains the implementation for retrieving user operation details.  It's intended to be used to fetch user operation data, likely using a provided hash. It is part of a larger system and interacts with the Safe Transaction Service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Specific Contract Response\nDESCRIPTION: This JSON snippet is an example response when retrieving a specific contract by address. The response contains the contract `address`, `name`, `displayName`, `logoUri`, `contractAbi`, and `trustedForDelegateCall` status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Incoming Transfers Request\nDESCRIPTION: This snippet shows a concrete example of the JSON response returned from the API when querying incoming transfers for a Safe. It includes transfer details such as type, execution date, transaction hash, sender, recipient, amount, and transfer ID, illustrating the schema's application and the typical data returned, including null values where applicable.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Delegate (DELETE /api/v2/delegates/{delegate_address}/)\nDESCRIPTION: Removes all delegate/delegator pairs associated with the specified delegate address. The request requires the delegate address as a URL path parameter and uses the DELETE HTTP method. The signature must be generated similarly to adding a delegate, ensuring authorization. Success results in an empty response, with possible errors for malformed data, delegate not found, or invalid address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-arbitrum.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Proposing a Transaction with Agent One using Safe API Kit in TypeScript\nDESCRIPTION: Demonstrates how an AI agent can create and propose a transaction to the Safe Transaction Service. The example creates a simple transaction to the zero address, signs it, and submits it to the service for other signers to review.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-quickstarts/multi-agent-setup.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nconst apiKit = new SafeApiKit({\n  chainId: 11155111n\n})\n\nconst tx = await newSafe.createTransaction({\n  transactions: [\n    {\n      to: '0x0000000000000000000000000000000000000000',\n      data: '0x',\n      value: '0'\n    }\n  ]\n})\n\n// Every transaction has a Safe (Smart Account) Transaction Hash different than the final transaction hash\nconst safeTxHash = await newSafe.getTransactionHash(tx)\n// The AI agent signs this Safe (Smart Account) Transaction Hash\nconst signature = await newSafe.signHash(safeTxHash)\n\n// Now the transaction with the signature is sent to the Transaction Service with the Api Kit:\nawait apiKit.proposeTransaction({\n  safeAddress: safeAddress,\n  safeTransactionData: tx.data,\n  safeTxHash,\n  senderSignature: signature.data,\n  senderAddress: AGENT_ADDRESS\n})\n```\n\n----------------------------------------\n\nTITLE: List Safe Balances API Request - cURL\nDESCRIPTION: This cURL command retrieves the balance for Ether and ERC20 tokens of a given Safe account.  It sends a GET request to the API endpoint. It sends a GET request to the API endpoint, and accepts application/json content type. The API endpoint requires the Safe account address as a path parameter. This request is deprecated. The response contains balance information including token address, token details, and the balance itself.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Confirming a Safe Multisig Transaction via API using cURL\nDESCRIPTION: Sends a POST request to the Safe Transaction Service API endpoint to add a new confirmation (signature) to a pending multisig transaction, identified by its `safe_tx_hash`. The request body must contain the signature data (represented as an empty JSON object `{}` in this example, which is likely a placeholder). Multiple signatures can potentially be submitted at once.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zksync.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction Confirmations via Safe API (Bash/JSON)\nDESCRIPTION: Demonstrates how to fetch the list of confirmations for a specific multisig transaction using a GET request to the Safe Transaction Service API. The `safe_operation_hash` is required in the path. Optional query parameters `limit` and `offset` can be used for pagination. The response is a paginated JSON object containing the count, next/previous page URLs, and an array of confirmation objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Relaying Gasless Transaction with Relay Kit (TypeScript)\nDESCRIPTION: Demonstrates how to use the Safe Relay Kit, specifically the GelatoRelayPack, to enable gasless transactions for users interacting with a Safe. It shows initializing the relay pack with an API key and then using it to relay a transaction on behalf of the Safe account, abstracting the gas cost from the end user.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx-full.txt#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GelatoRelayPack } from '@safe-global/relay-kit'\n\n// Create a relay pack\nconst relayPack = new GelatoRelayPack('your-gelato-api-key')\n\n// Create a transaction\nconst safeTransactionData = {\n  to: '0x...',\n  value: '0',\n  data: '0x...'\n}\n\n// Relay the transaction (user doesn't pay gas)\nconst response = await relayPack.relayTransaction({\n  target: safeAddress,\n  encodedTransaction: encodedTx,\n  chainId: 11155111\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Environment with Bash\nDESCRIPTION: Commands to create a new project directory, initialize npm with default options, install required dependencies including Hardhat and Safe contracts, initialize the Hardhat project with TypeScript support, and compile Solidity contracts to verify setup. These steps prepare the development environment for building Safe Modules.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir safe-module-tutorial && cd safe-module-tutorial \n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm add -D hardhat @safe-global/safe-contracts @openzeppelin/contracts hardhat-dependency-compiler\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat init\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Tokens\nDESCRIPTION: Example JSON response from the `/api/v1/tokens/` endpoint. Provides a paginated list (`results`) of supported tokens, including their type (e.g., ERC20), address, name, symbol, decimals, logo URI, and trust status (`trusted`). Also includes pagination details (`count`, `next`, `previous`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1846,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ERC20\",\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n      \"name\": \"0x5555.com\",\n      \"symbol\": \"0x5555.com\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n      \"trusted\": false\n    }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring SignMsg Event in Solidity\nDESCRIPTION: This code snippet declares an event named SignMsg in Solidity, which logs a bytes32 hash representing a signed message. It is triggered when an owner signs a message, allowing off-chain or on-chain components to listen and respond to signing activities. Dependencies include Solidity compiler version and event handling mechanisms in smart contracts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/SignMsg.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nevent SignMsg(bytes32 msgHash);\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas Costs for Multisig Transactions using curl\nDESCRIPTION: Example curl request for estimating the safeTxGas for a multisig transaction on a Safe account. The request is made to the Mantle network estimation endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Rendering Guides and Reference Cards in Documentation UI with Nextra (JSX/TypeScript)\nDESCRIPTION: This snippet defines a UI section using JSX syntax, rendering two Card components within a Cards wrapper to direct users to guides and reference documentation. The icons are provided by imported SVG components, while titles and navigation links are specified as props. The Cards and Card components from Nextra must be installed; no user inputs are expected, as navigation is handled via href props.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-overview.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card icon={<Guides />} title=\"Guides\" href=\"./transaction-service-guides/transactions\" />\n  <Card icon={<Reference />} title=\"Reference\" href=\"./transaction-service-reference\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Transactions with curl Command\nDESCRIPTION: A curl command example that demonstrates how to make a GET request to retrieve all transactions for a specific Safe address from the Avalanche network's Safe Transaction Service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Listing Delegates with GET - Curl\nDESCRIPTION: Demonstrates how to list delegates using a `curl` command to send a GET request to the `/api/v2/delegates/` endpoint.  It sets the `Accept` and `content-type` headers to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Safe Transaction Service Contracts List Response (json)\nDESCRIPTION: This JSON snippet shows a sample successful response (`HTTP 200`) from the `GET /api/v1/contracts/` endpoint. It contains pagination metadata (`count`, `next`, `previous`) and an array of `results`, where each result is a `Contract` object with details like address, name, logo, and contract ABI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Static Props (Headings) for API Reference - JavaScript\nDESCRIPTION: This asynchronous function is used in Next.js pages to fetch data at build time. It renders an MDX component to a static HTML string, extracts heading information based on a provided Swagger schema and the rendered HTML, and returns these headings as props for the page.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/base.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample cURL request to List Collectibles for a Safe Address\nDESCRIPTION: This snippet provides a cURL command to send an HTTP GET request to the Safe Transaction API endpoint, retrieving collectibles for a specific Safe address. It includes headers for JSON acceptance and content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Multisig Transaction using curl\nDESCRIPTION: This Bash snippet demonstrates how to delete a queued Safe multisig transaction using the `curl` command-line tool. It sends a DELETE request to the transaction service API endpoint, specifying the `safe_tx_hash` in the URL path. A valid signature of the EIP-712 data (not explicitly shown in `curl`) is required for the API to process the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-chiado.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Nuxt Project using pnpm CLI – Bash\nDESCRIPTION: This bash command initializes a new Nuxt application with a UI starter template using pnpm's dlx to run the nuxi command-line tool. It prompts users for package manager and Git repository initialization options. No parameters are required except the desired project name, and it assumes pnpm and Node.js are pre-installed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/nuxt.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dlx nuxi@latest init safe-passkeys-nuxt -t ui\n```\n\n----------------------------------------\n\nTITLE: Data Decoder Sample Response\nDESCRIPTION: The following is an example JSON response from the data decoder endpoint. It demonstrates the structure of a decoded transaction, providing the method name and parameters, including their types and values. The response is useful for understanding the details of a transaction when provided the transaction data. Dependencies: None.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example for UserOperation Retrieval\nDESCRIPTION: This code snippet, imported from a TypeScript file, likely showcases how to retrieve a user operation, fetching data from the API. It showcases how a UserOperation can be acquired, with its hash used as an identifier.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Balances using curl (Deprecated)\nDESCRIPTION: Shows how to use curl to send a GET request to the deprecated `/api/v1/safes/{address}/balances/` endpoint on the Avalanche network's Safe Transaction Service. This retrieves Ether and ERC20 token balances for the specified Safe address (0xcd2E...1c75). Optional query parameters 'trusted' and 'exclude_spam' can filter results. Requires 'Accept' and 'content-type' headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Deleting Delegates with DELETE - Curl\nDESCRIPTION: Deletes a delegate/delegator pair associated with a given delegate address, using a DELETE request to the `/api/v2/delegates/{delegate_address}/` endpoint. The `curl` command sets the `Accept` and `content-type` headers to `application/json`, and sends an empty JSON payload.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-scroll.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Module Transactions with TypeScript\nDESCRIPTION: Example TypeScript snippet illustrating how to fetch module transactions for a Safe address using the provided endpoint. It demonstrates making a GET request referencing the relevant API and is presumably part of a codebase handling Safe transaction queries. Dependencies include a TypeScript runtime and HTTP request capability.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zksync/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Get Module Transaction via API - cURL\nDESCRIPTION: This cURL command retrieves a module transaction from the Safe Transaction Service API using the module transaction ID. It sends a GET request to the specified endpoint and includes headers to accept and send JSON data.  The response is a JSON object containing details of the module transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Querying Contracts List\nDESCRIPTION: This snippet demonstrates how to retrieve a list of known smart contracts using a GET request. It retrieves information about contracts, including their ABI, display name, and whether they are trusted for delegate calls. The response is paginated and includes contract details. Dependencies: `curl`, a network connection.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating Delegates - cURL\nDESCRIPTION: This snippet outlines a POST request used to add a new Safe delegate. It sends a request to the /api/v2/delegates/ endpoint, also specifying the  Accept and content-type headers as application/json.  No specific payload is included in the curl command example, which implies that the delegate creation is handled through other parameters (not shown), presumably requiring signing data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-celo.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Setting Max Priority Fee Per Gas (`maxPriorityFeePerGas`) in `safeClient.send` in TypeScript\nDESCRIPTION: Demonstrates how to optionally set the maximum priority fee per gas (`maxPriorityFeePerGas`) for EIP-1559 transactions when calling `safeClient.send`. This represents the tip paid to the miner/validator.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  maxPriorityFeePerGas: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving list of confirmations for a multisig transaction via GET request\nDESCRIPTION: This snippet documents the API endpoint that retrieves a paginated list of confirmation records for a specific multisig transaction identified by 'safe_operation_hash'. It details required path and query parameters, response schema, and provides a sample curl command. Dependencies include an active API server supporting the specified route and authentication if necessary.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Estimating Multisig Transaction Gas using Safe Transaction Service - Bash\nDESCRIPTION: This bash curl command sends a POST request to the Safe Transaction Service to estimate the safeTxGas required for a multisig transaction associated with a given Safe address. It requires specifying the Safe address in the endpoint URL and sends a JSON body. The endpoint returns a JSON response containing the estimated safeTxGas as a string. Ensure you have network connectivity and replace the sample address as needed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data Using Data Decoder Endpoint - TypeScript (Reference Only)\nDESCRIPTION: This comment-only TypeScript entry references an example file for invoking the data decoder API in the Safe Transaction Service. The referenced path provides the relevant TypeScript code for constructing and submitting requests to the POST /api/v1/data-decoder/ endpoint. Expected dependencies include TypeScript, a suitable HTTP client, and possibly type definitions for API responses. This entry is a pointer and does not contain operational code within the documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/mantle/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: Deleting a Queued Safe Multisig Transaction via API using cURL\nDESCRIPTION: Sends a DELETE request to the Safe Transaction Service API endpoint to remove a specific queued multisig transaction, identified by its `safe_tx_hash`. This action requires prior authorization via a signed EIP-712 message (detailed separately) and can only be performed by the proposer or a valid delegate. The example uses a specific transaction hash on the zkSync network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-zksync.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Extending SafeClient with Safe Operations (TypeScript)\nDESCRIPTION: This snippet demonstrates extending an existing `safeClient` instance using the `safeOperations` extension from `@safe-global/sdk-starter-kit`. It configures the extension with a `bundlerUrl` and options for sponsorship (`isSponsored`, `paymasterUrl`). The extended client (`safeOperationClient`) can then be used to send ERC-4337 Safe operations via the specified bundler.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/extend.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeOperations } from '@safe-global/sdk-starter-kit'\nimport { safeClient } from './setup.ts'\n\nconst safeOperationClient = await safeClient.extend(\n  safeOperations({ bundlerUrl }, { isSponsored, paymasterUrl })\n)\n\nconst safeOperationResult = await safeOperationClient.sendSafeOperation({\n  transactions\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Multisig Transactions Using curl\nDESCRIPTION: This bash snippet demonstrates how to call the Safe Transaction Service REST API endpoint via curl to get multisig transactions of a specific Safe address. It sets appropriate HTTP headers to accept and send JSON content and uses the GET method on the API URL with the Safe address path parameter. No request body is needed. The expected output is a paginated JSON response with multisig transaction records.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Getting a Specific Transfer\nDESCRIPTION: Example JSON response for a successful (HTTP 200) request to get a specific transfer by its ID. The response is a single JSON object containing details of the transfer, such as `type`, `executionDate`, `blockNumber`, `transactionHash`, `to`, `from`, `value`, `tokenId`, `tokenAddress`, `transferId`, and optionally `tokenInfo`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Safe Operation via POST Request\nDESCRIPTION: This snippet provides a sample cURL command to send a POST request to the API endpoint for creating a new Safe operation for a specified Safe address. It includes necessary headers and an empty JSON body, illustrating how to initiate the operation creation process. The expected response is an empty body with a 201 status code, indicating successful creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Listing Known Contracts via Safe Transaction Service API using cURL\nDESCRIPTION: Sends a GET request using cURL to the `/api/v1/contracts/` endpoint of the Safe Transaction Service API to retrieve a paginated list of known smart contracts and their ABIs. Optional query parameters `ordering`, `limit`, and `offset` can customize the results. The response is a JSON object containing pagination details (`count`, `next`, `previous`) and an array (`results`) of contract objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChangedGuard Event in Solidity for Safe Contract\nDESCRIPTION: This Solidity snippet declares the ChangedGuard event, which is emitted when the guard address is set or updated in the Safe contract to ensure transparency and track security changes. The event includes a single parameter, 'guard', which is the address of the newly set guard. There are no external dependencies for this event declaration. Expected input is an address parameter, and this event outputs a logged event which external clients can listen to.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/ChangedGuard.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nevent ChangedGuard(address guard);\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Creating a Signed Message using TypeScript\nDESCRIPTION: Provides a reference to an external TypeScript example file showing how to add a new message (string or EIP712 object) for a given Safe account address via the Safe Transaction Service API POST endpoint `/api/v1/safes/{address}/messages/`. The service calculates the hash internally; sending a raw hash is not supported by this endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/mainnet/-v1-safes-{address}-messages--post.ts\n```\n\n----------------------------------------\n\nTITLE: Declaring ExecutionFromModuleSuccess Event in Solidity\nDESCRIPTION: Defines a Solidity event named ExecutionFromModuleSuccess which is emitted when a transaction executed by a module completes successfully. The event includes the parameters: the destination address ('to'), the Ether value transferred ('value'), and the calldata ('data'). This event facilitates tracking and logging of module executions in smart contracts. Requires Solidity environment supporting event declarations; inputs are the transaction parameters, and the output is an on-chain event log.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/ExecutionFromModuleSuccess.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nevent ExecutionFromModuleSuccess(address to, uint256 value, bytes data);\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Multisig Confirmations\nDESCRIPTION: An example JSON response showing a paginated list with one multisig confirmation record including owner address, submission date in ISO 8601 format, null transactionHash, signature string, and signatureType indicating the signing method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Transaction Data Using Data-Decoder API POST Request\nDESCRIPTION: This snippet provides the curl command to decode transaction data by POSTing raw hex data to the API. Enables users to interpret method calls and parameter values within transaction data, optionally providing the contract address for more accurate decoding.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Requesting Safe Balances via REST API - Bash\nDESCRIPTION: This Bash curl command demonstrates how to retrieve Ether and ERC20 token balances for a specified Safe. The API endpoint /api/v2/safes/{address}/balances/ supports optional query parameters for pagination, filtering by trusted tokens, and excluding spam tokens. Valid requests require the Safe's Ethereum address and standard JSON headers. The response is an array of balance objects, each containing balance details and, for tokens, metadata such as name, symbol, decimals, and image URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Module Transactions API Request Example in TypeScript\nDESCRIPTION: Demonstrates a TypeScript example for calling the Safe module transactions listing API endpoint. It serves as a client illustration of making a GET request to fetch module transactions for a specified Safe address. This code snippet references the correct endpoint and expected usage pattern. Dependencies include a TypeScript environment and relevant HTTP client libraries. No input parameters are explicitly shown here, but the endpoint supports various query parameters for filtering results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/avalanche/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Safe Creation Status Response Structure - JSON\nDESCRIPTION: This JSON object represents the API response for the Safe creation status endpoint. It includes properties detailing the creation timestamp, creator address, transaction hash, factory address, master copy, and setup data. The 'dataDecoded' object provides the parsed arguments used during Safe setup, including owners and thresholds. The 'userOperation' is null for standard deployments but may contain user operation data on advanced setups. No nested error structures are present in this sample; all fields are strings, objects, or null.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-06-25T11:18:48Z\",\n  \"creator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"transactionHash\": \"0x6404e0298423c092cc1ce486f3f72172a1c0f2f28a9b29f69e605ea825360ac5\",\n  \"factoryAddress\": \"0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC\",\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"setupData\": \"0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000017062a1de2fe6b99be3d9d37841fed19f5738040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d3debaab2b8093e69109f23a75501f864f74e20000000000000000000000003a16e3090e32dded2250e862b9d5610bef13e93d0000000000000000000000000000000000000000000000000000000000000000\",\n  \"dataDecoded\": {\n    \"method\": \"setup\",\n    \"parameters\": [\n      {\n        \"name\": \"_owners\",\n        \"type\": \"address[]\",\n        \"value\": [\n          \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n        ]\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"value\": \"0x\"\n      },\n      {\n        \"name\": \"fallbackHandler\",\n        \"type\": \"address\",\n        \"value\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"payment\",\n        \"type\": \"uint256\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"paymentReceiver\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      }\n    ]\n  },\n  \"userOperation\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Transfers via GET Request (Bash)\nDESCRIPTION: This `curl` command retrieves a list of token transfers associated with a specified Safe address.  It sends a GET request to the `/api/v1/safes/{address}/transfers/` endpoint, providing the address as a path parameter. The example request includes headers specifying the accepted content type and content type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Decode Data API Request\nDESCRIPTION: This snippet presents a cURL command to decode transaction data using the Safe Transaction Service API. It uses a POST request to send transaction data for decoding and retrieves the function name and parameters. The command includes headers indicating the accepted content and content type.  The base URL points to the Safe Transaction Service on the worldchain network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-worldchain.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Transactions JSON\nDESCRIPTION: This snippet shows a sample successful JSON response from the `/api/v1/safes/{address}/all-transactions/` endpoint. It illustrates the pagination structure (`count`, `next`, `previous`) and the format of transaction objects within the `results` array, including fields like `safe`, `to`, `value`, `executionDate`, `transactionHash`, `safeTxHash`, `isExecuted`, `isSuccessful`, `confirmations`, and `transfers`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Safe Operation by Hash using curl\nDESCRIPTION: This bash command uses `curl` to send a GET request to the Safe Transaction API, retrieving a Safe Operation based on its unique hash.  The request includes headers to specify that the expected response is in JSON format. The `safe_operation_hash` is used as a path parameter to identify the desired Safe Operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Data Decoder Implementation\nDESCRIPTION: This is a code comment indicating that there is TypeScript code from a specific file regarding the `data-decoder` endpoint. This illustrates how to use the API from TypeScript. Dependencies: TypeScript.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: Defining SafeClientResult Type in TypeScript\nDESCRIPTION: This TypeScript type definition outlines the structure of the SafeClientResult object. It is the standard return type for various Safe Client operations, providing details such as the Safe address, a human-readable description, the operation status (SafeClientTxStatus), and optional nested objects containing specific identifiers (like hashes) depending on the type of operation (transactions, messages, safe operations, or account deployment).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client-result.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SafeClientResult = {\n  safeAddress: string\n  description: string\n  status: SafeClientTxStatus\n  transactions?: {\n    safeTxHash?: string\n    ethereumTxHash?: string\n  }\n  messages?: {\n    messageHash?: string\n  }\n  safeOperations?: {\n    userOperationHash?: string\n    safeOperationHash?: string\n  }\n  safeAccountDeployment?: {\n    ethereumTxHash?: string\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Safe Balances with curl\nDESCRIPTION: Retrieves paginated balances for Ether and ERC20 tokens associated with a Safe, using a curl command. The Safe address is provided in the path. Optional query parameters allow filtering by trusted tokens and excluding spam tokens.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Defining RemovedOwner Event in Solidity\nDESCRIPTION: This event is emitted when an owner is removed from a Safe. It includes the address of the removed owner as a parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/RemovedOwner.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent RemovedOwner(address owner);\n```\n\n----------------------------------------\n\nTITLE: Get Transfer by ID REST API Bash Example\nDESCRIPTION: Shows a curl command example to retrieve detailed information for a single token transfer using its unique transfer ID. This GET request returns all relevant data for the specified transfer, including execution metadata and token information, formatted in JSON. Appropriate headers for content negotiation are included.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Fetching Message Details (GET /api/v1/messages/{message_hash}/)\nDESCRIPTION: Retrieves detailed information about a message identified by its hash, including creation/modification timestamps, associated safe, message content, proposer, confirmations, and signature data. The endpoint requires the message hash as a path parameter and returns a structured JSON object with full message metadata and confirmations. Dependencies include HTTP GET method and schema definitions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Multisig Transaction Response (json)\nDESCRIPTION: Provides an example of the JSON response body returned by the Get Multisig Transaction API endpoint. It shows the structure and data points for a successful multisig transaction retrieval, including confirmation details, execution status, and associated hashes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe4337Pack with Provider and Signer (New - v3)\nDESCRIPTION: This code snippet shows the new way to initialize the `Safe4337Pack` in v3 of the Safe Protocol Kit. It uses a `provider` (EIP-1193 compatible provider or RPC URL) and an optional `signer` (signer address or private key). The `SafeProvider` internally manages the interaction with the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/migrate-to-v3.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// new\nconst safe4337Pack = await Safe4337Pack.init({\n  provider: window.ethereum, // Or any compatible EIP-1193 provider,\n  signer: 'signerAddressOrPrivateKey', // Signer address or signer private key\n  // ...\n})\n\nconst safe4337Pack = await Safe4337Pack.init({\n  provider: 'http://rpc.url', // Or websocket\n  signer: 'privateKey', // Signer private key\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Example Safe Balances Response\nDESCRIPTION: This JSON snippet provides an example of the response structure when requesting Safe balances. It includes details for both native coins and ERC20 tokens, showcasing token addresses, token information (name, symbol, decimals, logoUri), and the balance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get Safe Status API - TypeScript Example\nDESCRIPTION: This snippet provides a placeholder comment, indicating the origin file for a TypeScript implementation of the \"Get Safe Status\" API.  It suggests that there exists a TypeScript file (likely from a larger project) where the API request is defined and implemented.  It implies the existence of supporting libraries/frameworks to make API calls.  No parameters are specified, implying the implementation within the referenced file handles the input parameters by itself.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_70\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/xlayer/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Signing a Message using TypeScript\nDESCRIPTION: Provides a reference to an external TypeScript example file demonstrating how to add a signature to a message using its hash via the Safe Transaction Service API POST endpoint `/api/v1/messages/{message_hash}/signatures/`. Requires the `message_hash` path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/mainnet/-v1-messages-{message_hash}-signatures--post.ts\n```\n\n----------------------------------------\n\nTITLE: Displaying API Reference using ApiReference Component - JavaScript (React)\nDESCRIPTION: This snippet renders the `ApiReference` component. It requires the `networkName` prop to be set. The `networkName` prop is used to specify the network (in this case, 'polygon') for which to display the API reference. The component then uses the API data based on the specified network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/polygon.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<ApiReference networkName=\"polygon\"/>\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Multisig Transactions using Safe Transaction Service API - TypeScript\nDESCRIPTION: This code snippet shows an example identifier reference for a TypeScript script located at ../examples/mantle/-v1-safes-{address}-multisig-transactions--get.ts, intended to demonstrate how to perform an HTTP GET request to fetch multisig transactions for a Safe. The script likely leverages a HTTP client library (such as axios or fetch), requires the Safe address to be specified, and should handle response parsing and pagination as needed. The output is expected to be a paginated list of transaction objects; ensure relevant dependencies are installed and the environment supports TypeScript.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/mantle/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Add Confirmation\nDESCRIPTION: Indicates that a successful POST request to add a confirmation (resulting in a 201 Created status) typically returns an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_59\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: List Delegates with curl\nDESCRIPTION: This snippet demonstrates how to retrieve a list of delegates using a curl command. It sends a GET request to the `/api/v2/delegates/` endpoint with specified headers to accept JSON responses.  The response contains a paginated list of delegates and their associated data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching All Transactions for Safe (cURL)\nDESCRIPTION: This cURL command retrieves all transactions associated with a Safe address from the Safe Transaction Service. It sends a GET request to the API endpoint, specifying the Safe address in the URL. The command also includes headers for accepting JSON responses and specifying the content type. The output will be a JSON object containing the transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Logging Out User from Web3Auth\nDESCRIPTION: Simple method to log out the currently authenticated user from Web3Auth.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/web3auth.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait web3auth.logout()\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response of a Multisig Transaction from Safe Transaction API\nDESCRIPTION: An example JSON response illustrating the structure of a multisignature transaction returned by the Safe Transaction API. The response includes fields such as safe address, target address, transferred value, operation type, gas data, refund information, nonce, timestamps, block number, execution and success status, proposer, confirmations with signature details, and other metadata. This detailed response reflects the multisig transaction state and related approval data necessary for auditing and verification.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating Delegate\nDESCRIPTION: Indicates a successfully accepted delegate creation with an empty response body, confirming the request was processed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens via API using Curl\nDESCRIPTION: This snippet shows how to use `curl` to retrieve a paginated list of tokens supported by the Safe Transaction Service API. It includes `Accept` and `content-type` headers set to `application/json` and targets the generic `/api/v1/tokens/` endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Safe List Response JSON (Multiple Safes)\nDESCRIPTION: This JSON snippet shows the response structure when multiple Safe addresses are associated with a given owner. The `safes` array contains a list of Ethereum addresses representing Safe accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Safes that Use a Specific Module (cURL Bash Command)\nDESCRIPTION: This snippet shows a curl command to make an HTTP GET request to the 'list safes by module' API endpoint, including headers for JSON content type and accept. The URL contains a placeholder for the module address and demonstrates how to retrieve safes associated with that module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    \n\n```\n\n----------------------------------------\n\nTITLE: Initializing Hardhat Project\nDESCRIPTION: Runs the `npx hardhat init` command to initialize a new Hardhat project configuration. The user should select 'Create a TypeScript project' when prompted during the execution of this command.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat init\n```\n\n----------------------------------------\n\nTITLE: Get Token Information using cURL\nDESCRIPTION: This cURL command retrieves detailed information for a specific token from the Safe Transaction Service API using the token's address. It sends a GET request to the `/api/v1/tokens/{address}/` endpoint, including headers that specify it accepts JSON and that the content type is JSON. The `address` in the path must be a valid Ethereum address of a token.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Installing Safe React Hooks with npm\nDESCRIPTION: This command installs the `@safe-global/safe-react-hooks` package using the npm package manager.  It adds the library as a dependency to your project, allowing you to use its React hooks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/overview.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @safe-global/safe-react-hooks\n```\n\n----------------------------------------\n\nTITLE: Setting Global App Layout in layout.tsx - TSX\nDESCRIPTION: This snippet provides layout code for customizing the global app wrapping, supporting consistent theming and structure for the Safe passkeys application. This file is required by Next.js for every application route.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// from ../../../../examples/passkeys/app/layout.tsx\n```\n\n----------------------------------------\n\nTITLE: Retrieve Specific Contract with cURL\nDESCRIPTION: This code snippet demonstrates how to retrieve information for a specific smart contract using a cURL command.  It sends a GET request to the specified endpoint with the contract address, along with headers for accepting JSON responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Module Transactions using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to interact with the Safe Global API endpoint to list module transactions from a specified Safe address. It assumes proper setup of HTTP client methods or SDK to perform GET requests and handle pagination or filtering based on query parameters like safe address, module, operation type, and more. The example code is located in the project under examples and is suitable for integrating into scripts or applications that need transaction data for Safe modules.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/blast/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Delegates with Result Offset (TypeScript)\nDESCRIPTION: Specifies the starting index for the results when fetching delegates, used for pagination. The `offset` parameter is included in the configuration object for the `getSafeDelegates` call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafedelegates.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst delegates = await apiKit.getSafeDelegates({\n  offset: '50'\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Supported Tokens List Using Safe Transaction Service API - Bash\nDESCRIPTION: Demonstrates how to perform a GET request to the /api/v1/tokens/lists/ endpoint to retrieve a paginated list of tokens supported by the Safe Transaction Service. Accepts optional 'limit' and 'offset' query parameters to control pagination. The expected JSON response includes total count, next and previous page URLs if applicable, and an array of token list objects each containing a URL and description. Dependencies include standard HTTP client and network access to the Safe Transaction API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Config in useUpdateThreshold (TypeScript)\nDESCRIPTION: Example (`index.tsx`) showing how to pass an explicit configuration object (`config`) to the `useUpdateThreshold` hook using the `config` parameter. This overrides the configuration provided by the nearest `SafeProvider`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdatethreshold.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = useUpdateThreshold({\n  config\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Delegate via API Endpoint\nDESCRIPTION: This snippet describes the POST method at `/api/v2/delegates/` for adding a new delegate with a custom label. It includes the EIP712 signature data hash generation details, key parameters, and expected responses. The actual request body is empty, implying the data is likely sent via headers or other mechanisms.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Kit via Yarn - Bash\nDESCRIPTION: Installs the @safe-global/protocol-kit package using the Yarn package manager. This command should be run in your project's root directory and requires Yarn to be installed on your system. It downloads the latest Protocol Kit package and adds it as a dependency in your project's package.json, enabling interaction with Safe smart account contracts. Requires Node.js and Yarn environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/overview.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/protocol-kit\n```\n\n----------------------------------------\n\nTITLE: Updating Contract Getter Methods to Use Promises\nDESCRIPTION: Highlights that functions like `getSafeContract` and related methods no longer require `chainId`. They now automatically use the provider's chain and return a Promise resolving to the contract instance, simplifying asynchronous contract retrieval.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v1.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// old\nconst contract = getSafeContract(chainId)\n\n// new\nconst contract = await getSafeContract()\n```\n\n----------------------------------------\n\nTITLE: Estimate Gas Costs for Multisig Transaction (cURL)\nDESCRIPTION: This code snippet demonstrates how to estimate gas costs for a multi-signature transaction using a POST request with cURL. It sends a request to the `/api/v1/safes/{address}/multisig-transactions/estimations/` endpoint with an empty JSON payload. The `address` parameter in the path should be replaced with the Safe account address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Getting Transfer by ID via GET Request (Bash)\nDESCRIPTION: This `curl` command retrieves a specific token transfer based on its unique `transfer_id`. It performs a GET request to the `/api/v1/transfer/{transfer_id}` endpoint. The example uses a hardcoded transfer ID as the path parameter and includes the `Accept` and `content-type` headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/transfer/3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Approving Safe Transaction Hash with `maxPriorityFeePerGas` Option\nDESCRIPTION: This snippet illustrates the use of the optional `maxPriorityFeePerGas` parameter. This option specifies the maximum priority fee per gas the sender is willing to pay. It is passed within the `options` object when calling the `approveTransactionHash` function.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/approvetransactionhash.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionResponse = await protocolKit.approveTransactionHash(\n  '0x...',\n  options: {\n    maxPriorityFeePerGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Delegates with Transaction Service API (TypeScript)\nDESCRIPTION: This sample represents the TypeScript implementation for performing a GET request to fetch all delegates from the /api/v2/delegates/ endpoint. It may require dependencies such as axios or fetch for HTTP requests and is used to retrieve paginated lists of delegates associated with Safes, filtered by parameters such as safe, delegate, delegator, label, limit, and offset. Inputs are various query string parameters, and the output is a JSON object containing delegate details. Ensure environment configuration matches the network (Chiado) and a valid API base URL is set.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v2-delegates--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Safe Operations API\nDESCRIPTION: Provides an example JSON response structure returned by the List Safe Operations API endpoint. The response is paginated (`count`, `next`, `previous`) and contains an array (`results`) of SafeOperation objects, each including details like creation/modification timestamps, `safeOperationHash`, `moduleAddress`, confirmations (with owner signatures), `preparedSignature`, and the associated `userOperation` details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Messages for Safe Account\nDESCRIPTION: This snippet shows how to retrieve a list of messages associated with a specific Safe account using a GET request to the `/api/v1/safes/{address}/messages/` endpoint. It requires the Safe `address` as a path parameter and supports optional query parameters for ordering, limit, and offset.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: List Transfers API - Sample Response JSON\nDESCRIPTION: This JSON object represents a sample successful response from the Safe Transaction Service API when listing transfers for a Safe address. It includes pagination details (`count`, `next`, `previous`) and an array of `results`, where each entry represents a single transfer with details like type, date, block number, transaction hash, recipient, value, token info, and transfer ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Get Confirmations JSON\nDESCRIPTION: This JSON represents a sample response for retrieving confirmations of a Safe transaction.  It includes the count of confirmations, pagination links (next and previous), and an array of confirmation objects. Each confirmation object includes details such as creation and modification timestamps, owner, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safe Balances\nDESCRIPTION: This JSON response provides balance information for a Safe address, showing both native coin (Sepolia ETH) and ERC20 token balances. For ERC20 tokens, it includes token metadata such as name, symbol, decimals, and logo URI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Calling `getSafesByOwner` with Safe API Kit in TypeScript\nDESCRIPTION: Demonstrates how to use the `apiKit.getSafesByOwner` method to retrieve Safes associated with a specific owner address. Requires an initialized `apiKit` instance (shown in setup) and the owner's address. Returns a Promise resolving to an `OwnerResponse` object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getsafesbyowner.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiKit } from './setup.ts'\n\nconst ownerAddress = '0x...'\n\nconst decodedData = await apiKit.getSafesByOwner(ownerAddress)\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Balances Response\nDESCRIPTION: This JSON snippet represents a sample response from the Safe balances endpoint. It returns an array of token balances, including the native coin balance and balances for ERC20 tokens held by the Safe. Each token balance entry includes the token address, token information (name, symbol, decimals, logo URI), and the balance amount.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Passkey Authentication with Safe using TypeScript\nDESCRIPTION: Illustrates setting up and using passkeys for Safe account authentication with `@safe-global/protocol-kit`. It covers creating a passkey signer using `PasskeySignerFactory`, configuring a Safe account to use the passkey as an owner, and signing a Safe transaction using the created passkey signer via the `signTransactionWithPasskey` method. Requires `@safe-global/protocol-kit`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx.txt#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PasskeySignerFactory } from '@safe-global/protocol-kit'\n\n// Create a new passkey\nconst passkeySignerFactory = new PasskeySignerFactory()\nconst passkeySigner = await passkeySignerFactory.create({\n  username: 'user@example.com'\n})\n\n// Use passkey to sign transactions\nconst safeAccountConfig = {\n  owners: [passkeySigner.getAddress()],\n  threshold: 1\n}\n\n// Sign Safe transactions with passkey\nconst safeTransaction = await safeSdk.createTransaction({ safeTransactionData })\nconst signedSafeTransaction = await safeSdk.signTransactionWithPasskey(safeTransaction, passkeySigner)\n```\n\n----------------------------------------\n\nTITLE: Reference for Listing Safes by Owner (TypeScript)\nDESCRIPTION: This snippet is a comment indicating the source file for an example implementation in TypeScript. It points to a specific file (`../examples/optimism/-v1-owners-{address}-safes--get.ts`) that contains the actual code for demonstrating how to list Safe accounts associated with a specific owner address using the Safe Transaction Service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_46\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v1-owners-{address}-safes--get.ts\n```\n\n----------------------------------------\n\nTITLE: Reference to TypeScript Data Decoder Example\nDESCRIPTION: References a TypeScript example file for the data decoder endpoint, which is used to decode transaction data using the Safe Transaction Service's internal ABI information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// from ../examples/sepolia/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Owner Safes Query\nDESCRIPTION: JSON response showing the list of Safe accounts that have the specified owner address. The response contains a 'safes' array with the addresses of all Safes associated with the owner.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the New Threshold in removeOwner\nDESCRIPTION: Highlights the `_threshold` parameter within a `removeOwner` function call. This unsigned integer specifies the new required number of confirmations (threshold) after the owner is removed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/owners/removeOwner.mdx#_snippet_3\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).removeOwner(\n    0x...,\n    0x...,\n    1 // _threshold\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Example for Get Safe Creation Status\nDESCRIPTION: Points to an external TypeScript file (`../examples/xlayer/-v1-safes-{address}-creation--get.ts`) containing an example implementation for retrieving the Safe creation status via the API endpoint `/api/v1/safes/{address}/creation/`. The actual code is not displayed here.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/xlayer/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response: List Safe Collectibles (ERC721) - JSON\nDESCRIPTION: Illustrates the structure and content of the JSON response returned by the Safe Transaction Service API when successfully requesting a list of collectibles for a Safe account. It shows pagination details (count, next, previous) and an example entry for a collectible.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\n      \"tokenName\": \"SampleNft\",\n      \"tokenSymbol\": \"SN\",\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\n      \"id\": \"1\",\n      \"uri\": null,\n      \"name\": null,\n      \"description\": null,\n      \"imageUri\": null,\n      \"metadata\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Safe Stack Components using MUI Grid and CustomCard (JSX)\nDESCRIPTION: Uses the Material UI `Grid` component to create a responsive two-column layout. Each column contains a `CustomCard` component displaying information about either Safe{Core} or Safe{Wallet}, including a title, description, icon, and link. This structure presents the two main offerings of the Safe stack side-by-side. The `Grid` uses properties like `container`, `spacing`, `display`, `alignContent`, and `mt` for layout control, while `Grid item` specifies responsive column widths (`xs`, `md`).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/what-is-safe.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid\n  container\n  spacing={2}\n  display='flex'\n  alignContent='flex-start'\n  mt={3}\n>\n  <Grid item xs={12} md={6} flex=\"1\">\n    <CustomCard\n      title={'Safe{Core}'}\n      description={'The most secure and robust tooling and infrastructure to integrate Safe Smart Account and leverage account abstraction into your product.'}\n      url={'./safe-core'}\n      icon={<SafeCore />}\n      newTab={false}\n    />\n  </Grid>\n  <Grid item xs={12} md={6}>\n    <CustomCard\n      title={'Safe{Wallet}'}\n      description={'Official interface designed for individuals and industries spanning various sectors, ensuring a seamless and secure digital asset management experience.'}\n      url={'https://safe.global/wallet'}\n      icon={<SafeWallet />}\n    />\n  </Grid>\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Sample Estimate Gas Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample response from the estimate gas costs endpoint, showing the `safeTxGas` value. This is the estimated gas required for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying List of Safe Transfers Using cURL - Bash\nDESCRIPTION: This Bash snippet demonstrates how to retrieve the most recent token and ether transfers for a specified Safe address using the Safe Transaction Service REST API. It requires the cURL tool and expects the address path parameter to be replaced with a valid Safe address. The request uses GET with required headers for JSON content and accepts a paginated response of up to 1000 newest transfers. No authentication is shown, and the endpoint may have further query parameters for more advanced filtering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Status with cURL\nDESCRIPTION: This cURL command retrieves detailed information about a Safe account from the Safe Transaction Service API. It constructs a GET request to the specified endpoint, including the Safe address in the URL.  The request includes headers to accept JSON responses and specify content type. The output is a JSON object containing the Safe's details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Importing Components and Utilities for Avalanche API Reference\nDESCRIPTION: Imports necessary React components, rendering utilities, and MDX-related functions needed to build the Avalanche API reference page. Also imports the Avalanche network's MDX content and swagger schema.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/avalanche.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ApiReference from '../../../components/ApiReference'\nimport { renderToString } from 'react-dom/server'\nimport { MDXComponents, getHeadingsFromHtml } from '../../../lib/mdx'\nimport Mdx from '../../../components/ApiReference/generated/avalanche-reference.mdx'\nimport swagger from '../../../components/ApiReference/schemas/avalanche-swagger.json'\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens via GET /api/v1/tokens/lists/\nDESCRIPTION: This code snippet documents the GET endpoint for retrieving a list of supported tokens in the Safe Transaction Service. It specifies query parameters for pagination (`limit`, `offset`) and describes the expected JSON response structure, including total count, pagination URLs, and token details. The sample CURL command demonstrates how to invoke this endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n \n```\n\n----------------------------------------\n\nTITLE: Rendering Scroll API Reference Component\nDESCRIPTION: This JSX code renders the ApiReference component with the Scroll network specified. This component displays the API documentation for Safe on the Scroll network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/scroll.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference networkName=\"scroll\"/>\n```\n\n----------------------------------------\n\nTITLE: Get Safe Status Example (TypeScript)\nDESCRIPTION: This is a placeholder indicating the location of a TypeScript example file related to getting the Safe status. The actual code is located in the `/examples/polygon/-v1-safes-{address}--get.ts` file within the project. It is likely a TypeScript implementation for interacting with the Safe transaction service to fetch Safe details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_60\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Defining ISafe Interface for Module Retrieval in Solidity\nDESCRIPTION: This snippet defines the `ISafe` interface, which is a contract interface used to call the `getModulesPaginated` function. This function is used to retrieve modules from a Safe contract in a paginated way, providing an array of modules and a pointer to the next page. The function takes an address `start` as a starting point and `pageSize` to limit the size of returned array.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/getModulesPaginated.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\ninterface ISafe {\n    function getModulesPaginated(\n        address start,\n        uint256 pageSize\n    ) external view returns (address[] array, address next);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Incoming Safe Transfers using cURL (Bash)\nDESCRIPTION: This snippet demonstrates how to use cURL to send a GET request to the Safe Transaction Service API (specifically the Polygon instance) to retrieve the list of incoming transfers for the Safe address `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`. It includes the `Accept` header to specify the desired response format (JSON) and the `content-type` header.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Operations - cURL\nDESCRIPTION: This cURL command retrieves the list of user operations for a specified Safe account address from the Safe Transaction Service API.  It specifies the GET method and includes headers for accepting JSON and defining the content type. The expected output is a JSON response containing a list of user operations.  The endpoint expects the Safe's address as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing New Next.js Application with pnpm - Bash\nDESCRIPTION: This bash command initializes a new Next.js project using pnpm as the package manager. The process will prompt users to enable TypeScript, ESLint, and the App router while disabling Tailwind, the src directory, and any import aliases. Required: pnpm must be installed globally and Node.js should be available. The generated project will serve as the base for the Safe passkeys tutorial.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create next-app\n```\n\n----------------------------------------\n\nTITLE: Estimate Gas Cost API Request\nDESCRIPTION: This cURL command sends a POST request to estimate the gas costs for a multisig transaction. It targets a specific Safe address endpoint that provides transaction estimations. The request sets the necessary headers. The example uses a specific Safe address.  The request body is currently empty but would likely contain details about the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/estimations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Placeholder for Safe Module Transactions API Request\nDESCRIPTION: This TypeScript placeholder indicates a sample implementation to interact with the Safe Transaction Service's module transactions endpoint. Developers can implement the API call logic here using an HTTP client (such as axios or fetch), supplying the endpoint and necessary parameters. Ensure the required address is provided and necessary dependencies for HTTP requests are installed before implementing the call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Safe React Hooks with pnpm\nDESCRIPTION: This command installs the `@safe-global/safe-react-hooks` package using the pnpm package manager. It adds the library as a dependency to your project, allowing you to use its React hooks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/overview.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/safe-react-hooks\n```\n\n----------------------------------------\n\nTITLE: Getting Message Details via Safe Transaction Service (TypeScript)\nDESCRIPTION: References a TypeScript file (implementation not shown) for sending a GET request to the /api/v1/messages/{message_hash}/ endpoint, retrieving detailed information about a message by its hash. The implementation typically uses an HTTP library to query the API and parse the response. Requires path parameter 'message_hash' and optional deserialization of complex response, including fields like created, modified, safe, confirmations, and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-messages-{message_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Incoming Transfers - JSON\nDESCRIPTION: This JSON snippet represents a sample response from the incoming transfers API. It shows the structure and content of the data returned, including the number of results, pagination links, and an array of transfer objects. Each transfer object contains details like type, execution date, block number, transaction hash, to/from addresses, value, token information, and transfer id.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Example (Safe Transactions)\nDESCRIPTION: This snippet indicates the presence of TypeScript code used to generate the sample request, specifically focusing on the multisig transactions retrieval.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/celo/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Cloning Safe Smart Account Repository - Git/Shell - Bash\nDESCRIPTION: This snippet demonstrates how to clone the safe-smart-account repository from GitHub using a specific branch (v1.3.0-libs.0). Cloning is the first step towards preparing the local development environment for deployment. Dependencies: git must be installed on your system. Input is the shell command, and the output is a cloned repository in your file system.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-contracts-deployment.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch v1.3.0-libs.0 https://github.com/safe-global/safe-smart-account.git\ncd safe-smart-account\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting nonce\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, highlighting the `nonce` parameter within the `safeTransactionData` object. This specifies the transaction count for the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData: {\n    operation: OperationType.Call,\n    safeTxGas: '0x...',\n    baseGas: '123',\n    gasPrice: '123',\n    gasToken: '0x...',\n    refundReceiver: '0x...',\n    nonce: '10'\n  },\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Hardhat Tests via CLI\nDESCRIPTION: Bash command to run the Hardhat tests defined in the project. This command invokes the Hardhat testing environment, which compiles the contracts and executes the test files (typically found in the 'test' directory).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat test\n```\n\n----------------------------------------\n\nTITLE: Fallback Handler Address Parameter\nDESCRIPTION: Example of passing the handler address parameter to the setFallbackHandler function. The handler parameter specifies the contract address that will handle fallback calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/fallback/setFallbackHandler.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).setFallbackHandler(\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Wallet Configuration URLs in Safe Documentation\nDESCRIPTION: URLs for accessing the wallet configuration interfaces in the Safe documentation admin panel. These endpoints allow administrators to add new wallets or edit existing ones in the configuration system.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/config-service-configuration/add-or-edit-wallet.mdx#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://localhost:8000/cfg/admin/chains/wallet/add/\n```\n\nLANGUAGE: markdown\nCODE:\n```\nhttp://localhost:8000/cfg/admin/chains/wallet/{wallet index}/change/\n```\n\n----------------------------------------\n\nTITLE: Retrieve User Operation via API with curl\nDESCRIPTION: Demonstrates how to make a GET request to the Safe Transaction Service API using curl to fetch details of a User Operation. The `user_operation_hash` path parameter is required. The request expects a JSON response detailing the user operation and its associated Safe operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n     \n```\n\n----------------------------------------\n\nTITLE: Running Specific Safe Migration Scripts (Bash)\nDESCRIPTION: Shows example commands using npm to execute the pre-configured migration scripts defined in `package.json`. Each command (`npm run migrate:L1`, `npm run migrate:L2`, `npm run migrate:L1:withFH`, `npm run migrate:L2:withFH`) triggers the `ts-node ./src/migrate.ts` execution with a specific argument (`migrateSingleton`, `migrateL2Singleton`, `migrateWithFallbackHandler`, `migrateL2WithFallbackHandler`) to perform the desired Safe migration type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-migration.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run migrate:L1\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run migrate:L2\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run migrate:L1:withFH\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run migrate:L2:withFH\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Module Transaction API\nDESCRIPTION: Provides a JSON example of a typical successful response from the API, including transaction metadata such as block number, hash, status, involved addresses, value, data, and operation type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface for Multisig Transaction Response\nDESCRIPTION: This snippet references a TypeScript file that defines the data structure of the multisig transaction response, including fields like safe, to, value, data, operation, gas tokens, gas limits, and signatures. Dependencies include the relevant TypeScript schema for type safety and validation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Multisig Transaction Confirmations - Bash\nDESCRIPTION: Shows how to use `curl` to send a `GET` request to retrieve the list of confirmations for a specific Safe multisig transaction from the Transaction Service API. The endpoint is `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/`, requiring the `safe_tx_hash` in the path. Optional `limit` and `offset` query parameters are available for pagination. The expected output is a JSON object containing confirmation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n```\n\n----------------------------------------\n\nTITLE: Sample Response JSON for Incoming Transfers API\nDESCRIPTION: This snippet provides an example JSON response from the API endpoint, illustrating the structure of a paginated transfer result set. It includes details for a single Ether transfer, such as transfer type, date, block number, transaction hash, sender and receiver addresses, and transfer value.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: List Contracts Sample Response\nDESCRIPTION: Provides a sample JSON response illustrating the structure of the paginated list of contracts, including total count, pagination links, and an array of contract objects with properties like address, name, displayName, logoUri, contractAbi, and trustedForDelegateCall.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates via Safe Transaction Service (TypeScript)\nDESCRIPTION: Demonstrates a TypeScript code structure (file reference given, implementation not shown) for invoking the GET /api/v2/delegates/ endpoint to fetch all delegates. The TypeScript code is typically used in backend or API testing scripts for interfacing with the Safe Transaction Service. Required dependencies include an HTTP client (e.g., axios or fetch), and the endpoint accepts query parameters for 'safe', 'delegate', 'delegator', 'label', 'limit', and 'offset'. Returns a paginated JSON response with delegate details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v2-delegates--get.ts\n```\n\n----------------------------------------\n\nTITLE: Listing token transfers for a Safe address via API endpoint\nDESCRIPTION: This snippet demonstrates how to call the API to retrieve a paginated list of token transfers for a specified Safe address. It includes method, endpoint URL, header requirements, and sample response output. Dependencies include a curl command-line client and an understanding of API request formats.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/transfers/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Token Information using cURL\nDESCRIPTION: Shows how to use cURL to send a GET request to retrieve detailed information for a specific token address (e.g., `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75`) from the Safe Transaction Service API (Celo instance). Headers `Accept` and `content-type` are set to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Tokens via GET /api/v1/tokens/lists/\nDESCRIPTION: This code snippet documents the API endpoint that returns a paginated list of tokens supported by the Safe Transaction Service. It details query parameters 'limit' and 'offset', response schema with total count, next/previous links, and results array, as well as a sample curl request for testing the endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ERC1271FallbackHandler Test Suite using Hardhat and TypeScript\nDESCRIPTION: This snippet shows the initial boilerplate for a test suite to verify ERC1271FallbackHandler behavior in a Gnosis Safe setup, using Hardhat and Chai libraries. It imports ethers, expect, contract typings, and outlines a series of Mocha tests for signature-handling edge cases. Dependencies include deployed Safe, ERC1271FallbackHandler, and SafeProxyFactory contracts. Parameters such as contract owners and threshold are declared, and test stubs for direct calls, unsigned messages, invalid signatures, and multi-signature scenarios are provided for further implementation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from \"hardhat\";\nimport { expect } from \"chai\";\nimport { Signer, ZeroAddress } from \"ethers\";\nimport { Safe, Safe__factory, SafeProxyFactory } from \"../typechain-types\";\nimport { ERC1271FallbackHandler } from \"../typechain-types/contracts/ERC1271FallbackHandler\";\n\ndescribe(\"ERC1271FallbackHandler.test\", async function () {\n  let deployer: Signer;\n  let alice: Signer;\n  let masterCopy: Safe;\n  let proxyFactory: SafeProxyFactory;\n  let safeFactory: Safe__factory;\n  let safe: Safe;\n  let exampleFallbackHandler: ERC1271FallbackHandler;\n  const threshold = 1;\n\n  const EIP712_SAFE_MESSAGE_TYPE = {\n    // \"SafeMessage(bytes message)\"\n    SafeMessage: [{ type: \"bytes\", name: \"message\" }],\n  };\n\n  // Setup signers and deploy contracts before running tests\n  beforeEach(async () => {});\n\n  it(\"should revert if called directly\", async () => {});\n\n  it(\"should revert if message was not signed\", async () => {});\n\n  it(\"should revert if signature is not valid\", async () => {});\n\n  it(\"should return magic value if enough owners signed and allow a mix different signature types\", async () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Get Safe Status API Request - cURL\nDESCRIPTION: This cURL command retrieves detailed information about a given Safe account. It sends a GET request to the API endpoint and specifies the address of the Safe account. The response is expected to be in JSON format, containing details about the Safe's configuration and current state. Requires the Safe account address as a path parameter. The request uses the safe-transaction-mainnet.safe.global API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Get Safe Status API Endpoint Documentation (TypeScript and REST)\nDESCRIPTION: Defines API route details, including HTTP method, URL path, parameters, and expected responses for fetching detailed information on a specific Safe account identified by its address. It also provides an example curl command and a sample JSON response showing Safe properties like owners, modules, fallback handler, guard, and version.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-safes-{address}--get.ts\n\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transactions Analytics by Origin via GET /api/v2/analytics/multisig-transactions/by-origin/\nDESCRIPTION: This snippet explains the API route for fetching multisig transaction analytics grouped by origin. It indicates that no parameters are required, and the response signifies that there is no response body. Additionally, it provides a sample cURL command for testing this endpoint, which returns a simple acknowledgment without data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Create Signed Message API Request (POST)\nDESCRIPTION: This snippet represents a POST request to create a signed message. It takes the Safe account address as a path parameter. The request's purpose is to add a new message for a given Safe account and can accept either a string (EIP191) or an EIP712 object as the message content. The request uses cURL for illustration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_13\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Placeholder: Creating a Signed Message (TypeScript)\nDESCRIPTION: TypeScript example placeholder for creating a new message for a Safe account via the POST /api/v1/safes/{address}/messages/ endpoint. The actual code resides in the referenced external file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/xlayer/-v1-safes-{address}-messages--post.ts\n```\n\n----------------------------------------\n\nTITLE: Function Parameter Usage for safeVersion\nDESCRIPTION: Example showing how to use the safeVersion parameter in the getSafeAddressFromDeploymentTx function. The parameter accepts a SafeVersion type string representing the version of the Safe account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/deployment/getsafeaddressfromdeploymenttx.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeAddress = getSafeAddressFromDeploymentTx(\n  transactionReceipt,\n  '1.4.1'\n)\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript Code\nDESCRIPTION: This code is a placeholder and is commented to provide context. It illustrates where relevant TypeScript code would be placed, possibly for generating or interacting with the API requests shown.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_73\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/sepolia/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Querying Multisig Transaction via Safe Core API in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve details of a multisig transaction by its safe_tx_hash using a curl HTTP GET request. The safe_tx_hash parameter must be included in the endpoint URL path. The snippet requires curl and access to the Safe Core API endpoint. Upon success, the API returns a JSON object detailing the multisig transaction, including addresses, values, and confirmation details. If the transaction does not exist, an error response is provided.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering API Reference Content - JavaScript (React)\nDESCRIPTION: This snippet uses the `getStaticProps` function to fetch and render the MDX content containing the API reference. It imports necessary components and libraries such as `renderToString` from 'react-dom/server', `MDXComponents`, `getHeadingsFromHtml`, the MDX file (`polygon-reference.mdx`), and the swagger JSON file containing the API schema.  It renders the MDX to a string and uses the `getHeadingsFromHtml` function to get headings, which are then passed as props. The output is the processed content with headings extracted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/polygon.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Prepared Signature Data\nDESCRIPTION: This snippet shows a JSON object containing a 'preparedSignature' field. The 'preparedSignature' contains data related to a signature that has been prepared, likely for an on-chain transaction related to the Safe-Global project. The included metadata is also within a JSON object, describing a 'CORSOrigin' to be 'false'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_61\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n      }\n    \n```\n\n----------------------------------------\n\nTITLE: Querying Specific Safe Transaction Service Contract (bash)\nDESCRIPTION: This `curl` command retrieves detailed information for a single known smart contract from the Safe Transaction Service by its specific blockchain address. It includes headers for requesting and sending JSON data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n\n```\n\n----------------------------------------\n\nTITLE: Response After Confirming Multisig Transaction (JSON)\nDESCRIPTION: The API response body for a POST request confirming a multisig transaction. Returns a single field 'signature' containing a hexadecimal ECDSA signature. Output is used to verify the confirmation has been recorded. Signature format and validity depend on the cryptographic method (e.g., ETH_SIGN).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Balances via API\nDESCRIPTION: This snippet shows how to retrieve the Ether and ERC20 token balances of a specified Safe account. This request is made to the `/api/v1/safes/{address}/balances/` endpoint.  The deprecated endpoint allows filtering for trusted tokens and excluding spam tokens via query parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Multisig Transactions Endpoint\nDESCRIPTION: This JSON snippet shows a sample response from the Safe Transaction Service listing multisignature transactions. It includes pagination details such as count, next, and previous URLs, as well as an array of detailed transaction objects. Each transaction object contains fields for the safe address, destination, value, nonce, gas details, execution and submission timestamps, status flags, confirmation information, and signatures. This example is useful for understanding the structure and types of data returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83f...62d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Account Operation with EIP-4337 Parameters\nDESCRIPTION: Complete transaction details for initializing a Safe account operation using EIP-4337 (Account Abstraction). Contains initialization code, call data, gas parameters, paymaster information, and cryptographic signatures required for executing the transaction through an entry point contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_55\n\nLANGUAGE: solidity\nCODE:\n```\n{\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Operation Response JSON Structure\nDESCRIPTION: The JSON response structure for a user operation query. Contains detailed information about the user operation, including hash, sender, gas parameters, and the linked Safe operation with confirmations and signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n  \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n  \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n  \"nonce\": 0,\n  \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n  \"callGasLimit\": 198268,\n  \"verificationGasLimit\": 3867576,\n  \"preVerificationGas\": 110646,\n  \"maxFeePerGas\": 36776375378,\n  \"maxPriorityFeePerGas\": 199436407,\n  \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n  \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n  \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n  \"safeOperation\": {\n    \"created\": \"2024-07-22T10:00:18.892702Z\",\n    \"modified\": \"2024-07-22T10:00:18.892702Z\",\n    \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n    \"validAfter\": null,\n    \"validUntil\": null,\n    \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n    \"confirmations\": [\n      {\n        \"created\": \"2024-07-22T10:00:18.898708Z\",\n        \"modified\": \"2024-07-22T10:00:18.898708Z\",\n        \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n        \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n        \"signatureType\": \"CONTRACT_SIGNATURE\"\n      }\n    ],\n    \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Parameters for Listing Incoming Transfers in JSON Schema\nDESCRIPTION: Defines the request parameters for the incoming transfers API, including path parameters such as 'address' and various query filters like '_from', 'block_number', 'execution_date', 'token_address', etc. These parameters enable filtering and pagination of transfer data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_30\n\nLANGUAGE: JSON\nCODE:\n```\n[{\"in\":\"path\",\"name\":\"address\",\"schema\":{\"type\":\"string\"},\"required\":true},{\"in\":\"query\",\"name\":\"_from\",\"schema\":{\"type\":\"string\"}},{\"in\":\"query\",\"name\":\"block_number\",\"schema\":{\"type\":\"number\"}},{\"in\":\"query\",\"name\":\"block_number__gt\",\"schema\":{\"type\":\"number\"}},{\"in\":\"query\",\"name\":\"block_number__lt\",\"schema\":{\"type\":\"number\"}},{\"in\":\"query\",\"name\":\"execution_date__gte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"execution_date__lte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"execution_date__gt\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"execution_date__lt\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"to\",\"schema\":{\"type\":\"string\"}},{\"in\":\"query\",\"name\":\"token_address\",\"schema\":{\"type\":\"string\"}},{\"in\":\"query\",\"name\":\"transaction_hash\",\"schema\":{\"type\":\"string\"}},{\"in\":\"query\",\"name\":\"value\",\"schema\":{\"type\":\"number\"}},{\"in\":\"query\",\"name\":\"value__gt\",\"schema\":{\"type\":\"number\"}},{\"in\":\"query\",\"name\":\"value__lt\",\"schema\":{\"type\":\"number\"}},{\"in\":\"query\",\"name\":\"erc20\",\"schema\":{\"type\":\"boolean\"}},{\"in\":\"query\",\"name\":\"erc721\",\"schema\":{\"type\":\"boolean\"}},{\"in\":\"query\",\"name\":\"ether\",\"schema\":{\"type\":\"boolean\"}},{\"name\":\"limit\",\"required\":false,\"in\":\"query\",\"description\":\"Number of results to return per page.\",\"schema\":{\"type\":\"integer\"}},{\"name\":\"offset\",\"required\":false,\"in\":\"query\",\"description\":\"The initial index from which to return the results.\",\"schema\":{\"type\":\"integer\"}}]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies: Python\nDESCRIPTION: This snippet installs the required Python packages to interact with the Safe. It uses pip to install safe-eth-py for Safe interaction and web3 and hexbytes for interacting with the Ethereum blockchain.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install safe-eth-py web3 hexbytes\n```\n\n----------------------------------------\n\nTITLE: Signing a Message via Safe Transaction API (Bash/TypeScript/JSON)\nDESCRIPTION: Adds a signature for a specific message identified by its hash using a POST request to the `/api/v1/messages/{message_hash}/signatures/` endpoint. Requires the `message_hash` as a path parameter. The endpoint returns a 201 status code upon successful creation with an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/arbitrum/-v1-messages-{message_hash}-signatures--post.ts\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST https://safe-transaction-arbitrum.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\nLANGUAGE: JSON\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Placeholder: Listing Messages (TypeScript)\nDESCRIPTION: TypeScript example placeholder for retrieving messages for a Safe account via the GET /api/v1/safes/{address}/messages/ endpoint. The actual code resides in the referenced external file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/xlayer/-v1-safes-{address}-messages--get.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe4337Pack with Updated Contract Naming\nDESCRIPTION: Example showing how to initialize Safe4337Pack with the renamed safeModulesSetupAddress property that replaced the previous addModulesLibAddress. This illustrates the updated customContracts configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/guides/migrate-to-v4.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst safe4337Pack = await Safe4337Pack.init({\n  provider: window.ethereum, // Or any compatible EIP-1193 provider,\n  signer: 'signerAddressOrPrivateKey',\n  bundlerUrl: 'https://...',\n  customContracts: {\n    safeModulesSetupAddress: '0x1234567890123456789012345678901234567890' // Previously addModulesLibAddress\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Multisig Transaction via Safe API - Bash\nDESCRIPTION: Illustrates how to retrieve a specific multi-signature transaction using a GET request to the Safe Transaction Service API. It requires the unique Safe transaction hash as a path parameter and sets the appropriate 'Accept' and 'Content-Type' headers for JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Project Directory and NPM\nDESCRIPTION: Creates a new project directory named `safe-guard-tutorial` and navigates into it. Initializes a new npm package with default settings using the `-y` flag.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir safe-guard-tutorial && cd safe-guard-tutorial \nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Data Decoder POST request with curl\nDESCRIPTION: This snippet shows how to use curl to send a POST request to the data decoder endpoint.  It includes the URL, sets the `Accept` and `content-type` headers to `application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for User Operations List\nDESCRIPTION: Illustrates the JSON structure returned by the `/api/v1/safes/{address}/user-operations/` endpoint. It includes pagination fields (`count`, `next`, `previous`) and a `results` array containing detailed information for each UserOperation, such as `ethereumTxHash`, `sender`, `userOperationHash`, gas parameters, and the associated `safeOperation` details if available.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample response for getting a transfer by ID\nDESCRIPTION: This JSON object provides an example of a transfer's detailed response, including transfer type, timestamp, block, transaction hash, sender and receiver addresses, value, token info, and the transfer ID. It exemplifies the expected dataset structure returned by the API call.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Adding Transaction Confirmation (JSON)\nDESCRIPTION: Displays the JSON response received after successfully adding a confirmation to a multisig transaction. It typically includes the submitted signature. A successful addition returns an HTTP 201 Created status code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Contract - Sample JSON Response\nDESCRIPTION: This JSON object is a sample response from the /api/v1/contracts/{address}/ endpoint.  It provides detailed information about a specific contract, including address, name, display name, logo URI, contract ABI, and a boolean indicating if it's trusted for delegate calls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a Stepwise Safe Module Tutorial React App in TypeScript\nDESCRIPTION: This code defines a Next.js page component for guiding users through installing and interacting with a Safe account module on Sepolia, using MetaMask, Pimlico, and relevant viem/permissionless smart contract utilities. It initializes state, configures clients, manages wallet connections, and displays step-based UI according to the user’s progress. Key placeholders for Safe account setup and module manipulation are included as empty async functions, to be implemented in subsequent tutorial steps. Dependencies include React, Next.js, viem, permissionless, truncate-eth-address, MetaMask extension, and a Pimlico API key.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n'use client'\n\nimport { createSmartAccountClient } from 'permissionless'\nimport { sepolia } from 'viem/chains'\nimport {\n  encodePacked,\n  http,\n  encodeFunctionData,\n  parseAbi,\n  createWalletClient,\n  createPublicClient,\n  custom,\n  encodeAbiParameters,\n  parseAbiParameters,\n  HttpTransport,\n  Client,\n  parseEther\n} from 'viem'\nimport { Erc7579Actions, erc7579Actions } from 'permissionless/actions/erc7579'\nimport { createPimlicoClient } from 'permissionless/clients/pimlico'\nimport {\n  toSafeSmartAccount,\n  ToSafeSmartAccountReturnType\n} from 'permissionless/accounts'\nimport { useEffect, useState } from 'react'\nimport truncateEthAddress from 'truncate-eth-address'\nimport { SendUserOperationParameters } from 'viem/account-abstraction'\n\nexport default function Home () {\n  const [safeAccount, setSafeAccount] =\n    useState<ToSafeSmartAccountReturnType<'0.7'> | null>(null)\n  const [smartAccountClient, setSmartAccountClient] = useState<\n    | (Client<HttpTransport, typeof sepolia> &\n        Erc7579Actions<ToSafeSmartAccountReturnType<'0.7'>> & {\n          sendUserOperation: (\n            params: SendUserOperationParameters\n          ) => Promise<string>\n        })\n    | null\n  >(null)\n  const [ownerAddress, setOwnerAddress] = useState<string | null>(null)\n  const [executorAddress, setExecutorAddress] = useState<string | null>(null)\n  const [safeAddress, setSafeAddress] = useState<string | null>(null)\n  const [safeIsDeployed, setSafeIsDeployed] = useState(false)\n  const [moduleIsInstalled, setModuleIsInstalled] = useState(false)\n  const [executorTransactionIsSent, setExecutorTransactionIsSent] =\n    useState(false)\n  const [ownerIsAdded, setOwnerIsAdded] = useState(false)\n  const [moduleIsUninstalled, setModuleIsUninstalled] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [walletClient, setWalletClient] = useState<ReturnType<\n    typeof createWalletClient\n  > | null>(null)\n\n  // The module we will use is deployed as a smart contract on Sepolia:\n  const ownableExecutorModule = '0xc98B026383885F41d9a995f85FC480E9bb8bB891'\n\n  //  TODO: Make sure to add your own API key to the Pimlico URL:\n  const pimlicoUrl =\n    'https://api.pimlico.io/v2/sepolia/rpc?add_balance_override&apikey=YOUR_PIMLICO_API_KEY'\n\n  // The Pimlico client is used as a paymaster:\n  const pimlicoClient = createPimlicoClient({\n    transport: http(pimlicoUrl),\n    chain: sepolia\n  })\n\n  useEffect(() => {\n    // We create a wallet client to connect to MetaMask:\n    const walletClient = createWalletClient({\n      chain: sepolia,\n      // @ts-expect-error MetaMask is a requirement for this tutorial\n      transport: custom(typeof window !== 'undefined' ? window.ethereum! : null)\n    })\n    setWalletClient(walletClient)\n  }, [])\n\n  // Check for connected accounts on page load:\n  useEffect(() => {\n    checkAddresses()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [walletClient])\n\n  // Check whether the user has connected two accounts, without MetaMask popping up:\n  const checkAddresses = async () => {\n    if (!walletClient) return\n    const addresses = await walletClient!.getAddresses()\n    setOwnerAddress(addresses[0])\n    setExecutorAddress(addresses[1])\n    if (addresses.length >= 2) {\n      init()\n    }\n  }\n\n  const connectWallets = async () => {\n    // Only at the request address call, MetaMask will pop up and ask the user to connect:\n    await walletClient!.requestAddresses()\n    checkAddresses()\n  }\n\n  // The public client is required for the safe account creation:\n  const publicClient = createPublicClient({\n    transport: http('https://rpc.ankr.com/eth_sepolia'),\n    chain: sepolia\n  })\n\n  // The following functions will be filled with code in the following steps:\n\n  const init = async () => {}\n\n  const installModule = async () => {}\n\n  const executeOnOwnedAccount = async () => {}\n\n  const addOwner = async () => {}\n\n  const uninstallModule = async () => {}\n\n  // Depending on the state of the tutorial, different cards are displayed:\n  // Step 1: Connect Wallets\n  if (!ownerAddress || !executorAddress) {\n    return (\n      <div className='card'>\n        <div className='title'>Connect two accounts</div>\n        <div>\n          Please ensure to connect with two accounts to this site. The second\n          account needs to have some Sepolia Eth for gas.\n        </div>\n        <div className='actions'>\n          <button onClick={connectWallets}>Connect Wallet</button>\n        </div>\n      </div>\n    )\n  }\n\n  // Step 2: Install Module\n  if (!moduleIsInstalled) {\n    return (\n      <div className='card'>\n        <div className='title'>Install Module</div>\n        <div>\n          Your Safe has the address{' '}\n          {safeAddress && truncateEthAddress(safeAddress)} and is{' '}\n          {safeIsDeployed ? 'deployed' : 'not yet deployed'}.\n          {!safeIsDeployed &&\n            'It will be deployed with your first transaction, when you install the module.'}\n        </div>\n        <div>\n          You can now install the module. MetaMask will ask you to sign a\n          message with the first account after clicking the button.\n        </div>\n        <div className='actions'>\n          <button\n            onClick={installModule}\n            className={loading ? 'button--loading' : ''}\n          >\n            Install Module\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  // Step 3: Execute on Owned Account\n  if (!executorTransactionIsSent) {\n    return (\n      <div className='card'>\n        <div className='title'>Execute on owned account</div>\n        <div>\n          You can now execute a transaction on the owned account as the\n          executor. In this case, you will send a dummy transaction. But you\n          could also claim ownership of the account.\n        </div>\n        <div>\n          When you click the button, Metamask will request a transaction from\n          the second account.\n        </div>\n        <div className='actions'>\n          <button\n            className='skip'\n            onClick={() => {\n              setExecutorTransactionIsSent(true)\n              setLoading(false)\n            }}\n          >\n            Skip\n          </button>\n          <button\n            onClick={executeOnOwnedAccount}\n            className={loading ? 'button--loading' : ''}\n          >\n            Execute on owned account\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  // Step 4: Add Owner\n  if (!ownerIsAdded) {\n    return (\n      <div className='card'>\n        <div className='title'>Add Owner</div>\n        <div>\n          Now, you will interact with the 7579 module directly. You can add an\n          owner to the Safe. The new owner will be able to execute transactions\n          on the Safe. Metamask will request a signature from the first owner.\n        </div>\n        <div>\n          <div className='actions'>\n            <button\n              className='skip'\n              onClick={() => {\n                setOwnerIsAdded(true)\n                setLoading(false)\n              }}\n            >\n              Skip\n            </button>\n            <button\n              onClick={addOwner}\n              className={loading ? 'button--loading' : ''}\n            >\n              Add Owner\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Step 5: Uninstall Module\n  if (!moduleIsUninstalled) {\n    return (\n      <div className='card'>\n        <div className='title'>Uninstall Module</div>\n        <div>\n          To finish the module\\'s lifecycle, you can now uninstall the\n          module. MetaMask will ask you to sign a message after clicking the\n          button.\n        </div>\n        <div className='actions'>\n          <button\n            onClick={uninstallModule}\n            className={loading ? 'button--loading' : ''}\n          >\n            Uninstall Module\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  // Step 6: Finish\n  return (\n    <div className='card'>\n      <div className='title'>Well done</div>\n      <div>\n        Congratulations! You\\'ve successfully installed, executed,\n        interacted with, and uninstalled the module. This tutorial is now\n        complete. Great job! Keep exploring!\n      </div>\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: List Safe Delegates using Transaction Service API (GET)\nDESCRIPTION: Retrieves a paginated list of Safe delegates from the Transaction Service API. This endpoint supports filtering by safe, delegate, delegator, or label and includes pagination parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v2-delegates--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch Multisig Transaction Analytics with cURL\nDESCRIPTION: This snippet illustrates how to fetch multisig transaction analytics by origin using a cURL request to the Safe Transaction Service API. It sets the necessary headers for accepting and sending JSON data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response of Safe Operations List\nDESCRIPTION: A sample JSON response demonstrating the data structure returned by the Safe operations listing API endpoint. The response includes pagination metadata fields (count, next, previous) and an array of Safe operation objects. Each operation contains timestamps, hashes, module addresses, a list of confirmations with signature data, a prepared signature, and detailed user operation information including Ethereum transaction hashes and gas parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction Analytics by Origin via API (Bash)\nDESCRIPTION: Executes a GET request using curl to the `/api/v2/analytics/multisig-transactions/by-origin/` endpoint. This endpoint is intended for retrieving analytics data related to multisig transactions, potentially grouped by their origin. The request includes standard `Accept` and `content-type` headers for JSON. According to the documentation, it expects a 200 response with no body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Sender Address\nDESCRIPTION: This example shows how to specify a sender address when sending an on-chain message, which is useful when you need to explicitly define the transaction origin.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageResult = await safeMessageClient.sendOnChainMessage({\n  message: 'abc',\n  from: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Token Information with cURL\nDESCRIPTION: Makes a GET request to fetch detailed information about a specific token by its address. Returns token type, name, symbol, decimals, and other metadata.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Get Safe Creation Status - cURL\nDESCRIPTION: This cURL command retrieves detailed information on the Safe creation transaction of a given Safe by making a GET request to the /api/v1/safes/{address}/creation/ endpoint.  The address parameter is required and represents the Safe's Ethereum address. The request expects a JSON response that includes information like the created date, creator address, transaction hash, and more.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_69\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Get Specific Token API Call (Safe Transaction Service) - cURL\nDESCRIPTION: Retrieves detailed information for a specific token supported by the Safe Transaction Service, identified by its contract address. The endpoint requires the token address as a path parameter. The response provides comprehensive details about the token, including its type, name, symbol, decimals, logo URI, and trusted status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/tokens/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Incoming Safe Transfers\nDESCRIPTION: Provides an example JSON response structure for the incoming transfers API endpoint. The response is paginated (`count`, `next`, `previous`) and contains a `results` array. Each object in the `results` array represents a transfer, detailing its `type` (e.g., ETHER_TRANSFER), `executionDate`, `blockNumber`, `transactionHash`, `to` address, `value`, `tokenId`, `tokenAddress`, a unique `transferId`, optional `tokenInfo`, and `from` address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using createDisableModuleTx with gasPrice option\nDESCRIPTION: Example showing how to specify the gasPrice option when creating a transaction to disable a Safe Module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableModuleTx(\n  '0x...',\n  options: {\n    gasPrice: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using createDisableModuleTx with safeTxGas option\nDESCRIPTION: Example showing how to specify the safeTxGas option when creating a transaction to disable a Safe Module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableModuleTx(\n  '0x...',\n  options: {\n    safeTxGas: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Safe with PredictedSafe Parameter\nDESCRIPTION: This snippet shows connecting to a Safe using the `predictedSafe` parameter.  This allows connection to Safes that are yet to be deployed.  It requires a `provider`, a `signer` and a `predictedSafe` object.  Requires the `@safe-global/protocol-kit` library.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/initialization/connect.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst protocolKit = await Safe.connect({\n  provider,\n  signer,\n  predictedSafe\n})\n```\n\n----------------------------------------\n\nTITLE: Populating constants.ts with Passkeys Example - TypeScript\nDESCRIPTION: This snippet indicates that the content for constants.ts should be sourced from a provided Safe passkeys example file. The actual implementation must be copied in for full context. This file will store common configuration constants needed throughout the passkeys app, such as chain IDs, contract addresses, or message templates.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../../../../examples/passkeys/lib/constants.ts\n```\n\n----------------------------------------\n\nTITLE: Response Format for Specific Token Information\nDESCRIPTION: Sample response showing the detailed information for a specific token returned by the Safe API. This includes the token's type, address, name, symbol, decimals, logo URI, and trusted status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ERC20\",\n  \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n  \"name\": \"0x5555.com\",\n  \"symbol\": \"0x5555.com\",\n  \"decimals\": 18,\n  \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n  \"trusted\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Incoming Transfers using cURL (Bash)\nDESCRIPTION: Demonstrates how to make a GET request using cURL to fetch the list of incoming transfers for a specific Safe address (0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75 in this example) from the Gnosis Chain instance of the Safe Transaction Service API. It specifies the required 'Accept' header for a JSON response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/incoming-transfers/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Adding Signatures: TypeScript\nDESCRIPTION: This snippet initializes the Protocol Kit for Owner B and signs the transaction hash. Then, it sends the signature to the Transaction Service using the Safe API Kit.  It requires the RPC URL, Owner B's private key, Safe address, and transaction hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize the Protocol Kit with Owner B\nconst protocolKitOwnerB = await Safe.init({\n  provider: config.RPC_URL,\n  signer: config.OWNER_B_PRIVATE_KEY,\n  safeAddress: config.SAFE_ADDRESS\n})\n\n// Sign the transaction with Owner B\nconst signatureOwnerB = await protocolKitOwnerB.signHash(safeTxHash)\n\n// Send the transaction to the Transaction Service with the signature from Owner B\nawait apiKit.confirmTransaction(\n  safeTxHash,\n  signatureOwnerB.data\n)\n```\n\n----------------------------------------\n\nTITLE: Add Delegate - Python\nDESCRIPTION: This snippet demonstrates how to add a delegate to a Safe using the `safe-eth-py` library. It creates a message hash, signs it with the owner's private key, and then calls the `add_delegate` method of the `TransactionServiceApi`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/delegates.mdx#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Add Owner B as a delegate of Owner A for all Safes accounts (safe_address = null)\n      account_owner_a = Account.from_key(config.get(\"OWNER_A_PRIVATE_KEY\"))\n      account_owner_b = Account.from_key(config.get(\"OWNER_B_PRIVATE_KEY\"))\n      \n      hash_to_sign = transaction_service_api.create_delegate_message_hash(delegate_address=account_owner_b.address)\n      signature = account_owner_a.signHash(hash_to_sign)\n      \n      transaction_service_api.add_delegate(\n          delegate_address=ChecksumAddress(account_owner_b.address),\n          delegator_address=ChecksumAddress(account_owner_a.address),\n          label=\"Label\",\n          signature=signature.signature)\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props with React Server-Side Rendering for Gnosis Chain API Documentation\nDESCRIPTION: This snippet defines an asynchronous function that renders an MDX component to a string, extracts headings from the generated HTML and a Swagger schema, and returns these as props for static generation. It relies on React's server-side rendering methods and custom MDX utilities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/gnosis-chain.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction with POST Request (cURL)\nDESCRIPTION: This code snippet demonstrates how to create a multi-signature transaction for a Safe account using a POST request with cURL. It sends a request to the `/api/v1/safes/{address}/multisig-transactions/` endpoint with an empty JSON payload. The `address` parameter in the path should be replaced with the Safe account address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Importing SVG Asset in JavaScript/TypeScript\nDESCRIPTION: This code snippet demonstrates importing an SVG file ('ic-smart-account.svg') as a component or variable named 'SafeSmartAccount' using JavaScript/TypeScript import syntax. This is typically done within frontend frameworks (like React, Vue, Angular) to use the SVG image within the user interface. The path '../../assets/svg/ic-smart-account.svg' indicates a relative path to the asset.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-overview.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SafeSmartAccount from '../../assets/svg/ic-smart-account.svg'\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Confirmation via API (Bash)\nDESCRIPTION: This snippet shows how to use `curl` to make a POST request to the Safe Transaction Service API to add a confirmation for a transaction identified by `safe_operation_hash`. The request includes necessary `Accept` and `Content-Type` headers. The example shows an empty request body `{}`, implying that the confirmation data (likely a signature) is passed through other means or not required in the body for this specific API version or call context. This endpoint supports adding multiple signatures but explicitly does not support delegates. A successful operation typically results in an HTTP 201 Created status with an empty response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-chiado.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Message by Hash (curl)\nDESCRIPTION: Performs a GET request to the Safe Transaction Service API to fetch detailed information about a specific message using its unique hash. The message hash is included as a path parameter in the URL. Standard Accept and content-type headers are necessary for the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Collectibles via API using Curl\nDESCRIPTION: This snippet demonstrates how to use `curl` to retrieve a paginated list of ERC721 collectibles for a specific Safe address from the Safe Transaction Service API. It sets the `Accept` and `content-type` headers to `application/json` to ensure the response is correctly formatted.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a Delegate with a POST Request using cURL\nDESCRIPTION: This snippet shows how to create a new Safe delegate using a POST request to the `/api/v2/delegates/` endpoint. It includes the required headers for specifying JSON content. Signature generation based on EIP712 is necessary for authenticating the request. Dependencies: curl\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mainnet.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation for Retrieving a SafeOperation by Hash\nDESCRIPTION: Details the API endpoint for fetching a SafeOperation object using its unique hash. Includes parameter definitions, response schema references, and endpoint URL pathway, specifying dependencies on the schema \"SafeOperationWithUserOperationResponse\". Utilizes OpenAPI structure to document parameters and expected JSON response fields.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Parameters parameters={[{\"in\":\"path\",\"name\":\"safe_operation_hash\",\"schema\":{\"type\":\"string\"},\"required\":true}]} />\n<Responses responses={[{\"code\":\"200\",\"schema\":{},\"content\":{\"application/json\":{\"schema\":{\"refName\":\"SafeOperationWithUserOperationResponse\",\"type\":\"object\",\"properties\":{\"created\":{\"type\":\"string\",\"format\":\"date-time\"},\"modified\":{\"type\":\"string\",\"format\":\"date-time\"},\"safeOperationHash\":{\"type\":\"string\"},\"validAfter\":{\"type\":\"string\",\"format\":\"date-time\"},\"validUntil\":{\"type\":\"string\",\"format\":\"date-time\"},\"moduleAddress\":{\"type\":\"string\"},\"confirmations\":{\"type\":\"object\",\"additionalProperties\":{},\"description\":\"Filters confirmations queryset\\n\\n:param obj: SafeOperation instance\\n:return: Serialized queryset\",\"readOnly\":true},\"preparedSignature\":{\"type\":\"string\",\"readOnly\":true},\"userOperation\":{\"allOf\":[{\"refName\":\"UserOperationResponse\",\"type\":\"object\",\"properties\":{\"ethereumTxHash\":{\"type\":\"string\"},\"sender\":{\"type\":\"string\"},\"userOperationHash\":{\"type\":\"string\"},\"nonce\":{\"type\":\"integer\",\"minimum\":0},\"initCode\":{\"type\":[\"string\",\"null\"]},\"callData\":{\"type\":[\"string\",\"null\"]},\"callGasLimit\":{\"type\":\"integer\",\"minimum\":0},\"verificationGasLimit\":{\"type\":\"integer\",\"minimum\":0},\"preVerificationGas\":{\"type\":\"integer\",\"minimum\":0},\"maxFeePerGas\":{\"type\":\"integer\",\"minimum\":0},\"maxPriorityFeePerGas\":{\"type\":\"integer\",\"minimum\":0},\"paymaster\":{\"type\":[\"string\",\"null\"]},\"paymasterData\":{\"type\":[\"string\",\"null\"]},\"signature\":{\"type\":\"string\"},\"entryPoint\":{\"type\":\"string\"}},\"required\":[\"callData\",\"callGasLimit\",\"entryPoint\",\"ethereumTxHash\",\"initCode\",\"maxFeePerGas\",\"maxPriorityFeePerGas\",\"nonce\",\"paymaster\",\"paymasterData\",\"preVerificationGas\",\"sender\",\"signature\",\"userOperationHash\",\"verificationGasLimit\"]}]}},\"required\":[\"confirmations\",\"created\",\"modified\",\"moduleAddress\",\"preparedSignature\",\"safeOperationHash\",\"userOperation\",\"validAfter\",\"validUntil\"]}}}}],\"description\":\"\"}]}\n```\n\n----------------------------------------\n\nTITLE: Get Safe Creation Status - cURL Request\nDESCRIPTION: This cURL command demonstrates how to retrieve the creation status of a Safe. It uses a GET request to the specified API endpoint, including the Safe address as a path parameter. The request specifies the 'Accept' and 'content-type' headers as 'application/json'.  The response will contain detailed information about the Safe's creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Getting Safe Balances\nDESCRIPTION: This snippet shows how to use `curl` to retrieve balances for a Safe at a specific address. It sends a GET request to the `/api/v2/safes/{address}/balances/` endpoint. The `Accept` and `content-type` headers specify that the client expects a JSON response. The response includes balances for Ether and ERC20 tokens held by the Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Import SupportedNetworks component\nDESCRIPTION: This code snippet imports the `SupportedNetworks` component from a relative path. This component is responsible for rendering the list of supported networks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-supported-networks.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport SupportedNetworks from '../../components/SupportedNetworks'\n```\n\n----------------------------------------\n\nTITLE: Sample Response Structure for Safe Operations API\nDESCRIPTION: Example JSON response from the Safe Operations API showing the data structure returned, including count, pagination details, and operation information with confirmation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction with POST Request (TypeScript)\nDESCRIPTION: This placeholder indicates the presence of a TypeScript code example which wasn't directly included in the provided markdown content. It would typically show how to create a multi-signature transaction using TypeScript, interacting with the API endpoint. In this case, the content links to an external file (../examples/zkevm/-v1-safes-{address}-multisig-transactions--post.ts).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/zkevm/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\n----------------------------------------\n\nTITLE: Retrieve Specific Contract - Sample JSON Response\nDESCRIPTION: Sample JSON response for the Get Specific Contract endpoint provides detailed attributes such as address, name, displayName, logoUri, contractAbi, and delegate call permissions. Useful for understanding the structure of returned contract data and ABI details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Info with API Kit (TypeScript)\nDESCRIPTION: Explains how to initialize the Safe API Kit to interact with the Safe Transaction Service. It shows how to configure the kit with the service URL and provides examples of fetching information about a specific Safe account and retrieving a list of its pending transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/public/llms-ctx-full.txt#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { SafeApiKit, SafeInfoResponse } from '@safe-global/api-kit'\n\nconst safeService = new SafeApiKit({\n  txServiceUrl: 'https://safe-transaction-sepolia.safe.global'\n})\n\n// Get Safe account information\nconst safeInfo: SafeInfoResponse = await safeService.getSafeInfo('0x...')\n\n// Get pending transactions\nconst pendingTxs = await safeService.getPendingTransactions('0x...')\n```\n\n----------------------------------------\n\nTITLE: Executing Safe Transaction with Protocol Kit\nDESCRIPTION: This code snippet demonstrates how to execute a Safe transaction using the Protocol Kit. It initializes the Protocol Kit with the RPC URL, signer (owner's private key), and Safe address. It then executes the transaction using the `executeTransaction` method, which requires the signed Safe transaction as input.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nprotocolKit = await protocolKit.connect({\n  provider: RPC_URL,\n  signer: OWNER_1_PRIVATE_KEY,\n  safeAddress: SAFE_3_4_ADDRESS\n})\n\n// Execute the Safe transaction\nconst transactionResponse = await protocolKit.executeTransaction(safeTransaction)\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Module (cURL)\nDESCRIPTION: This snippet shows a cURL request to retrieve a list of Safes that use a specific module. The request targets the `/api/v1/modules/{address}/safes/` endpoint, where `{address}` is the module address.  It uses GET method and includes headers for content-type and accept.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Creating a Message with addMessage in Safe-Global SDK\nDESCRIPTION: This snippet demonstrates how to invoke the addMessage method, providing a Safe address and configuration object containing message content, signature, and an optional Safe App ID. It shows the asynchronous call structure and expected data types for each parameter, facilitating message onboarding within the Safe ecosystem.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/addmessage.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait apiKit.addMessage(\n  '0x...',\n  {\n    message: '0x...',\n    signature: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Collectibles Request via cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to request a list of collectibles (ERC721 tokens) associated with a given Safe account. It specifies the API endpoint, the HTTP method (GET), and necessary headers to indicate the accepted content type and the content type of the request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/collectibles/ \\ \n    -H \"Accept: application/json\" \\ \n    -H \"content-type: application/json\" \\ \n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Message Details via API Endpoint\nDESCRIPTION: This snippet defines the GET endpoint `/api/v1/messages/{message_hash}/` for fetching detailed info on a message based on its hash. It details the required path parameter, expected response payload with message metadata, confirmations, and signatures, along with the sample JSON response illustrating the structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Multisig Transactions using cURL\nDESCRIPTION: This snippet demonstrates how to use the `curl` command-line tool to query the Safe Transaction Service API for multisig transactions related to a specific Safe address. It performs an HTTP GET request to the `/api/v1/safes/{address}/multisig-transactions/` endpoint, specifying the target Safe address and including necessary headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit in TypeScript\nDESCRIPTION: Shows the necessary setup to create an instance of the Safe Protocol Kit. It imports the `Safe` class from `@safe-global/protocol-kit` and initializes it using `Safe.init`, providing essential configuration like the provider, signer, and the target Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/getsafemessagehash.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving confirmations for a multisig transaction using Safe Transaction API\nDESCRIPTION: This code demonstrates how to retrieve the list of confirmations for a Safe multisig transaction by its hash. The endpoint returns pagination information along with confirmation details including owner addresses, signatures, and signature types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Account Balances via Deprecated REST API in Bash and JSON\nDESCRIPTION: This snippet provides an example of how to list the balances of Ether and ERC20 tokens held by a Safe account using the deprecated `/api/v1/safes/{address}/balances/` GET endpoint. Required parameter 'address' is passed in the path, with optional query parameters to filter tokens (`trusted` boolean) and exclude spam tokens (`exclude_spam` boolean). The cURL command shows how to perform the GET request with correct headers. The expected output is a JSON array containing balance objects for native coins and ERC20 tokens, including token metadata such as name, symbol, decimals, and logo URI. Users should note the endpoint is deprecated and may be replaced by newer alternatives. Validation errors can arise from invalid checksum Safe addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Helm Repository Addition and Installation Command for Safe Stack\nDESCRIPTION: Adds the Safe Helm repository and installs the Safe stack Helm chart with specified parameters using Helm CLI for Kubernetes deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-infrastructure-deployment.mdx#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nhelm repo add safe https://5afe.github.io/safe-helm-charts/charts/packages\nhelm repo update\nhelm install [RELEASE_NAME] safe/safe-stack -f your_values.yaml [-n NAMESPACE]\n```\n\n----------------------------------------\n\nTITLE: Create Safe Operation - cURL Request\nDESCRIPTION: This cURL command sends a POST request to the Safe Transaction Service API to create a new Safe operation. It specifies the Safe account address in the URL, sets the 'Accept' and 'Content-Type' headers, and includes an empty JSON body. The command retrieves the empty response, which indicates a successful creation of the Safe operation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction via cURL (bash)\nDESCRIPTION: Provides a command-line example using `curl` to retrieve details for a specific multisig transaction from the Safe Transaction Service API. It demonstrates making a GET request to the `/api/v1/multisig-transactions/{safe_tx_hash}/` endpoint, specifying the required `Accept` and `content-type` headers. The `safe_tx_hash` is passed as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Safe Balances\nDESCRIPTION: Provides an example JSON response structure from the `/api/v2/safes/{address}/balances/` endpoint. The response is an array containing balance objects for both the native coin (e.g., Sepolia ETH, where `tokenAddress` is null) and ERC20 tokens, including token details (name, symbol, decimals, logo URI) and the balance amount in its smallest unit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Operation Response | json\nDESCRIPTION: This JSON object represents a sample response from the API endpoint when successfully retrieving a Safe Operation by its hash. It illustrates the structure of the `SafeOperationWithUserOperationResponse` object, including fields like creation/modification timestamps, the operation hash, module address, confirmations, prepared signature, and a nested `userOperation` object with its details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Data Decoded Response\nDESCRIPTION: JSON output showing decoded transaction data including method name and parameters with their values, illustrating how the API interprets raw transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Operation Details with curl\nDESCRIPTION: A curl command example for retrieving user operation details by hash. This request is sent to the Safe Transaction service on the Base Sepolia network and requires standard JSON-formatted headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/user-operations/0xe6dac94a3cdbab8d807dfbe79ec378713403ff60cb1a1fff09696813d2705b8e/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Usage of 'to' Parameter - TypeScript\nDESCRIPTION: This code snippet demonstrates usage of the 'to' parameter within the `transactions` array when creating a Safe transaction.  This parameter specifies the recipient address of the transaction.  This snippet focuses on passing the 'to' value and omits the other parameters for brevity. Requires the `createTransaction` method of a configured Safe instance and a valid address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transactions/createtransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createTransaction({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Decoding Data POST Request\nDESCRIPTION: This snippet shows a POST request to the data-decoder endpoint. This API endpoint is used to decode transaction data using ABI information from the Safe Transaction Service. It requires a `0x` prefixed hexadecimal string as input.  The sample shows the use of `curl` to submit the request. Dependencies: `curl`, network connection.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-linea.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Adding a confirmation to a multisig transaction using Safe Transaction API\nDESCRIPTION: This code shows how to add a confirmation signature to an existing Safe multisig transaction by its hash. The endpoint supports adding multiple signatures and returns an empty response upon successful execution.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-avalanche.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates via API Endpoint\nDESCRIPTION: This snippet documents the GET API endpoint at `/api/v2/delegates/` for retrieving a paginated list of all delegate records. It includes request headers, sample cURL command, and a sample JSON response with delegate details such as safe address, delegate address, delegator, label, and expiry date.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Module Transactions\nDESCRIPTION: This JSON snippet shows the structure of a successful API response when querying for module transactions. The response contains fields like count, next, previous, and a results array populated with detailed information on each transaction. All fields such as blockNumber, created, transactionHash, module, and operation are present and match the API specification. This structure is useful for parsing in applications and testing API integrations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Module Transaction via Safe API (Bash/cURL)\nDESCRIPTION: This cURL command demonstrates how to fetch details of a specific module transaction using the Safe Transaction Service API. It sends a GET request to the `/api/v1/module-transaction/{module_transaction_id}` endpoint, requiring the `module_transaction_id` (e.g., `0x3b3b57b3`) as a path parameter and specifying `Accept: application/json`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Information Overview of Protocol Kit\nDESCRIPTION: This section provides a textual overview of the Protocol Kit, detailing its purpose to enable interactions with Safe Smart Accounts via TypeScript. It mentions core functionalities such as creating safes, updating configurations, and executing transactions, along with links to guides and resources. It does not include executable code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit.mdx#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Signing Message (POST) - Curl\nDESCRIPTION: This snippet demonstrates how to sign a message using a POST request. It targets the `/api/v1/messages/{message_hash}/signatures/` endpoint. The request requires a message hash and returns a 201 status code upon successful creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_11\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X POST https://safe-transaction-avalanche.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe Protocol Kit for Transactions (TypeScript)\nDESCRIPTION: This snippet sets up and initializes the Safe Protocol Kit by invoking Safe.init with a network provider, signer, and the Safe contract address. This Protocol Kit instance, protocolKit, is a prerequisite for interacting with Safe transactions, including disabling the fallback handler. Inputs required are provider and signer objects compatible with your environment and the safeAddress string; the output is a ready-to-use protocolKit instance capable of creating and executing Safe transactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/fallback-handler/createdisablefallbackhandlertx.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Safe from '@safe-global/protocol-kit'\n\nexport const protocolKit = Safe.init({\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\n```\n\n----------------------------------------\n\nTITLE: Importing UseSafeInfoReturnType\nDESCRIPTION: Shows how to import the UseSafeInfoReturnType type from the Safe React Hooks library, which represents the return value structure of getSafeInfo.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsafeinfo.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseSafeInfoReturnType } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Getting Message Details with GET - TypeScript\nDESCRIPTION: Retrieves details for a specific message using a GET request to `/api/v1/messages/{message_hash}/`.  The TypeScript implementation is available at `examples/scroll/-v1-messages-{message_hash}--get.ts`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/scroll/-v1-messages-{message_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transactions Analytics by Origin via GET /api/v2/analytics/multisig-transactions/by-origin/\nDESCRIPTION: This snippet describes the API endpoint that provides analytics on multisig transactions filtered by origin. The request has no parameters, and the response indicates no body content. A sample curl command demonstrates how to invoke this endpoint for data retrieval.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Get Module Transaction API Endpoint and Response Schema (JSON)\nDESCRIPTION: Defines the API route to retrieve detailed information about a specific module transaction by its ID. Includes request parameters, success/error response schemas, and an example response with transaction details such as status, hash, and associated data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Safe API Kit Instance in TypeScript\nDESCRIPTION: Creates an instance of the `SafeApiKit` class, which facilitates interaction with the Safe Transaction Service. This service allows Safe owners to propose, retrieve, and confirm transactions off-chain before they are executed on-chain. It requires the `chainId` to connect to the correct service instance for the specific network.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/execute-transactions.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst apiKit = new SafeApiKit({\n  chainId: 11155111n\n})\n```\n\n----------------------------------------\n\nTITLE: Import Reference for Safe Transactions Retrieval in TypeScript\nDESCRIPTION: This snippet is a TypeScript code comment referencing the example file path related to Safe transactions retrieval. It indicates the source or usage example implementation file from which the transactions GET request logic could be derived. There is no executable code here, but it helps locate relevant code samples in the project structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Site Generation for Sepolia API Reference in Next.js\nDESCRIPTION: This code exports the getStaticProps function for Next.js Static Site Generation. It renders MDX content to HTML, extracts headings from the rendered content using the Swagger schema, and returns these headings as props for the page component.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/sepolia.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Safes by Owner - Safe Transaction Service API - curl\nDESCRIPTION: Makes a GET request to the Safe Transaction Service API to retrieve a list of Safe addresses owned by a specific address. The `address` path parameter specifies the owner address. Expects a JSON response containing an array of Safe addresses under the \"safes\" key.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Get Decoded Data - API Request\nDESCRIPTION: This snippet shows how to decode transaction data using a POST request to the `/api/v1/data-decoder/` endpoint.  It uses `curl` to send the request with the `Accept` and `content-type` headers set to `application/json`. The request body (not shown) would contain the encoded transaction data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-optimism.safe.global/api/api/v1/data-decoder/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Sign Message API Request (POST)\nDESCRIPTION: This snippet demonstrates a POST request to sign a message. It takes a message hash as a path parameter and is used to add a signature to a message. The expected input is a message hash, and the output is a 201 Created response. The request uses cURL for demonstration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_11\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Confirming Safe Transaction (JSON)\nDESCRIPTION: This JSON snippet presents an example response received after successfully adding a confirmation to a Safe transaction via the API. It includes the signature field, which contains the signature data that was submitted and recorded for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Owner Address in Safe Solidity\nDESCRIPTION: This code snippet shows a Solidity `require` statement used within the Safe contract's owner management functions. Its purpose is to prevent the Safe contract's own address (`address(this)`) from being added as an owner, mitigating a vulnerability where a Safe could effectively reduce its own transaction threshold by being listed as an owner.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-bug-bounty/past-paid-bounties.md#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nrequire(owner != address(this), \"Safe can't be an owner\")\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract API Request (GET /api/v1/contracts/{address}/)\nDESCRIPTION: Sample cURL command to retrieve details of a specific smart contract by its address. Includes authorization headers and the targeted contract address in the URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/contracts/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: List Contracts API Endpoint\nDESCRIPTION: This snippet describes the API request to retrieve a paginated list of known smart contracts, including optional query parameters for ordering, limit, and offset. Dependencies include the API URL and authentication headers if required. The response provides contract details such as address, name, ABI, and trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Styling the Safe and ERC-7579 application with CSS\nDESCRIPTION: CSS styles for the Safe and ERC-7579 application interface. Includes styling for the main container, cards, buttons, loading states, and code blocks to create a dark-themed UI with Safe's signature green accent color.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-7579/tutorials/7579-tutorial.mdx#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n:root {\n    background-color: #121312; \n    font-family: Citerne, 'DM Sans', sans-serif;\n    font-size: 14px;\n    line-height: 1.4;\n  }\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  color: #fff;\n}\n\nbody {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin: 6rem auto;\n  width: 500px;\n}\n\n.card {\n  background-color: #1c1c1c;\n  border-radius: 6px;\n  margin-bottom: 24px;\n  padding: 24px;\n  text-align: left;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0 0 100px rgba(18, 255, 128, 0.2);\n}\n\n.title {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 35px;\n  font-size: large;\n}\n\n.actions {\n  display: flex;\n  justify-content: flex-end;\n  gap: 16px;\n  margin-top: 50px;\n}\n\nbutton {\n  background-color: #12ff80;\n  border: none;\n  border-radius: 6px;\n  color: rgba(0, 0, 0, 0.87);\n  border: 1px solid #12ff80;\n  cursor: pointer;\n  font-weight: bold;\n  padding: 8px 24px;\n  position: relative;\n}\nbutton.skip {\n  background-color: transparent;\n  border: 1px solid #12ff80;\n  color: #12ff80;\n}\n\n.button--loading {\n  color: transparent;\n  background-color: transparent;\n}\n\n.button--loading::after {\n  content: \"\";\n  position: absolute;\n  width: 16px;\n  height: 16px;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  margin: auto;\n  border: 4px solid transparent;\n  border-top-color: #12ff80;\n  border-radius: 50%;\n  animation: button-loading-spinner 1s ease infinite;\n}\n\n@keyframes button-loading-spinner {\n  from {\n    transform: rotate(0turn);\n  }\n\n  to {\n    transform: rotate(1turn);\n  }\n}\n\npre {\n  border: 1px solid #303033;\n  border-radius: 8px;\n  color: #a1a3a7;\n  margin: 24px 0;\n  padding: 24px;\n  text-align: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Decoded Data API Endpoint\nDESCRIPTION: Defines the API endpoint to decode transaction data given as a hexadecimal string. It returns decoded method and parameters, utilizing the Safe Transaction Service's internal ABI knowledge. Dependencies include request method and URL, with response schemas for success and error cases.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-zkevm.safe.global/api/api/v1/data-decoder/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Transactions - cURL\nDESCRIPTION: This cURL command retrieves all transactions for a specific Safe address from the Safe Transaction Service API. It specifies the `Accept` and `Content-Type` headers to receive a JSON response. The Safe address `0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75` is used as a parameter in the API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mainnet.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/all-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safes by Owner\nDESCRIPTION: This JSON example illustrates the response from the API when retrieving safes owned by a specific address, listing multiple safe addresses in an array under the 'safes' key to demonstrate the data structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\n    \"0xd0540ECBB3010E5f8d780B62Af3aB936fB6C0c75\",\n    \"0x44eBdc9aCE42d6742a3df2813CB437834e6F05B0\",\n    \"0x25D641a9eE275CE94b64bE1227e610b77e776522\",\n    \"0xeFEe5E6394a02eE0ba61731Da014eE8aE8BcDe83\",\n    \"0xCfF743C4445eAd58105a793B34eB02125e830dB0\",\n    \"0x27000f745b020bD386D7712A4ca32AF7a2E3A7Fe\",\n    \"0xb53a6B6f67847cfF94fDb94B90345cB45a2c7301\",\n    \"0x1f01FC62f168099493705bDF7A05b539946832bc\",\n    \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Message with curl\nDESCRIPTION: This snippet demonstrates how to retrieve a message using a curl command. It sends a GET request to the `/api/v1/messages/{message_hash}/` endpoint with specified headers to accept JSON responses. The `message_hash` is a path parameter identifying the message to retrieve.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-base-sepolia.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: List Messages via Curl GET Request\nDESCRIPTION: This curl command demonstrates how to send a GET request to the Safe Transaction Service API to retrieve the list of messages associated with a specific Safe account address. It targets the `/api/v1/safes/{address}/messages/` endpoint. Dependencies include a bash environment and the `curl` tool.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Get Safe Creation Status - cURL Request\nDESCRIPTION: This is a cURL command demonstrating how to make a GET request to retrieve the Safe's creation status. It specifies the request method, URL, and headers, which include `Accept` and `content-type`. The URL contains a placeholder for the Safe's address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_68\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample Get Token Information API Response\nDESCRIPTION: A JSON response containing details for a specific token, including its type, address, name, symbol, number of decimals, logo URI, and trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ERC20\",\n  \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n  \"name\": \"0x5555.com\",\n  \"symbol\": \"0x5555.com\",\n  \"decimals\": 18,\n  \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n  \"trusted\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Get Specific Contract\nDESCRIPTION: JSON example showing detailed information of a specific contract, including address, name, description, ABI, and delegate call trust status, illustrating the data structure returned by the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Command for Fetching SafeOperation Data\nDESCRIPTION: Provides a curl command to perform an HTTP GET request to the specified SafeOperation API endpoint, including headers for Accept and content-type to specify response format, demonstrating how to programmatically retrieve SafeOperation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-xlayer.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\ \n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Creating Delegate API Request (POST)\nDESCRIPTION: This snippet showcases a POST request for creating a new Safe delegate. It uses `curl` to construct a request to the `/api/v2/delegates/` endpoint. The request includes `Accept` and `content-type` headers for JSON format.  The POST method is used to submit data to the API to add a new delegate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Refactored Safe Initialization Using the init() Method\nDESCRIPTION: This code snippet illustrates how to initialize the Safe and SafeFactory classes using the new init() method instead of create(). The change clarifies the purpose of the method, which now only initializes existing objects instead of creating new ones.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v4.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// old\nconst protocolKit = await Safe.create({ ... })\nconst safeFactory = await SafeFactory.create({ ... })\n\n// new\nconst protocolKit = await Safe.init({ ... })\nconst safeFactory = await SafeFactory.init({ ... })\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message Details by Hash\nDESCRIPTION: Fetches detailed information about a message given its hash, including creation/modification times, associated safe address, sender, message content, proposedBy signer, and signature confirmations. Uses GET method with message_hash as URL parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/messages/0x3b3b57b3/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: GET Safe Operation API Endpoint Path and Sample cURL Request\nDESCRIPTION: Defines the API endpoint path for retrieving a specific Safe Operation using its hash, including method type and sample request headers. Followed by an example cURL command demonstrating how to perform the GET request to the endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Add Confirmation - JSON\nDESCRIPTION: Shows a sample JSON response body returned by the POST endpoint for adding a multisig confirmation. A successful request (status code 201) returns a JSON object containing the signature that was successfully added.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProxyCreation Event in SafeProxyFactory (Solidity)\nDESCRIPTION: Defines the `ProxyCreation` event within the `SafeProxyFactory` contract. This event is emitted whenever a new `SafeProxy` contract is successfully created by any of the deployment functions. It logs the address of the newly created proxy (`proxy`, indexed for easier filtering) and the address of the singleton implementation contract (`singleton`) it points to.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/deployment/SafeProxyFactory.mdx#_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nevent ProxyCreation(SafeProxy indexed proxy, address singleton);\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Operations API with curl\nDESCRIPTION: This curl command retrieves a list of Safe operations from the specified Safe address. It uses a GET request to the API endpoint and specifies the `Accept` and `content-type` headers for JSON data. The address is embedded in the URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Multisig Transaction Creation\nDESCRIPTION: This JSON snippet provides a sample response from the API, indicating the estimated gas (`safeTxGas`) required for executing the multisig transaction. It helps clients interpret the API's returned data post-transaction creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Balances - cURL\nDESCRIPTION: This cURL command retrieves the balances of a Safe from the specified API endpoint.  It uses a GET request and specifies the address of the Safe. The command sets the necessary headers for accepting JSON responses and indicating the content type as JSON.  It queries the safe balances.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_65\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v2/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: Calling createChangeThresholdTx (parameter gasPrice)\nDESCRIPTION: This TypeScript snippet shows how to pass the optional `gasPrice` parameter to the `createChangeThresholdTx` function. The function sets the price in wei that the sender is willing to pay for each unit of gas. The method returns a Safe transaction object that will update the threshold in the safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createchangethresholdtx.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createChangeThresholdTx(\n  threshold: 3,\n  {\n    gasPrice: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Transaction via API (curl)\nDESCRIPTION: Demonstrates how to use the Safe Transaction Service API to create a new multisig transaction or update an existing one with a signature. It requires the Safe address in the path and transaction details in the request body. The endpoint is POST /api/v1/safes/{address}/multisig-transactions/.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_36\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/avalanche/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Tracking Safe transactions with on-chain identifier in TypeScript\nDESCRIPTION: Illustrates how to attach the generated on-chain identifier to the `data` or `callData` fields of Safe transactions or user operations, using the SDKs to facilitate transaction tracking.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onchain-tracking.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport Safe, { OnchainAnalyticsProps } from '@safe-global/protocol-kit'\n\nconst onchainAnalytics: OnchainAnalyticsProps = {\n  project: 'YOUR_PROJECT_NAME'\n  platform: 'CURRENT_PLATFORM' // Optional\n}\n\nconst protocolKit = await Safe.init({\n  // ...\n  onchainAnalytics\n})\n\n// Execute the transaction\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Safe4337Pack } from '@safe-global/relay-kit'\nimport { OnchainAnalyticsProps } from '@safe-global/protocol-kit'\n\nconst onchainAnalytics: OnchainAnalyticsProps = {\n  project: 'YOUR_PROJECT_NAME'\n  platform: 'CURRENT_PLATFORM' // Optional\n}\n\nconst safe4337Pack = await Safe4337Pack.init({\n  // ...\n  onchainAnalytics\n})\n\n// Execute the transaction\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests Using Bash\nDESCRIPTION: This bash snippet shows the command to run the Hardhat test suite defined in the TypeScript test file. It assumes Hardhat is installed and properly configured. Running this command executes all tests related to the Safe modules and smart contracts, producing output on pass/fail status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat test\n```\n\n----------------------------------------\n\nTITLE: Refactored Method Call: signTransactionHash to signHash in JavaScript\nDESCRIPTION: This code snippet illustrates the renaming of the method from 'signTransactionHash' to 'signHash' within the protocol-kit to better reflect its purpose of signing a hash, regardless of transaction context. It shows the old and new method usage for developers updating their codebases.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// old:\nprotocolKit.signTransactionHash(safeTxHash)\n\n// new:\nprotocolKit.signHash(safeTxHash)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Data Decoding\nDESCRIPTION: This JSON shows the decoded transaction data including the method name and parameters with their respective types and values. This aids in interpreting raw transaction data into human-readable form.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Global Styles in globals.css - CSS\nDESCRIPTION: This snippet refers to a CSS file providing application-wide style overrides and customizations in the Safe passkeys app. It ensures Safe branding and responsive design. The file should be placed in the app folder and imported globally. CSS knowledge required for advanced theming.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n// from ../../../../examples/passkeys/app/globals.css\n```\n\n----------------------------------------\n\nTITLE: Signing a Safe Transaction Hash with Protocol Kit\nDESCRIPTION: This snippet illustrates how to sign a given Safe transaction hash by passing it as a string argument to the signHash method of the protocol kit. The method returns a Promise resolving to a SafeSignature object containing the signature. It is essential to have a valid signer connected and a transaction hash string as input.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/transaction-signatures/signhash.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst signature = await protocolKit.signHash(\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Create Multisig Transaction - TypeScript Example\nDESCRIPTION: This TypeScript code snippet provides an example of how to create a multi-signature transaction. It's likely part of a larger program that interacts with the Safe API to build and sign transactions. This snippet does not contain any actual code and only hints at a source file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\n----------------------------------------\n\nTITLE: Sample JSON response for Data Decoder\nDESCRIPTION: This JSON output shows the decoded method name and parameters extracted from the transaction data, illustrating how the API interprets method calls and their arguments for further analysis.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript import statement for transaction examples\nDESCRIPTION: A placeholder import statement indicating inclusion of transaction example scripts from specified path, intended for TypeScript-based transaction handling or testing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/arbitrum/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Implementing getStaticProps for Server-Side Generation of Avalanche API Documentation\nDESCRIPTION: Defines the getStaticProps function that renders the Avalanche MDX content to HTML, extracts headings from the rendered content using the swagger schema, and returns these headings as static props for the page.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/avalanche.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Operation API Request (cURL)\nDESCRIPTION: This cURL command sends a POST request to the `/api/v1/safes/{address}/safe-operations/` endpoint to create a new safe operation. The request includes headers specifying the content type and accepted format. The data sent in the body is currently empty.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-xlayer.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Response: Create Signed Message\nDESCRIPTION: Example of an empty response body returned upon successfully creating a new message (HTTP Status 201 Created).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Supported Token Lists using cURL (Bash)\nDESCRIPTION: Demonstrates how to use cURL to send a GET request to the `/api/v1/tokens/lists/` endpoint to retrieve a paginated list of supported tokens from the Safe Transaction Service. The request specifies JSON as the accepted response format using the `Accept` header.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sample Empty Response for Transaction Deletion (JSON)\nDESCRIPTION: Shows the expected empty response body upon successful deletion of a queued multisig transaction via the API. A successful deletion returns an HTTP 204 No Content status code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Global API Kit Using pnpm in Bash\nDESCRIPTION: Installs the @safe-global/api-kit package into a project using the pnpm package manager. This command adds the API Kit dependency to the project's package configuration, enabling use of the Safe Transaction Service API functionalities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/overview.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/api-kit\n```\n\n----------------------------------------\n\nTITLE: Defining EIP712 Structure for Delegate Signature (Python)\nDESCRIPTION: Defines the EIP712 typed data structure required for signing operations when creating or deleting Safe delegates. This structure includes the EIP712 domain (name, version, chainId) and the message payload containing the delegate address and a Time-based One-Time Password (TOTP). The TOTP is calculated based on the Unix epoch time.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n        ],\n        \"Delegate\": [\n            {\"name\": \"delegateAddress\", \"type\": \"address\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"Delegate\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n    },\n    \"message\": {\n        \"delegateAddress\": delegate_address,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up passkeys.ts Utility Functions - TypeScript\nDESCRIPTION: This snippet points to a file containing the main logic for device passkey creation, storage, and retrieval. The file defines functions for registering passkeys, handling serialization to local storage, and recovering them for authentication or transaction signing. Dependencies may include browser APIs for credential management. Ensure browser support for passkeys and proper local storage use.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../../../../examples/passkeys/lib/passkeys.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Delegates\nDESCRIPTION: Provides a sample JSON response from the list delegates API call, showing the total count, pagination links, and an array of delegate objects. Each object includes safe address, delegate address, delegator, label, and expiry date.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\",\n      \"expiryDate\": \"\" \n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for SVG Imports in next.config.mjs - JavaScript/Module\nDESCRIPTION: This snippet refers to customizing the Next.js configuration to handle SVG imports using @svgr/webpack, allowing SVG assets to be consumed as React components throughout the app. Place this file at the root of the project. Dependencies: Node.js, Next.js, @svgr/webpack. This is necessary for icon assets used in various UI elements.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_14\n\nLANGUAGE: mjs\nCODE:\n```\n// from ../../../../examples/passkeys/next.config.mjs\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Transaction to Remove Passkey Owner with Minimal Parameters (TypeScript)\nDESCRIPTION: Shows the minimal required parameters for removing an owner associated with a passkey using `createRemoveOwnerTx`, providing only the `passkey` object. This creates a transaction to remove the passkey owner without changing the Safe's threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx({\n  passkey // The passkey associated with the owner to remove\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting a Safe Delegate with Transaction Service API (cURL)\nDESCRIPTION: This cURL command demonstrates how to permanently remove a delegate/delegator pair from the Safe Transaction Service API by sending a DELETE request to the endpoint for a specific delegate address. The request includes required headers and an empty JSON payload. The signature in the body is required and must be generated as described in the documentation. Outputs HTTP 204 response and no content if successful, or error codes if validation fails.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-chiado.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for List Transfers API - JSON\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the list safes transfers endpoint. The response includes total result count, navigation links (next, previous), and an array of transfer objects containing all relevant information such as type, execution date, value, involved addresses, and token metadata if available. The tokenInfo key can be null for ether transfers; for token transfers, it would provide details like name and symbol.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Delegate API Example (TypeScript)\nDESCRIPTION: This snippet references a TypeScript file to provide the code details for the delegate creation API. It indicates that the code for the POST request to create a delegate is located in an external TypeScript file. The example serves to illustrate the structure and expected functionality.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v2-delegates--post.ts\n```\n\n----------------------------------------\n\nTITLE: Enabling use of Ledger hardware wallet\nDESCRIPTION: Configures the CLI to sign transactions with a Ledger device via ledgereth, supporting legacy accounts and specifying derivation paths. Requires prior setup of rules on Linux systems.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npip install \"safe-cli[ledger]\"\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Module - TypeScript\nDESCRIPTION: This TypeScript snippet likely defines the structure or calls the API endpoint to retrieve the list of Safes that use a specific module.  It's part of a larger system that interacts with Safe transaction service APIs. It depends on the `safe-transaction-polygon.safe.global` API and requires the module's address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v1-modules-{address}-safes--get.ts\n```\n\n----------------------------------------\n\nTITLE: Setting up Safe Provider with Configuration in React Application\nDESCRIPTION: Example of how to initialize the Safe Provider with the necessary configuration to use Safe React Hooks in a React application. It shows how to create the configuration object with chain, provider, signer, and Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/remove.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport ReactDOM from 'react-dom/client'\nimport { createConfig, SafeProvider } from '@safe-global/safe-react-hooks'\nimport { sepolia } from 'viem/chains'\nimport App from './App.tsx  '\n\nconst config = createConfig({\n  chain: sepolia,\n  provider,\n  signer,\n  safeAddress: '0x...'\n})\n\nconst root = document.getElementById('root')\n\nReactDOM.createRoot(root).render(\n  <SafeProvider config={config}>\n    <App />\n  </SafeProvider>\n)\n```\n\n----------------------------------------\n\nTITLE: Defining ApproveHash Event in Solidity\nDESCRIPTION: This Solidity code defines the `ApproveHash` event. This event is emitted when an owner approves a specific hash. The event takes two parameters: `approvedHash`, which is the hash that was approved, and `owner`, which is the address of the owner who approved the hash. There are no external dependencies for this snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/ApproveHash.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent ApproveHash(bytes32 approvedHash, address owner);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token List - cURL\nDESCRIPTION: This cURL command retrieves the list of supported tokens from the Safe Transaction Service. It uses a GET request to the /api/v1/tokens/lists/ endpoint and specifies the Accept and content-type headers. The expected output is a JSON response containing token list information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Querying Multisig Transaction Analytics - Safe Transaction Service API - Bash\nDESCRIPTION: This snippet shows how to make a `GET` request to an analytics endpoint using `curl`. It targets the `/api/v2/analytics/multisig-transactions/by-origin/` path on the Arbitrum Safe Transaction Service instance. Standard `Accept` and `Content-Type` headers are included.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_71\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Reference External TypeScript Example for Signing Message\nDESCRIPTION: This comment references an external TypeScript example file located at `../examples/chiado/-v1-messages-{message_hash}-signatures--post.ts`. The file demonstrates how to interact with the Safe Transaction Service API endpoint for adding a signature to a message (POST `/api/v1/messages/{message_hash}/signatures/`). This snippet itself does not contain the implementation code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-messages-{message_hash}-signatures--post.ts\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Module Transaction via API (Bash/cURL)\nDESCRIPTION: Demonstrates how to use cURL to make a GET request to retrieve details of a specific module transaction from the Safe Transaction Service API. The request requires the `module_transaction_id` as a path parameter and expects a JSON response containing the transaction details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Creation Status with curl\nDESCRIPTION: Retrieves detailed information on the Safe creation transaction of a given Safe using a curl request.  The Safe address is specified in the path. The response is a JSON object containing the creation details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: List Messages - Safe Transaction Service API - bash curl\nDESCRIPTION: Provides a `curl` command to retrieve a list of messages associated with a specific Safe account. It uses the GET method on the `/api/v1/safes/{address}/messages/` endpoint, requiring the Safe address as a path parameter and including standard HTTP headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_16\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Get Decoded Data Sample Response\nDESCRIPTION: Provides a sample JSON response indicating the decoded method name and parameters, including parameter names, types, and their respective values, derived from transaction data input.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"transfer\",\n  \"parameters\": [\n    {\n      \"name\": \"to\",\n      \"type\": \"address\",\n      \"value\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    },\n    {\n      \"name\": \"value\",\n      \"type\": \"uint256\",\n      \"value\": \"10000000000000000000\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Module (bash)\nDESCRIPTION: This `curl` command demonstrates how to query the Safe Transaction Service API to list Safes associated with a specific module address. It performs a GET request to the `/api/v1/modules/{address}/safes/` endpoint, replacing `{address}` with the desired module address, and includes necessary Accept and Content-Type headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction using curl (bash)\nDESCRIPTION: Shows how to retrieve a specific multisig transaction using the Safe Transaction Service API via a curl command. It requires the Safe transaction hash in the path and sets standard HTTP headers for accepting JSON.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n     \n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Example for All Transactions Endpoint\nDESCRIPTION: TypeScript code snippet indicating the source file (`../examples/linea/-v1-safes-{address}-all-transactions--get.ts`) for an example demonstrating how to call the 'Get All Transactions' API endpoint. This external file likely contains client-side logic using TypeScript for making the API request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/linea/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Multisig Transaction via API Endpoint in TypeScript\nDESCRIPTION: This snippet outlines the TypeScript code comment indicating the source file responsible for creating a multisig transaction. It indicates usage of the corresponding API endpoint to handle transaction creation requests, including parameters, response schema, and possible error responses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/linea/-v1-safes-{address}-multisig-transactions--post.ts\n```\n\n----------------------------------------\n\nTITLE: Adding storage.ts code\nDESCRIPTION: This snippet includes code from an external file (`storage.ts`) that likely implements the logic for storing and retrieving passkeys within the React Native application. It will probably use the React Native Async Storage or Web Storage based on platform.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// from ../../../../examples/react-native-passkeys/lib/storage.ts\n```\n\n----------------------------------------\n\nTITLE: Get Specific Contract Sample Response\nDESCRIPTION: Shows a sample JSON response containing detailed properties of a specific contract, including address, name, ABI, displayName, logoUri, and delegate call trust status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n  \"name\": \"Seaport\",\n  \"displayName\": \"\",\n  \"logoUri\": null,\n  \"contractAbi\": {\n    \"abi\": [],\n    \"description\": \"Seaport\",\n    \"relevance\": 100\n  },\n  \"trustedForDelegateCall\": false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Delegate via DELETE /api/v2/delegates/{delegate_address}/\nDESCRIPTION: Removes all delegate/delegator pairs associated with a specific delegate address. The request involves a DELETE method with delegate address in the URL, requiring proper signature for authorization.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-zksync.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Confirming a Multisig Transaction\nDESCRIPTION: Shows an example JSON response after successfully adding a confirmation to a Safe multisig transaction via a POST request. The response body contains the signature that was submitted and successfully recorded.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Messages for a Safe Account with curl\nDESCRIPTION: Makes a GET request to retrieve all messages for a specific Safe account. Returns a paginated list with message details including hashes, signatures, and confirmation status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zkevm.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving All Transactions for a Safe in TypeScript\nDESCRIPTION: Example code demonstrating how to fetch all transactions for a specific Safe address using a GET request to the Safe Transaction Service API. This endpoint returns a list of all transactions associated with the specified Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/avalanche/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Fetch Safe Status - Transaction Service API - cURL/Bash\nDESCRIPTION: Demonstrates how to use the `curl` command-line tool to send a GET request to the Safe Transaction Service API's `/api/v1/safes/{address}/` endpoint. This fetches detailed information about a specified Safe account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_65\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\n     \n```\n\n----------------------------------------\n\nTITLE: List Multisig Transaction Confirmations via API (Bash/cURL)\nDESCRIPTION: Provides a cURL example for making a GET request to the `/api/v1/multisig-transactions/{safe_tx_hash}/confirmations/` endpoint. This retrieves the list of confirmations (signatures) for a specific multisig transaction identified by `safe_tx_hash`. Optional query parameters `limit` and `offset` can be used for pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-polygon.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: ApiReference React Component instantiation for Optimism network\nDESCRIPTION: This JSX snippet renders an ApiReference component configured for the 'optimism' network. It likely displays API documentation related to the Optimism Layer 2 scaling solution, depending on internal implementation and styling. No dependencies or parameters are specified beyond the networkName prop.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/optimism.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference networkName=\"optimism\"/>\n```\n\n----------------------------------------\n\nTITLE: Styling Horizontal Rule Component in React/JSX\nDESCRIPTION: This snippet shows how to apply inline CSS styles to a React component, specifically setting top and bottom margins for a Horizontal Rule (`Hr`) element using a JavaScript object within the `style` prop.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_58\n\nLANGUAGE: jsx\nCODE:\n```\n<Hr style={{ \n  marginTop: '112px',\n  marginBottom: '112px'\n}} />\n```\n\n----------------------------------------\n\nTITLE: Querying Token Lists with curl (Bash)\nDESCRIPTION: Demonstrates how to make a GET request to the `/api/v1/tokens/lists/` endpoint using `curl`. This endpoint returns a paginated list of supported token lists. The command includes necessary headers for content negotiation. Dependencies: `curl`. Expected output: JSON data representing a paginated list of token lists.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/tokens/lists/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Delegate - cURL\nDESCRIPTION: This snippet shows how to remove a delegate by sending a DELETE request to the /api/v2/delegates/{delegate_address}/ endpoint.  The request includes an empty payload. It also includes the Accept and content-type as application/json. The delegate_address is a path parameter. \nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-celo.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt Development Server – Bash\nDESCRIPTION: This command launches the local Nuxt development server using pnpm. The server will run at http://localhost:3000, allowing you to interactively test your application. Requires prior configuration of nuxt.config.ts and presence of a package.json.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/nuxt.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Sample TypeScript API Request for Safe Multisig Transactions\nDESCRIPTION: Shows a reference to a TypeScript example used to fetch multisignature transactions for a specific Safe address. The snippet is from an external file and implies usage of typed API request handling in TypeScript. No additional code is present beyond the import comment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get Multisig Transaction API\nDESCRIPTION: This JSON object illustrates a sample successful response (HTTP 200) from the Get Multisig Transaction API endpoint. It contains comprehensive details about the transaction, including the Safe address, destination (`to`), value, data, operation, gas parameters, nonce, execution status (false in this example), timestamps, proposer, required confirmations, and received confirmations with signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Multisig Transaction Response - JSON\nDESCRIPTION: This JSON snippet shows a sample response for a multisig transaction from the Safe Transaction Service API. The information includes the Safe address, destination address (`to`), value transferred, transaction data, gas details, confirmation status, and associated signatures.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"value\": \"50000000000000\",\n  \"data\": null,\n  \"operation\": 0,\n  \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n  \"safeTxGas\": 0,\n  \"baseGas\": 0,\n  \"gasPrice\": \"0\",\n  \"refundReceiver\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"nonce\": 0,\n  \"executionDate\": null,\n  \"submissionDate\": \"2024-06-26T14:57:15.429517Z\",\n  \"modified\": \"2024-06-28T14:18:04.121072Z\",\n  \"blockNumber\": null,\n  \"transactionHash\": null,\n  \"safeTxHash\": \"0x897cab0528ffa8cbe10ee533e636d1a42b9e8d42f8dccb9af9006804d02d2027\",\n  \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"executor\": null,\n  \"isExecuted\": false,\n  \"isSuccessful\": null,\n  \"ethGasPrice\": null,\n  \"maxFeePerGas\": null,\n  \"maxPriorityFeePerGas\": null,\n  \"gasUsed\": null,\n  \"fee\": null,\n  \"origin\": \"{}\",\n  \"dataDecoded\": null,\n  \"confirmationsRequired\": 2,\n  \"confirmations\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    },\n    {\n      \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"submissionDate\": \"2024-06-28T14:18:04.121072Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"trusted\": true,\n  \"signatures\": null\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Queued Multisig Transaction via API – Bash\nDESCRIPTION: Shows how to send a DELETE request to the Safe Transaction Service API to remove a queued but not executed multisig transaction. Requires the transaction hash to be specified in the endpoint URL. Accept and content-type headers should be set to application/json, and an empty JSON object is provided in the request body. Only the proposer or their valid delegate may perform this action. Ensure the EIP-712 deletion request described above is properly signed before using this endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-mantle.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Setting safeTxGas Option for Remove Owner Transaction (TypeScript)\nDESCRIPTION: Shows how to include the optional `options` object when calling `createRemoveOwnerTx` to specify the `safeTxGas` value for the transaction. This parameter controls the gas limit for the execution of the Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createremoveownertx.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createRemoveOwnerTx(\n  {\n    ownerAddress: '0x...'\n  },\n  {\n    safeTxGas: '123' // Optional: Gas for Safe transaction execution\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Creation Status with curl\nDESCRIPTION: This curl command demonstrates how to request detailed information about a Safe's creation transaction using the Safe Transaction Service API. It requires the Safe address as a path parameter and returns creation details including creator address, transaction hash, and decoded setup data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/creation/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Adding Signatures: Python\nDESCRIPTION: This snippet signs the retrieved transaction with Owner B's private key and then posts the signature to the Transaction Service API. It requires the Owner B's private key and the safe_tx_from_tx_service object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Sign the transaction with Owner B\nowner_b_signature = safe_tx_from_tx_service.sign(\n    config.get(\"OWNER_B_PRIVATE_KEY\"))\n\n# Send the transaction to the Transaction Service with the signature from Owner B\ntransaction_service_api.post_signatures(\n    safe_tx_from_tx_service.safe_tx_hash,\n    owner_b_signature)\n```\n\n----------------------------------------\n\nTITLE: Referencing Owner Safes Example File (TypeScript)\nDESCRIPTION: This snippet is a comment referencing the location of a TypeScript example file that demonstrates how to use the API to list Safes by owner address. It indicates where a full code example can be found, rather than providing executable code itself.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zkevm/-v1-owners-{address}-safes--get.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Safe API\nDESCRIPTION: This snippet shows how to install the necessary dependencies for interacting with the Safe API using either TypeScript or Python. For TypeScript, it installs the @safe-global/api-kit package using yarn.  For Python, it uses pip to install the safe-eth-py and web3 packages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/data-decoder.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install safe-eth-py web3\n```\n\n----------------------------------------\n\nTITLE: Sample Empty Response for Adding Confirmation - JSON\nDESCRIPTION: The POST endpoint to add a confirmation responds with an empty body upon successful execution, typically accompanied by a 201 Created HTTP status. This minimal response indicates the confirmation has been recorded without returning additional data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Signing a Message with Preimage Safe Address in TypeScript\nDESCRIPTION: Demonstrates calling signMessage with message, signing method, and preimage safe address parameters, as needed for older Safe smart account versions. Ensures compatibility with EIP-1271 interface differences and returns a Promise of SafeMessage.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/messages/signmessage.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst signedMessage = await protocolKit.signMessage(\n  '0x...',\n  SigningMethod.ETH_SIGN_TYPED_DATA_V4,\n  '0x...'\n)\n```\n\n----------------------------------------\n\nTITLE: Example Code Reference - TypeScript\nDESCRIPTION: These snippets show references to TypeScript files which contain the example code that the cURL examples use. The files are located in a sibling folder to the documentation files and provide a reference that allows one to associate the documented requests with the code that generates them.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/celo/-v2-delegates--get.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/celo/-v2-delegates--post.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/celo/-v2-delegates-{delegate_address}--delete.ts\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/celo/-v1-messages-{message_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing Signer and RPC URL in TypeScript\nDESCRIPTION: Defines constants for signer credentials and RPC URL to connect to the Sepolia network. Signer private key and address are placeholders for deployment purposes, enabling wallet signing capabilities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/react-hooks/guides/send-transactions.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst SIGNER_ADDRESS = // ...\nconst SIGNER_PRIVATE_KEY = // ...\n\nconst RPC_URL = 'https://rpc.ankr.com/eth_sepolia'\n\n```\n\n----------------------------------------\n\nTITLE: Running Safe CLI Docker Container for Existing Safe (bash)\nDESCRIPTION: This command executes the `safeglobal/safe-cli` Docker image in interactive mode (`-it`) and runs the main `safe-cli` tool within the container, connecting to a specified Safe address and Ethereum node URL. Requires Docker installed and placeholder values for Safe address and node URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it safeglobal/safe-cli safe-cli <checksummed_safe_address> <ethereum_node_url>\n```\n\n----------------------------------------\n\nTITLE: Receiving Safe Module Transaction List Response (JSON)\nDESCRIPTION: This JSON snippet exemplifies the expected response structure for a GET request to the Safe module transactions endpoint. The response includes the total count, pagination controls (next, previous), and a results array of transaction objects. Each transaction object provides details such as creation and execution times, blockchain-specific fields (blockNumber, transactionHash), addresses (safe, module, to), amount (value), operation type, and unique identifiers. Outputs consist of key-value pairs strictly matching the schema as specified—responses may vary in size depending on filters or pagination.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transaction with Curl in Bash\nDESCRIPTION: Command to retrieve a multisig transaction using the Safe Transaction Service API. The request requires the safe transaction hash as a path parameter and returns detailed information about the multisig transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Initializing SafeClient for an Existing Safe (TypeScript)\nDESCRIPTION: Creates a `SafeClient` instance connected to an existing Safe account. It uses `createSafeClient` with the RPC provider URL, signer private key, and the `safeAddress` of the pre-existing Safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeClient = await createSafeClient({\n  provider: RPC_URL,\n  signer: SIGNER_PRIVATE_KEY,\n  safeAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Module Transaction Response - JSON\nDESCRIPTION: This JSON snippet represents a sample response from the Safe Transaction Service API when retrieving a module transaction. It includes details such as the creation date, execution date, block number, success status, transaction hash, involved Safe and module addresses, value transferred, and decoded data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction by Safe Transaction Hash using cURL in Bash\nDESCRIPTION: A cURL request to retrieve a multisig transaction by its Safe transaction hash from the Safe Transaction Service API. The request includes headers for JSON content type and acceptance.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Get User Operation with TypeScript\nDESCRIPTION: This TypeScript snippet (referenced from ../examples/xlayer/-v1-user-operations-{user_operation_hash}--get.ts) demonstrates how to retrieve a user operation by its hash using a GET request to the transaction service API.  It is expected to be part of a larger application interacting with the Safe transaction service.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_67\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/xlayer/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring paymasterOptions.isSponsored for safeOperations (TypeScript)\nDESCRIPTION: Highlights the optional `isSponsored` boolean parameter within the `paymasterOptions` object for the `safeOperations` function. It indicates whether the user operation should be sponsored by the paymaster.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsafeOperations(\n  { bundlerUrl: 'https://...' },\n  {\n    isSponsored: true,\n    paymasterUrl: 'https://...',\n    sponsorshipPolicyId: 'abc',\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    amountToApprove: 123n\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates via GET /api/v2/delegates/\nDESCRIPTION: Fetches a paginated list of all delegates with optional filtering parameters. Demonstrates request structure, sample cURL command, and sample JSON response containing delegate details.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v2/delegates/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Adding a confirmation to a transaction using POST request\nDESCRIPTION: This snippet describes the API call required to add a new confirmation (signature) to a specific multisig transaction. The request must include the transaction hash in the URL path and a JSON payload (here an empty object) representing the confirmation data. It supports multiple response codes indicating success or errors such as malformed data or processing failure. Dependencies include the API endpoint URL, method type, headers, and JSON body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-scroll.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Querying Safes by Owner - curl Example\nDESCRIPTION: A curl command to retrieve all Safe accounts owned by a specific address. The request is made to the Linea network Safe Transaction Service and requires an owner address parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-linea.safe.global/api/api/v1/owners/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Specifying config.delegatorAddress in removeSafeDelegate (Typescript)\nDESCRIPTION: Illustrates how to provide the `delegatorAddress` parameter within the configuration object for the `removeSafeDelegate` function call. This string specifies the address of the delegator.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/removesafedelegate.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.removeSafeDelegate({\n  delegateAddress: '0x...', \n  delegatorAddress: '0x...', // The delegator address.\n  signer\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Messages (GET) - Curl\nDESCRIPTION: This snippet demonstrates how to list messages associated with a Safe account using a GET request. It targets the `/api/v1/safes/{address}/messages/` endpoint. It uses the Safe address in the path parameter. The request returns a paginated list of messages.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_12\n\nLANGUAGE: bash curl\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Example JSON Response of a Module Transaction from Safe Transaction API\nDESCRIPTION: Example JSON response illustrating the data structure returned by the Safe Transaction API when fetching a module transaction. It includes key fields such as created date, execution date, block number, success indicator, transaction hash, safe and module addresses, destination address, value transferred, call data, operation type, decoded data, and the unique moduleTransactionId. This response validates how detailed transaction metadata is serialized for clients consuming the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Estimating Multisig Transaction Gas (JSON)\nDESCRIPTION: Example JSON response body returned by the gas estimation endpoint. It contains the estimated `safeTxGas`, which is the gas required to execute the transaction within the Safe contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling createChangeThresholdTx (parameter nonce)\nDESCRIPTION: This TypeScript snippet shows how to pass the optional `nonce` parameter to the `createChangeThresholdTx` function. The function sets the transaction nonce. The method returns a Safe transaction object that will update the threshold in the safe.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-info/createchangethresholdtx.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createChangeThresholdTx(\n  threshold: 3,\n  {\n    nonce: 123\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Create Delegate\nDESCRIPTION: Indicates an empty response upon successful creation of a delegate, signifying no content returned but successful processing. The endpoint expects a properly signed payload based on the provided EIP712 structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Balances with curl (Deprecated)\nDESCRIPTION: Example of retrieving Ether and ERC20 token balances for a Safe account using curl. This calls the deprecated balances endpoint on the transaction service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Configure Dependencies - JSON\nDESCRIPTION: This JSON snippet is added to the `package.json` file. It configures overrides to use a specific version of ethers for `@safe-global/safe-contracts`. This ensures compatibility and avoids potential version conflicts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ... existing content ...\n  \"overrides\": {\n    \"@safe-global/safe-contracts\": {\n      \"ethers\": \"^6.13.5\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Gas Price when Creating Enable Module Tx using Protocol Kit (TypeScript)\nDESCRIPTION: Illustrates setting the `gasPrice` option. This parameter determines the fee the sender is willing to pay per unit of gas consumed by the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createenablemoduletx.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableModuleTx(\n  '0x...',\n  options: {\n    gasPrice: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring SafeReceived Event - Solidity\nDESCRIPTION: This Solidity code defines the `SafeReceived` event. This event is emitted when a Safe contract receives a payment.  It tracks the sender's address and the value of the payment. There are no dependencies and it uses the `address` and `uint256` data types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/SafeReceived.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent SafeReceived(address sender, uint256 value)\n```\n\n----------------------------------------\n\nTITLE: Using safeOperations Extension with SafeClient in TypeScript\nDESCRIPTION: Demonstrates how to configure and apply the `safeOperations` extension to an existing `SafeClient` instance. It defines configuration objects for bundler and optional paymaster settings before extending the client.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PaymasterOptions } from '@safe-global/relay-kit'\nimport { BundlerOptions, safeOperations } from '@safe-global/sdk-starter-kit'\nimport { safeClient } from './setup.ts'\n\nconst bundlerOptions: BundlerOptions = {\n  bundlerUrl: 'https://...'\n}\n\nconst paymasterOptions: PaymasterOptions = {\n  isSponsored: true, // Optional\n  paymasterUrl: 'https://...', // Optional\n  sponsorshipPolicyId: 'abc', // Optional\n  paymasterAddress: '0x...', // Optional\n  paymasterTokenAddress: '0x...', // Optional\n  amountToApprove: 123n // Optional\n}\n\nconst safeOperationsClient = await safeClient.extend(\n  safeOperations(bundlerOptions, paymasterOptions)\n)\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from the All Transactions Endpoint\nDESCRIPTION: A sample JSON response from the Safe Transaction Service API showing transaction details including execution date, confirmations, signatures, transfer information, and transaction status for a multisignature transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript import comment for multisig transactions example\nDESCRIPTION: This snippet indicates the source of the example code, referencing a TypeScript example script for fetching multisig transactions on the mainnet network. It helps developers locate the full implementation and understand dependencies.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/mainnet/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Example\nDESCRIPTION: This snippet indicates the location of a TypeScript example code file, likely used for demonstration purposes.  It is not a direct code implementation but rather a reference to a file containing example usages of the documented APIs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/mainnet/-v1-tokens--get.ts\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference React Component for Mainnet\nDESCRIPTION: This React component displays API reference information for the 'mainnet' network environment by passing the network name as a prop. It is used within the page to present API documentation details derived from imported schemas and components.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/mainnet.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference networkName=\"mainnet\"/>\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safes Associated with a Module\nDESCRIPTION: This JSON snippet provides an example response from the API endpoint, showing the list of safe addresses that use the specified module. The response includes an array under the 'safes' key.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Get Safe Status Example in TypeScript\nDESCRIPTION: This comment indicates the location of an external TypeScript example file that demonstrates how to interact with the 'Get Safe Status' API endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/avalanche/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Contract List API (JSON)\nDESCRIPTION: This is a sample JSON response from the contract list endpoint. It includes the total number of contracts, navigation links for pagination, and an array of contract objects each containing the address, name, ABI information, and delegation status. The ABI array may be empty if not available, and the logo URI may be null.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create Signed Message (POST) - TypeScript\nDESCRIPTION: This placeholder represents the corresponding TypeScript code for creating a signed message. It is referenced from the path `/../examples/avalanche/-v1-safes-{address}-messages--post.ts`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_16\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/avalanche/-v1-safes-{address}-messages--post.ts\n```\n\n----------------------------------------\n\nTITLE: Remove proposed transaction\nDESCRIPTION: Removes a proposed, non-executed transaction, provided the owner who proposed the transaction also signs the removal request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nremove_proposed_transaction <safe_tx_hsh>\n```\n\n----------------------------------------\n\nTITLE: Querying User Operations for a Safe Account using cURL in Bash\nDESCRIPTION: A cURL command that retrieves user operations for a specific Safe account address from the Avalanche network. The request accepts and expects JSON content and doesn't include any authentication or additional parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-avalanche.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/user-operations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Token Transfers List (JSON)\nDESCRIPTION: This snippet provides a sample JSON response for the /api/v1/safes/{address}/transfers/ endpoint. It includes properties such as count, next, previous, and an array 'results' listing individual transfer details. Each transfer entry contains attributes like type, executionDate, blockNumber, transactionHash, to, value, transferId, tokenInfo, and from. This schema is returned for HTTP 200 and can be used for integration or testing. Note null values in token-related fields for non-token transfers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Transaction Service Response - JSON\nDESCRIPTION: This snippet is an example JSON response from the Safe Transaction Service API for a multisig transactions query, representing a paginated list with transaction details. The response includes an array of results where each item details the multisig transaction, such as Safe and destination addresses, value, execution metadata, gas information, confirmation signatures and ordering, and trust flag. The structure is useful for frontend or backend consumers to process, display, or further analyze transaction data; actual data will depend on the parameters specified.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\"\n    }\n  ],\n  \"countUniqueNonce\": 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: List Transaction Confirmations Response - Safe Transaction Service API - JSON\nDESCRIPTION: A sample JSON response demonstrating the structure returned by the API when listing confirmations for a Safe transaction. The response includes pagination metadata (`count`, `next`, `previous`) and an array (`results`) of confirmation objects, each detailing the owner, submission date, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running Node Express Server for Passkeys Testing using Bash\nDESCRIPTION: This bash snippet provides commands to clone the 'aasa-server' repository, install its dependencies via npm, and start the Node Express server which hosts the files needed for passkey registration testing on Android and iOS emulators. Running this server is necessary for the app to use passkeys properly and requires network connectivity. The server serves files like 'apple-app-site-association' and 'assetlinks.json' for emulator configuration. The expected output is a running local web server accessible on port 3000.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/5afe/aasa-server.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd aasa-server\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'safeTxGas' parameter in Solidity\nDESCRIPTION: Demonstrates usage of the getTransactionHash function focusing on the 'safeTxGas' parameter which defines the gas that should be used for the Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Listing Multisig Confirmations (JSON)\nDESCRIPTION: Represents the JSON response to a GET request for multisig transaction confirmations. Contains 'count', 'next', 'previous', and a 'results' array of confirmation entries with owner address, submission date, optional transaction hash, hexadecimal ECDSA signature, and signature type. No dependencies beyond API access. Output may be paginated using 'next' and 'previous' URLs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using gasPrice option in createEnableGuardTx in TypeScript\nDESCRIPTION: This snippet shows how to use the `gasPrice` option when calling `createEnableGuardTx`.  `gasPrice` is a string representing the price in wei that the sender is willing to pay for each unit of gas. It is part of an `options` object passed to the `createEnableGuardTx` function.  This code assumes that the `protocolKit` is initialized and that the `options` object is properly structured. The `options` parameter is optional, and other optional parameters are available to configure the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-guards/createenableguardtx.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createEnableGuardTx(\n  '0x...',\n  options: {\n    gasPrice: '123'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Reference: Get Specific Token Example - TypeScript\nDESCRIPTION: This snippet is a comment indicating the location of an external TypeScript code example. The example demonstrates how to retrieve detailed information for a specific token by its address using the Safe Transaction Service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/scroll/-v1-tokens-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Message for Safe Account with Transaction Service API - Bash\nDESCRIPTION: Shows how to create a new message for a Safe account using the Safe Transaction Service API. The message content (string or EIP712 object) should be included in the request body. The service derives the hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/worldchain/-v1-safes-{address}-messages--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Create Safe Delegate using Transaction Service API (POST)\nDESCRIPTION: Adds a new Safe delegate with an optional custom label. The request requires a signature generated using the EIP712 structure described in the documentation, signed by either the delegator or the delegate.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v2-delegates--post.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-polygon.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Configuring paymasterOptions.paymasterTokenAddress for safeOperations (TypeScript)\nDESCRIPTION: Focuses on the optional `paymasterTokenAddress` string parameter in `paymasterOptions` for `safeOperations`. This is the address of the ERC-20 token used for payment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsafeOperations(\n  { bundlerUrl: 'https://...' },\n  {\n    isSponsored: true,\n    paymasterUrl: 'https://...',\n    sponsorshipPolicyId: 'abc',\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    amountToApprove: 123n\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Declare Private Key Signer\nDESCRIPTION: This snippet demonstrates the declaration of a private key.  This key will be used to sign transactions with the Safe smart contract.  The actual private key is omitted and marked as a placeholder for security reasons.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/safe-deployment.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst SIGNER_PRIVATE_KEY = // ...\n```\n\n----------------------------------------\n\nTITLE: TypeScript sample for accessing User Operation API\nDESCRIPTION: This snippet indicates the use of a TypeScript file that presumably fetches user operation data from the described API endpoint. It illustrates integration of TypeScript for API interaction in a client application.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_56\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zksync/-v1-user-operations-{user_operation_hash}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'gasToken' parameter in Solidity\nDESCRIPTION: Shows usage of the getTransactionHash function focusing on the 'gasToken' parameter which specifies the token address used for gas payment (or 0x for native token).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_8\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring paymasterOptions.paymasterUrl for safeOperations (TypeScript)\nDESCRIPTION: Focuses on the `paymasterUrl` string parameter within `paymasterOptions` for `safeOperations`. This parameter specifies the URL endpoint for the ERC-4337 paymaster.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsafeOperations(\n  { bundlerUrl: 'https://...' },\n  {\n    isSponsored: true,\n    paymasterUrl: 'https://...',\n    sponsorshipPolicyId: 'abc',\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    amountToApprove: 123n\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Safe CLI via pip (bash)\nDESCRIPTION: This command uses the `pip3` executable to install (`install`) or upgrade (`-U`) the `safe-cli` package from the Python Package Index (PyPI). Requires Python 3.9+ and pip installed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -U safe-cli\n```\n\n----------------------------------------\n\nTITLE: Setting up Safe API Kit Instance in TypeScript\nDESCRIPTION: Example of initializing the Safe API Kit by creating a new instance with a specified chain ID. This setup is required before using methods like getAllTransactions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/getalltransactions.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport SafeApiKit from '@safe-global/api-kit'\n\nexport const apiKit = new SafeApiKit({\n  chainId: 1n, // Mainnet\n})\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Multisig Transactions with Javascript\nDESCRIPTION: This Javascript (TypeScript) code example demonstrates how to fetch the multi-signature transactions of a Safe.  The actual code resides in a file not directly included, but is referenced.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/scroll/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Signature Data for Deletion in Python\nDESCRIPTION: This Python snippet defines the EIP-712 structured data required for signing a request to delete a queued multisig transaction. It specifies the domain (Safe Transaction Service, version, chain ID, verifying contract) and the message (safe transaction hash, time-based one-time password 'totp'). Signing this data with an EOA is necessary to authorize the deletion request.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Incoming Transfers from Safe Transaction API - JSON\nDESCRIPTION: This snippet provides a sample JSON response returned by the incoming transfers endpoint. It contains pagination metadata and an array of transfer objects including details such as transfer type, execution date, block number, transaction hash, sender and receiver addresses, value, and internal transfer ID. This example illustrates an Ether transfer with related attributes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'gasPrice' parameter in Solidity\nDESCRIPTION: Demonstrates usage of the getTransactionHash function focusing on the 'gasPrice' parameter which sets the maximum gas price that should be used for this transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Solidity Event Definition: ChangedModuleGuard\nDESCRIPTION: Defines the `ChangedModuleGuard` Solidity event, which is emitted by a Safe contract whenever its module guard is set or changed. This event takes one parameter, `moduleGuard`, representing the address of the new module guard.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/ChangedModuleGuard.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nevent ChangedModuleGuard(address moduleGuard);\n```\n\n----------------------------------------\n\nTITLE: Using the ownerAddress Parameter\nDESCRIPTION: Demonstrates how to specify the ownerAddress parameter when creating an add owner transaction. This parameter defines which Ethereum address will be added as a new owner.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/createaddownertransaction.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transaction = await safeClient.createAddOwnerTransaction({\n  ownerAddress: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Nonce (`nonce`) in `safeClient.send` in TypeScript\nDESCRIPTION: Shows how to optionally specify the transaction nonce (`nonce`) when using `safeClient.send`. Providing a nonce overrides the automatic nonce management based on the sender's transaction count.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-client/send.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst txResult = await safeClient.send({\n  transactions,\n  nonce: 123\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating Safe Operation\nDESCRIPTION: This shows the expected response body when successfully creating a Safe Operation using the API endpoint. The API typically returns an empty response body with a 201 status code to indicate successful creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_53\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Defining Fallback Handler Changed Event in Solidity\nDESCRIPTION: This snippet defines the `ChangedFallbackHandler` event in a Solidity smart contract. It is emitted whenever the contract's fallback handler address is updated. The event includes a single parameter, `handler`, which specifies the new address of the fallback handler.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/ChangedFallbackHandler.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nevent ChangedFallbackHandler(address handler);\n```\n\n----------------------------------------\n\nTITLE: Multisig Transaction Confirmation Response in JSON\nDESCRIPTION: Sample JSON response returned after successfully confirming a multisig transaction, containing the signature generated for the confirmation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring paymasterOptions.paymasterAddress for safeOperations (TypeScript)\nDESCRIPTION: Highlights the optional `paymasterAddress` string parameter in `paymasterOptions` for `safeOperations`. This is the Ethereum address of the paymaster contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsafeOperations(\n  { bundlerUrl: 'https://...' },\n  {\n    isSponsored: true,\n    paymasterUrl: 'https://...',\n    sponsorshipPolicyId: 'abc',\n    paymasterAddress: '0x...',\n    paymasterTokenAddress: '0x...',\n    amountToApprove: 123n\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Safe Account Status via REST API in TypeScript and Bash\nDESCRIPTION: This snippet demonstrates how to query detailed information about a Safe account using a GET HTTP request to the `/api/v1/safes/{address}/` endpoint. It includes the required parameter 'address' in the path that specifies the Safe account. The sample request uses cURL to perform the GET request with appropriate headers to accept JSON responses. Expected output is a JSON object containing various Safe properties such as address, nonce, threshold, owners, modules, fallbackHandler, guard, and version. Dependencies include a functional REST API server exposing the endpoint. Limitations include checksum address validation and potential 404 response if the Safe does not exist.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_57\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/scroll/-v1-safes-{address}--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"nonce\": 6,\n  \"threshold\": 2,\n  \"owners\": [\n    \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n    \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n  ],\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"modules\": [\n    \"0x9085149079b87E32178669097bc82D341CB65678\",\n    \"0xFBbFe0716F25045975f193cccBDbE2a995840657\",\n    \"0xB4F5e59987549a2586976e8957962dBD54a26FD0\"\n  ],\n  \"fallbackHandler\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\",\n  \"guard\": \"0x0000000000000000000000000000000000000000\",\n  \"version\": \"1.3.0+L2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Peer Dependencies in package.json with JSON\nDESCRIPTION: A JSON snippet to add an overrides section in package.json. This ensures compatibility by forcing the ethers library version for the @safe-global/safe-contracts package, preventing peer dependency conflicts during development.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-modules/smart-account-modules-tutorial.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ... \n  \"overrides\": {\n    \"@safe-global/safe-contracts\": {\n      \"ethers\": \"^6.13.5\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Message with Maximum Priority Fee Per Gas\nDESCRIPTION: Example showing how to set the maximum priority fee per gas when sending an on-chain message. This parameter is part of EIP-1559 and represents the tip to miners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/onchain-messages/sendonchainmessage.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst messageResult = await safeMessageClient.sendOnChainMessage({\n  message: 'abc',\n  maxPriorityFeePerGas: '123'\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating a Signed Message\nDESCRIPTION: Shows an empty response body, typically returned with an HTTP 201 Created status, indicating the successful creation of a new signed message via the POST `/api/v1/safes/{address}/messages/` endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Safe Transfers\nDESCRIPTION: Provides an example JSON response from the `/api/v1/safes/{address}/transfers/` endpoint. The response includes pagination information (`count`, `next`, `previous`) and an array (`results`) containing transfer objects with details like type, execution date, block number, transaction hash, addresses, value, and token information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Batch transactions\nDESCRIPTION: Batches multiple transactions into a single multi-signature transaction, using the provided Safe nonce. Transactions can originate from any Safe account and may include already executed or pending transactions.  Cross-network transactions are not supported. The `safe-tx-hashes` specify the order of batching.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbatch-txs <safe-nonce> <safe-tx-hash> [ <safe-tx-hash> ... ]\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Kit (Pnpm)\nDESCRIPTION: This snippet installs the @safe-global/protocol-kit dependency using pnpm. The Safe Protocol Kit is essential for interacting with Safe smart contracts and managing Safe accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/passkeys.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/protocol-kit\n```\n\n----------------------------------------\n\nTITLE: TypeScript example for listing Safe module transactions\nDESCRIPTION: This TypeScript code snippet refers to an example implementation located at ../examples/xlayer/-v1-safes-{address}-module-transactions--get.ts, demonstrating how to call the API to retrieve module transactions for a specified Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_39\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/xlayer/-v1-safes-{address}-module-transactions--get.ts\n\n```\n\n----------------------------------------\n\nTITLE: Initializing GET request\nDESCRIPTION: This code snippet is meant to show the syntax required for a GET request, but its location is from an examples file that is in TypeScript.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_68\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'refundReceiver' parameter in Solidity\nDESCRIPTION: Demonstrates usage of the getTransactionHash function focusing on the 'refundReceiver' parameter which defines the address of receiver of gas payment (or 0x if tx.origin).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_9\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Transactions Parameter: value\nDESCRIPTION: Example showing how to define `value` parameter inside `transactions` array which is part of the `sendSafeOperation` parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-starter-kit/safe-operations/sendsafeoperation.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeOperationResult = await safeOperationsClient.sendSafeOperation({\n  transactions: [{\n    to: '0x...',\n    value: '123',\n    data: '0x'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Pending Transaction: TypeScript\nDESCRIPTION: This snippet retrieves a pending transaction from the Safe Transaction Service using the transaction hash. It requires the initialized Safe API Kit and the transaction hash as input.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst signedTransaction = await apiKit.getTransaction(safeTxHash)\n```\n\n----------------------------------------\n\nTITLE: Rendering API Reference Component for Gnosis Chain\nDESCRIPTION: This snippet renders an API reference component for the Gnosis Chain network, passing the network name as a prop. It is designed to generate and display API documentation specific to the Gnosis Chain within a React-based application.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/gnosis-chain.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference networkName=\"gnosis-chain\"/>\n```\n\n----------------------------------------\n\nTITLE: Installing Safe Global API Kit Using yarn in Bash\nDESCRIPTION: Installs the @safe-global/api-kit package into a project using the yarn package manager. This step is necessary to add the API Kit for leveraging Safe Transaction Service API features within the application.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/overview.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/api-kit\n```\n\n----------------------------------------\n\nTITLE: Delete Queued Multisig Transaction - cURL\nDESCRIPTION: Demonstrates how to send a DELETE request to the Safe Transaction Service API using cURL to remove a queued, unexecuted multisig transaction. The transaction is identified by its safe transaction hash in the path. An empty request body is sent with appropriate headers.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-gnosis-chain.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies - Bash\nDESCRIPTION: This command installs the necessary dependencies for the project using npm. It installs Hardhat, Safe contracts, and Hardhat dependency compiler as development dependencies.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm add -D hardhat @safe-global/safe-contracts hardhat-dependency-compiler\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Deleting a Multisig Transaction\nDESCRIPTION: Illustrates the expected response after successfully deleting a queued multisig transaction. The API returns an HTTP 204 No Content status code, indicating success with no response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Installing Safe SDK Starter Kit Dependency (Bash)\nDESCRIPTION: Installs the `@safe-global/sdk-starter-kit` package using pnpm. This package is essential for interacting with Safe accounts and user operations as described in the guide.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/starter-kit/guides/send-user-operations.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @safe-global/sdk-starter-kit\n```\n\n----------------------------------------\n\nTITLE: EIP-712 Data Structure for Deleting Multisig Transactions in Python\nDESCRIPTION: Defines the EIP-712 typed data structure required to sign a request for deleting a queued multisig transaction. The TOTP parameter is calculated by dividing the Unix UTC epoch time by 3600 with no decimals.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n {\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'value' parameter in Solidity\nDESCRIPTION: Shows usage of the getTransactionHash function focusing on the 'value' parameter which represents the native token value to be sent in the Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Safe Operation Confirmations with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve the list of confirmations for a multisig transaction using the GET endpoint. It includes the necessary headers for making the request to the Safe Transaction Service on zkSync.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-zksync.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Contracts List Response Example\nDESCRIPTION: This JSON snippet provides a sample response from the \"List Contracts\" API endpoint.  It includes a count of total contracts, links to the next and previous pages (if applicable), and an array of contract objects. Each contract object contains address, name, display name, logo URI, contract ABI, and a boolean indicating if it is trusted for delegate calls. Dependencies: none.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting EnabledModule Event in Solidity\nDESCRIPTION: This Solidity event, `EnabledModule`, is emitted by the Safe smart contract. It serves as a notification mechanism signifying that a new module has been successfully enabled for use with the Safe. The event includes a single parameter, `module`, which is of type `address` and represents the address of the module that was just enabled.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/EnabledModule.mdx#_snippet_0\n\nLANGUAGE: Solidity\nCODE:\n```\nevent EnabledModule(address module);\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with '_nonce' parameter in Solidity\nDESCRIPTION: Shows usage of the getTransactionHash function focusing on the '_nonce' parameter which specifies the transaction nonce to prevent replay attacks.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Safes from a Specific Owner (TypeScript Example)\nDESCRIPTION: This snippet illustrates a TypeScript file for interacting with the API to retrieve all safes owned by a specific address. It references an example file and specifies the endpoint URL with placeholders. Dependencies include the API endpoint and utility functions for request handling.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/sepolia/-v1-owners-{address}-safes--get.ts\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Confirmations (JSON)\nDESCRIPTION: This JSON snippet provides a sample response when listing confirmations for a multi-signature transaction. It includes metadata like `count`, `next`, and `previous` pagination links, along with an array of confirmation objects, each containing details such as `owner`, `submissionDate`, `transactionHash`, `signature`, and `signatureType`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Contracts\nDESCRIPTION: This JSON response demonstrates the structure returned when listing contracts, including total count, pagination links, and an array of contract objects with detailed attributes such as address, name, ABI, description, and trust level.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 16233,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/contracts/?limit=2&offset=3\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0x0000000000000000000000000000000000000000\",\n      \"name\": \"MetaMultiSigWallet\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"MetaMultiSigWallet\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    },\n    {\n      \"address\": \"0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC\",\n      \"name\": \"Seaport\",\n      \"displayName\": \"\",\n      \"logoUri\": null,\n      \"contractAbi\": {\n        \"abi\": [],\n        \"description\": \"Seaport\",\n        \"relevance\": 100\n      },\n      \"trustedForDelegateCall\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Module Transaction Response Format in JSON\nDESCRIPTION: This snippet shows the sample response format when retrieving a module transaction. It includes transaction details such as execution date, block number, transaction hash, and other relevant information.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Empty Response for Deleting Safe Transaction\nDESCRIPTION: Represents the empty response body returned upon successfully deleting a queued Safe multisig transaction via the API. A `204 No Content` HTTP status code typically accompanies this empty response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Signature Payload for Deletion (Python)\nDESCRIPTION: This Python dictionary defines the EIP-712 data structure required for signing a transaction deletion request. It includes domain information (service name, version, chain ID, verifying contract) and message data (Safe transaction hash and a Time-based One-Time Password calculated from the Unix epoch time). This structure must be signed by the EOA requesting the deletion.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"types\": {\n        \"EIP712Domain\": [\n            {\"name\": \"name\", \"type\": \"string\"},\n            {\"name\": \"version\", \"type\": \"string\"},\n            {\"name\": \"chainId\", \"type\": \"uint256\"},\n            {\"name\": \"verifyingContract\", \"type\": \"address\"},\n        ],\n        \"DeleteRequest\": [\n            {\"name\": \"safeTxHash\", \"type\": \"bytes32\"},\n            {\"name\": \"totp\", \"type\": \"uint256\"},\n        ],\n    },\n    \"primaryType\": \"DeleteRequest\",\n    \"domain\": {\n        \"name\": \"Safe Transaction Service\",\n        \"version\": \"1.0\",\n        \"chainId\": chain_id,\n        \"verifyingContract\": safe_address,\n    },\n    \"message\": {\n        \"safeTxHash\": safe_tx_hash,\n        \"totp\": totp,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Calling disableModule with prevModule Parameter (Solidity)\nDESCRIPTION: Illustrates how to call the disableModule function of ISafe with a focus on providing the prevModule parameter, representing the previous module in the linked list. This code expects two address arguments and specifically highlights addressing the prevModule input. Used as part of the overall disabling process within a Safe smart contract.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/modules/disableModule.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).disableModule(\n    0x...,\n    0x...\n);\n```\n\n----------------------------------------\n\nTITLE: Sample response structure for fetching confirmations\nDESCRIPTION: This JSON snippet showcases the structure of a typical successful response for retrieving confirmations, including total count, pagination URLs, and an array of confirmation objects with metadata such as creation time, owner, signature, and signature type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Module Transactions - TypeScript\nDESCRIPTION: This code snippet appears to be a TypeScript example demonstrating how to fetch module transactions from a Safe address. It serves as a demonstration of how to make a GET request and may require an associated library or framework for HTTP requests.  The specific implementation details such as dependencies or request handling are not given here.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/mainnet/-v1-safes-{address}-module-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Signing Message using POST request\nDESCRIPTION: This endpoint allows you to add a signature to a message, given its message hash. It uses a POST request to the specified endpoint, requiring the message hash as a path parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_11\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST https://safe-transaction-celo.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Adding Safe API Kit Dependency - Bash\nDESCRIPTION: This snippet shows how to add the `@safe-global/api-kit` dependency to your project using Yarn.  It installs the specified version of the API Kit.  Ensure you have Yarn or a similar package manager installed and configured correctly.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/api-kit/guides/migrate-to-v1.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/api-kit@1.3.1\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Creation Status using TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to fetch the creation status of a Safe using the Safe Transaction Service API. It's referenced from an example file for Aurora.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_69\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Gas Cost Estimation\nDESCRIPTION: JSON response containing the estimated safeTxGas required for the multisig transaction. This value represents the amount of gas needed to execute the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Chiado API Reference Component\nDESCRIPTION: A simple JSX component that renders the ApiReference component with the Chiado network name. This displays the API documentation for the Chiado test network within the Safe documentation site.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/chiado.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference networkName=\"chiado\"/>\n```\n\n----------------------------------------\n\nTITLE: Reference for Listing Safes by Module (TypeScript)\nDESCRIPTION: This snippet is a comment indicating the source file for an example implementation in TypeScript. It points to a specific file (`../examples/optimism/-v1-modules-{address}-safes--get.ts`) that contains the actual code for demonstrating how to list Safe accounts associated with a specific module address using the Safe Transaction Service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_44\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/optimism/-v1-modules-{address}-safes--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Confirming Safe Transaction\nDESCRIPTION: Shows an example JSON response received after successfully adding a confirmation to a Safe multisig transaction via the API. The response typically contains the signature that was submitted and successfully added.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"signature\": \"0xfc32b5fdfa8517b44bd45c5d1e09ed898325e109e6b889fbf1584c158dcbe71b2de4a1e8d43b5d396c1da03381cbc3f8358295192d19ded2c12dda90227308b720\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using getTransactionHash with 'to' parameter in Solidity\nDESCRIPTION: Demonstrates usage of the getTransactionHash function focusing on the 'to' parameter which specifies the destination address of the Safe transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/transactions/getTransactionHash.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getTransactionHash(\n    0x...,\n    0,\n    \"0x...\",\n    Enum.Operation.Call,\n    0,\n    0,\n    0,\n    0x...,\n    payable(0),\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Importing RemoveOwnerVariables Type from Safe React Hooks\nDESCRIPTION: Shows how to import the RemoveOwnerVariables type that defines the structure of parameters required for removing an owner from a Safe wallet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/remove.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RemoveOwnerVariables } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Get Message API Response Sample\nDESCRIPTION: Provides an example JSON response with detailed message data, including timestamp, safe address, message content, proposer, confirmations, and signatures. Confirms the structure of the response schema and confirmation objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Finalizing User Authentication with Monerium SDK in TypeScript\nDESCRIPTION: Checks if the user is authorized after completing the login process by verifying the Monerium SDK's session state, confirming successful account linking.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/monerium.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst isAuthorized = await monerium.getAccess()\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction Analytics by Origin via API (Bash)\nDESCRIPTION: Sends a GET request using curl to the `/api/v2/analytics/multisig-transactions/by-origin/` endpoint of the Safe Transaction Service API. This request retrieves analytics data related to multisig transactions, potentially grouped by their origin. The request specifies `Accept: application/json` and `content-type: application/json` headers. According to the documentation, a successful response (code 200) is expected, potentially with no response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Return delegates\nDESCRIPTION: Returns a list of delegates associated with the Safe. Delegates are trusted addresses that can post transactions to the tx-service on behalf of the Safe's owners.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nget_delegates\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Safe Operation API\nDESCRIPTION: This is the sample JSON response structure when retrieving a Safe Operation. It includes details like creation timestamp, hash, module address, confirmations, and the associated UserOperation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request for Fetching Safe Module Transactions\nDESCRIPTION: Provides an example cURL command to send a GET request to fetch module transactions for a specific Safe address, including necessary headers for JSON format.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/module-transactions/ \\n    -H \"Accept: application/json\" \\n    -H \"content-type: application/json\" \\n\n```\n\n----------------------------------------\n\nTITLE: Setting up the Mistral AI model with ollama\nDESCRIPTION: Commands to download and test the Mistral Nemo model locally using ollama before integrating it with the agent.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-setup.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nollama pull mistral-nemo\n```\n\nLANGUAGE: bash\nCODE:\n```\nollama run mistral-nemo\n```\n\n----------------------------------------\n\nTITLE: Importing UseSwapOwnerReturnType from Safe React Hooks\nDESCRIPTION: Shows how to import the UseSwapOwnerReturnType type from the Safe React Hooks package, which defines the structure of the return value from the swap owner hook.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/swap.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseSwapOwnerReturnType } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: List Supported Tokens - `js TypeScript` Example Reference\nDESCRIPTION: This line indicates the location of a TypeScript example demonstrating how to list all tokens supported by the Safe Transaction Service API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_75\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-tokens--get.ts\n```\n\n----------------------------------------\n\nTITLE: Adding a Confirmation to a Safe Operation using Bash\nDESCRIPTION: Sends a POST request using curl to the Safe Transaction Service API to add a confirmation for a specific multisig transaction identified by its `safe_operation_hash`. Requires `Accept` and `content-type` headers set to `application/json`. The request body in this example is an empty JSON object (`{}`), though the actual API likely requires signature data. Delegates cannot be used for confirmation via this endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Add Confirmation JSON\nDESCRIPTION: This represents a sample response for adding confirmation to a transaction. The API returns an empty response to indicate successful creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Calling proposeTransaction Highlighting senderSignature\nDESCRIPTION: Illustrates the structure of the `apiKit.proposeTransaction` call, specifically highlighting the `senderSignature` parameter. This parameter contains the signature provided by the `senderAddress` to authorize the proposal.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-api-kit/proposetransaction.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait apiKit.proposeTransaction({\n  safeAddress: '0x...',\n  safeTxHash: '0x...',\n  safeTransactionData,\n  senderAddress: '0x...',\n  senderSignature: '0x...'\n})\n```\n\n----------------------------------------\n\nTITLE: Create Signed Message API Endpoint in TypeScript\nDESCRIPTION: Defines the API endpoint for creating a new message for a Safe account. The path parameter 'address' specifies the target Safe. The message can be a string or an EIP712 object; the service computes the hash internally. The curl example shows how to POST an empty JSON payload to create the message.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/sepolia/-v1-safes-{address}-messages--post.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/messages/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n\n```\n\n----------------------------------------\n\nTITLE: Sign Message API Endpoint in TypeScript\nDESCRIPTION: Defines the API endpoint for signing a message hash for a Safe. It specifies the required path parameter 'message_hash', expected response code 201, and includes sample curl command demonstrating how to make a POST request to sign a message. Dependencies include the API path and parameter schema.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/sepolia/-v1-messages-{message_hash}-signatures--post.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-sepolia.safe.global/api/api/v1/messages/0x3b3b57b3/signatures/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Collectibles\nDESCRIPTION: Shows an example JSON response structure when successfully listing collectibles for a Safe address. The response is paginated (`count`, `next`, `previous`) and contains an array (`results`) of collectible objects, each detailing properties like address, name, symbol, ID, metadata, and URIs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"address\": \"0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490\",\n      \"tokenName\": \"SampleNft\",\n      \"tokenSymbol\": \"SN\",\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0xa0D601bc48Bae6D64bB19d325f8A6618A4da9490.png\",\n      \"id\": \"1\",\n      \"uri\": null,\n      \"name\": null,\n      \"description\": null,\n      \"imageUri\": null,\n      \"metadata\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Module Transactions List\nDESCRIPTION: Provides an example JSON response structure returned by the `/api/v1/safes/{address}/module-transactions/` endpoint. It includes pagination fields (`count`, `next`, `previous`) and a `results` array containing module transaction objects with details like `executionDate`, `blockNumber`, `transactionHash`, `safe`, `module`, `to`, `value`, `operation`, and a unique `moduleTransactionId`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-24T20:54:48Z\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"isSuccessful\": true,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"data\": \"0x00\",\n      \"operation\": 0,\n      \"dataDecoded\": null,\n      \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript import\nDESCRIPTION: Placeholder for a TypeScript code example which is empty.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/avalanche/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Referencing Safe Status Retrieval Example - TypeScript\nDESCRIPTION: This snippet is a comment referencing an external file containing a TypeScript/JavaScript implementation for retrieving the status of a Safe account using the API. It indicates where a full code example can be found.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_64\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/celo/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates with GET - TypeScript\nDESCRIPTION: Retrieves a list of delegates using a GET request to the `/api/v2/delegates/` endpoint. The sample is taken from the `examples/scroll/-v2-delegates--get.ts` file, demonstrating how to construct and send the request using TypeScript.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/scroll/-v2-delegates--get.ts\n```\n\n----------------------------------------\n\nTITLE: API Response Schema for List of Incoming Transfers\nDESCRIPTION: Describes the JSON response schema for the list of incoming transfers, including metadata such as 'count', 'next', 'previous', and an array of transfer results with detailed fields like 'type', 'executionDate', 'blockNumber', 'transactionHash', 'from', 'to', 'value', 'tokenInfo', and 'transferId'. This schema helps consumers interpret the API response structure.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"count\": 123,\n  \"next\": \"http://api.example.org/accounts/?offset=400&limit=100\",\n  \"previous\": \"http://api.example.org/accounts/?offset=200&limit=100\",\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Specific Token Information\nDESCRIPTION: Presents an example JSON response containing detailed information for a single token retrieved by its address. The response includes the token's type (e.g., \"ERC20\"), address, name, symbol, decimals, logo URI, and trusted status.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ERC20\",\n  \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n  \"name\": \"0x5555.com\",\n  \"symbol\": \"0x5555.com\",\n  \"decimals\": 18,\n  \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n  \"trusted\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Remove delegate\nDESCRIPTION: Removes a delegate address from the Safe, requiring the owner's address for confirmation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/tx-service-commands.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nremove_delegate <address> <owner-address>\n```\n\n----------------------------------------\n\nTITLE: Adding Transaction Confirmation via Safe API (Bash)\nDESCRIPTION: Shows how to add a confirmation (signature) for a specific multisig transaction using a POST request to the Safe Transaction Service API. The `safe_operation_hash` is required in the path. The request body should typically contain the signature data, although the example shows an empty JSON object (`-d '{}'`). This endpoint expects a 201 Created status on success, usually with an empty response body. Note that using delegates for confirmation is not supported by this endpoint.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-aurora.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Creating Lib Directory and Constants File - Bash\nDESCRIPTION: These bash commands create a lib folder at the project's root, navigate into it, and create a constants.ts TypeScript file. This organizational step prepares the project for storing shared project constants. No dependencies are required.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir lib\ncd lib\ntouch constants.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Empty Response - JSON\nDESCRIPTION: A sample response showing the format for an empty response.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_49\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Forcing Safe CLI to refresh Safe data\nDESCRIPTION: Updates the Safe's cached information in CLI if outdated or after manual changes are made. Ensures data consistency before further operations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nrefresh\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Operations List\nDESCRIPTION: This JSON snippet illustrates a sample response returned by the 'List Safe Operations' endpoint. It includes pagination keys such as 'count', 'next', and 'previous', and an array of SafeOperation objects. Each SafeOperation includes timestamps, operation hashes, module addresses, confirmations (with signature data), prepared signatures, and embedded userOperation details like Ethereum transaction hash, sender, nonce, and gas parameters. This structure demonstrates the rich detail provided for each SafeOperation entity.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0,\n```\n\n----------------------------------------\n\nTITLE: Setting up project and installing dependencies with package managers\nDESCRIPTION: Commands for initializing a new project directory and installing the required dependencies using different package managers (pnpm, npm, or yarn).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-setup.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-safe-agent\ncd my-safe-agent\ntouch .env\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @langchain/core @langchain/langgraph @langchain/ollama @safe-global/protocol-kit tsx viem zod\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @langchain/core @langchain/langgraph @langchain/ollama @safe-global/protocol-kit tsx viem zod\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @langchain/core @langchain/langgraph @langchain/ollama @safe-global/protocol-kit tsx viem zod\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token List with cURL\nDESCRIPTION: Example of how to fetch a paginated list of supported tokens from the Safe Transaction Service. The endpoint returns token details including type, address, name, symbol, decimals, and logo URI.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/blast-reference.mdx#_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-blast.safe.global/api/api/v1/tokens/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Deleting a Delegate by Address via API\nDESCRIPTION: Removes all delegate/delegator pairs associated with the specified delegate address. The DELETE request requires the delegate address in the URL path and can be signed by either owner or delegate. Successful deletion returns 204 No Content.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-mantle.safe.global/api/api/v2/delegates/0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Safe Transaction Signature\nDESCRIPTION: The signature is a cryptographic proof that the transaction has been approved by the required number of owners (threshold) of the Safe. The signature field contains a series of signatures, each generated by an owner's private key, authorizing the transaction. It's crucial for the Safe to execute a transaction, guaranteeing its validity and preventing unauthorized actions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_58\n\nLANGUAGE: text\nCODE:\n```\n0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\n```\n\n----------------------------------------\n\nTITLE: Update Hardhat Config - TypeScript\nDESCRIPTION: This TypeScript code updates the `hardhat.config.ts` file. It configures the Solidity compiler version, allows unlimited contract size for Safe contracts on the Hardhat network, and adds `dependencyCompiler` to import `SafeProxyFactory` and `Safe` contracts, which are necessary due to exceeding bytecode size limits when compiling Safe contracts with Solidity 0.8.x.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HardhatUserConfig } from \"hardhat/config\";\nimport \"@nomicfoundation/hardhat-toolbox\";\nimport \"hardhat-dependency-compiler\";\n\nconst config: HardhatUserConfig = {\n  solidity: \"0.8.28\",\n  networks: {\n    hardhat: {\n      allowUnlimitedContractSize: true, // Required for Safe contracts\n    },\n  },\n  dependencyCompiler: {\n    paths: [\n      \"@safe-global/safe-contracts/contracts/proxies/SafeProxyFactory.sol\",\n      \"@safe-global/safe-contracts/contracts/Safe.sol\",\n    ],\n  },\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Sample Empty JSON Response\nDESCRIPTION: Sample empty JSON response returned by the Sign Message and Create Signed Message endpoints upon successful execution (HTTP 201 Created).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Module Transaction Response JSON Structure\nDESCRIPTION: This sample response shows the data structure returned when retrieving a module transaction, including transaction details such as creation date, execution date, block number, transaction hash, addresses involved, value, and operation type.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Public Ethereum Client with RPC for Gnosis Chain in TypeScript\nDESCRIPTION: Creates a public client instance for blockchain queries via JSON-RPC, configured to connect to the Gnosis network using an RPC URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst publicClient = createPublicClient({\n  transport: http(`https://rpc.ankr.com/${chainName}`)\n})\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Analytics with curl (Bash)\nDESCRIPTION: Demonstrates how to make a GET request to the `/api/v2/analytics/multisig-transactions/by-origin/` endpoint using `curl`. This endpoint provides analytics data for multisig transactions based on origin. The command includes necessary headers for content negotiation. Dependencies: `curl`. Expected output: Based on the documentation, there is no response body.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_81\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Importing UseRemoveOwnerReturnType Type from Safe React Hooks\nDESCRIPTION: Shows how to import the UseRemoveOwnerReturnType type from the Safe React Hooks library, which defines the structure of the return value from the remove hook.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdateowners/remove.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseRemoveOwnerReturnType } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Referencing TypeScript Example for All Transactions Endpoint\nDESCRIPTION: A comment indicating the location of a TypeScript example file demonstrating how to make a GET request to the `/api/v1/safes/{address}/all-transactions/` endpoint using TypeScript.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/zksync/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Using Custom Configuration with getSafeInfo\nDESCRIPTION: Example demonstrating how to use a custom configuration with getSafeInfo instead of the one from the nearest SafeProvider.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsafeinfo.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { config } from './config.ts'\n\nconst result = getSafeInfo({\n  config\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Transactions using curl\nDESCRIPTION: Example curl request for creating a multi-signature transaction for a Safe account. The request is made to the Mantle network endpoint with an empty JSON payload.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/multisig-transactions/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample SafeOperation API Response Structure - JSON\nDESCRIPTION: This snippet presents a sample JSON response returned from the Safe Transaction Service API for a SafeOperation query. The JSON outlines the structure and key fields of a SafeOperation, including creation and modification times, operation hash, related confirmations and their signatures, the prepared signature, and a nested userOperation object with detailed Ethereum transaction data. All data types and nested arrays/objects follow the API specification, and fields such as validAfter and validUntil may be null.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing Transfers\nDESCRIPTION: Provides an example JSON response for the list of token transfers, including transfer metadata such as execution date, block number, transaction hash, sender and receiver addresses, transfer value, and token info. The response also supports pagination with 'next' and 'previous' URLs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Multisig Transaction Confirmations - JSON\nDESCRIPTION: A sample JSON response illustrating the typical data structure returned by the GET confirmations endpoint. It shows a paginated container with count, next, and previous fields, and a results array containing confirmation objects with timestamp fields (created, modified), signer owner address, the cryptographic signature, and the signature type (e.g., CONTRACT_SIGNATURE). This response format aids in processing and displaying multisig confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Get All Transactions\nDESCRIPTION: Example JSON response from the `/api/v1/safes/{address}/all-transactions/` endpoint. It returns a paginated list (`count`, `next`, `previous`, `results`) containing detailed information about transactions associated with the Safe. Each transaction object includes fields like `safe`, `to`, `value`, `executionDate`, `transactionHash`, `safeTxHash`, `confirmations`, `transfers`, and `txType`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n      \"value\": \"50000000000000\",\n      \"data\": null,\n      \"operation\": 0,\n      \"gasToken\": \"0x0000000000000000000000000000000000000000\",\n      \"safeTxGas\": 0,\n      \"baseGas\": 0,\n      \"gasPrice\": \"0\",\n      \"refundReceiver\": \"0x0000000000000000000000000000000000000000\",\n      \"nonce\": 0,\n      \"executionDate\": \"2024-06-26T15:41:48Z\",\n      \"submissionDate\": \"2024-06-26T15:18:33.817634Z\",\n      \"modified\": \"2024-06-26T15:41:49.400858Z\",\n      \"blockNumber\": 6191662,\n      \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n      \"safeTxHash\": \"0xfc01da65f3a1dea769f4ad9067d41c5477a2ec5316d6b54165de212cd1681992\",\n      \"proposer\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"executor\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"isExecuted\": true,\n      \"isSuccessful\": true,\n      \"ethGasPrice\": \"61733665357\",\n      \"maxFeePerGas\": \"131260008170\",\n      \"maxPriorityFeePerGas\": \"1000000000\",\n      \"gasUsed\": 91398,\n      \"fee\": \"5642333546299086\",\n      \"origin\": \"{}\",\n      \"dataDecoded\": null,\n      \"confirmationsRequired\": 2,\n      \"confirmations\": [\n        {\n          \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"submissionDate\": \"2024-06-26T15:18:33.901378Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0x331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n          \"signatureType\": \"ETH_SIGN\"\n        },\n        {\n          \"owner\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n          \"submissionDate\": \"2024-06-26T15:27:29.512252Z\",\n          \"transactionHash\": null,\n          \"signature\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f\",\n          \"signatureType\": \"ETH_SIGN\"\n        }\n      ],\n      \"trusted\": true,\n      \"signatures\": \"0xd26842f2bd17eeed83a0f9fb010efc1716ed982e62cc05fe61a314827c226d534ddab07482795521b20c32d764ddc4d3fc602c3113b4c540c420e72b923b92c91f331d8584f5514c1cf1cfe1edd873228e428dafc0c78c5480c34c9868e9075d9622d8334d052037b1566241c8d0ecfbdb02c99b59a9e06d97974e1eaa55f502811f\",\n      \"transfers\": [\n        {\n          \"type\": \"ETHER_TRANSFER\",\n          \"executionDate\": \"2024-06-26T15:41:48Z\",\n          \"blockNumber\": 6191662,\n          \"transactionHash\": \"0x2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da96\",\n          \"to\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n          \"value\": \"50000000000000\",\n          \"tokenId\": null,\n          \"tokenAddress\": null,\n          \"transferId\": \"i2ecba24115d057bb74c1885b2a16a38b3929992fd52ed69dc8d0df24f765da960,0\",\n          \"tokenInfo\": null,\n          \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n        }\n      ],\n      \"txType\": \"MULTISIG_TRANSACTION\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Safe Creation Status\nDESCRIPTION: This JSON response provides detailed information about a Safe's creation including creation timestamp, creator address, transaction hash, factory address, and decoded setup data showing configuration parameters like owner addresses and threshold.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-06-25T11:18:48Z\",\n  \"creator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"transactionHash\": \"0x6404e0298423c092cc1ce486f3f72172a1c0f2f28a9b29f69e605ea825360ac5\",\n  \"factoryAddress\": \"0xC22834581EbC8527d974F8a1c97E1bEA4EF910BC\",\n  \"masterCopy\": \"0xfb1bffC9d739B8D520DaF37dF666da4C687191EA\",\n  \"setupData\": \"0xb63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000017062a1de2fe6b99be3d9d37841fed19f5738040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a6d3debaab2b8093e69109f23a75501f864f74e20000000000000000000000003a16e3090e32dded2250e862b9d5610bef13e93d0000000000000000000000000000000000000000000000000000000000000000\",\n  \"dataDecoded\": {\n    \"method\": \"setup\",\n    \"parameters\": [\n      {\n        \"name\": \"_owners\",\n        \"type\": \"address[]\",\n        \"value\": [\n          \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n          \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\"\n        ]\n      },\n      {\n        \"name\": \"_threshold\",\n        \"type\": \"uint256\",\n        \"value\": \"2\"\n      },\n      {\n        \"name\": \"to\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"data\",\n        \"type\": \"bytes\",\n        \"value\": \"0x\"\n      },\n      {\n        \"name\": \"fallbackHandler\",\n        \"type\": \"address\",\n        \"value\": \"0x017062a1dE2FE6b99BE3d9d37841FeD19F573804\"\n      },\n      {\n        \"name\": \"paymentToken\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      },\n      {\n        \"name\": \"payment\",\n        \"type\": \"uint256\",\n        \"value\": \"0\"\n      },\n      {\n        \"name\": \"paymentReceiver\",\n        \"type\": \"address\",\n        \"value\": \"0x0000000000000000000000000000000000000000\"\n      }\n    ]\n  },\n  \"userOperation\": null\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Statement for Multisig Transactions Example\nDESCRIPTION: This code snippet indicates the source file for the example usage code of fetching multisig transactions. It is a comment placeholder pointing to the relevant TypeScript example script.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/polygon/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safe Operations List\nDESCRIPTION: Illustrates the structure of a successful JSON response when listing SafeOperations. The response is paginated (`count`, `next`, `previous`) and contains an array (`results`) of SafeOperation objects, each including details like `safeOperationHash`, `moduleAddress`, `confirmations`, and the associated `userOperation`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n        \"nonce\": 0\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safes with Specific Module Enabled - TypeScript and Bash\nDESCRIPTION: This snippet illustrates the API endpoint to retrieve a list of Safe accounts that have a specific module enabled, identified by a module's address passed as a path parameter. It includes example TypeScript usage (referenced) and a sample curl command demonstrating how to invoke the GET request including appropriate headers. The expected JSON response returns an array of Safe addresses. Dependencies include a REST client or curl and the Safe Transaction Service API server accessible at the given base URL.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_48\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-modules-{address}-safes--get.ts\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Multisig Transaction Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample response from the create multisig transaction endpoint, showing the `safeTxGas` value. This value provides information about the gas required for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Prepared Cryptographic Signature in JSON\nDESCRIPTION: This JSON snippet includes a key \"preparedSignature\" containing a hexadecimal string representing a cryptographic signature. It is part of a data structure, potentially for blockchain transaction signing or message authentication. The snippet requires a context where hexadecimal encoding is interpreted, typically by smart contract systems or cryptographic utilities. Input is implicit as the signature data; output would be usage in validation or transaction submission.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_58\n\nLANGUAGE: JSON\nCODE:\n```\n\"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Balances - cURL\nDESCRIPTION: This cURL command retrieves the balances of Ether and ERC20 tokens for a specific Safe account.  It uses the GET method, and the Safe address is used in the path parameter. The command sets the Accept and content-type headers to application/json to specify the expected response format.  This API call is marked as deprecated.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_63\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-mantle.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: HTML Container Element for Mounting Stripe Onramp Widget\nDESCRIPTION: This HTML code provides the required DOM element as a container with the id 'onramp-element' where the Stripe onramp widget iframe will be dynamically mounted by the frontend script. Including this element in your page is necessary for proper widget rendering.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/stripe.mdx#_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<div id='onramp-element' />\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates Sample Response\nDESCRIPTION: A sample JSON response illustrating the structure returned by the list delegates endpoint, including 'count', 'next', 'previous', and 'results' array with delegate objects containing 'safe', 'delegate', 'delegator', and 'label'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"delegate\": \"0xe8A11B18DA0C02ce6304347D8E0DA66C50dEf739\",\n      \"delegator\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"label\": \"Sample Delegator 2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Documentation for Listing User Operations\nDESCRIPTION: Provides comprehensive documentation for the GET endpoint to list user operations for a Safe account. Details include URL parameters, response schemas, and sample response structure demonstrating how to handle paginated results with detailed operation data in JSON format. It highlights dependencies on specific response types and the expected structure of returned user operation objects.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{ \"code\": \"200\", \"schema\": {}, \"content\": { \"application/json\": { \"schema\": { \"refName\": \"PaginatedUserOperationWithSafeOperationResponseList\", \"type\": \"object\", \"required\": [\"count\", \"results\"], \"properties\": { \"count\": { \"type\": \"integer\", \"example\": 123 }, \"next\": {\"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=400&limit=100\" }, \"previous\": { \"type\": \"string\", \"nullable\": true, \"format\": \"uri\", \"example\": \"http://api.example.org/accounts/?offset=200&limit=100\" }, \"results\": { \"type\": \"array\", \"items\": { \"refName\": \"UserOperationWithSafeOperationResponse\", \"type\": \"object\", \"properties\": { \"ethereumTxHash\": { \"type\": \"string\" }, \"sender\": { \"type\": \"string\" }, \"userOperationHash\": { \"type\": \"string\" }, \"nonce\": { \"type\": \"integer\", \"minimum\": 0 }, \"initCode\": { \"type\": [\"string\", \"null\"] }, \"callData\": { \"type\": [\"string\", \"null\"] }, \"callGasLimit\": { \"type\": \"integer\", \"minimum\": 0 }, \"verificationGasLimit\": { \"type\": \"integer\", \"minimum\": 0 }, \"preVerificationGas\": { \"type\": \"integer\", \"minimum\": 0 }, \"maxFeePerGas\": { \"type\": \"integer\", \"minimum\": 0 }, \"maxPriorityFeePerGas\": { \"type\": \"integer\", \"minimum\": 0 }, \"paymaster\": { \"type\": [\"string\", \"null\"] }, \"paymasterData\": { \" \"type\": [\"string\", \"null\"] }, \"signature\": { \"type\": \"string\" }, \"entryPoint\": { \"type\": \"string\" }, \"safeOperation\": { \"oneOf\": [ { \"refName\": \"SafeOperationResponse\", \"type\": \"object\", \"properties\": { \"created\": { \"type\": \"string\", \"format\": \"date-time\" }, \"modified\": { \"type\": \"string\", \"format\": \"date-time\" }, \"safeOperationHash\": { \"type\": \"string\" }, \"validAfter\": { \"type\": \"string\", \"format\": \"date-time\" }, \"validUntil\": { \"type\": \"string\", \"format\": \"date-time\" }, \"moduleAddress\": { \"type\": \"string\" }, \"confirmations\": { \"type\": \"object\", \"additionalProperties\": {}, \"description\": \"Filters confirmations queryset\\n\\n:param obj: SafeOperation instance\\n:return: Serialized queryset\", \"readOnly\": true }, \"preparedSignature\": { \"type\": \"string\", \"readOnly\": true } }, \"required\": [ \"confirmations\", \"created\", \"modified\", \"moduleAddress\", \"preparedSignature\", \"safeOperationHash\", \"validAfter\", \"validUntil\" ] }, { \"type\": \"null\" } ], \"readOnly\": true } }, \"required\": [ \"callData\", \"callGasLimit\", \"entryPoint\", \"ethereumTxHash\", \"initCode\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"paymaster\", \"paymasterData\", \"preVerificationGas\", \"safeOperation\", \"sender\", \"signature\", \"userOperationHash\", \"verificationGasLimit\" ] } } } } } } }\n```\n\n----------------------------------------\n\nTITLE: Defining AddedOwner Event in Solidity\nDESCRIPTION: Defines an event named AddedOwner that emits when a new owner is added to the Safe contract. This event includes the address of the owner, enabling external applications and contracts to listen for ownership changes. It requires standard Solidity environment and does not depend on additional libraries. The output is an emitted event containing the owner address as a single parameter.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/events/AddedOwner.mdx#_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nevent AddedOwner(address owner);\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Safes by Module\nDESCRIPTION: Example JSON response from the `/api/v1/modules/{address}/safes/` endpoint. It returns an object containing a single key `safes`, which holds an array of strings representing the addresses of the Safes that have enabled the specified module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Signed Message Using Safe Transaction Service - TypeScript Reference\nDESCRIPTION: This is a TypeScript code reference intended to illustrate the creation of a signed message using the POST /safes/{address}/messages/ endpoint on the Safe Transaction Service. The cited TypeScript file ('../examples/zksync/-v1-safes-{address}-messages--post.ts') would typically include request body construction for EIP191/EIP712 messages and logic for handling API responses. Required dependencies may include a fetch/axios client and Typed API response interfaces.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zksync/-v1-safes-{address}-messages--post.ts\n```\n\n----------------------------------------\n\nTITLE: GET Safe Operation API Endpoint Description (React component annotations)\nDESCRIPTION: This snippet describes the API endpoint for retrieving a SafeOperation object by its hash, including expected response schema, parameters, and dependencies. It uses React component annotations to provide UI documentation and includes a reference to the response schema.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_49\n\nLANGUAGE: React\nCODE:\n```\n<Parameters parameters={[{\"in\":\"path\",\"name\":\"safe_operation_hash\",\"schema\":{\"type\":\"string\"},\"required\":true}]} />\n```\n\nLANGUAGE: React\nCODE:\n```\n<Responses responses={[{\"code\":\"200\",\"schema\":{},\"content\":{\"application/json\":{\"schema\":{\"refName\":\"SafeOperationWithUserOperationResponse\",\"type\":\"object\",\"properties\":{...}}}}}]} />\n```\n\n----------------------------------------\n\nTITLE: Using createDisableModuleTx with gasToken option\nDESCRIPTION: Example showing how to specify the gasToken option when creating a transaction to disable a Safe Module.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/createdisablemoduletx.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst safeTransaction = await protocolKit.createDisableModuleTx(\n  '0x...',\n  options: {\n    gasToken: '0x...'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transaction Analytics by Origin using cURL (Bash)\nDESCRIPTION: Illustrates using cURL to issue a GET request to the `/api/v2/analytics/multisig-transactions/by-origin/` endpoint. This is intended to retrieve analytics data concerning multisig transactions, potentially grouped by their origin, accepting a JSON response via the `Accept` header.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-scroll.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Example for Environment Variables in Safe Infrastructure Deployment\nDESCRIPTION: Copies the sample environment configuration file and edits it to set parameters like reverse proxy port, container versions, and RPC endpoint for Docker Compose deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-infrastructure-deployment.mdx#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncp .env.sample .env\nvi .env\nREVERSE_PROXY_PORT=8000\nCFG_VERSION=latest\nCGW_VERSION=latest\nTXS_VERSION=latest\nUI_VERSION=latest\nEVENTS_VERSION=latest\nRPC_NODE_URL=<REPLACE BY YOUR RPC ENDPOINT>\n```\n\n----------------------------------------\n\nTITLE: Initializing React Native Project with Expo\nDESCRIPTION: This command initializes a new React Native project using Expo. It sets up the basic project structure and configuration for a TypeScript based application. The command specifies the use of a blank-typescript template.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-expo-app@latest --template blank-typescript\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Module Safes Query\nDESCRIPTION: JSON response showing the list of Safe accounts that have the specified module enabled. The response contains a 'safes' array with the addresses of the Safes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safes\": [\"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Module Transaction with Curl in Bash\nDESCRIPTION: Command to retrieve a module transaction using the Safe Transaction Service API. The request requires the module transaction ID as a path parameter and returns transaction details like execution date, block number, and transaction hash.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-celo.safe.global/api/api/v1/module-transaction/0x3b3b57b3 \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Multisig Confirmations List\nDESCRIPTION: This JSON snippet is a sample response from the API endpoint listing multisig confirmations. It contains the total count of confirmations, pagination links (which may be null), and an array of confirmation records. Each confirmation includes the owner Ethereum address, submission timestamp in ISO 8601 format, optional transaction hash (nullable), hexadecimal signature string, and a signature type indicating the signing method.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"submissionDate\": \"2024-06-26T14:57:15.504003Z\",\n      \"transactionHash\": null,\n      \"signature\": \"0xec2c1cf656d997f92247ddf59f30ce718de990ec4f8d4670a37d3d3594862f0d49ad2c553daa2ff937c50d45e9ca6a815f826d29603f8c5c818cb698ddc2383a20\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Tokens Response\nDESCRIPTION: Example JSON response from the tokens endpoint showing a paginated structure with count, navigation links, and results array containing token details like type, address, name, symbol, and decimals.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1846,\n  \"next\": \"https://safe-transaction-sepolia.safe.global/api/v1/tokens/?limit=10&offset=10\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ERC20\",\n      \"address\": \"0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d\",\n      \"name\": \"0x5555.com\",\n      \"symbol\": \"0x5555.com\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x687e43D0aB3248bDfebFE3E8f9F1AB2B9FcE982d.png\",\n      \"trusted\": false\n    }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UI Functionality for React Native Safe App in TypeScript (TSX)\nDESCRIPTION: This snippet references the full content of the 'App.tsx' React Native component which integrates UI components for interacting with a Safe account and managing passkeys. It is intended to be a functional app enabling users to activate their Safe account and handle passkeys. The snippet is a placeholder pointing to an external source file. Dependencies include React Native, appropriate Safe SDK libraries, and TypeScript support. The main input is user interaction via UI components, and the expected output is the ability to manage passkeys and Safe account transactions from the app's interface.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n// from ../../../../examples/react-native-passkeys/App.tsx\n```\n\n----------------------------------------\n\nTITLE: Sample Response - Estimate Gas\nDESCRIPTION: This is a JSON sample response returned after a successful gas estimation. It includes the `safeTxGas` parameter, which represents the estimated gas required for the transaction. This allows users to gauge the cost before submitting the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Executed Transaction: Curl\nDESCRIPTION: This Curl command retrieves executed transactions from the Safe transaction service. It filters for executed transactions and limits the result to one. It requires the Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-guides/transactions.mdx#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'GET' \\\n'https://safe-transaction-sepolia.safe.global/api/v1/safes/0xc62C5cbB96ffffffffffff2f78A4d3071317ffff/multisig-transactions/?executed=true&limit=1' \\\n-H 'accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Creating a Multisig Transaction\nDESCRIPTION: JSON response received after creating a multisig transaction, containing the safeTxGas value which represents the estimated gas required for the transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"45683\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Contract Class Names by Removing Suffixes\nDESCRIPTION: The code demonstrates the renaming of contract classes previously suffixed with Ethers or Web3 to a unified naming convention, improving clarity and reducing redundancy in class references.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/migrate-to-v4.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nSafeBaseContractEthers, SafeBaseContractWeb3 -> SafeBaseContract\nMultiSendBaseContractEthers, MultiSendBaseContractWeb3 -> MultiSendBaseContract\nMultiSendCallOnlyBaseContractEthers, MultiSendCallOnlyBaseContractWeb3 -> MultiSendCallOnlyBaseContract\nSafeProxyFactoryBaseContractEthers, SafeProxyFactoryBaseContractWeb3 -> SafeProxyFactoryBaseContract\nSignMessageLibBaseContractEthers, SignMessageLibBaseContractWeb3 -> SignMessageLibBaseContract\nCreateCallBaseContractEthers, CreateCallBaseContractWeb3 -> CreateCallBaseContract\n```\n\n----------------------------------------\n\nTITLE: Listing Contracts - cURL Request\nDESCRIPTION: This cURL command sends a GET request to the /api/v1/contracts/ endpoint to retrieve a list of known smart contracts. It includes headers to specify the accepted content type and the content type of the request body.  The response will return a list of contracts and their ABIs.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-aurora.safe.global/api/api/v1/contracts/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Retrieving Multisig Transaction Analytics by Origin via Safe API (Bash)\nDESCRIPTION: This cURL command shows how to make a GET request to the `/api/v2/analytics/multisig-transactions/by-origin/` endpoint of the Safe Transaction Service API. It is intended to fetch analytics data about multisig transactions grouped by their origin. The request includes `Accept: application/json` and `content-type: application/json` headers. The documentation indicates a 200 response with no specific body schema described.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v2/analytics/multisig-transactions/by-origin/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n     \n```\n\n----------------------------------------\n\nTITLE: Import Dependencies for Safe ERC-4337 Deployment Script in TypeScript\nDESCRIPTION: Imports necessary modules from permissionless, viem, and dotenv to facilitate blockchain interactions, account management, and Pimlico API calls in a TypeScript environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/erc-4337/guides/permissionless-quickstart.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport 'dotenv/config'\nimport { ENTRYPOINT_ADDRESS_V06, createSmartAccountClient } from 'permissionless'\nimport { signerToSafeSmartAccount } from 'permissionless/accounts'\nimport {\n  createPimlicoBundlerClient,\n  createPimlicoPaymasterClient\n} from 'permissionless/clients/pimlico'\nimport { createPublicClient, http, Hex, encodeFunctionData, parseEther } from 'viem'\nimport { privateKeyToAccount } from 'viem/accounts'\nimport { gnosis } from 'viem/chains'\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response - JSON\nDESCRIPTION: A sample JSON response returned from the \"Get confirmations\" API request. It includes information about the confirmations, like creation and modification timestamps, the owner, signature and signature type. The output contains the count of confirmations and an array of results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Module is Enabled using Safe Protocol Kit\nDESCRIPTION: This snippet demonstrates how to use the `isModuleEnabled` method of the Safe Protocol Kit to check if a Safe Module is enabled for the connected Safe. It requires a pre-initialized Safe Protocol Kit instance and the address of the Safe Module to check. The method returns a promise that resolves to a boolean value indicating whether the module is enabled.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-protocol-kit/safe-modules/ismoduleenabled.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { protocolKit } from './setup.ts'\n\nconst moduleAddress = '0x...'\n\nconst isEnabled = await protocolKit.isModuleEnabled(moduleAddress)\n```\n\n----------------------------------------\n\nTITLE: Gas Estimation Response for Multisig Transaction (JSON)\nDESCRIPTION: This sample JSON response is returned by the gas estimation endpoint of the Safe Transaction API. It provides the 'safeTxGas' field, indicating the estimated gas usage for executing a proposed multisig transaction. The value is a string-formatted integer and informs subsequent transaction execution planning.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safeTxGas\": \"42806\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ApiReference React Component for Linea Network in JSX\nDESCRIPTION: Renders the ApiReference React component with a 'networkName' prop set to 'linea', allowing for the display of network-specific API documentation. This JSX snippet depends on the ApiReference component imported from a local components directory and is intended to be part of the page's rendered output. It visually denotes where the API documentation for the Linea network will appear on the page.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/linea.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<ApiReference networkName=\"linea\"/>\n```\n\n----------------------------------------\n\nTITLE: Sample Response - JSON\nDESCRIPTION: This JSON snippet represents a sample response from the incoming transfers API endpoint. It includes the number of results, navigation links, and an array of transfer objects containing details like the transfer type, execution date, block number, transaction hash, to/from addresses, value, token information, and transfer ID.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-06-25T11:19:00Z\",\n      \"blockNumber\": 6183150,\n      \"transactionHash\": \"0x28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"to\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n      \"value\": \"10000000000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i28fd99978fe7a05160f8da40311cb2e796f17d23f7a3eaea243d4a7f2f636924\",\n      \"tokenInfo\": null,\n      \"from\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\"\n    }\n  ]\n}\n\n```\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Transfer Details\nDESCRIPTION: Provides an example JSON response for a specific transfer, including transfer type, execution date, block number, transaction hash, sender and receiver addresses, value, and token info. This detailed response helps understand individual transfer attributes and is useful for audit or display purposes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ETHER_TRANSFER\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"tokenId\": null,\n  \"tokenAddress\": null,\n  \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n  \"tokenInfo\": null,\n  \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a new owner to the Safe\nDESCRIPTION: Includes a new owner by their address. Necessary for expanding multisig approval capacity and governance. Owner addresses must be checksummed Ethereum addresses.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-reference/common-commands.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nadd_owner <address>\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for zkSync API Reference in Next.js\nDESCRIPTION: This asynchronous `getStaticProps` function pre-renders the zkSync API reference page at build time in a Next.js application. It imports the MDX content (`zksync-reference.mdx`), renders it to an HTML string using `react-dom/server`, extracts headings from this HTML using a utility function (`getHeadingsFromHtml`) and the corresponding Swagger JSON (`zksync-swagger.json`), and finally passes these headings as static props (`ssg.headings`) to the page component.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/zksync.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport ApiReference from '../../../components/ApiReference'\nimport { renderToString } from 'react-dom/server'\nimport { MDXComponents, getHeadingsFromHtml } from '../../../lib/mdx'\nimport Mdx from '../../../components/ApiReference/generated/zksync-reference.mdx'\nimport swagger from '../../../components/ApiReference/schemas/zksync-swagger.json'\n\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample API Response JSON for SafeOperation Retrieval\nDESCRIPTION: This snippet provides a sample JSON response structure returned by the API when retrieving a SafeOperation, detailing fields such as creation time, hash, module address, confirmations, and associated user operation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Safe Operation Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample response from the Safe Transaction API when retrieving a Safe Operation by its hash. It showcases the data structure returned, including details about the operation's creation, modification, confirmations, module address, prepared signature, and associated user operation.  The response is formatted as a JSON object.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-22T10:00:18.892702Z\",\n  \"modified\": \"2024-07-22T10:00:18.892702Z\",\n  \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n  \"validAfter\": null,\n  \"validUntil\": null,\n  \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.898708Z\",\n      \"modified\": \"2024-07-22T10:00:18.898708Z\",\n      \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n      \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"signatureType\": \"CONTRACT_SIGNATURE\"\n    }\n  ],\n  \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n  \"userOperation\": {\n    \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n    \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n    \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n    \"nonce\": 0,\n    \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n    \"callData\": \"0x7bb374280000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000\",\n    \"callGasLimit\": 198268,\n    \"verificationGasLimit\": 3867576,\n    \"preVerificationGas\": 110646,\n    \"maxFeePerGas\": 36776375378,\n    \"maxPriorityFeePerGas\": 199436407,\n    \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n    \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n    \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n    \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing User Operations\nDESCRIPTION: Illustrates the JSON structure returned by the API when successfully listing UserOperations. The response is paginated (`count`, `next`, `previous`) and includes a `results` array. Each item in the array represents a UserOperation, detailing its properties like `ethereumTxHash`, `sender`, `userOperationHash`, gas limits, fees, paymaster details, signature, `entryPoint`, and the linked `safeOperation` object containing details like creation/modification timestamps, hash, validity period, module address, and confirmations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n      \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n      \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\",\n      \"nonce\": 0,\n      \"initCode\": \"0x4e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec671688f0b900000000000000000000000029fcb43b46531bca003ddc8fcb67ffe91900c7620000000000000000000000000000000000000000000000000000000000000060ad27de2a410652abce96ea0fdfc30c2f0fd35952b78f554667111999a28ff3380000000000000000000000000000000000000000000000000000000000000344b63e800d0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000100000000000000000000000038869bf66a61cf6bdb996a6ae40d5853fd43b5260000000000000000000000000000000000000000000000000000000000000140000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b40370000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f100000000000000000000000000000000000000000000000000000000000001c48d80ff0a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000172018ecd4ec46d4d2a6b64fe960b3d64e8b94b2234eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000648d0dc49f00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a581c4a4db7175302464ff3c06380bc3270b403701608cf2e3412c6bda14e6d8a0a7d27c4240fed6f1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640dd9692f4255f6101637c8b43bf63660ffba39cab522b053094b2a07535d7d848ce5efca9aae34aabaee7600328bb0fb5f6a6c5214c8db9303f824f52f2fca42f2b342ce000000000000000000000000ca89cba4813d5b40aec6e57a30d0eeb500d6531b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callData\": \"0x7bb3742800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\n      \"callGasLimit\": 198268,\n      \"verificationGasLimit\": 3867576,\n      \"preVerificationGas\": 110646,\n      \"maxFeePerGas\": 36776375378,\n      \"maxPriorityFeePerGas\": 199436407,\n      \"paymaster\": \"0xDFF7FA1077Bce740a6a212b3995990682c0Ba66d\",\n      \"paymasterData\": \"0x00000000000000000000000000000000000000000000000000000000669e2fe1000000000000000000000000000000000000000000000000000000000000000037a31ba85cc6a4753d5fb73e475ddf22c9ab9a9ce405fdff217c03bff161bc893e7658160bd3cabaefad55b2d5751713484b8b90ef54d85e356916b4fede3dc11b\",\n      \"signature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"entryPoint\": \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\",\n      \"safeOperation\": {\n        \"created\": \"2024-07-22T10:00:18.892702Z\",\n        \"modified\": \"2024-07-22T10:00:18.892702Z\",\n        \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n        \"validAfter\": null,\n        \"validUntil\": null,\n        \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n        \"confirmations\": [\n          {\n            \"created\": \"2024-07-22T10:00:18.898708Z\",\n            \"modified\": \"2024-07-22T10:00:18.898708Z\",\n            \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n            \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n            \"signatureType\": \"CONTRACT_SIGNATURE\"\n          }\n        ],\n        \"preparedSignature\": null\n      }\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Safe Transaction via API (Bash)\nDESCRIPTION: This curl command demonstrates how to call the Safe Transaction Service API to remove a queued transaction. It uses the DELETE HTTP method targeting the specific transaction hash in the URL path. An empty request body is sent, while authentication is handled by an off-chain EIP-712 signature which is typically included in a header (not explicitly shown here).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE https://safe-transaction-celo.safe.global/api/api/v1/multisig-transactions/0xa059b4571d8e6cf551eea796f9d86a414083bdc3d5d5be88486589a7b6214be2/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}'\n```\n\n----------------------------------------\n\nTITLE: Safe Balances Sample Response\nDESCRIPTION: This JSON snippet illustrates a sample response when retrieving a Safe's balances from the Safe Transaction Service API. The response includes balances for both the native coin (e.g., Sepolia ETH) and ERC20 tokens. It presents each token's address, details (name, symbol, decimals, logo URI), and the corresponding balance. The `tokenAddress` and `token` fields are null for the native coin.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_66\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Listening to Stripe Onramp Widget Frontend Events Using TypeScript\nDESCRIPTION: This TypeScript snippet registers event listeners on the Stripe onramp session instance to handle UI lifecycle events such as when the widget UI loads, updates, or modal is opened/closed. These hooks enable developers to update the UI or handle user interactions and errors based on the widget’s state changes. The events include 'onramp_ui_loaded', 'onramp_session_updated', 'onramp_ui_modal_opened', and 'onramp_ui_modal_closed'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/onramp/stripe.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Listen to events using the onrampSession object from one of the previous step\nonrampSession.addEventListener('onramp_ui_loaded', event => {\n  console.log('Onramp UI loaded:', event)\n})\n\nonrampSession.addEventListener('onramp_session_updated', event => {\n  console.log('Onramp session updated:', event)\n})\n\n// For modal overlay render mode only\nonrampSession.addEventListener('onramp_ui_modal_opened', event => {\n  console.log('Onramp UI modal opened:', event)\n})\n\nonrampSession.addEventListener('onramp_ui_modal_closed', event => {\n  console.log('Onramp UI modal closed:', event)\n})\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Safe Operations\nDESCRIPTION: This JSON snippet illustrates a typical response from the Safe operations listing endpoint. It includes properties such as total count, pagination links, and an array of result objects. Each result contains details like creation/modification timestamps, operation hash, validity period, module address, confirmations, and user operation data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/scroll-reference.mdx#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"created\": \"2024-07-22T10:00:18.892702Z\",\n      \"modified\": \"2024-07-22T10:00:18.892702Z\",\n      \"safeOperationHash\": \"0xb59828b1d3b0363641e3bb4d72dd63565d1062a40c6d05469caa0218ce8e0445\",\n      \"validAfter\": null,\n      \"validUntil\": null,\n      \"moduleAddress\": \"0xa581c4A4DB7175302464fF3C06380BC3270b4037\",\n      \"confirmations\": [\n        {\n          \"created\": \"2024-07-22T10:00:18.898708Z\",\n          \"modified\": \"2024-07-22T10:00:18.898708Z\",\n          \"owner\": \"0x608Cf2e3412c6BDA14E6D8A0a7D27c4240FeD6F1\",\n          \"signature\": \"0x000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n          \"signatureType\": \"CONTRACT_SIGNATURE\"\n        }\n      ],\n      \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\",\n      \"userOperation\": {\n        \"ethereumTxHash\": \"0xfe7bc7fcab04ad689e1c5fcca7ad5345481fddc462880655a9a39b827da7b4ac\",\n        \"sender\": \"0x125eb8CcAC85EA322C3859648509823CA05aD7e5\",\n        \"userOperationHash\": \"0x3545a04aa1d10b74164af413253ab0881c86ebe219e166207b3175923202bbc7\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the LangGraph agent with Safe integration\nDESCRIPTION: Main agent implementation that loads the model, creates a LangGraph agent, and attaches tools for Safe interaction with initial prompts for testing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/home/ai-agent-setup.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../../examples/ai-agent/agent.ts\n```\n\n----------------------------------------\n\nTITLE: Obtaining Android Keystore SHA 256 Fingerprint using Keytool in Bash\nDESCRIPTION: This bash command lists detailed information about the Android debug keystore including the SHA 256 fingerprint which is required for setting up passkey authentication on Android emulators. The command is executed from the project root and targets the default debug keystore. The SHA 256 fingerprint obtained should be added to the 'assetlinks.json' configuration file for the app. The output includes the certificate fingerprints necessary for secure app association with the Android emulator environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -list -v -keystore ./android/app/debug.keystore -alias androiddebugkey -storepass android -keypass android\n```\n\n----------------------------------------\n\nTITLE: Rendering Avalanche API Reference Component\nDESCRIPTION: Renders the ApiReference component with the Avalanche network name. This component will display the API documentation for the Avalanche network using the headings provided through static props.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/avalanche.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ApiReference networkName=\"avalanche\"/>\n```\n\n----------------------------------------\n\nTITLE: Using getStorageAt for Storage Inspection in Solidity\nDESCRIPTION: Shows a call to the getStorageAt method on an ISafe interface instance, specifying offset 0 and length 1 to read one storage word from the contract starting at the first slot. Demonstrates proper invocation from within a contract. Requires the ISafe interface and safe implementation. The function expects uint256 parameters: 'offset' (start slot) and 'length' (number of words), and returns bytes with the read data. Input values must fit the contract's storage size; reading out of bounds may result in empty or unexpected bytes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-smart-account/utilities/getStorageAt.mdx#_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n(ISafe safe).getStorageAt(\n    0,\n    1\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a confirmation for a transaction (POST endpoint)\nDESCRIPTION: This snippet explains the POST API endpoint to add a new confirmation to a specific multisig transaction identified by 'safe_operation_hash'. It does not support delegates and allows multiple signatures. The request body should contain the signature data, and responses indicate success or various errors based on input validity.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://safe-transaction-celo.safe.global/api/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/confirmations/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n    -d '{}' \n```\n\n----------------------------------------\n\nTITLE: Sample Response for Delegate Creation\nDESCRIPTION: Indicates that the response for creating a delegate is empty (successful creation). The response code 202 suggests the request has been accepted for processing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Module Transaction Response Structure in JSON\nDESCRIPTION: Example response from the module transaction endpoint showing transaction details including execution date, block number, transaction hash, and other relevant information about the module transaction.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-24T20:54:48Z\",\n  \"executionDate\": \"2024-07-24T20:54:48Z\",\n  \"blockNumber\": 6369595,\n  \"isSuccessful\": true,\n  \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"module\": \"0x9085149079b87E32178669097bc82D341CB65678\",\n  \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n  \"value\": \"10000000000\",\n  \"data\": \"0x00\",\n  \"operation\": 0,\n  \"dataDecoded\": null,\n  \"moduleTransactionId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates via REST API (GET /api/v2/delegates/)\nDESCRIPTION: Retrieves a paginated list of all Safe delegates with optional filtering parameters such as 'safe', 'delegate', 'delegator', and 'label'. The response includes total count, pagination links, and delegate details. Dependencies include JSON schema references and HTTP GET method with query parameters.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/arbitrum-reference.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-arbitrum.safe.global/api/api/v2/delegates/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Safe4337CreateTransactionProps Type Definition\nDESCRIPTION: Defines the structure for the `Safe4337CreateTransactionProps` type, which is used as a parameter for the `createTransaction` method. It includes the transactions to be batched and optional parameters for fee estimation, validity, and nonce configuration.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nSafe4337CreateTransactionProps = {\n  transactions: MetaTransactionData[]\n  options?: {\n    amountToApprove?: bigint\n    validUntil?: number\n    validAfter?: number\n    feeEstimator?: IFeeEstimator\n    customNonce?: bigint\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definition for Retrieving SafeOperation Data\nDESCRIPTION: Defines the GET endpoint '/api/v1/safe-operations/{safe_operation_hash}/' for fetching SafeOperation details by hash, including parameter specifications and expected response schema. It also demonstrates the use of path parameters and response schema referencing.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_53\n\nLANGUAGE: JavaScript\nCODE:\n```\n<Path path=\"/api/v1/safe-operations/{safe_operation_hash}/\" method=\"get\" />\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n<SampleRequestHeader method=\"get\" pathWithParams=\"/api/v1/safe-operations/0x597ba36c626a32a4fcc9f23a4b25605ee30b46584918d6b6442387161dc3c51b/\" />\n```\n\n----------------------------------------\n\nTITLE: Response for adding a confirmation\nDESCRIPTION: The server returns an empty response body upon successful addition of a confirmation (HTTP 201). Error responses include malformed data or processing errors, with corresponding HTTP status codes.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Example Prepared Signature JSON Object\nDESCRIPTION: Provides a JSON object containing a 'preparedSignature' field. This likely represents a pre-formatted or contract-specific signature used for interactions within the Safe protocol or related systems.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"preparedSignature\": \"0x000000000000000000000000000000000000000000000000608cf2e3412c6bda14e6d8a0a7d27c4240fed6f10000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e053c4ce48756bae15e3454ad75ee8d4ba9764ea37ed561b216701c3630c0521774f94a8b7351780daa4a241792f52089af776e0898185318053201a92865b08d0000000000000000000000000000000000000000000000000000000000000002549960de5880e8c687434170f6476605b8fe4aeb9a28632c7995cf3ba831d97631d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034226f726967696e223a22687474703a2f2f6c6f63616c686f73743a33303030222c2263726f73734f726967696e223a66616c736500000000000000000000001f\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Safe4337ExecutableProps Type Definition\nDESCRIPTION: Defines the `Safe4337ExecutableProps` type, which is used as a parameter for the `executeTransaction` method. It includes the `SafeOperation` to be executed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/relay-kit/reference/safe-4337-pack.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nSafe4337ExecutableProps = {\n  executable: EthSafeOperation | SafeOperationResponse\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Creation Status - Safe Transaction Service - TypeScript\nDESCRIPTION: This TypeScript code references an example file demonstrating how to implement a GET request to fetch Safe creation information from the Safe Transaction Service. Requires TypeScript and an HTTP client such as axios or fetch. The endpoint expects the Safe address as a path parameter; returns details including creation time, creator address, transaction hash, and optional decoded setup data. Inputs: a checksummed Safe address. Outputs: an object describing the Safe creation or a suitable error. Limitations include potential ambiguity when multiple Safes are deployed in the same transaction due to indexer limitations.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zkevm-reference.mdx#_snippet_66\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zkevm/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Fetching Message Details\nDESCRIPTION: Provides an example JSON response including timestamps, safe address, message hash, the message content, proposer, associated signatures, confirmation details, and origin info, illustrating how message data is structured and serialized.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created\": \"2024-07-29T16:59:00.807652Z\",\n  \"modified\": \"2024-07-29T16:59:00.807652Z\",\n  \"safe\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\",\n  \"messageHash\": \"0x950cfe6090e742b709ab5f662c10c8b4e06d403a2f8c4654d86af45d93fa3777\",\n  \"message\": \"string message\",\n  \"proposedBy\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n  \"safeAppId\": null,\n  \"confirmations\": [\n    {\n      \"created\": \"2024-07-29T16:59:00.843249Z\",\n      \"modified\": \"2024-07-29T16:59:00.843249Z\",\n      \"owner\": \"0xa6d3DEBAAB2B8093e69109f23A75501F864F74e2\",\n      \"signature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\",\n      \"signatureType\": \"ETH_SIGN\"\n    }\n  ],\n  \"preparedSignature\": \"0x5f12f647a876c1966cfbb785d78add0e504cdd0b56b9e21ac93a566d883f80af0192226678ffbe04b35efd23265f1b516a0b0920c679b13d9a5290af0c4b87931f\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Safes by Module using TypeScript\nDESCRIPTION: This snippet explains the purpose of the API endpoint to fetch safes associated with a specific module address, highlighting required parameters and the expected response containing an array of safe addresses. It relies on a GET request to a REST API with path parameter 'address'.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_47\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-modules-{address}-safes--get.ts\n\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-gnosis-chain.safe.global/api/api/v1/modules/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safes/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Operations API Documentation and Parameters in JSX\nDESCRIPTION: React JSX snippet describing the Safe Operations API endpoint, including detailed query and path parameters for filtering by various fields such as modification date, execution status, and transaction hashes. It uses parameter components to declare required and optional inputs and a response component describing the expected paginated response containing SafeOperation objects with nested UserOperation data. Key parameters include `address` (Safe address), date range filters, boolean execution flags, and pagination controls.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_60\n\nLANGUAGE: jsx\nCODE:\n```\n<Grid container justifyContent='space-between'>\n  <Grid item xs={12} md={5.6}>\n\n    \n\n    Returns the list of SafeOperations for a given Safe account\n\n    \n\n    <Parameters parameters={[{\"in\":\"path\",\"name\":\"address\",\"schema\":{\"type\":\"string\"},\"required\":true},{\"in\":\"query\",\"name\":\"modified__lt\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"modified__gt\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"modified__lte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"modified__gte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"valid_after__lt\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"valid_after__gt\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"valid_after__lte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"valid_after__gte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"valid_until__lt\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"valid_until__gt\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"valid_until__lte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"valid_until__gte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"module_address\",\"schema\":{\"type\":\"string\"}},{\"in\":\"query\",\"name\":\"executed\",\"schema\":{\"type\":\"boolean\"}},{\"in\":\"query\",\"name\":\"has_confirmations\",\"schema\":{\"type\":\"boolean\"}},{\"in\":\"query\",\"name\":\"execution_date__gte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"execution_date__lte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"submission_date__gte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"submission_date__lte\",\"schema\":{\"type\":\"string\",\"format\":\"date-time\"}},{\"in\":\"query\",\"name\":\"transaction_hash\",\"schema\":{\"type\":[\"string\",\"null\"],\"format\":\"byte\"}},{\"name\":\"ordering\",\"required\":false,\"in\":\"query\",\"description\":\"Which field to use when ordering the results.\",\"schema\":{\"type\":\"string\"}},{\"name\":\"limit\",\"required\":false,\"in\":\"query\",\"description\":\"Number of results to return per page.\",\"schema\":{\"type\":\"integer\"}},{\"name\":\"offset\",\"required\":false,\"in\":\"query\",\"description\":\"The initial index from which to return the results.\",\"schema\":{\"type\":\"integer\"}}]} />\n    <Responses responses={[{\"code\":\"200\",\"schema\":{},\"content\":{\"application/json\":{\"schema\":{\"refName\":\"PaginatedSafeOperationWithUserOperationResponseList\",\"type\":\"object\",\"required\":[\"count\",\"results\"],\"properties\":{\"count\":{\"type\":\"integer\",\"example\":123},\"next\":{\"type\":\"string\",\"nullable\":true,\"format\":\"uri\",\"example\":\"http://api.example.org/accounts/?offset=400&limit=100\"},\"previous\":{\"type\":\"string\",\"nullable\":true,\"format\":\"uri\",\"example\":\"http://api.example.org/accounts/?offset=200&limit=100\"},\"results\":{\"type\":\"array\",\"items\":{\"refName\":\"SafeOperationWithUserOperationResponse\",\"type\":\"object\",\"properties\":{\"created\":{\"type\":\"string\",\"format\":\"date-time\"},\"modified\":{\"type\":\"string\",\"format\":\"date-time\"},\"safeOperationHash\":{\"type\":\"string\"},\"validAfter\":{\"type\":\"string\",\"format\":\"date-time\"},\"validUntil\":{\"type\":\"string\",\"format\":\"date-time\"},\"moduleAddress\":{\"type\":\"string\"},\"confirmations\":{\"type\":\"object\",\"additionalProperties\":{},\"description\":\"Filters confirmations queryset\\n\\n:param obj: SafeOperation instance\\n:return: Serialized queryset\",\"readOnly\":true},\"preparedSignature\":{\"type\":\"string\",\"readOnly\":true},\"userOperation\":{\"allOf\":[{\"refName\":\"UserOperationResponse\",\"type\":\"object\",\"properties\":{\"ethereumTxHash\":{\"type\":\"string\"},\"sender\":{\"type\":\"string\"},\"userOperationHash\":{\"type\":\"string\"},\"nonce\":{\"type\":\"integer\",\"minimum\":0},\"initCode\":{\"type\":[\"string\",\"null\"]},\"callData\":{\"type\":[\"string\",\"null\"]},\"callGasLimit\":{\"type\":\"integer\",\"minimum\":0},\"verificationGasLimit\":{\"type\":\"integer\",\"minimum\":0},\"preVerificationGas\":{\"type\":\"integer\",\"minimum\":0},\"maxFeePerGas\":{\"type\":\"integer\",\"minimum\":0},\"maxPriorityFeePerGas\":{\"type\":\"integer\",\"minimum\":0},\"paymaster\":{\"type\":[\"string\",\"null\"]},\"paymasterData\":{\"type\":[\"string\",\"null\"]},\"signature\":{\"type\":\"string\"},\"entryPoint\":{\"type\":\"string\"}},\"required\":[\"callData\",\"callGasLimit\",\"entryPoint\",\"ethereumTxHash\",\"initCode\",\"maxFeePerGas\",\"maxPriorityFeePerGas\",\"nonce\",\"paymaster\",\"paymasterData\",\"preVerificationGas\",\"sender\",\"signature\",\"userOperationHash\",\"verificationGasLimit\"]}],\"readOnly\":true}}}},\"required\":[\"confirmations\",\"created\",\"modified\",\"moduleAddress\",\"preparedSignature\",\"safeOperationHash\",\"userOperation\",\"validAfter\",\"validUntil\"]}}}}}}]} />\n    <Feedback asPath=\"/core-api/transaction-service-reference#List-Safe-Operations\" label='Did this API route run successfully?' small />\n  </Grid>\n  <Grid item xs={12} md={5.6}>\n    <Path path=\"/api/v1/safes/{address}/safe-operations/\" method=\"get\" />\n\n    <SampleRequestHeader method=\"get\" pathWithParams=\"/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/safe-operations/\" />\n```\n\n----------------------------------------\n\nTITLE: Sample TypeScript code for Data Decoder POST Request\nDESCRIPTION: This code comment indicates the TypeScript example used for posting transaction data to the decoding API, facilitating interaction with the API in a strongly typed environment for decoding transaction call data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/xlayer/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Account Balances with Curl (Deprecated)\nDESCRIPTION: Makes a GET request to the deprecated endpoint of the Safe Transaction Service API to retrieve balance information for both native currency (Sepolia ETH) and ERC20 tokens associated with a specific Safe account.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-sepolia.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  // Native coin (Sepolia ETH):\n  {\n    \"tokenAddress\": null,\n    \"token\": null,\n    \"balance\": \"9899990000000000\"\n  },\n  // ERC20 token:\n  {\n    \"tokenAddress\": \"0x0D5b70467E61125b242E70831aEd15D7C12E3F0D\",\n    \"token\": {\n      \"name\": \"SampleToken\",\n      \"symbol\": \"ST\",\n      \"decimals\": 18,\n      \"logoUri\": \"https://safe-transaction-assets.safe.global/tokens/logos/0x0D5b70467E61125b242E70831aEd15D7C12E3F0D.png\"\n    },\n    \"balance\": \"10000000000000000000\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Sample Empty JSON Response for Successful Safe Operation Creation - JSON\nDESCRIPTION: This snippet represents the empty JSON object received as a successful response when a SafeOperation is created via the Safe Transaction API. It indicates that the response body is intentionally unspecified or empty as expected from a 201 (Created) status code for this endpoint. No input fields are required for interpretation. Limitations: May not provide further metadata unless specifically configured by the API provider.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/sepolia-reference.mdx#_snippet_63\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Listing Safe Token Transfers REST API JSON Response Example\nDESCRIPTION: Sample JSON response illustrating the structure and fields returned when querying the list of token transfers. It includes pagination metadata (count, next, previous) and an array of transfer objects containing transfer type, execution date, block number, transaction hash, addresses, values, transferId, and optional token information. This response format supports types such as ETHER_TRANSFER and includes nullable fields for token-specific data.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/linea-reference.mdx#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 1,\n  \"next\": null,\n  \"previous\": null,\n  \"results\": [\n    {\n      \"type\": \"ETHER_TRANSFER\",\n      \"executionDate\": \"2024-07-24T20:54:48Z\",\n      \"blockNumber\": 6369595,\n      \"transactionHash\": \"0x4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e\",\n      \"to\": \"0x3A16E3090e32DDeD2250E862B9d5610BEF13e93d\",\n      \"value\": \"10000000000\",\n      \"tokenId\": null,\n      \"tokenAddress\": null,\n      \"transferId\": \"i4c8bc3a9f32eed6b4cb8225d6884e9c7006d6740b0a6896cee7b254aa037920e0,0,0\",\n      \"tokenInfo\": null,\n      \"from\": \"0x5298A93734C3D979eF1f23F78eBB871879A21F22\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Response after Deleting Multisig Transaction (JSON)\nDESCRIPTION: Indicates a successful DELETE operation where the queued multisig transaction has been removed. No content is returned in the response body. Expected on success with HTTP 204 status code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Delegate API Example (TypeScript)\nDESCRIPTION: This TypeScript snippet indicates the underlying implementation for the delete delegate functionality. It provides context regarding the code implementation for the DELETE operation on the delegate. The example illustrates the architecture and its functions.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v2-delegates-{delegate_address}--delete.ts\n```\n\n----------------------------------------\n\nTITLE: TypeScript placeholder comment for Safe creation API example\nDESCRIPTION: A placeholder comment indicating the location of the TypeScript example code for the Safe creation API. It suggests that the actual implementation code is in a separate example file.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_62\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Fetching All Transactions for a Safe - TypeScript\nDESCRIPTION: This TypeScript snippet is intended to be a placeholder or reference to an example file. It indicates that the complete example for fetching all transactions for a specific Safe address is located in the specified file. No actual code is included here.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Importing UpdateThresholdVariables Type for updateThreshold (TypeScript)\nDESCRIPTION: Code snippet demonstrating how to import the `UpdateThresholdVariables` type definition from `@safe-global/safe-react-hooks`. This type defines the structure of the object required as input for the `updateThreshold` mutation function, containing the new `threshold` value.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/useupdatethreshold.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UpdateThresholdVariables } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Fetch All Transactions (TypeScript)\nDESCRIPTION: This snippet shows an example of the API endpoint used to retrieve all transactions of a Safe in TypeScript. It's a reference to where this request might come from within a larger project.  No actual implementation code is provided; it just indicates the file path of where this code might reside.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Response: Sign Message\nDESCRIPTION: Example of an empty response body returned upon successfully adding a signature to a message (HTTP Status 201 Created).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/xlayer-reference.mdx#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Compile Contracts - Bash\nDESCRIPTION: This command compiles the Solidity contracts in the Hardhat project. It uses the Hardhat compiler to generate the bytecode and ABI for the contracts, ensuring they are ready for deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Viewing Helm Chart Default Values for Safe Stack\nDESCRIPTION: Displays the default configuration values available for the Safe stack Helm chart, allowing users to review and customize parameters before deployment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/safe-infrastructure-deployment.mdx#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nhelm show values safe/safe-stack\n```\n\n----------------------------------------\n\nTITLE: Referencing Safe Transaction Retrieval Example TypeScript\nDESCRIPTION: This snippet is a reference to an external TypeScript/JavaScript example file located at `../examples/base-sepolia/-v1-safes-{address}-all-transactions--get.ts`. It indicates where to find a programmatic example using a client library to interact with the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/base-sepolia/-v1-safes-{address}-all-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Static Props for Scroll API Reference in React\nDESCRIPTION: This code exports a getStaticProps function for Next.js that renders MDX content to extract headings from the Swagger schema. It processes the rendered HTML to create a structured navigation for the API reference documentation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/scroll.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UseAddressParams Type from Safe React Hooks (TypeScript)\nDESCRIPTION: This snippet shows how to import the UseAddressParams type from @safe-global/safe-react-hooks. UseAddressParams allows the configuration of hook behavior by passing typed options to functions like getSignerAddress. No inputs or outputs are demonstrated here; this is purely for adding typing support to your TypeScript code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/reference-sdk-react-hooks/usesafe/getsigneraddress.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UseAddressParams } from '@safe-global/safe-react-hooks'\n```\n\n----------------------------------------\n\nTITLE: Initialize Project Directory - Bash\nDESCRIPTION: These commands create a new project directory and initialize npm within it. The `mkdir` command creates the directory, `cd` navigates into it, and `npm init -y` initializes a new npm project with default settings.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir safe-fallback-handler-tutorial && cd safe-fallback-handler-tutorial\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Response Definition\nDESCRIPTION: This section describes the expected response from the API endpoint. It details the structure of the returned data, including paginated results with counts, next/previous links, and a list of transaction results. The response schema includes definitions for different transaction types (multisig, module, and Ethereum transfers).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_26\n\nLANGUAGE: N/A\nCODE:\n```\n<Responses responses={[{\"code\":\"200\",\"schema\":{},\"content\":{\"application/json\":{\"schema\":{\"refName\":\"PaginatedAllTransactionsSchemaList\",\"type\":\"object\",\"required\":[\"count\",\"results\"],\"properties\":{\"count\":{\"type\":\"integer\",\"example\":123},\"next\":{\"type\":\"string\",\"nullable\":true,\"format\":\"uri\",\"example\":\"http://api.example.org/accounts/?offset=400&limit=100\"},\"previous\":{\"type\":\"string\",\"nullable\":true,\"format\":\"uri\",\"example\":\"http://api.example.org/accounts/?offset=200&limit=100\"},\"results\":{\"type\":\"array\",\"items\":{\"refName\":\"AllTransactionsSchema\",\"type\":\"object\",\"description\":\"Just for the purpose of documenting, don't use it\",\"properties\":{\"txType1\":{\"refName\":\"SafeModuleTransactionWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"created\":{\"type\":\"string\",\"format\":\"date-time\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"isSuccessful\":{\"type\":\"boolean\",\"readOnly\":true},\"transactionHash\":{\"type\":\"string\"},\"safe\":{\"type\":\"string\"},\"module\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":\"string\",\"format\":\"decimal\",\"pattern\":\"^-?\\d{0,78}(?:\\.\\d{0,0})?$\"},\"data\":{\"type\":[\"string\",\"null\"]},\"operation\":{\"enum\":[0,1,2],\"type\":\"integer\",\"description\":\"* `0` - CALL\\n* `1` - DELEGATE_CALL\\n* `2` - CREATE\",\"x-spec-enum-id\":\"73baf6048b75e41c\",\"minimum\":0,\"maximum\":32767},\"dataDecoded\":{\"type\":\"object\",\"additionalProperties\":{},\"readOnly\":true},\"moduleTransactionId\":{\"type\":\"string\",\"description\":\"Internally calculated parameter to uniquely identify a moduleTransaction \\n`ModuleTransactionId = i+tx_hash+trace_address`\"},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":[\"string\",\"null\"]},\"tokenAddress\":{\"type\":[\"string\",\"null\"]},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true}},\"required\":[\"blockNumber\",\"created\",\"data\",\"dataDecoded\",\"executionDate\",\"isSuccessful\",\"module\",\"moduleTransactionId\",\"operation\",\"safe\",\"to\",\"transactionHash\",\"transfers\",\"txType\",\"value\"]},\"txType2\":{\"refName\":\"SafeMultisigTransactionWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"safe\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"},\"data\":{\"type\":[\"string\",\"null\"]},\"operation\":{\"type\":\"integer\",\"minimum\":0},\"gasToken\":{\"type\":[\"string\",\"null\"]},\"safeTxGas\":{\"type\":\"integer\",\"minimum\":0},\"baseGas\":{\"type\":\"integer\",\"minimum\":0},\"gasPrice\":{\"type\":\"string\"},\"refundReceiver\":{\"type\":[\"string\",\"null\"]},\"nonce\":{\"type\":\"integer\",\"minimum\":0},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"submissionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"modified\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"transactionHash\":{\"type\":\"string\"},\"safeTxHash\":{\"type\":\"string\"},\"proposer\":{\"type\":\"string\"},\"proposedByDelegate\":{\"type\":[\"string\",\"null\"]},\"executor\":{\"type\":\"string\",\"null\"],\"readOnly\":true},\"isExecuted\":{\"type\":\"boolean\"},\"isSuccessful\":{\"type\":[\"boolean\",\"null\"],\"readOnly\":true},\"ethGasPrice\":{\"type\":[\"string\",\"null\"],\"readOnly\":true},\"maxFeePerGas\":{\"type\":\"string\",\"null\"],\"readOnly\":true},\"maxPriorityFeePerGas\":{\"type\":\"string\",\"null\"],\"readOnly\":true},\"gasUsed\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"fee\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"origin\":{\"type\":\"string\",\"readOnly\":true},\"dataDecoded\":{\"type\":\"object\",\"additionalProperties\":{},\"readOnly\":true},\"confirmationsRequired\":{\"type\":\"integer\"},\"confirmations\":{\"type\":\"object\",\"additionalProperties\":{},\"description\":\"Filters confirmations queryset\\n:param obj: MultisigConfirmation instance\\n:return: Serialized queryset\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"},\"signatures\":{\"type\":[\"string\",\"null\"]},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":\"string\",\"null\"},\"tokenAddress\":{\"type\":\"string\",\"null\"},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true}},\"required\":[\"baseGas\",\"blockNumber\",\"confirmations\",\"confirmationsRequired\",\"dataDecoded\",\"ethGasPrice\",\"executionDate\",\"executor\",\"fee\",\"gasPrice\",\"gasUsed\",\"isExecuted\",\"isSuccessful\",\"maxFeePerGas\",\"maxPriorityFeePerGas\",\"modified\",\"nonce\",\"operation\",\"origin\",\"proposedByDelegate\",\"proposer\",\"safe\",\"safeTxGas\",\"safeTxHash\",\"submissionDate\",\"to\",\"transactionHash\",\"transfers\",\"trusted\",\"txType\",\"value\"]},\"txType3\":{\"refName\":\"EthereumTxWithTransfersResponse\",\"type\":\"object\",\"properties\":{\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"to\":{\"type\":[\"string\",\"null\"]},\"data\":{\"type\":\"string\"},\"txHash\":{\"type\":\"string\"},\"blockNumber\":{\"type\":[\"integer\",\"null\"],\"readOnly\":true},\"transfers\":{\"type\":\"array\",\"items\":{\"refName\":\"TransferWithTokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"description\":\"Sometimes ERC20/721 `Transfer` events look the same, if token info is available better use that information\\nto check\\n\\n:param obj:\\n:return: `TransferType` as a string\",\"readOnly\":true},\"executionDate\":{\"type\":\"string\",\"format\":\"date-time\"},\"blockNumber\":{\"type\":\"integer\"},\"transactionHash\":{\"type\":\"string\"},\"to\":{\"type\":\"string\"},\"value\":{\"type\":[\"string\",\"null\"]},\"tokenId\":{\"type\":\"string\",\"null\"},\"tokenAddress\":{\"type\":\"string\",\"null\"},\"transferId\":{\"type\":\"string\",\"readOnly\":true,\"description\":\"Internally calculated parameter to uniquely identify a transfer \\nToken transfers are calculated as `transferId = e+tx_hash+log_index` \\nEther transfers are calculated as `transferId = i+tx_hash+trace_address`\"},\"tokenInfo\":{\"refName\":\"TokenInfoResponse\",\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"readOnly\":true},\"address\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"integer\"},\"logoUri\":{\"type\":\"string\",\"readOnly\":true},\"trusted\":{\"type\":\"boolean\"}},\"required\":[\"address\",\"decimals\",\"logoUri\",\"name\",\"symbol\",\"trusted\",\"type\"]},\"from\":{\"type\":\"string\"}},\"required\":[\"blockNumber\",\"executionDate\",\"from\",\"to\",\"tokenId\",\"tokenInfo\",\"transactionHash\",\"transferId\",\"type\",\"value\"]}},\"txType\":{\"type\":\"string\",\"readOnly\":true},\"f\n```\n\n----------------------------------------\n\nTITLE: Sample API Response for Deleting Transaction (JSON)\nDESCRIPTION: Shows that a successful deletion request to the `/api/v1/multisig-transactions/{safe_tx_hash}/` endpoint returns an empty response body, corresponding to an HTTP 204 No Content status code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/polygon-reference.mdx#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\nEmpty Response\n\n```\n\n----------------------------------------\n\nTITLE: Creating .env File\nDESCRIPTION: This creates a .env file in the root of the project to store environment variables. This file is used to store sensitive information such as private keys and owner addresses.  This ensures that sensitive data is not hardcoded in the application.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n// from ../../../../examples/react-native-passkeys/.env-sample\n```\n\n----------------------------------------\n\nTITLE: Sample TypeScript Code Snippet - (reference only)\nDESCRIPTION: This is a reference to a sample typescript file. The content of the snippet is not provided, only a reference. It is related to Safe creation.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_71\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/celo/-v1-safes-{address}-creation--get.ts\n```\n\n----------------------------------------\n\nTITLE: Sample Empty API Response\nDESCRIPTION: This represents the sample response body for a successful creation of a Safe Operation using the `/api/v1/safes/{address}/safe-operations/` endpoint. The API documentation indicates an 'Empty Response' for a successful operation (typically accompanied by an HTTP 201 Created status code).\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/base-sepolia-reference.mdx#_snippet_52\n\nLANGUAGE: text\nCODE:\n```\nEmpty Response\n```\n\n----------------------------------------\n\nTITLE: Decoding Data - TypeScript Example\nDESCRIPTION: This is a placeholder for a TypeScript example related to data decoding using the /api/v1/data-decoder/ endpoint.  The content, likely imported from an example file, demonstrates how to interact with the data decoder to decode transaction data.  It requires a POST request and provides the input data in a format that's compatible with the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v1-data-decoder--post.ts\n```\n\n----------------------------------------\n\nTITLE: Signing a Message Hash Using Safe Transaction Service - TypeScript Reference\nDESCRIPTION: This placeholder references a TypeScript implementation for signing a message via the /messages/{message_hash}/signatures/ API endpoint for the Safe Transaction Service. The actual code is in '../examples/zksync/-v1-messages-{message_hash}-signatures--post.ts', which would typically include the logic for constructing the POST request and handling the API response. Dependencies may include HTTP client libraries such as axios or fetch, and relevant TypeScript types.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zksync/-v1-messages-{message_hash}-signatures--post.ts\n```\n\n----------------------------------------\n\nTITLE: Listing a Safe's Balances (Deprecated) via REST API\nDESCRIPTION: This snippet shows how to get the balance of Ether and ERC20 tokens for a Safe account. It includes the API endpoint, required headers, and a sample JSON response that lists token balances, including native coin and ERC20 tokens with metadata like name, symbol, and logo URI. Dependencies include the API URL and Safe address.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-chiado.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ethers Override in package.json\nDESCRIPTION: Adds an `overrides` section to the `package.json` file. This ensures that the `@safe-global/safe-contracts` dependency uses a specific version of the `ethers` library (v6.13.5) to avoid potential compatibility issues.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-guards/smart-account-guard-tutorial.mdx#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  // ... existing content ...\n  \"overrides\": {\n    \"@safe-global/safe-contracts\": {\n      \"ethers\": \"^6.13.5\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reference External TypeScript Example for Listing Messages\nDESCRIPTION: This comment references an external TypeScript example file located at `../examples/chiado/-v1-safes-{address}-messages--get.ts`. The file demonstrates how to interact with the Safe Transaction Service API endpoint for listing messages of a Safe account (GET `/api/v1/safes/{address}/messages/`). This snippet itself does not contain the implementation code.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/chiado-reference.mdx#_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/chiado/-v1-safes-{address}-messages--get.ts\n```\n\n----------------------------------------\n\nTITLE: Reference to Safe Multisig Query Example (TypeScript)\nDESCRIPTION: This snippet is a reference indicating the location of a complete TypeScript/JavaScript example for querying Safe multisig transactions. It points to an external file containing the full implementation and context for using the API.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/zksync-reference.mdx#_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/zksync/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Initialize Hardhat Project - Bash\nDESCRIPTION: This command initializes a Hardhat project in the current directory. It sets up the necessary configuration files and project structure for a Hardhat-based Ethereum development environment.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/smart-account-fallback-handler/smart-account-fallback-handler-tutorial.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat init\n```\n\n----------------------------------------\n\nTITLE: Listing Delegates API Example (TypeScript)\nDESCRIPTION: This snippet references a TypeScript file related to the delegate listing API call. It is a placeholder indicating the code for constructing the API request is located in a separate TypeScript file.  The purpose is to provide a complete example of how the request would be constructed.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/aurora-reference.mdx#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/aurora/-v2-delegates--get.ts\n```\n\n----------------------------------------\n\nTITLE: List a Safe's Balances API Endpoint Documentation (Deprecated) with curl example\nDESCRIPTION: Details the API route for retrieving the balances of a Safe, including ETH and ERC20 tokens. The endpoint accepts path parameter 'address' and optional query parameters 'trusted' and 'exclude_spam'. The provided curl command demonstrates an example request. The sample response illustrates returning balances for native ETH and ERC20 tokens, including token details and balance amounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/worldchain-reference.mdx#_snippet_59\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Deprecated endpoint for listing Safe balances\n\n```\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET https://safe-transaction-worldchain.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b84f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \n\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Fetching Tokens using TypeScript\nDESCRIPTION: Indicates the location of a TypeScript example file (`../examples/celo/-v1-tokens--get.ts`) for making a GET request to list supported tokens from the Safe Transaction Service API. The actual implementation is not shown in this snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/celo-reference.mdx#_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/celo/-v1-tokens--get.ts\n```\n\n----------------------------------------\n\nTITLE: App Configuration JSON for React Native Passkeys App\nDESCRIPTION: This snippet references the 'app.json' configuration file for the React Native passkeys example app. It includes fields such as 'associatedDomains' where the developer must replace placeholders with the public ngrok domain, Apple Developer Team ID, and app package name consistent with registration files. The configuration ensures that the app properly associates with domain and platform settings required for passkeys functionality. The snippet is a placeholder pointing to an file in the examples directory.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/tutorials/react-native.mdx#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n// from ../../../../examples/react-native-passkeys/app.json\n```\n\n----------------------------------------\n\nTITLE: Links to Usage Guides and Resources\nDESCRIPTION: This part lists navigation links to detailed MDX guides covering deployment, transaction execution, and signature processes, as well as links to related GitHub repositories. These serve as reference points for developers aiming to implement or understand different aspects of the Protocol Kit.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit.mdx#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Placeholder for Listing Safe Messages using TypeScript\nDESCRIPTION: Provides a reference to an external TypeScript example file showing how to retrieve the list of messages for a given Safe account address via the Safe Transaction Service API GET endpoint `/api/v1/safes/{address}/messages/`. Supports optional query parameters like `ordering`, `limit`, and `offset` for pagination and sorting.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mainnet-reference.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// from ../examples/mainnet/-v1-safes-{address}-messages--get.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Kit (Yarn)\nDESCRIPTION: This snippet installs the @safe-global/protocol-kit dependency using yarn. The Safe Protocol Kit is essential for interacting with Safe smart contracts and managing Safe accounts.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/signers/passkeys.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @safe-global/protocol-kit\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Balances via Curl Bash (Deprecated)\nDESCRIPTION: Shows how to use curl to perform a GET request against the deprecated endpoint for listing a Safe's balances. The Safe address is a path parameter. Query parameters 'trusted' and 'exclude_spam' can filter the results.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/optimism-reference.mdx#_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET https://safe-transaction-optimism.safe.global/api/api/v1/safes/0xcd2E72aEBe2A203b8f46DEEC948E6465dB51c75/balances/ \\\n    -H \"Accept: application/json\" \\\n    -H \"content-type: application/json\" \\\n     \n```\n\n----------------------------------------\n\nTITLE: Rendering Safe CLI Documentation Overview with Navigation Cards in React JSX\nDESCRIPTION: This snippet implements a React JSX structure for a documentation page describing the Safe CLI tool. It incorporates a header, descriptive paragraph, and a collection of Cards components each linking to specific subpages like Installation, Demos, Guides, and Reference. The cards utilize imported SVG icons for visual representation and use relative URL paths for navigation. Dependencies include React, the 'nextra/components' Cards and Card components, and local SVG assets. The snippet produces UI elements that facilitate contextual navigation within the documentation site.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/cli-overview.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Cards, Card } from 'nextra/components'\nimport Installation from '../../assets/svg/command-line.svg'\nimport Demo from '../../assets/svg/demo.svg'\nimport Guides from '../../assets/svg/guides.svg'\nimport Reference from '../../assets/svg/reference.svg'\n\n# Safe CLI\n\nSafe CLI is a command-line utility for [Safe Smart Account](./smart-account-overview.mdx). You can use it to manage your Safe account from the command line.\n\nIt does not rely on Safe\\{Core\\} API and can also be used in networks where the Safe services are unavailable.\n\n<Cards>\n  <Card icon={<Installation />} title=\"Installation\" href=\"./cli-installation\"/>\n  <Card icon={<Demo />} title=\"Demos\" href=\"./cli-demos\" />\n  <Card icon={<Guides />} title=\"Guides\" href=\"./cli-guides/recovery-safe-deployment\" />\n  <Card icon={<Reference />} title=\"Reference\" href=\"./cli-reference\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Rendering passkey feature overview with React and Material-UI\nDESCRIPTION: This React code snippet uses Material-UI components to layout informational cards about passkeys, including key management, user experience, and resilience. It imports the Grid component for layout and a CustomCard component for content presentation. Designed to visually communicate passkey benefits in a web app, it depends on @mui/material and a custom component, demonstrating UI composition and responsive design.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/advanced/passkeys/overview.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Grid } from '@mui/material'\nimport CustomCard from '../../../components/CustomCard'\n\n# What are passkeys?\n\nPasskeys are a standard authentication method designed to avoid using traditional passwords, providing a more secure and user-friendly experience.\n\nPasskeys are based on public and private key pairs to secure user authentication. The public key is stored on the server side, while the private key is secured in the user's device. The user is authenticated by proving ownership of the private key, usually with biometric sensors, without extracting it from the device at any time. This method ensures that sensitive information remains protected and reduces the risk of credential theft.\n\n## Why do we need passkeys?\n\nPasskeys offer significant security improvements over traditional passwords. In the context of web3, where secure key management is paramount, passkeys provide an efficient alternative to seed phrases, which are often considered both a security liability and a subpar user experience.\n\n<Grid\n  container\n  spacing={2}\n  display='flex'\n  alignContent='flex-start'\n  mt={3}\n>\n  <Grid item xs={12} md={4}>\n    <CustomCard\n      title={'Key management'}\n      description={'Passkeys eliminate the need for users to store seed phrases securely. They ensure the user\\'s private key remains secure even if a server is compromised.'}\n      url=\"\"\n      newTab={false}\n    />\n  </Grid>\n  <Grid item xs={12} md={4}>\n    <CustomCard\n      title={'User experience'}\n      description={'Passkeys streamline the authentication process by allowing users to sign in to accounts with a biometric sensor, pin, or gesture.'}\n      url=\"\"\n      newTab={false}\n    />\n  </Grid>\n  <Grid item xs={12} md={4}>\n    <CustomCard\n      title={'Resilience'}\n      description={'Passkeys are stored in a device secure element, ensuring they can not be easily accessible to the internet. They can also be synced across multiple devices.'}\n      url=\"\"\n      newTab={false}\n    />\n  </Grid>\n</Grid>\n\nSafe offers the capability to sign into your wallet using passkeys by implementing a dedicated module that verifies the integrity of the key provided.\n\n## Passkeys Support\n\nPasskeys and syncing are supported by Apple and Android devices. If a device uses [Cross-device authentication (CDA)](https://passkeys.dev/docs/reference/terms/#cross-device-authentication-cda), its passkeys will be portable to other devices. You can read more about device support [here](https://passkeys.dev/device-support/#matrix).\n\nPasskeys can also be integrated with ERC-4337, providing enhanced user experience in managing web3 accounts. See our tutorials to build your own implementation, or check out [ERC-4337 support contract for passkeys](https://github.com/safe-global/safe-modules/tree/main/modules/passkey/contracts/4337) for more information.\n\n## Further reading\n\n- [The official W3C standard](https://www.w3.org/TR/webauthn)\n- [WebAuthn API specification](https://webauthn.wtf/how-it-works/basics)\n- [Passkeys 101 by FIDO Alliance](https://fidoalliance.org/passkeys)\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components from Nextra in JavaScript\nDESCRIPTION: This snippet imports Callout and Steps components from the 'nextra/components' package to be used within the documentation page. These components facilitate user interface layout and informational callouts. It requires the 'nextra' framework and assumes a JavaScript environment that supports ES module imports.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/sdk/protocol-kit/guides/signatures/transactions.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Callout, Steps } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Fetching Multisig Transactions (GET) - TypeScript\nDESCRIPTION: This placeholder indicates that an example of fetching multisig transactions in TypeScript exists in the project, although the actual code is not provided within this document. It is located in `../examples/gnosis-chain/-v1-safes-{address}-multisig-transactions--get.ts`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/gnosis-chain-reference.mdx#_snippet_42\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/gnosis-chain/-v1-safes-{address}-multisig-transactions--get.ts\n```\n\n----------------------------------------\n\nTITLE: Fetching Safe Status - TypeScript\nDESCRIPTION: This TypeScript comment serves as an example of where the API call originates from. It indicates the file path of the source code for the API call. It's a reference and not an actual executable code snippet.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/mantle-reference.mdx#_snippet_61\n\nLANGUAGE: TypeScript\nCODE:\n```\n// from ../examples/mantle/-v1-safes-{address}--get.ts\n```\n\n----------------------------------------\n\nTITLE: Listing Messages (GET) - TypeScript\nDESCRIPTION: This placeholder represents the corresponding TypeScript code for listing messages. It is referenced from the path `/../examples/avalanche/-v1-safes-{address}-messages--get.ts`.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/components/ApiReference/generated/avalanche-reference.mdx#_snippet_15\n\nLANGUAGE: js TypeScript\nCODE:\n```\n// from ../examples/avalanche/-v1-safes-{address}-messages--get.ts\n```\n\n----------------------------------------\n\nTITLE: Generating static props with React and MDX for documentation\nDESCRIPTION: This snippet exports an asynchronous function that renders an MDX component to a string, extracts headings from the rendered HTML and a Swagger JSON schema, and returns these as properties for static site generation. Dependencies include React, MDX components, and custom MDX utilities.\nSOURCE: https://github.com/safe-global/safe-docs/blob/main/pages/core-api/transaction-service-reference/worldchain.mdx#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const getStaticProps = async () => {\n  const renderedMdx = <Mdx components={MDXComponents} />\n  const contentString = renderToString(renderedMdx)\n  const headings = getHeadingsFromHtml(swagger, contentString)\n\n  return {\n    props: {\n      ssg: { headings }\n    }\n  }\n}\n```"
  }
]