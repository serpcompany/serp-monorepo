[
  {
    "owner": "miguelgrinberg",
    "repo": "flask-migrate",
    "content": "TITLE: Initializing Flask Application with SQLAlchemy and Migrate\nDESCRIPTION: Basic setup code showing how to initialize a Flask application with SQLAlchemy and Flask-Migrate. Includes configuration of database URI and a sample User model.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'\n\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(128))\n```\n\n----------------------------------------\n\nTITLE: Basic Flask-Migrate Application Setup\nDESCRIPTION: Example of setting up a Flask application with SQLAlchemy and Flask-Migrate, including a basic User model definition\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///app.db'\n\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(128))\n```\n\n----------------------------------------\n\nTITLE: Flask Database Migration CLI Commands\nDESCRIPTION: Series of command-line instructions for initializing, generating, and applying database migrations using Flask-Migrate CLI interface.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflask db init\n```\n\nLANGUAGE: bash\nCODE:\n```\nflask db migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nflask db upgrade\n```\n\nLANGUAGE: bash\nCODE:\n```\nflask db --help\n```\n\n----------------------------------------\n\nTITLE: Generating Automatic Revision Script in Flask-Migrate (Python)\nDESCRIPTION: Creates an automatic revision script by detecting changes in the database model. Provides options for customizing the migration, including SQL generation.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmigrate(directory='migrations', message=None, sql=False, head='head', splice=False, branch_label=None, version_path=None, rev_id=None)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Database in Flask-Migrate (Python)\nDESCRIPTION: Upgrades the database to the specified revision. Can generate SQL statements instead of executing them directly when the sql flag is set.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nupgrade(directory='migrations', revision='head', sql=False, tag=None)\n```\n\n----------------------------------------\n\nTITLE: Initializing Migration Support in Flask-Migrate (Python)\nDESCRIPTION: Initializes migration support for the Flask application. Takes optional arguments for the migration directory and multi-database support.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ninit(directory='migrations', multidb=False)\n```\n\n----------------------------------------\n\nTITLE: Flask-Migrate Application Factory Pattern\nDESCRIPTION: Example of initializing Flask-Migrate using the application factory pattern with init_app method\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\ndb = SQLAlchemy()\nmigrate = Migrate()\n\ndef create_app():\n     \"\"\"Application-factory pattern\"\"\"\n     ...\n     ...\n     db.init_app(app)\n     migrate.init_app(app, db)\n     ...\n     ...\n     return app\n```\n\n----------------------------------------\n\nTITLE: Installing Flask-Migrate Package\nDESCRIPTION: Command to install Flask-Migrate using pip package manager\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install Flask-Migrate\n```\n\n----------------------------------------\n\nTITLE: Downgrading Database in Flask-Migrate (Python)\nDESCRIPTION: Downgrades the database to the specified revision. Supports SQL generation mode and optional tagging of the downgrade operation.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndowngrade(directory='migrations', revision='-1', sql=False, tag=None)\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Revision Script in Flask-Migrate (Python)\nDESCRIPTION: Creates an empty revision script for database migrations. Accepts various parameters to customize the revision, including autogenerate and SQL options.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nrevision(directory='migrations', message=None, autogenerate=False, sql=False, head='head', splice=False, branch_label=None, version_path=None, rev_id=None)\n```\n\n----------------------------------------\n\nTITLE: Checking Current Database Revision in Flask-Migrate (Python)\nDESCRIPTION: Displays the current revision of the database. The head_only option allows focusing on just the latest revision.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ncurrent(directory='migrations', verbose=False, head_only=False)\n```\n\n----------------------------------------\n\nTITLE: Viewing Migration History in Flask-Migrate (Python)\nDESCRIPTION: Displays the list of migrations, optionally within a specified range. Verbose mode provides additional details about each migration.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nhistory(directory='migrations', rev_range=None, verbose=False)\n```\n\n----------------------------------------\n\nTITLE: Merging Revisions in Flask-Migrate (Python)\nDESCRIPTION: Merges two revisions together, creating a new migration file. Useful for combining changes from different branches or resolving conflicts.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nmerge(directory='migrations', revisions='', message=None, branch_label=None, rev_id=None)\n```\n\n----------------------------------------\n\nTITLE: Stamping Database Revision in Flask-Migrate (Python)\nDESCRIPTION: Sets the revision in the database to the specified one without performing any migrations. Useful for marking a database as up-to-date.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nstamp(directory='migrations', revision='head', sql=False, tag=None)\n```\n\n----------------------------------------\n\nTITLE: Custom Migration Configuration\nDESCRIPTION: Example of configuring Migrate with custom options like disabling batch rendering\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nmigrate = Migrate(app, db, render_as_batch=False)\n```\n\n----------------------------------------\n\nTITLE: Displaying Revision Information in Flask-Migrate (Python)\nDESCRIPTION: Shows detailed information about the specified revision, including its identifier and description.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nshow(directory='migrations', revision='head')\n```\n\n----------------------------------------\n\nTITLE: Showing Available Heads in Flask-Migrate (Python)\nDESCRIPTION: Displays the current available heads in the migration script directory. Can resolve dependencies between migrations.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nheads(directory='migrations', verbose=False, resolve_dependencies=False)\n```\n\n----------------------------------------\n\nTITLE: Displaying Branch Points in Flask-Migrate (Python)\nDESCRIPTION: Shows the current branch points in the migration history. Useful for understanding the structure of your migration tree.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nbranches(directory='migrations', verbose=False)\n```\n\n----------------------------------------\n\nTITLE: Editing Revision Scripts in Flask-Migrate (Python)\nDESCRIPTION: Opens the specified revision script(s) in the default text editor ($EDITOR). Allows for manual editing of migration files.\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nedit(directory='migrations', revision='head')\n```\n\n----------------------------------------\n\nTITLE: Alembic Configuration Callback\nDESCRIPTION: Example of using the configure decorator to modify Alembic configuration dynamically\nSOURCE: https://github.com/miguelgrinberg/flask-migrate/blob/main/docs/index.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@migrate.configure\ndef configure_alembic(config):\n    # modify config object\n    return config\n```"
  }
]