[
  {
    "owner": "typeorm",
    "repo": "typeorm",
    "content": "TITLE: Basic Entity Definition in TypeORM\nDESCRIPTION: Demonstrates how to create a basic User entity with primary key and columns using TypeORM decorators. Shows the mapping between TypeScript class and database table structure.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    isActive: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Primary Key in TypeORM Entity\nDESCRIPTION: Example showing how to create an auto-incrementing primary key column using the @PrimaryGeneratedColumn decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column()\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model with Data Mapper Pattern in TypeORM\nDESCRIPTION: Example of creating a User entity using TypeORM decorators with the Data Mapper pattern. Demonstrates basic entity structure with primary key and columns.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeORM Entity with Validation Decorators\nDESCRIPTION: Creates a Post entity class with various validation rules using class-validator decorators. Includes validations for string length, content matching, integer ranges, email format, domain names, and date types.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/validation.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\nimport {\n    Contains,\n    IsInt,\n    Length,\n    IsEmail,\n    IsFQDN,\n    IsDate,\n    Min,\n    Max,\n} from \"class-validator\"\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    @Length(10, 20)\n    title: string\n\n    @Column()\n    @Contains(\"hello\")\n    text: string\n\n    @Column()\n    @IsInt()\n    @Min(0)\n    @Max(10)\n    rating: number\n\n    @Column()\n    @IsEmail()\n    email: string\n\n    @Column()\n    @IsFQDN()\n    site: string\n\n    @Column()\n    @IsDate()\n    createDate: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity Model in TypeORM using TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic User entity using TypeORM decorators. It defines a table structure with id, firstName, lastName, and age columns where id is auto-generated.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Data Source Options\nDESCRIPTION: Example of setting up DataSourceOptions for TypeORM, including common settings and database-specific options. This snippet demonstrates how to configure entities, subscribers, migrations, logging, and other essential parameters.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-options.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: DataSourceOptions = {\n  type: \"mysql\",\n  host: \"localhost\",\n  port: 3306,\n  username: \"user\",\n  password: \"password\",\n  database: \"test_db\",\n  entities: [Post, Category, \"entity/*.js\", \"modules/**/entity/*.js\"],\n  subscribers: [PostSubscriber, AppSubscriber, \"subscriber/*.js\"],\n  migrations: [FirstMigration, SecondMigration, \"migration/*.js\"],\n  logging: [\"query\", \"error\", \"schema\"],\n  logger: \"advanced-console\",\n  synchronize: true,\n  migrationsRun: true,\n  cache: {\n    type: \"redis\",\n    options: {\n      host: \"localhost\",\n      port: 6379\n    }\n  },\n  extra: {\n    connectionLimit: 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding and Counting Entities with findAndCount in TypeORM (TypeScript)\nDESCRIPTION: Shows how to use the findAndCount method to retrieve entities and their total count. This method returns an array containing the matched entities and their count, ignoring pagination settings.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst [timbers, timbersCount] = await repository.findAndCount({\n    where: {\n        firstName: \"Timber\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Basic QueryBuilder SELECT Query in TypeORM\nDESCRIPTION: Demonstrates basic usage of QueryBuilder to fetch a single user by ID. Shows both the TypeScript code and resulting SQL query.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst firstUser = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .where(\"user.id = :id\", { id: 1 })\n    .getOne()\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    user.id as userId,\n    user.firstName as userFirstName,\n    user.lastName as userLastName\nFROM users user\nWHERE user.id = 1\n```\n\n----------------------------------------\n\nTITLE: Using Repository to Find and Update User in TypeORM (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use a Repository in TypeORM to find a user by ID and update their name. It shows the process of obtaining a repository, querying an entity, modifying it, and saving the changes.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/working-with-repository.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { User } from \"./entity/User\"\n\nconst userRepository = dataSource.getRepository(User)\nconst user = await userRepository.findOneBy({\n    id: 1,\n})\nuser.name = \"Umed\"\nawait userRepository.save(user)\n```\n\n----------------------------------------\n\nTITLE: Building Complex SQL Query with TypeORM QueryBuilder in TypeScript\nDESCRIPTION: This snippet demonstrates how to use TypeORM's QueryBuilder to construct a complex SQL query. It includes joining tables, setting conditions, ordering results, and implementing pagination. The query selects published photos with specific names, ordered by ID, with offset and limit applied.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst photos = await AppDataSource.getRepository(Photo)\n    .createQueryBuilder(\"photo\") // first argument is an alias. Alias is what you are selecting - photos. You must specify it.\n    .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n    .leftJoinAndSelect(\"photo.albums\", \"album\")\n    .where(\"photo.isPublished = true\")\n    .andWhere(\"(photo.name = :photoName OR photo.name = :bearName)\")\n    .orderBy(\"photo.id\", \"DESC\")\n    .skip(5)\n    .take(10)\n    .setParameters({ photoName: \"My\", bearName: \"Mishka\" })\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Data Sources in TypeORM\nDESCRIPTION: Example showing how to create multiple DataSource instances connected to different databases. Each data source has its own configuration including database connection details and entity paths.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/multiple-data-sources.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nconst db1DataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"root\",\n    password: \"admin\",\n    database: \"db1\",\n    entities: [__dirname + \"/entity/*{.js,.ts}\"],\n    synchronize: true,\n})\n\nconst db2DataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"root\",\n    password: \"admin\",\n    database: \"db2\",\n    entities: [__dirname + \"/entity/*{.js,.ts}\"],\n    synchronize: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions in TypeORM\nDESCRIPTION: Runs multiple database operations within a single transaction. All operations either succeed together or fail together, ensuring data consistency.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.transaction(async (manager) => {\n    // NOTE: you must perform all database operations using given manager instance\n    // its a special instance of EntityManager working with this transaction\n    // and don't forget to await things here\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One and One-to-Many Relations in TypeORM\nDESCRIPTION: This snippet demonstrates how to create a many-to-one relation between Photo and Author entities, and the corresponding one-to-many relation from Author to Photo.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    OneToMany,\n    JoinColumn,\n} from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class Author {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToMany(() => Photo, (photo) => photo.author) // note: we will create author property in the Photo class below\n    photos: Photo[]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToOne } from \"typeorm\"\nimport { PhotoMetadata } from \"./PhotoMetadata\"\nimport { Author } from \"./Author\"\n\n@Entity()\nexport class Photo {\n    /* ... other columns */\n\n    @ManyToOne(() => Author, (author) => author.photos)\n    author: Author\n}\n```\n\n----------------------------------------\n\nTITLE: Primary Column Definition Examples\nDESCRIPTION: Shows different ways to define primary columns in TypeORM entities, including basic primary column, auto-generated numeric ID, and UUID.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryColumn } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryColumn()\n    id: number\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn(\"uuid\")\n    id: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Modes in TypeORM Queries\nDESCRIPTION: Examples of implementing different lock modes including pessimistic read/write, dirty read, and optimistic locking using TypeORM query builder\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .setLock(\"pessimistic_read\")\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .setLock(\"pessimistic_write\")\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .setLock(\"dirty_read\")\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .setLock(\"optimistic\", existUser.version)\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in TypeORM\nDESCRIPTION: Executes raw SQL queries directly against the database. Includes examples for parameterized queries to prevent SQL injection across different database drivers.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst rawData = await dataSource.query(`SELECT * FROM USERS`)\n\n// You can also use parameters to avoid SQL injection\n// The syntax differs between the drivers\n\n// aurora-mysql, better-sqlite3, capacitor, cordova, \n// expo, mariadb, mysql, nativescript, react-native, \n// sap, sqlite, sqljs\nconst rawData = await dataSource.query(\n    'SELECT * FROM USERS WHERE name = ? and age = ?',\n    [ 'John', 24 ]\n)\n\n// aurora-postgres, cockroachdb, postgres\nconst rawData = await dataSource.query(\n    'SELECT * FROM USERS WHERE name = $1 and age = $2',\n    ['John', 24]\n)\n\n// oracle\nconst rawData = await dataSource.query(\n    'SELECT * FROM USERS WHERE name = :1 and age = :2',\n    ['John', 24]\n)\n\n// spanner\nconst rawData = await dataSource.query(\n    'SELECT * FROM USERS WHERE name = @param0 and age = @param1',\n    [ 'John', 24 ]\n)\n\n// mssql\nconst rawData = await dataSource.query(\n    'SELECT * FROM USERS WHERE name = @0 and age = @1',\n    [ 'John', 24 ]\n)\n```\n\n----------------------------------------\n\nTITLE: Manual Transaction Management with QueryRunner\nDESCRIPTION: Comprehensive example of manually managing transactions using QueryRunner. Shows connection creation, transaction operations, error handling, and proper resource cleanup.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/transactions.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// create a new query runner\nconst queryRunner = dataSource.createQueryRunner()\n\n// establish real database connection using our new query runner\nawait queryRunner.connect()\n\n// now we can execute any queries on a query runner, for example:\nawait queryRunner.query(\"SELECT * FROM users\")\n\n// we can also access entity manager that works with connection created by a query runner:\nconst users = await queryRunner.manager.find(User)\n\n// lets now open a new transaction:\nawait queryRunner.startTransaction()\n\ntry {\n    // execute some operations on this transaction:\n    await queryRunner.manager.save(user1)\n    await queryRunner.manager.save(user2)\n    await queryRunner.manager.save(photos)\n\n    // commit transaction now:\n    await queryRunner.commitTransaction()\n} catch (err) {\n    // since we have errors let's rollback changes we made\n    await queryRunner.rollbackTransaction()\n} finally {\n    // you need to release query runner which is manually created:\n    await queryRunner.release()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Transaction using DataSource\nDESCRIPTION: Demonstrates how to create a basic transaction using TypeORM's DataSource object. The transaction is executed within a callback function that receives a transactional entity manager.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/transactions.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait myDataSource.transaction(async (transactionalEntityManager) => {\n    // execute queries using transactionalEntityManager\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Relations Using QueryBuilder in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates how to use QueryBuilder to load related entities with more flexibility. This approach allows for custom join types, conditions, and ordering.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations-faq.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.profile\", \"profile\")\n    .leftJoinAndSelect(\"user.photos\", \"photo\")\n    .leftJoinAndSelect(\"user.videos\", \"video\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Composite Primary Key Definition\nDESCRIPTION: Demonstrates how to create an entity with composite primary keys using multiple @PrimaryColumn decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryColumn } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryColumn()\n    firstName: string\n\n    @PrimaryColumn()\n    lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Database Information with TypeORM QueryRunner\nDESCRIPTION: This section showcases various QueryRunner methods for retrieving database information such as database names, schemas, tables, and columns. These methods are essential for inspecting the current state of the database schema.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ngetDatabases(): Promise<string[]>\n\ngetSchemas(database?: string): Promise<string[]>\n\ngetTable(tableName: string): Promise<Table|undefined>\n\ngetTables(tableNames: string[]): Promise<Table[]>\n\nhasDatabase(database: string): Promise<boolean>\n\nhasSchema(schema: string): Promise<boolean>\n\nhasTable(table: Table|string): Promise<boolean>\n\nhasColumn(table: Table|string, columnName: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Initializing DataSource in TypeORM\nDESCRIPTION: Initializes the DataSource and opens a connection pool to the database. Must be called before performing any database operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.initialize()\n```\n\n----------------------------------------\n\nTITLE: Creating Columns with Generated Values in TypeORM\nDESCRIPTION: Shows how to use the @Generated decorator in TypeORM to create columns with automatically generated values like UUIDs.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryColumn()\n    id: number\n\n    @Column()\n    @Generated(\"uuid\")\n    uuid: string\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Find Operation in TypeORM\nDESCRIPTION: Demonstrates the simplest form of a find operation in TypeORM without any arguments, which selects all columns from the user table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find()\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\"\n```\n\n----------------------------------------\n\nTITLE: Database Table Structure Representation\nDESCRIPTION: Shows the resulting database table structure created from the User entity definition.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n+-------------+--------------+----------------------------+\n|                          user                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| firstName   | varchar(255) |                            |\n| lastName    | varchar(255) |                            |\n| isActive    | boolean      |                            |\n+-------------+--------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Data Mapper Repository Operations in TypeORM\nDESCRIPTION: Demonstrates common repository operations using the Data Mapper pattern including saving, finding, and removing entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = MyDataSource.getRepository(User)\n\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.age = 25\nawait userRepository.save(user)\n\nconst allUsers = await userRepository.find()\nconst firstUser = await userRepository.findOneBy({\n    id: 1,\n}) // find by id\nconst timber = await userRepository.findOneBy({\n    firstName: \"Timber\",\n    lastName: \"Saw\",\n}) // find by firstName and lastName\n\nawait userRepository.remove(timber)\n```\n\n----------------------------------------\n\nTITLE: Basic Column Decorator Usage in TypeORM Entity\nDESCRIPTION: Demonstrates how to use the @Column decorator with various options to define table columns in a TypeORM entity class. The example shows primary, varchar with length/unique constraints, nullable, and boolean columns with default values.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"users\")\nexport class User {\n    @Column({ primary: true })\n    id: number\n\n    @Column({ type: \"varchar\", length: 200, unique: true })\n    firstName: string\n\n    @Column({ nullable: true })\n    lastName: string\n\n    @Column({ default: false })\n    isActive: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using OR Operator in TypeORM Query\nDESCRIPTION: Demonstrates how to use the OR operator in a TypeORM query by providing an array of conditions in the 'where' option.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    where: [\n        { firstName: \"Timber\", lastName: \"Saw\" },\n        { firstName: \"Stan\", lastName: \"Lee\" },\n    ],\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\" WHERE (\"firstName\" = 'Timber' AND \"lastName\" = 'Saw') OR (\"firstName\" = 'Stan' AND \"lastName\" = 'Lee')\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSource for Migrations in TypeScript\nDESCRIPTION: Configuration of the TypeORM DataSource with migration options, including database connection parameters and migration table name specification.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nexport default new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [\n        /*...*/\n    ],\n    migrations: [\n        /*...*/\n    ],\n    migrationsTableName: \"custom_migration_table\",\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Operations in Transaction\nDESCRIPTION: Example of executing multiple database operations within a single transaction. Shows how to save multiple entities while maintaining transaction integrity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/transactions.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait myDataSource.manager.transaction(async (transactionalEntityManager) => {\n    await transactionalEntityManager.save(users)\n    await transactionalEntityManager.save(photos)\n    // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity with @Entity Decorator in TypeScript\nDESCRIPTION: Demonstrates how to use the @Entity decorator to mark a class as a database entity, specifying the table name and additional options like engine, database, schema, etc.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity({\n    name: \"users\",\n    engine: \"MyISAM\",\n    database: \"example_dev\",\n    schema: \"schema_with_best_tables\",\n    synchronize: false,\n    orderBy: {\n        name: \"ASC\",\n        id: \"DESC\",\n    },\n})\nexport class User {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Common Table Expressions in TypeORM QueryBuilder\nDESCRIPTION: Demonstrates how to use common table expressions in TypeORM QueryBuilder to create complex queries. It shows an example of selecting users based on a subquery result.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await connection.getRepository(User)\n    .createQueryBuilder('user')\n    .select(\"user.id\", 'id')\n    .addCommonTableExpression(`\n      SELECT \"userId\" FROM \"post\"\n    `, 'post_users_ids')\n    .where(`user.id IN (SELECT \"userId\" FROM 'post_users_ids')`)\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship in TypeORM User Entity\nDESCRIPTION: This code defines a User entity with a one-to-one relationship to a Photo entity. It demonstrates the basic structure of a TypeORM entity with a relation but is missing the required @JoinColumn decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToOne()\n    photo: Photo\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model with Active Record Pattern in TypeORM\nDESCRIPTION: Example of creating a User entity using TypeORM decorators with the Active Record pattern by extending BaseEntity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from \"typeorm\"\n\n@Entity()\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Migrations in TypeORM\nDESCRIPTION: Demonstrates how to run pending migrations and undo the last executed migration using the Connection API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait connection.runMigrations();\n\nawait connection.undoLastMigration();\n```\n\n----------------------------------------\n\nTITLE: Releasing Query Runner Resources in TypeORM\nDESCRIPTION: Shows how to properly release a query runner of an entity manager. This method should only be used when the query runner was created and managed manually to avoid resource leaks.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-manager-api.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait manager.release()\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in TypeORM (TypeScript)\nDESCRIPTION: Shows how to execute raw SQL queries using the query method. It includes examples for different database drivers and demonstrates how to use parameterized queries to prevent SQL injection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst rawData = await repository.query(`SELECT * FROM USERS`)\n\n// You can also use parameters to avoid SQL injection\n// The syntax differs between the drivers\n\n// aurora-mysql, better-sqlite3, capacitor, cordova, \n// expo, mariadb, mysql, nativescript, react-native, \n// sap, sqlite, sqljs\nconst rawData = await repository.query(\n    'SELECT * FROM USERS WHERE name = ? and age = ?',\n    [ 'John', 24 ]\n)\n\n// aurora-postgres, cockroachdb, postgres\nconst rawData = await repository.query(\n    'SELECT * FROM USERS WHERE name = $1 and age = $2',\n    ['John', 24]\n)\n\n// oracle\nconst rawData = await repository.query(\n    'SELECT * FROM USERS WHERE name = :1 and age = :2',\n    ['John', 24]\n)\n\n// spanner\nconst rawData = await repository.query(\n    'SELECT * FROM USERS WHERE name = @param0 and age = @param1',\n    [ 'John', 24 ]\n)\n\n// mssql\nconst rawData = await repository.query(\n    'SELECT * FROM USERS WHERE name = @0 and age = @1',\n    [ 'John', 24 ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using ArrayContains Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the ArrayContains operator in a TypeORM query to find posts with categories containing a specific value.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrayContains } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    categories: ArrayContains([\"TypeScript\"]),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"categories\" @> '{TypeScript}'\n```\n\n----------------------------------------\n\nTITLE: Advanced Querying with QueryBuilder in TypeORM\nDESCRIPTION: Example of using QueryBuilder for complex queries with conditions, joins, ordering, and pagination. This demonstrates the flexibility of QueryBuilder for constructing SQL queries programmatically.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nlet photos = await connection\n    .getRepository(Photo)\n    .createQueryBuilder(\"photo\") // first argument is an alias. Alias is what you are selecting - photos. You must specify it.\n    .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n    .leftJoinAndSelect(\"photo.albums\", \"album\")\n    .where(\"photo.isPublished = true\")\n    .andWhere(\"(photo.name = :photoName OR photo.name = :bearName)\")\n    .orderBy(\"photo.id\", \"DESC\")\n    .skip(5)\n    .take(10)\n    .setParameters({ photoName: \"My\", bearName: \"Mishka\" })\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Array Column in PostgreSQL\nDESCRIPTION: Example showing how to define an enum array column in PostgreSQL with a default value using TypeScript decorators. The column uses a string enum type with an array flag and sets a default value.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({\n    type: \"enum\",\n    enum: StringEnum,\n    array: true,\n    default: [StringEnum.ADMIN]\n})\nstringEnums: StringEnum[];\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Column Type in TypeORM\nDESCRIPTION: This snippet shows how to define an enum column type in TypeORM using TypeScript enums. It demonstrates the usage with a User entity and a UserRole enum.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum UserRole {\n    ADMIN = \"admin\",\n    EDITOR = \"editor\",\n    GHOST = \"ghost\",\n}\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column({\n        type: \"enum\",\n        enum: UserRole,\n        default: UserRole.GHOST,\n    })\n    role: UserRole\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Named Indices in TypeORM\nDESCRIPTION: Shows how to create named indices by specifying custom index names in the @Index decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/indices.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, Index } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Index(\"name1-idx\")\n    @Column()\n    firstName: string\n\n    @Column()\n    @Index(\"name2-idx\")\n    lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using UUID Generation Strategy with PrimaryGeneratedColumn\nDESCRIPTION: Demonstrates how to use the UUID generation strategy with @PrimaryGeneratedColumn decorator to create string-based UUID primary keys in a TypeORM entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn(\"uuid\")\n    id: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using EntityManager with DataSource in TypeORM (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use EntityManager accessed via DataSource to find a user by ID, update their name, and save the changes. It shows the basic operations of querying and updating an entity using TypeORM's EntityManager.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/working-with-entity-manager.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\nimport { User } from \"./entity/User\"\n\nconst myDataSource = new DataSource(/*...*/)\nconst user = await myDataSource.manager.findOneBy(User, {\n    id: 1,\n})\nuser.name = \"Umed\"\nawait myDataSource.manager.save(user)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Generated SQL Query in TypeORM QueryBuilder\nDESCRIPTION: Shows how to debug TypeORM queries by retrieving the generated SQL using the getQuery() method. This is useful for understanding the actual SQL being executed.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst sql = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .where(\"user.id = :id\", { id: 1 })\n    .getQuery()\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `user`.`id` as `userId`, `user`.`firstName` as `userFirstName`, `user`.`lastName` as `userLastName` FROM `users` `user` WHERE `user`.`id` = ?\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Column Indexes in TypeORM\nDESCRIPTION: This snippet demonstrates how to create single-column indexes using the @Index decorator on entity properties. It shows both default index creation and specifying custom index names.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/indices.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, Index } from \"typeorm\";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Index()\n  @Column()\n  firstName: string;\n\n  @Column()\n  @Index()\n  lastName: string;\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, Index } from \"typeorm\";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Index(\"name1-idx\")\n  @Column()\n  firstName: string;\n\n  @Column()\n  @Index(\"name2-idx\")\n  lastName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting and Loading Many-to-Many Related Entities in TypeORM\nDESCRIPTION: This snippet demonstrates how to insert albums and photos with a many-to-many relationship, and then load a photo with its related albums using TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from \"./index\"\n\n// create a few albums\nconst album1 = new Album()\nalbum1.name = \"Bears\"\nawait AppDataSource.manager.save(album1)\n\nconst album2 = new Album()\nalbum2.name = \"Me\"\nawait AppDataSource.manager.save(album2)\n\n// create a few photos\nconst photo = new Photo()\nphoto.name = \"Me and Bears\"\nphoto.description = \"I am near polar bears\"\nphoto.filename = \"photo-with-bears.jpg\"\nphoto.views = 1\nphoto.isPublished = true\nphoto.albums = [album1, album2]\nawait AppDataSource.manager.save(photo)\n\n// now our photo is saved and albums are attached to it\n// now lets load them:\nconst loadedPhoto = await AppDataSource.getRepository(Photo).findOne({\n    where: {\n        id: 1,\n    },\n    relations: {\n        albums: true,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Long-Running Query Logging in TypeORM\nDESCRIPTION: This snippet demonstrates how to log queries that exceed a specified execution time by setting the 'maxQueryExecutionTime' option in the data source configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    host: \"localhost\",\n    ...\n    maxQueryExecutionTime: 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration Interface in TypeScript with TypeORM\nDESCRIPTION: This snippet demonstrates how to create a migration class that implements the MigrationInterface. It shows the usage of QueryRunner to create tables, indexes, columns, and foreign keys in the 'up' method, and how to revert these changes in the 'down' method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    MigrationInterface,\n    QueryRunner,\n    Table,\n    TableIndex,\n    TableColumn,\n    TableForeignKey,\n} from \"typeorm\"\n\nexport class QuestionRefactoringTIMESTAMP implements MigrationInterface {\n    async up(queryRunner: QueryRunner): Promise<void> {\n        await queryRunner.createTable(\n            new Table({\n                name: \"question\",\n                columns: [\n                    {\n                        name: \"id\",\n                        type: \"int\",\n                        isPrimary: true,\n                    },\n                    {\n                        name: \"name\",\n                        type: \"varchar\",\n                    },\n                ],\n            }),\n            true,\n        )\n\n        await queryRunner.createIndex(\n            \"question\",\n            new TableIndex({\n                name: \"IDX_QUESTION_NAME\",\n                columnNames: [\"name\"],\n            }),\n        )\n\n        await queryRunner.createTable(\n            new Table({\n                name: \"answer\",\n                columns: [\n                    {\n                        name: \"id\",\n                        type: \"int\",\n                        isPrimary: true,\n                    },\n                    {\n                        name: \"name\",\n                        type: \"varchar\",\n                    },\n                    {\n                        name: \"created_at\",\n                        type: \"timestamp\",\n                        default: \"now()\",\n                    },\n                ],\n            }),\n            true,\n        )\n\n        await queryRunner.addColumn(\n            \"answer\",\n            new TableColumn({\n                name: \"questionId\",\n                type: \"int\",\n            }),\n        )\n\n        await queryRunner.createForeignKey(\n            \"answer\",\n            new TableForeignKey({\n                columnNames: [\"questionId\"],\n                referencedColumnNames: [\"id\"],\n                referencedTableName: \"question\",\n                onDelete: \"CASCADE\",\n            }),\n        )\n    }\n\n    async down(queryRunner: QueryRunner): Promise<void> {\n        const table = await queryRunner.getTable(\"answer\")\n        const foreignKey = table.foreignKeys.find(\n            (fk) => fk.columnNames.indexOf(\"questionId\") !== -1,\n        )\n        await queryRunner.dropForeignKey(\"answer\", foreignKey)\n        await queryRunner.dropColumn(\"answer\", \"questionId\")\n        await queryRunner.dropTable(\"answer\")\n        await queryRunner.dropIndex(\"question\", \"IDX_QUESTION_NAME\")\n        await queryRunner.dropTable(\"question\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JoinTable in TypeORM Many-to-Many Relations (TypeScript)\nDESCRIPTION: This example shows how to use @JoinTable decorator to customize the junction table in a many-to-many relation. It demonstrates how to set custom table name and column names for both sides of the relation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@ManyToMany(type => Category)\n@JoinTable({\n    name: \"question_categories\", // table name for the junction table of this relation\n    joinColumn: {\n        name: \"question\",\n        referencedColumnName: \"id\"\n    },\n    inverseJoinColumn: {\n        name: \"category\",\n        referencedColumnName: \"id\"\n    }\n})\ncategories: Category[];\n```\n\n----------------------------------------\n\nTITLE: Using Active Record Methods in TypeORM\nDESCRIPTION: This code snippet shows how to use Active Record methods for saving, removing, and querying entities in TypeORM. It demonstrates basic CRUD operations on the User entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/active-record-data-mapper.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// example how to save AR entity\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.isActive = true\nawait user.save()\n\n// example how to remove AR entity\nawait user.remove()\n\n// example how to load AR entities\nconst users = await User.find({ skip: 2, take: 5 })\nconst newUsers = await User.findBy({ isActive: true })\nconst timber = await User.findOneBy({ firstName: \"Timber\", lastName: \"Saw\" })\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with findBy in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates how to use the findBy method to query entities based on specific criteria. This method returns an array of entities that match the given conditions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst timbers = await repository.findBy({\n    firstName: \"Timber\",\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Indexes in TypeORM\nDESCRIPTION: This snippet illustrates how to create composite indexes (indexes on multiple columns) by applying the @Index decorator to the entity class and specifying an array of column names. It also shows how to create a unique composite index.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/indices.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, Index } from \"typeorm\";\n\n@Entity()\n@Index([\"firstName\", \"lastName\"])\n@Index([\"firstName\", \"middleName\", \"lastName\"], { unique: true })\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  middleName: string;\n\n  @Column()\n  lastName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Using Many-to-Many Relationships in TypeORM\nDESCRIPTION: Complete example demonstrating how to create albums, create photos, associate them in a many-to-many relationship, save them to the database, and then load the relationships.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nlet connection = await createConnection(options)\n\n// create a few albums\nlet album1 = new Album()\nalbum1.name = \"Bears\"\nawait connection.manager.save(album1)\n\nlet album2 = new Album()\nalbum2.name = \"Me\"\nawait connection.manager.save(album2)\n\n// create a few photos\nlet photo = new Photo()\nphoto.name = \"Me and Bears\"\nphoto.description = \"I am near polar bears\"\nphoto.filename = \"photo-with-bears.jpg\"\nphoto.albums = [album1, album2]\nawait connection.manager.save(photo)\n\n// now our photo is saved and albums are attached to it\n// now lets load them:\nconst loadedPhoto = await connection\n    .getRepository(Photo)\n    .findOne(1, { relations: [\"albums\"] })\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Validation\nDESCRIPTION: Demonstrates how to validate a Post entity instance using class-validator's validate function. Shows error handling and entity saving process with TypeORM's EntityManager.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/validation.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validate } from \"class-validator\"\n\nlet post = new Post()\npost.title = \"Hello\" // should not pass\npost.text = \"this is a great post about hell world\" // should not pass\npost.rating = 11 // should not pass\npost.email = \"google.com\" // should not pass\npost.site = \"googlecom\" // should not pass\n\nconst errors = await validate(post)\nif (errors.length > 0) {\n    throw new Error(`Validation failed!`)\n} else {\n    await dataSource.manager.save(post)\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding N+1 Query Problem with leftJoinAndSelect in TypeORM\nDESCRIPTION: This snippet demonstrates how to use leftJoinAndSelect to retrieve user posts in a single query, avoiding multiple small queries and improving performance.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource.getRepository(User)\n    .createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.posts\", \"post\")\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Entity with findOne in TypeORM (TypeScript)\nDESCRIPTION: Shows how to use the findOne method to retrieve the first entity that matches the given conditions. This method returns a single entity or null if no match is found.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await repository.findOne({\n    where: {\n        firstName: \"Timber\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining View Entity Columns in TypeORM\nDESCRIPTION: This example demonstrates how to define columns in a view entity using the @ViewColumn decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/view-entities.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ViewEntity, ViewColumn } from \"typeorm\"\n\n@ViewEntity({\n    expression: `\n        SELECT \"post\".\"id\" AS \"id\", \"post\".\"name\" AS \"name\", \"category\".\"name\" AS \"categoryName\"\n        FROM \"post\" \"post\"\n        LEFT JOIN \"category\" \"category\" ON \"post\".\"categoryId\" = \"category\".\"id\"\n    `,\n})\nexport class PostCategory {\n    @ViewColumn()\n    id: number\n\n    @ViewColumn()\n    name: string\n\n    @ViewColumn()\n    categoryName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base Content Entity for Single Table Inheritance in TypeORM\nDESCRIPTION: This snippet defines a Content entity as the base for single table inheritance, using @TableInheritance decorator to specify the discriminator column.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\n@TableInheritance({ column: { type: \"varchar\", name: \"type\" } })\nexport class Content {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Data with Parameters in TypeORM Query Builder\nDESCRIPTION: Demonstrates how to use parameters to prevent SQL injection when constructing queries. It shows the safe way to include user input in WHERE clauses.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n.where(\"user.name = :name\", { name: \"Timber\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\n.where(\"user.name = :name\")\n.setParameter(\"name\", \"Timber\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\n.where(\"user.name IN (:...names)\", { names: [ \"Timber\", \"Crystal\", \"Lina\" ] })\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Entity with findOne in TypeORM (TypeScript)\nDESCRIPTION: Shows how to use the findOne method to retrieve the first entity that matches the given conditions. This method returns a single entity or null if no match is found.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await repository.findOne({\n    where: {\n        firstName: \"Timber\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Entity Schema in TypeORM\nDESCRIPTION: This snippet demonstrates a complex entity schema definition for a person, including various column types, checks, indices, and unique constraints.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/separating-entity-definition.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EntitySchema} from \"typeorm\";\n\nexport const PersonSchema = new EntitySchema({\n    name: \"person\",\n    columns: {\n        id: {\n            primary: true,\n            type: \"int\",\n            generated: \"increment\"\n        },\n        firstName: {\n            type: String,\n            length: 30\n        },\n        lastName: {\n            type: String,\n            length: 50,\n            nullable: false\n        },\n        age: {\n            type: Number,\n            nullable: false\n        }\n    },\n    checks: [\n        { expression: `\"firstName\" <> 'John' AND \"lastName\" <> 'Doe'` },\n        { expression: `\"age\" > 18` }\n    ],\n    indices: [\n        {\n            name: \"IDX_TEST\",\n            unique: true,\n            columns: [\n                \"firstName\",\n                \"lastName\"\n            ]\n        }\n    ],\n    uniques: [\n        {\n            name: \"UNIQUE_TEST\",\n            columns: [\n                \"firstName\",\n                \"lastName\"\n            ]\n        }\n    ]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing @AfterLoad Entity Listener in TypeORM\nDESCRIPTION: Demonstrates how to use the @AfterLoad decorator to define a method that is called each time an entity is loaded using QueryBuilder or repository/manager find methods.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @AfterLoad()\n    updateCounters() {\n        if (this.likesCount === undefined) this.likesCount = 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Mapping Profile Photo with Custom Join\nDESCRIPTION: Uses leftJoinAndMapOne to load a user's profile photo and map it to the profilePhoto property. Filters photos to only include those marked as profile photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await createQueryBuilder(\"user\")\n    .leftJoinAndMapOne(\n        \"user.profilePhoto\",\n        \"user.photos\",\n        \"photo\",\n        \"photo.isForProfile = TRUE\",\n    )\n    .where(\"user.name = :name\", { name: \"Timber\" })\n    .getOne()\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relation with Cascade in TypeORM (TypeScript)\nDESCRIPTION: This snippet demonstrates how to define a many-to-many relation between Category and Question entities with cascade enabled. It shows the entity definitions and how to use the relation in practice.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from \"typeorm\"\nimport { Question } from \"./Question\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @ManyToMany((type) => Question, (question) => question.categories)\n    questions: Question[]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    @ManyToMany((type) => Category, (category) => category.questions, {\n        cascade: true,\n    })\n    @JoinTable()\n    categories: Category[]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst category1 = new Category()\ncategory1.name = \"ORMs\"\n\nconst category2 = new Category()\ncategory2.name = \"Programming\"\n\nconst question = new Question()\nquestion.title = \"How to ask questions?\"\nquestion.text = \"Where can I ask TypeORM-related questions?\"\nquestion.categories = [category1, category2]\nawait dataSource.manager.save(question)\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Schema with Relations in TypeORM\nDESCRIPTION: Defines a post entity schema with a many-to-many relationship to categories. This demonstrates how to set up relationships between entities when using the EntitySchema approach.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntitySchema } from \"typeorm\"\n\nexport const PostEntity = new EntitySchema({\n    name: \"post\",\n    columns: {\n        id: {\n            type: Number,\n            primary: true,\n            generated: true,\n        },\n        title: {\n            type: String,\n        },\n        text: {\n            type: String,\n        },\n    },\n    relations: {\n        categories: {\n            type: \"many-to-many\",\n            target: \"category\", // CategoryEntity\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relationship in TypeORM (User Entity)\nDESCRIPTION: This snippet demonstrates how to define the User entity with a one-to-many relationship to Photo. The @OneToMany decorator establishes that a user can have multiple photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-one-one-to-many-relations.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToMany(() => Photo, (photo) => photo.user)\n    photos: Photo[]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Find Options in TypeORM\nDESCRIPTION: A comprehensive example demonstrating the use of multiple find options together in a TypeORM query, including select, relations, where, order, skip, take, and cache.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    select: {\n        firstName: true,\n        lastName: true,\n    },\n    relations: {\n        profile: true,\n        photos: true,\n        videos: true,\n    },\n    where: {\n        firstName: \"Timber\",\n        lastName: \"Saw\",\n        profile: {\n            userName: \"tshaw\",\n        },\n    },\n    order: {\n        name: \"ASC\",\n        id: \"DESC\",\n    },\n    skip: 5,\n    take: 10,\n    cache: true,\n})\n```\n\n----------------------------------------\n\nTITLE: 定义Photo实体与ManyToOne关系 (TypeScript)\nDESCRIPTION: 使用@Entity装饰器定义Photo实体，并通过@ManyToOne装饰器建立与User实体的多对一关系。包含id、url属性和user关系。\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/many-to-one-one-to-many-relations.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from \"typeorm\";\nimport { User } from \"./User\";\n\n@Entity()\nexport class Photo {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  url: string;\n\n  @ManyToOne(() => User, user => user.photos)\n  user: User;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Entity for One-to-One Relation in TypeORM\nDESCRIPTION: This snippet defines the Profile entity using TypeORM decorators. It includes a primary generated ID and two columns for gender and photo.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Profile {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    gender: string\n\n    @Column()\n    photo: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Repositories in TypeORM\nDESCRIPTION: New syntax for extending repositories with custom methods using the DataSource API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const UserRepository = myDataSource.getRepository(UserEntity).extend({\n    findUsersWithPhotos() {\n        return this.find({\n            relations: {\n                photos: true,\n            },\n        })\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Options in TypeORM Relations (TypeScript)\nDESCRIPTION: This example shows how to configure different cascade options for various relations in a Post entity. It demonstrates full cascades, insert-only cascades, update-only cascades, and combined insert-update cascades.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(Post)\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    // Full cascades on categories.\n    @ManyToMany((type) => PostCategory, {\n        cascade: true,\n    })\n    @JoinTable()\n    categories: PostCategory[]\n\n    // Cascade insert here means if there is a new PostDetails instance set\n    // on this relation, it will be inserted automatically to the db when you save this Post entity\n    @ManyToMany((type) => PostDetails, (details) => details.posts, {\n        cascade: [\"insert\"],\n    })\n    @JoinTable()\n    details: PostDetails[]\n\n    // Cascade update here means if there are changes to an existing PostImage, it\n    // will be updated automatically to the db when you save this Post entity\n    @ManyToMany((type) => PostImage, (image) => image.posts, {\n        cascade: [\"update\"],\n    })\n    @JoinTable()\n    images: PostImage[]\n\n    // Cascade insert & update here means if there are new PostInformation instances\n    // or an update to an existing one, they will be automatically inserted or updated\n    // when you save this Post entity\n    @ManyToMany((type) => PostInformation, (information) => information.posts, {\n        cascade: [\"insert\", \"update\"],\n    })\n    @JoinTable()\n    informations: PostInformation[]\n}\n```\n\n----------------------------------------\n\nTITLE: Using MongoDB Entity Manager in TypeORM\nDESCRIPTION: Shows how to use the MongoEntityManager for handling entities in a MongoDB connection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager: MongoEntityManager = connection.mongoManager;\n//你可以调用manager或mongodb-manager特定方法，例如find：\nconst user = await manager.findOne(1);\n```\n\n----------------------------------------\n\nTITLE: Managing Unique Constraints with TypeORM QueryRunner\nDESCRIPTION: This snippet demonstrates QueryRunner methods for creating and dropping unique constraints in tables. These operations help enforce data uniqueness across specified columns.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ncreateUniqueConstraint(table: Table|string, uniqueConstraint: TableUnique): Promise<void>\n\ncreateUniqueConstraints(table: Table|string, uniqueConstraints: TableUnique[]): Promise<void>\n\ndropUniqueConstraint(table: Table|string, uniqueOrName: TableUnique|string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Printing SQL Query for Debugging\nDESCRIPTION: Uses printSql to print the generated SQL to the console before executing the query. This is helpful for debugging while still getting the query results.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await createQueryBuilder(\"user\")\n    .where(\"user.firstName = :firstName\", { firstName: \"Timber\" })\n    .orWhere(\"user.lastName = :lastName\", { lastName: \"Saw\" })\n    .printSql()\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Entity with findOneBy in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates the use of findOneBy method to retrieve the first entity that matches simple conditions. This method is similar to findOne but uses a simplified where clause.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await repository.findOneBy({ firstName: \"Timber\" })\n```\n\n----------------------------------------\n\nTITLE: Loading User with Profile using QueryBuilder in TypeORM\nDESCRIPTION: This snippet demonstrates how to load a User entity with its related Profile using TypeORM's QueryBuilder and leftJoinAndSelect.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.profile\", \"profile\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Building TypeORM Distribution Package\nDESCRIPTION: Command to build a distribution package of TypeORM that generates output in the build/package directory for testing or linking.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run package\n```\n\n----------------------------------------\n\nTITLE: Implementing Subqueries in TypeORM\nDESCRIPTION: Various approaches to implementing subqueries in WHERE, FROM, and SELECT clauses using TypeORM query builder\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await dataSource\n    .getRepository(Post)\n    .createQueryBuilder(\"post\")\n    .where((qb) => {\n        const subQuery = qb\n            .subQuery()\n            .select(\"user.name\")\n            .from(User, \"user\")\n            .where(\"user.registered = :registered\")\n            .getQuery()\n        return \"post.title IN \" + subQuery\n    })\n    .setParameter(\"registered\", true)\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await dataSource\n    .createQueryBuilder()\n    .select(\"user.name\", \"name\")\n    .from((subQuery) => {\n        return subQuery\n            .select(\"user.name\", \"name\")\n            .from(User, \"user\")\n            .where(\"user.registered = :registered\", { registered: true })\n    }, \"user\")\n    .getRawMany()\n```\n\n----------------------------------------\n\nTITLE: Complete Example of View Entities in TypeORM\nDESCRIPTION: This comprehensive example demonstrates the creation of two entities and a view entity, along with data insertion and querying.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/view-entities.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n}\n\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToOne,\n    JoinColumn,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    categoryId: number\n\n    @ManyToOne(() => Category)\n    @JoinColumn({ name: \"categoryId\" })\n    category: Category\n}\n\nimport { ViewEntity, ViewColumn, DataSource } from \"typeorm\"\n\n@ViewEntity({\n    expression: (dataSource: DataSource) =>\n        dataSource\n            .createQueryBuilder()\n            .select(\"post.id\", \"id\")\n            .addSelect(\"post.name\", \"name\")\n            .addSelect(\"category.name\", \"categoryName\")\n            .from(Post, \"post\")\n            .leftJoin(Category, \"category\", \"category.id = post.categoryId\"),\n})\nexport class PostCategory {\n    @ViewColumn()\n    id: number\n\n    @ViewColumn()\n    name: string\n\n    @ViewColumn()\n    categoryName: string\n}\n\nimport { Category } from \"./entity/Category\"\nimport { Post } from \"./entity/Post\"\nimport { PostCategory } from \"./entity/PostCategory\"\n\nconst category1 = new Category()\ncategory1.name = \"Cars\"\nawait dataSource.manager.save(category1)\n\nconst category2 = new Category()\ncategory2.name = \"Airplanes\"\nawait dataSource.manager.save(category2)\n\nconst post1 = new Post()\npost1.name = \"About BMW\"\npost1.categoryId = category1.id\nawait dataSource.manager.save(post1)\n\nconst post2 = new Post()\npost2.name = \"About Boeing\"\npost2.categoryId = category2.id\nawait dataSource.manager.save(post2)\n\nconst postCategories = await dataSource.manager.find(PostCategory)\nconst postCategory = await dataSource.manager.findOneBy(PostCategory, { id: 1 })\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relation in TypeORM Entity (TypeScript)\nDESCRIPTION: Shows how to use the @OneToMany decorator to establish a one-to-many relationship between User and Photo entities. This example demonstrates the User entity with a collection of associated Photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToMany((type) => Photo, (photo) => photo.user)\n    photos: Photo[]\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Entity or Failing with findOneOrFail in TypeORM (TypeScript)\nDESCRIPTION: Shows how to use the findOneOrFail method to retrieve the first entity that matches the given conditions. This method throws an error if no match is found.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await repository.findOneOrFail({\n    where: {\n        firstName: \"Timber\",\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Oracle TNS Connection String\nDESCRIPTION: Example of an Oracle TNS (Transparent Network Substrate) connection string used for configuring Oracle database connections. It specifies the protocol, host, port, SID, service name, instance name, and server type.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-options.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(DESCRIPTION=\n  (ADDRESS=(PROTOCOL=tcp)(HOST=sales-server)(PORT=1521))\n  (CONNECT_DATA=\n     (SID=sales)\n     (SERVICE_NAME=sales.us.example.com)\n     (INSTANCE_NAME=sales))\n     (SERVER=shared)))\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Event Subscriber in TypeORM\nDESCRIPTION: Demonstrates how to create an event subscriber that listens to events for all entities. This is done by implementing EntitySubscriberInterface without specifying a particular entity type.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n@EventSubscriber()\nexport class PostSubscriber implements EntitySubscriberInterface {\n    /**\n     * Called before entity insertion.\n     */\n    beforeInsert(event: InsertEvent<any>) {\n        console.log(`BEFORE ENTITY INSERTED: `, event.entity)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Caching in TypeORM Data Source\nDESCRIPTION: This example shows how to configure Redis as an external caching tool for TypeORM, providing more efficient caching capabilities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    cache: {\n        type: \"redis\",\n        options: {\n            host: \"localhost\",\n            port: 6379\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Adjacency List Pattern for Tree Entities in TypeORM\nDESCRIPTION: Shows how to implement the Adjacency list pattern for tree structures in TypeORM using self-referencing relationships.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    ManyToOne,\n    OneToMany,\n} from \"typeorm\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @ManyToOne((type) => Category, (category) => category.children)\n    parent: Category\n\n    @OneToMany((type) => Category, (category) => category.parent)\n    children: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Provider Implementation\nDESCRIPTION: Example of implementing a custom cache provider class and configuration\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomQueryResultCache implements QueryResultCache {\n    constructor(private dataSource: DataSource) {}\n    ...\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    ...\n    cache: {\n        provider(dataSource) {\n            return new CustomQueryResultCache(dataSource);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Entities with QueryBuilder in TypeORM\nDESCRIPTION: Example of loading related entities using QueryBuilder, which provides more flexibility for complex queries. This approach uses join operations to load photos with their metadata.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConnection } from \"typeorm\"\nimport { Photo } from \"./entity/Photo\"\nimport { PhotoMetadata } from \"./entity/PhotoMetadata\"\n\ncreateConnection(/*...*/)\n    .then(async (connection) => {\n        /*...*/\n        let photos = await connection\n            .getRepository(Photo)\n            .createQueryBuilder(\"photo\")\n            .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n            .getMany()\n    })\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Entity or Failing with findOneByOrFail in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates the use of findOneByOrFail method to retrieve the first entity that matches simple conditions. This method is similar to findOneOrFail but uses a simplified where clause and throws an error if no match is found.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await repository.findOneByOrFail({ firstName: \"Timber\" })\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeORM DataSource with Basic Configuration\nDESCRIPTION: Creates and initializes a basic MySQL DataSource with connection details. Shows how to handle successful connection and error cases.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nconst AppDataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n})\n\nAppDataSource.initialize()\n    .then(() => {\n        console.log(\"Data Source has been initialized!\")\n    })\n    .catch((err) => {\n        console.error(\"Error during Data Source initialization\", err)\n    })\n```\n\n----------------------------------------\n\nTITLE: Working with Tree Entities in TypeORM\nDESCRIPTION: This code snippet shows how to create and save tree entities using TypeORM's EntityManager. It demonstrates creating parent-child relationships between Category entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/tree-entities.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst a1 = new Category()\na1.name = \"a1\"\nawait dataSource.manager.save(a1)\n\nconst a11 = new Category()\na11.name = \"a11\"\na11.parent = a1\nawait dataSource.manager.save(a11)\n\nconst a12 = new Category()\na12.name = \"a12\"\na12.parent = a1\nawait dataSource.manager.save(a12)\n\nconst a111 = new Category()\na111.name = \"a111\"\na111.parent = a11\nawait dataSource.manager.save(a111)\n\nconst a112 = new Category()\na112.name = \"a112\"\na112.parent = a11\nawait dataSource.manager.save(a112)\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Referencing Relation in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates how to create a self-referencing relation for a Category entity, allowing categories to have parent and child categories. This is useful for tree-like structures or implementing the adjacency list pattern.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations-faq.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToOne,\n    OneToMany,\n} from \"typeorm\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    @ManyToOne((type) => Category, (category) => category.childCategories)\n    parentCategory: Category\n\n    @OneToMany((type) => Category, (category) => category.parentCategory)\n    childCategories: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Simple JSON Column in TypeORM Entity (TypeScript)\nDESCRIPTION: Demonstrates how to use the 'simple-json' column type in a TypeORM entity to store JSON-serializable data in a single database column.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/entities.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column(\"simple-json\")\n    profile: { name: string; nickname: string };\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User();\nuser.profile = { name: \"John\", nickname: \"Malkovich\" };\n```\n\n----------------------------------------\n\nTITLE: Basic Insert Using TypeORM QueryBuilder in TypeScript\nDESCRIPTION: Demonstrates how to insert multiple rows into the database using TypeORM's QueryBuilder. This approach is the most efficient for performance and supports bulk insertions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/insert-query-builder.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .insert()\n    .into(User)\n    .values([\n        { firstName: \"Timber\", lastName: \"Saw\" },\n        { firstName: \"Phantom\", lastName: \"Lancer\" },\n    ])\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Adding Category to Post using Entity IDs in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a category to a post using only their IDs, without the need to load full entities. It's useful for performance optimization when dealing with large datasets.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relational-query-builder.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.createQueryBuilder().relation(Post, \"categories\").of(1).add(3)\n```\n\n----------------------------------------\n\nTITLE: Saving Entities with One-to-One Relationship\nDESCRIPTION: Demonstrates how to create and save both Photo and PhotoMetadata entities with a one-to-one relationship, establishing the connection by setting the photo property in the metadata object.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Photo } from \"./entity/Photo\"\nimport { PhotoMetadata } from \"./entity/PhotoMetadata\"\n\n// create a photo\nconst photo = new Photo()\nphoto.name = \"Me and Bears\"\nphoto.description = \"I am near polar bears\"\nphoto.filename = \"photo-with-bears.jpg\"\nphoto.views = 1\nphoto.isPublished = true\n\n// create a photo metadata\nconst metadata = new PhotoMetadata()\nmetadata.height = 640\nmetadata.width = 480\nmetadata.compressed = true\nmetadata.comment = \"cybershoot\"\nmetadata.orientation = \"portrait\"\nmetadata.photo = photo // this way we connect them\n\n// get entity repositories\nconst photoRepository = AppDataSource.getRepository(Photo)\nconst metadataRepository = AppDataSource.getRepository(PhotoMetadata)\n\n// first we should save a photo\nawait photoRepository.save(photo)\n\n// photo is saved. Now we need to save a photo metadata\nawait metadataRepository.save(metadata)\n\n// done\nconsole.log(\n    \"Metadata is saved, and the relation between metadata and photo is created in the database too\",\n)\n```\n\n----------------------------------------\n\nTITLE: Using Repository Pattern for Entity Operations\nDESCRIPTION: Refactors the entity operations to use the Repository pattern instead of EntityManager. This approach is more convenient when working frequently with specific entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Photo } from \"./entity/Photo\"\nimport { AppDataSource } from \"./index\"\n\nconst photo = new Photo()\nphoto.name = \"Me and Bears\"\nphoto.description = \"I am near polar bears\"\nphoto.filename = \"photo-with-bears.jpg\"\nphoto.views = 1\nphoto.isPublished = true\n\nconst photoRepository = AppDataSource.getRepository(Photo)\n\nawait photoRepository.save(photo)\nconsole.log(\"Photo has been saved\")\n\nconst savedPhotos = await photoRepository.find()\nconsole.log(\"All photos from the db: \", savedPhotos)\n```\n\n----------------------------------------\n\nTITLE: Customizing Closure Table Options in TypeORM\nDESCRIPTION: This code snippet demonstrates how to customize the closure table name and column names when implementing a Closure Table tree structure in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/tree-entities.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Tree(\"closure-table\", {\n    closureTableName: \"category_closure\",\n    ancestorColumnName: (column) => \"ancestor_\" + column.propertyName,\n    descendantColumnName: (column) => \"descendant_\" + column.propertyName,\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Entity with Repository in TypeORM\nDESCRIPTION: Demonstrates how partial updates using Repository.update() affect the event.entity property in subscriber methods. Shows that only updated fields are available in the event object, not the complete entity with primary keys.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait postRepository.update(post.id, { description: \"Bacon ipsum dolor amet cow\" })\n\n// post.subscriber.ts\nafterUpdate(event: UpdateEvent<Post>) {\n  console.log(event.entity) // outputs { description: 'Bacon ipsum dolor amet cow' }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Question Entity with Many-to-Many Relation in TypeORM\nDESCRIPTION: This code defines a Question entity with a many-to-many relationship to the Category entity. It uses the @ManyToMany and @JoinTable decorators to establish the relation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    @ManyToMany(() => Category)\n    @JoinTable()\n    categories: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DataSource and QueryRunner in TypeORM EntityManager\nDESCRIPTION: Examples showing how to access the DataSource and QueryRunner instances from an EntityManager.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-manager-api.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataSource = manager.dataSource\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryRunner = manager.queryRunner\n```\n\n----------------------------------------\n\nTITLE: Implementing Closure Table Pattern for Tree Entities in TypeORM\nDESCRIPTION: Shows how to implement the Closure table pattern for tree structures in TypeORM using the @Tree decorator and specialized tree column decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Tree,\n    Column,\n    PrimaryGeneratedColumn,\n    TreeChildren,\n    TreeParent,\n    TreeLevelColumn,\n} from \"typeorm\"\n\n@Entity()\n@Tree(\"closure-table\")\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @TreeChildren()\n    children: Category[]\n\n    @TreeParent()\n    parent: Category\n\n    @TreeLevelColumn()\n    level: number\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Join Column in TypeORM Entity (TypeScript)\nDESCRIPTION: Shows how to use the @JoinColumn decorator to customize the join column name, referenced column name, and foreign key name in a many-to-one relationship between Post and Category entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @ManyToOne((type) => Category)\n    @JoinColumn({\n        name: \"cat_id\",\n        referencedColumnName: \"name\",\n        foreignKeyConstraintName: \"fk_cat_id\"\n    })\n    category: Category\n}\n```\n\n----------------------------------------\n\nTITLE: Using Where Clause in TypeORM Query\nDESCRIPTION: Illustrates how to use the 'where' option to specify conditions for querying entities in TypeORM. It includes examples of simple conditions and querying embedded entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    where: {\n        firstName: \"Timber\",\n        lastName: \"Saw\",\n    },\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\"\nWHERE \"firstName\" = 'Timber' AND \"lastName\" = 'Saw'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    relations: {\n        project: true,\n    },\n    where: {\n        project: {\n            name: \"TypeORM\",\n            initials: \"TORM\",\n        },\n    },\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\"\nLEFT JOIN \"project\" ON \"project\".\"id\" = \"user\".\"projectId\"\nWHERE \"project\".\"name\" = 'TypeORM' AND \"project\".\"initials\" = 'TORM'\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Data Types in TypeORM\nDESCRIPTION: This snippet demonstrates how to specify custom data types for entity columns. It shows different ways to define column types including using options object and direct type specification.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column({\n        length: 100,\n    })\n    name: string\n\n    @Column(\"text\")\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column(\"double\")\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities using Repository.find in TypeORM\nDESCRIPTION: This example shows how to load entities with their related entities using the Repository.find method with the relations option. It demonstrates loading from both sides of the relationship.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-one-one-to-many-relations.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = dataSource.getRepository(User)\nconst users = await userRepository.find({\n    relations: {\n        photos: true,\n    },\n})\n\n// or from inverse side\n\nconst photoRepository = dataSource.getRepository(Photo)\nconst photos = await photoRepository.find({\n    relations: {\n        user: true,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Database Schema for Many-to-Many Relation in TypeORM\nDESCRIPTION: This shell output shows the resulting database schema for the many-to-many relation between Question and Category entities, including the join table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n+-------------+--------------+----------------------------+\n|                        category                         |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(255) |                            |\n+-------------+--------------+----------------------------+\n\n+-------------+--------------+----------------------------+\n|                        question                         |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| title       | varchar(255) |                            |\n| text        | varchar(255) |                            |\n+-------------+--------------+----------------------------+\n\n+-------------+--------------+----------------------------+\n|              question_categories_category               |\n+-------------+--------------+----------------------------+\n| questionId  | int(11)      | PRIMARY KEY FOREIGN KEY    |\n| categoryId  | int(11)      | PRIMARY KEY FOREIGN KEY    |\n+-------------+--------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Saving Many-to-Many Relations in TypeORM\nDESCRIPTION: This TypeScript code demonstrates how to save a many-to-many relation between Question and Category entities using TypeORM's entity manager.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst category1 = new Category()\ncategory1.name = \"animals\"\nawait dataSource.manager.save(category1)\n\nconst category2 = new Category()\ncategory2.name = \"zoo\"\nawait dataSource.manager.save(category2)\n\nconst question = new Question()\nquestion.title = \"dogs\"\nquestion.text = \"who let the dogs out?\"\nquestion.categories = [category1, category2]\nawait dataSource.manager.save(question)\n```\n\n----------------------------------------\n\nTITLE: Creating Materialized View Indices in TypeORM\nDESCRIPTION: This snippet shows how to create indices for materialized views in PostgreSQL using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/view-entities.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewEntity({\n    materialized: true,\n    expression: (dataSource: DataSource) =>\n        dataSource\n            .createQueryBuilder()\n            .select(\"post.id\", \"id\")\n            .addSelect(\"post.name\", \"name\")\n            .addSelect(\"category.name\", \"categoryName\")\n            .from(Post, \"post\")\n            .leftJoin(Category, \"category\", \"category.id = post.categoryId\"),\n})\nexport class PostCategory {\n    @ViewColumn()\n    id: number\n\n    @Index()\n    @ViewColumn()\n    name: string\n\n    @Index(\"catname-idx\")\n    @ViewColumn()\n    categoryName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Index in SQL for TypeORM\nDESCRIPTION: This SQL snippet demonstrates how to create a custom index using a case-insensitive comparison on a column. This type of index cannot be automatically generated by TypeORM and needs to be created manually.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/indices.md#2025-04-08_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX \"POST_NAME_INDEX\" ON \"post\" (lower(\"name\"))\n```\n\n----------------------------------------\n\nTITLE: Cross-Database Query Example\nDESCRIPTION: Shows how to query data across multiple databases using TypeORM's QueryBuilder. Demonstrates both entity-based and table path-based approaches.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/multiple-data-sources.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .createQueryBuilder()\n    .select()\n    .from(User, \"user\")\n    .addFrom(Photo, \"photo\")\n    .andWhere(\"photo.userId = user.id\")\n    .getMany()\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"secondDB\".\"user\" \"user\", \"thirdDB\".\"photo\" \"photo\"\n    WHERE \"photo\".\"userId\" = \"user\".\"id\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .createQueryBuilder()\n    .select()\n    .from(\"secondDB.user\", \"user\")\n    .addFrom(\"thirdDB.photo\", \"photo\")\n    .andWhere(\"photo.userId = user.id\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Using Not Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the Not operator in a TypeORM query to find posts with titles not equal to a specific value.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Not } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: Not(\"About #1\"),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"title\" != 'About #1'\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascading Operations in TypeORM Relationships\nDESCRIPTION: Example of setting up cascading operations in relationships to automatically save related entities. By setting cascade: true on the @OneToOne decorator, the metadata entity will be saved when the photo is saved.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n    /// ... other columns\n\n    @OneToOne((type) => PhotoMetadata, (metadata) => metadata.photo, {\n        cascade: true,\n    })\n    metadata: PhotoMetadata\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateConnection(options)\n    .then(async (connection) => {\n        // 创建 photo 对象\n        let photo = new Photo()\n        photo.name = \"Me and Bears\"\n        photo.description = \"I am near polar bears\"\n        photo.filename = \"photo-with-bears.jpg\"\n        photo.isPublished = true\n\n        // 创建 photo metadata 对象\n        let metadata = new PhotoMetadata()\n        metadata.height = 640\n        metadata.width = 480\n        metadata.compressed = true\n        metadata.comment = \"cybershoot\"\n        metadata.orientation = \"portait\"\n\n        photo.metadata = metadata // this way we connect them\n\n        // 获取 repository\n        let photoRepository = connection.getRepository(Photo)\n\n        // 保存photo的同时保存metadata\n        await photoRepository.save(photo)\n\n        console.log(\"Photo is saved, photo metadata is saved too.\")\n    })\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Creating Materialized View Indices in TypeORM\nDESCRIPTION: This snippet shows how to create indices for materialized views in PostgreSQL using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/view-entities.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewEntity({\n    materialized: true,\n    expression: (dataSource: DataSource) =>\n        dataSource\n            .createQueryBuilder()\n            .select(\"post.id\", \"id\")\n            .addSelect(\"post.name\", \"name\")\n            .addSelect(\"category.name\", \"categoryName\")\n            .from(Post, \"post\")\n            .leftJoin(Category, \"category\", \"category.id = post.categoryId\"),\n})\nexport class PostCategory {\n    @ViewColumn()\n    id: number\n\n    @Index()\n    @ViewColumn()\n    name: string\n\n    @Index(\"catname-idx\")\n    @ViewColumn()\n    categoryName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Skip Updates for Unchanged Values in PostgreSQL\nDESCRIPTION: Demonstrates how to optimize PostgreSQL inserts by skipping the update operation when the values haven't changed. This can improve performance by avoiding unnecessary update operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/insert-query-builder.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .insert()\n    .into(User)\n    .values({\n        firstName: \"Timber\",\n        lastName: \"Saw\",\n        externalId: \"abc123\",\n    })\n    .orUpdate(\n        [\"firstName\", \"lastName\"],\n        [\"externalId\"],\n        {\n            skipUpdateIfNoValuesChanged: true,\n        }\n    )\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Query Execution with Parameters\nDESCRIPTION: Examples of executing raw SQL queries with different parameter syntaxes for various database drivers.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-manager-api.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst rawData = await manager.query(`SELECT * FROM USERS`)\n\n// You can also use parameters to avoid SQL injection\n// The syntax differs between the drivers\n\n// aurora-mysql, better-sqlite3, capacitor, cordova, \n// expo, mariadb, mysql, nativescript, react-native, \n// sap, sqlite, sqljs\nconst rawData = await manager.query(\n    'SELECT * FROM USERS WHERE name = ? and age = ?',\n    [ 'John', 24 ]\n)\n\n// aurora-postgres, cockroachdb, postgres\nconst rawData = await manager.query(\n    'SELECT * FROM USERS WHERE name = $1 and age = $2',\n    ['John', 24]\n)\n\n// oracle\nconst rawData = await manager.query(\n    'SELECT * FROM USERS WHERE name = :1 and age = :2',\n    ['John', 24]\n)\n\n// spanner\nconst rawData = await manager.query(\n    'SELECT * FROM USERS WHERE name = @param0 and age = @param1',\n    [ 'John', 24 ]\n)\n\n// mssql\nconst rawData = await manager.query(\n    'SELECT * FROM USERS WHERE name = @0 and age = @1',\n    [ 'John', 24 ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Indexes in TypeORM\nDESCRIPTION: This example shows how to create unique indexes by specifying the unique option in the @Index decorator. Unique indexes ensure that the indexed columns contain only unique values across all rows.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/indices.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, Index } from \"typeorm\";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Index({ unique: true })\n  @Column()\n  firstName: string;\n\n  @Column()\n  @Index({ unique: true })\n  lastName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Index Creation\nDESCRIPTION: Example of creating a custom case-insensitive index using raw SQL.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/indices.md#2025-04-08_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX \"POST_NAME_INDEX\" ON \"post\" (lower(\"name\"))\n```\n\n----------------------------------------\n\nTITLE: Using Query Hints in TypeORM Raw Query\nDESCRIPTION: This snippet demonstrates how to use query hints in a raw SQL query with TypeORM, specifically setting a maximum execution time for the query.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.query(`\n    SELECT /*+ MAX_EXECUTION_TIME(1000) */ * \n    FROM user \n    WHERE email = 'example@example.com'\n`);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Column Indices in TypeORM\nDESCRIPTION: Demonstrates how to create basic database indices on individual columns using the @Index decorator. Shows implementation for multiple single-column indices.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/indices.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, Index } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Index()\n    @Column()\n    firstName: string\n\n    @Column()\n    @Index()\n    lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Properties in TypeORM Query\nDESCRIPTION: Demonstrates how to use the 'select' option to specify which properties of the main object should be retrieved in a TypeORM find operation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    select: {\n        firstName: true,\n        lastName: true,\n    },\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT \"firstName\", \"lastName\" FROM \"user\"\n```\n\n----------------------------------------\n\nTITLE: Using Terser in Vite to Preserve TypeORM Migration Class Names\nDESCRIPTION: This Vite configuration uses Terser as the minifier with specific options to preserve TypeORM migration class names, offering a balance between optimization and compatibility.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  build: {\n    sourcemap: true,\n    minify: 'terser',\n    terserOptions: {\n      mangle: { keep_classnames: /^Migrations\\d+$/ },\n      compress: { keep_classnames: /^Migrations\\d+$/ },\n    },\n  },\n  plugins: [vue(), legacy()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Index Creation\nDESCRIPTION: Example of creating a custom case-insensitive index using raw SQL.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/indices.md#2025-04-08_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE INDEX \"POST_NAME_INDEX\" ON \"post\" (lower(\"name\"))\n```\n\n----------------------------------------\n\nTITLE: Loading User with Non-Removed Photos using Where Conditions\nDESCRIPTION: Uses QueryBuilder to load a user with name 'Timber' and their non-removed photos by adding a where condition. This filters the related photos based on the isRemoved flag.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.photos\", \"photo\")\n    .where(\"user.name = :name\", { name: \"Timber\" })\n    .andWhere(\"photo.isRemoved = :isRemoved\", { isRemoved: false })\n    .getOne()\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Column Definitions in TypeORM Schemas\nDESCRIPTION: Demonstrates how to use the base column definitions from the previous example to extend a category entity schema. This approach helps maintain consistency across entities with common fields.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CategoryEntity = new EntitySchema<Category>({\n    name: \"category\",\n    columns: {\n        ...BaseColumnSchemaPart,\n        // the CategoryEntity now has the defined id, createdAt, updatedAt columns!\n        // in addition, the following NEW fields are defined\n        name: {\n            type: String,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Active Record Pattern Entity Definition in TypeORM\nDESCRIPTION: Example of defining a User entity using the Active Record pattern by extending BaseEntity, which provides methods for database operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from \"typeorm\"\n\n@Entity()\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Relations Using Find Options in TypeORM (TypeScript)\nDESCRIPTION: Shows how to load related entities using the 'relations' option in FindOptions. This method allows for easy loading of multiple relations in a single query.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations-faq.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource.getRepository(User).find({\n    relations: {\n        profile: true,\n        photos: true,\n        videos: true,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling esbuild Identifier Minification in Vite for TypeORM\nDESCRIPTION: This Vite configuration disables esbuild's identifier minification, which helps preserve TypeORM migration names while still allowing some optimization.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  build: {\n    sourcemap: true,\n  },\n  esbuild: { minifyIdentifiers: false },\n  plugins: [vue(), legacy()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Not with Other Operators in TypeORM Query (TypeScript)\nDESCRIPTION: Shows how to combine the Not operator with other operators in a TypeORM query for more complex conditions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Not, MoreThan, Equal } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    likes: Not(MoreThan(10)),\n    title: Not(Equal(\"About #2\")),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE NOT(\"likes\" > 10) AND NOT(\"title\" = 'About #2')\n```\n\n----------------------------------------\n\nTITLE: Implementing Closure Table Tree Entity in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates how to create a tree structure using the closure table pattern in TypeORM, which provides efficient read and write operations for hierarchical data.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/entities.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Tree, Column, PrimaryGeneratedColumn, TreeChildren, TreeParent, TreeLevelColumn } from \"typeorm\";\n\n@Entity()\n@Tree(\"closure-table\")\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column()\n    description: string;\n\n    @TreeChildren()\n    children: Category;\n\n    @TreeParent()\n    parent: Category;\n\n    @TreeLevelColumn()\n    level: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading User with Related Photos using leftJoinAndSelect\nDESCRIPTION: Uses QueryBuilder to load a user with name 'Timber' and all their related photos using leftJoinAndSelect. This loads the complete user entity with a populated photos array.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.photos\", \"photo\")\n    .where(\"user.name = :name\", { name: \"Timber\" })\n    .getOne()\n```\n\n----------------------------------------\n\nTITLE: Original User Entity Implementation\nDESCRIPTION: Basic TypeORM entity for User with individual columns for first name and last name\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/embedded-entities.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: string\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    isActive: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Relations - Question Entity\nDESCRIPTION: Shows how to implement lazy loading in the Question entity using Promise type for the relationship property.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/eager-and-lazy-relations.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    @ManyToMany((type) => Category, (category) => category.questions)\n    @JoinTable()\n    categories: Promise<Category[]>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Category by ID Using RelationQueryBuilder\nDESCRIPTION: Shows how to add a category to a post using just their IDs instead of entire entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/relational-query-builder.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"typeorm\";\n\nawait getConnection()\n  .createQueryBuilder()\n  .relation(Post, \"categories\")\n  .of(1)\n  .add(3);\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Data Source\nDESCRIPTION: Configuration setup for TypeORM data source including database connection details and entity settings.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AppDataSource = new DataSource({\n    type: \"postgres\",\n    host: \"localhost\",\n    port: 5432,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    synchronize: true,\n    logging: true,\n    entities: [Post, Category],\n    subscribers: [],\n    migrations: [],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Country Entity in TypeORM\nDESCRIPTION: Demonstrates a simple Country entity definition with a string primary key. This entity is referenced by foreign keys in other entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"countries\")\nexport class Country {\n    @PrimaryColumn({ length: 2 })\n    code: string\n\n    @Column()\n    name: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using Embedded Entities in TypeORM Schemas\nDESCRIPTION: Shows how to define and use embedded entities within schema models. This example creates a Name embedded entity that is used within a User entity schema with proper prefix configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Name {\n    first: string\n    last: string\n}\n\nexport const NameEntitySchema = new EntitySchema<Name>({\n    name: \"name\",\n    columns: {\n        first: {\n            type: \"varchar\",\n        },\n        last: {\n            type: \"varchar\",\n        },\n    },\n})\n\nexport interface User {\n    id: string\n    name: Name\n    isActive: boolean\n}\n\nexport const UserEntitySchema = new EntitySchema<User>({\n    name: \"user\",\n    columns: {\n        id: {\n            primary: true,\n            generated: \"uuid\",\n            type: \"uuid\",\n        },\n        isActive: {\n            type: \"boolean\",\n        },\n    },\n    embeddeds: {\n        name: {\n            schema: NameEntitySchema,\n            prefix: \"name_\",\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Adding WHERE Expressions in TypeORM Query Builder\nDESCRIPTION: Shows various ways to add WHERE expressions to a query, including basic conditions, AND/OR clauses, IN queries, and complex expressions using Brackets.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").where(\"user.name = :name\", { name: \"Timber\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\")\n    .where(\"user.firstName = :firstName\", { firstName: \"Timber\" })\n    .andWhere(\"user.lastName = :lastName\", { lastName: \"Saw\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\")\n    .where(\"user.firstName = :firstName\", { firstName: \"Timber\" })\n    .orWhere(\"user.lastName = :lastName\", { lastName: \"Saw\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").where(\"user.id IN (:...ids)\", { ids: [1, 2, 3, 4] })\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\")\n    .where(\"user.registered = :registered\", { registered: true })\n    .andWhere(\n        new Brackets((qb) => {\n            qb.where(\"user.firstName = :firstName\", {\n                firstName: \"Timber\",\n            }).orWhere(\"user.lastName = :lastName\", { lastName: \"Saw\" })\n        }),\n    )\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\")\n    .where(\"user.registered = :registered\", { registered: true })\n    .andWhere(\n        new NotBrackets((qb) => {\n            qb.where(\"user.firstName = :firstName\", {\n                firstName: \"Timber\",\n            }).orWhere(\"user.lastName = :lastName\", { lastName: \"Saw\" })\n        }),\n    )\n```\n\n----------------------------------------\n\nTITLE: Getting Results with QueryBuilder\nDESCRIPTION: Shows different methods to fetch results including getOne, getMany, getRawOne, and getRawMany.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { sum } = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .select(\"SUM(user.photosCount)\", \"sum\")\n    .where(\"user.id = :id\", { id: 1 })\n    .getRawOne()\n```\n\n----------------------------------------\n\nTITLE: Caching and Locking in TypeORM Query\nDESCRIPTION: Shows how to enable query result caching and use locking mechanisms in TypeORM queries. Locking can only be used with 'findOne' and 'findOneBy' methods.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    cache: true,\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.findOne({\n    where: {\n        id: 1,\n    },\n    lock: { mode: \"optimistic\", version: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Profile with User using QueryBuilder in Bi-directional Relation\nDESCRIPTION: This snippet shows how to load a Profile entity with its related User using TypeORM's QueryBuilder in a bi-directional relation setup.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst profiles = await dataSource\n    .getRepository(Profile)\n    .createQueryBuilder(\"profile\")\n    .leftJoinAndSelect(\"profile.user\", \"user\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Different Ways to Create QueryBuilder\nDESCRIPTION: Shows various methods to create a QueryBuilder using DataSource, EntityManager, or Repository.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await dataSource\n    .createQueryBuilder()\n    .select(\"user\")\n    .from(User, \"user\")\n    .where(\"user.id = :id\", { id: 1 })\n    .getOne()\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities\nDESCRIPTION: Demonstrates how to load related entities using RelationQueryBuilder, including both many-to-many and many-to-one relationships.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/relational-query-builder.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"typeorm\";\n\nconst post = await getConnection().manager.findOne(Post, 1);\n\npost.categories = await getConnection()\n  .createQueryBuilder()\n  .relation(Post, \"categories\")\n  .of(post)\n  .loadMany();\n\npost.author = await getConnection()\n  .createQueryBuilder()\n  .relation(User, \"user\")\n  .of(post)\n  .loadOne();\n```\n\n----------------------------------------\n\nTITLE: Creating a PhotoMetadata Entity with One-to-One Relationship\nDESCRIPTION: Defines a PhotoMetadata entity class with a one-to-one relationship to the Photo entity using the @OneToOne and @JoinColumn decorators, making PhotoMetadata the owning side of the relationship.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    OneToOne,\n    JoinColumn,\n} from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class PhotoMetadata {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column(\"int\")\n    height: number\n\n    @Column(\"int\")\n    width: number\n\n    @Column()\n    orientation: string\n\n    @Column()\n    compressed: boolean\n\n    @Column()\n    comment: string\n\n    @OneToOne(() => Photo)\n    @JoinColumn()\n    photo: Photo\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Set Tree Structure in TypeORM\nDESCRIPTION: This code snippet shows how to create a Nested Set tree structure using TypeORM decorators. It defines a Category entity with TreeChildren and TreeParent decorators for managing the tree structure.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/tree-entities.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Tree,\n    Column,\n    PrimaryGeneratedColumn,\n    TreeChildren,\n    TreeParent,\n    TreeLevelColumn,\n} from \"typeorm\"\n\n@Entity()\n@Tree(\"nested-set\")\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @TreeChildren()\n    children: Category[]\n\n    @TreeParent()\n    parent: Category\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Replication in TypeORM (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure MySQL replication in TypeORM. It includes settings for master and slave servers, connection retry options, node removal conditions, and slave selection methods.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/multiple-data-sources.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  replication: {\n    master: {\n      host: \"server1\",\n      port: 3306,\n      username: \"test\",\n      password: \"test\",\n      database: \"test\"\n    },\n    slaves: [{\n      host: \"server2\",\n      port: 3306,\n      username: \"test\",\n      password: \"test\",\n      database: \"test\"\n    }, {\n      host: \"server3\",\n      port: 3306,\n      username: \"test\",\n      password: \"test\",\n      database: \"test\"\n    }],\n\n    /**\n    * If true, PoolCluster will attempt to reconnect when connection fails. (Default: true)\n    */\n    canRetry: true,\n\n    /**\n     * If connection fails, node's errorCount increases.\n     * When errorCount is greater than removeNodeErrorCount, remove a node in the PoolCluster. (Default: 5)\n     */\n    removeNodeErrorCount: 5,\n\n    /**\n     * If connection fails, specifies the number of milliseconds before another connection attempt will be made.\n     * If set to 0, then node will be removed instead and never re-used. (Default: 0)\n     */\n     restoreNodeTimeout: 0,\n\n    /**\n     * Determines how slaves are selected:\n     * RR: Select one alternately (Round-Robin).\n     * RANDOM: Select the node by random function.\n     * ORDER: Select the first node available unconditionally.\n     */\n    selector: \"RR\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder CRUD Operations\nDESCRIPTION: Examples of different QueryBuilder types for INSERT, UPDATE, DELETE, and relation operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .insert()\n    .into(User)\n    .values([\n        { firstName: \"Timber\", lastName: \"Saw\" },\n        { firstName: \"Phantom\", lastName: \"Lancer\" }\n    ])\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Defining Bi-directional One-to-One Relation in User Entity\nDESCRIPTION: This snippet demonstrates how to define a bi-directional one-to-one relation in the User entity, referencing the Profile entity and using @JoinColumn.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    OneToOne,\n    JoinColumn,\n} from \"typeorm\"\nimport { Profile } from \"./Profile\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToOne(() => Profile, (profile) => profile.user) // specify inverse side as a second parameter\n    @JoinColumn()\n    profile: Profile\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in TypeORM Query\nDESCRIPTION: This example shows how to implement pagination in TypeORM using limit and offset, which helps in optimizing performance when retrieving large amounts of data.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await userRepository\n    .createQueryBuilder(\"user\")\n    .limit(10)     // Number of records to fetch per page\n    .offset(20)    // Skip the first 20 records\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: Basic UPDATE Query with TypeORM QueryBuilder\nDESCRIPTION: Creates a basic UPDATE query using TypeORM's QueryBuilder to update a User entity. This example sets the firstName and lastName properties for a user with a specific ID.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/update-query-builder.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .update(User)\n    .set({ firstName: \"Timber\", lastName: \"Saw\" })\n    .where(\"id = :id\", { id: 1 })\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Using MoreThanOrEqual Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Shows how to use the MoreThanOrEqual operator in a TypeORM query to find posts with likes greater than or equal to a specific value.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MoreThanOrEqual } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    likes: MoreThanOrEqual(10),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"likes\" >= 10\n```\n\n----------------------------------------\n\nTITLE: Dropping Database in TypeORM\nDESCRIPTION: Completely drops the database and all its data. This is a destructive operation that should be used with caution, especially in production environments.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.dropDatabase()\n```\n\n----------------------------------------\n\nTITLE: Using IsNull Operator\nDESCRIPTION: Demonstrates the new way to query for null values using the IsNull operator instead of direct null comparison.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    where: {\n        photo: IsNull(),\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Equal Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Illustrates the use of the Equal operator in a TypeORM query to find posts with titles exactly matching a specific value.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Equal } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: Equal(\"About #2\"),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"title\" = 'About #2'\n```\n\n----------------------------------------\n\nTITLE: Creating Generated Value Column in TypeORM Entity (TypeScript)\nDESCRIPTION: Shows how to use the @Generated decorator to create a column with an automatically generated UUID value in a TypeORM entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/entities.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryColumn()\n    id: number;\n\n    @Column()\n    @Generated(\"uuid\")\n    uuid: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Relationship in TypeORM\nDESCRIPTION: Example of implementing a many-to-many relationship between Album and Photo entities. The Album entity owns the relationship with the @JoinTable decorator, which creates a junction table in the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\n\n@Entity()\nexport class Album {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @ManyToMany((type) => Photo, (photo) => photo.albums)\n    @JoinTable()\n    photos: Photo[]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n    /// ... other columns\n\n    @ManyToMany((type) => Album, (album) => album.photos)\n    albums: Album[]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst options: ConnectionOptions = {\n    // ... other options\n    entities: [Photo, PhotoMetadata, Author, Album],\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlet connection = await createConnection(options)\n\n// create a few albums\nlet album1 = new Album()\nalbum1.name = \"Bears\"\nawait connection.manager.save(album1)\n\nlet album2 = new Album()\nalbum2.name = \"Me\"\nawait connection.manager.save(album2)\n\n// create a few photos\nlet photo = new Photo()\nphoto.name = \"Me and Bears\"\nphoto.description = \"I am near polar bears\"\nphoto.filename = \"photo-with-bears.jpg\"\nphoto.albums = [album1, album2]\nawait connection.manager.save(photo)\n\n// now our photo is saved and albums are attached to it\n// now lets load them:\nconst loadedPhoto = await connection\n    .getRepository(Photo)\n    .findOne(1, { relations: [\"albums\"] })\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    id: 1,\n    name: \"Me and Bears\",\n    description: \"I am near polar bears\",\n    filename: \"photo-with-bears.jpg\",\n    albums: [{\n        id: 1,\n        name: \"Bears\"\n    }, {\n        id: 2,\n        name: \"Me\"\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Query Results with Aggregation\nDESCRIPTION: Uses getRawOne to retrieve raw data from a query with an aggregation function. Returns a single object with calculated values rather than entity instances.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst { sum } = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .select(\"SUM(user.photosCount)\", \"sum\")\n    .where(\"user.id = :id\", { id: 1 })\n    .getRawOne()\n```\n\n----------------------------------------\n\nTITLE: Using MoreThan Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Demonstrates the usage of the MoreThan operator in a TypeORM query to find posts with likes greater than a specific value.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MoreThan } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    likes: MoreThan(10),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"likes\" > 10\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Memory Mode in TypeORM\nDESCRIPTION: Method to enable SQL memory mode where queries are stored instead of executed.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nenableSqlMemory(): void\n```\n\n----------------------------------------\n\nTITLE: Using And Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Illustrates the use of the And operator in a TypeORM query to combine multiple conditions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { And, Not, Equal, ILike } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: And(Not(Equal(\"About #2\")), ILike(\"%About%\")),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE NOT(\"title\" = 'About #2') AND \"title\" ILIKE '%About%'\n```\n\n----------------------------------------\n\nTITLE: Using Equal Operator for Non-Primitive Types\nDESCRIPTION: Shows how to query non-primitive type columns using the Equal operator in the new type-safe where conditions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    membership: Equal(new MembershipKind(\"premium\")),\n})\n```\n\n----------------------------------------\n\nTITLE: Using Find Methods with Relations in TypeORM\nDESCRIPTION: Examples of using the new find methods with relation options for querying related entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    relations: {\n        photos: true,\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.createQueryBuilder().setRelationLoadStrategy(\"query\")\n```\n\n----------------------------------------\n\nTITLE: Loading Related Data Using find Method in TypeORM\nDESCRIPTION: Code demonstrating how to retrieve photos along with their related metadata using the repository's find method with relations option in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConnection } from \"typeorm\"\nimport { Photo } from \"./entity/Photo\"\nimport { PhotoMetadata } from \"./entity/PhotoMetadata\"\n\ncreateConnection(/*...*/)\n    .then(async (connection) => {\n        /*...*/\n        let photoRepository = connection.getRepository(Photo)\n        let photos = await photoRepository.find({ relations: [\"metadata\"] })\n    })\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Loading Related Objects using Find Methods in TypeORM\nDESCRIPTION: This snippet shows how to load a photo and its related metadata using the find method with relations option in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Photo } from \"./entity/Photo\"\nimport { PhotoMetadata } from \"./entity/PhotoMetadata\"\nimport { AppDataSource } from \"./index\"\n\nconst photoRepository = AppDataSource.getRepository(Photo)\nconst photos = await photoRepository.find({\n    relations: {\n        metadata: true,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Raw Operator with Array Parameters in TypeORM Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the Raw operator with array parameters in a TypeORM query for IN clause operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Raw } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: Raw((alias) => `${alias} IN (:...titles)`, {\n        titles: [\n            \"Go To Statement Considered Harmful\",\n            \"Structured Programming\",\n        ],\n    }),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"title\" IN ('Go To Statement Considered Harmful', 'Structured Programming')\n```\n\n----------------------------------------\n\nTITLE: Date column with current timestamp default in TypeORM\nDESCRIPTION: Defining a date column with current timestamp as default value in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({ default: () => \"NOW()\" })\nmyDate: Date;\n```\n\n----------------------------------------\n\nTITLE: Using New FindBy Methods in TypeORM\nDESCRIPTION: Demonstration of the new findBy methods for simplified entity queries.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await userRepository.findBy({\n    name: \"Michael\",\n})\n```\n\n----------------------------------------\n\nTITLE: Using LessThanOrEqual Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Illustrates the use of the LessThanOrEqual operator in a TypeORM query to find posts with likes less than or equal to a specific value.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LessThanOrEqual } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    likes: LessThanOrEqual(10),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"likes\" <= 10\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Foreign Keys in TypeORM\nDESCRIPTION: Method to create multiple foreign key constraints at once.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ncreateForeignKeys(table: Table|string, foreignKeys: TableForeignKey[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating Tree Entity with Adjacency List in TypeORM (TypeScript)\nDESCRIPTION: Shows how to implement a tree structure using the adjacency list pattern in TypeORM, which allows for self-referencing entities to create hierarchical data.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/entities.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToOne, OneToMany } from \"typeorm\";\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column()\n    description: string;\n\n    @OneToMany(type => Category, category => category.children)\n    parent: Category;\n\n    @ManyToOne(type => Category, category => category.parent)\n    children: Category;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DataSource Connection\nDESCRIPTION: Complete setup for initializing TypeORM DataSource with database connection and entity configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"reflect-metadata\"\nimport { DataSource } from \"typeorm\"\nimport { Photo } from \"./entity/Photo\"\n\nconst AppDataSource = new DataSource({\n    type: \"postgres\",\n    host: \"localhost\",\n    port: 5432,\n    username: \"root\",\n    password: \"admin\",\n    database: \"test\",\n    entities: [Photo],\n    synchronize: true,\n    logging: false,\n})\n\nAppDataSource.initialize()\n    .then(() => {\n        // here you can start to work with your database\n    })\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Using Raw Operator with Parameters in TypeORM Query (TypeScript)\nDESCRIPTION: Illustrates how to use the Raw operator with parameters in a TypeORM query to safely include user input.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Raw } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    currentDate: Raw((alias) => `${alias} > :date`, { date: \"2020-10-06\" }),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"currentDate\" > '2020-10-06'\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM DataSource for Browser\nDESCRIPTION: This snippet demonstrates how to configure a TypeORM DataSource for use in a browser environment with SQL.js. It includes entity synchronization.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/supported-platforms.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew DataSource({\n    type: \"sqljs\",\n    entities: [Photo],\n    synchronize: true,\n})\n```\n\n----------------------------------------\n\nTITLE: DeleteDateColumn for Soft Delete in TypeORM\nDESCRIPTION: Demonstrates the @DeleteDateColumn decorator which enables TypeORM's soft delete functionality by automatically setting the deletion timestamp when an entity is soft-deleted, and applying global scopes to exclude deleted records.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @DeleteDateColumn()\n    deletedDate: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Insert and Update Operations in TypeORM\nDESCRIPTION: Methods for inserting new entities and updating existing ones.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.insert({\n    firstName: \"Timber\",\n    lastName: \"Timber\",\n})\n\nawait repository.insert([\n    {\n        firstName: \"Foo\",\n        lastName: \"Bar\",\n    },\n    {\n        firstName: \"Rizz\",\n        lastName: \"Rak\",\n    },\n])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.update({ age: 18 }, { category: \"ADULT\" })\nawait repository.update(1, { firstName: \"Rizzrak\" })\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeORM Project via CLI\nDESCRIPTION: Command to create a new TypeORM project with PostgreSQL database using the CLI tool.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx typeorm init --name MyProject --database postgres\n```\n\n----------------------------------------\n\nTITLE: Dropping Multiple Indices in TypeORM\nDESCRIPTION: Method to drop multiple indices at once from a table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ndropIndices(table: Table|string, indices: TableIndex[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Removing Category from Post's Categories in TypeScript\nDESCRIPTION: This snippet demonstrates how to remove a category from a post's categories using RelationQueryBuilder. It works for many-to-many and one-to-many relations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relational-query-builder.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .relation(Post, \"categories\")\n    .of(post) // you can use just post id as well\n    .remove(category) // you can use just category id as well\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship in TypeORM Photo Entity\nDESCRIPTION: This code defines a Photo entity with a one-to-one relationship to a User entity. Like the User entity, it's missing the required @JoinColumn decorator to establish a proper database relationship.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    url: string\n\n    @OneToOne()\n    user: User\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM Configuration File Example\nDESCRIPTION: Example of an ormconfig.json file that configures the database connection and entity locations for a TypeORM project.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"mysql\",\n    \"host\": \"localhost\",\n    \"port\": 3306,\n    \"username\": \"test\",\n    \"password\": \"test\",\n    \"database\": \"test\",\n    \"synchronize\": true,\n    \"logging\": false,\n    \"entities\": [\"src/entity/**/*.ts\"],\n    \"migrations\": [\"src/migration/**/*.ts\"],\n    \"subscribers\": [\"src/subscriber/**/*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Load Strategy in TypeORM\nDESCRIPTION: Setting up relation load strategy in connection options to determine how relations are loaded.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateConnection({\n    /* ... */\n    relationLoadStrategy: \"query\",\n})\n```\n\n----------------------------------------\n\nTITLE: Upsert Operations in TypeORM\nDESCRIPTION: Methods for performing upsert operations with various options.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.upsert(\n    [\n        { externalId: \"abc123\", firstName: \"Rizzrak\" },\n        { externalId: \"bca321\", firstName: \"Karzzir\" },\n    ],\n    [\"externalId\"],\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.upsert(\n    [\n        { externalId: \"abc123\", firstName: \"Rizzrak\" },\n        { externalId: \"bca321\", firstName: \"Karzzir\" },\n    ],\n    {\n        conflictPaths: [\"externalId\"],\n        skipUpdateIfNoValuesChanged: true,\n        upsertType: \"upsert\",\n    },\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.upsert(\n    [\n        { externalId: \"abc123\", firstName: \"Rizzrak\", dateAdded: \"2020-01-01\" },\n        { externalId: \"bca321\", firstName: \"Karzzir\", dateAdded: \"2022-01-01\" },\n    ],\n    {\n        conflictPaths: [\"externalId\"],\n        skipUpdateIfNoValuesChanged: true,\n        indexPredicate: \"dateAdded > 2020-01-01\",\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Unique column in TypeORM\nDESCRIPTION: Defining a column with a unique constraint in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({ unique: true })\nsomeUnique: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logger in TypeORM\nDESCRIPTION: This snippet demonstrates how to create a custom logger by implementing the Logger interface in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Logger } from \"typeorm\"\n\nexport class MyCustomLogger implements Logger {\n    // implement all methods from logger class\n}\n```\n\n----------------------------------------\n\nTITLE: Using SaveOptions in TypeORM Repository save Method (TypeScript)\nDESCRIPTION: Shows how to use SaveOptions when calling the save method. This example demonstrates chunking large datasets to handle limitations in underlying database drivers.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// users contains array of User Entities\nuserRepository.save(users, { chunk: users.length / 1000 })\n```\n\n----------------------------------------\n\nTITLE: Cache ID in QueryBuilder\nDESCRIPTION: Implementing cache with custom ID for granular control using QueryBuilder\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .createQueryBuilder(User, \"user\")\n    .where(\"user.isAdmin = :isAdmin\", { isAdmin: true })\n    .cache(\"users_admins\", 25000)\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Importing sql.js Driver in TypeORM\nDESCRIPTION: To use sql.js as a driver in TypeORM, install it via npm and specify 'sqljs' as the driver type.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm i sql.js\n\n// In your TypeORM configuration\n{\n  type: \"sqljs\",\n  // other config options\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in TypeORM\nDESCRIPTION: Shows how to execute raw SQL queries using the Connection API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst rawData = await connection.query(`SELECT * FROM USERS`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Migration with Column Rename in TypeScript\nDESCRIPTION: A complete migration implementation that renames a column from 'title' to 'name' in the up method and reverts the change in the down method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MigrationInterface, QueryRunner } from \"typeorm\"\n\nexport class PostRefactoringTIMESTAMP implements MigrationInterface {\n    async up(queryRunner: QueryRunner): Promise<void> {\n        await queryRunner.query(\n            `ALTER TABLE \"post\" RENAME COLUMN \"title\" TO \"name\"`,\n        )\n    }\n\n    async down(queryRunner: QueryRunner): Promise<void> {\n        await queryRunner.query(\n            `ALTER TABLE \"post\" RENAME COLUMN \"name\" TO \"title\"`,\n        ) // reverts things made in \"up\" method\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Repository Operations in TypeORM\nDESCRIPTION: This snippet shows how to perform CRUD operations using TypeORM's repository pattern. It demonstrates creating, finding, and removing user records using the repository methods.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.age = 25\nawait repository.save(user)\n\nconst allUsers = await repository.find()\nconst firstUser = await repository.findOne(1) // find by id\nconst timber = await repository.findOne({\n    firstName: \"Timber\",\n    lastName: \"Saw\",\n})\n\nawait repository.remove(timber)\n```\n\n----------------------------------------\n\nTITLE: Setting up a data source in Sequelize\nDESCRIPTION: Creating and initializing a database connection in Sequelize with authentication handling.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst sequelize = new Sequelize(\"database\", \"username\", \"password\", {\n    host: \"localhost\",\n    dialect: \"mysql\",\n})\n\nsequelize\n    .authenticate()\n    .then(() => {\n        console.log(\"Data Source has been initialized successfully.\")\n    })\n    .catch((err) => {\n        console.error(\"Error during Data Source initialization:\", err)\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining Bi-directional One-to-One Relation in Profile Entity\nDESCRIPTION: This snippet shows how to define a bi-directional one-to-one relation in the Profile entity, referencing the User entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, OneToOne } from \"typeorm\"\nimport { User } from \"./User\"\n\n@Entity()\nexport class Profile {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    gender: string\n\n    @Column()\n    photo: string\n\n    @OneToOne(() => User, (user) => user.profile) // specify inverse side as a second parameter\n    user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Error Logging Only in TypeORM\nDESCRIPTION: This snippet demonstrates how to configure TypeORM to log only failed queries and errors by specifying 'error' as the only logging option.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    host: \"localhost\",\n    ...\n    logging: [\"error\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing @AfterSoftRemove Entity Listener in TypeORM\nDESCRIPTION: Illustrates the use of the @AfterSoftRemove decorator to define a method that is called after an entity is soft removed using repository/manager softRemove.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @AfterSoftRemove()\n    updateStatus() {\n        this.status = \"soft-removed\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OFFSET Expression in TypeORM Query Builder\nDESCRIPTION: Shows how to add an OFFSET expression to a query to skip a specified number of rows before returning results.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").offset(10)\n```\n\n----------------------------------------\n\nTITLE: Defining Cascading Many-to-Many Relation in TypeORM\nDESCRIPTION: This code shows how to set up a cascading many-to-many relation in the Question entity, allowing automatic saving and soft-deleting of related categories.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @ManyToMany(() => Category, (category) => category.questions, {\n        cascade: true,\n    })\n    @JoinTable()\n    categories: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Migration Template in TypeScript\nDESCRIPTION: The basic structure of a TypeORM migration file with empty up and down methods that need to be implemented. This is generated by the migration:create command.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MigrationInterface, QueryRunner } from \"typeorm\"\n\nexport class PostRefactoringTIMESTAMP implements MigrationInterface {\n    async up(queryRunner: QueryRunner): Promise<void> {}\n\n    async down(queryRunner: QueryRunner): Promise<void> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Post-Merge Branch Cleanup\nDESCRIPTION: Series of commands to clean up local and remote branches after pull request is merged.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CONTRIBUTING.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin --delete my-fix-branch\ngit checkout master -f\ngit branch -D my-fix-branch\ngit pull --ff upstream master\n```\n\n----------------------------------------\n\nTITLE: Creating TypeORM Connection for SQL.js in Browser\nDESCRIPTION: This TypeScript snippet demonstrates how to create a TypeORM connection using SQL.js in a browser environment. It specifies the connection type as 'sqljs', includes entities, and enables synchronization.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/supported-platforms.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreateConnection({\n  type: \"sqljs\",\n  entities: [Photo],\n  synchronize: true\n});\n```\n\n----------------------------------------\n\nTITLE: DataSource Migration Command\nDESCRIPTION: Command syntax for running or reverting migrations using a specified DataSource path.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm -d <your-data-source-path> migration:{run|revert}\n```\n\n----------------------------------------\n\nTITLE: Removing Category from Post\nDESCRIPTION: Shows how to remove a category from a post's categories using RelationQueryBuilder.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/relational-query-builder.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"typeorm\";\n\nawait getConnection()\n  .createQueryBuilder()\n  .relation(Post, \"categories\")\n  .of(post)\n  .remove(category);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cascade Save in One-to-One Relationship\nDESCRIPTION: Code example showing how to set up cascade save functionality on a one-to-one relationship, allowing automatic saving of related metadata when saving a photo.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n    /// ... other columns\n\n    @OneToOne((type) => PhotoMetadata, (metadata) => metadata.photo, {\n        cascade: true,\n    })\n    metadata: PhotoMetadata\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Eager Relations - Question Entity\nDESCRIPTION: Defines a Question entity with eager loading enabled for the categories relationship. Includes the JoinTable decorator for managing the many-to-many relationship.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/eager-and-lazy-relations.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    @ManyToMany((type) => Category, (category) => category.questions, {\n        eager: true,\n    })\n    @JoinTable()\n    categories: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Check Constraint in TypeORM\nDESCRIPTION: Method to create a new check constraint on a table. Note that MySQL does not support check constraints.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ncreateCheckConstraint(table: Table|string, checkConstraint: TableCheck): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch for TypeORM Contribution\nDESCRIPTION: Command to create a new git branch for implementing fixes or features in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CONTRIBUTING.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-fix-branch master\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Column in TypeORM Entity (TypeScript)\nDESCRIPTION: Demonstrates how to use the @VirtualColumn decorator to create a special column that is never saved to the database and acts as a readonly property. The example shows a Company entity with a virtual column for totalEmployeesCount.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity({ name: \"companies\" })\nexport class Company {\n  @PrimaryColumn(\"varchar\", { length: 50 })\n  name: string;\n\n  @VirtualColumn({ query: (alias) => `SELECT COUNT(\"name\") FROM \"employees\" WHERE \"companyName\" = ${alias}.\"name\"` })\n  totalEmployeesCount: number;\n\n  @OneToMany((type) => Employee, (employee) => employee.company)\n  employees: Employee[];\n}\n\n@Entity({ name: \"employees\" })\nexport class Employee {\n  @PrimaryColumn(\"varchar\", { length: 50 })\n  name: string;\n\n  @ManyToOne((type) => Company, (company) => company.employees)\n  company: Company;\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Related Entities from the Many Side in TypeORM\nDESCRIPTION: This alternative approach shows how to save related entities by first creating and saving the User entity, then creating Photo entities that reference the user before saving them. This sets the relationship from the many side.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-one-one-to-many-relations.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.name = \"Leo\"\nawait dataSource.manager.save(user)\n\nconst photo1 = new Photo()\nphoto1.url = \"me.jpg\"\nphoto1.user = user\nawait dataSource.manager.save(photo1)\n\nconst photo2 = new Photo()\nphoto2.url = \"me-and-bears.jpg\"\nphoto2.user = user\nawait dataSource.manager.save(photo2)\n```\n\n----------------------------------------\n\nTITLE: Alternative Migration Generation Command\nDESCRIPTION: Alternative command syntax for generating migrations when specifying both datasource and migration path.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm migration:generate -d <path/to/datasource> path/to/migrations/<migration-name>\n```\n\n----------------------------------------\n\nTITLE: Using Entity Manager in TypeORM\nDESCRIPTION: Demonstrates how to use the EntityManager to perform database operations on entities associated with a connection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager: EntityManager = connection.manager;\n// 你可以调用manager方法，例如find：\nconst user = await manager.findOne(1);\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Column Indices in TypeORM\nDESCRIPTION: Shows how to create database indices for individual columns using the @Index decorator. Includes examples of both regular and unique indices applied directly to columns.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @Index()\n    @Column()\n    firstName: string\n\n    @Index({ unique: true })\n    @Column()\n    lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Relations - Category Entity\nDESCRIPTION: Shows how to implement lazy loading in the Category entity using Promise type for the relationship property.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/eager-and-lazy-relations.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from \"typeorm\"\nimport { Question } from \"./Question\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @ManyToMany((type) => Question, (question) => question.categories)\n    questions: Promise<Question[]>\n}\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Updated Branch\nDESCRIPTION: Commands to rebase the branch and force push updates after implementing suggested changes.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CONTRIBUTING.md#2025-04-08_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase master -i\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Entity with Single Table Inheritance in TypeORM\nDESCRIPTION: This snippet shows how to create a Post entity that extends the Content class using single table inheritance with the @ChildEntity decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@ChildEntity()\nexport class Post extends Content {\n    @Column()\n    viewCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Project entity in TypeORM\nDESCRIPTION: Creating a Project entity with id, title, and description columns using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Project {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing @BeforeSoftRemove Entity Listener in TypeORM\nDESCRIPTION: Shows how to use the @BeforeSoftRemove decorator to define a method that is called before an entity is soft removed using repository/manager softRemove.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @BeforeSoftRemove()\n    updateStatus() {\n        this.status = \"soft-removed\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Repository Properties in TypeORM\nDESCRIPTION: Examples of accessing basic repository properties like manager, metadata, queryRunner, and target.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager = repository.manager\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst metadata = repository.metadata\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryRunner = repository.queryRunner\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst target = repository.target\n```\n\n----------------------------------------\n\nTITLE: Saving Lazy Relations Example\nDESCRIPTION: Demonstrates how to save entities with lazy-loaded relationships using Promises.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/eager-and-lazy-relations.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst category1 = new Category()\ncategory1.name = \"animals\"\nawait dataSource.manager.save(category1)\n\nconst category2 = new Category()\ncategory2.name = \"zoo\"\nawait dataSource.manager.save(category2)\n\nconst question = new Question()\nquestion.categories = Promise.resolve([category1, category2])\nawait dataSource.manager.save(question)\n```\n\n----------------------------------------\n\nTITLE: Loading Relations in TypeORM Query\nDESCRIPTION: Shows how to use the 'relations' option to load related entities along with the main entity in a TypeORM find operation. It also demonstrates loading sub-relations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    relations: {\n        profile: true,\n        photos: true,\n        videos: true,\n    },\n})\nuserRepository.find({\n    relations: {\n        profile: true,\n        photos: true,\n        videos: {\n            videoAttributes: true,\n        },\n    },\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\"\nLEFT JOIN \"profile\" ON \"profile\".\"id\" = \"user\".\"profileId\"\nLEFT JOIN \"photos\" ON \"photos\".\"id\" = \"user\".\"photoId\"\nLEFT JOIN \"videos\" ON \"videos\".\"id\" = \"user\".\"videoId\"\n\nSELECT * FROM \"user\"\nLEFT JOIN \"profile\" ON \"profile\".\"id\" = \"user\".\"profileId\"\nLEFT JOIN \"photos\" ON \"photos\".\"id\" = \"user\".\"photoId\"\nLEFT JOIN \"videos\" ON \"videos\".\"id\" = \"user\".\"videoId\"\nLEFT JOIN \"video_attributes\" ON \"video_attributes\".\"id\" = \"videos\".\"video_attributesId\"\n```\n\n----------------------------------------\n\nTITLE: Extending AbstractLogger for Custom Logging in TypeORM\nDESCRIPTION: This snippet shows how to create a custom logger by extending the AbstractLogger class in TypeORM, implementing custom logging behavior for different log levels.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AbstractLogger } from \"typeorm\"\n\nexport class MyCustomLogger extends AbstractLogger {\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner,\n    ) {\n        const messages = this.prepareLogMessages(logMessage, {\n            highlightSql: false,\n        })\n\n        for (let message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                case \"schema-build\":\n                case \"migration\":\n                    console.log(message.message)\n                    break\n\n                case \"info\":\n                case \"query\":\n                    if (message.prefix) {\n                        console.info(message.prefix, message.message)\n                    } else {\n                        console.info(message.message)\n                    }\n                    break\n\n                case \"warn\":\n                case \"query-slow\":\n                    if (message.prefix) {\n                        console.warn(message.prefix, message.message)\n                    } else {\n                        console.warn(message.message)\n                    }\n                    break\n\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix) {\n                        console.error(message.prefix, message.message)\n                    } else {\n                        console.error(message.message)\n                    }\n                    break\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Columns with TypeORM QueryRunner\nDESCRIPTION: This snippet shows QueryRunner methods for adding, renaming, changing, and dropping columns in tables. These operations allow for fine-grained control over table structure modifications.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\naddColumn(table: Table|string, column: TableColumn): Promise<void>\n\naddColumns(table: Table|string, columns: TableColumn[]): Promise<void>\n\nrenameColumn(table: Table|string, oldColumnOrName: TableColumn|string, newColumnOrName: TableColumn|string): Promise<void>\n\nchangeColumn(table: Table|string, oldColumn: TableColumn|string, newColumn: TableColumn): Promise<void>\n\nchangeColumns(table: Table|string, changedColumns: { oldColumn: TableColumn, newColumn: TableColumn }[]): Promise<void>\n\ndropColumn(table: Table|string, column: TableColumn|string): Promise<void>\n\ndropColumns(table: Table|string, columns: TableColumn[]|string[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Options in TypeORM\nDESCRIPTION: Demonstrates how to specify additional options for entity columns using the @Column decorator options object.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({\n    type: \"varchar\",\n    length: 150,\n    unique: true,\n    // ...\n})\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Creating and saving a model in TypeORM using Active Record\nDESCRIPTION: Creating and saving a new entity using TypeORM's Active Record pattern.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst employee = Employee.create({ name: \"John Doe\", title: \"senior engineer\" })\nawait employee.save()\n```\n\n----------------------------------------\n\nTITLE: Resulting Table Structure for One-to-One Relation in TypeORM\nDESCRIPTION: This snippet shows the resulting table structure for the User and Profile entities with a one-to-one relation. The User table includes a foreign key to the Profile table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n+-------------+--------------+----------------------------+\n|                        profile                          |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| gender      | varchar(255) |                            |\n| photo       | varchar(255) |                            |\n+-------------+--------------+----------------------------+\n\n+-------------+--------------+----------------------------+\n|                          user                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(255) |                            |\n| profileId   | int(11)      | FOREIGN KEY                |\n+-------------+--------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Accessing the Connection Manager in TypeORM\nDESCRIPTION: Illustrates how to retrieve the connection manager, which stores all created connections. This can be used to access specific connections by name.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getConnectionManager} from \"typeorm\";\n\nconst defaultConnection = getConnectionManager().get(\"default\");\nconst secondaryConnection = getConnectionManager().get(\"secondary\");\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with OneToOne Relation in TypeORM (TypeScript)\nDESCRIPTION: Illustrates how to define a User entity with a OneToOne relation to a Profile entity. This example shows the basic structure without including the profile ID in the User entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations-faq.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    OneToOne,\n    JoinColumn,\n} from \"typeorm\"\nimport { Profile } from \"./Profile\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToOne((type) => Profile)\n    @JoinColumn()\n    profile: Profile\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Table Inheritance with EntitySchema in TypeORM\nDESCRIPTION: Shows how to implement Single Table Inheritance using EntitySchema by configuring the parent schema with inheritance options and child schemas with discriminator values. This pattern allows storing different entity types in the same table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// schema.ts\n\nconst BaseSchema = new EntitySchema<Base>({\n    target: Base,\n    name: \"Base\",\n    columns: {\n        id: {\n            type: Number,\n            primary: true,\n            generated: \"increment\",\n        },\n        type: {\n            type: String,\n        },\n        createdAt: {\n            type: Date,\n            createDate: true,\n        },\n        updatedAt: {\n            type: Date,\n            updateDate: true,\n        },\n    },\n    // NEW: Inheritance options\n    inheritance: {\n        pattern: \"STI\",\n        column: \"type\",\n    },\n})\n\nconst ASchema = new EntitySchema<A>({\n    target: A,\n    name: \"A\",\n    type: \"entity-child\",\n    // When saving instances of 'A', the \"type\" column will have the value\n    // specified on the 'discriminatorValue' property\n    discriminatorValue: \"my-custom-discriminator-value-for-A\",\n    columns: {\n        ...BaseSchema.options.columns,\n        a: {\n            type: Boolean,\n        },\n    },\n})\n\nconst BSchema = new EntitySchema<B>({\n    target: B,\n    name: \"B\",\n    type: \"entity-child\",\n    discriminatorValue: undefined, // Defaults to the class name (e.g. \"B\")\n    columns: {\n        ...BaseSchema.options.columns,\n        b: {\n            type: Number,\n        },\n    },\n})\n\nconst CSchema = new EntitySchema<C>({\n    target: C,\n    name: \"C\",\n    type: \"entity-child\",\n    discriminatorValue: \"my-custom-discriminator-value-for-C\",\n    columns: {\n        ...BaseSchema.options.columns,\n        c: {\n            type: String,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Loading Lazy Relations Example\nDESCRIPTION: Shows how to load and access lazy-loaded relationships using async/await syntax.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/eager-and-lazy-relations.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst [question] = await dataSource.getRepository(Question).find()\nconst categories = await question.categories\n// you'll have all question's categories inside \"categories\" variable now\n```\n\n----------------------------------------\n\nTITLE: Initializing DataSource and Performing CRUD Operations in TypeORM with JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a TypeORM DataSource, connect to a PostgreSQL database, and perform basic CRUD operations like saving and retrieving posts and categories. It shows the JavaScript approach to working with TypeORM without TypeScript types.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/usage-with-javascript.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar typeorm = require(\"typeorm\")\n\nvar dataSource = new typeorm.DataSource({\n    type: \"postgres\",\n    host: \"localhost\",\n    port: 5432,\n    username: \"test\",\n    password: \"admin\",\n    database: \"test\",\n    synchronize: true,\n    entities: [require(\"./entity/Post\"), require(\"./entity/Category\")],\n})\n\ndataSource\n    .initialize()\n    .then(function () {\n        var category1 = {\n            name: \"TypeScript\",\n        }\n        var category2 = {\n            name: \"Programming\",\n        }\n\n        var post = {\n            title: \"Control flow based type analysis\",\n            text: \"TypeScript 2.0 implements a control flow-based type analysis for local variables and parameters.\",\n            categories: [category1, category2],\n        }\n\n        var postRepository = dataSource.getRepository(\"Post\")\n        postRepository\n            .save(post)\n            .then(function (savedPost) {\n                console.log(\"Post has been saved: \", savedPost)\n                console.log(\"Now lets load all posts: \")\n\n                return postRepository.find()\n            })\n            .then(function (allPosts) {\n                console.log(\"All posts: \", allPosts)\n            })\n    })\n    .catch(function (error) {\n        console.log(\"Error: \", error)\n    })\n```\n\n----------------------------------------\n\nTITLE: Retrieving MongoDB Repository in TypeORM\nDESCRIPTION: Demonstrates how to get a MongoRepository for a specific entity. It allows specifying a connection name to get the MongoDB repository from a specific connection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getMongoRepository} from \"typeorm\";\n\nconst userRepository = getMongoRepository(User);\n//使用存储库方法\n\nconst blogRepository = getMongoRepository(Blog, \"secondary-connection\");\n// 使用另一个存储库方法\n```\n\n----------------------------------------\n\nTITLE: Executing Standard Delete Query in TypeORM\nDESCRIPTION: Demonstrates how to perform a standard delete operation using QueryBuilder. This method directly removes records from the database based on specified conditions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/delete-query-builder.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait myDataSource\n    .createQueryBuilder()\n    .delete()\n    .from(User)\n    .where(\"id = :id\", { id: 1 })\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Defining Entity with ManyToMany Relation in TypeORM (TypeScript)\nDESCRIPTION: Illustrates the definition of a Question entity with a ManyToMany relation to Category. This example shows why initializing relation properties can cause issues in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations-faq.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    @ManyToMany((type) => Category, (category) => category.questions)\n    @JoinTable()\n    categories: Category[] = [] // see = [] initialization here\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities using QueryBuilder in TypeORM\nDESCRIPTION: This snippet demonstrates how to load entities with their related entities using the QueryBuilder with leftJoinAndSelect. It shows how to query from both sides of the relationship.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-one-one-to-many-relations.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.photos\", \"photo\")\n    .getMany()\n\n// or from inverse side\n\nconst photos = await dataSource\n    .getRepository(Photo)\n    .createQueryBuilder(\"photo\")\n    .leftJoinAndSelect(\"photo.user\", \"user\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Query Runners in TypeORM\nDESCRIPTION: Shows how to create and use a query runner for managing individual database connections using the Connection API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryRunner = connection.createQueryRunner();\n\n// 只有在调用connect执行真正的数据库连接后才能使用它的方法\nawait queryRunner.connect();\n\n// .. 使用查询运行器并调用其方法\n\n// 重要提示 -  一旦完成,不要忘记释放查询运行器\nawait queryRunner.release();\n```\n\n----------------------------------------\n\nTITLE: Loading User with Inner Join to Photos\nDESCRIPTION: Uses QueryBuilder with innerJoinAndSelect to load a user only if they have non-removed photos. This differs from leftJoin by excluding users without matching photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await createQueryBuilder(\"user\")\n    .innerJoinAndSelect(\n        \"user.photos\",\n        \"photo\",\n        \"photo.isRemoved = :isRemoved\",\n        { isRemoved: false },\n    )\n    .where(\"user.name = :name\", { name: \"Timber\" })\n    .getOne()\n```\n\n----------------------------------------\n\nTITLE: Deleting Many-to-Many Relations in TypeORM\nDESCRIPTION: This code snippet shows how to remove a specific category from a question's categories array and save the updated relation using TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst question = await dataSource.getRepository(Question).findOne({\n    relations: {\n        categories: true,\n    },\n    where: { id: 1 }\n})\nquestion.categories = question.categories.filter((category) => {\n    return category.id !== categoryToRemove.id\n})\nawait dataSource.manager.save(question)\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Database Connection in JSON\nDESCRIPTION: This JSON configuration sets up the database connection and entity locations for TypeORM. It includes settings for the database type, credentials, synchronization, logging, and file paths for entities, migrations, and subscribers.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README_ko.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"type\": \"mysql\",\n   \"host\": \"localhost\",\n   \"port\": 3306,\n   \"username\": \"test\",\n   \"password\": \"test\",\n   \"database\": \"test\",\n   \"synchronize\": true,\n   \"logging\": false,\n   \"entities\": [\n      \"src/entity/**/*.ts\"\n   ],\n   \"migrations\": [\n      \"src/migration/**/*.ts\"\n   ],\n   \"subscribers\": [\n      \"src/subscriber/**/*.ts\"\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Increment and Decrement Operations in TypeORM\nDESCRIPTION: Methods for incrementing and decrementing numeric values.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.increment({ firstName: \"Timber\" }, \"age\", 3)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.decrement({ firstName: \"Timber\" }, \"age\", 3)\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Relations in TypeORM\nDESCRIPTION: This snippet shows how to set up a many-to-many relation between Photo and Album entities, including the use of @JoinTable decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\n\n@Entity()\nexport class Album {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @ManyToMany(() => Photo, (photo) => photo.albums)\n    @JoinTable()\n    photos: Photo[]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n    // ... other columns\n\n    @ManyToMany(() => Album, (album) => album.photos)\n    albums: Album[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Indices in TypeORM\nDESCRIPTION: Demonstrates how to create unique indices using the unique option in the @Index decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/indices.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, Index } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Index({ unique: true })\n    @Column()\n    firstName: string\n\n    @Column()\n    @Index({ unique: true })\n    lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing @BeforeUpdate Entity Listener in TypeORM\nDESCRIPTION: Demonstrates the use of the @BeforeUpdate decorator to define a method that is called before an existing entity is updated using repository/manager save.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @BeforeUpdate()\n    updateDates() {\n        this.updatedDate = new Date()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a View Entity with QueryBuilder in TypeORM\nDESCRIPTION: This example shows how to create a view entity using the @ViewEntity decorator with a QueryBuilder expression.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/view-entities.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewEntity({\n    expression: (dataSource: DataSource) => dataSource\n        .createQueryBuilder()\n        .select(\"post.id\", \"id\")\n        .addSelect(\"post.name\", \"name\")\n        .addSelect(\"category.name\", \"categoryName\")\n        .from(Post, \"post\")\n        .leftJoin(Category, \"category\", \"category.id = post.categoryId\")\n})\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with One-to-One Relation in TypeORM\nDESCRIPTION: This snippet defines the User entity with a one-to-one relation to the Profile entity. It uses the @OneToOne and @JoinColumn decorators to establish the relation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    OneToOne,\n    JoinColumn,\n} from \"typeorm\"\nimport { Profile } from \"./Profile\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToOne(() => Profile)\n    @JoinColumn()\n    profile: Profile\n}\n```\n\n----------------------------------------\n\nTITLE: Custom column name in TypeORM\nDESCRIPTION: Defining a column with a custom database field name in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({ name: \"field_with_underscores\" })\nfieldWithUnderscores: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing @BeforeRemove Entity Listener in TypeORM\nDESCRIPTION: Illustrates the use of the @BeforeRemove decorator to define a method that is called before an entity is removed using repository/manager remove.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @BeforeRemove()\n    updateStatus() {\n        this.status = \"removed\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Raw Results with Grouping\nDESCRIPTION: Uses getRawMany to retrieve raw data with grouping and aggregation. Returns multiple result objects with calculated values grouped by a property.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst photosSums = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .select(\"user.id\")\n    .addSelect(\"SUM(user.photosCount)\", \"sum\")\n    .groupBy(\"user.id\")\n    .getRawMany()\n\n// result will be like this: [{ id: 1, sum: 25 }, { id: 2, sum: 13 }, ...]\n```\n\n----------------------------------------\n\nTITLE: Disabling Index Synchronization in TypeORM\nDESCRIPTION: Shows how to disable automatic index synchronization for custom indices using the synchronize option.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/indices.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\n@Index(\"POST_NAME_INDEX\", { synchronize: false })\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ORDER BY Expressions in TypeORM Query Builder\nDESCRIPTION: Shows how to add ORDER BY expressions to a query, including single and multiple criteria, and specifying ascending or descending order.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").orderBy(\"user.id\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").orderBy(\"user.id\", \"DESC\")\n\ncreateQueryBuilder(\"user\").orderBy(\"user.id\", \"ASC\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").orderBy(\"user.name\").addOrderBy(\"user.id\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").orderBy({\n    \"user.name\": \"ASC\",\n    \"user.id\": \"DESC\",\n})\n```\n\n----------------------------------------\n\nTITLE: Delete Operations in TypeORM\nDESCRIPTION: Methods for deleting entities from the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.delete(1)\nawait repository.delete([1, 2, 3])\nawait repository.delete({ firstName: \"Timber\" })\n```\n\n----------------------------------------\n\nTITLE: Using RemoveOptions in TypeORM Repository remove Method (TypeScript)\nDESCRIPTION: Demonstrates how to use RemoveOptions when calling the remove method. This example shows how to chunk large deletions to handle limitations in underlying database drivers.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// users contains array of User Entities\nuserRepository.remove(users, { chunk: entities.length / 1000 })\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key in TypeORM\nDESCRIPTION: Method to create a new foreign key constraint on a table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ncreateForeignKey(table: Table|string, foreignKey: TableForeignKey): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model in TypeScript with DataMapper Pattern\nDESCRIPTION: Example of defining a User entity using TypeORM decorators with the DataMapper pattern. Shows basic column definitions including primary key and standard columns.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README-zh_CN.md#2025-04-08_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column()\n  age: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Related Entity with Composite Keys\nDESCRIPTION: Demonstrates how to add related entities when working with composite primary keys.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/relational-query-builder.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"typeorm\";\n\nawait getConnection()\n  .createQueryBuilder()\n  .relation(Post, \"categories\")\n  .of({ firstPostId: 1, secondPostId: 3 })\n  .add({ firstCategoryId: 2, secondCategoryId: 4 });\n```\n\n----------------------------------------\n\nTITLE: Initializing Restore Operation in TypeORM\nDESCRIPTION: Shows the basic syntax for initializing a restore operation for soft-deleted records using QueryBuilder. This operation reverses the soft delete state.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/delete-query-builder.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.getRepository(Entity).createQueryBuilder().restore()\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in TypeORM\nDESCRIPTION: Executes all pending database migrations. Used to apply schema changes defined in migration files.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.runMigrations()\n```\n\n----------------------------------------\n\nTITLE: Changing Default Logger in TypeORM\nDESCRIPTION: This snippet shows how to change the default logger in TypeORM by specifying a different logger type in the data source configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    host: \"localhost\",\n    ...\n    logging: true,\n    logger: \"file\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Column Definitions in TypeORM\nDESCRIPTION: Defines reusable base columns that can be shared across multiple entity schemas using the spread operator. This pattern enables code reuse similar to inheritance in decorator-based entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntitySchemaColumnOptions } from \"typeorm\"\n\nexport const BaseColumnSchemaPart = {\n    id: {\n        type: Number,\n        primary: true,\n        generated: true,\n    } as EntitySchemaColumnOptions,\n    createdAt: {\n        name: \"created_at\",\n        type: \"timestamp with time zone\",\n        createDate: true,\n    } as EntitySchemaColumnOptions,\n    updatedAt: {\n        name: \"updated_at\",\n        type: \"timestamp with time zone\",\n        updateDate: true,\n    } as EntitySchemaColumnOptions,\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One Relation in TypeORM Entity (TypeScript)\nDESCRIPTION: Demonstrates the use of @ManyToOne decorator to create a many-to-one relationship between Photo and User entities. This example shows the Photo entity with a reference to its associated User.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from \"typeorm\"\nimport { User } from \"./User\"\n\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    url: string\n\n    @ManyToOne((type) => User, (user) => user.photos)\n    user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Relation ID to User Entity in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates how to include the profile ID in the User entity without loading the entire Profile object. This allows access to the related entity's ID without performing a join operation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations-faq.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    OneToOne,\n    JoinColumn,\n} from \"typeorm\"\nimport { Profile } from \"./Profile\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column({ nullable: true })\n    profileId: number\n\n    @OneToOne((type) => Profile)\n    @JoinColumn()\n    profile: Profile\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tree Repository in TypeORM\nDESCRIPTION: Shows how to retrieve a TreeRepository for a specific entity from a connection. It allows specifying a connection name to get the tree repository from a specific connection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getTreeRepository} from \"typeorm\";\n\nconst userRepository = getTreeRepository(User);\n// 使用存储库方法\n\nconst blogRepository = getTreeRepository(Blog, \"secondary-connection\");\n// 使用另一个存储库方法\n```\n\n----------------------------------------\n\nTITLE: Customizing Join Table in TypeORM Entity (TypeScript)\nDESCRIPTION: Demonstrates how to use the @JoinTable decorator to customize the junction table name, column names, and foreign key names in a many-to-many relationship between Post and Category entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @ManyToMany((type) => Category)\n    @JoinTable({\n        name: \"question_categories\",\n        joinColumn: {\n            name: \"question\",\n            referencedColumnName: \"id\",\n            foreignKeyConstraintName: \"fk_question_categories_questionId\"\n        },\n        inverseJoinColumn: {\n            name: \"category\",\n            referencedColumnName: \"id\",\n            foreignKeyConstraintName: \"fk_question_categories_categoryId\"\n        },\n        synchronize: false,\n    })\n    categories: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting TreeRepository in TypeORM\nDESCRIPTION: Retrieves a TreeRepository for working with tree-structured entities. Provides specialized methods for tree operations such as findTrees.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = dataSource.getTreeRepository(Category)\n// now you can call tree repository methods, for example findTrees:\nconst categories = await repository.findTrees()\n```\n\n----------------------------------------\n\nTITLE: Finding and Counting Entities with findAndCountBy in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates the use of findAndCountBy method to retrieve entities and their count based on simple conditions. This method is similar to findAndCount but uses a simplified where clause.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst [timbers, timbersCount] = await repository.findAndCountBy({\n    firstName: \"Timber\",\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript\nDESCRIPTION: TypeScript configuration file (tsconfig.json) setup for the project, including compiler options.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"lib\": [\"es5\", \"es6\", \"dom\"],\n        \"target\": \"es5\",\n        \"module\": \"commonjs\",\n        \"moduleResolution\": \"node\",\n        \"emitDecoratorMetadata\": true,\n        \"experimentalDecorators\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Category to Post Using RelationQueryBuilder\nDESCRIPTION: Demonstrates how to add a category to a post's categories using RelationQueryBuilder. This approach is more efficient than loading the entire entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/relational-query-builder.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"typeorm\";\n\nawait getConnection()\n  .createQueryBuilder()\n  .relation(Post, \"categories\")\n  .of(post)\n  .add(category);\n```\n\n----------------------------------------\n\nTITLE: Advanced Query Features in TypeORM\nDESCRIPTION: Examples of using custom indexes, execution time limits, and partial selection in TypeORM queries\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .useIndex(\"my_index\") // name of index\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .maxExecutionTime(1000) // milliseconds.\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .select([\"user.id\", \"user.name\"])\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Creating Transaction using EntityManager\nDESCRIPTION: Shows how to create a transaction using TypeORM's EntityManager instance. Similar to DataSource approach, but accessed through the manager property.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/transactions.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait myDataSource.manager.transaction(async (transactionalEntityManager) => {\n    // execute queries using transactionalEntityManager\n})\n```\n\n----------------------------------------\n\nTITLE: Using Cascade Save in One-to-One Relationship\nDESCRIPTION: Complete example demonstrating how to use cascading saves to automatically persist both a photo and its related metadata by only saving the photo entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ncreateConnection(options)\n    .then(async (connection) => {\n        // 创建 photo 对象\n        let photo = new Photo()\n        photo.name = \"Me and Bears\"\n        photo.description = \"I am near polar bears\"\n        photo.filename = \"photo-with-bears.jpg\"\n        photo.isPublished = true\n\n        // 创建 photo metadata 对象\n        let metadata = new PhotoMetadata()\n        metadata.height = 640\n        metadata.width = 480\n        metadata.compressed = true\n        metadata.comment = \"cybershoot\"\n        metadata.orientation = \"portait\"\n\n        photo.metadata = metadata // this way we connect them\n\n        // 获取 repository\n        let photoRepository = connection.getRepository(Photo)\n\n        // 保存photo的同时保存metadata\n        await photoRepository.save(photo)\n\n        console.log(\"Photo is saved, photo metadata is saved too.\")\n    })\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Soft Deleting a Relationship with Cascade in TypeORM\nDESCRIPTION: This example demonstrates how to set up and use cascading soft delete for a many-to-many relation in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst category1 = new Category()\ncategory1.name = \"animals\"\n\nconst category2 = new Category()\ncategory2.name = \"zoo\"\n\nconst question = new Question()\nquestion.categories = [category1, category2]\nconst newQuestion = await dataSource.manager.save(question)\n\nawait dataSource.manager.softRemove(newQuestion)\n```\n\n----------------------------------------\n\nTITLE: Creating QueryRunner in TypeORM\nDESCRIPTION: Creates a QueryRunner for managing database connections and transactions manually. Requires explicit connect and release calls to manage the connection lifecycle.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryRunner = dataSource.createQueryRunner()\n\n// you can use its methods only after you call connect\n// which performs real database connection\nawait queryRunner.connect()\n\n// .. now you can work with query runner and call its methods\n\n// very important - don't forget to release query runner once you finished working with it\nawait queryRunner.release()\n```\n\n----------------------------------------\n\nTITLE: Schema synchronization in Sequelize\nDESCRIPTION: Synchronizing database schema with model definitions in Sequelize.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nProject.sync({ force: true })\nTask.sync({ force: true })\n```\n\n----------------------------------------\n\nTITLE: Using Or Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the Or operator in a TypeORM query to combine multiple conditions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Or, Equal, ILike } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: Or(Equal(\"About #2\"), ILike(\"About%\")),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"title\" = 'About #2' OR \"title\" ILIKE 'About%'\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple TypeORM DataSources\nDESCRIPTION: Demonstrates how to create multiple DataSource instances for different database types (MySQL and PostgreSQL) with their respective configurations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nconst MysqlDataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [\n        // ....\n    ],\n})\n\nconst PostgresDataSource = new DataSource({\n    type: \"postgres\",\n    host: \"localhost\",\n    port: 5432,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [\n        // ....\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Spatial Indices in TypeORM - PostgreSQL Example\nDESCRIPTION: Shows how to create spatial indices for PostgreSQL with PostGIS support using geometry types.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/indices.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Geometry {\n    type: \"Point\"\n    coordinates: [Number, Number]\n}\n\n@Entity()\nexport class Thing {\n    @Column(\"geometry\", {\n        spatialFeatureType: \"Point\",\n        srid: 4326,\n    })\n    @Index({ spatial: true })\n    point: Geometry\n}\n```\n\n----------------------------------------\n\nTITLE: 查询多对一关系数据 (TypeScript)\nDESCRIPTION: 展示了如何使用Repository和QueryBuilder查询具有多对一关系的数据。包括从User和Photo两个方向进行查询的方法。\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/many-to-one-one-to-many-relations.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = connection.getRepository(User);\nconst users = await userRepository.find({ relations: [\"photos\"] });\n\n// or from inverse side\n\nconst photoRepository = connection.getRepository(Photo);\nconst photos = await photoRepository.find({ relations: [\"user\"] });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await connection\n  .getRepository(User)\n  .createQueryBuilder(\"user\")\n  .leftJoinAndSelect(\"user.photos\", \"photo\")\n  .getMany();\n\n// or from inverse side\n\nconst photos = await connection\n  .getRepository(Photo)\n  .createQueryBuilder(\"photo\")\n  .leftJoinAndSelect(\"photo.user\", \"user\")\n  .getMany();\n```\n\n----------------------------------------\n\nTITLE: Dropping Check Constraint in TypeORM\nDESCRIPTION: Method to drop a single check constraint from a table. Not supported in MySQL.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ndropCheckConstraint(table: Table|string, checkOrName: TableCheck|string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Original Student Entity Implementation\nDESCRIPTION: Basic TypeORM entity for Student with individual columns for first name and last name\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/embedded-entities.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Student {\n    @PrimaryGeneratedColumn()\n    id: string\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    faculty: string\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Entity Metadata in TypeORM\nDESCRIPTION: Shows how to check for and retrieve entity metadata using the Connection API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nif (connection.hasMetadata(User))\n    const userMetadata = connection.getMetadata(User);\n\nconst userMetadata = connection.getMetadata(User);\n// 获得有关用户实体的任何信息\n```\n\n----------------------------------------\n\nTITLE: Adding Category to Post's Categories using RelationQueryBuilder in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a new category to a post's many-to-many relation using RelationQueryBuilder. It's more efficient than loading all related entities and using the save method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relational-query-builder.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .relation(Post, \"categories\")\n    .of(post)\n    .add(category)\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Subscriber in TypeORM\nDESCRIPTION: Demonstrates how to create an entity subscriber that listens to specific entity events. This example shows a subscriber for the Post entity with a beforeInsert method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@EventSubscriber()\nexport class PostSubscriber implements EntitySubscriberInterface<Post> {\n    /**\n     * Indicates that this subscriber only listen to Post events.\n     */\n    listenTo() {\n        return Post\n    }\n\n    /**\n     * Called before post insertion.\n     */\n    beforeInsert(event: InsertEvent<Post>) {\n        console.log(`BEFORE POST INSERTED: `, event.entity)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Inheritance in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates how to use entity inheritance in TypeORM to reduce code duplication and create a hierarchy of related entities with shared properties.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/entities.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class Content {\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    title: string;\n\n    @Column()\n    description: string;\n}\n@Entity()\nexport class Photo extends Content {\n    @Column()\n    size: string;\n}\n\n@Entity()\nexport class Question extends Content {\n    @Column()\n    answersCount: number;\n}\n\n@Entity()\nexport class Post extends Content {\n    @Column()\n    viewCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Error Handling Configuration\nDESCRIPTION: Configuration to ignore cache errors and continue with database queries\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    type: \"mysql\",\n    host: \"localhost\",\n    username: \"test\",\n    ...\n    cache: {\n        type: \"redis\",\n        options: {\n            socket: {\n                host: \"localhost\",\n                port: 6379\n            }\n        },\n        ignoreErrors: true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Entity in TypeScript using TypeORM\nDESCRIPTION: This snippet defines a Post entity with id, title, description, and viewCount columns using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n\n    @Column()\n    viewCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Student Entity with Embedded Name\nDESCRIPTION: Updated Student entity using the embedded Name class to reduce duplication\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/embedded-entities.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\nimport { Name } from \"./Name\"\n\n@Entity()\nexport class Student {\n    @PrimaryGeneratedColumn()\n    id: string\n\n    @Column(() => Name)\n    name: Name\n\n    @Column()\n    faculty: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Entity Class in TypeORM\nDESCRIPTION: Example of defining a Photo entity class without decorators, representing the initial model before adding TypeORM-specific annotations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n    id: number\n    name: string\n    description: string\n    filename: string\n    views: number\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Photo Entity with Single Table Inheritance in TypeORM\nDESCRIPTION: This snippet shows how to create a Photo entity that extends the Content class using single table inheritance with the @ChildEntity decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@ChildEntity()\nexport class Photo extends Content {\n    @Column()\n    size: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Index in TypeORM\nDESCRIPTION: This snippet demonstrates how to create a unique index to ensure no duplicate values in a column using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Index([\"email\"], { unique: true })\n```\n\n----------------------------------------\n\nTITLE: Defining an ActiveRecord Entity Model in TypeORM with TypeScript\nDESCRIPTION: This code shows how to define a User entity using TypeORM's ActiveRecord implementation. It extends BaseEntity to provide methods for database operations directly on the entity instance.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README_ko.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from \"typeorm\";\n\n@Entity()\nexport class User extends BaseEntity {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    age: number;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript\nDESCRIPTION: Command to install TypeScript as a development dependency for the project.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i typescript --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring MSSQL Connection Options in TypeORM\nDESCRIPTION: This snippet demonstrates how to configure various MSSQL connection options in TypeORM. It includes settings for connection details, timeouts, pooling, and MSSQL-specific features.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-options.md#2025-04-08_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  url: \"mssql://username:password@localhost:1433/database\",\n  host: \"localhost\",\n  port: 1433,\n  username: \"username\",\n  password: \"password\",\n  database: \"database\",\n  schema: \"public\",\n  domain: \"domain\",\n  connectionTimeout: 15000,\n  requestTimeout: 15000,\n  stream: false,\n  pool: {\n    max: 10,\n    min: 0,\n    maxWaitingClients: 100,\n    acquireTimeoutMillis: 30000,\n    fifo: true,\n    priorityRange: 1,\n    evictionRunIntervalMillis: 0,\n    numTestsPerRun: 3,\n    softIdleTimeoutMillis: -1,\n    idleTimeoutMillis: 30000\n  },\n  options: {\n    encrypt: true,\n    trustServerCertificate: false,\n    useUTC: false,\n    useColumnNames: false,\n    camelCaseColumns: false,\n    isolationLevel: \"READ_COMMITTED\",\n    readOnlyIntent: false,\n    appName: \"node-mssql\",\n    tdsVersion: \"7_4\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in TypeORM Data Source Options\nDESCRIPTION: This snippet demonstrates how to enable logging for all queries and errors in TypeORM by setting the 'logging' option to true in the data source configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    name: \"mysql\",\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    ...\n    logging: true\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for User Query with Join Conditions\nDESCRIPTION: Shows the SQL query generated by TypeORM when loading a user with non-removed photos using join conditions. Note how the condition appears in the ON clause rather than the WHERE clause.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user.*, photo.* FROM users user\n    LEFT JOIN photos photo ON photo.user = user.id AND photo.isRemoved = FALSE\n    WHERE user.name = 'Timber'\n```\n\n----------------------------------------\n\nTITLE: Defining Set Column Type in TypeORM\nDESCRIPTION: This snippet demonstrates how to define a set column type in TypeORM using TypeScript enums. It shows the usage with a User entity and a UserRole enum, allowing multiple roles to be assigned.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum UserRole {\n    ADMIN = \"admin\",\n    EDITOR = \"editor\",\n    GHOST = \"ghost\",\n}\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column({\n        type: \"set\",\n        enum: UserRole,\n        default: [UserRole.GHOST, UserRole.EDITOR],\n    })\n    roles: UserRole[]\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for User with Non-Removed Photos Query\nDESCRIPTION: Shows the SQL query generated by TypeORM when loading a user with their non-removed photos using where conditions. Demonstrates how TypeORM translates the QueryBuilder code into SQL.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user.*, photo.* FROM users user\n    LEFT JOIN photos photo ON photo.user = user.id\n    WHERE user.name = 'Timber' AND photo.isRemoved = FALSE\n```\n\n----------------------------------------\n\nTITLE: Loading Related Data Using QueryBuilder in TypeORM\nDESCRIPTION: Code showing how to load photos with their related metadata using the more flexible QueryBuilder approach with join operations in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConnection } from \"typeorm\"\nimport { Photo } from \"./entity/Photo\"\nimport { PhotoMetadata } from \"./entity/PhotoMetadata\"\n\ncreateConnection(/*...*/)\n    .then(async (connection) => {\n        /*...*/\n        let photos = await connection\n            .getRepository(Photo)\n            .createQueryBuilder(\"photo\")\n            .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n            .getMany()\n    })\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Performing Database Operations with TypeORM Repository in TypeScript\nDESCRIPTION: This snippet demonstrates how to use TypeORM's repository to perform basic CRUD operations on the User entity. It shows saving a new user, finding users, and removing a user from the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README_ko.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = connection.getRepository(User);\n\nconst user = new User();\nuser.firstName = \"Timber\";\nuser.lastName = \"Saw\";\nuser.age = 25;\nawait repository.save(user);\n\nconst allUsers = await repository.find();\nconst firstUser = await repository.findOne(1); // find by id\nconst timber = await repository.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n\nawait repository.remove(timber);\n```\n\n----------------------------------------\n\nTITLE: Installing TypeORM with Package.json Configuration for TypeScript\nDESCRIPTION: Configuration for TypeScript projects to enable TypeORM CLI usage through npm scripts. Includes both CommonJS and ESM configurations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/using-cli.md#2025-04-08_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    ...\n    \"typeorm\": \"typeorm-ts-node-commonjs\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    ...\n    \"typeorm\": \"typeorm-ts-node-esm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Entity Schema with Relations in TypeORM using JavaScript\nDESCRIPTION: This snippet demonstrates how to define a Post entity schema in TypeORM with JavaScript, including columns and a many-to-many relationship to the Category entity. It shows how to configure a primary key, basic columns, and specify relationship settings like joinTable and cascade.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/usage-with-javascript.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvar EntitySchema = require(\"typeorm\").EntitySchema\n\nmodule.exports = new EntitySchema({\n    name: \"Post\", // Will use table name `post` as default behaviour.\n    tableName: \"posts\", // Optional: Provide `tableName` property to override the default behaviour for table name.\n    columns: {\n        id: {\n            primary: true,\n            type: \"int\",\n            generated: true,\n        },\n        title: {\n            type: \"varchar\",\n        },\n        text: {\n            type: \"text\",\n        },\n    },\n    relations: {\n        categories: {\n            target: \"Category\",\n            type: \"many-to-many\",\n            joinTable: true,\n            cascade: true,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Logging Options in TypeORM\nDESCRIPTION: This snippet shows how to enable specific types of logging in TypeORM by providing an array of logging options in the data source configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    host: \"localhost\",\n    ...\n    logging: [\"query\", \"error\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Database Connection Lifecycle in TypeORM\nDESCRIPTION: Illustrates how to connect to and close a database connection, as well as synchronize the database schema and drop the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait connection.connect();\n\nawait connection.close();\n\nawait connection.synchronize();\n\nawait connection.dropDatabase();\n```\n\n----------------------------------------\n\nTITLE: Accessing DataSource Options in TypeORM\nDESCRIPTION: Retrieves the options used to create a DataSource instance. These options define connection parameters and other configuration settings.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataSourceOptions: DataSourceOptions = dataSource.options\n```\n\n----------------------------------------\n\nTITLE: Loading User with Non-Removed Photos using Join Conditions\nDESCRIPTION: Uses QueryBuilder to load a user with non-removed photos by adding a condition to the join expression instead of using where. This applies the filter at the join level rather than in the where clause.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.photos\", \"photo\", \"photo.isRemoved = :isRemoved\", {\n        isRemoved: false,\n    })\n    .where(\"user.name = :name\", { name: \"Timber\" })\n    .getOne()\n```\n\n----------------------------------------\n\nTITLE: Querying and Inserting Data Using Entity Schemas in TypeORM\nDESCRIPTION: This snippet demonstrates how to use the defined entity schemas for querying and inserting data using TypeORM's repository. It shows how to find a category by id and insert a new category.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/separating-entity-definition.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Querying data\nconst categoryRepository = getRepository<Category>(CategoryEntity);\nconst category = await categoryRepository.findOne(1); // category is properly typed!\n\n// Inserting a new category into the database\nconst categoryDTO = {\n  // Note that id is auto-generated, refer to the schema definition above\n  name: 'new category',\n};\nconst newCategory = await categoryRepository.save(categoryDTO);\n```\n\n----------------------------------------\n\nTITLE: Timestamp Migration Command\nDESCRIPTION: Command syntax for creating or generating migrations with a specific timestamp.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm -t <specific-timestamp> migration:{create|generate}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Repositories with withRepository Method in TypeORM\nDESCRIPTION: Demonstrates how to get a custom repository instance that will be used in a transaction. This method is particularly useful when working with custom repositories in the context of transaction management.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-manager-api.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst myUserRepository = manager.withRepository(UserRepository)\n```\n\n----------------------------------------\n\nTITLE: Enabling All Logging in TypeORM\nDESCRIPTION: This snippet shows how to enable all types of logging in TypeORM by setting the 'logging' option to 'all' in the data source configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    host: \"localhost\",\n    ...\n    logging: \"all\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using LessThan Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Shows how to use the LessThan operator in a TypeORM query to find posts with likes less than a specific value.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LessThan } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    likes: LessThan(10),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"likes\" < 10\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model in TypeScript with ActiveRecord Pattern\nDESCRIPTION: Example of defining a User entity using TypeORM decorators with the ActiveRecord pattern by extending BaseEntity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README-zh_CN.md#2025-04-08_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from \"typeorm\";\n\n@Entity()\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column()\n  age: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Photo Entity with Many-to-One Relationship in TypeORM\nDESCRIPTION: TypeScript class defining a Photo entity with a many-to-one relationship to User entity. The entity uses decorators to define primary key, columns, and the relationship to a user.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from \"typeorm\"\nimport { User } from \"./User\"\n\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    url: string\n\n    @ManyToOne((type) => User, (user) => user.photos)\n    user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity-Specific Event Subscriber in TypeORM\nDESCRIPTION: Shows how to implement an event subscriber that listens to events for a specific entity type (Post). It implements the EntitySubscriberInterface and uses the listenTo method to specify which entity it monitors.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n@EventSubscriber()\nexport class PostSubscriber implements EntitySubscriberInterface<Post> {\n    /**\n     * Indicates that this subscriber only listen to Post events.\n     */\n    listenTo() {\n        return Post\n    }\n\n    /**\n     * Called before post insertion.\n     */\n    beforeInsert(event: InsertEvent<Post>) {\n        console.log(`BEFORE POST INSERTED: `, event.entity)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Raw SQL Support in TypeORM Insert Queries\nDESCRIPTION: Shows how to use raw SQL functions within TypeORM insert queries by using a function-style value. Note that this approach doesn't escape values automatically, so you need to handle escaping yourself.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/insert-query-builder.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .insert()\n    .into(User)\n    .values({\n        firstName: \"Timber\",\n        lastName: () => \"CONCAT('S', 'A', 'W')\",\n    })\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Repositories in TypeORM\nDESCRIPTION: Shows how to retrieve and use custom repositories with the Connection API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = connection.getCustomRepository(UserRepository);\n// 调用自定义存储库中的方法 -  UserRepository类\nconst crazyUsers = await userRepository.findCrazyUsers();\n```\n\n----------------------------------------\n\nTITLE: Streaming Query Results\nDESCRIPTION: Uses stream to get a stream of query results instead of loading all at once. Useful for processing large result sets without consuming too much memory.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .where(\"user.id = :id\", { id: 1 })\n    .stream()\n```\n\n----------------------------------------\n\nTITLE: Using Between Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Illustrates how to use the Between operator in a TypeORM query to find posts with likes within a specific range.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Between } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    likes: Between(1, 10),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"likes\" BETWEEN 1 AND 10\n```\n\n----------------------------------------\n\nTITLE: Using pg-native with Postgres in TypeORM\nDESCRIPTION: To use pg-native for improved Postgres performance, install it via npm and TypeORM will automatically use it.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm i pg-native\n\n// TypeORM will automatically use pg-native when available\n```\n\n----------------------------------------\n\nTITLE: Creating Spatial Indexes in TypeORM for MySQL\nDESCRIPTION: This example demonstrates how to create a spatial index on a geometry column in MySQL using TypeORM. Spatial indexes are used to optimize queries on spatial data types.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/indices.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Thing {\n  @Column(\"point\")\n  @Index({ spatial: true })\n  point: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced QueryBuilder Usage in TypeORM\nDESCRIPTION: Example of building a complex query using TypeORM's QueryBuilder to retrieve photos with joins, conditions, ordering, and pagination.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nlet photos = await connection\n    .getRepository(Photo)\n    .createQueryBuilder(\"photo\") // first argument is an alias. Alias is what you are selecting - photos. You must specify it.\n    .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n    .leftJoinAndSelect(\"photo.albums\", \"album\")\n    .where(\"photo.isPublished = true\")\n    .andWhere(\"(photo.name = :photoName OR photo.name = :bearName)\")\n    .orderBy(\"photo.id\", \"DESC\")\n    .skip(5)\n    .take(10)\n    .setParameters({ photoName: \"My\", bearName: \"Mishka\" })\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Using getRawMany() for Efficient Raw Data Retrieval in TypeORM\nDESCRIPTION: This example shows how to use getRawMany() to fetch only raw data, reducing TypeORM processing overhead when full objects aren't required.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst rawPosts = await dataSource.getRepository(Post)\n    .createQueryBuilder(\"post\")\n    .select(\"post.title, post.createdAt\")\n    .getRawMany();\n```\n\n----------------------------------------\n\nTITLE: Cloning TypeORM Repository and Setting Up Remote\nDESCRIPTION: Commands for forking and cloning the TypeORM repository, navigating to the directory, and setting up an upstream remote pointing to the main TypeORM repository.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md#2025-04-08_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Clone your GitHub repository:\ngit clone git@github.com:<github username>/typeorm.git\n\n# Go to the TypeORM directory:\ncd typeorm\n\n# Add the main TypeORM repository as an upstream remote to your repository:\ngit remote add upstream https://github.com/typeorm/typeorm.git\n```\n\n----------------------------------------\n\nTITLE: Accessing Repositories in TypeORM\nDESCRIPTION: Demonstrates how to retrieve different types of repositories (standard, tree, and MongoDB) for entities using the Connection API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = connection.getRepository(User);\n// 调用存储库方法，例如find：\nconst users = await repository.findOne(1);\n\nconst repository = connection.getTreeRepository(Category);\n// 调用树存储库方法，例如findTrees：\nconst categories = await repository.findTrees();\n\nconst repository = connection.getMongoRepository(User);\n// 调用特定于mongodb的存储库方法，例如createEntityCursor：\nconst categoryCursor = repository.createEntityCursor();\nconst category1 = await categoryCursor.next();\nconst category2 = await categoryCursor.next();\n```\n\n----------------------------------------\n\nTITLE: Using ArrayContainedBy Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Shows the usage of the ArrayContainedBy operator in a TypeORM query to find posts with categories contained by a specific array.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrayContainedBy } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    categories: ArrayContainedBy([\"TypeScript\"]),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"categories\" <@ '{TypeScript}'\n```\n\n----------------------------------------\n\nTITLE: Querying Hidden and Deleted Columns in TypeORM\nDESCRIPTION: Examples of querying entities with hidden columns and accessing soft-deleted records\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder()\n    .select(\"user.id\", \"id\")\n    .addSelect(\"user.password\")\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder()\n    .select(\"user.id\", \"id\")\n    .withDeleted()\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Refactored User Entity with Embedded Name\nDESCRIPTION: Updated User entity using the embedded Name class to reduce duplication\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/embedded-entities.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\nimport { Name } from \"./Name\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: string\n\n    @Column(() => Name)\n    name: Name\n\n    @Column()\n    isActive: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Performing ActiveRecord Operations in TypeORM\nDESCRIPTION: This snippet shows how to perform CRUD operations using TypeORM's ActiveRecord pattern. It demonstrates saving, finding, and removing user records directly using the entity class methods.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.age = 25\nawait user.save()\n\nconst allUsers = await User.find()\nconst firstUser = await User.findOne(1)\nconst timber = await User.findOne({ firstName: \"Timber\", lastName: \"Saw\" })\n\nawait timber.remove()\n```\n\n----------------------------------------\n\nTITLE: Joining Unrelated Entity using Entity Class\nDESCRIPTION: Uses leftJoinAndSelect with an entity class to join data that isn't necessarily defined as a relation. This allows joining any entity based on custom conditions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await createQueryBuilder(\"user\")\n    .leftJoinAndSelect(Photo, \"photo\", \"photo.userId = user.id\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for TypeORM in Browser\nDESCRIPTION: This snippet shows how to configure Webpack to use the browser version of TypeORM and provide SQL.js in the browser environment. It uses NormalModuleReplacementPlugin to replace 'typeorm' with 'typeorm/browser' and ProvidePlugin to make SQL.js available globally.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/supported-platforms.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n    ..., // 已有的任何现有插件\n    new webpack.NormalModuleReplacementPlugin(/typeorm$/, function (result) {\n        result.request = result.request.replace(/typeorm/, \"typeorm/browser\");\n    }),\n    new webpack.ProvidePlugin({\n      'window.SQL': 'sql.js/js/sql.js'\n    })\n]\n```\n\n----------------------------------------\n\nTITLE: Updated Repository Query Methods\nDESCRIPTION: Demonstrates the new type-safe approach for querying data using FindOptions and direct where conditions with the new findBy methods.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await userRepository.find({\n    where: {\n        /* conditions */\n    },\n    relations: {\n        /* relations */\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await userRepository.findBy({\n    name: \"Michael\",\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Migration Command\nDESCRIPTION: Basic command to generate a TypeORM migration with a specified name and datasource configuration path.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm migration:generate PostRefactoring -d path-to-datasource-config\n```\n\n----------------------------------------\n\nTITLE: Using Raw Operator with Custom Logic in TypeORM Query (TypeScript)\nDESCRIPTION: Shows how to use the Raw operator with custom logic in a TypeORM query for more complex comparisons.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Raw } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    currentDate: Raw((alias) => `${alias} > NOW()`),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"currentDate\" > NOW()\n```\n\n----------------------------------------\n\nTITLE: Defining Question Entity in TypeScript using TypeORM\nDESCRIPTION: This snippet defines a Question entity with id, title, description, and answersCount columns using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n\n    @Column()\n    answersCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Repository for an Entity in TypeORM\nDESCRIPTION: Demonstrates how to get a Repository for a specific entity from a connection. It allows specifying a connection name to get the repository from a specific connection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getRepository} from \"typeorm\";\n\nconst userRepository = getRepository(User);\n// you can use repository methods now\n\nconst blogRepository = getRepository(Blog, \"secondary-connection\");\n// you can use secondary connection repository methods\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Database Connection in TypeORM\nDESCRIPTION: Demonstrates how to create a new database connection using the createConnection function. This method registers the connection with the global connection manager and can read connection options from an ormconfig file or environment variables if not provided.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createConnection} from \"typeorm\";\n\nconst connection = await createConnection({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\"\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Memorized SQL in TypeORM\nDESCRIPTION: Method to retrieve stored SQL queries with parameters already replaced.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ngetMemorySql(): SqlInMemory\n```\n\n----------------------------------------\n\nTITLE: Using RelationId Decorator in TypeORM Entity (TypeScript)\nDESCRIPTION: Shows how to use the @RelationId decorator to load the ID of a related entity into a property. Examples are provided for both many-to-one and many-to-many relationships.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @ManyToOne((type) => Category)\n    category: Category\n\n    @RelationId((post: Post) => post.category) // you need to specify target relation\n    categoryId: number\n}\n\n@Entity()\nexport class Post {\n    @ManyToMany((type) => Category)\n    categories: Category[]\n\n    @RelationId((post: Post) => post.categories)\n    categoryIds: number[]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TypeORM Repository Usage\nDESCRIPTION: Demonstrates the basic pattern of creating and using a repository instance globally across an application.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/custom-repository.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// user.repository.ts\nexport const UserRepository = dataSource.getRepository(User)\n\n// user.controller.ts\nexport class UserController {\n    users() {\n        return UserRepository.find()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving One-to-One Relation in TypeORM\nDESCRIPTION: This snippet demonstrates how to save a one-to-one relation between User and Profile entities using TypeORM's EntityManager.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst profile = new Profile()\nprofile.gender = \"male\"\nprofile.photo = \"me.jpg\"\nawait dataSource.manager.save(profile)\n\nconst user = new User()\nuser.name = \"Joe Smith\"\nuser.profile = profile\nawait dataSource.manager.save(user)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logger in TypeORM Data Source\nDESCRIPTION: This snippet demonstrates how to specify a custom logger in the TypeORM data source configuration, using the MyCustomLogger implementation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\nimport { MyCustomLogger } from \"./logger/MyCustomLogger\"\n\nconst dataSource = new DataSource({\n    name: \"mysql\",\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    logger: new MyCustomLogger(),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for TypeORM in Browser\nDESCRIPTION: This snippet shows how to configure Webpack to use TypeORM in a browser environment. It includes the necessary plugins to replace the TypeORM module with the browser version and provide SQL.js.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/supported-platforms.md#2025-04-08_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n    ..., // any existing plugins that you already have\n    new webpack.NormalModuleReplacementPlugin(/typeorm$/, function (result) {\n        result.request = result.request.replace(/typeorm/, \"typeorm/browser\");\n    }),\n    new webpack.ProvidePlugin({\n      'window.SQL': 'sql.js/dist/sql-wasm.js'\n    })\n]\n```\n\n----------------------------------------\n\nTITLE: Unsetting Category for Post in TypeScript\nDESCRIPTION: This snippet demonstrates how to unset (set to null) a category for a post using RelationQueryBuilder. It's useful when you want to remove the relation entirely.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relational-query-builder.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .relation(Post, \"categories\")\n    .of(post) // you can use just post id as well\n    .set(null)\n```\n\n----------------------------------------\n\nTITLE: Insert with IGNORE/DO NOTHING in TypeORM\nDESCRIPTION: Shows how to use the orIgnore method to suppress errors during insertion when conflicts or invalid data are encountered. This is equivalent to INSERT IGNORE in MySQL or INSERT DO NOTHING in PostgreSQL.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/insert-query-builder.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .insert()\n    .into(User)\n    .values({\n        firstName: \"Timber\",\n        lastName: \"Saw\",\n        externalId: \"abc123\",\n    })\n    .orIgnore()\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Using MongoEntityManager in TypeORM\nDESCRIPTION: Retrieves the MongoEntityManager for working with MongoDB entities. This manager provides MongoDB-specific functionality for entity operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager: MongoEntityManager = dataSource.mongoManager\n// you can call manager or mongodb-manager specific methods, for example find:\nconst users = await manager.find()\n```\n\n----------------------------------------\n\nTITLE: Aggregate Operations in TypeORM\nDESCRIPTION: Methods for performing aggregate operations like sum, average, minimum, and maximum.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst sum = await repository.sum(\"age\", { firstName: \"Timber\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst average = await repository.average(\"age\", { firstName: \"Timber\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst minimum = await repository.minimum(\"age\", { firstName: \"Timber\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst maximum = await repository.maximum(\"age\", { firstName: \"Timber\" })\n```\n\n----------------------------------------\n\nTITLE: Defining Entity for Migration Example in TypeScript\nDESCRIPTION: Sample TypeORM entity definition for a Post model that demonstrates the starting point before migrations. This entity contains id, title, and text fields.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n}\n```\n\n----------------------------------------\n\nTITLE: Loading User with Profile using Find Options in TypeORM\nDESCRIPTION: This snippet shows how to load a User entity with its related Profile using TypeORM's Repository and Find Options.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/one-to-one-relations.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource.getRepository(User).find({\n    relations: {\n        profile: true,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Key in TypeORM\nDESCRIPTION: Method to drop a single foreign key constraint from a table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ndropForeignKey(table: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Adding a Primary Key Column to an Entity in TypeORM\nDESCRIPTION: This snippet demonstrates how to define a primary key column in a TypeORM entity using the @PrimaryColumn decorator. Every entity must have at least one primary key column.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryColumn } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @PrimaryColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column()\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Inverse Side of One-to-One Relationship in TypeORM\nDESCRIPTION: Code showing how to configure the inverse side of a one-to-one relationship in the Photo entity, referencing back to the PhotoMetadata entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne } from \"typeorm\"\nimport { PhotoMetadata } from \"./PhotoMetadata\"\n\n@Entity()\nexport class Photo {\n    /* ... other columns */\n\n    @OneToOne((type) => PhotoMetadata, (photoMetadata) => photoMetadata.photo)\n    metadata: PhotoMetadata\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Results in TypeORM Query\nDESCRIPTION: Shows how to use the 'order' option to specify the order of results in a TypeORM find operation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    order: {\n        name: \"ASC\",\n        id: \"DESC\",\n    },\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\"\nORDER BY \"name\" ASC, \"id\" DESC\n```\n\n----------------------------------------\n\nTITLE: Updated table inheritance usage example\nDESCRIPTION: Shows the new syntax for table inheritance after deprecation of @DiscriminatorValue and @DiscriminatorColumn decorators. Now uses @ChildEntity with direct value parameter.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@ChildEntity(\"value\")\n```\n\n----------------------------------------\n\nTITLE: Defining Entities in Multiple Databases\nDESCRIPTION: Demonstrates how to specify different databases for entities using the @Entity decorator. Shows example entity definitions for User and Photo entities in separate databases.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/multiple-data-sources.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity({ database: \"secondDB\" })\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity({ database: \"thirdDB\" })\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    url: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading in TypeORM Entity\nDESCRIPTION: This example shows how to implement lazy loading for a one-to-many relationship in TypeORM, which loads related data only when needed.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @OneToMany(() => Post, post => post.user, { lazy: true })\n    posts: Promise<Post[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HAVING Expressions in TypeORM Query Builder\nDESCRIPTION: Demonstrates how to add HAVING expressions to a query, including basic conditions and AND/OR clauses.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").having(\"user.name = :name\", { name: \"Timber\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\")\n    .having(\"user.firstName = :firstName\", { firstName: \"Timber\" })\n    .andHaving(\"user.lastName = :lastName\", { lastName: \"Saw\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\")\n    .having(\"user.firstName = :firstName\", { firstName: \"Timber\" })\n    .orHaving(\"user.lastName = :lastName\", { lastName: \"Saw\" })\n```\n\n----------------------------------------\n\nTITLE: Refactored Employee Entity with Embedded Name\nDESCRIPTION: Updated Employee entity using the embedded Name class to reduce duplication\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/embedded-entities.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\nimport { Name } from \"./Name\"\n\n@Entity()\nexport class Employee {\n    @PrimaryGeneratedColumn()\n    id: string\n\n    @Column(() => Name)\n    name: Name\n\n    @Column()\n    salary: number\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving a Photo Entity\nDESCRIPTION: Creates a new Photo entity instance, sets its properties, and saves it to the database using EntityManager. The save operation returns the same object with its generated ID.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Photo } from \"./entity/Photo\"\nimport { AppDataSource } from \"./index\"\n\nconst photo = new Photo()\nphoto.name = \"Me and Bears\"\nphoto.description = \"I am near polar bears\"\nphoto.filename = \"photo-with-bears.jpg\"\nphoto.views = 1\nphoto.isPublished = true\n\nawait AppDataSource.manager.save(photo)\nconsole.log(\"Photo has been saved. Photo id is\", photo.id)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Column Indices in TypeORM\nDESCRIPTION: Shows how to create indices spanning multiple columns by applying @Index decorator at the entity level.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/indices.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, Index } from \"typeorm\"\n\n@Entity()\n@Index([\"firstName\", \"lastName\"])\n@Index([\"firstName\", \"middleName\", \"lastName\"], { unique: true })\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    middleName: string\n\n    @Column()\n    lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Complete QueryRunner Usage Example in TypeORM\nDESCRIPTION: Comprehensive example showing the full lifecycle of a QueryRunner instance, including creation, connection, executing queries through EntityManager, and proper release.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/query-runner.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryRunner = dataSource.createQueryRunner()\n\n// take a connection from the connection pool\nawait queryRunner.connect()\n\n// use this particular connection to execute queries\nconst users = await queryRunner.manager.find(User)\n\n// don't forget to release connection after you are done using it\nawait queryRunner.release()\n```\n\n----------------------------------------\n\nTITLE: Mapping Joined Data to Custom Entity Property\nDESCRIPTION: Uses leftJoinAndMapOne to load related data and map it to a custom property (profilePhoto) on the User entity. This allows mapping specific related data to non-standard properties.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nexport class User {\n    /// ...\n    profilePhoto: Photo\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Vite Configuration for TypeORM\nDESCRIPTION: This is a basic Vite configuration file that serves as a starting point for using TypeORM in a Vite project. It includes essential plugins and build options.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport legacy from '@vitejs/plugin-legacy';\nimport vue from '@vitejs/plugin-vue';\nimport path from 'path';\nimport { defineConfig } from 'vite';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  build: {\n    sourcemap: true,\n  },\n  plugins: [vue(), legacy()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lazy Loaded Data in TypeORM\nDESCRIPTION: This snippet demonstrates how to retrieve lazy loaded data in TypeORM, showing the asynchronous nature of accessing lazy loaded relations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await userRepository.findOne(userId);\nconst posts = await user.posts;\n```\n\n----------------------------------------\n\nTITLE: Retrieving SQL Query and Parameters in TypeORM QueryBuilder\nDESCRIPTION: Demonstrates how to get both the generated SQL query and its parameters using the getQueryAndParameters() method for debugging purposes.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryAndParams = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .where(\"user.id = :id\", { id: 1 })\n    .getQueryAndParameters()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n[\n \"SELECT `user`.`id` as `userId`, `user`.`firstName` as `userFirstName`, `user`.`lastName` as `userLastName` FROM `users` `user` WHERE `user`.`id` = ?\",\n [ 1 ]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Entity with Concrete Table Inheritance in TypeORM\nDESCRIPTION: This snippet shows how to extend the Content class to create a Post entity, adding a viewCount property specific to posts.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post extends Content {\n    @Column()\n    viewCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Migration Class Implementation\nDESCRIPTION: Generated TypeScript migration class implementing MigrationInterface with up and down methods for renaming a column.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MigrationInterface, QueryRunner } from \"typeorm\"\n\nexport class PostRefactoringTIMESTAMP implements MigrationInterface {\n    async up(queryRunner: QueryRunner): Promise<void> {\n        await queryRunner.query(\n            `ALTER TABLE \"post\" ALTER COLUMN \"title\" RENAME TO \"name\"`,\n        )\n    }\n\n    async down(queryRunner: QueryRunner): Promise<void> {\n        await queryRunner.query(\n            `ALTER TABLE \"post\" ALTER COLUMN \"name\" RENAME TO \"title\"`,\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating QueryRunner Instance in TypeORM\nDESCRIPTION: Shows how to create a new QueryRunner instance from a data source. This is the first step in using QueryRunner for database operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/query-runner.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryRunner = dataSource.createQueryRunner()\n```\n\n----------------------------------------\n\nTITLE: Data Mapper Pattern Operations in TypeORM\nDESCRIPTION: Example of basic CRUD operations using the Data Mapper pattern with a repository to save, find, and remove user entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.age = 25\nawait repository.save(user)\n\nconst allUsers = await repository.find()\nconst firstUser = await repository.findOne(1) // find by id\nconst timber = await repository.findOne({\n    firstName: \"Timber\",\n    lastName: \"Saw\",\n})\n\nawait repository.remove(timber)\n```\n\n----------------------------------------\n\nTITLE: Data Mapper Pattern Operations in TypeORM\nDESCRIPTION: Example of basic CRUD operations using the Data Mapper pattern with a repository to save, find, and remove user entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.age = 25\nawait repository.save(user)\n\nconst allUsers = await repository.find()\nconst firstUser = await repository.findOne(1) // find by id\nconst timber = await repository.findOne({\n    firstName: \"Timber\",\n    lastName: \"Saw\",\n})\n\nawait repository.remove(timber)\n```\n\n----------------------------------------\n\nTITLE: Managing Tables with TypeORM QueryRunner\nDESCRIPTION: This section covers QueryRunner methods for creating, dropping, and renaming tables. These operations are crucial for structuring the database schema and managing table-level changes.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ncreateTable(table: Table, ifNotExist?: boolean, createForeignKeys?: boolean, createIndices?: boolean): Promise<void>\n\ndropTable(table: Table|string, ifExist?: boolean, dropForeignKeys?: boolean, dropIndices?: boolean): Promise<void>\n\nrenameTable(oldTableOrName: Table|string, newTableName: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Eager Loading in TypeORM Entity\nDESCRIPTION: This example shows how to implement eager loading for a one-to-many relationship in TypeORM, which automatically retrieves all related data when the main query is executed.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @OneToMany(() => Post, post => post.user, { eager: true })\n    posts: Post[];\n}\n```\n\n----------------------------------------\n\nTITLE: TypeORM Configuration in JSON Format\nDESCRIPTION: This snippet shows a sample TypeORM configuration file (ormconfig.json) that defines database connection parameters, entity locations, and other settings for a MySQL database connection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"mysql\",\n    \"host\": \"localhost\",\n    \"port\": 3306,\n    \"username\": \"test\",\n    \"password\": \"test\",\n    \"database\": \"test\",\n    \"synchronize\": true,\n    \"logging\": false,\n    \"entities\": [\"src/entity/**/*.ts\"],\n    \"migrations\": [\"src/migration/**/*.ts\"],\n    \"subscribers\": [\"src/subscriber/**/*.ts\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Connections with ConnectionManager in TypeORM\nDESCRIPTION: Demonstrates how to create, retrieve, and check for connections using the ConnectionManager API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst connection = connectionManager.create({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\"\n});\n\nconst defaultConnection = connectionManager.get(\"default\");\nconst secondaryConnection = connectionManager.get(\"secondary\");\n\nif (connectionManager.has(\"default\")) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-One Relationship (Photo Side) in TypeORM\nDESCRIPTION: Code showing how to set up the Photo entity with a many-to-one relationship to an author using the @ManyToOne decorator in TypeORM. This represents the owner side of the relationship.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToOne } from \"typeorm\"\nimport { PhotoMetadata } from \"./PhotoMetadata\"\nimport { Author } from \"./Author\"\n\n@Entity()\nexport class Photo {\n    /* ... other columns */\n\n    @ManyToOne((type) => Author, (author) => author.photos)\n    author: Author\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JoinColumn in TypeORM Relations (TypeScript)\nDESCRIPTION: This snippet demonstrates various ways to configure @JoinColumn in TypeORM relations. It shows how to customize join column names, reference different columns, and set up multiple join columns for a relation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@ManyToOne(type => Category)\n@JoinColumn() // this decorator is optional for @ManyToOne, but required for @OneToOne\ncategory: Category;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ManyToOne(type => Category)\n@JoinColumn({ name: \"cat_id\" })\ncategory: Category;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ManyToOne(type => Category)\n@JoinColumn({ referencedColumnName: \"name\" })\ncategory: Category;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ManyToOne(type => Category)\n@JoinColumn([\n    { name: \"category_id\", referencedColumnName: \"id\" },\n    { name: \"locale_id\", referencedColumnName: \"locale_id\" }\n])\ncategory: Category;\n```\n\n----------------------------------------\n\nTITLE: Using TypeORM DataSource in Controllers\nDESCRIPTION: Shows how to use a DataSource instance in a controller class to perform database operations using the entity manager.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AppDataSource } from \"./app-data-source\"\nimport { User } from \"../entity/User\"\n\nexport class UserController {\n    @Get(\"/users\")\n    getAll() {\n        return AppDataSource.manager.find(User)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: 保存多对一关系数据 (TypeScript)\nDESCRIPTION: 演示了如何创建和保存具有多对一关系的User和Photo实体数据。包括两种方法：先创建photos再关联user，以及先创建user再关联photos。\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/many-to-one-one-to-many-relations.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst photo1 = new Photo();\nphoto1.url = \"me.jpg\";\nawait connection.manager.save(photo1);\n\nconst photo2 = new Photo();\nphoto2.url = \"me-and-bears.jpg\";\nawait connection.manager.save(photo2);\n\nconst user = new User();\nuser.name = \"John\";\nuser.photos = [photo1, photo2];\nawait connection.manager.save(user);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User();\nuser.name = \"Leo\";\nawait connection.manager.save(user);\n\nconst photo1 = new Photo();\nphoto1.url = \"me.jpg\";\nphoto1.user = user;\nawait connection.manager.save(photo1);\n\nconst photo2 = new Photo();\nphoto2.url = \"me-and-bears.jpg\";\nphoto2.user = user;\nawait connection.manager.save(photo2);\n```\n\n----------------------------------------\n\nTITLE: Defining a Data Mapper Entity in TypeORM\nDESCRIPTION: This code snippet shows how to create a Data Mapper entity in TypeORM. The User class is a simple entity with decorated properties for database mapping, without inheriting from BaseEntity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/active-record-data-mapper.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    isActive: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LIMIT Expression in TypeORM Query Builder\nDESCRIPTION: Demonstrates how to add a LIMIT expression to a query to restrict the number of returned rows.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").limit(10)\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Entities with Find Method in TypeORM\nDESCRIPTION: Example of loading related entities using the find method with the relations option. This approach allows loading photos with their metadata in a single query.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createConnection } from \"typeorm\"\nimport { Photo } from \"./entity/Photo\"\nimport { PhotoMetadata } from \"./entity/PhotoMetadata\"\n\ncreateConnection(/*...*/)\n    .then(async (connection) => {\n        /*...*/\n        let photoRepository = connection.getRepository(Photo)\n        let photos = await photoRepository.find({ relations: [\"metadata\"] })\n    })\n    .catch((error) => console.log(error))\n```\n\n----------------------------------------\n\nTITLE: Implementing One-to-Many Relationship (Author Side) in TypeORM\nDESCRIPTION: Code showing how to set up the Author entity with a one-to-many relationship to photos using the @OneToMany decorator in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    OneToMany,\n    JoinColumn,\n} from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class Author {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToMany((type) => Photo, (photo) => photo.author) // note: we will create author property in the Photo class below\n    photos: Photo[]\n}\n```\n\n----------------------------------------\n\nTITLE: Find Operations in TypeORM\nDESCRIPTION: Methods for finding entities using various criteria.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst timbers = await repository.find({\n    where: {\n        firstName: \"Timber\",\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst timbers = await repository.findBy({ firstName: \"Timber\" })\n```\n\n----------------------------------------\n\nTITLE: Implementing @BeforeInsert Entity Listener in TypeORM\nDESCRIPTION: Shows how to use the @BeforeInsert decorator to define a method that is called before an entity is inserted using repository/manager save.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @BeforeInsert()\n    updateDates() {\n        this.createdDate = new Date()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Definitions with Hidden and Deleted Columns\nDESCRIPTION: Example entity definitions showing hidden columns with select:false and soft delete functionality using DeleteDateColumn\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column({ select: false })\n    password: string\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, DeleteDateColumn } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @DeleteDateColumn()\n    deletedAt?: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Entity ID Management in TypeORM\nDESCRIPTION: Methods for checking and retrieving entity primary key values.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-manager-api.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (manager.hasId(user)) {\n    // ... do something\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = manager.getId(user) // userId === 1\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Join without Selection\nDESCRIPTION: Shows the SQL generated when using innerJoin without selecting related data. The SELECT clause only contains user columns while the photo table is still joined for filtering.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user.* FROM users user\n    INNER JOIN photos photo ON photo.user = user.id\n    WHERE user.name = 'Timber'\n```\n\n----------------------------------------\n\nTITLE: Global Cache Duration Configuration\nDESCRIPTION: Setting global cache duration in data source options\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    type: \"mysql\",\n    host: \"localhost\",\n    username: \"test\",\n    ...\n    cache: {\n        duration: 30000 // 30 seconds\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with UUID in TypeORM\nDESCRIPTION: Shows a User entity with both a numeric ID and a UUID column. The UUID column has a unique constraint, demonstrating how to have multiple identifiers for an entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"users\")\nexport class User {\n    @PrimaryColumn({ name: \"ref\" })\n    id: number\n\n    @Column(\"uuid\", { unique: true })\n    uuid: string\n}\n```\n\n----------------------------------------\n\nTITLE: CreateDateColumn for Automatic Timestamps in TypeORM\nDESCRIPTION: Demonstrates the use of @CreateDateColumn decorator which automatically sets the timestamp when an entity is inserted into the database. No manual value assignment is required.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @CreateDateColumn()\n    createdDate: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Data Source\nDESCRIPTION: TypeScript code to set up the TypeORM data source with MySQL connection options.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nexport const myDataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [\"src/entity/*.js\"],\n    logging: true,\n    synchronize: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relation in TypeORM Entity (TypeScript)\nDESCRIPTION: Demonstrates the use of @ManyToMany and @JoinTable decorators to create a many-to-many relationship between Question and Category entities. This example shows the Question entity with a collection of associated Categories.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    @ManyToMany((type) => Category)\n    @JoinTable()\n    categories: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting MongoRepository in TypeORM\nDESCRIPTION: Retrieves a MongoRepository for MongoDB-specific entity operations. Provides MongoDB-specific methods not available in standard repositories.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = dataSource.getMongoRepository(User)\n// now you can call mongodb-specific repository methods, for example createEntityCursor:\nconst categoryCursor = repository.createEntityCursor()\nconst category1 = await categoryCursor.next()\nconst category2 = await categoryCursor.next()\n```\n\n----------------------------------------\n\nTITLE: Defining an Active Record Entity in TypeORM\nDESCRIPTION: This snippet demonstrates how to create an Active Record entity in TypeORM. The User class extends BaseEntity and includes decorated properties for database mapping.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/active-record-data-mapper.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    isActive: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with skip Method\nDESCRIPTION: Uses the skip method to skip a number of results, useful for pagination. This example skips the first 10 users and returns all remaining users with their photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.photos\", \"photo\")\n    .skip(10)\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for TypeORM to Suppress Unused Driver Warnings\nDESCRIPTION: This webpack configuration uses the FilterWarningsPlugin to suppress warnings related to unused database drivers in TypeORM. It excludes all possible drivers, allowing developers to remove exclusions for drivers they actually need.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst FilterWarningsPlugin = require('webpack-filter-warnings-plugin');\n\nmodule.exports = {\n    ...\n    plugins: [\n        //ignore the drivers you don't want. This is the complete list of all drivers -- remove the suppressions for drivers you want to use.\n        new FilterWarningsPlugin({\n            exclude: [/mongodb/, /mssql/, /mysql/, /mysql2/, /oracledb/, /pg/, /pg-native/, /pg-query-stream/, /react-native-sqlite-storage/, /redis/, /sqlite3/, /sql.js/, /typeorm-aurora-data-api-driver/]\n        })\n    ]\n};\n```\n\n----------------------------------------\n\nTITLE: Using Eager Relations - Repository Query\nDESCRIPTION: Demonstrates how to query questions with eager loading, where related categories are automatically loaded without explicit joins.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/eager-and-lazy-relations.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst questionRepository = dataSource.getRepository(Question)\n\n// questions will be loaded with its categories\nconst questions = await questionRepository.find()\n```\n\n----------------------------------------\n\nTITLE: Loading Bi-directional Many-to-Many Relations with QueryBuilder in TypeORM\nDESCRIPTION: This code demonstrates how to load categories with their related questions using QueryBuilder in a bi-directional many-to-many relation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst categoriesWithQuestions = await dataSource\n    .getRepository(Category)\n    .createQueryBuilder(\"category\")\n    .leftJoinAndSelect(\"category.questions\", \"question\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: ESM Migration Class Implementation\nDESCRIPTION: Generated JavaScript migration class in ESM format with JSDoc type annotations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @typedef {import('typeorm').MigrationInterface} MigrationInterface\n */\n\n\n/**\n * @class\n * @implements {MigrationInterface}\n */\nexport class PostRefactoringTIMESTAMP {\n    async up(queryRunner) {\n        await queryRunner.query(\n            `ALTER TABLE \"post\" ALTER COLUMN \"title\" RENAME TO \"name\"`,\n        )\n    }\n\n    async down(queryRunner) {\n        await queryRunner.query(\n            `ALTER TABLE \"post\" ALTER COLUMN \"name\" RENAME TO \"title\"`,\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Cached Results\nDESCRIPTION: Example of clearing specific cached results using cache ID\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.queryResultCache.remove([\"users_admins\"])\n```\n\n----------------------------------------\n\nTITLE: TypeORM CLI Commands Collection\nDESCRIPTION: Collection of various TypeORM CLI commands for project initialization, entity management, migrations, and database operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/using-cli.md#2025-04-08_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm init\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm init --name my-project\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm init --database mssql\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm init --name my-project --module esm\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm init --name my-project --express\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm init --docker\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm entity:create path-to-entity-dir/entity\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm subscriber:create path-to-subscriber-dir/subscriber\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm migration:create path-to-migrations-dir/migrationName\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm migration:generate path/to/Migration -d path/to/datasource\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm migration:run -- -d path-to-datasource-config\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm migration:revert -- -d path-to-datasource-config\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm migration:show  -- -d path-to-datasource-config\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm schema:sync\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm schema:log\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm schema:drop -- -d path-to-datasource-config\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm query \"SELECT * FROM USERS\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm cache:clear\n```\n\nLANGUAGE: bash\nCODE:\n```\ntypeorm version\n```\n\n----------------------------------------\n\nTITLE: Creating a View Entity with @ViewEntity Decorator in TypeScript\nDESCRIPTION: Shows how to use the @ViewEntity decorator to define a database view, using either a raw SQL expression or a QueryBuilder instance to specify the view definition.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewEntity({\n    expression: `\n        SELECT \"post\".\"id\" \"id\", \"post\".\"name\" AS \"name\", \"category\".\"name\" AS \"categoryName\"\n        FROM \"post\" \"post\"\n        LEFT JOIN \"category\" \"category\" ON \"post\".\"categoryId\" = \"category\".\"id\"\n    `,\n})\nexport class PostCategory {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewEntity({\n    expression: (dataSource: DataSource) =>\n        dataSource\n            .createQueryBuilder()\n            .select(\"post.id\", \"id\")\n            .addSelect(\"post.name\", \"name\")\n            .addSelect(\"category.name\", \"categoryName\")\n            .from(Post, \"post\")\n            .leftJoin(Category, \"category\", \"category.id = post.categoryId\")\n            .where(\"category.name = 'Cars'\"),\n})\nexport class PostCategory {}\n```\n\n----------------------------------------\n\nTITLE: Defining City Entity with Foreign Key in TypeORM\nDESCRIPTION: Shows how to define a City entity with a composite primary key and a foreign key relationship to the Country entity. The foreign key has custom options for cascade deletion and updates.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"cities\")\n@Unique([\"id\", \"countryCode\"])\nexport class City {\n    @PrimaryColumn()\n    id: number\n\n    @Column({ length: 2 })\n    @ForeignKey(\"countries\", { onDelete: \"CASCADE\", onUpdate: \"CASCADE\" })\n    countryCode: string\n\n    @Column()\n    name: string\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Connection in TypeORM\nDESCRIPTION: Demonstrates how to get a specific connection that was created using the createConnection method. It allows accessing the default connection or a named connection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getConnection} from \"typeorm\";\n\nconst connection = getConnection();\n// If there are named connections, you can specify the name:\nconst secondaryConnection = getConnection(\"secondary-connection\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Question Entity with Single Table Inheritance in TypeORM\nDESCRIPTION: This snippet demonstrates creating a Question entity that extends the Content class using single table inheritance with the @ChildEntity decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@ChildEntity()\nexport class Question extends Content {\n    @Column()\n    answersCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Column Values to Database Functions in TypeORM\nDESCRIPTION: This snippet shows how to set a default column value to a database function like NOW() by using a function that returns a string in the default column option.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({ default: () => \"NOW()\" })\ndate: Date;\n```\n\n----------------------------------------\n\nTITLE: Implementing Adjacency List Tree Structure in TypeORM\nDESCRIPTION: This code snippet demonstrates how to create an Adjacency List tree structure using TypeORM decorators. It defines a Category entity with self-referencing relationships for parent and children.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/tree-entities.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    ManyToOne,\n    OneToMany,\n} from \"typeorm\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @ManyToOne((type) => Category, (category) => category.children)\n    parent: Category\n\n    @OneToMany((type) => Category, (category) => category.parent)\n    children: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creation and update timestamp columns in TypeORM\nDESCRIPTION: Defining automatic creation and update timestamp columns in TypeORM entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@CreateDateColumn();\ncreateDate: Date;\n\n@UpdateDateColumn();\nupdateDate: Date;\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Selection Syntax in TypeScript\nDESCRIPTION: Demonstrates the new object-literal notation for selecting entity properties in find operations, which replaces the deprecated array syntax. This change improves type-safety.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: PrimaryColumn with Custom Constraint Name in TypeORM\nDESCRIPTION: Demonstrates how to set a custom primary key constraint name when using the @PrimaryColumn decorator in a TypeORM entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryColumn({ primaryKeyConstraintName: \"pk_user_id\" })\n    id: number\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Entity Subscriber in TypeORM\nDESCRIPTION: Shows how to create a generic entity subscriber that listens to events for all entities. This example implements various methods from EntitySubscriberInterface.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@EventSubscriber()\nexport class PostSubscriber implements EntitySubscriberInterface {\n    /**\n     * Called after entity is loaded.\n     */\n    afterLoad(entity: any) {\n        console.log(`AFTER ENTITY LOADED: `, entity)\n    }\n\n    /**\n     * Called before query execution.\n     */\n    beforeQuery(event: BeforeQueryEvent<any>) {\n        console.log(`BEFORE QUERY: `, event.query)\n    }\n\n    /**\n     * Called after query execution.\n     */\n    afterQuery(event: AfterQueryEvent<any>) {\n        console.log(`AFTER QUERY: `, event.query)\n    }\n\n    /**\n     * Called before entity insertion.\n     */\n    beforeInsert(event: InsertEvent<any>) {\n        console.log(`BEFORE ENTITY INSERTED: `, event.entity)\n    }\n\n    /**\n     * Called after entity insertion.\n     */\n    afterInsert(event: InsertEvent<any>) {\n        console.log(`AFTER ENTITY INSERTED: `, event.entity)\n    }\n\n    /**\n     * Called before entity update.\n     */\n    beforeUpdate(event: UpdateEvent<any>) {\n        console.log(`BEFORE ENTITY UPDATED: `, event.entity)\n    }\n\n    /**\n     * Called after entity update.\n     */\n    afterUpdate(event: UpdateEvent<any>) {\n        console.log(`AFTER ENTITY UPDATED: `, event.entity)\n    }\n\n    /**\n     * Called before entity removal.\n     */\n    beforeRemove(event: RemoveEvent<any>) {\n        console.log(\n            `BEFORE ENTITY WITH ID ${event.entityId} REMOVED: `,\n            event.entity,\n        )\n    }\n\n    /**\n     * Called after entity removal.\n     */\n    afterRemove(event: RemoveEvent<any>) {\n        console.log(\n            `AFTER ENTITY WITH ID ${event.entityId} REMOVED: `,\n            event.entity,\n        )\n    }\n\n    /**\n     * Called before entity removal.\n     */\n    beforeSoftRemove(event: SoftRemoveEvent<any>) {\n        console.log(\n            `BEFORE ENTITY WITH ID ${event.entityId} SOFT REMOVED: `,\n            event.entity,\n        )\n    }\n\n    /**\n     * Called after entity removal.\n     */\n    afterSoftRemove(event: SoftRemoveEvent<any>) {\n        console.log(\n            `AFTER ENTITY WITH ID ${event.entityId} SOFT REMOVED: `,\n            event.entity,\n        )\n    }\n\n    /**\n     * Called before entity recovery.\n     */\n    beforeRecover(event: RecoverEvent<any>) {\n        console.log(\n            `BEFORE ENTITY WITH ID ${event.entityId} RECOVERED: `,\n            event.entity,\n        )\n    }\n\n    /**\n     * Called after entity recovery.\n     */\n    afterRecover(event: RecoverEvent<any>) {\n        console.log(\n            `AFTER ENTITY WITH ID ${event.entityId} RECOVERED: `,\n            event.entity,\n        )\n    }\n\n    /**\n     * Called before transaction start.\n     */\n    beforeTransactionStart(event: TransactionStartEvent) {\n        console.log(`BEFORE TRANSACTION STARTED: `, event)\n    }\n\n    /**\n     * Called after transaction start.\n     */\n    afterTransactionStart(event: TransactionStartEvent) {\n        console.log(`AFTER TRANSACTION STARTED: `, event)\n    }\n\n    /**\n     * Called before transaction commit.\n     */\n    beforeTransactionCommit(event: TransactionCommitEvent) {\n        console.log(`BEFORE TRANSACTION COMMITTED: `, event)\n    }\n\n    /**\n     * Called after transaction commit.\n     */\n    afterTransactionCommit(event: TransactionCommitEvent) {\n        console.log(`AFTER TRANSACTION COMMITTED: `, event)\n    }\n\n    /**\n     * Called before transaction rollback.\n     */\n    beforeTransactionRollback(event: TransactionRollbackEvent) {\n        console.log(`BEFORE TRANSACTION ROLLBACK: `, event)\n    }\n\n    /**\n     * Called after transaction rollback.\n     */\n    afterTransactionRollback(event: TransactionRollbackEvent) {\n        console.log(`AFTER TRANSACTION ROLLBACK: `, event)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Last Migration in TypeORM\nDESCRIPTION: Reverts the most recently executed migration. Useful for rolling back schema changes if needed.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.undoLastMigration()\n```\n\n----------------------------------------\n\nTITLE: Generated Values with UUID in TypeORM\nDESCRIPTION: Demonstrates the @Generated decorator which marks a column to have a generated value. In this example, a UUID is generated once before the entity is inserted into the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @Column()\n    @Generated(\"uuid\")\n    uuid: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Mapper Repository Methods in TypeORM\nDESCRIPTION: This example demonstrates how to use Data Mapper repository methods for saving, removing, and querying entities in TypeORM. It shows basic CRUD operations on the User entity using a repository instance.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/active-record-data-mapper.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userRepository = dataSource.getRepository(User)\n\n// example how to save DM entity\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.isActive = true\nawait userRepository.save(user)\n\n// example how to remove DM entity\nawait userRepository.remove(user)\n\n// example how to load DM entities\nconst users = await userRepository.find({ skip: 2, take: 5 })\nconst newUsers = await userRepository.findBy({ isActive: true })\nconst timber = await userRepository.findOneBy({\n    firstName: \"Timber\",\n    lastName: \"Saw\",\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Many-to-Many Relation Entity in TypeORM\nDESCRIPTION: This code defines a custom entity (QuestionToCategory) to represent a many-to-many relation with additional properties between Question and Category entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\"\nimport { Question } from \"./question\"\nimport { Category } from \"./category\"\n\n@Entity()\nexport class QuestionToCategory {\n    @PrimaryGeneratedColumn()\n    public questionToCategoryId: number\n\n    @Column()\n    public questionId: number\n\n    @Column()\n    public categoryId: number\n\n    @Column()\n    public order: number\n\n    @ManyToOne(() => Question, (question) => question.questionToCategories)\n    public question: Question\n\n    @ManyToOne(() => Category, (category) => category.questionToCategories)\n    public category: Category\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Many-to-Many Relation Entity in TypeORM\nDESCRIPTION: This code defines a custom entity (QuestionToCategory) to represent a many-to-many relation with additional properties between Question and Category entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, ManyToOne, PrimaryGeneratedColumn } from \"typeorm\"\nimport { Question } from \"./question\"\nimport { Category } from \"./category\"\n\n@Entity()\nexport class QuestionToCategory {\n    @PrimaryGeneratedColumn()\n    public questionToCategoryId: number\n\n    @Column()\n    public questionId: number\n\n    @Column()\n    public categoryId: number\n\n    @Column()\n    public order: number\n\n    @ManyToOne(() => Question, (question) => question.questionToCategories)\n    public question: Question\n\n    @ManyToOne(() => Category, (category) => category.questionToCategories)\n    public category: Category\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Index in TypeORM Entity\nDESCRIPTION: This example shows how to create a composite index on multiple columns in a TypeORM entity using the @Index decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, Index } from \"typeorm\";\n\n@Entity()\n@Index([\"firstName\", \"lastName\"]) // Composite index\nexport class User {\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: ObjectIdColumn for MongoDB in TypeORM\nDESCRIPTION: Shows how to use the @ObjectIdColumn decorator in TypeORM for MongoDB entities. Every MongoDB entity must have an ObjectId column to function properly.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @ObjectIdColumn()\n    id: ObjectId\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Commands to create and initialize a new Node.js project for the user management application.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir user\ncd user\nnpm init\n```\n\n----------------------------------------\n\nTITLE: Advanced Select Options in TypeORM Queries\nDESCRIPTION: Examples of using the new select syntax for specifying exact fields to retrieve, including nested relations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    select: {\n        id: true,\n        firstName: true,\n        lastName: true,\n        photo: {\n            id: true,\n            filename: true,\n            album: {\n                id: true,\n                name: true,\n            },\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping Index in TypeORM\nDESCRIPTION: Method to drop a single index from a table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ndropIndex(table: Table|string, index: TableIndex|string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Counting Operations in TypeORM\nDESCRIPTION: Methods for counting entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = await repository.count({\n    where: {\n        firstName: \"Timber\",\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst count = await repository.countBy({ firstName: \"Timber\" })\n```\n\n----------------------------------------\n\nTITLE: Loading Entities with EntityManager\nDESCRIPTION: Demonstrates how to retrieve all Photo entities from the database using the EntityManager's find method, which returns an array of Photo objects.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Photo } from \"./entity/Photo\"\nimport { AppDataSource } from \"./index\"\n\nconst savedPhotos = await AppDataSource.manager.find(Photo)\nconsole.log(\"All photos from the db: \", savedPhotos)\n```\n\n----------------------------------------\n\nTITLE: Joining Unrelated Table by Name\nDESCRIPTION: Uses leftJoinAndSelect with a table name string to join any table in the database. This provides maximum flexibility for creating custom joins.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"photos\", \"photo\", \"photo.userId = user.id\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Entity Creation and Merging in TypeORM\nDESCRIPTION: Methods for creating new entities and merging entity data.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = repository.create() // same as const user = new User();\nconst user = repository.create({\n    id: 1,\n    firstName: \"Timber\",\n    lastName: \"Saw\",\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nrepository.merge(user, { firstName: \"Timber\" }, { lastName: \"Saw\" })\n```\n\n----------------------------------------\n\nTITLE: Initializing Soft Delete in TypeORM\nDESCRIPTION: Shows the basic syntax for initializing a soft delete operation using QueryBuilder. Soft delete marks records as deleted without physically removing them from the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/delete-query-builder.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.getRepository(Entity).createQueryBuilder().softDelete()\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple DataSources in TypeScript\nDESCRIPTION: Demonstrates how to create and manage multiple DataSources, replacing the deprecated ConnectionManager functionality.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst dataSource1 = new DataSource({\n    /*...*/\n})\nconst dataSource2 = new DataSource({\n    /*...*/\n})\nconst dataSource3 = new DataSource({\n    /*...*/\n})\n\nexport const MyDataSources = {\n    dataSource1,\n    dataSource2,\n    dataSource3,\n}\n```\n\n----------------------------------------\n\nTITLE: Using ArrayOverlap Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Illustrates how to use the ArrayOverlap operator in a TypeORM query to find posts with categories overlapping with a specific array.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrayOverlap } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    categories: ArrayOverlap([\"TypeScript\"]),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"categories\" && '{TypeScript}'\n```\n\n----------------------------------------\n\nTITLE: Adding GROUP BY Expression in TypeORM Query Builder\nDESCRIPTION: Shows how to add GROUP BY expressions to a query, including single and multiple criteria.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").groupBy(\"user.id\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").groupBy(\"user.name\").addGroupBy(\"user.id\")\n```\n\n----------------------------------------\n\nTITLE: Defining Basic MongoDB Entity in TypeORM\nDESCRIPTION: Shows how to define a basic MongoDB entity with ObjectId and columns using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/mongodb.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, ObjectId, ObjectIdColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @ObjectIdColumn()\n    _id: ObjectId\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using ILike Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Shows the usage of the ILike operator in a TypeORM query for case-insensitive pattern matching in post titles.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ILike } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: ILike(\"%out #%\"),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"title\" ILIKE '%out #%'\n```\n\n----------------------------------------\n\nTITLE: Creating Packed TypeORM Distribution\nDESCRIPTION: Command to build the TypeORM distribution package packed into a .tgz file in the build directory for easier installation into projects.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md#2025-04-08_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run pack\n```\n\n----------------------------------------\n\nTITLE: Executing Soft Delete Query in TypeORM\nDESCRIPTION: Demonstrates a complete soft delete operation with conditions using QueryBuilder. This example shows how to soft delete a specific user record by ID.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/delete-query-builder.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait myDataSource\n  .getRepository(User)\n  .createQueryBuilder()\n  .softDelete()\n  .where(\"id = :id\", { id: 1 })\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Relationship (Album Side) in TypeORM\nDESCRIPTION: Code showing how to implement the owner side of a many-to-many relationship between Album and Photo entities using @ManyToMany and @JoinTable decorators in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\n\n@Entity()\nexport class Album {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @ManyToMany((type) => Photo, (photo) => photo.albums)\n    @JoinTable()\n    photos: Photo[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Entity\nDESCRIPTION: TypeScript code defining the User entity with TypeORM decorators for database mapping.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying DataSource in TypeORM\nDESCRIPTION: Closes all database connections and destroys the DataSource. Typically called during application shutdown to properly release resources.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.destroy()\n```\n\n----------------------------------------\n\nTITLE: Defining Category Entity in TypeORM\nDESCRIPTION: This snippet demonstrates how to define a Category entity using TypeORM decorators. It includes a primary generated ID and a name column.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n}\n```\n\n----------------------------------------\n\nTITLE: Primary key column in TypeORM\nDESCRIPTION: Defining a primary key column in TypeORM without auto-increment.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({ primary: true })\nidentifier: string;\n```\n\n----------------------------------------\n\nTITLE: Checking DataSource Initialization Status in TypeORM\nDESCRIPTION: Determines whether a DataSource has been initialized and if a connection to the database has been established.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isInitialized: boolean = dataSource.isInitialized\n```\n\n----------------------------------------\n\nTITLE: Including Reflect Metadata in HTML\nDESCRIPTION: This HTML snippet shows how to include the reflect-metadata library, which is required for TypeORM to work in a browser environment.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/supported-platforms.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"./node_modules/reflect-metadata/Reflect.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Spatial Columns for PostgreSQL and CockroachDB in TypeORM\nDESCRIPTION: This snippet shows how to define spatial columns for PostgreSQL and CockroachDB using TypeORM. It uses GeoJSON as the interchange format and demonstrates the use of Point, LineString, and MultiPoint types.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryColumn,\n    Column,\n    Point,\n    LineString,\n    MultiPoint\n} from \"typeorm\"\n\n@Entity()\nexport class Thing {\n    @PrimaryColumn()\n    id: number\n\n    @Column(\"geometry\")\n    point: Point\n\n    @Column(\"geometry\")\n    linestring: LineString\n\n    @Column(\"geometry\", {\n        spatialFeatureType: \"MultiPoint\",\n        srid: 4326,\n    })\n    multiPointWithSRID: MultiPoint\n}\n\n...\n\nconst thing = new Thing()\nthing.point = {\n    type: \"Point\",\n    coordinates: [116.443987, 39.920843],\n}\nthing.linestring = {\n    type: \"LineString\",\n    coordinates: [\n        [-87.623177, 41.881832],\n        [-90.199402, 38.627003],\n        [-82.446732, 38.413651],\n        [-87.623177, 41.881832],\n    ],\n}\nthing.multiPointWithSRID = {\n    type: \"MultiPoint\",\n    coordinates: [\n        [100.0, 0.0],\n        [101.0, 1.0],\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Cache Configuration\nDESCRIPTION: Setting up Redis as cache storage with connection options\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    type: \"mysql\",\n    host: \"localhost\",\n    username: \"test\",\n    ...\n    cache: {\n        type: \"redis\",\n        options: {\n            socket: {\n                host: \"localhost\",\n                port: 6379\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using InsertQueryBuilder Results in Common Table Expressions (PostgreSQL)\nDESCRIPTION: Shows how to use the result of an InsertQueryBuilder as a common table expression in a subsequent query. This example is specific to PostgreSQL.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst insertQueryBuilder = connection.getRepository(User)\n    .createQueryBuilder()\n    .insert({\n        name: 'John Smith'\n    })\n    .returning(['id']);\n\nconst users = await connection.getRepository(User)\n    .createQueryBuilder('user')\n    .addCommonTableExpression(insertQueryBuilder, 'insert_results')\n    .where(`user.id IN (SELECT \"id\" FROM 'insert_results')`)\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: Defining Category Entity Schema in TypeORM with JavaScript\nDESCRIPTION: This snippet shows how to define an entity schema for a Category model in TypeORM using JavaScript. It demonstrates setting up a table name, primary key, and basic column definitions without using TypeScript decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/usage-with-javascript.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvar EntitySchema = require(\"typeorm\").EntitySchema\n\nmodule.exports = new EntitySchema({\n    name: \"Category\", // Will use table name `category` as default behaviour.\n    tableName: \"categories\", // Optional: Provide `tableName` property to override the default behaviour for table name.\n    columns: {\n        id: {\n            primary: true,\n            type: \"int\",\n            generated: true,\n        },\n        name: {\n            type: \"varchar\",\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping Multiple Check Constraints in TypeORM\nDESCRIPTION: Method to drop multiple check constraints at once. Not supported in MySQL.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ndropCheckConstraints(table: Table|string, checkConstraints: TableCheck[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Entity Creation and Merging in TypeORM\nDESCRIPTION: Methods for creating new entities and merging entity data.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-manager-api.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = manager.create(User) // same as const user = new User();\nconst user = manager.create(User, {\n    id: 1,\n    firstName: \"Timber\",\n    lastName: \"Saw\",\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nmanager.merge(User, user, { firstName: \"Timber\" }, { lastName: \"Saw\" })\n```\n\n----------------------------------------\n\nTITLE: Updated array parameter syntax\nDESCRIPTION: Demonstrates the new syntax for handling array parameters in queries, replacing (:param) with (:...param).\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n(:...param)\n```\n\n----------------------------------------\n\nTITLE: Using PostGIS Functions with TypeORM for Spatial Queries\nDESCRIPTION: This snippet demonstrates how to use PostGIS functions with TypeORM for spatial queries. It shows conversion between GeoJSON and PostGIS geometries, and how to handle spatial operations in queries.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Point } from \"typeorm\"\n\nconst origin: Point = {\n    type: \"Point\",\n    coordinates: [0, 0],\n}\n\nawait dataSource.manager\n    .createQueryBuilder(Thing, \"thing\")\n    // convert stringified GeoJSON into a geometry with an SRID that matches the\n    // table specification\n    .where(\n        \"ST_Distance(geom, ST_SetSRID(ST_GeomFromGeoJSON(:origin), ST_SRID(geom))) > 0\",\n    )\n    .orderBy(\n        \"ST_Distance(geom, ST_SetSRID(ST_GeomFromGeoJSON(:origin), ST_SRID(geom)))\",\n        \"ASC\",\n    )\n    .setParameters({\n        // stringify GeoJSON\n        origin: JSON.stringify(origin),\n    })\n    .getMany()\n\nawait dataSource.manager\n    .createQueryBuilder(Thing, \"thing\")\n    // convert geometry result into GeoJSON, treated as JSON (so that TypeORM\n    // will know to deserialize it)\n    .select(\"ST_AsGeoJSON(ST_Buffer(geom, 0.1))::json geom\")\n    .from(\"thing\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Conditional Relations in Where Clause\nDESCRIPTION: Examples of using nested where conditions and operators with relations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    where: {\n        photos: {\n            album: {\n                name: \"profile\",\n            },\n        },\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    where: {\n        photos: MoreThan(10),\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    where: {\n        photos: true,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Entity Preloading in TypeORM\nDESCRIPTION: Method for preloading entity data from partial objects.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst partialUser = {\n    id: 1,\n    firstName: \"Rizzrak\",\n    profile: {\n        id: 1,\n    },\n}\nconst user = await repository.preload(partialUser)\n```\n\n----------------------------------------\n\nTITLE: Implementing Many-to-Many Relationship (Photo Side) in TypeORM\nDESCRIPTION: Code showing how to implement the inverse side of a many-to-many relationship in the Photo entity, referring back to albums.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n    /// ... other columns\n\n    @ManyToMany((type) => Album, (album) => album.photos)\n    albums: Album[]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Options in TypeORM Entity (TypeScript)\nDESCRIPTION: Illustrates how to specify various column options when defining a column in a TypeORM entity, including type, length, and uniqueness constraints.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/entities.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({\n    type: \"varchar\",\n    length: 150,\n    unique: true,\n    // ...\n})\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Auto-incrementing column in TypeORM\nDESCRIPTION: Defining an auto-incrementing integer column in TypeORM using Generated decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Column()\n@Generated()\nincrementMe: number;\n```\n\n----------------------------------------\n\nTITLE: Redis Cluster Configuration\nDESCRIPTION: Configuring Redis cluster using IORedis with multiple nodes\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    type: \"mysql\",\n    host: \"localhost\",\n    username: \"test\",\n    cache: {\n        type: \"ioredis/cluster\",\n        options: {\n            startupNodes: [\n                {\n                    host: 'localhost',\n                    port: 7000,\n                },\n                {\n                    host: 'localhost',\n                    port: 7001,\n                },\n                {\n                    host: 'localhost',\n                    port: 7002,\n                }\n            ],\n            options: {\n                scaleReads: 'all',\n                clusterRetryStrategy: function (times) { return null },\n                redisOptions: {\n                    maxRetriesPerRequest: 1\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Duplicate Entities in TypeORM\nDESCRIPTION: Shows an example of duplicate entity definitions (Photo, Question, Post) that could benefit from inheritance to reduce code duplication.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n\n    @Column()\n    size: string\n}\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n\n    @Column()\n    answersCount: number\n}\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n\n    @Column()\n    viewCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Defining simple-array Column Type in TypeORM\nDESCRIPTION: Demonstrates how to use the simple-array column type in TypeORM to store primitive array values in a single string column with comma-separated values.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column(\"simple-array\")\n    names: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task entity in TypeORM\nDESCRIPTION: Creating a Task entity with id, title, description, and deadline columns using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Task {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column(\"text\")\n    description: string\n\n    @Column()\n    deadline: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DISTINCT ON Expression in TypeORM Query Builder (Postgres only)\nDESCRIPTION: Demonstrates how to add a DISTINCT ON expression to a query, which is specific to PostgreSQL databases.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ncreateQueryBuilder(\"user\").distinctOn([\"user.id\"]).orderBy(\"user.id\")\n```\n\n----------------------------------------\n\nTITLE: Defining a View Entity with String Expression in TypeORM\nDESCRIPTION: This snippet demonstrates how to create a view entity using a string SQL expression in TypeORM. It includes the @ViewEntity decorator with a SQL query string to define the view.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/view-entities.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewEntity({ \n    expression: `\n        SELECT \"post\".\"id\" \"id\", \"post\".\"name\" AS \"name\", \"category\".\"name\" AS \"categoryName\"\n        FROM \"post\" \"post\"\n        LEFT JOIN \"category\" \"category\" ON \"post\".\"categoryId\" = \"category\".\"id\"\n    `\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Query Methods in Active Record Entity\nDESCRIPTION: This example shows how to add custom query methods to an Active Record entity in TypeORM. It defines a static method findByName for querying users by their first and last names.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/active-record-data-mapper.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseEntity, Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    isActive: boolean\n\n    static findByName(firstName: string, lastName: string) {\n        return this.createQueryBuilder(\"user\")\n            .where(\"user.firstName = :firstName\", { firstName })\n            .andWhere(\"user.lastName = :lastName\", { lastName })\n            .getMany()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Entity Repository in TypeORM\nDESCRIPTION: Retrieves a Repository for the specified entity, which provides methods for performing database operations on that entity type.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = dataSource.getRepository(User)\n// now you can call repository methods, for example find:\nconst users = await repository.find()\n```\n\n----------------------------------------\n\nTITLE: Defining simple-json Column Type in TypeORM\nDESCRIPTION: Demonstrates the simple-json column type in TypeORM, which can store JSON-serializable values in a database column as a JSON string.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column(\"simple-json\")\n    profile: { name: string; nickname: string }\n}\n```\n\n----------------------------------------\n\nTITLE: Insert with ON CONFLICT Update in TypeORM\nDESCRIPTION: Demonstrates how to handle conflicts during insertion by updating specific fields when a conflict occurs. This uses the orUpdate method to specify which fields to update and which fields determine the conflict.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/insert-query-builder.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .insert()\n    .into(User)\n    .values({\n        firstName: \"Timber\",\n        lastName: \"Saw\",\n        externalId: \"abc123\",\n    })\n    .orUpdate(\n        [\"firstName\", \"lastName\"],\n        [\"externalId\"],\n    )\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for TypeORM\nDESCRIPTION: JSON configuration for TypeScript compiler options required for TypeORM, enabling decorator metadata and experimental decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"emitDecoratorMetadata\": true,\n\"experimentalDecorators\": true,\n```\n\n----------------------------------------\n\nTITLE: Using Like Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Demonstrates how to use the Like operator in a TypeORM query for pattern matching in post titles.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Like } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: Like(\"%out #%\"),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"title\" LIKE '%out #%'\n```\n\n----------------------------------------\n\nTITLE: Defining a View Entity in TypeORM\nDESCRIPTION: This snippet demonstrates how to create a view entity using the @ViewEntity decorator with a SQL expression option.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/view-entities.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewEntity({\n    expression: `\n        SELECT \"post\".\"id\" AS \"id\", \"post\".\"name\" AS \"name\", \"category\".\"name\" AS \"categoryName\"\n        FROM \"post\" \"post\"\n        LEFT JOIN \"category\" \"category\" ON \"post\".\"categoryId\" = \"category\".\"id\"\n    `\n})\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query Methods in Active Record Entity\nDESCRIPTION: This snippet demonstrates how to use a custom query method defined in an Active Record entity. It calls the findByName method to retrieve users by their first and last names.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/active-record-data-mapper.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await User.findByName(\"Timber\", \"Saw\")\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Names in TypeORM Entities\nDESCRIPTION: This example demonstrates how to customize a database column name that differs from the entity property name using the name option in the Column decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({ name: \"is_active\" })\nisActive: boolean;\n```\n\n----------------------------------------\n\nTITLE: Query Builder Usage in TypeORM\nDESCRIPTION: Example of building SQL queries using TypeORM's QueryBuilder.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-manager-api.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await manager\n    .createQueryBuilder()\n    .select()\n    .from(User, \"user\")\n    .where(\"user.name = :name\", { name: \"John\" })\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Using simple-json Column in TypeORM\nDESCRIPTION: Shows how to store object data in a simple-json column type, which will be saved as a JSON string in the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.profile = { name: \"John\", nickname: \"Malkovich\" }\n```\n\n----------------------------------------\n\nTITLE: Getting the Generated SQL Query\nDESCRIPTION: Uses getSql to retrieve the SQL query string generated by QueryBuilder without executing it. Useful for debugging or understanding the generated queries.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst sql = createQueryBuilder(\"user\")\n    .where(\"user.firstName = :firstName\", { firstName: \"Timber\" })\n    .orWhere(\"user.lastName = :lastName\", { lastName: \"Saw\" })\n    .getSql()\n```\n\n----------------------------------------\n\nTITLE: Using IsNull Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Illustrates the use of the IsNull operator in a TypeORM query to find posts with null titles.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { IsNull } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: IsNull(),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"title\" IS NULL\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Entity Schema in TypeORM\nDESCRIPTION: Demonstrates how to make entity schemas type-safe by defining an interface for the entity model and using it as a generic type parameter. This approach combines schema definition with TypeScript's static typing.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntitySchema } from \"typeorm\"\n\nexport interface Category {\n    id: number\n    name: string\n}\n\nexport const CategoryEntity = new EntitySchema<Category>({\n    name: \"category\",\n    columns: {\n        id: {\n            type: Number,\n            primary: true,\n            generated: true,\n        },\n        name: {\n            type: String,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Extending TypeORM Repository with Custom Methods\nDESCRIPTION: Shows how to extend a repository with custom methods using the .extend() method, implementing a custom findByName search functionality.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/custom-repository.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// user.repository.ts\nexport const UserRepository = dataSource.getRepository(User).extend({\n    findByName(firstName: string, lastName: string) {\n        return this.createQueryBuilder(\"user\")\n            .where(\"user.firstName = :firstName\", { firstName })\n            .andWhere(\"user.lastName = :lastName\", { lastName })\n            .getMany()\n    },\n})\n\n// user.controller.ts\nexport class UserController {\n    users() {\n        return UserRepository.findByName(\"Timber\", \"Saw\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Transactions in TypeORM\nDESCRIPTION: Demonstrates how to execute multiple database operations within a single transaction using the Connection API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait connection.transaction(async manager => {\n    // 注意：你必须使用给定的管理器实例执行所有数据库操作，\n    // 它是一个使用此事务的EntityManager的特殊实例，并且不要忘记在处理操作\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Entity Metadata Existence in TypeORM\nDESCRIPTION: Verifies if metadata for a given entity is registered in the DataSource. Can be used to conditionally access entity metadata.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nif (dataSource.hasMetadata(User))\n    const userMetadata = dataSource.getMetadata(User)\n```\n\n----------------------------------------\n\nTITLE: Creating Application Entry Point\nDESCRIPTION: Commands to create the main application file (app.ts) and add a simple console log.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir src\ncd src\ntouch app.ts\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(\"Application is up and running\")\n```\n\n----------------------------------------\n\nTITLE: Accessing property in TypeORM\nDESCRIPTION: Accessing an entity property directly in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(employee.name)\n```\n\n----------------------------------------\n\nTITLE: Defining User Entity with One-to-Many Relationship in TypeORM\nDESCRIPTION: TypeScript class defining a User entity with a one-to-many relationship to Photo entities. The entity uses decorators to define primary key, columns, and the relationship to photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToMany((type) => Photo, (photo) => photo.user)\n    photos: Photo[]\n}\n```\n\n----------------------------------------\n\nTITLE: 定义User实体与OneToMany关系 (TypeScript)\nDESCRIPTION: 使用@Entity装饰器定义User实体，并通过@OneToMany装饰器建立与Photo实体的一对多关系。包含id、name属性和photos关系。\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/many-to-one-one-to-many-relations.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, OneToMany } from \"typeorm\";\nimport { Photo } from \"./Photo\";\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @OneToMany(() => Photo, photo => photo.user)\n  photos: Photo[];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Check Constraints in TypeORM\nDESCRIPTION: Demonstrates how to create database check constraints using the @Check decorator at the entity level. Includes examples of constraints with logical conditions on column values.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\n@Check(`\"firstName\" <> 'John' AND \"lastName\" <> 'Doe'`)\n@Check(`\"age\" > 18`)\nexport class User {\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting a Relationship\nDESCRIPTION: Shows how to unset (set to null) a relationship using RelationQueryBuilder.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/relational-query-builder.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"typeorm\";\n\nawait getConnection()\n  .createQueryBuilder()\n  .relation(Post, \"categories\")\n  .of(post)\n  .set(null);\n```\n\n----------------------------------------\n\nTITLE: Saving Related Entities from the One Side in TypeORM\nDESCRIPTION: This example demonstrates how to save related entities by first creating the Photo entities, then attaching them to a User entity before saving. This approach sets the relationship from the one side.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-one-one-to-many-relations.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst photo1 = new Photo()\nphoto1.url = \"me.jpg\"\nawait dataSource.manager.save(photo1)\n\nconst photo2 = new Photo()\nphoto2.url = \"me-and-bears.jpg\"\nawait dataSource.manager.save(photo2)\n\nconst user = new User()\nuser.name = \"John\"\nuser.photos = [photo1, photo2]\nawait dataSource.manager.save(user)\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relation in TypeORM Entity (TypeScript)\nDESCRIPTION: Shows how to use the @OneToOne decorator to establish a one-to-one relationship between User and Profile entities. The example includes the @JoinColumn decorator to specify the owner side of the relation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, OneToOne, JoinColumn } from \"typeorm\"\nimport { Profile } from \"./Profile\"\n\n@Entity()\nexport class User {\n    @OneToOne((type) => Profile, (profile) => profile.user)\n    @JoinColumn()\n    profile: Profile\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for TypeORM Migration Bundling\nDESCRIPTION: This snippet demonstrates how to configure Webpack to properly bundle TypeORM migration files. It uses dynamic entry generation and UMD output to ensure migrations are recognized and executed correctly.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst glob = require(\"glob\")\nconst path = require(\"path\")\n\nmodule.exports = {\n    // ... your webpack configurations here...\n    // Dynamically generate a `{ [name]: sourceFileName }` map for the `entry` option\n    // change `src/db/migrations` to the relative path to your migration folder\n    entry: glob\n        .sync(path.resolve(\"src/db/migrations/*.ts\"))\n        .reduce((entries, filename) => {\n            const migrationName = path.basename(filename, \".ts\")\n            return Object.assign({}, entries, {\n                [migrationName]: filename,\n            })\n        }, {}),\n    resolve: {\n        // assuming all your migration files are written in TypeScript\n        extensions: [\".ts\"],\n    },\n    output: {\n        // change `path` to where you want to put transpiled migration files.\n        path: __dirname + \"/dist/db/migrations\",\n        // this is important - we want UMD (Universal Module Definition) for migration files.\n        libraryTarget: \"umd\",\n        filename: \"[name].js\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Primary Key to Entity in TypeORM\nDESCRIPTION: Example showing how to define a primary key column in an entity using the @PrimaryColumn decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryColumn } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @PrimaryColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column()\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Way of Adding Category to Post\nDESCRIPTION: Shows the traditional approach of adding a category to a post by loading the entire entity first. This method is less efficient than using RelationQueryBuilder.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/relational-query-builder.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getManager } from \"typeorm\";\n\nconst postRepository = getRepository(Post);\nconst post = await postRepository.findOne(1, { relations: [\"categories\"] });\npost.categories.push(category);\nawait postRepository.save(post);\n```\n\n----------------------------------------\n\nTITLE: Executing Memorized Up SQL in TypeORM\nDESCRIPTION: Method to execute stored up SQL queries.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nexecuteMemoryUpSql(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: UpdateDateColumn for Automatic Update Timestamps in TypeORM\nDESCRIPTION: Shows how to use the @UpdateDateColumn decorator which automatically updates the timestamp each time the entity is updated via repository or entity manager save methods.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @UpdateDateColumn()\n    updatedDate: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a Model to an Entity in TypeORM\nDESCRIPTION: This snippet demonstrates how to convert a regular class to a TypeORM entity by adding the @Entity decorator. This marks the class for database table creation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    id: number\n    name: string\n    description: string\n    filename: string\n    views: number\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spatial Indexes in TypeORM for PostgreSQL\nDESCRIPTION: This snippet shows how to create a spatial index on a geometry column in PostgreSQL using TypeORM. It includes specifying the spatial feature type and SRID (Spatial Reference System Identifier).\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/indices.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Thing {\n  @Column(\"geometry\", {\n    spatialFeatureType: \"Point\",\n    srid: 4326\n  })\n  @Index({ spatial: true })\n  point: Geometry;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeORM Entity Relations in ESM Projects\nDESCRIPTION: This snippet demonstrates how to define TypeORM entity relations in ESM projects using the Relation wrapper type to avoid circular dependency issues.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @OneToOne(() => Profile, (profile) => profile.user)\n    profile: Relation<Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Memorized Down SQL in TypeORM\nDESCRIPTION: Method to execute stored down SQL queries.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nexecuteMemoryDownSql(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Exporting a Global DataSource in TypeScript\nDESCRIPTION: Shows how to create and export a globally accessible DataSource, which replaces the deprecated getConnection() method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myDataSource = new DataSource({\n    /*...*/\n})\n// now you can use myDataSource anywhere in your application\n```\n\n----------------------------------------\n\nTITLE: Generated Database Schema for Many-to-One Relationship\nDESCRIPTION: This shows the resulting database tables that TypeORM generates for the User and Photo entities. Note how the Photo table includes a userId foreign key that references the User table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-one-one-to-many-relations.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n+-------------+--------------+----------------------------+\n|                         photo                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| url         | varchar(255) |                            |\n| userId      | int(11)      | FOREIGN KEY                |\n+-------------+--------------+----------------------------+\n\n+-------------+--------------+----------------------------+\n|                          user                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(255) |                            |\n+-------------+--------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Active Record Pattern Operations in TypeORM\nDESCRIPTION: Example of basic CRUD operations using the Active Record pattern where the entity class itself provides methods for database operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.age = 25\nawait user.save()\n\nconst allUsers = await User.find()\nconst firstUser = await User.findOne(1)\nconst timber = await User.findOne({ firstName: \"Timber\", lastName: \"Saw\" })\n\nawait timber.remove()\n```\n\n----------------------------------------\n\nTITLE: Enabling Caching in TypeORM Query\nDESCRIPTION: This snippet demonstrates how to enable caching for a TypeORM query, which can improve performance by storing query results for future use.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await userRepository\n    .createQueryBuilder(\"user\")\n    .cache(true)   // Enable caching\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Entity Metadata in TypeORM\nDESCRIPTION: Gets the EntityMetadata for a specified entity. This metadata contains detailed information about the entity's structure and database mapping.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst userMetadata = dataSource.getMetadata(User)\n// now you can get any information about User entity\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Constraints in TypeORM\nDESCRIPTION: Shows how to create database unique constraints using the @Unique decorator at the entity level. Demonstrates creating constraints on single and multiple columns, with an optional constraint name.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\n@Unique([\"firstName\"])\n@Unique([\"lastName\", \"middleName\"])\n@Unique(\"UQ_NAMES\", [\"firstName\", \"lastName\", \"middleName\"])\nexport class User {\n    @Column({ name: \"first_name\" })\n    firstName: string\n\n    @Column({ name: \"last_name\" })\n    lastName: string\n\n    @Column({ name: \"middle_name\" })\n    middleName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Using Partial Index with PostgreSQL Insert\nDESCRIPTION: Shows how to use a partial index predicate when handling conflicts in PostgreSQL. This allows limiting the scope of conflict detection based on a condition, which can improve performance for large tables.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/insert-query-builder.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .insert()\n    .into(User)\n    .values({\n        firstName: \"Timber\",\n        lastName: \"Saw\",\n        externalId: \"abc123\",\n    })\n    .orUpdate(\n        [\"firstName\", \"lastName\"],\n        [\"externalId\"],\n        {\n            skipUpdateIfNoValuesChanged: true,\n            indexPredicate: \"date > 2020-01-01\"\n        }\n    )\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Transaction Management in TypeORM\nDESCRIPTION: Example of executing multiple database operations within a single transaction using EntityManager.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-manager-api.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait manager.transaction(async (manager) => {\n    // NOTE: you must perform all database operations using the given manager instance\n    // it's a special instance of EntityManager working with this transaction\n    // and don't forget to await things here\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Keys with @ForeignKey Decorator in TypeORM\nDESCRIPTION: Demonstrates how to create database foreign keys manually using the @ForeignKey decorator. Shows examples of complex foreign keys, including multi-column keys and keys with various options.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity(\"orders\")\n@ForeignKey(() => City, [\"cityId\", \"countryCode\"], [\"id\", \"countryCode\"])\nexport class Order {\n    @PrimaryColumn()\n    id: number\n\n    @Column(\"uuid\", { name: \"user_uuid\" })\n    @ForeignKey<User>(\"User\", \"uuid\", { name: \"FK_user_uuid\" })\n    userUuid: string\n\n    @Column({ length: 2 })\n    @ForeignKey(() => Country, \"code\")\n    countryCode: string\n\n    @Column()\n    @ForeignKey(\"cities\")\n    cityId: number\n\n    @Column()\n    dispatchCountryCode: string\n\n    @ManyToOne(() => Country)\n    dispatchCountry: Country\n\n    @Column()\n    dispatchCityId: number\n\n    @ManyToOne(() => City)\n    dispatchCity: City\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bidirectional One-to-One Relationship - PhotoMetadata Side\nDESCRIPTION: Updates the PhotoMetadata entity to establish a bidirectional relationship with the Photo entity, specifying the inverse side of the relationship.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    OneToOne,\n    JoinColumn,\n} from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class PhotoMetadata {\n    /* ... other columns */\n\n    @OneToOne(() => Photo, (photo) => photo.metadata)\n    @JoinColumn()\n    photo: Photo\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and saving a model in TypeORM using Repository\nDESCRIPTION: Creating and saving a new entity using TypeORM's Repository pattern.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst employee = new Employee() // you can use constructor parameters as well\nemployee.name = \"John Doe\"\nemployee.title = \"senior engineer\"\nawait dataSource.getRepository(Employee).save(employee)\n```\n\n----------------------------------------\n\nTITLE: Releasing QueryRunner Connection in TypeORM\nDESCRIPTION: Shows how to properly release a QueryRunner connection back to the connection pool when it's no longer needed.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/query-runner.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait queryRunner.release()\n```\n\n----------------------------------------\n\nTITLE: Loading Many-to-Many Relations in TypeORM\nDESCRIPTION: These code snippets demonstrate two methods of loading many-to-many relations in TypeORM: using FindOptions and using QueryBuilder.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst questionRepository = dataSource.getRepository(Question)\nconst questions = await questionRepository.find({\n    relations: {\n        categories: true,\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst questions = await dataSource\n    .getRepository(Question)\n    .createQueryBuilder(\"question\")\n    .leftJoinAndSelect(\"question.categories\", \"category\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: CommonJS Migration Class Implementation\nDESCRIPTION: Generated JavaScript migration class in CommonJS format with JSDoc type annotations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @typedef {import('typeorm').MigrationInterface} MigrationInterface\n */\n\n/**\n * @class\n * @implements {MigrationInterface}\n */\nmodule.exports = class PostRefactoringTIMESTAMP {\n    async up(queryRunner) {\n        await queryRunner.query(\n            `ALTER TABLE \"post\" ALTER COLUMN \"title\" RENAME TO \"name\"`,\n        )\n    }\n\n    async down(queryRunner) {\n        await queryRunner.query(\n            `ALTER TABLE \"post\" ALTER COLUMN \"name\" RENAME TO \"title\"`,\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Express and Type Definitions\nDESCRIPTION: Command to install Express and its TypeScript type definitions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i express  @types/express --save\n```\n\n----------------------------------------\n\nTITLE: Using Raw Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Demonstrates the use of the Raw operator in a TypeORM query to execute custom SQL expressions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Raw } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    likes: Raw(\"dislikes - 4\"),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"likes\" = \"dislikes\" - 4\n```\n\n----------------------------------------\n\nTITLE: Repository Query Caching\nDESCRIPTION: Example of enabling cache for a repository query with find options\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource.getRepository(User).find({\n    where: { isAdmin: true },\n    cache: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Embedded Name Class Definition\nDESCRIPTION: Reusable class containing shared name-related columns for embedding in other entities\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/embedded-entities.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Column } from \"typeorm\"\n\nexport class Name {\n    @Column()\n    first: string\n\n    @Column()\n    last: string\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Category to Post's Categories using Repository in TypeScript\nDESCRIPTION: This snippet shows the traditional way of adding a category to a post's categories using the repository method. It loads the post with its categories, adds the new category, and saves the post.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relational-query-builder.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst postRepository = dataSource.manager.getRepository(Post)\nconst post = await postRepository.findOne({\n    where: {\n        id: 1,\n    },\n    relations: {\n        categories: true,\n    },\n})\npost.categories.push(category)\nawait postRepository.save(post)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entity Schema in TypeORM\nDESCRIPTION: Creates a simple entity schema for a category with primary key and name columns. This demonstrates the basic structure of an EntitySchema definition.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntitySchema } from \"typeorm\"\n\nexport const CategoryEntity = new EntitySchema({\n    name: \"category\",\n    columns: {\n        id: {\n            type: Number,\n            primary: true,\n            generated: true,\n        },\n        name: {\n            type: String,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping Unique Constraints in TypeORM\nDESCRIPTION: Method to drop unique constraints from a database table. Not compatible with MySQL which stores unique constraints as indices.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndropUniqueConstraints(table: Table|string, uniqueConstraints: TableUnique[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Disabling Webpack Minimization for TypeORM Migrations\nDESCRIPTION: This configuration disables Webpack's minimization feature to prevent mangling of migration file names, which is necessary for TypeORM to correctly identify and execute migrations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    // ... other Webpack configurations here\n    optimization: {\n        minimize: false,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Save and Remove Operations in TypeORM\nDESCRIPTION: Methods for saving and removing entities from the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.save(user)\nawait repository.save([category1, category2, category3])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.remove(user)\nawait repository.remove([category1, category2, category3])\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Entity in TypeORM (TypeScript)\nDESCRIPTION: Shows the structure of a Profile entity with basic properties like id, gender, and photo. This entity is used in the subsequent example to demonstrate relation handling.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations-faq.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Profile {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    gender: string\n\n    @Column()\n    photo: string\n}\n```\n\n----------------------------------------\n\nTITLE: PhotoMetadata Table Structure\nDESCRIPTION: Shows the database table structure created for the PhotoMetadata entity, including the foreign key column that references the Photo table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n+-------------+--------------+----------------------------+\n|                     photo_metadata                      |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| height      | int(11)      |                            |\n| width       | int(11)      |                            |\n| comment     | varchar(255) |                            |\n| compressed  | boolean      |                            |\n| orientation | varchar(255) |                            |\n| photoId     | int(11)      | FOREIGN KEY                |\n+-------------+--------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Updating an Entity\nDESCRIPTION: Demonstrates how to update an existing Photo entity by first loading it from the database, modifying its properties, and then saving it back to the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Photo } from \"./entity/Photo\"\nimport { AppDataSource } from \"./index\"\n\nconst photoRepository = AppDataSource.getRepository(Photo)\nconst photoToUpdate = await photoRepository.findOneBy({\n    id: 1,\n})\nphotoToUpdate.name = \"Me, my friends and polar bears\"\nawait photoRepository.save(photoToUpdate)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Check Constraints in TypeORM\nDESCRIPTION: Method to create multiple check constraints at once. Not supported in MySQL.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ncreateCheckConstraints(table: Table|string, checkConstraints: TableCheck[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bidirectional One-to-One Relationship in TypeORM\nDESCRIPTION: Code examples showing how to create a bidirectional one-to-one relationship between PhotoMetadata and Photo entities using the @OneToOne decorator. The PhotoMetadata entity owns the relationship with the @JoinColumn decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    OneToOne,\n    JoinColumn,\n} from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class PhotoMetadata {\n    /* ... other columns */\n\n    @OneToOne((type) => Photo, (photo) => photo.metadata)\n    @JoinColumn()\n    photo: Photo\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne } from \"typeorm\"\nimport { PhotoMetadata } from \"./PhotoMetadata\"\n\n@Entity()\nexport class Photo {\n    /* ... other columns */\n\n    @OneToOne((type) => PhotoMetadata, (photoMetadata) => photoMetadata.photo)\n    metadata: PhotoMetadata\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Inserting Data Using EntitySchema in TypeORM\nDESCRIPTION: Demonstrates how to use the defined entity schemas for database operations. This example shows both querying existing data and inserting new records using a repository created from an EntitySchema.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// request data\nconst categoryRepository = dataSource.getRepository<Category>(CategoryEntity)\nconst category = await categoryRepository.findOneBy({\n    id: 1,\n}) // category is properly typed!\n\n// insert a new category into the database\nconst categoryDTO = {\n    // note that the ID is autogenerated; see the schema above\n    name: \"new category\",\n}\nconst newCategory = await categoryRepository.save(categoryDTO)\n```\n\n----------------------------------------\n\nTITLE: Using @BeforeRecover Decorator in TypeORM\nDESCRIPTION: Demonstrates how to use the @BeforeRecover decorator to execute logic before an entity is recovered using the repository/manager recover method. In this example, it updates the status field to 'recovered'.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @BeforeRecover()\n    updateStatus() {\n        this.status = \"recovered\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Task model in Sequelize\nDESCRIPTION: Creating a Task model with title, description, and deadline fields in Sequelize.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (sequelize, DataTypes) {\n    const Task = sequelize.define(\"task\", {\n        title: DataTypes.STRING,\n        description: DataTypes.TEXT,\n        deadline: DataTypes.DATE,\n    })\n\n    return Task\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level\nDESCRIPTION: Demonstrates how to specify an isolation level when creating a transaction. Shows the syntax for setting the isolation level as the first parameter.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/transactions.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait myDataSource.manager.transaction(\n    \"SERIALIZABLE\",\n    (transactionalEntityManager) => {},\n)\n```\n\n----------------------------------------\n\nTITLE: Dropping Multiple Foreign Keys in TypeORM\nDESCRIPTION: Method to drop multiple foreign key constraints at once.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ndropForeignKeys(table: Table|string, foreignKeys: TableForeignKey[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Hooks in TypeORM Entity (TypeScript)\nDESCRIPTION: Demonstrates the use of various lifecycle hook decorators such as @AfterLoad, @BeforeInsert, @AfterInsert, @BeforeUpdate, @AfterUpdate, @BeforeRemove, @AfterRemove, @BeforeSoftRemove, and @AfterSoftRemove in TypeORM entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @AfterLoad()\n    updateCounters() {\n        if (this.likesCount === undefined) this.likesCount = 0\n    }\n\n    @BeforeInsert()\n    updateDates() {\n        this.createdDate = new Date()\n    }\n\n    @AfterInsert()\n    resetCounters() {\n        this.counters = 0\n    }\n\n    @BeforeUpdate()\n    updateDates() {\n        this.updatedDate = new Date()\n    }\n\n    @AfterUpdate()\n    updateCounters() {\n        this.counter = 0\n    }\n\n    @BeforeRemove()\n    updateStatus() {\n        this.status = \"removed\"\n    }\n\n    @AfterRemove()\n    updateStatus() {\n        this.status = \"removed\"\n    }\n\n    @BeforeSoftRemove()\n    updateStatus() {\n        this.status = \"soft-removed\"\n    }\n\n    @AfterSoftRemove()\n    updateStatus() {\n        this.status = \"soft-removed\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Builder in TypeORM\nDESCRIPTION: Demonstrates how to create and use a query builder for constructing complex queries using the Connection API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await connection.createQueryBuilder()\n    .select()\n    .from(User, \"user\")\n    .where(\"user.name = :name\", { name: \"John\" })\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: Adding Column Decorators to Entity Properties in TypeORM\nDESCRIPTION: Example showing how to define database columns in an entity by adding @Column decorators to class properties.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @Column()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column()\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Database Schema in TypeORM\nDESCRIPTION: Synchronizes the database schema with entity definitions. Used to create or update database tables according to entity metadata.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource.synchronize()\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Replication\nDESCRIPTION: Example of setting up read/write replication in TypeORM with master and slave configurations. Shows how to configure multiple slave servers for read operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/multiple-data-sources.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst datasource = new DataSource({\n  type: \"mysql\",\n  logging: true,\n  replication: {\n    master: {\n      host: \"server1\",\n      port: 3306,\n      username: \"test\",\n      password: \"test\",\n      database: \"test\"\n    },\n    slaves: [\n      {\n        host: \"server2\",\n        port: 3306,\n        username: \"test\",\n        password: \"test\",\n        database: \"test\"\n      }, {\n        host: \"server3\",\n        port: 3306,\n        username: \"test\",\n        password: \"test\",\n        database: \"test\"\n      }\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Indices in TypeORM\nDESCRIPTION: Method to create multiple indices at once on a table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ncreateIndices(table: Table|string, indices: TableIndex[]): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Using EntityManager in TypeORM\nDESCRIPTION: Retrieves the EntityManager for working with entities. Demonstrates accessing the manager and using its find method to query entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst manager: EntityManager = dataSource.manager\n// you can call manager methods, for example find:\nconst users = await manager.find()\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Model in TypeORM\nDESCRIPTION: Example showing how to define a User entity with TypeORM decorators, including primary key and columns for basic user properties.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n}\n```\n\n----------------------------------------\n\nTITLE: PrimaryColumn Decorator Usage in TypeORM\nDESCRIPTION: Shows how to mark a property as a primary column in a TypeORM entity. The PrimaryColumn decorator functions similarly to @Column but sets the primary option to true by default.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryColumn()\n    id: number\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Memory Usage with select in TypeORM\nDESCRIPTION: This snippet demonstrates how to use select to retrieve only specific fields, optimizing memory usage and reducing unnecessary data retrieval.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/performance-optimizing.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource.getRepository(User)\n    .createQueryBuilder(\"user\")\n    .select([\"user.name\", \"user.email\"])\n    .getMany();\n```\n\n----------------------------------------\n\nTITLE: DataMapper Pattern Repository Operations in TypeScript\nDESCRIPTION: Example of basic CRUD operations using TypeORM's repository pattern, including saving, finding, and removing entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README-zh_CN.md#2025-04-08_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst user = new User();\nuser.firstName = \"Timber\";\nuser.lastName = \"Saw\";\nuser.age = 25;\nawait repository.save(user);\n\nconst allUsers = await repository.find();\nconst firstUser = await repository.findOne(1);\nconst timber = await repository.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n\nawait repository.remove(timber);\n```\n\n----------------------------------------\n\nTITLE: Clearing Table Contents in TypeORM\nDESCRIPTION: Method to clear all contents of a table using TRUNCATE query. Cannot be reverted in transactions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nclearTable(tableName: string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Classes for Single Table Inheritance\nDESCRIPTION: Creates abstract and concrete entity classes to be used with Single Table Inheritance pattern in TypeORM. This example defines a base class and three derived classes with their respective properties.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// entity.ts\n\nexport abstract class Base {\n    id!: number\n    type!: string\n    createdAt!: Date\n    updatedAt!: Date\n}\n\nexport class A extends Base {\n    constructor(public a: boolean) {\n        super()\n    }\n}\n\nexport class B extends Base {\n    constructor(public b: number) {\n        super()\n    }\n}\n\nexport class C extends Base {\n    constructor(public c: string) {\n        super()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Additional Data in Custom Logger\nDESCRIPTION: This snippet shows how to access additional data passed during persist/remove operations in a custom logger implementation using QueryRunner.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/logging.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// user sends request during entity save\npostRepository.save(post, { data: { request: request } });\n\n// in logger you can access it this way:\nlogQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n    const requestUrl = queryRunner && queryRunner.data[\"request\"] ? \"(\" + queryRunner.data[\"request\"].url + \") \" : \"\";\n    console.log(requestUrl + \"executing query: \" + query);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Connection Properties in TypeORM\nDESCRIPTION: Shows how to access various properties of a Connection instance, including the connection name, options, connection status, and underlying database driver.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst connectionName: string = connection.name;\n\nconst connectionOptions: ConnectionOptions = connection.options;\n// 你可以将connectionOptions转换为MysqlConnectionOptions或任何其他xxxConnectionOptions，\n// 具体取决于你使用的数据库驱动程序\n\nconst isConnected: boolean = connection.isConnected;\n\nconst driver: Driver = connection.driver;\n// 你可以根据使用的数据库驱动程序将connectionOptions转换为MysqlDriver或任何其他xxxDriver\n```\n\n----------------------------------------\n\nTITLE: Defining an ActiveRecord Entity in TypeORM\nDESCRIPTION: This snippet demonstrates how to create an entity using the ActiveRecord pattern by extending BaseEntity. It includes the same fields as the previous entity but with ActiveRecord functionality.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, BaseEntity } from \"typeorm\"\n\n@Entity()\nexport class User extends BaseEntity {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Tree Structures with TreeRepository in TypeORM\nDESCRIPTION: This code snippet demonstrates how to use TreeRepository to load tree structures in TypeORM. It shows how to retrieve the entire tree structure using the findTrees method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/tree-entities.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst trees = await dataSource.manager.getTreeRepository(Category).findTrees()\n```\n\n----------------------------------------\n\nTITLE: Loading Tree Structures with TreeRepository in TypeORM\nDESCRIPTION: This code snippet demonstrates how to use TreeRepository to load tree structures in TypeORM. It shows how to retrieve the entire tree structure using the findTrees method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/tree-entities.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst trees = await dataSource.manager.getTreeRepository(Category).findTrees()\n```\n\n----------------------------------------\n\nTITLE: Clearing SQL Memory in TypeORM\nDESCRIPTION: Method to flush all memorized SQL statements.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nclearSqlMemory(): void\n```\n\n----------------------------------------\n\nTITLE: Using QueryBuilder for Complex Queries in TypeORM\nDESCRIPTION: This snippet demonstrates how to use QueryBuilder to create more complex queries, such as joining related entities, in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Photo } from \"./entity/Photo\"\nimport { PhotoMetadata } from \"./entity/PhotoMetadata\"\nimport { AppDataSource } from \"./index\"\n\nconst photos = await AppDataSource.getRepository(Photo)\n    .createQueryBuilder(\"photo\")\n    .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Setting One-to-One or Many-to-One Relationship\nDESCRIPTION: Demonstrates how to set a one-to-one or many-to-one relationship using RelationQueryBuilder.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/relational-query-builder.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getConnection } from \"typeorm\";\n\nawait getConnection()\n  .createQueryBuilder()\n  .relation(Post, \"categories\")\n  .of(post)\n  .set(category);\n```\n\n----------------------------------------\n\nTITLE: Creating ORM Configuration File\nDESCRIPTION: Command to create an initial ormconfig.json file by copying the sample configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncp ormconfig.sample.json ormconfig.json\n```\n\n----------------------------------------\n\nTITLE: Implementing @AfterRemove Entity Listener in TypeORM\nDESCRIPTION: Demonstrates how to use the @AfterRemove decorator to define a method that is called after an entity is removed using repository/manager remove.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @AfterRemove()\n    updateStatus() {\n        this.status = \"removed\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connection Configuration in TypeORM\nDESCRIPTION: Demonstrates how to configure a MongoDB connection using TypeORM's DataSource.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/mongodb.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nconst myDataSource = new DataSource({\n    type: \"mongodb\",\n    host: \"localhost\",\n    port: 27017,\n    database: \"test\",\n})\n```\n\n----------------------------------------\n\nTITLE: Creating QueryBuilder in TypeORM\nDESCRIPTION: Creates a QueryBuilder for building complex SQL queries programmatically. Provides a fluent API for constructing queries with conditions, joins, and more.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .createQueryBuilder()\n    .select()\n    .from(User, \"user\")\n    .where(\"user.name = :name\", { name: \"John\" })\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Implementing @AfterUpdate Entity Listener in TypeORM\nDESCRIPTION: Shows how to use the @AfterUpdate decorator to define a method that is called after an existing entity is updated using repository/manager save.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @AfterUpdate()\n    updateCounters() {\n        this.counter = 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: DataSource Configuration with Single Entity\nDESCRIPTION: Shows how to configure TypeORM DataSource with a single entity registration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\nimport { User } from \"./entity/User\"\n\nconst myDataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [User],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Duration in QueryBuilder\nDESCRIPTION: Setting custom cache duration in milliseconds using QueryBuilder\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .createQueryBuilder(User, \"user\")\n    .where(\"user.isAdmin = :isAdmin\", { isAdmin: true })\n    .cache(60000) // 1 minute\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Integrating TypeORM with Express\nDESCRIPTION: TypeScript code combining Express and TypeORM to create a full-fledged user management API.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as express from \"express\"\nimport { Request, Response } from \"express\"\nimport { User } from \"./entity/User\"\nimport { myDataSource } from \"./app-data-source.ts\"\n\n// establish database connection\nmyDataSource\n    .initialize()\n    .then(() => {\n        console.log(\"Data Source has been initialized!\")\n    })\n    .catch((err) => {\n        console.error(\"Error during Data Source initialization:\", err)\n    })\n\n// create and setup express app\nconst app = express()\napp.use(express.json())\n\n// register routes\napp.get(\"/users\", async function (req: Request, res: Response) {\n    const users = await myDataSource.getRepository(User).find()\n    res.json(users)\n})\n\napp.get(\"/users/:id\", async function (req: Request, res: Response) {\n    const results = await myDataSource.getRepository(User).findOneBy({\n        id: req.params.id,\n    })\n    return res.send(results)\n})\n\napp.post(\"/users\", async function (req: Request, res: Response) {\n    const user = await myDataSource.getRepository(User).create(req.body)\n    const results = await myDataSource.getRepository(User).save(user)\n    return res.send(results)\n})\n\napp.put(\"/users/:id\", async function (req: Request, res: Response) {\n    const user = await myDataSource.getRepository(User).findOneBy({\n        id: req.params.id,\n    })\n    myDataSource.getRepository(User).merge(user, req.body)\n    const results = await myDataSource.getRepository(User).save(user)\n    return res.send(results)\n})\n\napp.delete(\"/users/:id\", async function (req: Request, res: Response) {\n    const results = await myDataSource.getRepository(User).delete(req.params.id)\n    return res.send(results)\n})\n\n// start express server\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Defining Entity with ManyToOne Relation Without Foreign Key in TypeORM (TypeScript)\nDESCRIPTION: Shows how to define a ManyToOne relation without creating a foreign key constraint. This can be useful for performance reasons in certain scenarios.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relations-faq.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryColumn, Column, ManyToOne } from \"typeorm\"\nimport { Person } from \"./Person\"\n\n@Entity()\nexport class ActionLog {\n    @PrimaryColumn()\n    id: number\n\n    @Column()\n    date: Date\n\n    @Column()\n    action: string\n\n    @ManyToOne((type) => Person, {\n        createForeignKeyConstraints: false,\n    })\n    person: Person\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Migration Query Example\nDESCRIPTION: An example SQL query for renaming a column in PostgreSQL, which would be included in a migration file to transform the database schema.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE \"post\" ALTER COLUMN \"title\" RENAME TO \"name\";\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Inner Join Query\nDESCRIPTION: Shows the SQL query generated by TypeORM when using innerJoinAndSelect to load a user with photos. Uses INNER JOIN instead of LEFT JOIN to only return records with matches on both sides.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nSELECT user.*, photo.* FROM users user\n    INNER JOIN photos photo ON photo.user = user.id AND photo.isRemoved = FALSE\n    WHERE user.name = 'Timber'\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Entity Schema with Constraints in TypeORM\nDESCRIPTION: Defines a complex person entity schema with various column types, foreign keys, checks, indices, and unique constraints. This example showcases the full range of schema configuration options.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/separating-entity-definition.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EntitySchema } from \"typeorm\"\n\nexport const PersonSchema = new EntitySchema({\n    name: \"person\",\n    columns: {\n        id: {\n            primary: true,\n            type: \"int\",\n            generated: \"increment\",\n        },\n        firstName: {\n            type: String,\n            length: 30,\n        },\n        lastName: {\n            type: String,\n            length: 50,\n            nullable: false,\n        },\n        age: {\n            type: Number,\n            nullable: false,\n        },\n        countryCode: {\n            type: String,\n            length: 2,\n            foreignKey: {\n                target: \"countries\", // CountryEntity\n                inverseSide: \"code\",\n            },\n        },\n        cityId: {\n            type: Number,\n            foreignKey: {\n                target: \"cities\", // CityEntity\n            },\n        },\n    },\n    checks: [\n        { expression: `\"firstName\" <> 'John' AND \"lastName\" <> 'Doe'` },\n        { expression: `\"age\" > 18` },\n    ],\n    indices: [\n        {\n            name: \"IDX_TEST\",\n            unique: true,\n            columns: [\"firstName\", \"lastName\"],\n        },\n    ],\n    uniques: [\n        {\n            name: \"UNIQUE_TEST\",\n            columns: [\"firstName\", \"lastName\"],\n        },\n    ],\n    foreignKeys: [\n        {\n            target: \"cities\", // CityEntity\n            columnNames: [\"cityId\", \"countryCode\"],\n            referencedColumnNames: [\"id\", \"countryCode\"],\n        },\n    ],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Duration in Repository\nDESCRIPTION: Setting custom cache duration for repository queries\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource.getRepository(User).find({\n    where: { isAdmin: true },\n    cache: 60000,\n})\n```\n\n----------------------------------------\n\nTITLE: Active Record Pattern Operations in TypeORM\nDESCRIPTION: Demonstrates common operations using the Active Record pattern including saving, finding, and removing entities directly from the model class.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.firstName = \"Timber\"\nuser.lastName = \"Saw\"\nuser.age = 25\nawait user.save()\n\nconst allUsers = await User.find()\nconst firstUser = await User.findOneBy({\n    id: 1,\n})\nconst timber = await User.findOneBy({\n    firstName: \"Timber\",\n    lastName: \"Saw\"\n})\n\nawait timber.remove()\n```\n\n----------------------------------------\n\nTITLE: Setting Category for Post in TypeScript\nDESCRIPTION: This snippet shows how to set a category for a post using RelationQueryBuilder. It's used for one-to-one and many-to-one relations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relational-query-builder.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .relation(Post, \"categories\")\n    .of(post) // you can use just post id as well\n    .set(category) // you can use just category id as well\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to an Entity in TypeORM\nDESCRIPTION: This snippet shows how to add database columns to an entity by decorating properties with @Column. Each decorated property will become a column in the database table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @Column()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column()\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Safe Entity Schema in TypeORM\nDESCRIPTION: This example shows how to create a type-safe entity schema by defining an interface and using it in the EntitySchema generic type. It ensures type safety for the category entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/separating-entity-definition.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EntitySchema} from \"typeorm\";\n\nexport interface Category {\n    id: number;\n    name: string;\n}\n\nexport const CategoryEntity = new EntitySchema<Category>({\n    name: \"category\",\n    columns: {\n        id: {\n            type: Number,\n            primary: true,\n            generated: true\n        },\n        name: {\n            type: String\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Exclusion Constraints in TypeORM (PostgreSQL)\nDESCRIPTION: Shows how to create database exclusion constraints using the @Exclusion decorator at the entity level. This example demonstrates a room booking system that prevents overlapping time ranges.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\n@Exclusion(`USING gist (\"room\" WITH =, tsrange(\"from\", \"to\") WITH &&)`)\nexport class RoomBooking {\n    @Column()\n    room: string\n\n    @Column()\n    from: Date\n\n    @Column()\n    to: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Primary Keys with TypeORM QueryRunner\nDESCRIPTION: This section covers QueryRunner methods for creating, updating, and dropping primary keys in tables. These operations are essential for maintaining data integrity and table relationships.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ncreatePrimaryKey(table: Table|string, columnNames: string[]): Promise<void>\n\nupdatePrimaryKeys(table: Table|string, columns: TableColumn[]): Promise<void>\n\ndropPrimaryKey(table: Table|string): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Implementing Closure Table Tree Structure in TypeORM\nDESCRIPTION: This code snippet shows how to create a Closure Table tree structure using TypeORM decorators. It defines a Category entity with TreeChildren and TreeParent decorators for managing the tree structure.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/tree-entities.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Tree,\n    Column,\n    PrimaryGeneratedColumn,\n    TreeChildren,\n    TreeParent,\n    TreeLevelColumn,\n} from \"typeorm\"\n\n@Entity()\n@Tree(\"closure-table\")\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @TreeChildren()\n    children: Category[]\n\n    @TreeParent()\n    parent: Category\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Related Entities for Post in TypeScript\nDESCRIPTION: This snippet shows how to load related entities (categories and user) for a post using RelationQueryBuilder. It demonstrates loading both many-to-many and many-to-one relations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/relational-query-builder.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await dataSource.manager.findOneBy(Post, {\n    id: 1,\n})\n\npost.categories = await dataSource\n    .createQueryBuilder()\n    .relation(Post, \"categories\")\n    .of(post) // you can use just post id as well\n    .loadMany()\n\npost.author = await dataSource\n    .createQueryBuilder()\n    .relation(Post, \"user\")\n    .of(post) // you can use just post id as well\n    .loadOne()\n```\n\n----------------------------------------\n\nTITLE: Defining Bi-directional Many-to-Many Relations in TypeORM\nDESCRIPTION: These code snippets show how to set up bi-directional many-to-many relations between Category and Question entities in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-many-relations.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from \"typeorm\"\nimport { Question } from \"./Question\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @ManyToMany(() => Question, (question) => question.categories)\n    questions: Question[]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    PrimaryGeneratedColumn,\n    Column,\n    ManyToMany,\n    JoinTable,\n} from \"typeorm\"\nimport { Category } from \"./Category\"\n\n@Entity()\nexport class Question {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    text: string\n\n    @ManyToMany(() => Category, (category) => category.questions)\n    @JoinTable()\n    categories: Category[]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Photo Entity with Concrete Table Inheritance in TypeORM\nDESCRIPTION: This snippet shows how to extend the Content class to create a Photo entity, adding a size property specific to photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Photo extends Content {\n    @Column()\n    size: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Auto-Generated Primary Key in TypeORM\nDESCRIPTION: This snippet shows how to create an auto-incrementing primary key using the @PrimaryGeneratedColumn decorator. This creates an auto-increment/sequence/serial column in the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column()\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination in TypeORM Query\nDESCRIPTION: Demonstrates how to use 'skip' and 'take' options for pagination in TypeORM queries. It also includes an example for MSSQL which requires an 'order' clause when using 'take'.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    skip: 5,\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\"\nOFFSET 5\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    take: 10,\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\"\nLIMIT 10\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    order: {\n        columnName: \"ASC\",\n    },\n    skip: 0,\n    take: 10,\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"user\"\nORDER BY \"columnName\" ASC\nLIMIT 10 OFFSET 0\n```\n\n----------------------------------------\n\nTITLE: Entity ID Operations in TypeORM\nDESCRIPTION: Methods for handling entity IDs including checking and retrieving primary keys.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (repository.hasId(user)) {\n    // ... do something\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = repository.getId(user) // userId === 1\n```\n\n----------------------------------------\n\nTITLE: Basic Entity Model Definition\nDESCRIPTION: Initial model definition for a Photo entity without decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n    id: number\n    name: string\n    description: string\n    filename: string\n    views: number\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting QueryRunner to Database in TypeORM\nDESCRIPTION: Demonstrates how to establish a database connection using QueryRunner by obtaining a connection from the connection pool.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/query-runner.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryRunner = dataSource.createQueryRunner()\nawait queryRunner.connect()\n```\n\n----------------------------------------\n\nTITLE: Defining Spatial Columns for MS SQL and MySQL/MariaDB in TypeORM\nDESCRIPTION: This snippet demonstrates how to define spatial columns (point and linestring) for MS SQL and MySQL/MariaDB databases using TypeORM. It uses the string type to represent geometries as well-known text (WKT).\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Thing {\n    @PrimaryColumn()\n    id: number\n\n    @Column(\"point\")\n    point: string\n\n    @Column(\"linestring\")\n    linestring: string\n}\n\n...\n\nconst thing = new Thing()\nthing.point = \"POINT(1 1)\"\nthing.linestring = \"LINESTRING(0 0,1 1,2 2)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM DataSource for NativeScript\nDESCRIPTION: This snippet demonstrates how to configure a TypeORM DataSource for use in a NativeScript application. It includes database configuration, entity setup, and logging.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/supported-platforms.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport driver from \"nativescript-sqlite\"\n\nconst dataSource = new DataSource({\n    database: \"test.db\",\n    type: \"nativescript\",\n    driver,\n    entities: [\n        Todo, //... whatever entities you have\n    ],\n    logging: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relation with Relation Wrapper in TypeScript\nDESCRIPTION: This snippet demonstrates how to define a one-to-one relation between Photo and PhotoMetadata entities using the Relation wrapper type to avoid circular dependency issues in ESM projects.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    OneToOne,\n    JoinColumn,\n    Relation,\n} from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class PhotoMetadata {\n    /* ... other columns */\n\n    @OneToOne(() => Photo, (photo) => photo.metadata)\n    @JoinColumn()\n    photo: Relation<Photo>\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    OneToOne,\n    Relation,\n} from \"typeorm\"\nimport { PhotoMetadata } from \"./PhotoMetadata\"\n\n@Entity()\nexport class Photo {\n    /* ... other columns */\n\n    @OneToOne(() => PhotoMetadata, (photoMetadata) => photoMetadata.photo)\n    metadata: Relation<PhotoMetadata>\n}\n```\n\n----------------------------------------\n\nTITLE: Existence Checking Operations in TypeORM\nDESCRIPTION: Methods for checking entity existence.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst exists = await repository.exists({\n    where: {\n        firstName: \"Timber\",\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst exists = await repository.existsBy({ firstName: \"Timber\" })\n```\n\n----------------------------------------\n\nTITLE: Managing Databases and Schemas with TypeORM QueryRunner\nDESCRIPTION: This snippet demonstrates QueryRunner methods for creating and dropping databases and schemas. These operations are fundamental for high-level database management tasks.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ncreateDatabase(database: string, ifNotExist?: boolean): Promise<void>\n\ndropDatabase(database: string, ifExist?: boolean): Promise<void>\n\ncreateSchema(schemaPath: string, ifNotExist?: boolean): Promise<void>\n\ndropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Data Source Options for Migration Files\nDESCRIPTION: This configuration specifies the paths for both transpiled and source migration files in TypeORM data source options, ensuring compatibility in both production and development environments.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// TypeORM Configurations\nmodule.exports = {\n    // ...\n    migrations: [\n        // this is the relative path to the transpiled migration files in production\n        \"db/migrations/**/*.js\",\n        // your source migration files, used in development mode\n        \"src/db/migrations/**/*.ts\",\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using @AfterRecover Decorator in TypeORM\nDESCRIPTION: Demonstrates how to use the @AfterRecover decorator to execute logic after an entity is recovered using the repository/manager recover method. This example updates the status field to 'recovered'.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @AfterRecover()\n    updateStatus() {\n        this.status = \"recovered\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PrimaryGeneratedColumn Usage in TypeORM\nDESCRIPTION: Shows how to define an auto-generated primary column in a TypeORM entity. This creates a primary column with an auto-generated value, using the database's auto-increment functionality by default.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn()\n    id: number\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Synchronization with TypeORM DataSource\nDESCRIPTION: This snippet shows how to enable automatic schema synchronization in TypeORM by setting the synchronize option to true in the DataSource configuration. This keeps the database schema in sync with entity definitions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nconst myDataSource = new DataSource({\n    // ...\n    synchronize: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing All Data from a Table in TypeORM (TypeScript)\nDESCRIPTION: Demonstrates how to use the clear method to remove all data from a given table. This operation truncates or drops the table, effectively clearing all its contents.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nawait repository.clear()\n```\n\n----------------------------------------\n\nTITLE: Using Custom Repositories in TypeORM Transactions\nDESCRIPTION: Demonstrates how to properly use custom repositories within a transaction context using the withRepository method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/custom-repository.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait connection.transaction(async (manager) => {\n    // in transactions you MUST use manager instance provided by a transaction,\n    // you cannot use global entity managers or repositories,\n    // because this manager is exclusive and transactional\n\n    const userRepository = manager.withRepository(UserRepository)\n    await userRepository.createAndSave(\"Timber\", \"Saw\")\n    const timber = await userRepository.findByName(\"Timber\", \"Saw\")\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Schema with Relations in TypeORM\nDESCRIPTION: This example shows how to define an entity schema for a post with a many-to-many relationship to categories. It includes column definitions and a relation configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/separating-entity-definition.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EntitySchema} from \"typeorm\";\n\nexport const PostEntity = new EntitySchema({\n    name: \"post\",\n    columns: {\n        id: {\n            type: Number,\n            primary: true,\n            generated: true\n        },\n        title: {\n            type: String\n        },\n        text: {\n            type: String\n        }\n    },\n    relations: {\n        categories: {\n            type: \"many-to-many\",\n            target: \"category\" // CategoryEntity\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Column Data Types in TypeORM Entity\nDESCRIPTION: Example showing how to specify custom data types for columns in a TypeORM entity, such as text, double, and varchar with length.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column({\n        length: 100,\n    })\n    name: string\n\n    @Column(\"text\")\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column(\"double\")\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: VersionColumn for Optimistic Locking in TypeORM\nDESCRIPTION: Shows how to implement optimistic concurrency control using the @VersionColumn decorator, which automatically increments a version number each time the entity is updated.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @VersionColumn()\n    version: number\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Tables and OnLocked Behavior in TypeORM\nDESCRIPTION: Examples of locking specific tables and controlling behavior when encountering locked rows using setOnLocked\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(Post)\n    .createQueryBuilder(\"post\")\n    .leftJoin(\"post.author\", \"user\")\n    .setLock(\"pessimistic_write\", undefined, [\"post\"])\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .setLock(\"pessimistic_write\")\n    .setOnLocked(\"nowait\")\n    .getMany()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .setLock(\"pessimistic_write\")\n    .setOnLocked(\"skip_locked\")\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: TypeORM TypeScript Configuration\nDESCRIPTION: Required TypeScript configuration settings in tsconfig.json for using TypeORM with decorators and metadata reflection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"emitDecoratorMetadata\": true,\n\"experimentalDecorators\": true,\n```\n\n----------------------------------------\n\nTITLE: Executing Restore Query in TypeORM\nDESCRIPTION: Demonstrates a complete restore operation with conditions using QueryBuilder. This example shows how to restore a specific soft-deleted user record by ID.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/delete-query-builder.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait myDataSource\n  .getRepository(User)\n  .createQueryBuilder()\n  .restore()\n  .where(\"id = :id\", { id: 1 })\n  .execute();\n```\n\n----------------------------------------\n\nTITLE: Original Employee Entity Implementation\nDESCRIPTION: Basic TypeORM entity for Employee with individual columns for first name and last name\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/embedded-entities.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class Employee {\n    @PrimaryGeneratedColumn()\n    id: string\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    salary: string\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable column with default value in TypeORM\nDESCRIPTION: Defining a boolean column with nullable and default value options in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@Column({ nullable: true, default: true })\nflag: boolean;\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Column Indices in TypeORM\nDESCRIPTION: Demonstrates how to create multi-column indices by applying the @Index decorator at the entity level. Shows examples of multiple indices including a unique constraint across three columns.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\n@Index([\"firstName\", \"lastName\"])\n@Index([\"lastName\", \"middleName\"])\n@Index([\"firstName\", \"lastName\", \"middleName\"], { unique: true })\nexport class User {\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    middleName: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Column Data Types\nDESCRIPTION: Specifying precise column data types and constraints for the entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column({\n        length: 100,\n    })\n    name: string\n\n    @Column(\"text\")\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column(\"double\")\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Column Decorators to Entity\nDESCRIPTION: Implementing @Column decorators to define database table columns.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @Column()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column()\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: PrimaryGeneratedColumn with Custom Constraint Name\nDESCRIPTION: Shows how to set a custom primary key constraint name when using the @PrimaryGeneratedColumn decorator in a TypeORM entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/decorator-reference.md#2025-04-08_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class User {\n    @PrimaryGeneratedColumn({ primaryKeyConstraintName: \"pk_user_id\" })\n    id: number\n}\n```\n\n----------------------------------------\n\nTITLE: Registering View Entities in DataSource Configuration\nDESCRIPTION: This code snippet shows how to register view entities in the DataSource configuration options.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/view-entities.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\nimport { UserView } from \"./entity/UserView\"\n\nconst dataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [UserView],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache in QueryBuilder\nDESCRIPTION: Example of enabling cache for a specific query using QueryBuilder with custom conditions\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .createQueryBuilder(User, \"user\")\n    .where(\"user.isAdmin = :isAdmin\", { isAdmin: true })\n    .cache(true)\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with take Method\nDESCRIPTION: Uses the take method to limit the number of results returned, implementing pagination. This example retrieves the first 10 users with their photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.photos\", \"photo\")\n    .take(10)\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Database Table Structure for Photo Entity\nDESCRIPTION: The database table structure created for the Photo entity showing column names, data types and constraints.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n+-------------+--------------+----------------------------+\n|                         photo                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(100) |                            |\n| description | text         |                            |\n| filename    | varchar(255) |                            |\n| views       | int(11)      |                            |\n| isPublished | boolean      |                            |\n+-------------+--------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Registering View Entities in TypeORM Connection Options\nDESCRIPTION: This code snippet demonstrates how to register view entities in the TypeORM connection options. It shows two methods: explicitly listing the entities and using a directory path.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/view-entities.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createConnection, Connection} from \"typeorm\";\nimport {UserView} from \"./entity/UserView\";\n\nconst connection: Connection = await createConnection({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [UserView]\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createConnection, Connection} from \"typeorm\";\n\nconst connection: Connection = await createConnection({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [\"entity/*.js\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Entity Manager in TypeORM\nDESCRIPTION: Shows how to retrieve an EntityManager instance, which can be used to perform database operations. It allows specifying a connection name to get the entity manager for a specific connection.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getEntityManager} from \"typeorm\";\n\nconst manager = getEntityManager();\n// you can use manager methods now\n\nconst secondaryManager = getEntityManager(\"secondary-connection\");\n// you can use secondary connection manager methods\n```\n\n----------------------------------------\n\nTITLE: DataSource Configuration with Directory Entities\nDESCRIPTION: Demonstrates how to configure TypeORM DataSource to load all entities from a directory.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nconst dataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    entities: [\"entity/*.js\"],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining View Entity Columns in TypeORM\nDESCRIPTION: This example illustrates how to define columns in a view entity using the @ViewColumn decorator. It shows two approaches: using a string expression and using QueryBuilder.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/view-entities.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ViewEntity, ViewColumn} from \"typeorm\";\n\n@ViewEntity({ \n    expression: `\n        SELECT \"post\".\"id\" AS \"id\", \"post\".\"name\" AS \"name\", \"category\".\"name\" AS \"categoryName\"\n        FROM \"post\" \"post\"\n        LEFT JOIN \"category\" \"category\" ON \"post\".\"categoryId\" = \"category\".\"id\"\n    `\n})\nexport class PostCategory {\n\n    @ViewColumn()\n    id: number;\n\n    @ViewColumn()\n    name: string;\n\n    @ViewColumn()\n    categoryName: string;\n\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {ViewEntity, ViewColumn} from \"typeorm\";\n\n@ViewEntity({ \n    expression: (connection: Connection) => connection.createQueryBuilder()\n        .select(\"post.id\", \"id\")\n        .addSelect(\"post.name\", \"name\")\n        .addSelect(\"category.name\", \"categoryName\")\n        .from(Post, \"post\")\n        .leftJoin(Category, \"category\", \"category.id = post.categoryId\")\n})\nexport class PostCategory {\n\n    @ViewColumn()\n    id: number;\n\n    @ViewColumn()\n    name: string;\n\n    @ViewColumn()\n    categoryName: string;\n\n}\n```\n\n----------------------------------------\n\nTITLE: UPDATE Query with Raw SQL Expression using TypeORM QueryBuilder\nDESCRIPTION: Creates an UPDATE query that includes a raw SQL expression for one of the fields. The example uses a function-style value for the age property to increment it directly in the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/update-query-builder.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait dataSource\n    .createQueryBuilder()\n    .update(User)\n    .set({\n        firstName: \"Timber\",\n        lastName: \"Saw\",\n        age: () => \"age + 1\",\n    })\n    .where(\"id = :id\", { id: 1 })\n    .execute()\n```\n\n----------------------------------------\n\nTITLE: Removing an Entity\nDESCRIPTION: Shows how to delete a Photo entity from the database by first loading it and then using the repository's remove method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Photo } from \"./entity/Photo\"\nimport { AppDataSource } from \"./index\"\n\nconst photoRepository = AppDataSource.getRepository(Photo)\nconst photoToRemove = await photoRepository.findOneBy({\n    id: 1,\n})\nawait photoRepository.remove(photoToRemove)\n```\n\n----------------------------------------\n\nTITLE: Joining Related Data without Selection\nDESCRIPTION: Uses innerJoin without 'AndSelect' to join the photos table for filtering purposes but without selecting photo data in the result. Only user data will be returned.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await createQueryBuilder(\"user\")\n    .innerJoin(\"user.photos\", \"photo\")\n    .where(\"user.name = :name\", { name: \"Timber\" })\n    .getOne()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Model Class in TypeORM\nDESCRIPTION: This snippet shows a simple Photo class definition without any TypeORM decorators. This represents a basic model structure before turning it into an entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Photo {\n    id: number\n    name: string\n    description: string\n    filename: string\n    views: number\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Entity Decorator to a Model in TypeORM\nDESCRIPTION: Example showing how to convert a model class to an entity by adding the @Entity decorator, which makes it recognized by TypeORM for database table creation.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/README.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    id: number\n    name: string\n    description: string\n    filename: string\n    views: number\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Subdocument Entities\nDESCRIPTION: Shows how to define embedded document structures using TypeORM's column decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/mongodb.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, ObjectId, ObjectIdColumn, Column } from \"typeorm\"\n\nexport class Profile {\n    @Column()\n    about: string\n\n    @Column()\n    education: string\n\n    @Column()\n    career: string\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, ObjectId, ObjectIdColumn, Column } from \"typeorm\"\n\nexport class Photo {\n    @Column()\n    url: string\n\n    @Column()\n    description: string\n\n    @Column()\n    size: number\n\n    constructor(url: string, description: string, size: number) {\n        this.url = url\n        this.description = description\n        this.size = size\n    }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, ObjectId, ObjectIdColumn, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n    @ObjectIdColumn()\n    id: ObjectId\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column((type) => Profile)\n    profile: Profile\n\n    @Column((type) => Photo)\n    photos: Photo[]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Cache Table Configuration\nDESCRIPTION: Configuring custom table name for database caching\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    type: \"mysql\",\n    host: \"localhost\",\n    username: \"test\",\n    ...\n    cache: {\n        type: \"database\",\n        tableName: \"configurable-table-query-result-cache\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bidirectional One-to-One Relationship - Photo Side\nDESCRIPTION: Updates the Photo entity to complete the bidirectional relationship with PhotoMetadata, adding the metadata property that references the PhotoMetadata entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, OneToOne } from \"typeorm\"\nimport { PhotoMetadata } from \"./PhotoMetadata\"\n\n@Entity()\nexport class Photo {\n    /* ... other columns */\n\n    @OneToOne(() => PhotoMetadata, (photoMetadata) => photoMetadata.photo)\n    metadata: PhotoMetadata\n}\n```\n\n----------------------------------------\n\nTITLE: Query Building Operations in TypeORM\nDESCRIPTION: Examples of creating and executing queries using QueryBuilder.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await repository\n    .createQueryBuilder(\"user\")\n    .where(\"user.name = :name\", { name: \"John\" })\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Implementing Eager Relations - Category Entity\nDESCRIPTION: Defines a Category entity with a many-to-many relationship to Questions. Shows basic entity structure with primary key, name column, and relationship definition.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/eager-and-lazy-relations.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from \"typeorm\"\nimport { Question } from \"./Question\"\n\n@Entity()\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @ManyToMany((type) => Question, (question) => question.categories)\n    questions: Question[]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Express Server\nDESCRIPTION: TypeScript code to set up an Express server with routes for user management operations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as express from \"express\"\nimport { Request, Response } from \"express\"\n\n// create and setup express app\nconst app = express()\napp.use(express.json())\n\n// register routes\n\napp.get(\"/users\", function (req: Request, res: Response) {\n    // here we will have logic to return all users\n})\n\napp.get(\"/users/:id\", function (req: Request, res: Response) {\n    // here we will have logic to return user by id\n})\n\napp.post(\"/users\", function (req: Request, res: Response) {\n    // here we will have logic to save a user\n})\n\napp.put(\"/users/:id\", function (req: Request, res: Response) {\n    // here we will have logic to update a user by a given user id\n})\n\napp.delete(\"/users/:id\", function (req: Request, res: Response) {\n    // here we will have logic to delete a user by a given user id\n})\n\n// start express server\napp.listen(3000)\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests with Grep\nDESCRIPTION: Command to run only tests that match a specific regex pattern, useful for focusing on specific test cases.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md#2025-04-08_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm run test -- --grep \"github issues > #363\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with Both skip and take\nDESCRIPTION: Combines skip and take methods to implement complete pagination functionality. This example skips the first 5 users and returns the next 10 users with their photos.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource\n    .getRepository(User)\n    .createQueryBuilder(\"user\")\n    .leftJoinAndSelect(\"user.photos\", \"photo\")\n    .skip(5)\n    .take(10)\n    .getMany()\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Entity in TypeORM with TypeScript\nDESCRIPTION: This code demonstrates how to create a basic Photo entity in TypeORM. It uses the @Entity decorator to mark the class as an entity and @Column decorators to define the table columns.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README_ko.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column } from \"typeorm\";\n\n@Entity()\nexport class Photo {\n\n    @Column()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column()\n    description: string;\n\n    @Column()\n    filename: string;\n\n    @Column()\n    views: number;\n\n    @Column()\n    isPublished: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Entity Inheritance in TypeORM\nDESCRIPTION: Demonstrates how to use entity inheritance in TypeORM with an abstract base class to reduce code duplication across multiple entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class Content {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n}\n@Entity()\nexport class Photo extends Content {\n    @Column()\n    size: string\n}\n\n@Entity()\nexport class Question extends Content {\n    @Column()\n    answersCount: number\n}\n\n@Entity()\nexport class Post extends Content {\n    @Column()\n    viewCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Time Travel Queries in TypeORM (CockroachDB)\nDESCRIPTION: Demonstrates how to perform time travel queries using TypeORM in CockroachDB. This feature allows querying data as it existed at a specific point in the past.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = connection.getRepository(Account)\n\n// create a new account\nconst account = new Account()\naccount.name = \"John Smith\"\naccount.balance = 100\nawait repository.save(account)\n\n// imagine we update the account balance 1 hour after creation\naccount.balance = 200\nawait repository.save(account)\n\n// outputs { name: \"John Smith\", balance: \"200\" }\nconsole.log(account)\n\n// load account state on 1 hour back\naccount = await repository\n    .createQueryBuilder(\"account\")\n    .timeTravelQuery(`'-1h'`)\n    .getOneOrFail()\n\n// outputs { name: \"John Smith\", balance: \"100\" }\nconsole.log(account)\n```\n\n----------------------------------------\n\nTITLE: Installing TypeORM and MySQL\nDESCRIPTION: Command to install TypeORM, MySQL driver, and reflect-metadata for the project.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/example-with-express.md#2025-04-08_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i typeorm mysql reflect-metadata --save\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Relation Loading Syntax in TypeScript\nDESCRIPTION: Shows the new object-literal notation for specifying relations to load in find operations, replacing the deprecated array syntax. This change enhances type-safety.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    relations: {\n        contacts: true,\n        photos: {\n            album: true,\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling SQL Memory Mode in TypeORM\nDESCRIPTION: Method to disable SQL memory mode and flush memorized queries.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ndisableSqlMemory(): void\n```\n\n----------------------------------------\n\nTITLE: MongoDB Query Examples with TypeORM Repository\nDESCRIPTION: Demonstrates various MongoDB query operations using TypeORM's MongoRepository including comparison operators and subdocument queries.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/mongodb.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await myDataSource.getMongoRepository(User).find({\n    where: {\n        firstName: { $eq: \"Timber\" },\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await myDataSource.getMongoRepository(User).find({\n    where: {\n        age: { $lt: 60 },\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await myDataSource.getMongoRepository(User).find({\n    where: {\n        firstName: { $in: [\"Timber\", \"Zhang\"] },\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await myDataSource.getMongoRepository(User).find({\n    where: {\n        firstName: { $not: { $in: [\"Timber\", \"Zhang\"] } },\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst timber = await myDataSource.getMongoRepository(User).find({\n    where: {\n        $or: [{ firstName: \"Timber\" }, { firstName: \"Zhang\" }],\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await myDataSource.getMongoRepository(User).find({\n    where: {\n        \"profile.education\": { $eq: \"Tree School\" },\n    },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await myDataSource.getMongoRepository(User).find({\n    where: {\n        \"photos.size\": { $lt: 500 },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Timestamp in JavaScript\nDESCRIPTION: JavaScript code snippets demonstrating how to generate timestamps for migration names.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nDate.now()\n/* OR */ new Date().getTime()\n```\n\n----------------------------------------\n\nTITLE: Resulting Database Schema\nDESCRIPTION: The final database table structures showing how embedded columns are merged into the main tables\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/embedded-entities.md#2025-04-08_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n+-------------+--------------+----------------------------+\n|                          user                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| nameFirst   | varchar(255) |                            |\n| nameLast    | varchar(255) |                            |\n| isActive    | boolean      |                            |\n+-------------+--------------+----------------------------+\n\n+-------------+--------------+----------------------------+\n|                        employee                         |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| nameFirst   | varchar(255) |                            |\n| nameLast    | varchar(255) |                            |\n| salary      | int(11)      |                            |\n+-------------+--------------+----------------------------+\n\n+-------------+--------------+----------------------------+\n|                         student                         |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| nameFirst   | varchar(255) |                            |\n| nameLast    | varchar(255) |                            |\n| faculty     | varchar(255) |                            |\n+-------------+--------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Implementing Materialized Path Tree Structure in TypeORM\nDESCRIPTION: This code snippet demonstrates how to create a Materialized Path (Path Enumeration) tree structure using TypeORM decorators. It defines a Category entity with TreeChildren and TreeParent decorators for managing the tree structure.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/tree-entities.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Tree,\n    Column,\n    PrimaryGeneratedColumn,\n    TreeChildren,\n    TreeParent,\n    TreeLevelColumn,\n} from \"typeorm\"\n\n@Entity()\n@Tree(\"materialized-path\")\nexport class Category {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @TreeChildren()\n    children: Category[]\n\n    @TreeParent()\n    parent: Category\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Order Options in TypeORM\nDESCRIPTION: Examples of using the new order syntax including nested ordering capabilities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nuserRepository.find({\n    order: {\n        photos: {\n            album: {\n                name: \"ASC\",\n            },\n        },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for TypeORM\nDESCRIPTION: Command to install all TypeORM dependencies using npm.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating and saving a model in Sequelize\nDESCRIPTION: Creating and saving a new record using Sequelize's create method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst employee = await Employee.create({\n    name: \"John Doe\",\n    title: \"senior engineer\",\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up a data source in TypeORM\nDESCRIPTION: Creating and initializing a database connection in TypeORM with proper error handling.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DataSource } from \"typeorm\"\n\nconst dataSource = new DataSource({\n    type: \"mysql\",\n    host: \"localhost\",\n    username: \"username\",\n    password: \"password\",\n})\n\ndataSource\n    .initialize()\n    .then(() => {\n        console.log(\"Data Source has been initialized successfully.\")\n    })\n    .catch((err) => {\n        console.error(\"Error during Data Source initialization:\", err)\n    })\n```\n\n----------------------------------------\n\nTITLE: Defining a View Entity with QueryBuilder in TypeORM\nDESCRIPTION: This example shows how to create a view entity using TypeORM's QueryBuilder. It uses the @ViewEntity decorator with a function that returns a QueryBuilder instance to define the view.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/view-entities.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@ViewEntity({ \n    expression: (connection: Connection) => connection.createQueryBuilder()\n        .select(\"post.id\", \"id\")\n        .addSelect(\"post.name\", \"name\")\n        .addSelect(\"category.name\", \"categoryName\")\n        .from(Post, \"post\")\n        .leftJoin(Category, \"category\", \"category.id = post.categoryId\")\n})\n```\n\n----------------------------------------\n\nTITLE: Alternative to findOne() Without Parameters\nDESCRIPTION: Shows how to fetch a single row from the database using find() method as an alternative to the deprecated findOne() without parameters.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst [user] = await userRepository.find()\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeORM Data Source Options for MySQL\nDESCRIPTION: Example of TypeORM data source options for MySQL database. It includes configuration for host, port, credentials, database name, logging, synchronization, and paths for entities, subscribers, schemas, and migrations.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-options.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",\n    logging: true,\n    synchronize: true,\n    entities: [\n        \"entity/*.js\"\n    ],\n    subscribers: [\n        \"subscriber/*.js\"\n    ],\n    entitySchemas: [\n        \"schema/*.json\"\n    ],\n    migrations: [\n        \"migration/*.js\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading an entity in TypeORM\nDESCRIPTION: Loading an existing entity from the database and updating specific properties in TypeORM.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst employee = await Employee.preload({ id: 1, name: \"John Doe\" })\n```\n\n----------------------------------------\n\nTITLE: TypeORM Code: Bug Fixes and Features Overview\nDESCRIPTION: Changelog entries detailing various bug fixes and improvements to TypeORM, including database driver updates, migration handling, and support for different database platforms. Key changes include MariaDB JSON column fixes, SAP HANA support, and improved cache provider functionality.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n- .synchronize() drops json column on mariadb (#5391)\n- (base-entity) set create return type to T[] (#5400)\n- add the enableArithAbort option to the sql server connection option typings (#5526)\n- bug when default value in mssql were not updated if previous default was already set\n- change OrmUtils.mergeDeep to not merge RegExp objects (#5182)\n\n### Features\n- Add basic support for custom cache providers (#5309)\n- add fulltext parser option (#5380)\n- SAP Hana support (#5246)\n- implement driver options for NativeScript (#5217)\n```\n\n----------------------------------------\n\nTITLE: Using Any Operator in TypeORM Query (TypeScript)\nDESCRIPTION: Shows how to use the Any operator in a TypeORM query to find posts with titles matching any value in a given array (Postgres specific).\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/find-options.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Any } from \"typeorm\"\n\nconst loadedPosts = await dataSource.getRepository(Post).findBy({\n    title: Any([\"About #2\", \"About #3\"]),\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"post\" WHERE \"title\" = ANY(['About #2','About #3'])\n```\n\n----------------------------------------\n\nTITLE: Creating Entity with Basic Decorator\nDESCRIPTION: Adding @Entity decorator to transform a class into a TypeORM entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    id: number\n    name: string\n    description: string\n    filename: string\n    views: number\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: New unique constraint decorator syntax\nDESCRIPTION: Demonstrates the usage of the new @Unique decorator for creating composite unique constraints at the table level.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n@Unique(\"uq_id_name\", [\"id\", \"name\"])\n```\n\n----------------------------------------\n\nTITLE: Creating Abstract Content Class for Concrete Table Inheritance in TypeORM\nDESCRIPTION: This snippet defines an abstract Content class with common properties (id, title, description) to be used as a base for other entities in concrete table inheritance.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport abstract class Content {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n}\n```\n\n----------------------------------------\n\nTITLE: Including Reflect Metadata in HTML for TypeORM\nDESCRIPTION: This HTML snippet shows how to include the reflect-metadata library in the main HTML page, which is necessary for TypeORM to function correctly in a browser environment.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/supported-platforms.md#2025-04-08_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"./node_modules/reflect-metadata/Reflect.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Primary Column\nDESCRIPTION: Adding @PrimaryColumn decorator to define the primary key of the entity.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryColumn } from \"typeorm\"\n\n@Entity()\nexport class Photo {\n    @PrimaryColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @Column()\n    description: string\n\n    @Column()\n    filename: string\n\n    @Column()\n    views: number\n\n    @Column()\n    isPublished: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Skip/Offset in MSSQL\nDESCRIPTION: MSSQL users are required to add \"order by\" for skip/offset operations since MSSQL does not support OFFSET/LIMIT statement without order by applied.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CHANGELOG.md#2025-04-08_snippet_27\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT * FROM table ORDER BY column OFFSET 10 ROWS FETCH NEXT 10 ROWS ONLY;\n```\n\n----------------------------------------\n\nTITLE: Defining a Many-to-One Relationship in TypeORM (Photo Entity)\nDESCRIPTION: This snippet shows how to define the Photo entity with a many-to-one relationship to User. It uses the @ManyToOne decorator to establish that each photo belongs to a single user.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/many-to-one-one-to-many-relations.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToOne } from \"typeorm\"\nimport { User } from \"./User\"\n\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    url: string\n\n    @ManyToOne(() => User, (user) => user.photos)\n    user: User\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UglifyJsPlugin to Preserve Class and Function Names\nDESCRIPTION: This snippet shows how to configure the UglifyJsPlugin in Webpack to preserve class and function names, which is crucial for TypeORM migration functionality.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst UglifyJsPlugin = require(\"uglifyjs-webpack-plugin\")\n\nmodule.exports = {\n    // ... other Webpack configurations here\n    optimization: {\n        minimizer: [\n            new UglifyJsPlugin({\n                uglifyOptions: {\n                    keep_classnames: true,\n                    keep_fnames: true,\n                },\n            }),\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Database Connections in TypeORM\nDESCRIPTION: Shows how to create multiple database connections simultaneously using the createConnections function. This method registers all connections with the global connection manager and can read connection options from an ormconfig file or environment variables if not provided.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/data-source-api.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createConnections} from \"typeorm\";\n\nconst connection = await createConnections([{\n    name: \"connection1\",\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\"\n}, {\n    name: \"connection2\",\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\"\n}]);\n```\n\n----------------------------------------\n\nTITLE: TypeORM Test Template for GitHub Issues\nDESCRIPTION: A template for creating test cases for GitHub issues in TypeORM, including connection setup, database preparation, and cleanup. It demonstrates the structure required for testing with multiple database connections.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"reflect-metadata\";\nimport { createTestingConnections, closeTestingConnections, reloadTestingDatabases } from \"../../utils/test-utils\";\nimport { DataSource } from \"../../../src/data-source/DataSource\"\nimport { expect } from \"chai\";\n\ndescribe(\"github issues > #<issue number> <issue title>\", () => {\n\n    let dataSources: DataSource[];\n    before(async () => dataSources = await createTestingConnections({\n        entities: [__dirname + \"/entity/*{.js,.ts}\"],\n        schemaCreate: true,\n        dropSchema: true,\n    }));\n    beforeEach(() => reloadTestingDatabases(dataSources));\n    after(() => closeTestingConnections(dataSources));\n\n    it(\"should <put a detailed description of what it should do here>\", () => Promise.all(dataSources.map(async dataSource => {\n\n       // tests go here\n\n    })));\n\n    // you can add additional tests if needed\n\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Question Entity with Concrete Table Inheritance in TypeORM\nDESCRIPTION: This snippet demonstrates extending the Content class to create a Question entity, adding an answersCount property specific to questions.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Question extends Content {\n    @Column()\n    answersCount: number\n}\n```\n\n----------------------------------------\n\nTITLE: Using simple-array Column in TypeORM\nDESCRIPTION: Shows how to store array values in a simple-array column type, which will be saved as a comma-separated string in the database.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entities.md#2025-04-08_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User()\nuser.names = [\"Alexander\", \"Alex\", \"Sasha\", \"Shurik\"]\n```\n\n----------------------------------------\n\nTITLE: Creating an index in TypeORM\nDESCRIPTION: Defining a unique composite index in TypeORM using the Index decorator.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\n@Index([\"firstName\", \"lastName\"], { unique: true })\nexport class User {}\n```\n\n----------------------------------------\n\nTITLE: Cache ID in Repository\nDESCRIPTION: Setting cache ID and duration in repository queries\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/caching.md#2025-04-08_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await dataSource.getRepository(User).find({\n    where: { isAdmin: true },\n    cache: {\n        id: \"users_admins\",\n        milliseconds: 25000,\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Soft Delete Operations in TypeORM\nDESCRIPTION: Methods for soft deleting and restoring entities.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/repository-api.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst repository = dataSource.getRepository(Entity)\nawait repository.softDelete(1)\nawait repository.restore(1)\nawait repository.softDelete([1, 2, 3])\nawait repository.softDelete({ firstName: \"Jake\" })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst entities = await repository.find()\nconst entitiesAfterSoftRemove = await repository.softRemove(entities)\nawait repository.recover(entitiesAfterSoftRemove)\n```\n\n----------------------------------------\n\nTITLE: Extending Entity Schemas in TypeORM\nDESCRIPTION: This snippet demonstrates how to extend entity schemas using the spread operator. It defines a base column schema part that can be reused in other entity schemas.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/separating-entity-definition.md#2025-04-08_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {EntitySchemaColumnOptions} from \"typeorm\";\n\nexport const BaseColumnSchemaPart = {\n  id: {\n    type: Number,\n    primary: true,\n    generated: true,\n  } as EntitySchemaColumnOptions,\n  createdAt: {\n    name: 'created_at',\n    type: 'timestamp with time zone',\n    createDate: true,\n  } as EntitySchemaColumnOptions,\n  updatedAt: {\n    name: 'updated_at',\n    type: 'timestamp with time zone',\n    updateDate: true,\n  } as EntitySchemaColumnOptions,\n};\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity Model in TypeORM with TypeScript\nDESCRIPTION: This code snippet shows how to define a User entity using TypeORM decorators. It demonstrates the use of @Entity, @PrimaryGeneratedColumn, and @Column decorators to map a TypeScript class to a database table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README_ko.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n\n@Entity()\nexport class User {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    age: number;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Database Driver in TypeORM\nDESCRIPTION: Retrieves the underlying database driver being used by the DataSource. This provides access to database-specific functionality.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/data-source-api.md#2025-04-08_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst driver: Driver = dataSource.driver\n```\n\n----------------------------------------\n\nTITLE: Accessing property in Sequelize\nDESCRIPTION: Accessing a model property in Sequelize using the get method.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(employee.get(\"name\"))\n```\n\n----------------------------------------\n\nTITLE: Using Extended Entity Schema in TypeORM\nDESCRIPTION: This example shows how to use the extended base column schema part in a new entity schema. It demonstrates the reuse of common column definitions across multiple schemas.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/separating-entity-definition.md#2025-04-08_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CategoryEntity = new EntitySchema<Category>({\n    name: \"category\",\n    columns: {\n        ...BaseColumnSchemaPart,    \n        // CategoryEntity now has id, createdAt, updatedAt columns defined!\n        // Additionally, the following new field is defined\n        name: {\n            type: String\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: QueryBuilder Parameter Naming Example\nDESCRIPTION: Shows correct and incorrect ways to use parameters in WHERE conditions when using multiple joins.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await dataSource\n    .getRepository(User)\n    .createQueryBuilder('user')\n    .leftJoinAndSelect('user.linkedSheep', 'linkedSheep')\n    .leftJoinAndSelect('user.linkedCow', 'linkedCow')\n    .where('user.linkedSheep = :sheepId', { sheepId })\n    .andWhere('user.linkedCow = :cowId', { cowId });\n```\n\n----------------------------------------\n\nTITLE: 生成的数据库表结构 (Bash)\nDESCRIPTION: 展示了根据定义的实体生成的数据库表结构，包括photo表和user表的字段及其类型。\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/many-to-one-one-to-many-relations.md#2025-04-08_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n+-------------+--------------+----------------------------+\n|                         photo                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| url         | varchar(255) |                            |\n| userId      | int(11)      |                            |\n+-------------+--------------+----------------------------+\n\n+-------------+--------------+----------------------------+\n|                          user                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(255) |                            |\n+-------------+--------------+----------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating Index in TypeORM\nDESCRIPTION: Method to create a new index on a table.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/migrations.md#2025-04-08_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ncreateIndex(table: Table|string, index: TableIndex): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Creating an index in Sequelize\nDESCRIPTION: Defining a unique composite index in Sequelize model configuration.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nsequelize.define(\n    \"user\",\n    {},\n    {\n        indexes: [\n            {\n                unique: true,\n                fields: [\"firstName\", \"lastName\"],\n            },\n        ],\n    },\n)\n```\n\n----------------------------------------\n\nTITLE: Lock Mode Comparison Table\nDESCRIPTION: Table showing support for different lock modes across database systems and their corresponding SQL statements\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/select-query-builder.md#2025-04-08_snippet_37\n\nLANGUAGE: text\nCODE:\n```\n|                 | pessimistic_read                  | pessimistic_write       | dirty_read    | pessimistic_partial_write (Deprecated, use onLocked instead)   | pessimistic_write_or_fail (Deprecated, use onLocked instead)   | for_no_key_update   | for_key_share |\n| --------------- | --------------------------------- | ----------------------- | ------------- | -------------------------------------------------------------- | -------------------------------------------------------------- | ------------------- | ------------- |\n| MySQL           | FOR SHARE (8+)/LOCK IN SHARE MODE | FOR UPDATE              | (nothing)     | FOR UPDATE SKIP LOCKED                                         | FOR UPDATE NOWAIT                                              |                     |               |\n| Postgres        | FOR SHARE                         | FOR UPDATE              | (nothing)     | FOR UPDATE SKIP LOCKED                                         | FOR UPDATE NOWAIT                                              | FOR NO KEY UPDATE   | FOR KEY SHARE |\n| Oracle          | FOR UPDATE                        | FOR UPDATE              | (nothing)     |                                                                |                                                                |                     |               |\n| SQL Server      | WITH (HOLDLOCK, ROWLOCK)          | WITH (UPDLOCK, ROWLOCK) | WITH (NOLOCK) |                                                                |                                                                |                     |               |\n| AuroraDataApi   | LOCK IN SHARE MODE                | FOR UPDATE              | (nothing)     |                                                                |                                                                |                     |               |\n| CockroachDB     |                                   | FOR UPDATE              | (nothing)     |                                                                | FOR UPDATE NOWAIT                                              | FOR NO KEY UPDATE   |               |\n```\n\n----------------------------------------\n\nTITLE: Implementing @BeforeRecover Entity Listener in TypeORM\nDESCRIPTION: Demonstrates how to use the @BeforeRecover decorator to define a method that is called before an entity is recovered using repository/manager recover.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @BeforeRecover()\n    updateStatus() {\n        this.status = \"recovered\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ActiveRecord Pattern for Database Operations in TypeORM with TypeScript\nDESCRIPTION: This snippet shows how to perform database operations using the ActiveRecord pattern in TypeORM. It demonstrates creating, saving, finding, and removing User entities without using a separate repository.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/README_ko.md#2025-04-08_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = new User();\nuser.firstName = \"Timber\";\nuser.lastName = \"Saw\";\nuser.age = 25;\nawait user.save();\n\nconst allUsers = await User.find();\nconst firstUser = await User.findOne(1);\nconst timber = await User.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n\nawait timber.remove();\n```\n\n----------------------------------------\n\nTITLE: Defining Project model in Sequelize\nDESCRIPTION: Creating a Project model with title and description fields in Sequelize.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/sequelize-migration.md#2025-04-08_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (sequelize, DataTypes) {\n    const Project = sequelize.define(\"project\", {\n        title: DataTypes.STRING,\n        description: DataTypes.TEXT,\n    })\n\n    return Project\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing @AfterRecover Entity Listener in TypeORM\nDESCRIPTION: Shows how to use the @AfterRecover decorator to define a method that is called after an entity is recovered using repository/manager recover.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/listeners-and-subscribers.md#2025-04-08_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Post {\n    @AfterRecover()\n    updateStatus() {\n        this.status = \"recovered\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Minification in Vite for TypeORM Compatibility\nDESCRIPTION: This configuration disables minification in Vite to prevent issues with TypeORM migration names. It's a crude solution that results in larger file sizes.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/faq.md#2025-04-08_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  build: {\n    sourcemap: true,\n    minify: false,\n  },\n  plugins: [vue(), legacy()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Photo Entity in TypeScript using TypeORM\nDESCRIPTION: This snippet defines a Photo entity with id, title, description, and size columns using TypeORM decorators.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/entity-inheritance.md#2025-04-08_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Photo {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    title: string\n\n    @Column()\n    description: string\n\n    @Column()\n    size: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating One-to-Many/Many-to-One Relationship in TypeORM\nDESCRIPTION: Example of creating a bidirectional one-to-many/many-to-one relationship between Author and Photo entities. The Author has many Photos (OneToMany) and each Photo belongs to one Author (ManyToOne).\nSOURCE: https://github.com/typeorm/typeorm/blob/master/docs/zh_CN/index.md#2025-04-08_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    OneToMany,\n    JoinColumn,\n} from \"typeorm\"\nimport { Photo } from \"./Photo\"\n\n@Entity()\nexport class Author {\n    @PrimaryGeneratedColumn()\n    id: number\n\n    @Column()\n    name: string\n\n    @OneToMany((type) => Photo, (photo) => photo.author) // note: we will create author property in the Photo class below\n    photos: Photo[]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToOne } from \"typeorm\"\nimport { PhotoMetadata } from \"./PhotoMetadata\"\nimport { Author } from \"./Author\"\n\n@Entity()\nexport class Photo {\n    /* ... other columns */\n\n    @ManyToOne((type) => Author, (author) => author.photos)\n    author: Author\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to TypeORM\nDESCRIPTION: Git command for committing changes with the -a flag to automatically add and remove edited files.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CONTRIBUTING.md#2025-04-08_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -a\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to GitHub\nDESCRIPTION: Command to push the local branch to GitHub repository for creating a pull request.\nSOURCE: https://github.com/typeorm/typeorm/blob/master/CONTRIBUTING.md#2025-04-08_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-fix-branch\n```"
  }
]