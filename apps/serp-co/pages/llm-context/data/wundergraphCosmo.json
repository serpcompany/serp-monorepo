[
  {
    "owner": "wundergraph",
    "repo": "cosmo",
    "content": "TITLE: Defining a GraphQL Schema for Feature Flag Introspection (GraphQL)\nDESCRIPTION: This GraphQL schema definition proposes adding a `__features` field to the `Query` type. This field would return a list of `FeatureFlag` objects, allowing clients to discover available feature flags, their associated subgraph, and a description.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Query {\n  __features: [FeatureFlag!]!\n}\n\ntype FeatureFlag {\n  name: String!\n  subgraph: String!\n  description: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Series of commands for bootstrapping the Cosmo platform locally, including setup, migration, and service startup\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# 1️⃣ Setup the repository, build libraries and start all services (Wait a few seconds until Keycloak is ready)\nmake\n\n# 2️⃣ Run migrations and seed the database\nmake migrate && make seed\n\n# 3️⃣ Start the control plane\nmake start-cp\n\n# 4️⃣ Create the demo and copy the JWT printed at the bottom\nmake create-demo\n\n# 5️⃣ Start the subgraphs\nOTEL_AUTH_TOKEN=<jwt-token> make dc-subgraphs-demo\n\n# 6️⃣ Put the JWT from the previous step into the router/.env as GRAPH_API_TOKEN and start the router\nmake start-router\n\n# ✨ Finally, Start the studio (http://localhost:3000) and explore the Cosmo platform\nmake start-studio\n```\n\n----------------------------------------\n\nTITLE: Federating Multiple GraphQL Subgraphs in TypeScript\nDESCRIPTION: Demonstrates how to federate two subgraphs with shared User type using @key directive. Shows basic federation setup with type definitions across multiple subgraphs.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/composition/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { federateSubgraphs, FederationResult, Subgraph } from '@wundergraph/composition';\nimport { parse } from 'graphql';\n\nconst result: FederationResult = federateSubgraphs([subgraphA, subgraphB]);\n\nconst subgraphA: Subgraph = {\n  name: 'subgraph-a',\n  url: 'http://localhost:4001',\n  definitions: parse(`\n    type User @key(fields: \"id\") {\n      id: ID!\n      name: String!\n    }\n  `),\n};\n\nconst subgraphB: Subgraph = {\n  name: 'subgraph-b',\n  url: 'http://localhost:4002',\n  definitions: parse(`\n    type Query {\n      users: [User!]!\n    }\n      \n    type User @key(fields: \"id\") {\n      id: ID!\n      interests: [String!]!\n    }\n  `),\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Structs in Go for Cosmo Router\nDESCRIPTION: Illustrates how to add new configuration options in `pkg/config/config.go`. Defines a `YourFeatureConfig` struct with `Enabled` and `Timeout` fields, demonstrating the use of `yaml` tags for YAML mapping (including `omitempty`), `env` tags for environment variable overrides, `envDefault` for specifying default values, and embedding this struct within the main `Config` struct using `envPrefix` for nested environment variable naming.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/docs/Configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\ntype YourFeatureConfig struct {\n    Enabled bool   `yaml:\"enabled\" envDefault:\"false\" env:\"ENABLED\"`\n    Timeout string `yaml:\"timeout\" envDefault:\"30s\" env:\"TIMEOUT\"`\n}\n\ntype Config struct {\n    // ... existing fields\n    YourFeature YourFeatureConfig `yaml:\"your_feature,omitempty\" envPrefix:\"YOUR_FEATURE_\"`\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Composing Federated Subgraphs in Go\nDESCRIPTION: This snippet demonstrates how to use the 'Federate' function to produce a federated subgraph from a set of subgraphs. It imports the composition package and defines two subgraphs with nested types before composing them.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/composition-go/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/wundergraph/cosmo/composition-go\"\n)\n\nfunc main() {\n\tfederated, err := composition.Federate(&composition.Subgraph{\n\t\tName: \"A\",\n\t\tSchema: `type Query {\n\t\t\tquery: Nested @shareable\n\t\t  }\n\n\t\t  type Nested @shareable {\n\t\t\tnest: Nested2\n\t\t  }\n\n\t\t  type Nested2 @shareable {\n\t\t\tnest: Nested3\n\t\t  }\n\n\t\t  type Nested3 @shareable {\n\t\t\tnest: Nested4\n\t\t  }\n\n\t\t  type Nested4 {\n\t\t\tname: String\n\t\t  }`,\n\t}, &composition.Subgraph{\n\t\tName: \"B\",\n\t\tSchema: `type Query {\n\t\t\tquery: Nested @shareable\n\t\t  }\n\n\t\t  type Nested @shareable {\n\t\t\tnest: Nested2\n\t\t  }\n\n\t\t  type Nested2 @shareable {\n\t\t\tnest: Nested3\n\t\t  }\n\n\t\t  type Nested3 @shareable {\n\t\t\tnest: Nested4\n\t\t  }\n\n\t\t  type Nested4 {\n\t\t\tage: Int\n\t\t  }`,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(federated.SDL)\n}\n```\n\n----------------------------------------\n\nTITLE: Making GraphQL Requests with Feature Flags\nDESCRIPTION: Examples of making GraphQL requests with feature flags enabled via HTTP headers, cookies, or extensions field in the request.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST https://graph.domain.com/graphql \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Feature-Flag: users-v2\"\n  -d '{\"query\": \"{ users { id name } }\"}'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST https://graph.domain.com/graphql \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Cookie: feature-flag=users-v2\"\n  -d '{\"query\": \"{ users { id name } }\"}'\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST https://graph.domain.com/graphql \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"query\": \"{ users { id name } }\", \"extensions\": { \"featureFlag\": \"users-v2\" } }'\n```\n\n----------------------------------------\n\nTITLE: Debugging Federation Results in TypeScript\nDESCRIPTION: Shows how to handle federation results including success and error cases. Demonstrates printing the federated schema and handling validation errors and warnings.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/composition/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { federateSubgraphs, FederationResult, Subgraph } from '@wundergraph.composition';\nimport { print, printSchema } from 'graphql';\n\nconst result: FederationResult = federateSubgraphs([subgraphA, subgraphB]);\n\nif (result.success) {\n  // Both options to print the federated graph as a string are included for documentational purposes only\n  console.log(print(result.federatedGraphAST)); // log the federated graph AST as a string\n  console.log(printSchema(result.federatedGraphSchema)); // log the federated graph schema as a string\n} else {\n  for (const err of result.errors) {\n    console.log(err.message);\n  }\n}\nfor (const warning of result.warnings) {\n  console.log(warning);\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Standard Subgraph Schema using wgc CLI (Bash)\nDESCRIPTION: This command uses the WunderGraph Cosmo CLI (`wgc`) to publish a new subgraph schema named 'products'. It specifies the schema file location, the routing URL for the subgraph service, and assigns a label 'team=A'. This is the default command for publishing a subgraph without feature flags.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish products --schema ../demo/subgraphs/products/products.graphql --routing-url http://localhost:4001/graphql --label=team=A\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Cosmo Control Plane\nDESCRIPTION: Command to execute database migrations for the Cosmo control plane. This ensures that the database schema is up-to-date with the latest changes.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/controlplane/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm migrate\n```\n\n----------------------------------------\n\nTITLE: Publishing a Subgraph Schema with a Feature Flag using wgc CLI (Bash)\nDESCRIPTION: This command publishes the 'products' subgraph schema, associating it with the feature flag 'v2'. Clients without the flag enabled will receive the previous schema version. The routing URL points to a different endpoint (v2). This allows for gradual rollout or A/B testing of schema changes.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish products --schema ../demo/subgraphs/products/products.graphql --routing-url http://localhost:4001/v2/graphql --label=team=A --feature-flag=v2\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmo YAML for Feature Flag Preview\nDESCRIPTION: This YAML configuration defines the namespace, feature flags, and subgraphs for the Supergraph Preview. It specifies the naming convention for feature flags and the schema and routing URL for subgraphs.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/previews-using-fetaure-flags.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config\n# .github/cosmo.yaml\nnamespace: 'staging'\nfeature_flags:\n  - name: 'my-feature-flag-{PR_NUMBER}'\n    labels:\n      - 'my-feature-flag-label'\n\nsubgraphs:\n  - name: 'subgraph1'\n    schema: 'my-project/my-subgraph/subgraph1.graphql'\n    routing_url: 'http://mycompany-subgraph1-{PR_NUMBER}.com/graphql' # Supports templating, only PR_NUMBER is supported\n```\n\n----------------------------------------\n\nTITLE: Local Engine Development Configuration\nDESCRIPTION: Go module replacement directive to use a local version of graphql-go-tools package for development. Requires the graphql-go-tools repository to be in the same parent directory.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nreplace github.com/wundergraph/graphql-go-tools/v2 => ../../graphql-go-tools/v2\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for Subgraph\nDESCRIPTION: This GraphQL schema defines types for User and Post, along with query and mutation operations. It includes fields for user authentication, post creation, and fetching user and post data.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/pkg/plan_generator/testdata/plans/base/filter.txt#2025-04-23_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype User @key(fields: \"id\") {\n  id: ID!\n  name: String!\n  username: String!\n  numPosts: Int!\n}\n\ntype Post @key(fields: \"id\") {\n  id: ID!\n  title: String!\n  body: String!\n  published: Boolean!\n  author: User!\n}\n\ntype Query {\n  me: User\n  users: [User!]!\n  user(id: ID!): User\n  posts: [Post!]!\n  post(id: ID!): Post\n}\n\ntype Mutation {\n  createUser(name: String!, username: String!): User!\n  createPost(title: String!, body: String!): Post!\n  login(username: String!, password: String!): String!\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating Router Configuration in Go\nDESCRIPTION: This snippet shows how to use the 'BuildRouterConfiguration' function to generate a static data source configuration for the router. It uses the same subgraph definitions as the previous example to create the configuration.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/composition-go/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/wundergraph/cosmo/composition-go\"\n)\n\nfunc main() {\n\tconfig, err := composition.BuildRouterConfiguration(&composition.Subgraph{\n\t\tName: \"A\",\n\t\tSchema: `type Query {\n\t\t\tquery: Nested @shareable\n\t\t  }\n\n\t\t  type Nested @shareable {\n\t\t\tnest: Nested2\n\t\t  }\n\n\t\t  type Nested2 @shareable {\n\t\t\tnest: Nested3\n\t\t  }\n\n\t\t  type Nested3 @shareable {\n\t\t\tnest: Nested4\n\t\t  }\n\n\t\t  type Nested4 {\n\t\t\tname: String\n\t\t  }`,\n\t}, &composition.Subgraph{\n\t\tName: \"B\",\n\t\tSchema: `type Query {\n\t\t\tquery: Nested @shareable\n\t\t  }\n\n\t\t  type Nested @shareable {\n\t\t\tnest: Nested2\n\t\t  }\n\n\t\t  type Nested2 @shareable {\n\t\t\tnest: Nested3\n\t\t  }\n\n\t\t  type Nested3 @shareable {\n\t\t\tnest: Nested4\n\t\t  }\n\n\t\t  type Nested4 {\n\t\t\tage: Int\n\t\t  }`,\n\t})\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(config)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Specific Feature Flag from a Subgraph using wgc CLI (Bash)\nDESCRIPTION: This command uses the `wgc feature-flag remove` subcommand to specifically remove the feature flag named 'products.v2'. After execution, this particular feature flag will no longer be associated with the 'products' subgraph.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc feature-flag remove products.v2\n```\n\n----------------------------------------\n\nTITLE: Sample GraphQL Query for Employee Data\nDESCRIPTION: GraphQL query demonstrating how to fetch employee details including personal information, mood states, availability status, notes, and products\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/router-simple/README.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyEmployees {\n  employees {\n    details {\n      forename\n    }\n    currentMood\n    derivedMood\n    isAvailable\n    notes\n    products\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Query in Cosmo Studio Playground\nDESCRIPTION: This GraphQL query retrieves employee data including details, mood, availability, notes, and products. It's meant to be run in the Cosmo Studio Playground after logging in.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-docker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyEmployees {\n  employees {\n    details {\n      forename\n    }\n    currentMood\n    derivedMood\n    isAvailable\n    notes\n    products\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Group Feature Flags in GraphQL Requests\nDESCRIPTION: Example of making a GraphQL request using a group feature flag that enables multiple individual feature flags simultaneously.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST https://graph.domain.com/graphql \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Feature-Flag: v2\"\n  -d '{\"query\": \"{ users { id name } posts { id title } }\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Configuration in TypeScript\nDESCRIPTION: Demonstrates how to create a Subgraph object with the required properties including name, URL and GraphQL schema definitions parsed from SDL.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/composition/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Subgraph } from '@wundergraph/composition'\nimport { parse } from 'graphql';\n\nconst subgraphA: Subgraph = {\n  name: 'subgraph-a',\n  url: 'http://localhost:4001',\n  definitions: parse(`\n    type Query {\n      user: User!\n    }\n\n    type User {\n      name: String!\n    }\n  `),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Common Router Settings in YAML\nDESCRIPTION: This YAML snippet defines common configuration settings for the Cosmo Router, including the version and log level. It can be customized using Helm's tpl function to reference variables and include templates.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"1\"\nlog_level: \"info\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Feature Flag Preview (Proposal 1)\nDESCRIPTION: This YAML configuration sets up a GitHub Action to create, update, and destroy feature flags and feature subgraphs for pull requests based on a cosmo.yaml configuration file. It includes jobs for creating, updating, and destroying the preview environment.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/previews-using-fetaure-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# feature-flags-preview.yaml\non:\n  pull_request:\n    paths:\n      - 'services/subgraph1/**/*.graphql'\n      - 'services/subgraph2/**/*.graphql'\n    types: [labeled, synchronize, closed, opened, reopened]\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.action == 'opened' || github.event.pull_request.action == 'reopened'\n    steps:\n      # 1. Create & Publish feature subgraph based on cosmo.yaml\n      # 2. Create a new feature flag\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          create: true # Create the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag has been created. You can now provision the subgraph service.\"\n          echo \"Published Feature Subgraphs: ${{ steps.ff.outputs.published_feature_subgraphs }}\"\n\n  # run the job to deploy all the changed subgraphs here.\n\n  update:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'synchronize'\n    steps:\n      - uses: wundergraph/feature-flags@main\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          update: true # Only update the feature subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature subgraph has been updated. You can now update the subgraph service.\"\n          echo \"Published Feature Subgraphs: ${{ steps.ff.outputs.published_feature_subgraphs }}\"\n\n  destroy:\n    if: github.event.pull_request.action == 'closed'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          destroy: true # Only destroy the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag and the feature subgraphs have been destroyed. You can now unprovision the subgraph service.\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Subgraph and Removing All Existing Feature Flags using wgc CLI (Bash)\nDESCRIPTION: This command publishes a new schema for the 'products' subgraph while simultaneously removing *all* previously associated feature flags from it. The `--remove-feature-flags` option ensures that this published version becomes the default, replacing any feature-flagged variants.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish products --schema ../demo/subgraphs/products/products.graphql --routing-url http://localhost:4001/graphql --label=team=A --remove-feature-flags\n```\n\n----------------------------------------\n\nTITLE: Setting up Environment Variables for Cosmo Control Plane\nDESCRIPTION: Instructions for setting up the environment variables file for the Cosmo control plane. This step is crucial for configuring the control plane with the correct values.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/controlplane/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL and WebSocket URLs for GraphiQL in JavaScript\nDESCRIPTION: This code snippet sets up the GraphQL endpoint URL and WebSocket subscription URL for use in GraphiQL. It uses a placeholder for the GraphQL URL and dynamically constructs the WebSocket URL based on the current protocol and host.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/internal/graphiql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst url = '{{graphqlURL}}';\nconst subscriptionUrl = window.location.protocol.replace('http', 'ws') + '//' + window.location.host + url;\n```\n\n----------------------------------------\n\nTITLE: Seeding the First Organization in Cosmo Control Plane\nDESCRIPTION: Commands to run the control plane, trigger migrations, and seed the first organization. This process creates an initial user account for the Cosmo platform.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/controlplane/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Run the controlplane and trigger migrations\npnpm dev\n# Seed the first organization\npnpm seed\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Flags with Graph-Specific Labels\nDESCRIPTION: Example of limiting a feature flag to specific federated graphs using label matching patterns.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nwgc federated-graph create production --label-matcher env=staging --routing-url https://graph.domain.com/graphql\nwgc ff create users-v2 --label env=staging --routing-url https://users-v2.domain.com\nwgc ff publish users-v2 --schema ./subgraph-users-v2/schema.graphql\n```\n\n----------------------------------------\n\nTITLE: Integrating Cosmo Playground in React Component\nDESCRIPTION: Example of how to import and use the Playground component in a React application. It demonstrates the available props for customization.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/playground/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Playground} from \"@wundergraph/playground\"\nimport \"@wundergraph/playground/style.css\"\n\nexport const YourComponent {\n    return (\n        <Playground \n            routingUrl={} // the endpoint of the router\n            hideLogo={} // boolean to hide the wundergraph logo\n            theme={} // 'light' or 'dark';\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Subgraph and Removing All Feature Flags after Testing (Bash)\nDESCRIPTION: This command publishes the 'products' subgraph schema to the main endpoint (port 4001) and uses `--remove-feature-flags` to make this version the default, effectively promoting the previously experimental feature (tested via the 'experimental' flag) to general availability in the staging environment.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish products --schema ../demo/subgraphs/products/products.graphql --routing-url http://localhost:4001/graphql --label=team=A --remove-feature-flags\n```\n\n----------------------------------------\n\nTITLE: Deploying Cosmo Router in HTTP Mode with Terraform\nDESCRIPTION: This snippet demonstrates how to use the Terraform module to deploy Cosmo Router in HTTP mode on AWS Fargate. It specifies the module source, name, release version, configuration file path, and secret ARN.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/infrastructure/router/modules/aws-fargate/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"cosmo\" {\n  source = \"git::https://github.com/wundergraph/cosmo.git//infrastructure/router/modules/aws-fargate?ref=router@0.72.0\"\n\n  name = \"cosmo-router\"\n  release = \"0.72.0\"\n  config_file_path = \"${path.module}/config.yaml\"\n\n  secret_arn = \"<the-arn-to-your-secret>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing Subgraphs for Feature Flag Testing\nDESCRIPTION: Commands for creating and publishing the initial posts and users subgraphs that will be used as the foundation for feature flag testing.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwgc subgraph create posts --label team=A --routing-url https://posts.domain.com\nwgc subgraph publish posts --schema ./subgraph-posts/schema.graphql\n```\n\nLANGUAGE: shell\nCODE:\n```\nwgc subgraph create users --label team=B --routing-url https://users.domain.com\nwgc subgraph publish users --schema ./subgraph-users/schema.graphql\n```\n\nLANGUAGE: shell\nCODE:\n```\nwgc federated-graph create production --label-matcher team=A,team=B --routing-url https://graph.domain.com/graphql\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Flags and Feature Flag Groups\nDESCRIPTION: Commands for cleaning up by deleting both feature flag groups and individual feature flags.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwgc ffg delete v2\nwgc ff delete users-v2\nwgc ff delete posts-v2\n```\n\n----------------------------------------\n\nTITLE: Publishing an Experimental Subgraph with Disabled Composition Checks using wgc CLI (Bash)\nDESCRIPTION: This command publishes the 'products' subgraph schema under an 'experimental' feature flag, targeting a separate deployment (port 4002). It uses `--disable-composition-checks` because the feature is experimental and might temporarily break compatibility in the staging environment without affecting other developers. This allows isolated testing of potentially breaking changes.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish products --schema ../demo/subgraphs/products/products.graphql --routing-url http://localhost:4002/graphql --label=team=A --feature-flag=experimental --disable-composition-checks\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmo Router Module in Terraform - HCL\nDESCRIPTION: This snippet shows how to declare and configure the Cosmo Router module in Terraform using HCL syntax. Required dependencies include enabled Google APIs (cloudrun, iam, secretmanager) and a manually provisioned secret with a GRAPH_API_TOKEN key. Key parameters such as source, name, config_file_path, region, secret_name, and project must be provided, where config_file_path points to the router's YAML configuration. The output of this module is a deployed Cosmo Router service on Google Cloud Run. Ensure to replace placeholder values before use.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/infrastructure/router/modules/google-cloudrun/README.md#2025-04-23_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"cosmo\" {\n  source = \"git::https://github.com/wundergraph/cosmo.git//infrastructure/router/modules/google-cloudrun?ref=router@<release>\"\n  name             = \"<name>\"\n  config_file_path = \"${path.module}/config.yaml\"\n  region           = \"<gcp-region>\"\n  secret_name      = \"<secret name created above>\"\n  project          = \"<project_id of the gcp project>\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URLs in Kubernetes Using Helm Templates\nDESCRIPTION: This snippet is a Helm template that generates shell commands for accessing an application based on the service type configured. It handles four different Kubernetes service configurations: Ingress, NodePort, LoadBalancer, and ClusterIP, providing the appropriate URL retrieval commands for each type.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/otelcollector/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n1. Get the application URL by running these commands:\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"otelcollector.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"otelcollector.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"otelcollector.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"otelcollector.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Generating Application Access URL/Commands based on Kubernetes Service Type (Helm/Shell)\nDESCRIPTION: This Helm template snippet dynamically determines how to access the deployed application. If Ingress is enabled, it constructs URLs based on '.Values.ingress.hosts' and '.Values.ingress.tls'. If NodePort or LoadBalancer service types are used, it generates 'kubectl' commands to retrieve the necessary IP/port and prints the URL. If ClusterIP is used, it sets up 'kubectl port-forward' and provides a localhost URL. It relies on Helm values like '.Values.ingress', '.Values.service.type', '.Values.service.port' and Kubernetes cluster information.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/graphqlmetrics/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"graphqlmetrics.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"graphqlmetrics.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"graphqlmetrics.fullname\" . }} --template \"{{\\\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\\\"}}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"graphqlmetrics.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running k6 Benchmark\nDESCRIPTION: Commands to install k6 using Homebrew and run a benchmark script against the router. This helps in assessing the router's performance under load.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/docs/Profiling.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbrew install k6\nk6 run bench.js\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing PostgreSQL Migrations\nDESCRIPTION: Commands for generating new PostgreSQL migrations using DrizzleORM, including creating migrations from schema changes, custom migrations, and dropping the last migration.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Create a new migration from the current schema changes\npnpm db:generate\n# Create a custom migration e.g. for data migration\npnpm db:custom\n# (Important) Use this command to delete the last migration\npnpm db:drop\n```\n\n----------------------------------------\n\nTITLE: Starting Cosmo Router Service\nDESCRIPTION: Shell command to install dependencies, compose the federated schema, and start the Cosmo Router\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/router-simple/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./start.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Federated Graph with Admission Webhook\nDESCRIPTION: Command to create a federated graph with admission webhook URL and label matcher configurations using the wgc CLI.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/admission-server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwgc federated-graph create mygraph -r http://127.0.0.1:3001/graphql --admission-webhook-url http://localhost:3009 --label-matcher=team=A,team=B\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags via Extensions Field - GraphQL and JSON\nDESCRIPTION: Demonstrates how to include feature flag settings directly inside the extensions field of a GraphQL request. The snippet shows a typical GraphQL query for products alongside a JSON object representing the extensions field, which sets the 'products.experimental' flag to true. This approach requires client and server support for interpreting feature flags within extensions, and it allows per-request feature toggling without relying on headers or cookies.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_12\n\nLANGUAGE: GraphQL\nCODE:\n```\nquery {\n  products {\n    id\n    name\n  }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"extensions\": {\n    \"featureFlags\": {\n      \"products.experimental\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Feature Flag Introspection Query (JSON)\nDESCRIPTION: This JSON object shows an example response to the `__features` query. It indicates one available feature flag named 'experimental' for the 'products' subgraph, along with its description.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"__features\": [\n    {\n      \"name\": \"experimental\",\n      \"subgraph\": \"products\",\n      \"description\": \"Enables the experimental feature for the products Subgraph\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Redis Configuration Settings\nDESCRIPTION: Specifies common configuration directives for the Redis instance. This multi-line string enables Append Only File (AOF) persistence, configures RDB backups (save every 24 hours if at least 1 key changed), disables key eviction (noeviction policy), and sets a maximum memory limit of 100mb.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_15\n\nLANGUAGE: redis\nCODE:\n```\n\"# Enable AOF https://redis.io/topics/persistence#append-only-file\\nappendonly yes\\n# Enable RDB persistence (backup every 24h)\\nsave \\\"86400 1\\\"\\n# Disable maxmemory-policy https://redis.io/topics/lru-cache#eviction-policies\\nmaxmemory-policy noeviction\\n# Set maxmemory to 100mb\\nmaxmemory 100mb\"\n```\n\n----------------------------------------\n\nTITLE: Making a cURL Request to Cosmo Control Plane API\nDESCRIPTION: Example of how to make a cURL request to the Cosmo control plane API using the ElizaService. This demonstrates the usage of the Connect framework for API communication.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/controlplane/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n    --header 'Content-Type: application/json' \\\n    --data '{\"sentence\": \"I feel happy.\"}' \\\n    http://localhost:3001/wg.cosmo.controlplane.admin.v1.ElizaService/Say\n\n{\"sentence\":\"You said: I feel happy.\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Feature Flags in router.yaml (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to explicitly enable the feature flag functionality within the WunderGraph Cosmo Router via the `router.yaml` file. Setting `enabled` to `true` allows the router to process and respect feature flags passed in requests. By default, feature flags are enabled.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfeatureFlags:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Injecting Secret Token into Cosmo Router Configuration - YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the Cosmo Router's token with an environment-injected secret for authentication with the WunderGraph Cloud control plane. The token field must be set to '${GRAPH_API_TOKEN}', which the deployment process replaces with the actual secret stored in Google Cloud Secret Manager. This setting is mandatory for proper operation; omitting it prevents the router from authenticating with the control plane.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/infrastructure/router/modules/google-cloudrun/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngraph:\n  # Leave this definition as is. The variable will be substituted when the container starts.\n  token: ${GRAPH_API_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cosmo CDN with Hono for Cloudflare Workers\nDESCRIPTION: Example code showing how to initialize and configure the Cosmo CDN module with Hono framework in a Cloudflare Workers environment. The setup includes CORS middleware and requires authJwtSecret and blobStorage implementation.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cdn-server/cdn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cors } from \"hono/cors\";\nimport { Context, Hono } from \"hono\";\n// Your bindings\nimport { Bindings } from \"./bindings\";\nimport { cdn } from \"@wundergraph/cosmo-cdn\";\n\nconst app = new Hono<{ Bindings: Bindings }>();\n\napp.use(\"*\", cors());\n\ncdn(app, {\n    authJwtSecret,\n    blobStorage, // Your BlobStorage implementation\n});\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmo Router YAML with Graph API Token\nDESCRIPTION: This YAML snippet shows the necessary configuration for the Cosmo Router to communicate with the Cosmo Control Plane. It demonstrates how to reference the GRAPH_API_TOKEN environment variable in the config file.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/infrastructure/router/modules/aws-fargate/readme.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngraph:\n  # Leave this definition as is. The variable will be substituted when the container starts.\n  token: ${GRAPH_API_TOKEN}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Schema in JSON for Cosmo Router\nDESCRIPTION: Shows the corresponding JSON schema definition in `pkg/config/config.schema.json` for the 'your_feature' configuration added in the Go code. It defines the structure as an object with `enabled` (boolean) and `timeout` (string) properties, including descriptions and default values, ensuring `additionalProperties` is false to prevent unknown fields.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/docs/Configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"properties\": {\n    \"your_feature\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"description\": \"Configuration for your feature\",\n      \"properties\": {\n        \"enabled\": {\n          \"type\": \"boolean\",\n          \"description\": \"Enable your feature\",\n          \"default\": false\n        },\n        \"timeout\": {\n          \"type\": \"string\",\n          \"description\": \"Timeout for your feature. Specified as a string with a duration unit (e.g. '30s')\",\n          \"default\": \"30s\"\n        }\n      }\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Cosmo Router in HTTPS Mode with Terraform\nDESCRIPTION: This snippet shows how to use the Terraform module to deploy Cosmo Router in HTTPS mode on AWS Fargate. It includes TLS configuration, subdomain, hosted zone name, and secret ARN.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/infrastructure/router/modules/aws-fargate/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"cosmo\" {\n  source = \"git::https://github.com/wundergraph/cosmo.git//infrastructure/router/modules/aws-fargate\"\n\n  name = \"cosmo-router\"\n  config_file_path = \"${path.module}/config.yaml\"\n\n  enable_tls = true\n  subdomain = \"router\"\n  hosted_zone_name = \"your-domain.com\"\n\n  secret_arn = \"<the-arn-to-your-secret>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Router in Cosmo Project\nDESCRIPTION: This command executes the integration tests for the router with race detection enabled and verbose output. It may take some time to complete all tests.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router-tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race -v ./...\n```\n\n----------------------------------------\n\nTITLE: Creating Group Feature Flags with Regular Expressions\nDESCRIPTION: Example of using regular expressions to match multiple feature flags when creating a group feature flag.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nwgc ffg create v2 --label team=A --flags *-v2\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Environment Variables for Cosmo Demo Service\nDESCRIPTION: Defines the environment variables used to configure OpenTelemetry for the Cosmo demo service. It specifies the OTEL collector endpoint and authentication token.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/demo/cmd/employees/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `OTEL_HTTP_ENDPOINT`: Sets the endpoint for the OTEL collector. If empty, it defaults to `localhost:4318`.\n- `OTEL_AUTH_TOKEN`: Sets the token used to authenticate with the OTEL collector.\n```\n\n----------------------------------------\n\nTITLE: Running Router with pprof in Go\nDESCRIPTION: Command to start the router with pprof enabled on port 6060. This allows for performance profiling and analysis.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/docs/Profiling.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run cmd/router/main.go -pprof-addr=\":6060\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PR Event-Based Preview Workflow in GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration that creates, updates, and destroys feature flags and subgraphs based on pull request events. Handles PR opened, reopened, synchronized, and closed events.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/previews-using-feature-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    paths:\n      - 'services/subgraph1/**/*.graphql'\n      - 'services/subgraph2/**/*.graphql'\n    types: [labeled, synchronize, closed, opened, reopened]\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.action == 'opened' || github.event.pull_request.action == 'reopened'\n    steps:\n      # 1. Create & Publish feature subgraph based on cosmo.yaml\n      # 2. Create a new feature flag\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          create: true # Create the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag has been created. You can now provision the subgraph service.\"\n          echo \"Published Feature Subgraphs: ${{ steps.ff.outputs.published_feature_subgraphs }}\"\n\n  # run the job to deploy all the changed subgraphs here.\n\n  update:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'synchronize'\n    steps:\n      - uses: wundergraph/feature-flags@main\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          update: true # Only update the feature subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature subgraph has been updated. You can now update the subgraph service.\"\n          echo \"Published Feature Subgraphs: ${{ steps.ff.outputs.published_feature_subgraphs }}\"\n\n  destroy:\n    if: github.event.pull_request.action == 'closed'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          destroy: true # Only destroy the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag and the feature subgraphs have been destroyed. You can now unprovision the subgraph service.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Flag Group in Bash\nDESCRIPTION: This command creates a feature flag group named 'myGroupFlag' that combines 'myFlag' and 'myFlag2' using the wgc CLI tool.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags-v2.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwgc ff group myGroupFlag --flags myFlag,myFlag2\n```\n\n----------------------------------------\n\nTITLE: Router Configuration\nDESCRIPTION: YAML configuration for setting up the Cosmo router with API token.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/DEV.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrouter:\n  configuration:\n    graphApiToken: '<changeme>'\n```\n\n----------------------------------------\n\nTITLE: Generating Access Instructions with Helm Template for Kubernetes Service\nDESCRIPTION: This Helm template snippet dynamically generates instructions for accessing a deployed Kubernetes application. It checks `.Values.ingress.enabled` and `.Values.service.type` to determine the service exposure method. If Ingress is enabled, it prints the host URLs. If NodePort is used, it provides commands to get the Node IP and NodePort. If LoadBalancer is used, it provides commands to get the service IP. If ClusterIP is used, it sets up port-forwarding using `kubectl port-forward`. Helm functions like `contains` and `include` are used alongside `kubectl` commands embedded within the template.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/controlplane/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"controlplane.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"controlplane.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"controlplane.fullname\" . }} --template \"{{\\\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\\\"}}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"controlplane.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Running the Custom JWT Module Example in Go (Bash)\nDESCRIPTION: This command executes the main Go program for the custom JWT re-signing module example located within the `./cmd/custom-jwt/` directory. It requires a properly configured `.env` file (copied and adjusted from `.env.example`) to be present before execution. The command assumes it's run from the root of the router directory.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/cmd/custom-jwt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/custom-jwt/main.go\n```\n\n----------------------------------------\n\nTITLE: Initializing Keycloak Database via PostgreSQL Script\nDESCRIPTION: This SQL script is executed during the initialization of the primary PostgreSQL database. Its purpose is to create the dedicated database named `keycloak` required by the Keycloak service.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n\"-- Create the database for Keycloak\\nCREATE DATABASE \\\"keycloak\\\";\\n\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Grafana Plugins in Docker Compose YAML\nDESCRIPTION: This snippet demonstrates how to specify additional Grafana plugins using the GF_INSTALL_PLUGINS environment variable in the docker-compose.yml file. It shows how to list plugin IDs separated by commas.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nGF_INSTALL_PLUGINS: \"grafana-clock-panel,grafana-piechart-panel\"\n```\n\n----------------------------------------\n\nTITLE: S3 Configuration Values in YAML\nDESCRIPTION: Configuration values for connecting to an S3-compatible storage backend, including endpoint settings, authentication, and path style options.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/cdn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration.s3AccessKeyId: \"\"\nconfigurations.s3SecretAccessKey: \"\"\nconfiguration.s3Endpoint: \"\"\nconfiguration.s3ForcePathStyle: \"true\"\nconfiguration.s3Region: \"auto\"\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Arguments for Keycloak Startup\nDESCRIPTION: Defines additional command-line arguments passed to the Keycloak server process on startup. In this case, it enables realm import (`--import-realm`) and optimized startup (`--optimized`). This is configured via an environment variable `KEYCLOAK_EXTRA_ARGS`.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"`--import-realm --optimized`\"\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server after setting up environment variables from .env.example file.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Installing Cosmo Helm Chart via OCI Registry (Shell)\nDESCRIPTION: This command uses Helm 3 to install the Cosmo platform chart named 'cosmo' from the OCI registry located at 'ghcr.io/wundergraph/cosmo/helm-charts/cosmo'. It specifically installs version '0.13.0' of the chart. Requires Helm 3.2.0+ to be installed and configured for the target Kubernetes cluster.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-helm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install cosmo oci://ghcr.io/wundergraph/cosmo/helm-charts/cosmo --version 0.13.0\n```\n\n----------------------------------------\n\nTITLE: Configuring k14s Change Group Annotation for Keycloak\nDESCRIPTION: Sets a kapp (k14s.io) annotation on Keycloak pods to define a change group. This helps coordinate deployments managed by kapp, grouping Keycloak resources under `cosmo.apps.keycloak.wundergraph.com/deployment`.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n\"cosmo.apps.keycloak.wundergraph.com/deployment\"\n```\n\n----------------------------------------\n\nTITLE: Building Custom Cosmo Router Executable\nDESCRIPTION: This bash command builds the custom Cosmo Router into an executable named 'router'. It compiles the main.go file located in the cmd/custom directory.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/cmd/custom/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o router ./cmd/custom/main.go\n```\n\n----------------------------------------\n\nTITLE: Configuring Billing Plans in JSON\nDESCRIPTION: Example JSON configuration for a billing plan, including plan details, pricing, features, and limits.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/billing.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plans\": {\n    \"launch@1\": {\n      \"name\": \"Launch\",\n      \"price\": 499,\n      \"active\": true,\n      \"stripePriceId\": \"price_1OOfANKHknvMloVzGQsIPwBP\",\n      \"weight\": 1,\n      \"features\": [\n        { \"id\": \"router\", \"description\": \"Self-Hosted Router\" },\n        { \"id\": \"users\", \"description\": \"10 Users\", \"limit\": 10 },\n        { \"id\": \"federated-graphs\", \"description\": \"2 Federated Graphs\", \"limit\": 2 },\n        { \"id\": \"requests\", \"description\": \"Up to 100M Requests per month\", \"limit\": 100 },\n        { \"id\": \"support\", \"description\": \"Email Support\" },\n        { \"id\": \"analytics-retention\", \"limit\": 7 },\n        { \"id\": \"tracing-retention\", \"limit\": 7 },\n        { \"id\": \"changelog-retention\", \"limit\": 7 },\n        { \"id\": \"breaking-change-retention\", \"limit\": 7 },\n        { \"id\": \"trace-sampling-rate\", \"limit\": 0.1 }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ClickHouse Database Schema (Bash)\nDESCRIPTION: This Bash script is intended to run during ClickHouse initialization. It uses the `clickhouse-client` to connect to the database using admin credentials provided via environment variables (`CLICKHOUSE_ADMIN_USER`, `CLICKHOUSE_ADMIN_PASSWORD`) and executes a SQL command to create the 'cosmo' database if it doesn't already exist. The `set -e` command ensures the script exits immediately if any command fails.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\\nset -e\\nclickhouse-client --user $CLICKHOUSE_ADMIN_USER --password $CLICKHOUSE_ADMIN_PASSWORD -n <<-EOSQL\\n  CREATE DATABASE IF NOT EXISTS cosmo;\\nEOSQL\\n\n```\n\n----------------------------------------\n\nTITLE: Running WunderGraph Cosmo CLI in Development Mode\nDESCRIPTION: This command demonstrates how to run the WunderGraph Cosmo CLI (wgc) in development mode using pnpm. It allows testing local changes directly by passing commands after 'wgc'.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cli/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm wgc ...\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code\nDESCRIPTION: Command to regenerate Go code in the repository root. Code is typically committed but can be regenerated as needed.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake generate-go\n```\n\n----------------------------------------\n\nTITLE: Capturing CPU Profile\nDESCRIPTION: Commands to capture CPU profile data and view it in the browser-based interface\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/demo/cmd/benchmarksubscriptions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:6060/debug/pprof/profile > profile.out && go tool pprof -http 127.0.0.1:8085 profile.out\n```\n\n----------------------------------------\n\nTITLE: Installing Cosmo Helm Chart Dependencies\nDESCRIPTION: Commands to add Bitnami repository and install Helm dependencies for the Cosmo stack deployment.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/DEV.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Add bitnami repo to install dependencies like postgresql, keycloak and clickhouse\nhelm repo add bitnami https://charts.bitnami.com/bitnami\n# Install the helm dependencies\nhelm dependency build\n# Install the helm chart with the release name \"cosmo\" in the default namespace, the name is important it used to reference services in values file.\n# --atomic ensures that the release is rolled back if it fails to install\nhelm install cosmo --atomic -f values.yaml .\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Flag and Subgraph in GitHub Actions (YAML)\nDESCRIPTION: This job, named 'create', runs on Ubuntu when a pull request is opened or reopened. It uses the 'wundergraph/feature-flags' action to create a new feature flag (named dynamically using the PR number) and publish a corresponding feature subgraph based on the schema found at 'my-project/my-subgraph/subgraph1.graphql'. The 'create: true' parameter indicates the creation intent. A subsequent step echoes a confirmation message.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/previews-using-fetaure-flags.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  create:\n    runs-on: ubuntu-latest\n    if: github.event.pull_request.action == 'opened' || github.event.pull_request.action == 'reopened'\n    steps:\n      # 1. Create & Publish feature subgraph based on cosmo.yaml\n      # 2. Create a new feature flag\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          namespace: \"production\"\n          feature_flag_name: \"my-feature-flag-{PR_NUMBER}\"\n          feature_flag_labels: \"my-feature-flag-label\" # comma separated\n          subgraph_name: \"subgraph1\"\n          subgraph_schema: \"my-project/my-subgraph/subgraph1.graphql\"\n          subgraph_routing_url: \"http://mycompany-subgraph1-{PR_NUMBER}.com/graphql\" \n          create: true # Create the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag has been created. You can now provision the subgraph service.\"\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Feature Flags and Groups via CLI (Shell)\nDESCRIPTION: These commands demonstrate how to enable or disable specific feature flags (`ff`) and feature flag groups (`ffg`) using the WunderGraph Cosmo CLI (`wgc`). Enabling or disabling a flag/group triggers schema composition and updates the router engine configuration accordingly, allowing temporary activation or deactivation without deleting the flag definition.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nwgc ff enable users-v2\nwgc ff disable users-v2\nwgc ffg enable v2\nwgc ffg disable v2\n```\n\n----------------------------------------\n\nTITLE: Analyzing Heap Memory Usage\nDESCRIPTION: Commands to analyze heap memory usage, both current in-use space and total allocation space\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/demo/cmd/benchmarksubscriptions/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof -inuse_space http://localhost:6060/debug/pprof/heap\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof -alloc_space http://localhost:6060/debug/pprof/heap\n```\n\n----------------------------------------\n\nTITLE: Starting Cosmo Platform with Shell Script\nDESCRIPTION: This command runs a shell script to start the Cosmo platform using Docker Compose.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-docker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./start.sh\n```\n\n----------------------------------------\n\nTITLE: Destroying Feature Flag and Subgraph in GitHub Actions (YAML)\nDESCRIPTION: This job, named 'destroy', runs on Ubuntu when a pull request is closed. It utilizes the 'wundergraph/feature-flags' action to destroy the feature flag (identified by 'my-feature-flag-{PR_NUMBER}') and its associated feature subgraph ('subgraph1') within the 'production' namespace. The 'destroy: true' parameter triggers the cleanup operation. A confirmation message follows.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/previews-using-fetaure-flags.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  destroy:\n    if: github.event.pull_request.action == 'closed'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          namespace: \"production\"\n          feature_flag_name: \"my-feature-flag-{PR_NUMBER}\"\n          subgraph_name: \"subgraph1\"\n          destroy: true # Only destroy the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag has been destroyed. You can now unprovision the subgraph service.\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Router Service to Fly.io\nDESCRIPTION: Command to deploy the demo router service to fly.io using a specific Docker image version. Must be executed from the repository root.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/demo-router.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfly deploy -a demo-router -c demo-router.fly.toml --image ghcr.io/wundergraph/cosmo/router:0.46.1\n```\n\n----------------------------------------\n\nTITLE: Starting Cosmo Studio Development Server\nDESCRIPTION: Launches the development server for Cosmo Studio using pnpm.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/studio/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Flag Group in Bash\nDESCRIPTION: This command deletes a feature flag group named 'myGroupFlag' using the wgc CLI tool.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags-v2.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nwgc ff delete myGroupFlag\n```\n\n----------------------------------------\n\nTITLE: Listing Feature Flags using WunderGraph CLI (Shell)\nDESCRIPTION: This command uses the WunderGraph Cosmo CLI (`wgc`) to list all defined feature flags (FF) and feature flag groups (FFG) for the current federated graph. This is useful for visibility within the CLI or Studio.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nwgc ff list # lists all feature flags and group feature flags\n```\n\n----------------------------------------\n\nTITLE: Building Cosmo Playground for Router Integration\nDESCRIPTION: Command to build the Playground as a single HTML file for integration into the router. This updates the graphiql.html file in the router's internal directory.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/playground/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build:router\n```\n\n----------------------------------------\n\nTITLE: Defining Common Labels for Router Resources\nDESCRIPTION: Specifies a set of common labels to be applied to all resources deployed as part of the Router component. This is represented as an empty JSON object by default, meaning no common labels are added initially.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Executing Demo Setup Script for Federated Graph and Router (Bash)\nDESCRIPTION: This command executes a shell script named 'create_demo.sh' located in the current directory. The script is responsible for setting up a demonstration federated graph composed of multiple subgraphs and deploying the Cosmo router within the Minikube cluster established in previous steps. Requires the 'create_demo.sh' script to be present and executable.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-helm/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./create_demo.sh\n```\n\n----------------------------------------\n\nTITLE: Uninstalling the Cosmo Helm Release (Bash)\nDESCRIPTION: This command uses Helm to uninstall the release named 'cosmo'. It removes the Kubernetes resources created by the Helm chart installation, effectively cleaning up the Cosmo platform deployment. Note that persistent volumes might require separate manual deletion. Requires Helm installed.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-helm/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall cosmo\n```\n\n----------------------------------------\n\nTITLE: Building Proto Files for Cosmo Connect\nDESCRIPTION: Command to transpile protocol buffer files into JavaScript files using pnpm build system.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/connect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Lambda ZIP Archive Structure\nDESCRIPTION: Example of the required file structure for the Lambda deployment package showing the bootstrap binary and router configuration file.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/aws-lambda-router/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.\n└── myFunction.zip/\n    ├── bootstrap # Extracted from the Router release archive\n    └── router.json # Downloaded with `wgc router fetch`\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Feature Flags and Feature Flag Groups\nDESCRIPTION: Commands for creating additional feature flags and a feature flag group that combines multiple feature flags.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwgc ff create posts-v2 --label team=A --routing-url https://posts-v2.domain.com --subgraph posts\nwgc ff publish posts-v2 --schema ./subgraph-posts-v2/schema.graphql\n```\n\nLANGUAGE: shell\nCODE:\n```\nwgc feature-flag-group create v2 --label team=A --flags users-v2,posts-v2\n# alias: wgc ffg create\n```\n\n----------------------------------------\n\nTITLE: Manually Deleting Persistent Volume Claims for Cosmo (Bash)\nDESCRIPTION: This command uses 'kubectl' to delete Persistent Volume Claims (PVCs) that have the label 'app.kubernetes.io/instance=cosmo'. This is necessary for complete cleanup as 'helm uninstall' may not automatically remove PVCs, leaving persistent data behind. Requires 'kubectl' installed and configured.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-helm/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl delete pvc -l app.kubernetes.io/instance=cosmo\n```\n\n----------------------------------------\n\nTITLE: Enabling Helm Tests Configuration\nDESCRIPTION: YAML configuration to enable Helm tests for the Cosmo stack.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/DEV.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  helmTests:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Running Apollo JS Tests\nDESCRIPTION: This command executes the test suite for the Apollo JS project using pnpm.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/client-tests/apollo-js/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Running Cosmo Control Plane in Development Mode\nDESCRIPTION: Command to run the Cosmo control plane in watch mode for development purposes. This allows for real-time updates as you modify the code.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/controlplane/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Mount Path for Keycloak Realm Configuration\nDESCRIPTION: Defines the target path within the Keycloak container where the realm configuration file (`realm.json`) should be mounted. This path is used by Keycloak to find the realm data for import.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/opt/bitnami/keycloak/data/import/realm.json\"\n```\n\n----------------------------------------\n\nTITLE: Generating Updated Apollo iOS Client Code\nDESCRIPTION: Command to generate updated client code after making changes to the schema or operations using the Apollo iOS CLI.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/client-tests/apollo-swift/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./apollo-ios-cli generate\n```\n\n----------------------------------------\n\nTITLE: Creating and Publishing Feature Flags for Subgraphs\nDESCRIPTION: Commands for creating and publishing feature flags that replace existing subgraphs, including a one-step alternative method.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/graph-feature-flags.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwgc feature-flag create users-v2 --label team=B --routing-url https://users-v2.domain.com --subgraph users\n# alias: wgc ff create\nwgc feature-flag publish users-v2 --schema ./subgraph-users-v2/schema.graphql\n# alias: wgc ff publish\n```\n\nLANGUAGE: shell\nCODE:\n```\nwgc ff publish users-v2 --label team=B --routing-url https://users-v2.domain.com --schema ./subgraph-users-v2/schema.graphql --subgraph users\n```\n\n----------------------------------------\n\nTITLE: Deploying Helm Chart\nDESCRIPTION: Command to deploy the Helm chart using make deploy.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Production Deployment Command\nDESCRIPTION: Command to package and deploy the application to AWS using the SAM CLI.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/aws-lambda-router/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake deploy\n```\n\n----------------------------------------\n\nTITLE: Running Apollo Swift Tests for iOS\nDESCRIPTION: Command to execute the Swift tests for the Apollo iOS client.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/client-tests/apollo-swift/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift test\n```\n\n----------------------------------------\n\nTITLE: Creating ClickHouse Migrations\nDESCRIPTION: Command for creating new ClickHouse migrations using dbmate with a custom name parameter.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/migrations.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Create a new migration\npnpm ch:new-migration foo\n```\n\n----------------------------------------\n\nTITLE: Development Code Sync Command\nDESCRIPTION: Command to upload code changes to AWS without performing a CloudFormation deployment, useful for development iterations.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/aws-lambda-router/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake sync\n```\n\n----------------------------------------\n\nTITLE: Generating Apollo Sources for GraphQL in Kotlin\nDESCRIPTION: This Gradle command generates Apollo sources based on the GraphQL files in the project. It should be run after adding new GraphQL operations or updating existing ones.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/client-tests/apollo-kotlin/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew generateApolloSources\n```\n\n----------------------------------------\n\nTITLE: Running CPU Profile with pprof in Go\nDESCRIPTION: Command to run a CPU profile for a specified duration (5 seconds in this example) using pprof. This helps in identifying CPU-intensive operations in the router.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/docs/Profiling.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof 'http://localhost:6060/debug/pprof/profile?seconds=5'\n```\n\n----------------------------------------\n\nTITLE: Applying Development Migrations\nDESCRIPTION: Command to apply all migrations in the development environment from the repository root.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/migrations.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake migrate\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for Custom Cosmo Router\nDESCRIPTION: This bash command builds a Docker image for the custom Cosmo Router. It uses a custom Dockerfile named 'custom.Dockerfile' and tags the image as 'router-custom:latest'.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/cmd/custom/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f custom.Dockerfile -t router-custom:latest .\n```\n\n----------------------------------------\n\nTITLE: Running Cosmo Router with Profiling\nDESCRIPTION: Command to start the router in profiling mode using environment configuration for benchmarking\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/demo/cmd/benchmarksubscriptions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo run -tags=pprof cmd/router/main.go -override-env=.env.bench\n```\n\n----------------------------------------\n\nTITLE: Creating New Migration for GraphQLMetrics in Bash\nDESCRIPTION: This command creates a new migration for the GraphQLMetrics service using the dbmate tool. It requires specifying a migration name as an argument.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/graphqlmetrics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake new-migration <migration_name>\n```\n\n----------------------------------------\n\nTITLE: Querying for Available Feature Flags using GraphQL (GraphQL)\nDESCRIPTION: This GraphQL query retrieves the list of available feature flags by querying the proposed `__features` field. It requests the name, associated subgraph, and description for each available feature flag.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  __features {\n    name\n    subgraph\n    description\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Dependencies\nDESCRIPTION: Commands to add Bitnami repository and build helm dependencies for Cosmo installation.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo add bitnami https://charts.bitnami.com/bitnami && \\\nhelm dependency build ./cosmo\n```\n\n----------------------------------------\n\nTITLE: Analyzing Heap Memory with pprof in Go\nDESCRIPTION: Commands to analyze heap memory usage using pprof. These commands allow for interactive exploration of memory allocation patterns and hotspots.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/docs/Profiling.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo tool pprof http://localhost:6060/debug/pprof/heap\n# or\ngo tool pprof -http 127.0.0.1:6060 heap.out\n```\n\n----------------------------------------\n\nTITLE: Building OpenTelemetry Collector with Docker Compose\nDESCRIPTION: Command to build the custom OpenTelemetry Collector using Docker Compose from the root of the repository.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/otelcollector/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker-compose.yml build otelcollector --no-cache\n```\n\n----------------------------------------\n\nTITLE: Updating Feature Subgraph in GitHub Actions (YAML)\nDESCRIPTION: This job, named 'update', runs on Ubuntu when a pull request is synchronized (new commits are pushed). It uses the 'wundergraph/feature-flags' action to update the feature subgraph ('subgraph1') associated with the feature flag, using the schema from 'my-project/my-subgraph/subgraph1.graphql'. The 'update: true' parameter signifies that only the feature subgraph should be updated. A confirmation message is echoed afterwards.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/previews-using-fetaure-flags.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n  update:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'synchronize'\n    steps:\n      - uses: wundergraph/feature-flags@main\n        with:\n          namespace: \"production\"\n          subgraph_name: \"subgraph1\"\n          subgraph_schema: \"my-project/my-subgraph/subgraph1.graphql\"\n          update: true # Only update the feature subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature subgraph has been updated. You can now update the subgraph service.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Cosmo Studio\nDESCRIPTION: Sets up the environment variables for the Cosmo Studio by copying the example file and replacing placeholder values.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/studio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv .env.local.example .env.local\n```\n\n----------------------------------------\n\nTITLE: Running Custom Cosmo Router with Go\nDESCRIPTION: This bash command runs the custom Cosmo Router using Go. It executes the main.go file located in the cmd/custom directory.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/cmd/custom/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./cmd/custom/main.go\n```\n\n----------------------------------------\n\nTITLE: Publishing Additional Subgraph Schema in Bash\nDESCRIPTION: This command publishes a base subgraph schema for the 'users' subgraph using the wgc CLI tool. It specifies the schema file and routing URL for the subgraph.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags-v2.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish users --schema ./users.graphql --routing-url http://localhost:4003/graphql\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server\nDESCRIPTION: Command to start the CDN server in production mode after building.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cdn-server/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Admission Server\nDESCRIPTION: Commands to install dependencies and start the development server using pnpm package manager.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/admission-server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Publishing Feature Flag Schema in Bash\nDESCRIPTION: This command publishes a feature flag schema named 'myFlag' for the 'products' subgraph. It specifies the routing URL, schema file, mode, subgraph, and supergraph for the feature flag.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags-v2.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwgc ff publish myFlag --routing-url http://localhost:4002/graphql --schema ./productsV2.graphql --mode replace --subgraph products --supergraph myGraph\n```\n\n----------------------------------------\n\nTITLE: Building CDN Server\nDESCRIPTION: Command to compile TypeScript files and clean the dist directory for production deployment.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cdn-server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse DSN for GraphQL Metrics\nDESCRIPTION: Provides the Data Source Name (DSN) string for connecting the GraphQL Metrics component to a ClickHouse database instance. It specifies the protocol, credentials, host, port, database name, and connection parameters like timeout and compression.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"clickhouse://default:changeme@cosmo-clickhouse:9000/cosmo?dial_timeout=15s&compress=lz4\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Feature-Flagged Subgraph and Disabling Composition Checks using wgc CLI (Bash)\nDESCRIPTION: This command publishes the 'products' subgraph schema under the feature flag 'v2' but skips the composition checks against the supergraph matrix using `--disable-composition-checks`. This is useful for experimental features in non-production environments where potential composition failures shouldn't block other development. If the schema doesn't compose initially, publishing fails; if future changes break composition, the flagged subgraph is disabled.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish products --schema ../demo/subgraphs/products/products.graphql --routing-url http://localhost:4001/graphql --label=team=A --feature-flag=v2 --disable-composition-checks\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for CDN Server\nDESCRIPTION: Command to copy the example environment file to create a new .env configuration file.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cdn-server/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmv .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Seed Data for Organization Initialization\nDESCRIPTION: This JSON object defines the initial seed data for creating a new organization within WunderGraph Cosmo. It includes user details, organization identifiers, and an API key. This should be enabled once for seeding and the API key removed afterward.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"apiKey\":\"cosmo_669b576aaadc10ee1ae81d9193425705\",\"enabled\":true,\"firstName\":\"Foo\",\"lastName\":\"Bar\",\"organizationName\":\"WunderGraph\",\"organizationSlug\":\"wundergraph\",\"userEmail\":\"foo@wundergraph.com\",\"userPassword\":\"wunder@123\"}\n```\n\n----------------------------------------\n\nTITLE: Enabling Minikube Ingress\nDESCRIPTION: Command to enable the Ingress addon in Minikube.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nminikube addons enable ingress\n```\n\n----------------------------------------\n\nTITLE: Activating a Feature Flag via Cookie Header using curl (Bash)\nDESCRIPTION: This `curl` command demonstrates how a client can enable a specific feature flag ('products.experimental') by sending a POST request to the GraphQL endpoint (on port 4002) with a `Cookie` header containing `X-WG-Feature-Flag=products.experimental`. This instructs the WunderGraph router to use the schema associated with that feature flag for resolving the query.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:4002/graphql -H \"Content-Type: application/json\" -H \"Cookie: X-WG-Feature-Flag=products.experimental\" --data '{ \"query\": \"{ products { id name } }\" }'\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Cosmo Demo with Shell Script\nDESCRIPTION: This command runs a shell script to clean up and remove the Cosmo platform demo setup.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-docker/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./destroy.sh\n```\n\n----------------------------------------\n\nTITLE: Adjusting Trace Sampling Rate in SQL\nDESCRIPTION: SQL command to set a custom trace sampling rate for a specific organization in the organization_features table.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/billing.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO public.organization_features(\n    organization_id, feature, \"limit\")\n    VALUES ('84b14c63-df43-4ae9-aed9-62fbccbbf9d3', 'trace-sampling-rate', 0.5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux /etc/hosts for Minikube Ingress Access (Text)\nDESCRIPTION: These lines should be added to the '/etc/hosts' file on a Linux system when using Minikube. Replace '192.168.49.2' with the actual IP address obtained from the 'minikube ip' command. This maps the various Cosmo service hostnames to the Minikube IP, allowing local browser access to services exposed via the ingress controller. Requires root privileges to edit the file.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-helm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n192.168.49.2 studio.wundergraph.local\n192.168.49.2 controlplane.wundergraph.local\n192.168.49.2 router.wundergraph.local\n192.168.49.2 keycloak.wundergraph.local\n192.168.49.2 otelcollector.wundergraph.local\n192.168.49.2 graphqlmetrics.wundergraph.local\n192.168.49.2 cdn.wundergraph.local\n```\n\n----------------------------------------\n\nTITLE: Displaying npm Version Badge for @wundergraph/cosmo-shared in Markdown\nDESCRIPTION: This code snippet shows how to embed an npm version badge for the @wundergraph/cosmo-shared package using Markdown syntax. The badge is linked to the package's npm page.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/shared/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![npm version](https://badge.fury.io/js/%40wundergraph%2Fcosmo-shared.svg)](https://badge.fury.io/js/%40wundergraph%2Fcosmo-shared)\n```\n\n----------------------------------------\n\nTITLE: Probe Configuration in YAML\nDESCRIPTION: Health check probe configurations for liveness and readiness checks, including timing parameters and endpoint settings.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/cdn/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprobes.liveness:\n  failureThreshold: 5\n  httpGet:\n    path: \"/health\"\n    port: \"http\"\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 5\nprobes.readiness:\n  failureThreshold: 5\n  httpGet:\n    path: \"/health\"\n    port: \"http\"\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  timeoutSeconds: 3\n```\n\n----------------------------------------\n\nTITLE: Running Apollo JS Tests with Coverage Report\nDESCRIPTION: This command executes the Apollo JS tests and generates a coverage report to show the extent of code tested.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/client-tests/apollo-js/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:coverage\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Feature in SQL\nDESCRIPTION: SQL command to enable a custom feature for a specific organization in the organization_features table.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/billing.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO public.organization_features(\n    organization_id, feature, enabled)\n    VALUES ('84b14c63-df43-4ae9-aed9-62fbccbbf9d3', 'datadog', true);\n```\n\n----------------------------------------\n\nTITLE: Disabling Telemetry for WunderGraph Cosmo CLI\nDESCRIPTION: This command shows how to disable telemetry data collection for the WunderGraph Cosmo CLI by setting the DO_NOT_TRACK environment variable, following the Console Do Not Track standard.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cli/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport DO_NOT_TRACK=1\n```\n\n----------------------------------------\n\nTITLE: S3 Storage Configuration\nDESCRIPTION: YAML configuration for setting up S3 storage with Minio for the Cosmo controlplane.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/DEV.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontrolplane:\n  configuration:\n    s3StorageUrl: 'http://minio:changeme@cosmo-minio:9000/cosmo'\n```\n\n----------------------------------------\n\nTITLE: Forwarding Stripe Webhook Events Locally\nDESCRIPTION: Command to use Stripe CLI for forwarding webhook events to a local development environment.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/billing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstripe listen --forward-to http://localhost:3001/webhook/stripe/events\n```\n\n----------------------------------------\n\nTITLE: Configuring k14s Change Group Annotation for Redis\nDESCRIPTION: Sets a kapp (k14s.io) annotation on Redis resources to define a change group. This helps coordinate deployments managed by kapp, grouping Redis resources under `cosmo.apps.redis.wundergraph.com/deployment`.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n\"cosmo.apps.redis.wundergraph.com/deployment\"\n```\n\n----------------------------------------\n\nTITLE: CLI Environment Setup\nDESCRIPTION: Shell commands for setting up Cosmo CLI environment variables for authentication.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/DEV.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport COSMO_API_KEY=\"cosmo_669b576aaadc10ee1ae81d9193425705\"\nexport COSMO_API_URL=\"http://<your-public-controlplane-url>\"\nnpx wgc -h\n```\n\n----------------------------------------\n\nTITLE: Syncing Billing Configuration to Database\nDESCRIPTION: Command to sync the billing configuration from JSON to the database using the seed-billing script.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/billing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd controlplane && pnpm seed:billing\n\n// or\n\nDATABASE_URL=postgres://... cd controleplane && pnpm seed:billing\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS /etc/hosts for Minikube Tunnel Access (Text)\nDESCRIPTION: These lines should be added to the '/etc/hosts' file on a macOS system when using Minikube with the tunnel enabled. It maps the various Cosmo service hostnames to the loopback address (127.0.0.1). This setup relies on the 'minikube tunnel' command running separately to forward traffic from the local machine to the Minikube ingress controller. Requires root privileges to edit the file.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-helm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1 studio.wundergraph.local\n127.0.0.1 controlplane.wundergraph.local\n127.0.0.1 router.wundergraph.local\n127.0.0.1 keycloak.wundergraph.local\n127.0.0.1 otelcollector.wundergraph.local\n127.0.0.1 graphqlmetrics.wundergraph.local\n127.0.0.1 cdn.wundergraph.local\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmo MCP Server for Cursor (JSON)\nDESCRIPTION: Provides the JSON configuration required in Cursor's settings file (~/.cursor/mcp.json) to register the WunderGraph Cosmo MCP server. It specifies the 'wgc mcp' command, its arguments, and the necessary COSMO_API_KEY environment variable for authentication with the Cosmo Platform. This setup enables Cursor to utilize the MCP tools.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cli/src/commands/mcp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"cosmo\": {\n      \"command\": \"npx wgc\",\n      \"args\": [\"mcp\"],\n      \"env\": {\n        \"COSMO_API_KEY\": \"cosmo_<redacted>\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common Labels for GraphQL Metrics Resources\nDESCRIPTION: Specifies a set of common labels to be applied to all resources deployed as part of the GraphQL Metrics component. This is represented as an empty JSON object by default, meaning no common labels are added initially.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Default Cosmo Studio Login Credentials (Text)\nDESCRIPTION: Provides the default username and password required to log into the Cosmo Studio web interface after the deployment and demo setup are complete. Access the Studio via the configured hostname (e.g., http://studio.wundergraph.local) and use these credentials.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/examples/full-cosmo-helm/README.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nUsername: foo@wundergraph.com\nPassword: wunder@123\n```\n\n----------------------------------------\n\nTITLE: Example Tool Documentation in README (Markdown)\nDESCRIPTION: This Markdown snippet demonstrates the format for documenting a newly added tool in the `cli/src/commands/mcp/README.md` file. It shows how to list the tool's name (e.g., `schema-change-proposal-workflow`), provide a brief description of its function, and specify its intended use case.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cli/src/commands/mcp/_prompts/add_tool.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- **`schema-change-proposal-workflow`**: Generates a step-by-step guide or set of instructions for making a specific schema change to a Supergraph safely and effectively.\n  - _Use Case_: Assisting developers in planning and executing schema changes.\n```\n\n----------------------------------------\n\nTITLE: Defining Ingress Annotations\nDESCRIPTION: Specifies annotations to be added to the Kubernetes Ingress resource managed by this configuration. This is represented as an empty JSON object by default, meaning no custom annotations are added initially.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Gradle in Kotlin Project\nDESCRIPTION: This command executes the test suite for the Apollo Kotlin client router. It uses Gradle to run all tests in the project.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/client-tests/apollo-kotlin/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew test\n```\n\n----------------------------------------\n\nTITLE: Publishing Feature Flag for Users Subgraph in Bash\nDESCRIPTION: This command publishes a feature flag schema named 'myFlag2' for the 'users' subgraph. It specifies the routing URL, schema file, mode, subgraph, and supergraph for the feature flag.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags-v2.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwgc ff publish myFlag2 --routing-url http://localhost:4004/graphql --schema ./usersV2.graphql --mode replace --subgraph users --supergraph myGraph\n```\n\n----------------------------------------\n\nTITLE: Configuring k14s Change Rule Annotation for Keycloak Deployment Dependency\nDESCRIPTION: Sets a kapp (k14s.io) annotation on Keycloak pods to define a change rule. This rule ensures that the Keycloak deployment waits for the PostgreSQL deployment group (`cosmo.apps.postgresql.wundergraph.com/deployment`) to be successfully updated before proceeding.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n\"upsert after upserting cosmo.apps.postgresql.wundergraph.com/deployment\"\n```\n\n----------------------------------------\n\nTITLE: Running Migration Script for SpanID Addition in Go\nDESCRIPTION: This command runs a Go script to migrate the traces table and traces_mv materialized view. It takes a Clickhouse DSN as an argument and outputs success and error logs.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/data_migrations/controlplane/1726744316_add_span_id_to_trace/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo run ./files/migrate.go <dsn>\n```\n\n----------------------------------------\n\nTITLE: Configuring k14s Change Group Annotation for Minio\nDESCRIPTION: Sets a kapp (k14s.io) annotation on Minio resources to define a change group. This helps coordinate deployments managed by kapp, grouping Minio resources under `cosmo.apps.minio.wundergraph.com/deployment`.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n\"cosmo.apps.minio.wundergraph.com/deployment\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Router Execution Path in YAML\nDESCRIPTION: YAML configuration snippet that specifies the file path for the Router execution configuration. This setting points to the generated configuration JSON file in the __schemas directory.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/__schemas/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexecution_config:\n  file:\n    path: \"./__schemas/config.json\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Feature Flag in Bash\nDESCRIPTION: This command deletes a feature flag named 'myFlag' using the wgc CLI tool.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags-v2.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwgc ff delete myFlag\n```\n\n----------------------------------------\n\nTITLE: Defining Common Labels for OtelCollector Resources\nDESCRIPTION: Specifies a set of common labels to be applied to all resources deployed as part of the OpenTelemetry Collector (OtelCollector) component. This is represented as an empty JSON object by default, meaning no common labels are added initially.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server\nDESCRIPTION: Command to start the CDN server in development mode with hot reloading enabled.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cdn-server/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ClickHouse DSN for OtelCollector\nDESCRIPTION: Provides the Data Source Name (DSN) string for connecting the OpenTelemetry Collector (OtelCollector) component to a ClickHouse database instance, likely for exporting telemetry data. It specifies the protocol, credentials, host, port, database name, and connection parameters.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n\"clickhouse://default:changeme@cosmo-clickhouse:9000/cosmo?dial_timeout=15s&compress=lz4\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Label-Based Preview Workflow in GitHub Actions\nDESCRIPTION: GitHub Actions workflow that manages feature flags and subgraphs based on PR label events. Creates previews when labeled, updates on sync, and destroys when unlabeled or closed.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/previews-using-feature-flags.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    paths:\n      - 'services/subgraph1/**/*.graphql'\n      - 'services/subgraph2/**/*.graphql'\n    types: [labeled, unlabeled, synchronize, closed]\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    if: github.event.label.name == 'cosmo-preview' && github.event.pull_request.action == 'labeled'\n    steps:\n      # 1. Create & Publish feature subgraph based on cosmo.yaml\n      # 2. Create a new feature flag\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          create: true # Create the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag has been created. You can now provision the subgraph service.\"\n          echo \"Published Feature Subgraphs: ${{ steps.ff.outputs.published_feature_subgraphs }}\"\n\n  # run the job to deploy all the changed subgraphs here.\n\n  update:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'synchronize'\n    steps:\n      - uses: wundergraph/feature-flags@main\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          update: true # Only update the feature subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature subgraph has been updated. You can now update the subgraph service.\"\n          echo \"Published Feature Subgraphs: ${{ steps.ff.outputs.published_feature_subgraphs }}\"\n\n  destroy:\n    if: github.event.pull_request.action == 'closed' || (github.event.label.name == 'cosmo-preview' && github.event.pull_request.action == 'unlabeled')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          destroy: true # Only destroy the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag and the feature subgraphs have been destroyed. You can now unprovision the subgraph service.\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Base Subgraph Schema in Bash\nDESCRIPTION: This command publishes a base subgraph schema for the 'products' subgraph using the wgc CLI tool. It specifies the schema file and routing URL for the subgraph.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags-v2.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish products --schema ./products.graphql --routing-url http://localhost:4001/graphql\n```\n\n----------------------------------------\n\nTITLE: Configuring k14s Change Group Annotation for PostgreSQL\nDESCRIPTION: Sets a kapp (k14s.io) annotation on PostgreSQL resources to define a change group. This helps coordinate deployments managed by kapp, grouping PostgreSQL resources under `cosmo.apps.postgresql.wundergraph.com/deployment`.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/README.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n\"cosmo.apps.postgresql.wundergraph.com/deployment\"\n```\n\n----------------------------------------\n\nTITLE: Updating Documentation\nDESCRIPTION: Command to update the auto-generated documentation.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/README.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing NATS Docker Image\nDESCRIPTION: Shell command to build and push a multi-architecture Docker image for NATS to the registry. Supports both linux/amd64 and linux/arm64 architectures.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docker/nats/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./build-push.sh\n```\n\n----------------------------------------\n\nTITLE: Using Cosmo CLI\nDESCRIPTION: Commands to set up environment variables and use the Cosmo CLI.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport COSMO_API_KEY=\"cosmo_669b576aaadc10ee1ae81d9193425705\"\nexport COSMO_API_URL=\"http://controlplane.wundergraph.local\"\nnpx wgc -h\n```\n\n----------------------------------------\n\nTITLE: Publishing a Standard Subgraph Schema using wgc CLI (Bash) - Default Example\nDESCRIPTION: This command repeats the default method for publishing a subgraph schema named 'products' using the WunderGraph Cosmo CLI (`wgc`). It specifies the schema file, routing URL, and a label, without involving any feature flags.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/graph-feature-flags.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc subgraph publish products --schema ../demo/subgraphs/products/products.graphql --routing-url http://localhost:4001/graphql --label=team=A\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries - WunderGraph Cosmo\nDESCRIPTION: Markdown formatted changelog entries documenting bug fixes and feature additions for the GraphQL playground implementation in WunderGraph Cosmo. Includes commit hashes and issue references.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/playground/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n* allow to host graphql playground and handler on the same path ([#354](https://github.com/wundergraph/cosmo/issues/354)) ([f8f01a2](https://github.com/wundergraph/cosmo/commit/f8f01a2b8f12ac18b27eb05032985a5daacc80df)) (@)\n* client side validation for router playground ([#976](https://github.com/wundergraph/cosmo/issues/976)) ([9a276d8](https://github.com/wundergraph/cosmo/commit/9a276d8124cb8d102081c86fb39542158542200a)) (@JivusAyrus)\n* custom scrollbar in ui and playground ([#587](https://github.com/wundergraph/cosmo/issues/587)) ([cee2b8d](https://github.com/wundergraph/cosmo/commit/cee2b8d43a50ae8c1ea5435736301a9e29079b59)) (@)\n* load schema from CP and sync router playground ([#489](https://github.com/wundergraph/cosmo/issues/489)) ([7bc4d89](https://github.com/wundergraph/cosmo/commit/7bc4d892fd21afc6d22bda07133b261599a7cd3e)) (@)\n* merging response nodes, improve playground trace for skipped fetches ([#827](https://github.com/wundergraph/cosmo/issues/827)) ([70fc005](https://github.com/wundergraph/cosmo/commit/70fc005f3e2e7826d8f517de5f42119b96f95e79)) (@)\n* missing ART visuals on subgraph errors ([#598](https://github.com/wundergraph/cosmo/issues/598)) ([1934d7d](https://github.com/wundergraph/cosmo/commit/1934d7d801ac97ef3cdac2ad74799ca3416bd3c9)) (@)\n* playground crash on hard reload and better invalid headers error ([#934](https://github.com/wundergraph/cosmo/issues/934)) ([7306fb1](https://github.com/wundergraph/cosmo/commit/7306fb15f80a6371f59919cbb5890845d9ce6e74)) (@)\n* playground explorer plugin crash ([#931](https://github.com/wundergraph/cosmo/issues/931)) ([ba10f16](https://github.com/wundergraph/cosmo/commit/ba10f165e2eb2ed6ee040ff981629ebb8b13ae16)) (@)\n* playground icon and introspect on focus ([#380](https://github.com/wundergraph/cosmo/issues/380)) ([efea2b5](https://github.com/wundergraph/cosmo/commit/efea2b5a19e633835ef135a0c094c1c0398973d2)) (@)\n* playground scripts ([#932](https://github.com/wundergraph/cosmo/issues/932)) ([050790b](https://github.com/wundergraph/cosmo/commit/050790b3d3d73ee9fa47d8a50cb540daab2e4081)) (@)\n* playground theme settings ([#805](https://github.com/wundergraph/cosmo/issues/805)) ([00d692a](https://github.com/wundergraph/cosmo/commit/00d692aff8482e93cce7443e9665fec3031ef083)) (@)\n* trace parsing and ui ([#310](https://github.com/wundergraph/cosmo/issues/310)) ([5eb9f67](https://github.com/wundergraph/cosmo/commit/5eb9f675a9294b26963bdd1c8ac8215448de0c4e)) (@)\n* upgrade deps to cover CVEs ([#750](https://github.com/wundergraph/cosmo/issues/750)) ([e261beb](https://github.com/wundergraph/cosmo/commit/e261beb8375ca41eb8a2fa4b3223d202c3bb7460)) (@)\n* validate graphql operation in playground ([#763](https://github.com/wundergraph/cosmo/issues/763)) ([41bde5f](https://github.com/wundergraph/cosmo/commit/41bde5f06583242bbc9471e05179c1c16bb2f769)) (@)\n\n### Features\n\n* bundle custom graphiql in router ([#308](https://github.com/wundergraph/cosmo/issues/308)) ([de2779f](https://github.com/wundergraph/cosmo/commit/de2779faa48ae5fef23855091400292c0e118c7d)) (@)\n* feature flags ([#853](https://github.com/wundergraph/cosmo/issues/853)) ([5461bb5](https://github.com/wundergraph/cosmo/commit/5461bb5a529decd51a1b22be0a5301936b8ad392)) (@)\n* package playground as library ([#975](https://github.com/wundergraph/cosmo/issues/975)) ([dc6ff32](https://github.com/wundergraph/cosmo/commit/dc6ff3274dc1db50283fa58d14051538df4af192)) (@thisisnithin)\n* unify OTEL tracing and ART ([#588](https://github.com/wundergraph/cosmo/issues/588)) ([d43c4d8](https://github.com/wundergraph/cosmo/commit/d43c4d8172ed3668a276477ede8aa57f6d4f9fd1)) (@)\n```\n\n----------------------------------------\n\nTITLE: Building Docker Images for Minikube\nDESCRIPTION: Command to build Docker images for local Minikube deployment.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake docker-build-minikube\n```\n\n----------------------------------------\n\nTITLE: Git Commit URL Example\nDESCRIPTION: Example of a git commit reference URL used in the changelog\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cdn-server/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[#1575](https://github.com/wundergraph/cosmo/issues/1575)\n```\n\n----------------------------------------\n\nTITLE: Kapp Deployment Commands\nDESCRIPTION: Shell commands for deploying and managing the Cosmo stack using Kapp.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/DEV.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkapp -y deploy -a cosmo -f <(helm template cosmo ./cosmo \\\n\t  --set global.seed.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Helm Chart Documentation Command\nDESCRIPTION: Command to generate documentation for Helm charts, required before creating pull requests\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/releasing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd helm && make docs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Different Kubernetes Service Types\nDESCRIPTION: Commands to obtain the application URL based on the Kubernetes service type configured (Ingress, NodePort, LoadBalancer, or ClusterIP). Uses Helm templating syntax to conditionally provide the appropriate command sequence for each scenario.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/router/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"router.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"router.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"router.fullname\" . }} --template \"{{\"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\"}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"router.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Get Application URL for Various Kubernetes Service Types\nDESCRIPTION: A conditional template that provides appropriate commands to retrieve the application URL based on the configured service type in Kubernetes. Handles Ingress, NodePort, LoadBalancer, and ClusterIP configurations with specific command generation for each type.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/studio/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"studio.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"studio.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"studio.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"studio.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Workspace\nDESCRIPTION: Example configuration for a Go workspace file (go.work) showing module organization and custom replacements\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo 1.23\n\nuse (\n\t./demo\n\t./router\n\t./router-tests\n)\n\n// Here you can add custom replacements\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application URL for Various Kubernetes Service Types\nDESCRIPTION: This Helm template snippet determines how to retrieve the application URL based on the Kubernetes service type and ingress configuration. It handles Ingress, NodePort, LoadBalancer, and ClusterIP scenarios, providing appropriate commands for each case.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/cosmo/charts/cdn/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if .Values.ingress.enabled }}\n{{- range $host := .Values.ingress.hosts }}\n  {{- range .paths }}\n  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}\n  {{- end }}\n{{- end }}\n{{- else if contains \"NodePort\" .Values.service.type }}\n  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath=\"{.spec.ports[0].nodePort}\" services {{ include \"cdn.fullname\" . }})\n  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath=\"{.items[0].status.addresses[0].address}\")\n  echo http://$NODE_IP:$NODE_PORT\n{{- else if contains \"LoadBalancer\" .Values.service.type }}\n     NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include \"cdn.fullname\" . }}'\n  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include \"cdn.fullname\" . }} --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")\n  echo http://$SERVICE_IP:{{ .Values.service.port }}\n{{- else if contains \"ClusterIP\" .Values.service.type }}\n  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l \"app.kubernetes.io/name={{ include \"cdn.name\" . }},app.kubernetes.io/instance={{ .Release.Name }}\" -o jsonpath=\"{.items[0].metadata.name}\")\n  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath=\"{.spec.containers[0].ports[0].containerPort}\")\n  echo \"Visit http://127.0.0.1:8080 to use your application\"\n  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Router Configuration with Signing Key\nDESCRIPTION: YAML configuration for the router specifying the signing key used for config validation.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/admission-server/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '1'\n\ngraph: \n  sign_key: 'sign_key'\n```\n\n----------------------------------------\n\nTITLE: Publishing Subgraph Schema\nDESCRIPTION: Command to publish a subgraph schema with team labels using the wgc CLI.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/admission-server/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwgc subgraph publish employees --schema ../demo/pkg/subgraphs/employees/subgraph/schema.graphqls --labels team=A\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Command\nDESCRIPTION: Command to build the router and start the API Gateway locally for development purposes.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/aws-lambda-router/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Creating Minikube Cluster\nDESCRIPTION: Command to start a new Minikube cluster for local development.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Cluster Info\nDESCRIPTION: Command to verify the currently selected Kubernetes cluster.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/helm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl cluster-info\n```\n\n----------------------------------------\n\nTITLE: Overriding User Limit in SQL\nDESCRIPTION: SQL command to insert or update a custom user limit for a specific organization in the organization_features table.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/docs/billing.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO public.organization_features(\n    organization_id, feature, \"limit\")\n    VALUES ('84b14c63-df43-4ae9-aed9-62fbccbbf9d3', 'users', 10);\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Router with the JWT Module in Go (Bash)\nDESCRIPTION: This command compiles the Go source code located at `./cmd/custom-jwt/main.go` and creates a standalone executable file named `router` in the current directory. This builds the custom router incorporating the JWT re-signing functionality. The command assumes it's run from the root of the router directory.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/cmd/custom-jwt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo build -o router ./cmd/custom-jwt/main.go\n```\n\n----------------------------------------\n\nTITLE: Installing Cosmo Playground via npm\nDESCRIPTION: Command to install the Cosmo Playground package using npm.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/playground/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @wundergraph/playground\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosmo Feature Flags Configuration File\nDESCRIPTION: YAML configuration file for Cosmo feature flags defining namespace, feature flag naming pattern, and subgraph configurations including schema paths and routing URLs.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/adr/previews-using-feature-flags.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnamespace: 'staging'\nfeature_flags:\n  - name: 'my-feature-flag-{PR_NUMBER}'\n    labels:\n      - 'my-feature-flag-label'\n\nsubgraphs:\n  - name: 'subgraph1'\n    schema: 'my-project/my-subgraph/subgraph1.graphql'\n    routing_url: 'http://mycompany-subgraph1-{PR_NUMBER}.com/graphql'\n```\n\n----------------------------------------\n\nTITLE: Running Tests for WunderGraph Cosmo CLI\nDESCRIPTION: This command shows how to run the test suite for the WunderGraph Cosmo CLI project using pnpm.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cli/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing WunderGraph Cosmo CLI (wgc) using npx\nDESCRIPTION: This command demonstrates how to run the WunderGraph Cosmo CLI (wgc) using npx to display the help information. It also shows an alternative method of installing the CLI globally using npm.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cli/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx wgc --help\n# or install it globally\nnpm install -g wgc --help\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Cosmo Router in Go\nDESCRIPTION: This Go code snippet demonstrates the main entrypoint for a custom Cosmo Router. It imports the default Router and a custom module, then calls the main function to start the router.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router/cmd/custom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\troutercmd \"github.com/wundergraph/cosmo/router/cmd\"\n\t// Import your modules here\n\t_ \"github.com/wundergraph/cosmo/router/cmd/custom/module\"\n)\n\nfunc main() {\n\troutercmd.Main()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating All Test Snapshots in Router Integration Tests\nDESCRIPTION: This command updates all snapshots used in the tests. It overwrites existing snapshots with the current test output, so it should be used cautiously.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/router-tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -update ./...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Husky Environment\nDESCRIPTION: Configuration for husky pre-commit hook environment, including NVM and Golang path settings\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport NVM_DIR=/home/starptech/.nvm\n[ -s /home/starptech/.nvm/nvm.sh ] && \\. /home/starptech/.nvm/nvm.sh  # This loads nvm\n\n# golang\nexport PATH=$PATH:/usr/local/go/bin\nexport PATH=\"$PATH:$(go env GOPATH)/bin\"\n```\n\n----------------------------------------\n\nTITLE: Modifying ClickHouse Metrics Table TTL\nDESCRIPTION: SQL command to alter the TTL (Time To Live) of ClickHouse metrics tables to 7 days and optimize the table. This should be run for each metrics table in production.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/otelcollector/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER TABLE otel_metrics_histogram MODIFY TTL toDateTime(TimeUnix) + toIntervalDay(7);\nOPTIMIZE TABLE otel_metrics_histogram FINAL;\n```\n\n----------------------------------------\n\nTITLE: Running Apollo JS Tests in Watch Mode\nDESCRIPTION: This command runs the Apollo JS tests in watch mode, which allows for continuous testing as files are changed.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/client-tests/apollo-js/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Apollo JS Tests\nDESCRIPTION: This command installs the necessary dependencies for the Apollo JS test project using pnpm package manager.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/client-tests/apollo-js/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Triggers in GitHub Actions (YAML)\nDESCRIPTION: This snippet defines the triggers for the GitHub Actions workflow. The workflow runs on pull request events (opened, synchronize, closed, reopened) specifically when changes occur within the 'services/subgraph1/**' path.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/previews-using-fetaure-flags.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\non:\n  pull_request:\n    paths:\n      - \"services/subgraph1/**\"\n    types: [ opened, synchronize, closed, reopened ]\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for On-Demand Feature Flag Preview (Proposal 2)\nDESCRIPTION: This YAML configuration sets up a GitHub Action to create, update, and destroy feature flags and feature subgraphs for pull requests on-demand using a specific label. It provides more flexibility in choosing which PRs to create previews for.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/rfc/previews-using-fetaure-flags.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# feature-flags-preview.yaml\non:\n  pull_request:\n    paths:\n      - 'services/subgraph1/**/*.graphql'\n      - 'services/subgraph2/**/*.graphql'\n    types: [labeled, synchronize, closed, opened, reopened]\n\njobs:\n  create:\n    runs-on: ubuntu-latest\n    if: github.event.label.name == 'cosmo-preview' && github.event.pull_request.action == 'labeled'\n    steps:\n      # 1. Create & Publish feature subgraph based on cosmo.yaml\n      # 2. Create a new feature flag\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          create: true # Create the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag has been created. You can now provision the subgraph service.\"\n          echo \"Published Feature Subgraphs: ${{ steps.ff.outputs.published_feature_subgraphs }}\"\n\n  # run the job to deploy all the changed subgraphs here.\n\n  update:\n    runs-on: ubuntu-latest\n    if: github.event_name == 'synchronize'\n    steps:\n      - uses: wundergraph/feature-flags@main\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          update: true # Only update the feature subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature subgraph has been updated. You can now update the subgraph service.\"\n          echo \"Published Feature Subgraphs: ${{ steps.ff.outputs.published_feature_subgraphs }}\"\n\n  destroy:\n    if: github.event.pull_request.action == 'closed' || (github.event.label.name == 'cosmo-preview' && github.event.pull_request.action == 'unlabeled')\n    runs-on: ubuntu-latest\n    steps:\n      - uses: wundergraph/feature-flags@main\n        id: ff\n        with:\n          config: cosmo.yaml # Default to .github/cosmo.yaml\n          destroy: true # Only destroy the feature flag + subgraphs from cosmo.yaml\n      - run: |\n          echo \"Feature flag and the feature subgraphs have been destroyed. You can now unprovision the subgraph service.\"\n```\n\n----------------------------------------\n\nTITLE: Change Entry Formatting Markdown\nDESCRIPTION: Markdown formatting for individual change entries with issue links and contributor tags\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/composition/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* track subgraph names for unions and scalars ([#1788](https://github.com/wundergraph/cosmo/issues/1788)) ([de8ae0c](https://github.com/wundergraph/cosmo/commit/de8ae0cfcbdfc296cbfc54448a540c4613fcb632)) (@thisisnithin)\n\n### Bug Fixes\n\n* authorization directive cascading ([#1733](https://github.com/wundergraph/cosmo/issues/1733)) ([0199fb5](https://github.com/wundergraph/cosmo/commit/0199fb5f88104a585b74a79638f54f1a3b812436)) (@Aenimus)\n```\n\n----------------------------------------\n\nTITLE: Version Headers and Links Markdown\nDESCRIPTION: Markdown formatting for version headers with links to GitHub comparisons\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/composition/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# [0.39.0](https://github.com/wundergraph/cosmo/compare/@wundergraph/composition@0.38.1...@wundergraph/composition@0.39.0) (2025-04-15)\n\n# [0.38.0](https://github.com/wundergraph/cosmo/compare/@wundergraph/composition@0.37.3...@wundergraph/composition@0.38.0) (2025-03-25)\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Migration with SQL Count Queries\nDESCRIPTION: SQL queries to verify data integrity by comparing record counts between the old and new schema usage tables. These queries help ensure the successful migration from 5-minute buckets to daily aggregated data.\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/data_migrations/graphqlmetrics/1726744437_graphql_schema_usage_lite_1d_90d/migration_notes.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COUNT(*) FROM gql_metrics_schema_usage_5m_90d;\nSELECT COUNT(*) FROM gql_metrics_schema_usage_lite_1d_90d;\n```\n\n----------------------------------------\n\nTITLE: Version Comparison Format\nDESCRIPTION: Example of version comparison syntax used in the changelog\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cdn-server/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[0.14.2](https://github.com/wundergraph/cosmo/compare/cdn@0.14.1...cdn@0.14.2)\n```\n\n----------------------------------------\n\nTITLE: Git Commit Hash Reference\nDESCRIPTION: Example of a git commit hash reference used in the changelog\nSOURCE: https://github.com/wundergraph/cosmo/blob/main/cdn-server/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n(ee32cbb3dbe7c46fa984920bbd95e4a00d01c9c3)\n```"
  }
]