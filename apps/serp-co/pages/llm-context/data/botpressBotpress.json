[
  {
    "owner": "botpress",
    "repo": "botpress",
    "content": "TITLE: Using Botpress Client with TypeScript\nDESCRIPTION: Example demonstrating how to use the Botpress client to interact with the API. It shows type definitions, initializing the client, making basic API calls, using list utilities with collect() function, and using async generators with for-await syntax.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/client/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client, ClientInputs, ClientOutputs } from '@botpress/client'\n\n// 0. Type definitions for each operation's IO\ntype GetBotInput = ClientInputs['getBot']\ntype GetBotOutput = ClientOutputs['getBot']\n\nconst main = async () => {\n  const token = 'your-token'\n  const workspaceId = 'your-workspace-id'\n  const botId = 'your-bot-id'\n  const client = new Client({ token, workspaceId, botId })\n\n  // 1. plain operations\n  const { bot } = await client.getBot({ id: botId })\n  console.log('### bot', bot)\n\n  // 2. list utils with `.collect()` function\n  const [latestConversation] = await client.list\n    .conversations({ sortField: 'createdAt', sortDirection: 'desc', integrationName: 'telegram' })\n    .collect({ limit: 1 })\n  console.log('### latestConversation', latestConversation)\n\n  // 3. list utils with async generator and `for await` syntax\n  for await (const message of client.list.messages({ conversationId: latestConversation.id })) {\n    console.log(`### [${message.userId}]`, message.payload)\n  }\n}\n\nvoid main()\n```\n\n----------------------------------------\n\nTITLE: Installing Botpress CLI\nDESCRIPTION: Commands to install the Botpress CLI globally using different package managers (npm, yarn, pnpm)\nSOURCE: https://github.com/botpress/botpress/blob/master/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @botpress/cli # for npm\nyarn global add @botpress/cli # for yarn\npnpm install -g @botpress/cli # for pnpm\n```\n\n----------------------------------------\n\nTITLE: Installing Botpress CLI with Package Managers\nDESCRIPTION: Commands for installing the Botpress CLI using different package managers including npm, yarn, and pnpm.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/cli/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @botpress/cli # for npm\nyarn add @botpress/cli # for yarn\npnpm add @botpress/cli # for pnpm\n```\n\n----------------------------------------\n\nTITLE: Basic Vai Usage Example in TypeScript\nDESCRIPTION: Demonstrates importing and using the basic check function from Vai to validate that a string matches a condition in a Vitest test.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { check, rate, filter, extract } from '@botpress/vai'\nimport { describe, test } from 'vitest'\n\ndescribe('my test suite', () => {\n  test('example', () => {\n    check('botpress', 'is a chatbot company').toBe(true)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Botpress Chat API Interaction in TypeScript\nDESCRIPTION: Demonstrates how to connect to the Botpress Chat API, create a conversation, send a message, and retrieve bot responses. The example includes initialization, message creation, and retrieving conversation history.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/chat-client/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport _ from 'lodash'\nimport * as chat from '@botpress/chat'\n\nconst main = async () => {\n  /**\n   * You can find your webhook id in the the Botpress Dashboard.\n   * Navigate to your bot's Chat Integration configuration. Look for:\n   * https://webhook.botpress.cloud/$YOUR_WEBHOOK_ID\n   */\n  const webhookId = process.env.WEBHOOK_ID\n  if (!webhookId) {\n    throw new Error('WEBHOOK_ID is required')\n  }\n\n  // 0. connect and create a user\n  const client = await chat.Client.connect({ webhookId })\n\n  // 1. create a conversation\n  const { conversation } = await client.createConversation({})\n\n  // 2. send a message\n  await client.createMessage({\n    conversationId: conversation.id,\n    payload: {\n      type: 'text',\n      text: 'hello world',\n    },\n  })\n\n  // 3. sleep for a bit\n  await new Promise((resolve) => setTimeout(resolve, 2000))\n\n  // 4. list messages\n  const { messages } = await client\n    .listMessages({\n      conversationId: conversation.id,\n    })\n    .then(({ messages }) => ({\n      messages: _.sortBy(messages, (m) => new Date(m.createdAt).getTime()),\n    }))\n\n  const botResponse = messages[1]\n  console.log(\"Bot's response:\", botResponse.payload)\n}\n\nvoid main()\n  .then(() => {\n    console.log('done')\n    process.exit(0)\n  })\n  .catch((err) => {\n    console.error(err)\n    process.exit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Boolean Check Operations in Zai\nDESCRIPTION: Demonstrates content checking functionality that returns boolean results, such as checking for insults in text content.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/zai/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait zai.check({ name: 'hey', bio: '...' }, 'contains insults')\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Botpress Cognitive Client\nDESCRIPTION: Initialize the Botpress Client and Cognitive client with your token and bot ID, then generate content by sending messages to the LLM.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/cognitive/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client } from '@botpress/client'\nimport { Cognitive } from '@botpress/cognitive'\n\nconst token = 'your-token'\nconst botId = 'your-bot-id'\n\nconst client = new Client({ token, botId })\n\nconst cognitive = new Cognitive({ client })\n\nconst response = await cognitive.generateContent({ messages: [{ role: 'user', content: 'Hello!' }] })\n```\n\n----------------------------------------\n\nTITLE: Using Rate Function for Scoring\nDESCRIPTION: Shows how to use the rate function to evaluate inputs on a scale from 1 to 5 based on natural language criteria.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest('good', () => rate('ghandi', 'is a good person').toBeGreaterThanOrEqual(4))\ntest('evil', () => rate('hitler', 'is a good person').toBe(3))\n```\n\n----------------------------------------\n\nTITLE: Installing Botpress SDK using different package managers\nDESCRIPTION: This code snippet shows how to install the Botpress SDK using npm, yarn, or pnpm package managers. The SDK is used for building bots, plugins, and integrations in TypeScript.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/sdk/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @botpress/sdk # for npm\nyarn add @botpress/sdk # for yarn\npnpm add @botpress/sdk # for pnpm\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Loss and Reconnection with Botpress Chat\nDESCRIPTION: Demonstrates how to handle connection loss and implement a reconnection strategy with the Botpress Chat client. This example includes error event monitoring and state synchronization after reconnection.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/chat-client/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = { messages } // your application state\n\nconst onDisconnection = async () => {\n  try {\n    await listener.connect()\n    const { messages } = await client.listMessages({ conversationId: conversation.id })\n    state.messages = messages\n  } catch (thrown) {\n    console.error('failed to reconnect, retrying...', thrown)\n    setTimeout(onDisconnection, 1000) // consider using a backoff strategy\n  }\n}\n\nlistener.on('error', (err) => {\n  console.error('connection lost', err)\n  void onDisconnection()\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Zai Library with Botpress Client\nDESCRIPTION: Shows how to import and initialize the Zai library with a Botpress client instance.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/zai/README.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Zai from '@botpress/zai'\n\nconst zai = new Zai({\n  client: new Client({}), // your botpress client here\n})\n```\n\n----------------------------------------\n\nTITLE: Using Interceptors with Botpress Cognitive Client\nDESCRIPTION: Add an interceptor to the Cognitive client to modify requests before they are sent or responses after they are received, with support for async operations.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/cognitive/readme.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst cognitive = new Cognitive({ client: new Client() })\n\ncognitive.interceptors.request.use(async (err, req, next, done) => {\n  // do whatever here\n  next(null, req)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Vai Functions with Promises\nDESCRIPTION: Demonstrates how to use Vai's assertion methods as promises outside of Vitest tests, returning results that can be awaited and used programmatically.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntest('test truth', async () => {\n  const { result } = await check('hello', 'is a greeting message')\n  expect(result).toBe(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty Integration Class in TypeScript for Botpress\nDESCRIPTION: A TypeScript class implementation that serves as a template for creating custom integrations in Botpress. It implements the Integration interface and provides empty implementations for all required methods including start, stop, actions, channels, and various event handlers.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/cli/templates/empty-integration/hub.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Integration, IntegrationContext, StartedIntegration } from '@botpress/sdk'\n\nexport default class implements Integration {\n  async start(ctx: IntegrationContext): Promise<StartedIntegration> {\n    return {\n      actions: {\n        async myAction({ input }) {\n          // Return arbitrary object to be stored in state\n          return { prop: input.property }\n        },\n      },\n      channels: {\n        myChannel: {\n          messages: {\n            async send({ payload }) {\n              return { messageId: '<some id>' }\n            },\n            async update({ payload }) {\n              return { messageId: '<some id>' }\n            },\n            async delete({ payload }) {\n              return {\n                messageId: '<some id>',\n              }\n            },\n          },\n        },\n      },\n      webhooks: {},\n\n      handler: async ({ req }) => {\n        // Handle incoming payload from the integration platform\n        return { statusCode: 200, body: '' }\n      },\n\n      stop: async () => {},\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting a Cognitive Client Request\nDESCRIPTION: Create a Cognitive client instance and use an AbortController to allow cancellation of generateContent requests.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/cognitive/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst cognitive = new Cognitive({ client: new Client() })\nconst controller = new AbortController()\n\nawait cognitive.generateContent({\n  messages: [],\n  signal: controller.signal,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Real-time Event Listening with Botpress Chat\nDESCRIPTION: Shows how to subscribe to real-time conversation events using the Botpress Chat client. This example demonstrates setting up a listener for new messages and handling bot responses in real-time.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/chat-client/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// ...\n\nconst listener = await client.listenConversation({\n  id: conversation.id,\n})\n\nconst botResponse = await new Promise<chat.Message>((resolve) => {\n  const onMessage = (ev: chat.Signals['message_created']) => {\n    if (ev.userId === client.user.id) {\n      // message created by my current user, ignoring...\n      return\n    }\n    listener.off('message_created', onMessage)\n    resolve(ev)\n  }\n  listener.on('message_created', onMessage)\n})\n\nconsole.log(\"Bot's response:\", botResponse.payload)\n```\n\n----------------------------------------\n\nTITLE: Array Manipulation Methods in Zai\nDESCRIPTION: Demonstrates array filtering functionality and shows planned but not yet implemented array operations like mapping, sorting, clustering, and appending.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/zai/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait zai.filter(['cat', 'dog', 'carrot'], 'is an animal')\n\n// Not implemented yet\n// await zai.map(filtered, z.object({ animal: z.string(), name: z.string() }))\n// await zai.sort(named, 'from most dangerous to least dangerous')\n// await zai.cluster(named, 'based on color')\n// await zai.append(named, 'another one')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Model Provider for Botpress Cognitive\nDESCRIPTION: Extend the ModelProvider base class to implement a custom provider for model preferences and installed models, useful for serverless environments where caching is needed.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/cognitive/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Cognitive, ModelProvider } from '@botpress/cognitive'\n\nexport class CustomModelProvider extends ModelProvider {\n  public fetchInstalledModels(): Promise<Model[]> {\n    throw new Error('Not implemented')\n  }\n\n  public fetchModelPreferences(): Promise<ModelPreferences | null> {\n    throw new Error('Not implemented')\n  }\n\n  public saveModelPreferences(preferences: ModelPreferences): Promise<void> {\n    throw new Error('Not implemented')\n  }\n\n  public deleteModelPreferences(): Promise<void> {\n    throw new Error('Not implemented')\n  }\n}\n\nconst provider = new CustomModelProvider()\nconst cognitive = new Cognitive({ client: new Client(), provider })\n```\n\n----------------------------------------\n\nTITLE: String Processing Operations in Zai\nDESCRIPTION: Shows implemented string manipulation methods including text generation, summarization, and rewriting, along with planned features for rating, labeling, and classification.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/zai/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait zai.text('a story about ....')\nawait zai.summarize(book)\nawait zai.rewrite('Hello, I am ...', 'make it longer')\n\n// Not implemented yet\n// await zai.rate(novel, ['is the novel good?', 'how creative is it?', 'quality of writing', 'is the ending good?'])\n// await zai.label(tweet, [{ label: '' }])\n// await zai.classify(tweet, [])\n```\n\n----------------------------------------\n\nTITLE: Using Check Function with Different Data Types\nDESCRIPTION: Shows how to use the check function with both strings and objects to validate against natural language conditions.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntest('example', () => {\n  // works with strings\n  check('hello', 'is a greeting message').toBe(true)\n\n  // also works with objects, arrays etc..\n  check(\n    {\n      message: 'hello my friend',\n      from: 'user',\n    },\n    'is a greeting message'\n  ).toBe(true)\n})\n```\n\n----------------------------------------\n\nTITLE: Object Manipulation in Zai\nDESCRIPTION: Shows object manipulation capabilities including data extraction using schemas, with additional planned features for object extension, diffing, and editing.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/zai/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait zai.extract('My name is Sly and I am from Canada !', z.object({ name: z.string(), country: z.string() }))\n\n// Not implemented yet\n// await zai.extend({ name: 'Sylvain' }, z.object({ country: z.string() }))\n// await zai.diff(before, after)\n// await zai.edit(object, '')\n```\n\n----------------------------------------\n\nTITLE: Using Filter Function to Process Arrays\nDESCRIPTION: Demonstrates how to filter arrays based on natural language conditions, returning elements that match the specified criteria.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst countries = ['canada', 'germany', 'usa', 'paris', 'mexico']\nfilter(countries, 'is in north america').toBe(['canada', 'usa', 'mexico'])\nfilter(countries, 'is the name of a country').length.toBe(4)\n```\n\n----------------------------------------\n\nTITLE: Using Extract Function with Zod Schema\nDESCRIPTION: Demonstrates how to extract structured data from text using the extract function and a Zod schema, with validation through toMatchObject.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst person = z.object({\n  name: z.string(),\n  age: z.number().optional(),\n  country: z.string().optional(),\n})\n\nextract('My name is Sylvain, I am 33 yo and live in Canada', person).toMatchObject({\n  name: 'Sylvain',\n  age: 33,\n  country: 'Canada',\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Zoho CRM API Scopes\nDESCRIPTION: Required scopes for the Zoho CRM integration with Botpress. These permissions enable comprehensive access to modules, organization details, user information, email sending, and file management.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nZohoCRM.modules.ALL,ZohoCRM.org.ALL,ZohoCRM.users.ALL,ZohoCRM.settings.ALL,ZohoCRM.send_mail.all.CREATE,ZohoCRM.files.CREATE,ZohoCRM.files.READ\n```\n\n----------------------------------------\n\nTITLE: Using Extract with Inline Snapshots\nDESCRIPTION: Shows how to use the extract function with toMatchInlineSnapshot for capturing and validating structured data.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntest('toMatchInlineSnapshot', () => {\n  extract('My name is Eric!', z.object({ name: z.string() })).toMatchInlineSnapshot(`\n    {\n      \"name\": \"Eric\",\n    }\n  `)\n})\n```\n\n----------------------------------------\n\nTITLE: PowerShell Variables for OAuth Request\nDESCRIPTION: PowerShell variable definitions for the OAuth token request. These define the regional Zoho endpoint and the required parameters for authorization.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$uri = \"https://YOUR_REGION_ACCOUNT_URL/oauth/v2/token\"\n\n# Define the request body with required parameters\n\n$body = @{\ngrant_type = \"authorization_code\"\nclient_id = \"YOUR_CLIENT_ID\"\nclient_secret = \"YOUR_CLIENT_SECRET\"\nredirect_uri = \"YOUR_REDIRECT_URI\"\ncode = \"AUTHORIZATION_CODE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Botpress Integration\nDESCRIPTION: Command to initialize a new Botpress integration using the CLI\nSOURCE: https://github.com/botpress/botpress/blob/master/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbp init\n```\n\n----------------------------------------\n\nTITLE: Expected OAuth Response Format\nDESCRIPTION: Example JSON response from a successful OAuth token request to Zoho. Contains the access token, refresh token, API domain, and token expiration details needed for API integration.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"{access_token}\",\n  \"refresh_token\": \"{refresh_token}\",\n  \"api_domain\": \"https://www.zohoapis.com\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Botpress Chat Client with Package Managers\nDESCRIPTION: Commands for installing the @botpress/chat package using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/chat-client/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @botpress/chat # for npm\nyarn add @botpress/chat # for yarn\npnpm add @botpress/chat # for pnpm\n```\n\n----------------------------------------\n\nTITLE: Installing Botpress Client with Package Managers\nDESCRIPTION: Commands to install the Botpress client using different package managers (npm, yarn, and pnpm).\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/client/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @botpress/client # for npm\nyarn add @botpress/client # for yarn\npnpm add @botpress/client # for pnpm\n```\n\n----------------------------------------\n\nTITLE: Generating Refresh Token with cURL\nDESCRIPTION: cURL command to obtain a refresh token from Zoho's OAuth service. This token is required for API authentication and must be executed with the correct regional URL, client ID, client secret and authorization code.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request POST \\\n  --url 'https://YOUR_REGION_ACCOUNT_URL/oauth/v2/token' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data 'grant_type=authorization_code' \\\n  --data 'client_id=YOUR_CLIENT_ID' \\\n  --data 'client_secret=YOUR_CLIENT_SECRET' \\\n  --data 'redirect_uri=YOUR_REDIRECT_URI' \\\n  --data 'code=AUTHORIZATION_CODE'\n```\n\n----------------------------------------\n\nTITLE: Basic Botpress CLI Commands\nDESCRIPTION: Common Botpress CLI commands for logging in, listing bots, and viewing help documentation.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/cli/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbp login # login to Botpress Cloud\nbp bots ls # list all bots\nbp --help # list all commands\n```\n\n----------------------------------------\n\nTITLE: OAuth Authorization URL for Gmail Integration\nDESCRIPTION: URL template for manually authorizing the OAuth application with a personal Gmail account. This URL requests the necessary scopes for reading and sending emails, and must be appended with the OAuth client ID.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gmail/hub.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://accounts.google.com/o/oauth2/auth?response_type=code&scope=https://www.googleapis.com/auth/gmail.readonly%20https://www.googleapis.com/auth/gmail.send&access_type=offline&prompt=consent&redirect_uri=https://botpress.com&client_id=\n```\n\n----------------------------------------\n\nTITLE: Adding Required OAuth Scopes for Gmail Integration\nDESCRIPTION: These are the required OAuth scopes that must be added to the Google Cloud Platform project to enable Gmail read and send functionality, along with user profile access for authentication.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gmail/hub.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://www.googleapis.com/auth/userinfo.email\nhttps://www.googleapis.com/auth/userinfo.profile\nhttps://www.googleapis.com/auth/gmail.readonly\nhttps://www.googleapis.com/auth/gmail.send\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appointments using GET Request\nDESCRIPTION: This snippet demonstrates how to retrieve appointments from the CRM system using a GET request. It includes the endpoint, input parameters, and an example of the JSON response structure.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": { \"fields\": \"Service_Name\" }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"records\": [\n      {\n        \"id\": \"27234000000159008\",\n        \"Service_Name\": {\n          \"name\": \"mow\",\n          \"id\": \"27234000000168178\"\n        }\n      }\n    ],\n    \"pagination\": {\n      \"per_page\": 200,\n      \"count\": 1,\n      \"page\": 1,\n      \"sort_by\": \"id\",\n      \"sort_order\": \"desc\",\n      \"more_records\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting a Named Range in Google Sheets\nDESCRIPTION: Configuration for the 'Protect Named Range' action to create a protected range from a specified named range. The parameters include the named range ID, whether to show warnings only, and whether the requesting user can edit the range.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namedRangeId\": \"1001473037\",\n  \"warningOnly\": false,\n  \"requestingUserCanEdit\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Appointment by ID using GET Request\nDESCRIPTION: This snippet shows how to retrieve a specific appointment by its ID from the CRM system using a GET request. It includes the endpoint, input parameters, and an example of the JSON response structure.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appointmentId\": \"123456\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"appointment\": {\n      \"id\": \"27234000000175008\",\n      \"Appointment_Name\": \"Matea - Mowing Service\",\n      \"Service_Name\": {\n        \"name\": \"mow\",\n        \"id\": \"27234000000168178\"\n      },\n      \"Appointment_For\": {\n        \"name\": \"k m\",\n        \"id\": \"27234000000163029\",\n        \"module\": \"Contacts\"\n      },\n      \"Owner\": {\n        \"name\": \"Matea Vasileski\",\n        \"email\": \"matea@envyro.io\"\n      },\n      \"Created_By\": {\n        \"name\": \"Matea Vasileski\",\n        \"email\": \"matea@envyro.io\"\n      },\n      \"Modified_By\": {\n        \"name\": \"Matea Vasileski\",\n        \"email\": \"matea@envyro.io\"\n      },\n      \"Appointment_Start_Time\": \"2025-02-24T14:33:00-05:00\",\n      \"Appointment_End_Time\": \"2025-02-24T15:03:00-05:00\",\n      \"Duration\": 30,\n      \"Status\": \"Overdue\",\n      \"Location\": \"Business Address\",\n      \"Remind_At\": [\n        {\n          \"unit\": 30,\n          \"period\": \"minutes\"\n        }\n      ],\n      \"Created_Time\": \"2025-02-26T19:21:59-05:00\",\n      \"Modified_Time\": \"2025-02-26T19:21:59-05:00\",\n      \"Record_Status\": \"Available\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Appointment using PUT Request\nDESCRIPTION: This snippet demonstrates how to update an existing appointment in the CRM system using a PUT request. It includes the endpoint, input JSON structure, and an example of the success response.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appointmentId\": \"27234000000159008\",\n  \"data\": {\n    \"appointments\": [\n      {\n        \"Appointment_Name\": \"Update appt\",\n        \"Appointment_For\": {\n          \"module\": \"Contacts\",\n          \"name\": \"k m\",\n          \"id\": \"27234000000163029\"\n        },\n        \"Service_Name\": {\n          \"name\": \"mow\",\n          \"id\": \"27234000000168178\"\n        },\n        \"Appointment_Start_Time\": \"2025-02-24T19:33:00Z\",\n        \"Owner\": \"27234000000095001\",\n        \"Location\": \"Business Address\",\n        \"Address\": \"Business Address\",\n        \"Additional_Information\": \"\",\n        \"Remind_At\": [\n          {\n            \"unit\": 30,\n            \"period\": \"minutes\"\n          }\n        ],\n        \"Price\": \"$1.00\"\n      }\n    ]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"code\": \"SUCCESS\",\n    \"message\": \"Record updated\",\n    \"status\": \"success\",\n    \"details\": {\n      \"id\": \"27234000000159008\",\n      \"Created_By\": \"Matea Vasileski\",\n      \"Modified_By\": \"Matea Vasileski\",\n      \"Created_Time\": \"2025-02-24T19:44:23-05:00\",\n      \"Modified_Time\": \"2025-02-26T19:48:20-05:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Protected Ranges in Google Sheets\nDESCRIPTION: Example response from the 'Get Protected Ranges' action showing the structure of protected ranges data. The response includes details like protected range IDs, named range IDs, range coordinates, sheet IDs, and protection settings.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"protectedRanges\": [\n    {\n      \"protectedRangeId\": 1815142986,\n      \"namedRangeId\": \"\",\n      \"range\": \":\",\n      \"sheetId\": 937004904,\n      \"description\": \"\",\n      \"warningOnly\": true,\n      \"requestingUserCanEdit\": true\n    },\n    {\n      \"protectedRangeId\": 640323292,\n      \"namedRangeId\": \"lkk0nrl90uiy\",\n      \"range\": \"F28:F32\",\n      \"sheetId\": 937004904,\n      \"description\": \"\",\n      \"warningOnly\": false,\n      \"requestingUserCanEdit\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Botpress Integration\nDESCRIPTION: Commands to deploy an integration to a workspace, either privately or publicly\nSOURCE: https://github.com/botpress/botpress/blob/master/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbp deploy\nbp deploy --public\n```\n\n----------------------------------------\n\nTITLE: Spreadsheet Metadata Response Structure\nDESCRIPTION: Example response from querying spreadsheet metadata showing the structure of the returned data. The response includes the requested properties of the spreadsheet.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"title\": \"My Spreadsheet\",\n    \"locale\": \"en_US\",\n    \"timeZone\": \"America/New_York\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Sheets Response Format\nDESCRIPTION: Example of response format when retrieving list of all sheets in a spreadsheet.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sheets\": [\n    {\n      \"sheetId\": 904893745,\n      \"title\": \"Time sheet\",\n      \"index\": 0,\n      \"isHidden\": false,\n      \"hasProtectedRanges\": false,\n      \"isFullyProtected\": false\n    },\n    {\n      \"sheetId\": 937004904,\n      \"title\": \"Stats\",\n      \"index\": 1,\n      \"isHidden\": false,\n      \"hasProtectedRanges\": true,\n      \"isFullyProtected\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Values Configuration\nDESCRIPTION: Configuration for retrieving values from a specified range.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"range\": \"Sheet1!A1:C3\",\n  \"majorDimension\": \"ROWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Values Response Format\nDESCRIPTION: Example of response format when retrieving values from a range.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    [\"1\", \"2\", \"3\"],\n    [\"5\", \"6\", \"7\"],\n    [\"9\", \"10\", \"11\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure with COLUMNS Major Dimension\nDESCRIPTION: Example of data structure when major dimension is set to COLUMNS, showing how values are organized column by column.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    [\"1\", \"7\", \"13\"],\n    [\"2\", \"8\", \"14\"],\n    [\"3\", \"9\", \"15\"],\n    [\"4\", \"10\", \"16\"],\n    [\"5\", \"11\", \"17\"],\n    [\"6\", \"12\", \"18\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Few-Shot Examples for Improved Accuracy\nDESCRIPTION: Demonstrates how to provide examples to help the LLM understand the classification criteria better, improving test accuracy.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndescribe('learns from examples', () => {\n  test('examples are used to understand how to classify correctly', () => {\n    const examples = [\n      {\n        expected: true,\n        value: 'Rasa the chatbot framework',\n        reason: 'Rasa is a chatbot framework, so it competes with Botpress',\n      },\n      {\n        expected: false,\n        value: 'Rasa the coffee company',\n        reason: 'Since Rasa is a coffee company, it does not compete with Botpress which is not in the coffee business',\n      },\n    ]\n\n    check('Voiceflow', 'is competitor', { examples }).toBe(true)\n    check('Toyota', 'is competitor', { examples }).toBe(false)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Data Structure with ROWS Major Dimension\nDESCRIPTION: Example of data structure when major dimension is set to ROWS, showing how values are organized row by row.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n    [\"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\n    [\"13\", \"14\", \"15\", \"16\", \"17\", \"18\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Appointment using POST Request\nDESCRIPTION: This snippet shows how to create an appointment in the CRM system using a POST request. It includes the endpoint, input JSON structure, and an example of the success response.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"Appointment_Name\": \"Matea - Mowing Service\",\n    \"Appointment_For\": {\n      \"module\": {\n        \"api_name\": \"Contacts\"\n      },\n      \"name\": \"k m\",\n      \"id\": \"27234000000163029\"\n    },\n    \"Service_Name\": {\n      \"name\": \"mow\",\n      \"id\": \"27234000000168178\"\n    },\n    \"Appointment_Start_Time\": \"2025-02-24T19:33:00Z\",\n    \"Owner\": \"27234000000095001\",\n    \"Location\": \"Business Address\",\n    \"Address\": \"Business Address\",\n    \"Additional_Information\": \"\",\n    \"Remind_At\": [\n      {\n        \"unit\": 30,\n        \"period\": \"minutes\"\n      }\n    ],\n    \"Price\": \"$1.00\"\n  }\n]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"code\": \"SUCCESS\",\n    \"message\": \"Record added\",\n    \"status\": \"success\",\n    \"details\": {\n      \"id\": \"27234000000175008\",\n      \"Created_By\": \"Matea Vasileski\",\n      \"Modified_By\": \"Matea Vasileski\",\n      \"Created_Time\": \"2025-02-26T19:21:59-05:00\",\n      \"Modified_Time\": \"2025-02-26T19:21:59-05:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Appointment using DELETE Request\nDESCRIPTION: This snippet shows how to delete an appointment from the CRM system using a DELETE request. It includes the endpoint, input parameters, and an example of the success response.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"appointmentId\": \"123456\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"code\": \"SUCCESS\",\n    \"message\": \"Record deleted\",\n    \"status\": \"success\",\n    \"details\": {\n      \"id\": \"27234000000159008\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Range with Formula Example\nDESCRIPTION: Example showing how to update a range with values including a formula.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"range\": \"Sheet1!A3:A6\",\n  \"majorDimension\": \"ROWS\",\n  \"values\": [[\"1\", \"2\", \"3\", \"=SUM(Sheet1!A3:A5)\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading a File using POST Request\nDESCRIPTION: This snippet demonstrates how to upload a file to the CRM system using a POST request. It includes the endpoint, input JSON structure, and an example of the success response.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fileUrl\": \"https://example.com/file.pdf\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"File uploaded successfully\",\n  \"data\": {\n    \"code\": \"SUCCESS\",\n    \"message\": \"File uploaded successfully\",\n    \"status\": \"success\",\n    \"details\": {\n      \"name\": \"20250226050635-LO9N1PT0.webp\",\n      \"id\": \"36c38a1979b316686084c58303b1b6cb654eb04f0f1038ed0a8fdf8a6ff28598dceae7f8711509bfd80b56bf8cd4dbba\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a File using GET Request\nDESCRIPTION: This snippet shows how to retrieve a file from the CRM system using a GET request. It includes the endpoint, input parameters, and an example of the JSON response structure.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fileId\": \"dcc53e79cfef0810414e8335b0e11d8882a51116f390194f400828673ca4a59492a22be84db32aa8425d0859862491f9\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"success\":true,\n    \"message\":\"Request successful\",\n    \"data\": BinaryFileData\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Get Records Request\nDESCRIPTION: Example JSON input for retrieving Lead records from Zoho CRM. The request specifies the module and optional parameters like fields to return.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": \"Leads\",\n  \"params\": { \"fields\": \"Email\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Organization Details using GET Request\nDESCRIPTION: This snippet demonstrates how to retrieve organization details from the CRM system using a GET request. It includes the endpoint and an example of the JSON response structure.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"organization\": {\n      \"id\": \"27234000000000684\",\n      \"company_name\": \"Envyro\",\n      \"domain_name\": \"org110000680144\",\n      \"primary_email\": \"matea@envyro.io\",\n      \"currency\": \"Canadian Dollar - CAD\",\n      \"currency_symbol\": \"$\",\n      \"time_zone\": \"America/Toronto\",\n      \"country_code\": \"US\",\n      \"license_details\": {\n        \"paid\": true,\n        \"paid_type\": \"professional\",\n        \"paid_expiry\": \"2025-03-23T20:00:00-04:00\",\n        \"users_license_purchased\": 1\n      },\n      \"created_time\": \"2024-09-11T11:04:19-04:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Get Records Response\nDESCRIPTION: Example JSON response for retrieving Lead records from Zoho CRM. Contains comprehensive information about the Lead including contact details, ownership, and timestamps.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"id\": \"27234000000157008\",\n    \"Full_Name\": \"Jim Mulani\",\n    \"First_Name\": \"Jim\",\n    \"Last_Name\": \"Mulani\",\n    \"Email\": \"updated@email.com\",\n    \"Company\": \"envy\",\n    \"Owner\": {\n      \"name\": \"Matea Vasileski\",\n      \"id\": \"27234000000095001\",\n      \"email\": \"matea@envyro.io\"\n    },\n    \"Created_By\": {\n      \"name\": \"Matea Vasileski\",\n      \"id\": \"27234000000095001\",\n      \"email\": \"matea@envyro.io\"\n    },\n    \"Modified_By\": {\n      \"name\": \"Matea Vasileski\",\n      \"id\": \"27234000000095001\",\n      \"email\": \"matea@envyro.io\"\n    },\n    \"Created_Time\": \"2025-02-23T21:51:21-05:00\",\n    \"Modified_Time\": \"2025-02-26T18:19:10-05:00\",\n    \"Lead_Status\": null,\n    \"Lead_Source\": null,\n    \"Record_Status\": \"Available\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Single Row\nDESCRIPTION: Configuration for appending a single row of data to a table.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"range\": \"Sheet1!A1:C1\",\n  \"majorDimension\": \"ROWS\",\n  \"values\": [[\"Mike\", \"35\", \"SF\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Get Record By ID Request\nDESCRIPTION: Example JSON input for retrieving a specific Lead record by ID from Zoho CRM. The request requires the module name and the unique record identifier.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": \"Leads\",\n  \"recordId\": \"27234000000157008\"\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Multiple Rows\nDESCRIPTION: Configuration for appending multiple rows of data simultaneously.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"range\": \"Sheet1!A1:C1\",\n  \"majorDimension\": \"ROWS\",\n  \"values\": [\n    [\"Mike\", \"35\", \"SF\"],\n    [\"Jane\", \"28\", \"Chicago\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Users using GET Request\nDESCRIPTION: This snippet shows how to retrieve user information from the CRM system using a GET request. It includes the endpoint, input parameters, and an example of the JSON response structure.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"params\": { \"status\": \"active\" }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"27234000000095001\",\n        \"full_name\": \"Matea Vasileski\",\n        \"email\": \"matea@envyro.io\",\n        \"role\": \"CEO\",\n        \"profile\": \"Administrator\",\n        \"status\": \"active\",\n        \"country\": \"Canada\",\n        \"state\": \"Ontario\",\n        \"time_zone\": \"America/Toronto\",\n        \"created_time\": \"2024-09-11T11:04:19-04:00\",\n        \"modified_time\": \"2024-09-11T11:04:19-04:00\"\n      },\n      {\n        \"id\": \"27234000000103062\",\n        \"full_name\": \"Milos Arsik\",\n        \"email\": \"milos@envyro.io\",\n        \"role\": \"CEO\",\n        \"profile\": \"Administrator\",\n        \"status\": \"closed\",\n        \"time_zone\": \"America/Toronto\",\n        \"created_time\": \"2024-09-16T00:36:14-04:00\",\n        \"modified_time\": \"2024-11-01T12:18:54-04:00\"\n      }\n    ],\n    \"pagination\": {\n      \"per_page\": 200,\n      \"count\": 2,\n      \"page\": 1,\n      \"more_records\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Update Record Request\nDESCRIPTION: Example JSON input for updating a Lead record in Zoho CRM. The request specifies the module, record ID, and the data with fields to be updated.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": \"Leads\",\n  \"recordId\": \"27234000000162001\",\n  \"data\": [{ \"Email\": \"updated@email.com\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending an Email using POST Request\nDESCRIPTION: This snippet demonstrates how to send an email through the CRM system using a POST request. It includes the endpoint, input JSON structure, and an example of the success response.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": \"Leads\",\n  \"recordId\": \"123456\",\n  \"data\": [\n    {\n      \"from\": {\n        \"user_name\": \"Matea Vasileski\",\n        \"email\": \"matea@envyro.io\"\n      },\n      \"to\": [\n        {\n          \"user_name\": \"user1\",\n          \"email\": \"milos@envyro.io\"\n        }\n      ],\n      \"cc\": [],\n      \"bcc\": [],\n      \"subject\": \"Important Update\",\n      \"content\": \"Here is an important update for you.\",\n      \"mail_format\": \"html\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"code\": \"SUCCESS\",\n    \"message\": \"Your mail has been sent successfully.\",\n    \"status\": \"success\",\n    \"details\": {\n      \"message_id\": \"2e660cab6382a85766b68e77778eadf168f923354a69b362ace2e52ce0b934ba\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Update Record Response\nDESCRIPTION: Example JSON response after successfully updating a record in Zoho CRM. Contains status information and details about the updated record including timestamps.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"code\": \"SUCCESS\",\n    \"message\": \"Record updated\",\n    \"status\": \"success\",\n    \"details\": {\n      \"id\": \"27234000000157008\",\n      \"Created_By\": \"Matea Vasileski\",\n      \"Modified_By\": \"Matea Vasileski\",\n      \"Created_Time\": \"2025-02-23T21:51:21-05:00\",\n      \"Modified_Time\": \"2025-02-26T18:55:37-05:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Test Flow with Bail on Failure\nDESCRIPTION: Shows how to control test execution by awaiting assertions, which will bail immediately on failure rather than continuing with subsequent test cases.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntest('no bail', () => {\n  check('hello', 'is a greeting message').toBe(false)\n  console.log('this will run as the above is not awaited, it will bail at the end of the test')\n})\n\ntest('bail', async () => {\n  await check('hello', 'is a greeting message').toBe(false)\n  console.log('this will not run, the test has bailed')\n})\n```\n\n----------------------------------------\n\nTITLE: Changing the LLM Evaluator Model\nDESCRIPTION: Demonstrates how to change the underlying LLM model used for evaluations from the default GPT-4o mini to another model like Claude.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntest('simple', () => {\n  setEvaluator('anthropic__claude-3-5-sonnet-20240620')\n  rate('hello', 'is a greeting message').toBe(5)\n})\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Delete Record Response\nDESCRIPTION: Example JSON response after successfully deleting a record from Zoho CRM. Contains status information and the ID of the deleted record.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"code\": \"SUCCESS\",\n    \"message\": \"Record deleted\",\n    \"status\": \"success\",\n    \"details\": {\n      \"id\": \"27234000000157008\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup\nDESCRIPTION: Commands to clone the repository, install dependencies, build packages and run checks\nSOURCE: https://github.com/botpress/botpress/blob/master/readme.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Clone the repository\ngit clone https://github.com/botpress/botpress.git\ncd botpress\n\n# Install dependencies\npnpm install\n\n# Build all packages\npnpm run build\n\n# Run Checks\npnpm run check\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Insert Record Response\nDESCRIPTION: Example JSON response after successfully creating a new record in Zoho CRM. Contains status information and details about the created record including its ID and timestamps.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"code\": \"SUCCESS\",\n    \"message\": \"Record added\",\n    \"status\": \"success\",\n    \"details\": {\n      \"id\": \"27234000000176001\",\n      \"Created_By\": \"Matea Vasileski\",\n      \"Modified_By\": \"Matea Vasileski\",\n      \"Created_Time\": \"2025-02-26T18:39:39-05:00\",\n      \"Modified_Time\": \"2025-02-26T18:39:39-05:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Instructions in Markdown\nDESCRIPTION: Detailed configuration instructions for both automatic OAuth setup and manual integration setup with Notion.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/notion/hub.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Configuration\n\n### Automatic configuration with OAuth (recommended)\n\nThis is the simplest way to set up the integration. To set up the Notion integration using OAuth, click the authorization button and follow the on-screen instructions to connect your Botpress chatbot to Notion.\n```\n\n----------------------------------------\n\nTITLE: Generating a Secure Shared Secret for Pub/Sub Authentication\nDESCRIPTION: Commands for generating a secure random string to use as a shared secret for signing Pub/Sub push events. This secret is used to authenticate webhook calls between Google's Pub/Sub service and Botpress.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gmail/hub.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Using openssl:\nopenssl rand -hex 32\n\n# Using nodejs:\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n\n# Using Python 3:\npython3 -c \"import secrets; print(secrets.token_hex(32))\"\n```\n\n----------------------------------------\n\nTITLE: Using Variables in HITL Configuration for Botpress Studio\nDESCRIPTION: Demonstrates how to use event variables to populate the conversation ID and user ID fields when configuring the HITL plugin in Botpress Studio.\nSOURCE: https://github.com/botpress/botpress/blob/master/plugins/hitl/hub.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIn the conversation ID field, you can use the `{{event.conversationId}}` variable to get the current conversation ID.\nLikewise, you can use the `{{event.userId}}` variable to get the ID of the current user.\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Insert Record Request\nDESCRIPTION: Example JSON input for creating a new Lead record in Zoho CRM. The request specifies the module and the data object with the fields to be populated.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": \"Leads\",\n  \"data\": [{ \"Last_Name\": \"Daly\", \"First_name\": \"Paul\", \"Email\": \"p.daly@zylker.com\" }]\n}\n```\n\n----------------------------------------\n\nTITLE: Version Migration Notice in Markdown\nDESCRIPTION: Documentation section explaining migration from versions 0.x/1.x to 2.x of the Notion integration, highlighting the addition of OAuth support.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/notion/hub.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Migrating from version `0.x` or `1.x` to `2.x`\n\nVersion `2.0` of the Notion integration adds OAuth support, which is now the default configuration option.\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Get Record By ID Response\nDESCRIPTION: Example JSON response for retrieving a specific Lead record by ID. Contains the same comprehensive information as the Get Records response, focused on a single record.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"id\": \"27234000000157008\",\n    \"Full_Name\": \"Jim Mulani\",\n    \"First_Name\": \"Jim\",\n    \"Last_Name\": \"Mulani\",\n    \"Email\": \"updated@email.com\",\n    \"Company\": \"envy\",\n    \"Owner\": {\n      \"name\": \"Matea Vasileski\",\n      \"id\": \"27234000000095001\",\n      \"email\": \"matea@envyro.io\"\n    },\n    \"Created_By\": {\n      \"name\": \"Matea Vasileski\",\n      \"id\": \"27234000000095001\",\n      \"email\": \"matea@envyro.io\"\n    },\n    \"Modified_By\": {\n      \"name\": \"Matea Vasileski\",\n      \"id\": \"27234000000095001\",\n      \"email\": \"matea@envyro.io\"\n    },\n    \"Created_Time\": \"2025-02-23T21:51:21-05:00\",\n    \"Modified_Time\": \"2025-02-26T18:19:10-05:00\",\n    \"Lead_Status\": null,\n    \"Lead_Source\": null,\n    \"Record_Status\": \"Available\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Example for Delete Record Request\nDESCRIPTION: Example JSON input for deleting a Lead record from Zoho CRM. The request specifies the module and the record ID to be deleted.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": \"Leads\",\n  \"recordId\": \"27234000000162008\"\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions in Markdown\nDESCRIPTION: Documentation of available actions for interacting with Notion, including adding comments, working with databases, and deleting blocks.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/notion/hub.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Usage\n\nThe following actions require you to know the Ids of the Notion entities your bot will work with. All notion entities (pages, databases, etc) have and id that can be found in the URL when you visit those in your Notion account in a Browser.\n```\n\n----------------------------------------\n\nTITLE: Searching CRM Records using GET Request\nDESCRIPTION: This snippet demonstrates how to search for records in the CRM system using a GET request. It includes the endpoint, input parameters, and an example of the JSON response structure.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"module\": \"Leads\",\n  \"criteria\": \"(First_Name:equals:John)\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"success\": true,\n  \"message\": \"Request successful\",\n  \"data\": {\n    \"records\": [\n      {\n        \"id\": \"27234000000176001\",\n        \"Full_Name\": \"Daly\",\n        \"Email\": \"p.daly@zylker.com\",\n        \"Created_Time\": \"2025-02-26T18:39:39-05:00\",\n        \"Modified_Time\": \"2025-02-26T18:39:39-05:00\",\n        \"Owner\": {\n          \"name\": \"Matea Vasileski\",\n          \"email\": \"matea@envyro.io\"\n        },\n        \"Record_Status\": \"Available\"\n      },\n      {\n        \"id\": \"27234000000174002\",\n        \"Full_Name\": \"Daly\",\n        \"Email\": \"p.daly@zylker.com\",\n        \"Created_Time\": \"2025-02-26T18:17:10-05:00\",\n        \"Modified_Time\": \"2025-02-26T18:17:10-05:00\",\n        \"Owner\": {\n          \"name\": \"Matea Vasileski\",\n          \"email\": \"matea@envyro.io\"\n        },\n        \"Record_Status\": \"Available\"\n      }\n    ],\n    \"pagination\": {\n      \"per_page\": 200,\n      \"count\": 2,\n      \"page\": 1,\n      \"sort_by\": \"id\",\n      \"sort_order\": \"desc\",\n      \"more_records\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Telegram and Google Sheets Integrations with Botpress CLI\nDESCRIPTION: Command to add the Telegram and Google Sheets integrations to a Botpress bot project.\nSOURCE: https://github.com/botpress/botpress/blob/master/bots/sheetzy/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbp add telegram && bp add gsheets\n```\n\n----------------------------------------\n\nTITLE: Appending Column Data\nDESCRIPTION: Configuration for appending data as a new column using COLUMNS major dimension.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"range\": \"Sheet1!A1:A3\",\n  \"majorDimension\": \"COLUMNS\",\n  \"values\": [[\"Mike\", \"35\", \"SF\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Move Sheet Configuration\nDESCRIPTION: Configuration for moving a sheet to a new position in the spreadsheet.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sheetId\": 937004904,\n  \"newIndex\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Botpress Bot\nDESCRIPTION: Command to deploy a Botpress bot to make it available for use after building.\nSOURCE: https://github.com/botpress/botpress/blob/master/bots/sheetzy/readme.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbp deploy\n```\n\n----------------------------------------\n\nTITLE: Create Named Range Configuration\nDESCRIPTION: Configuration for creating a named range in a spreadsheet.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sheetId\": 937004904,\n  \"name\": \"MyNamedRange\",\n  \"range\": \"Sheet1!A1:B2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Botpress Bot Locally with Shell Commands\nDESCRIPTION: This snippet shows two different methods for running a Botpress bot locally: either serving the built bundle or running directly with ts-node.\nSOURCE: https://github.com/botpress/botpress/blob/master/bots/hello-world/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# 1. To run the bundle created by the build command:\n\nbp serve --port 9999\n\n# 2. To run with ts-node:\n\nstart_script=\"import bot from './src'; void bot.start()\"\nts-node -T -r @botpress/cli/init -e $start_script\n```\n\n----------------------------------------\n\nTITLE: Get Named Ranges Response\nDESCRIPTION: Example of response format when retrieving list of named ranges in a spreadsheet.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namedRanges\": [\n    {\n      \"namedRangeId\": \"1001473037\",\n      \"name\": \"MyRange\",\n      \"range\": \"A1\",\n      \"sheetId\": 206659759\n    },\n    {\n      \"namedRangeId\": \"lkk0nrl90uiy\",\n      \"name\": \"NamedRange1\",\n      \"range\": \"F28:F32\",\n      \"sheetId\": 937004904\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unprotecting a Range in Google Sheets\nDESCRIPTION: Configuration for the 'Unprotect Range' action to remove protection from a specified range. The only required parameter is the protected range ID.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"protectedRangeId\": 1815142986\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Botpress Cognitive Client\nDESCRIPTION: Install the Botpress Cognitive Client and its dependency using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/cognitive/readme.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @botpress/client @botpress/cognitive # for npm\nyarn add @botpress/client @botpress/cognitive # for yarn\npnpm add @botpress/client @botpress/cognitive # for pnpm\n```\n\n----------------------------------------\n\nTITLE: Querying Spreadsheet Metadata in Google Sheets\nDESCRIPTION: Configuration for the 'Get Info of a SpreadSheet' action to retrieve specific metadata fields. The example requests the title, locale, and time zone of the spreadsheet.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/gsheets/hub.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"fields\": [\"properties.title\", \"properties.locale\", \"properties.timeZone\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PowerShell Body to URL-encoded Form Data\nDESCRIPTION: PowerShell command to convert the request body from an associative array to URL-encoded form data format, required for the OAuth token request.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$body = $body | ForEach-Object { \"$( $_.Key )=$( $_.Value )\" } -join \"&\"\n```\n\n----------------------------------------\n\nTITLE: Building a Botpress Bot\nDESCRIPTION: Command to build a Botpress bot project after adding integrations and making changes.\nSOURCE: https://github.com/botpress/botpress/blob/master/bots/sheetzy/readme.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbp build\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with PowerShell\nDESCRIPTION: PowerShell command to send the OAuth token request using Invoke-RestMethod. This makes the POST request with the proper content type and body format.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$response = Invoke-RestMethod -Uri $uri -Method Post -ContentType \"application/x-www-form-urlencoded\" -Body $body\n```\n\n----------------------------------------\n\nTITLE: Outputting Response in PowerShell\nDESCRIPTION: PowerShell command to output the response from the OAuth token request, which contains the access token, refresh token, and other authentication details.\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/zoho/hub.md#2025-04-17_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n$response\n```\n\n----------------------------------------\n\nTITLE: Failure Message Example with Filter Function\nDESCRIPTION: Shows how the filter function can be used with expected failures, which will generate useful error messages.\nSOURCE: https://github.com/botpress/botpress/blob/master/packages/vai/README.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst countries = ['canada', 'germany', 'usa', 'paris', 'mexico']\nfilter(countries, 'is in north america').toBe(['canada', 'usa'])\n```\n\n----------------------------------------\n\nTITLE: Version Reference in Markdown\nDESCRIPTION: Version numbers referenced in the migration section showing the change from version 0.x to 1.x\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/linear/hub.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`0.x` to `1.x`\n```\n\n----------------------------------------\n\nTITLE: Version Number Reference\nDESCRIPTION: Specific version number reference for the breaking change requiring webhook signing secret\nSOURCE: https://github.com/botpress/botpress/blob/master/integrations/linear/hub.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`1.0`\n```\n\n----------------------------------------\n\nTITLE: File Synchronizer Plugin Header\nDESCRIPTION: Markdown header indicating the name/title of the plugin documentation.\nSOURCE: https://github.com/botpress/botpress/blob/master/plugins/file-synchronizer/hub.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# File Synchronizer Plugin\n```"
  }
]