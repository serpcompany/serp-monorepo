[
  {
    "owner": "testcontainers",
    "repo": "testcontainers-rs",
    "content": "TITLE: Using Testcontainers with Blocking API in Rust\nDESCRIPTION: Example of starting a Redis container using the blocking API of testcontainers-rs. This snippet demonstrates how to configure container properties like exposed ports, waiting conditions, network settings, and environment variables.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse testcontainers::{core::{IntoContainerPort, WaitFor}, runners::SyncRunner, GenericImage, ImageExt};\n\n#[test]\nfn test_redis() {\n    let container = GenericImage::new(\"redis\", \"7.2.4\")\n        .with_exposed_port(6379.tcp())\n        .with_wait_for(WaitFor::message_on_stdout(\"Ready to accept connections\"))\n        .with_network(\"bridge\")\n        .with_env_var(\"DEBUG\", \"1\")\n        .start()\n        .expect(\"Failed to start Redis\");\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Redis Client to Container\nDESCRIPTION: Complete example demonstrating how to start a Redis container and configure a Redis client to connect to it, including host and port configuration.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/quickstart/testcontainers.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse redis::Client;\nuse testcontainers::{core::{IntoContainerPort, WaitFor}, runners::AsyncRunner, GenericImage};\n\n#[tokio::test]\nasync fn test_redis() -> Result<(), Box<dyn std::error::Error + 'static>> {\n    let container = GenericImage::new(\"redis\", \"7.2.4\")\n        .with_exposed_port(6379.tcp())\n        .with_wait_for(WaitFor::message_on_stdout(\"Ready to accept connections\"))\n        .start()?\n        .await;\n    let host = container.get_host()?;\n    let host_port = container.get_host_port_ipv4(REDIS_PORT)?;\n\n    let url = format!(\"redis://{host}:{host_port}\");\n    let client = redis::Client::open(url.as_ref())?;\n    // do something with the client\n}\n```\n\n----------------------------------------\n\nTITLE: Using Testcontainers with Async API in Rust\nDESCRIPTION: Example of starting a Redis container using the asynchronous API of testcontainers-rs. Similar to the blocking example, but uses the async/await pattern for asynchronous execution in a Tokio test environment.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse testcontainers::{core::{IntoContainerPort, WaitFor}, runners::AsyncRunner, GenericImage, ImageExt};\n\n#[tokio::test]\nasync fn test_redis() {\n    let container = GenericImage::new(\"redis\", \"7.2.4\")\n        .with_exposed_port(6379.tcp())\n        .with_wait_for(WaitFor::message_on_stdout(\"Ready to accept connections\"))\n        .with_network(\"bridge\")\n        .with_env_var(\"DEBUG\", \"1\")\n        .start()\n        .await\n        .expect(\"Failed to start Redis\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Blocking Redis Container Test in Rust\nDESCRIPTION: Example demonstrating how to start a Redis container using the blocking API. Shows configuration of container ports, wait conditions, networking, and environment variables.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/testcontainers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse testcontainers::{core::{IntoContainerPort, WaitFor}, runners::SyncRunner, GenericImage, ImageExt};\n\n#[test]\nfn test_redis() {\n    let container = GenericImage::new(\"redis\", \"7.2.4\")\n        .with_exposed_port(6379.tcp())\n        .with_wait_for(WaitFor::message_on_stdout(\"Ready to accept connections\"))\n        .with_network(\"bridge\")\n        .with_env_var(\"DEBUG\", \"1\")\n        .start()\n        .expect(\"Failed to start Redis\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Redis Container Test in Rust\nDESCRIPTION: Example showing how to start a Redis container using the async API with Tokio. Demonstrates async container configuration including ports, wait conditions, networking, and environment variables.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/testcontainers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse testcontainers::{core::{IntoContainerPort, WaitFor}, runners::AsyncRunner, GenericImage, ImageExt};\n\n#[tokio::test]\nasync fn test_redis() {\n    let container = GenericImage::new(\"redis\", \"7.2.4\")\n        .with_exposed_port(6379.tcp())\n        .with_wait_for(WaitFor::message_on_stdout(\"Ready to accept connections\"))\n        .with_network(\"bridge\")\n        .with_env_var(\"DEBUG\", \"1\")\n        .start()\n        .await\n        .expect(\"Failed to start Redis\");\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Container with Testcontainers\nDESCRIPTION: Example showing how to create and start a Redis container using GenericImage, including port exposure and readiness conditions.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/quickstart/testcontainers.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse testcontainers::{\n    core::{IntoContainerPort, WaitFor},\n    runners::AsyncRunner,\n    GenericImage,\n};\n\n#[tokio::test]\nasync fn test_redis() {\n    let _container = GenericImage::new(\"redis\", \"7.2.4\")\n        .with_exposed_port(6379.tcp())\n        .with_wait_for(WaitFor::message_on_stdout(\"Ready to accept connections\"))\n        .start()\n        .await\n        .unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wait Strategies in Testcontainers for Rust\nDESCRIPTION: This snippet demonstrates the different variants of the WaitFor enum used for defining wait strategies in Testcontainers for Rust. It includes options for waiting on stdout/stderr messages, container health, HTTP responses, and specific durations.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/features/wait_strategies.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum WaitFor {\n    StdOutMessage,\n    StdErrMessage,\n    Healthcheck,\n    Http,\n    Duration\n}\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL Module with SyncRunner in Rust Testcontainers\nDESCRIPTION: Example of using the PostgreSQL module with SyncRunner in a synchronous test. The code starts a Postgres container with default settings and retrieves the host port to form a connection string.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/quickstart/community_modules.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse testcontainers_modules::{postgres, testcontainers::runners::SyncRunner};\n\n#[test]\nfn test_with_postgres() {\n    let container = postgres::Postgres::default().start().unwrap();\n    let host_port = container.get_host_port_ipv4(5432).unwrap();\n    let connection_string = &format!(\n        \"postgres://postgres:postgres@127.0.0.1:{host_port}/postgres\",\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Redis Container Configuration in Rust Testcontainers\nDESCRIPTION: Example of overriding default module settings for a Redis container. The function creates a custom Redis container with a specific version tag and password environment variable using the ImageExt trait.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/quickstart/community_modules.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse testcontainers_modules:{\n    redis::Redis,\n    testcontainers::{ContainerRequest, ImageExt},\n};\n\n\n/// Create a Redis module with `6.2-alpine` tag and custom password\nfn create_redis() -> ContainerRequest<Redis> {\n    Redis::default()\n        .with_tag(\"6.2-alpine\")\n        .with_env_var((\"REDIS_PASSWORD\", \"my_secret_password\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ExecCommand in Rust Testcontainers\nDESCRIPTION: Demonstrates how to create a new ExecCommand instance with container ready conditions and command wait conditions. The command will execute 'echo Hello, World!' and wait for the output.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/features/exec_commands.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlet command = ExecCommand::new(vec![\"echo\", \"Hello, World!\"])\n    .with_container_ready_conditions(vec![/* conditions */])\n    .with_cmd_ready_condition(CmdWaitFor::message_on_stdout(\"Hello, World!\"));\n```\n\n----------------------------------------\n\nTITLE: Handling ExecResult in Rust Testcontainers\nDESCRIPTION: Shows how to execute a command and process its result, including retrieving the exit code, stdout, and stderr from the command execution.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/features/exec_commands.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet result = container.exec(command).await?;\nlet exit_code = result.exit_code().await?;\nlet stdout = result.stdout_to_vec().await?;\nlet stderr = result.stderr_to_vec().await?;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Startup Timeout in Testcontainers for Rust\nDESCRIPTION: This code snippet shows how to use the ImageExt trait to set a custom startup timeout for containers in Testcontainers for Rust. This method allows you to extend the default 60-second timeout if needed.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/features/wait_strategies.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nImageExt::with_startup_timeout(duration)\n```\n\n----------------------------------------\n\nTITLE: Installing Testcontainers with Cargo\nDESCRIPTION: Commands to add Testcontainers dependency to a Rust project, with options for async or blocking API usage.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/quickstart/testcontainers.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo add testcontainers\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo add testcontainers --features blocking\n```\n\n----------------------------------------\n\nTITLE: Accessing Testcontainers API from Modules\nDESCRIPTION: Example of importing a trait from the testcontainers core library through the testcontainers-modules re-export. This allows using core functionality without explicitly depending on the testcontainers crate.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/quickstart/community_modules.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse testcontainers_modules::testcontainers::ImageExt;\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation of Testcontainers-RS Design Principles\nDESCRIPTION: A structured markdown document outlining the design philosophy and principles for the Testcontainers Rust library, focusing on API simplicity, test reliability, and implementation ease.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/DESIGN_PRINCIPLES.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Design principles\n\nThis document aims to capture the design principles that went into this library.\nIt should serve as a reference point when making decisions on what features to include or exclude.\n\n## Simple\n\nOne of the most important goals that we want to adhere to is creating a _simple_ API.\nOverall, this means keeping the API as small as possible to get the task done.\nWhen in doubt, we'd rather not add flags or configuration options for certain use cases.\n\nTests should be easier to write, easy to understand and easy to maintain.\n`testcontainers` aims to support this as much as possible.\nHaving too many configuration options makes it harder for users to achieve this goal.\n\nAnother advantage of a small, public API is that we have to make fewer breaking changes.\nThis makes upgrades easier for our users.\n\n## Reliable\n\nTests need to be reliable to provide value.\nWe strive to make `testcontainers` as reliable as possible and try to control as many aspects of the container to make sure they work consistently.\n\nOne consequence of this decision is that the container _tag_ is typically not configurable for images that ship with `testcontainers`.\nWhilst an image behind a tag can also change, image authors tend to preserve compatibility there.\nIf we were to allow users to change the `tag` of an image, we wouldn't be able to guarantee that it works because we cannot test all combinations.\n\n## Ease of use\n\nThe library should be easy to use.\nFor example, users should be able to make their own implementation of `Image` without much boilerplate.\nIn fact, the path forward may very well be that we stop shipping a lot of images in the crate and instead require users to create their own images.\n```\n\n----------------------------------------\n\nTITLE: Setting up Python Environment for Documentation Preview\nDESCRIPTION: Commands for setting up a Python virtual environment and installing dependencies to preview the MkDocs documentation locally. This includes creating a virtualenv, activating it, and starting the MkDocs server.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/docs/contributing_docs.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv tc-venv\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource tc-venv/bin/activate\n```\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements.txt && ./tc-venv/bin/mkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Running Rustfmt with Nightly Toolchain for Code Formatting\nDESCRIPTION: This command demonstrates how to run the Rust formatter (rustfmt) using the nightly toolchain. It formats all project files and checks for formatting issues without making changes.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo +nightly fmt --all -- --check\n```\n\n----------------------------------------\n\nTITLE: Defining MkDocs Package Requirements with Exact Versions\nDESCRIPTION: This requirements file specifies the exact versions of MkDocs and related plugins needed for building documentation. It includes the core MkDocs package, the Material theme, and several plugins for code inclusion and markdown processing.\nSOURCE: https://github.com/testcontainers/testcontainers-rs/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmkdocs==1.5.3\nmkdocs-codeinclude-plugin==0.2.1\nmkdocs-include-markdown-plugin==6.0.4\nmkdocs-material==9.5.18\nmkdocs-markdownextradata-plugin==0.2.5\n```"
  }
]