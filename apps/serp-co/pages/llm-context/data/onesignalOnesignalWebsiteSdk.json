[
  {
    "owner": "onesignal",
    "repo": "onesignal-website-sdk",
    "content": "TITLE: Updating Script Import for OneSignal SDK v16 in HTML\nDESCRIPTION: Replace the old script import with the new one on all pages using OneSignal. This update is required for the v16 migration.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script\\n  src=\"https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.page.js\"\\n  defer\\n></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK v16 with Deferred Push in JavaScript\nDESCRIPTION: Replace OneSignal.push with OneSignalDeferred.push and use an async function to initialize OneSignal. This new approach is required for v16.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.OneSignalDeferred = window.OneSignalDeferred || [];\\nOneSignalDeferred.push(async function (OneSignal) {\\n  await OneSignal.init({});\\n});\n```\n\n----------------------------------------\n\nTITLE: Using OneSignal User Namespace in JavaScript\nDESCRIPTION: Demonstrate usage of the new User namespace for operations like adding aliases, emails, SMS, and tags. These methods are part of the new user-centered API in v16.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nOneSignal.User.addAlias('my_alias', '1234');\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permission with OneSignal\nDESCRIPTION: Example of using the OneSignal Notifications namespace to request push notification permission from the user. This async method displays the native browser permission prompt.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nawait OneSignal.Notifications.requestPermission();\n```\n\n----------------------------------------\n\nTITLE: Opting Into Push Notifications with OneSignal\nDESCRIPTION: Example of using the PushSubscription namespace to opt a user into push notifications. This subscribes the current user to receive push notifications through OneSignal.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nOneSignal.User.PushSubscription.optIn();\n```\n\n----------------------------------------\n\nTITLE: Using OneSignal login Method in JavaScript\nDESCRIPTION: Replace setExternalId with the new login method to identify users. This change is part of the shift to a user-centered model in v16.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nOneSignal.login('myId');\n```\n\n----------------------------------------\n\nTITLE: Displaying OneSignal Permission Prompt Slidedown\nDESCRIPTION: Example of using the OneSignal Slidedown namespace to display a custom permission prompt. This displays the notification permission slidedown UI instead of the native browser prompt.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait OneSignal.Slidedown.promptPush();\n```\n\n----------------------------------------\n\nTITLE: Updating Service Worker Import for OneSignal SDK v16 in JavaScript\nDESCRIPTION: Update the service worker file to use the new v16 SDK. This change is necessary in the OneSignalSDKWorker.js file.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimportScripts('https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.sw.js');\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Service Worker in OneSignal SDK v16\nDESCRIPTION: Update the configuration for custom service workers to use the new init method. This change is necessary if you've customized the OneSignal Service Worker.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait OneSignal.init({\\n  // ... keep other pre-existing params, such as appId\\n  serviceWorkerParam: { scope: '/myCustomScope' },\\n  serviceWorkerPath: '/myPath/OneSignalSDKWorker.js',\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server\nDESCRIPTION: Commands for setting up the local development environment. Installs required dependencies and starts a development server on port 4001 that registers OneSignalSDKWorker.js as a service worker.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building and Previewing the SDK\nDESCRIPTION: Commands for building the SDK bundle in development mode and running the preview environment using either Docker or npm.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:dev\ncd preview\ndocker-compose up\n# or\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting up a basic test environment in TypeScript for OneSignal SDK\nDESCRIPTION: This snippet demonstrates how to set up a basic test file using Vi for mocking and the TestEnvironment for initialization. It includes setup for fake timers and mocking an entire file.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/__test__/README.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestEnvironment } from '../../support/environment/TestEnvironment';\n\n// mock an entire file\nvi.mock('../../../src/MyFile');\n\ndescribe('My tests', () => {\n  beforeEach(() => {\n    vi.useFakeTimers();\n    TestEnvironment.initialize();\n  });\n\n  afterEach(() => {\n    vi.resetAllMocks();\n  });\n\n  test('This is a test description', () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Mocking HTTP requests using MSW in OneSignal SDK tests\nDESCRIPTION: This snippet shows how to use Mock Service Worker (MSW) to mock HTTP requests. It provides examples of mocking specific URLs and using wildcards, with the ability to specify response status and body.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/__test__/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { server } from '__test__/support/mocks/server';\nimport { http, HttpResponse } from 'msw';\n\nserver.use(\n  http.get('https://api.onesignal.com/v1/notifications', () =>\n    HttpResponse.json({ result: {}, status: 200 }),\n  ),\n);\n\n// or\n\nserver.use(\n  http.get('**/v1/notifications', () =>\n    HttpResponse.json({ result: {}, status: 200 }),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level in OneSignal SDK\nDESCRIPTION: Example of using the Debug namespace to set the log level for OneSignal SDK. This enables detailed logging for development and troubleshooting purposes with different verbosity levels.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/MIGRATION_GUIDE.md#2025-04-18_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nOneSignal.Debug.setLogLevel(\"trace\");\n```\n\n----------------------------------------\n\nTITLE: Mocking API responses using nock in OneSignal SDK tests\nDESCRIPTION: This snippet demonstrates how to use a custom nock helper to mock a response for a fetch call. It's noted as not recommended, suggesting there might be better alternatives.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/__test__/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { nock } from '__test__/support/mocks/nock';\n\nnock({}, 400);\n\nawait someFetchCall();\n```\n\n----------------------------------------\n\nTITLE: Suppressing internal logging in OneSignal SDK tests\nDESCRIPTION: This snippet shows how to suppress all internal logging in tests by mocking the entire Log file. This is useful when a test may result in an error being printed but still succeeds.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/__test__/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// suppress all internal logging\nvi.mock('../../../src/shared/libraries/Log');\n```\n\n----------------------------------------\n\nTITLE: Building SDK with Same Environment Type\nDESCRIPTION: NPM command to build the SDK with the same environment type for both BUILD and API environments. Available options are dev, staging, and prod.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:<type>\n```\n\n----------------------------------------\n\nTITLE: Building SDK with Different Environment Types\nDESCRIPTION: NPM command to build the SDK with different environment types for BUILD and API environments, allowing for mixed configurations like development build with production API.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:<type>-<type>\n```\n\n----------------------------------------\n\nTITLE: Building SDK with Custom API Origin\nDESCRIPTION: Example command to build the SDK with a custom API origin, setting the API calls to go to the 'texas' host while using production environment configuration.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nAPI_ORIGIN=texas npm run build:dev-prod\n```\n\n----------------------------------------\n\nTITLE: Building SDK with Custom BUILD and API Origins\nDESCRIPTION: Example command to build the SDK with custom origins for both BUILD and API environments, configuring where SDK files are fetched from and where API calls are directed.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nBUILD_ORIGIN=localhost API_ORIGIN=texas npm run build:dev-dev\n```\n\n----------------------------------------\n\nTITLE: Copying SSL Certificate from Docker Container\nDESCRIPTION: Command to copy the SSL certificate from the Docker container to the host machine, which is necessary for secure connections to the WebSDK sandbox environment.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker cp \"$(docker-compose ps -q onesignal-web-sdk-dev)\":sdk/preview/certs/dev-ssl.crt .\n```\n\n----------------------------------------\n\nTITLE: Adding SSL Certificate to Trusted Store on macOS\nDESCRIPTION: Command to add the SSL certificate to the macOS system's trusted certificate store, enabling secure connections to the local development environment.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain dev-ssl.crt\n```\n\n----------------------------------------\n\nTITLE: Adding SSL Certificate to Trusted Store on Windows\nDESCRIPTION: PowerShell command to import the SSL certificate to the Windows trusted certificate store, enabling secure connections to the local development environment.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nImport-Certificate -FilePath dev-ssl.crt -CertStoreLocation cert:\\CurrentUser\\Root\n```\n\n----------------------------------------\n\nTITLE: Building SDK with HTTP Instead of HTTPS\nDESCRIPTION: Example commands to build the SDK using HTTP instead of the default HTTPS, with options for specifying a custom BUILD origin.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS=false npm run build:dev-prod\n```\n\nLANGUAGE: bash\nCODE:\n```\nHTTPS=false BUILD_ORIGIN=localhost npm run build:dev-prod\n```\n\n----------------------------------------\n\nTITLE: Example Hosts File Configuration\nDESCRIPTION: Example configuration for the /etc/hosts file to map a custom hostname to an IP address, useful when running the OneSignal container on a different machine.\nSOURCE: https://github.com/OneSignal/OneSignal-Website-SDK/blob/main/preview/README.md#2025-04-18_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n// file: /etc/hosts\n\n192.168.40.21 texas\n```"
  }
]